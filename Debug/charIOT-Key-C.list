
charIOT-Key-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d340  08010b68  08010b68  00020b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dea8  0801dea8  000300f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801dea8  0801dea8  0002dea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801deb0  0801deb0  000300f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801deb0  0801deb0  0002deb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801deb4  0801deb4  0002deb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0801deb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c104  200000f0  0801dfa8  000300f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c1f4  0801dfa8  0003c1f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00068839  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006453  00000000  00000000  00098959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004988  00000000  00000000  0009edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004680  00000000  00000000  000a3738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261c9  00000000  00000000  000a7db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003130d  00000000  00000000  000cdf81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104d8e  00000000  00000000  000ff28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  0020401c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014a1c  00000000  00000000  00204068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010b4c 	.word	0x08010b4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	08010b4c 	.word	0x08010b4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c30:	f000 b974 	b.w	8000f1c <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468e      	mov	lr, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d14d      	bne.n	8000cf6 <__udivmoddi4+0xaa>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	d969      	bls.n	8000d34 <__udivmoddi4+0xe8>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b152      	cbz	r2, 8000c7c <__udivmoddi4+0x30>
 8000c66:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6a:	f1c2 0120 	rsb	r1, r2, #32
 8000c6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c76:	ea41 0e03 	orr.w	lr, r1, r3
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	0c21      	lsrs	r1, r4, #16
 8000c82:	fbbe f6f8 	udiv	r6, lr, r8
 8000c86:	fa1f f78c 	uxth.w	r7, ip
 8000c8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c92:	fb06 f107 	mul.w	r1, r6, r7
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x64>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ca2:	f080 811f 	bcs.w	8000ee4 <__udivmoddi4+0x298>
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	f240 811c 	bls.w	8000ee4 <__udivmoddi4+0x298>
 8000cac:	3e02      	subs	r6, #2
 8000cae:	4463      	add	r3, ip
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc0:	fb00 f707 	mul.w	r7, r0, r7
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x92>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd0:	f080 810a 	bcs.w	8000ee8 <__udivmoddi4+0x29c>
 8000cd4:	42a7      	cmp	r7, r4
 8000cd6:	f240 8107 	bls.w	8000ee8 <__udivmoddi4+0x29c>
 8000cda:	4464      	add	r4, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	1be4      	subs	r4, r4, r7
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	b11d      	cbz	r5, 8000cf0 <__udivmoddi4+0xa4>
 8000ce8:	40d4      	lsrs	r4, r2
 8000cea:	2300      	movs	r3, #0
 8000cec:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d909      	bls.n	8000d0e <__udivmoddi4+0xc2>
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	f000 80ef 	beq.w	8000ede <__udivmoddi4+0x292>
 8000d00:	2600      	movs	r6, #0
 8000d02:	e9c5 0100 	strd	r0, r1, [r5]
 8000d06:	4630      	mov	r0, r6
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	fab3 f683 	clz	r6, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d14a      	bne.n	8000dac <__udivmoddi4+0x160>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xd4>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 80f9 	bhi.w	8000f12 <__udivmoddi4+0x2c6>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb61 0303 	sbc.w	r3, r1, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	469e      	mov	lr, r3
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e0      	beq.n	8000cf0 <__udivmoddi4+0xa4>
 8000d2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d32:	e7dd      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000d34:	b902      	cbnz	r2, 8000d38 <__udivmoddi4+0xec>
 8000d36:	deff      	udf	#255	; 0xff
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	f040 8092 	bne.w	8000e66 <__udivmoddi4+0x21a>
 8000d42:	eba1 010c 	sub.w	r1, r1, ip
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f fe8c 	uxth.w	lr, ip
 8000d4e:	2601      	movs	r6, #1
 8000d50:	0c20      	lsrs	r0, r4, #16
 8000d52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d56:	fb07 1113 	mls	r1, r7, r3, r1
 8000d5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5e:	fb0e f003 	mul.w	r0, lr, r3
 8000d62:	4288      	cmp	r0, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x12c>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x12a>
 8000d70:	4288      	cmp	r0, r1
 8000d72:	f200 80cb 	bhi.w	8000f0c <__udivmoddi4+0x2c0>
 8000d76:	4643      	mov	r3, r8
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d80:	fb07 1110 	mls	r1, r7, r0, r1
 8000d84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d88:	fb0e fe00 	mul.w	lr, lr, r0
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x156>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x154>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 80bb 	bhi.w	8000f16 <__udivmoddi4+0x2ca>
 8000da0:	4608      	mov	r0, r1
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000dac:	f1c6 0720 	rsb	r7, r6, #32
 8000db0:	40b3      	lsls	r3, r6
 8000db2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dba:	fa20 f407 	lsr.w	r4, r0, r7
 8000dbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	40f9      	lsrs	r1, r7
 8000dc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dca:	fa00 f306 	lsl.w	r3, r0, r6
 8000dce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dd2:	0c20      	lsrs	r0, r4, #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ddc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de0:	fb08 f00e 	mul.w	r0, r8, lr
 8000de4:	4288      	cmp	r0, r1
 8000de6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dea:	d90b      	bls.n	8000e04 <__udivmoddi4+0x1b8>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df4:	f080 8088 	bcs.w	8000f08 <__udivmoddi4+0x2bc>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f240 8085 	bls.w	8000f08 <__udivmoddi4+0x2bc>
 8000dfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e18:	458e      	cmp	lr, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x1e2>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e24:	d26c      	bcs.n	8000f00 <__udivmoddi4+0x2b4>
 8000e26:	458e      	cmp	lr, r1
 8000e28:	d96a      	bls.n	8000f00 <__udivmoddi4+0x2b4>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e32:	fba0 9402 	umull	r9, r4, r0, r2
 8000e36:	eba1 010e 	sub.w	r1, r1, lr
 8000e3a:	42a1      	cmp	r1, r4
 8000e3c:	46c8      	mov	r8, r9
 8000e3e:	46a6      	mov	lr, r4
 8000e40:	d356      	bcc.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e42:	d053      	beq.n	8000eec <__udivmoddi4+0x2a0>
 8000e44:	b15d      	cbz	r5, 8000e5e <__udivmoddi4+0x212>
 8000e46:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e52:	fa22 f306 	lsr.w	r3, r2, r6
 8000e56:	40f1      	lsrs	r1, r6
 8000e58:	431f      	orrs	r7, r3
 8000e5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5e:	2600      	movs	r6, #0
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	f1c2 0320 	rsb	r3, r2, #32
 8000e6a:	40d8      	lsrs	r0, r3
 8000e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e70:	fa21 f303 	lsr.w	r3, r1, r3
 8000e74:	4091      	lsls	r1, r2
 8000e76:	4301      	orrs	r1, r0
 8000e78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7c:	fa1f fe8c 	uxth.w	lr, ip
 8000e80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e84:	fb07 3610 	mls	r6, r7, r0, r3
 8000e88:	0c0b      	lsrs	r3, r1, #16
 8000e8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e92:	429e      	cmp	r6, r3
 8000e94:	fa04 f402 	lsl.w	r4, r4, r2
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x260>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ea2:	d22f      	bcs.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea4:	429e      	cmp	r6, r3
 8000ea6:	d92d      	bls.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	1b9b      	subs	r3, r3, r6
 8000eae:	b289      	uxth	r1, r1
 8000eb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x28a>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ecc:	d216      	bcs.n	8000efc <__udivmoddi4+0x2b0>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d914      	bls.n	8000efc <__udivmoddi4+0x2b0>
 8000ed2:	3e02      	subs	r6, #2
 8000ed4:	4461      	add	r1, ip
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000edc:	e738      	b.n	8000d50 <__udivmoddi4+0x104>
 8000ede:	462e      	mov	r6, r5
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e705      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	e6e3      	b.n	8000cb0 <__udivmoddi4+0x64>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6f8      	b.n	8000cde <__udivmoddi4+0x92>
 8000eec:	454b      	cmp	r3, r9
 8000eee:	d2a9      	bcs.n	8000e44 <__udivmoddi4+0x1f8>
 8000ef0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7a3      	b.n	8000e44 <__udivmoddi4+0x1f8>
 8000efc:	4646      	mov	r6, r8
 8000efe:	e7ea      	b.n	8000ed6 <__udivmoddi4+0x28a>
 8000f00:	4620      	mov	r0, r4
 8000f02:	e794      	b.n	8000e2e <__udivmoddi4+0x1e2>
 8000f04:	4640      	mov	r0, r8
 8000f06:	e7d1      	b.n	8000eac <__udivmoddi4+0x260>
 8000f08:	46d0      	mov	r8, sl
 8000f0a:	e77b      	b.n	8000e04 <__udivmoddi4+0x1b8>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	e732      	b.n	8000d78 <__udivmoddi4+0x12c>
 8000f12:	4630      	mov	r0, r6
 8000f14:	e709      	b.n	8000d2a <__udivmoddi4+0xde>
 8000f16:	4464      	add	r4, ip
 8000f18:	3802      	subs	r0, #2
 8000f1a:	e742      	b.n	8000da2 <__udivmoddi4+0x156>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af02      	add	r7, sp, #8
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	4608      	mov	r0, r1
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4603      	mov	r3, r0
 8000f30:	817b      	strh	r3, [r7, #10]
 8000f32:	460b      	mov	r3, r1
 8000f34:	813b      	strh	r3, [r7, #8]
 8000f36:	4613      	mov	r3, r2
 8000f38:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000f3a:	897a      	ldrh	r2, [r7, #10]
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b298      	uxth	r0, r3
 8000f42:	893a      	ldrh	r2, [r7, #8]
 8000f44:	8b3b      	ldrh	r3, [r7, #24]
 8000f46:	4413      	add	r3, r2
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	893a      	ldrh	r2, [r7, #8]
 8000f4c:	8979      	ldrh	r1, [r7, #10]
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	4603      	mov	r3, r0
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f001 faf0 	bl	8002538 <u8g2_IsIntersection>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d012      	beq.n	8000f84 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8000f5e:	e00d      	b.n	8000f7c <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	893a      	ldrh	r2, [r7, #8]
 8000f64:	8979      	ldrh	r1, [r7, #10]
 8000f66:	2000      	movs	r0, #0
 8000f68:	9000      	str	r0, [sp, #0]
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f001 f9dd 	bl	800232a <u8g2_DrawHVLine>
    y++;    
 8000f70:	893b      	ldrh	r3, [r7, #8]
 8000f72:	3301      	adds	r3, #1
 8000f74:	813b      	strh	r3, [r7, #8]
    h--;
 8000f76:	8b3b      	ldrh	r3, [r7, #24]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8000f7c:	8b3b      	ldrh	r3, [r7, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1ee      	bne.n	8000f60 <u8g2_DrawBox+0x40>
 8000f82:	e000      	b.n	8000f86 <u8g2_DrawBox+0x66>
    return;
 8000f84:	bf00      	nop
  }
}
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	4608      	mov	r0, r1
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	817b      	strh	r3, [r7, #10]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	813b      	strh	r3, [r7, #8]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8000fa6:	897b      	ldrh	r3, [r7, #10]
 8000fa8:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000faa:	897a      	ldrh	r2, [r7, #10]
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b298      	uxth	r0, r3
 8000fb2:	893a      	ldrh	r2, [r7, #8]
 8000fb4:	8c3b      	ldrh	r3, [r7, #32]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	893a      	ldrh	r2, [r7, #8]
 8000fbc:	8979      	ldrh	r1, [r7, #10]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f001 fab8 	bl	8002538 <u8g2_IsIntersection>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d037      	beq.n	800103e <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	893a      	ldrh	r2, [r7, #8]
 8000fd2:	8979      	ldrh	r1, [r7, #10]
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	9000      	str	r0, [sp, #0]
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f001 f9a6 	bl	800232a <u8g2_DrawHVLine>
  if (h >= 2) {
 8000fde:	8c3b      	ldrh	r3, [r7, #32]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d92d      	bls.n	8001040 <u8g2_DrawFrame+0xb4>
    h-=2;
 8000fe4:	8c3b      	ldrh	r3, [r7, #32]
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	843b      	strh	r3, [r7, #32]
    y++;
 8000fea:	893b      	ldrh	r3, [r7, #8]
 8000fec:	3301      	adds	r3, #1
 8000fee:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8000ff0:	8c3b      	ldrh	r3, [r7, #32]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d01a      	beq.n	800102c <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8000ff6:	8c3b      	ldrh	r3, [r7, #32]
 8000ff8:	893a      	ldrh	r2, [r7, #8]
 8000ffa:	8979      	ldrh	r1, [r7, #10]
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	9000      	str	r0, [sp, #0]
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f001 f992 	bl	800232a <u8g2_DrawHVLine>
      x+=w;
 8001006:	897a      	ldrh	r2, [r7, #10]
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4413      	add	r3, r2
 800100c:	817b      	strh	r3, [r7, #10]
      x--;
 800100e:	897b      	ldrh	r3, [r7, #10]
 8001010:	3b01      	subs	r3, #1
 8001012:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001014:	8c3b      	ldrh	r3, [r7, #32]
 8001016:	893a      	ldrh	r2, [r7, #8]
 8001018:	8979      	ldrh	r1, [r7, #10]
 800101a:	2001      	movs	r0, #1
 800101c:	9000      	str	r0, [sp, #0]
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f001 f983 	bl	800232a <u8g2_DrawHVLine>
      y+=h;
 8001024:	893a      	ldrh	r2, [r7, #8]
 8001026:	8c3b      	ldrh	r3, [r7, #32]
 8001028:	4413      	add	r3, r2
 800102a:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	893a      	ldrh	r2, [r7, #8]
 8001030:	8af9      	ldrh	r1, [r7, #22]
 8001032:	2000      	movs	r0, #0
 8001034:	9000      	str	r0, [sp, #0]
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f001 f977 	bl	800232a <u8g2_DrawHVLine>
 800103c:	e000      	b.n	8001040 <u8g2_DrawFrame+0xb4>
    return;
 800103e:	bf00      	nop
  }
}
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	7c1b      	ldrb	r3, [r3, #16]
 8001054:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800105c:	461a      	mov	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	fb02 f303 	mul.w	r3, r2, r3
 8001064:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f00d fee3 	bl	800ee40 <memset>
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af02      	add	r7, sp, #8
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	70fb      	strb	r3, [r7, #3]
 800108e:	4613      	mov	r3, r2
 8001090:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	7c1b      	ldrb	r3, [r3, #16]
 8001098:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	89ba      	ldrh	r2, [r7, #12]
 80010aa:	fb12 f303 	smulbb	r3, r2, r3
 80010ae:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80010b0:	89bb      	ldrh	r3, [r7, #12]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80010b6:	89bb      	ldrh	r3, [r7, #12]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	4413      	add	r3, r2
 80010bc:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80010be:	7bf9      	ldrb	r1, [r7, #15]
 80010c0:	78ba      	ldrb	r2, [r7, #2]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	460b      	mov	r3, r1
 80010c8:	2100      	movs	r1, #0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f001 ff9d 	bl	800300a <u8x8_DrawTile>
}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010ea:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010f2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	7c5b      	ldrb	r3, [r3, #17]
 80010fa:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80010fc:	7bba      	ldrb	r2, [r7, #14]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4619      	mov	r1, r3
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffbd 	bl	8001082 <u8g2_send_tile_row>
    src_row++;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	3301      	adds	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	3301      	adds	r3, #1
 8001112:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	7b7b      	ldrb	r3, [r7, #13]
 8001118:	429a      	cmp	r2, r3
 800111a:	d203      	bcs.n	8001124 <u8g2_send_buffer+0x4c>
 800111c:	7bba      	ldrb	r2, [r7, #14]
 800111e:	7b3b      	ldrb	r3, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d3eb      	bcc.n	80010fc <u8g2_send_buffer+0x24>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ffcf 	bl	80010d8 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f001 ffb6 	bl	80030ac <u8x8_RefreshDisplay>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	78fa      	ldrb	r2, [r7, #3]
 8001158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	4798      	blx	r3
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff5b 	bl	8001046 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001190:	2100      	movs	r1, #0
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffd8 	bl	8001148 <u8g2_SetBufferCurrTileRow>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff95 	bl	80010d8 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011b4:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4413      	add	r3, r2
 80011c0:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	7c5b      	ldrb	r3, [r3, #17]
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d304      	bcc.n	80011d8 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f001 ff6c 	bl	80030ac <u8x8_RefreshDisplay>
    return 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	e00d      	b.n	80011f4 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff2f 	bl	8001046 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	4619      	mov	r1, r3
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ffab 	bl	8001148 <u8g2_SetBufferCurrTileRow>
  return 1;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af02      	add	r7, sp, #8
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	4608      	mov	r0, r1
 8001206:	4611      	mov	r1, r2
 8001208:	461a      	mov	r2, r3
 800120a:	4603      	mov	r3, r0
 800120c:	817b      	strh	r3, [r7, #10]
 800120e:	460b      	mov	r3, r1
 8001210:	813b      	strh	r3, [r7, #8]
 8001212:	4613      	mov	r3, r2
 8001214:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 8001216:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001218:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 800121a:	2308      	movs	r3, #8
 800121c:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800122c:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8001234:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800123c:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 8001248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800124a:	3301      	adds	r3, #1
 800124c:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 800124e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001250:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 8001252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001254:	3301      	adds	r3, #1
 8001256:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 800125c:	8b7a      	ldrh	r2, [r7, #26]
 800125e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 8001264:	8b7a      	ldrh	r2, [r7, #26]
 8001266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 800126c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800126e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001270:	4413      	add	r3, r2
 8001272:	b29b      	uxth	r3, r3
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	b29a      	uxth	r2, r3
 8001278:	8c3b      	ldrh	r3, [r7, #32]
 800127a:	4413      	add	r3, r2
 800127c:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 800127e:	893b      	ldrh	r3, [r7, #8]
 8001280:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	4798      	blx	r3
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	8afb      	ldrh	r3, [r7, #22]
 8001290:	4413      	add	r3, r2
 8001292:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8001294:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001298:	b29b      	uxth	r3, r3
 800129a:	8afa      	ldrh	r2, [r7, #22]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 80012a0:	8afa      	ldrh	r2, [r7, #22]
 80012a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 80012a8:	8afa      	ldrh	r2, [r7, #22]
 80012aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 80012b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	b21b      	sxth	r3, r3
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80012c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80012c6:	440b      	add	r3, r1
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4413      	add	r3, r2
 80012d0:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 80012d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d067      	beq.n	80013a8 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 80012d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012dc:	429a      	cmp	r2, r3
 80012de:	d109      	bne.n	80012f4 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 80012e0:	7f7b      	ldrb	r3, [r7, #29]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	bf0c      	ite	eq
 80012e6:	2301      	moveq	r3, #1
 80012e8:	2300      	movne	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4619      	mov	r1, r3
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f001 f8d8 	bl	80024a4 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 80012f4:	8b38      	ldrh	r0, [r7, #24]
 80012f6:	8afa      	ldrh	r2, [r7, #22]
 80012f8:	8b79      	ldrh	r1, [r7, #26]
 80012fa:	8abb      	ldrh	r3, [r7, #20]
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	4603      	mov	r3, r0
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f7ff fe43 	bl	8000f8c <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001306:	7f7b      	ldrb	r3, [r7, #29]
 8001308:	4619      	mov	r1, r3
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f001 f8ca 	bl	80024a4 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	f003 0318 	and.w	r3, r3, #24
 8001316:	2b00      	cmp	r3, #0
 8001318:	d042      	beq.n	80013a0 <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 800131a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	429a      	cmp	r2, r3
 8001324:	d13c      	bne.n	80013a0 <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	10db      	asrs	r3, r3, #3
 800132a:	b29b      	uxth	r3, r3
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 8001332:	8a7b      	ldrh	r3, [r7, #18]
 8001334:	3b01      	subs	r3, #1
 8001336:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 8001338:	2300      	movs	r3, #0
 800133a:	847b      	strh	r3, [r7, #34]	; 0x22
 800133c:	e02c      	b.n	8001398 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 800133e:	8b7a      	ldrh	r2, [r7, #26]
 8001340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001342:	4413      	add	r3, r2
 8001344:	b29a      	uxth	r2, r3
 8001346:	8a7b      	ldrh	r3, [r7, #18]
 8001348:	4413      	add	r3, r2
 800134a:	b299      	uxth	r1, r3
 800134c:	8afa      	ldrh	r2, [r7, #22]
 800134e:	8abb      	ldrh	r3, [r7, #20]
 8001350:	4413      	add	r3, r2
 8001352:	b29a      	uxth	r2, r3
 8001354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001356:	4413      	add	r3, r2
 8001358:	b29a      	uxth	r2, r3
 800135a:	8a7b      	ldrh	r3, [r7, #18]
 800135c:	4413      	add	r3, r2
 800135e:	b29a      	uxth	r2, r3
 8001360:	8b3b      	ldrh	r3, [r7, #24]
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f001 f86c 	bl	8002440 <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 8001368:	8b7a      	ldrh	r2, [r7, #26]
 800136a:	8b3b      	ldrh	r3, [r7, #24]
 800136c:	4413      	add	r3, r2
 800136e:	b29a      	uxth	r2, r3
 8001370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001372:	4413      	add	r3, r2
 8001374:	b29a      	uxth	r2, r3
 8001376:	8a7b      	ldrh	r3, [r7, #18]
 8001378:	4413      	add	r3, r2
 800137a:	b299      	uxth	r1, r3
 800137c:	8afa      	ldrh	r2, [r7, #22]
 800137e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001380:	4413      	add	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	8a7b      	ldrh	r3, [r7, #18]
 8001386:	4413      	add	r3, r2
 8001388:	b29a      	uxth	r2, r3
 800138a:	8abb      	ldrh	r3, [r7, #20]
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f001 f870 	bl	8002472 <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 8001392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001394:	3301      	adds	r3, #1
 8001396:	847b      	strh	r3, [r7, #34]	; 0x22
 8001398:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800139a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800139c:	429a      	cmp	r2, r3
 800139e:	d3ce      	bcc.n	800133e <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 80013a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013a2:	3b01      	subs	r3, #1
 80013a4:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 80013a6:	e757      	b.n	8001258 <u8g2_DrawButtonFrame+0x5c>
      break;
 80013a8:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d011      	beq.n	80013d8 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 80013b4:	2102      	movs	r1, #2
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f001 f874 	bl	80024a4 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 80013bc:	8b38      	ldrh	r0, [r7, #24]
 80013be:	8afa      	ldrh	r2, [r7, #22]
 80013c0:	8b79      	ldrh	r1, [r7, #26]
 80013c2:	8abb      	ldrh	r3, [r7, #20]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4603      	mov	r3, r0
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f7ff fda9 	bl	8000f20 <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 80013ce:	7f7b      	ldrb	r3, [r7, #29]
 80013d0:	4619      	mov	r1, r3
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f001 f866 	bl	80024a4 <u8g2_SetDrawColor>
  }
}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af04      	add	r7, sp, #16
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	4608      	mov	r0, r1
 80013ea:	4611      	mov	r1, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	4603      	mov	r3, r0
 80013f0:	817b      	strh	r3, [r7, #10]
 80013f2:	460b      	mov	r3, r1
 80013f4:	813b      	strh	r3, [r7, #8]
 80013f6:	4613      	mov	r3, r2
 80013f8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 80013fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 ff11 	bl	8002224 <u8g2_GetUTF8Width>
 8001402:	4603      	mov	r3, r0
 8001404:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8001406:	2300      	movs	r3, #0
 8001408:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001410:	2b00      	cmp	r3, #0
 8001412:	d009      	beq.n	8001428 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 8001414:	8afb      	ldrh	r3, [r7, #22]
 8001416:	3301      	adds	r3, #1
 8001418:	0fda      	lsrs	r2, r3, #31
 800141a:	4413      	add	r3, r2
 800141c:	105b      	asrs	r3, r3, #1
 800141e:	425b      	negs	r3, r3
 8001420:	b29a      	uxth	r2, r3
 8001422:	897b      	ldrh	r3, [r7, #10]
 8001424:	4413      	add	r3, r2
 8001426:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 8001428:	8afa      	ldrh	r2, [r7, #22]
 800142a:	8c3b      	ldrh	r3, [r7, #32]
 800142c:	429a      	cmp	r2, r3
 800142e:	d20d      	bcs.n	800144c <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001436:	2b00      	cmp	r3, #0
 8001438:	d006      	beq.n	8001448 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 800143a:	8c3a      	ldrh	r2, [r7, #32]
 800143c:	8afb      	ldrh	r3, [r7, #22]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	0fda      	lsrs	r2, r3, #31
 8001442:	4413      	add	r3, r2
 8001444:	105b      	asrs	r3, r3, #1
 8001446:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 8001448:	8c3b      	ldrh	r3, [r7, #32]
 800144a:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 800144c:	2101      	movs	r1, #1
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 fcdc 	bl	8001e0c <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8001454:	893a      	ldrh	r2, [r7, #8]
 8001456:	8979      	ldrh	r1, [r7, #10]
 8001458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 fdae 	bl	8001fbc <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 8001460:	897a      	ldrh	r2, [r7, #10]
 8001462:	8abb      	ldrh	r3, [r7, #20]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	b299      	uxth	r1, r3
 8001468:	88f8      	ldrh	r0, [r7, #6]
 800146a:	893a      	ldrh	r2, [r7, #8]
 800146c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	8afb      	ldrh	r3, [r7, #22]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	4603      	mov	r3, r0
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f7ff febe 	bl	80011fc <u8g2_DrawButtonFrame>
  
}
 8001480:	bf00      	nop
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fe71 	bl	8001178 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fe82 	bl	80011a0 <u8g2_NextPage>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f9      	bne.n	8001496 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80014a2:	2100      	movs	r1, #0
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fe4f 	bl	8001148 <u8g2_SetBufferCurrTileRow>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2204      	movs	r2, #4
 80014c0:	701a      	strb	r2, [r3, #0]
  return buf;
 80014c2:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <u8g2_m_16_4_f+0x1c>)
  #endif
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	2000010c 	.word	0x2000010c

080014d4 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1305 f */
void u8g2_Setup_ssd1305_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af02      	add	r7, sp, #8
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1305_128x32_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x44>)
 80014ea:	490c      	ldr	r1, [pc, #48]	; (800151c <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x48>)
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f001 fe3d 	bl	800316c <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 80014f2:	f107 0313 	add.w	r3, r7, #19
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ffdc 	bl	80014b4 <u8g2_m_16_4_f>
 80014fc:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80014fe:	7cfa      	ldrb	r2, [r7, #19]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x4c>)
 8001506:	6979      	ldr	r1, [r7, #20]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f001 f8ff 	bl	800270c <u8g2_SetupBuffer>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	08002d01 	.word	0x08002d01
 800151c:	08002ec1 	.word	0x08002ec1
 8001520:	0800258f 	.word	0x0800258f

08001524 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	781b      	ldrb	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	81fb      	strh	r3, [r7, #14]
    font++;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3301      	adds	r3, #1
 8001566:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001568:	89fb      	ldrh	r3, [r7, #14]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b29a      	uxth	r2, r3
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	4413      	add	r3, r2
 8001578:	81fb      	strh	r3, [r7, #14]
    return pos;
 800157a:	89fb      	ldrh	r3, [r7, #14]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001592:	2100      	movs	r1, #0
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f7ff ffc5 	bl	8001524 <u8g2_font_get_byte>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80015a2:	2101      	movs	r1, #1
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7ff ffbd 	bl	8001524 <u8g2_font_get_byte>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80015b2:	2102      	movs	r1, #2
 80015b4:	6838      	ldr	r0, [r7, #0]
 80015b6:	f7ff ffb5 	bl	8001524 <u8g2_font_get_byte>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80015c2:	2103      	movs	r1, #3
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f7ff ffad 	bl	8001524 <u8g2_font_get_byte>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80015d2:	2104      	movs	r1, #4
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	f7ff ffa5 	bl	8001524 <u8g2_font_get_byte>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80015e2:	2105      	movs	r1, #5
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f7ff ff9d 	bl	8001524 <u8g2_font_get_byte>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80015f2:	2106      	movs	r1, #6
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f7ff ff95 	bl	8001524 <u8g2_font_get_byte>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001602:	2107      	movs	r1, #7
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f7ff ff8d 	bl	8001524 <u8g2_font_get_byte>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001612:	2108      	movs	r1, #8
 8001614:	6838      	ldr	r0, [r7, #0]
 8001616:	f7ff ff85 	bl	8001524 <u8g2_font_get_byte>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001622:	2109      	movs	r1, #9
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f7ff ff7d 	bl	8001524 <u8g2_font_get_byte>
 800162a:	4603      	mov	r3, r0
 800162c:	b25a      	sxtb	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001632:	210a      	movs	r1, #10
 8001634:	6838      	ldr	r0, [r7, #0]
 8001636:	f7ff ff75 	bl	8001524 <u8g2_font_get_byte>
 800163a:	4603      	mov	r3, r0
 800163c:	b25a      	sxtb	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001642:	210b      	movs	r1, #11
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f7ff ff6d 	bl	8001524 <u8g2_font_get_byte>
 800164a:	4603      	mov	r3, r0
 800164c:	b25a      	sxtb	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001652:	210c      	movs	r1, #12
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	f7ff ff65 	bl	8001524 <u8g2_font_get_byte>
 800165a:	4603      	mov	r3, r0
 800165c:	b25a      	sxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001662:	210d      	movs	r1, #13
 8001664:	6838      	ldr	r0, [r7, #0]
 8001666:	f7ff ff5d 	bl	8001524 <u8g2_font_get_byte>
 800166a:	4603      	mov	r3, r0
 800166c:	b25a      	sxtb	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001672:	210e      	movs	r1, #14
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7ff ff55 	bl	8001524 <u8g2_font_get_byte>
 800167a:	4603      	mov	r3, r0
 800167c:	b25a      	sxtb	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001682:	210f      	movs	r1, #15
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f7ff ff4d 	bl	8001524 <u8g2_font_get_byte>
 800168a:	4603      	mov	r3, r0
 800168c:	b25a      	sxtb	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001692:	2110      	movs	r1, #16
 8001694:	6838      	ldr	r0, [r7, #0]
 8001696:	f7ff ff45 	bl	8001524 <u8g2_font_get_byte>
 800169a:	4603      	mov	r3, r0
 800169c:	b25a      	sxtb	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80016a2:	2111      	movs	r1, #17
 80016a4:	6838      	ldr	r0, [r7, #0]
 80016a6:	f7ff ff4f 	bl	8001548 <u8g2_font_get_word>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80016b2:	2113      	movs	r1, #19
 80016b4:	6838      	ldr	r0, [r7, #0]
 80016b6:	f7ff ff47 	bl	8001548 <u8g2_font_get_word>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80016c2:	2115      	movs	r1, #21
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f7ff ff3f 	bl	8001548 <u8g2_font_get_word>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	82da      	strh	r2, [r3, #22]
#endif
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80016da:	b480      	push	{r7}
 80016dc:	b085      	sub	sp, #20
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7b1b      	ldrb	r3, [r3, #12]
 80016ea:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80016f4:	7bfa      	ldrb	r2, [r7, #15]
 80016f6:	7b7b      	ldrb	r3, [r7, #13]
 80016f8:	fa42 f303 	asr.w	r3, r2, r3
 80016fc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80016fe:	7b7b      	ldrb	r3, [r7, #13]
 8001700:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001702:	7bba      	ldrb	r2, [r7, #14]
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	4413      	add	r3, r2
 8001708:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	2b07      	cmp	r3, #7
 800170e:	d91a      	bls.n	8001746 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001710:	2308      	movs	r3, #8
 8001712:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001714:	7b3a      	ldrb	r2, [r7, #12]
 8001716:	7b7b      	ldrb	r3, [r7, #13]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	7b3b      	ldrb	r3, [r7, #12]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	b25a      	sxtb	r2, r3
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4313      	orrs	r3, r2
 800173c:	b25b      	sxtb	r3, r3
 800173e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001740:	7bbb      	ldrb	r3, [r7, #14]
 8001742:	3b08      	subs	r3, #8
 8001744:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	4013      	ands	r3, r2
 800175a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7bba      	ldrb	r2, [r7, #14]
 8001760:	731a      	strb	r2, [r3, #12]
  return val;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	4619      	mov	r1, r3
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ffaa 	bl	80016da <u8g2_font_decode_get_unsigned_bits>
 8001786:	4603      	mov	r3, r0
 8001788:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800178a:	2301      	movs	r3, #1
 800178c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	3b01      	subs	r3, #1
 8001792:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001794:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	7bbb      	ldrb	r3, [r7, #14]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	73fb      	strb	r3, [r7, #15]
  return v;
 80017aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80017b6:	b490      	push	{r4, r7}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4604      	mov	r4, r0
 80017be:	4608      	mov	r0, r1
 80017c0:	4611      	mov	r1, r2
 80017c2:	461a      	mov	r2, r3
 80017c4:	4623      	mov	r3, r4
 80017c6:	80fb      	strh	r3, [r7, #6]
 80017c8:	4603      	mov	r3, r0
 80017ca:	717b      	strb	r3, [r7, #5]
 80017cc:	460b      	mov	r3, r1
 80017ce:	713b      	strb	r3, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d014      	beq.n	8001804 <u8g2_add_vector_y+0x4e>
 80017da:	2b02      	cmp	r3, #2
 80017dc:	dc19      	bgt.n	8001812 <u8g2_add_vector_y+0x5c>
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <u8g2_add_vector_y+0x32>
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d007      	beq.n	80017f6 <u8g2_add_vector_y+0x40>
 80017e6:	e014      	b.n	8001812 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80017e8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	4413      	add	r3, r2
 80017f2:	80fb      	strh	r3, [r7, #6]
      break;
 80017f4:	e014      	b.n	8001820 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80017f6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	4413      	add	r3, r2
 8001800:	80fb      	strh	r3, [r7, #6]
      break;
 8001802:	e00d      	b.n	8001820 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8001804:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001808:	b29b      	uxth	r3, r3
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	80fb      	strh	r3, [r7, #6]
      break;
 8001810:	e006      	b.n	8001820 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8001812:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001816:	b29b      	uxth	r3, r3
 8001818:	88fa      	ldrh	r2, [r7, #6]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	80fb      	strh	r3, [r7, #6]
      break;      
 800181e:	bf00      	nop
  }
  return dy;
 8001820:	88fb      	ldrh	r3, [r7, #6]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bc90      	pop	{r4, r7}
 800182a:	4770      	bx	lr

0800182c <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800182c:	b490      	push	{r4, r7}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4604      	mov	r4, r0
 8001834:	4608      	mov	r0, r1
 8001836:	4611      	mov	r1, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4623      	mov	r3, r4
 800183c:	80fb      	strh	r3, [r7, #6]
 800183e:	4603      	mov	r3, r0
 8001840:	717b      	strb	r3, [r7, #5]
 8001842:	460b      	mov	r3, r1
 8001844:	713b      	strb	r3, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d014      	beq.n	800187a <u8g2_add_vector_x+0x4e>
 8001850:	2b02      	cmp	r3, #2
 8001852:	dc19      	bgt.n	8001888 <u8g2_add_vector_x+0x5c>
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <u8g2_add_vector_x+0x32>
 8001858:	2b01      	cmp	r3, #1
 800185a:	d007      	beq.n	800186c <u8g2_add_vector_x+0x40>
 800185c:	e014      	b.n	8001888 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 800185e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001862:	b29a      	uxth	r2, r3
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	4413      	add	r3, r2
 8001868:	80fb      	strh	r3, [r7, #6]
      break;
 800186a:	e014      	b.n	8001896 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 800186c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001870:	b29b      	uxth	r3, r3
 8001872:	88fa      	ldrh	r2, [r7, #6]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	80fb      	strh	r3, [r7, #6]
      break;
 8001878:	e00d      	b.n	8001896 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800187a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800187e:	b29b      	uxth	r3, r3
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	80fb      	strh	r3, [r7, #6]
      break;
 8001886:	e006      	b.n	8001896 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001888:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800188c:	b29a      	uxth	r2, r3
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	4413      	add	r3, r2
 8001892:	80fb      	strh	r3, [r7, #6]
      break;      
 8001894:	bf00      	nop
  }
  return dx;
 8001896:	88fb      	ldrh	r3, [r7, #6]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bc90      	pop	{r4, r7}
 80018a0:	4770      	bx	lr

080018a2 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b088      	sub	sp, #32
 80018a6:	af02      	add	r7, sp, #8
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70fb      	strb	r3, [r7, #3]
 80018ae:	4613      	mov	r3, r2
 80018b0:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3360      	adds	r3, #96	; 0x60
 80018b6:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80018c2:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80018ca:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80018d2:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	7d7b      	ldrb	r3, [r7, #21]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80018e0:	7dfa      	ldrb	r2, [r7, #23]
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d201      	bcs.n	80018ec <u8g2_font_decode_len+0x4a>
      current = cnt;
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	889b      	ldrh	r3, [r3, #4]
 80018f0:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	88db      	ldrh	r3, [r3, #6]
 80018f6:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80018f8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80018fc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	7c1b      	ldrb	r3, [r3, #16]
 8001904:	89b8      	ldrh	r0, [r7, #12]
 8001906:	f7ff ff91 	bl	800182c <u8g2_add_vector_x>
 800190a:	4603      	mov	r3, r0
 800190c:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800190e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001912:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	7c1b      	ldrb	r3, [r3, #16]
 800191a:	8978      	ldrh	r0, [r7, #10]
 800191c:	f7ff ff4b 	bl	80017b6 <u8g2_add_vector_y>
 8001920:	4603      	mov	r3, r0
 8001922:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001924:	78bb      	ldrb	r3, [r7, #2]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d010      	beq.n	800194c <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	7b9a      	ldrb	r2, [r3, #14]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001934:	7dbb      	ldrb	r3, [r7, #22]
 8001936:	b298      	uxth	r0, r3
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	7c1b      	ldrb	r3, [r3, #16]
 800193c:	897a      	ldrh	r2, [r7, #10]
 800193e:	89b9      	ldrh	r1, [r7, #12]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	4603      	mov	r3, r0
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fcf0 	bl	800232a <u8g2_DrawHVLine>
 800194a:	e013      	b.n	8001974 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	7b5b      	ldrb	r3, [r3, #13]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10f      	bne.n	8001974 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	7bda      	ldrb	r2, [r3, #15]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800195e:	7dbb      	ldrb	r3, [r7, #22]
 8001960:	b298      	uxth	r0, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	7c1b      	ldrb	r3, [r3, #16]
 8001966:	897a      	ldrh	r2, [r7, #10]
 8001968:	89b9      	ldrh	r1, [r7, #12]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	4603      	mov	r3, r0
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fcdb 	bl	800232a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001974:	7dfa      	ldrb	r2, [r7, #23]
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	429a      	cmp	r2, r3
 800197a:	d309      	bcc.n	8001990 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 800197c:	7dfa      	ldrb	r2, [r7, #23]
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	757b      	strb	r3, [r7, #21]
    ly++;
 8001988:	7d3b      	ldrb	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800198e:	e79d      	b.n	80018cc <u8g2_font_decode_len+0x2a>
      break;
 8001990:	bf00      	nop
  }
  lx += cnt;
 8001992:	7d7a      	ldrb	r2, [r7, #21]
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	4413      	add	r3, r2
 8001998:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800199a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80019a2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	725a      	strb	r2, [r3, #9]
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3360      	adds	r3, #96	; 0x60
 80019c0:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80019d4:	4619      	mov	r1, r3
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff fe7f 	bl	80016da <u8g2_font_decode_get_unsigned_bits>
 80019dc:	4603      	mov	r3, r0
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80019ea:	4619      	mov	r1, r3
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f7ff fe74 	bl	80016da <u8g2_font_decode_get_unsigned_bits>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b25a      	sxtb	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	7b9b      	ldrb	r3, [r3, #14]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	73da      	strb	r2, [r3, #15]
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3360      	adds	r3, #96	; 0x60
 8001a2e:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffbd 	bl	80019b2 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001a3e:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001a46:	4619      	mov	r1, r3
 8001a48:	6978      	ldr	r0, [r7, #20]
 8001a4a:	f7ff fe91 	bl	8001770 <u8g2_font_decode_get_signed_bits>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff fe88 	bl	8001770 <u8g2_font_decode_get_signed_bits>
 8001a60:	4603      	mov	r3, r0
 8001a62:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6978      	ldr	r0, [r7, #20]
 8001a6e:	f7ff fe7f 	bl	8001770 <u8g2_font_decode_get_signed_bits>
 8001a72:	4603      	mov	r3, r0
 8001a74:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f340 80d7 	ble.w	8001c30 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	8898      	ldrh	r0, [r3, #4]
 8001a86:	7cfa      	ldrb	r2, [r7, #19]
 8001a88:	7c7b      	ldrb	r3, [r7, #17]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	425b      	negs	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	b25a      	sxtb	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	7c1b      	ldrb	r3, [r3, #16]
 8001a98:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001a9c:	f7ff fec6 	bl	800182c <u8g2_add_vector_x>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	88d8      	ldrh	r0, [r3, #6]
 8001aac:	7cfa      	ldrb	r2, [r7, #19]
 8001aae:	7c7b      	ldrb	r3, [r7, #17]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	425b      	negs	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	b25a      	sxtb	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	7c1b      	ldrb	r3, [r3, #16]
 8001abe:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001ac2:	f7ff fe78 	bl	80017b6 <u8g2_add_vector_y>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	889b      	ldrh	r3, [r3, #4]
 8001ad2:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	88db      	ldrh	r3, [r3, #6]
 8001ad8:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001ada:	8bfb      	ldrh	r3, [r7, #30]
 8001adc:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001ade:	8b7b      	ldrh	r3, [r7, #26]
 8001ae0:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	7c1b      	ldrb	r3, [r3, #16]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d85a      	bhi.n	8001ba0 <u8g2_font_decode_glyph+0x180>
 8001aea:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <u8g2_font_decode_glyph+0xd0>)
 8001aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af0:	08001b01 	.word	0x08001b01
 8001af4:	08001b1d 	.word	0x08001b1d
 8001af8:	08001b45 	.word	0x08001b45
 8001afc:	08001b79 	.word	0x08001b79
      {
	case 0:
	    x1 += decode->glyph_width;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	8bbb      	ldrh	r3, [r7, #28]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001b0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	8b3b      	ldrh	r3, [r7, #24]
 8001b16:	4413      	add	r3, r2
 8001b18:	833b      	strh	r3, [r7, #24]
	    break;
 8001b1a:	e041      	b.n	8001ba0 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001b1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	8bfa      	ldrh	r2, [r7, #30]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b28:	8bfb      	ldrh	r3, [r7, #30]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001b2e:	8bbb      	ldrh	r3, [r7, #28]
 8001b30:	3301      	adds	r3, #1
 8001b32:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	8b3b      	ldrh	r3, [r7, #24]
 8001b3e:	4413      	add	r3, r2
 8001b40:	833b      	strh	r3, [r7, #24]
	    break;
 8001b42:	e02d      	b.n	8001ba0 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	8bfa      	ldrh	r2, [r7, #30]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b52:	8bfb      	ldrh	r3, [r7, #30]
 8001b54:	3301      	adds	r3, #1
 8001b56:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001b58:	8bbb      	ldrh	r3, [r7, #28]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001b5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	8b7a      	ldrh	r2, [r7, #26]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b6a:	8b7b      	ldrh	r3, [r7, #26]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001b70:	8b3b      	ldrh	r3, [r7, #24]
 8001b72:	3301      	adds	r3, #1
 8001b74:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001b76:	e013      	b.n	8001ba0 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001b78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	8bbb      	ldrh	r3, [r7, #28]
 8001b80:	4413      	add	r3, r2
 8001b82:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	8b7a      	ldrh	r2, [r7, #26]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b92:	8b7b      	ldrh	r3, [r7, #26]
 8001b94:	3301      	adds	r3, #1
 8001b96:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001b98:	8b3b      	ldrh	r3, [r7, #24]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001b9e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001ba0:	8bb8      	ldrh	r0, [r7, #28]
 8001ba2:	8b7a      	ldrh	r2, [r7, #26]
 8001ba4:	8bf9      	ldrh	r1, [r7, #30]
 8001ba6:	8b3b      	ldrh	r3, [r7, #24]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	4603      	mov	r3, r0
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fcc3 	bl	8002538 <u8g2_IsIntersection>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <u8g2_font_decode_glyph+0x19e>
	return d;
 8001bb8:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001bbc:	e03a      	b.n	8001c34 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff fd81 	bl	80016da <u8g2_font_decode_get_unsigned_bits>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001be2:	4619      	mov	r1, r3
 8001be4:	6978      	ldr	r0, [r7, #20]
 8001be6:	f7ff fd78 	bl	80016da <u8g2_font_decode_get_unsigned_bits>
 8001bea:	4603      	mov	r3, r0
 8001bec:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff fe54 	bl	80018a2 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001bfa:	7bbb      	ldrb	r3, [r7, #14]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fe4e 	bl	80018a2 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001c06:	2101      	movs	r1, #1
 8001c08:	6978      	ldr	r0, [r7, #20]
 8001c0a:	f7ff fd66 	bl	80016da <u8g2_font_decode_get_unsigned_bits>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1ec      	bne.n	8001bee <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001c1a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dd00      	ble.n	8001c24 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001c22:	e7d2      	b.n	8001bca <u8g2_font_decode_glyph+0x1aa>
	break;
 8001c24:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	7b9a      	ldrb	r2, [r3, #14]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8001c30:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3317      	adds	r3, #23
 8001c52:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	2bff      	cmp	r3, #255	; 0xff
 8001c58:	d82a      	bhi.n	8001cb0 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	2b60      	cmp	r3, #96	; 0x60
 8001c5e:	d907      	bls.n	8001c70 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001c66:	461a      	mov	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e009      	b.n	8001c84 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	2b40      	cmp	r3, #64	; 0x40
 8001c74:	d906      	bls.n	8001c84 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	4413      	add	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d04e      	beq.n	8001d2c <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	887a      	ldrh	r2, [r7, #2]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d102      	bne.n	8001ca0 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	e049      	b.n	8001d34 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4413      	add	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001cae:	e7e9      	b.n	8001c84 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	4413      	add	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	6938      	ldr	r0, [r7, #16]
 8001cc6:	f7ff fc3f 	bl	8001548 <u8g2_font_get_word>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	6938      	ldr	r0, [r7, #16]
 8001cd8:	f7ff fc36 	bl	8001548 <u8g2_font_get_word>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001ce6:	89fa      	ldrh	r2, [r7, #14]
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d3e9      	bcc.n	8001cc2 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001cf4:	89fb      	ldrh	r3, [r7, #14]
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	89fb      	ldrh	r3, [r7, #14]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001d08:	89fb      	ldrh	r3, [r7, #14]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d010      	beq.n	8001d30 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001d0e:	89fa      	ldrh	r2, [r7, #14]
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d102      	bne.n	8001d1c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3303      	adds	r3, #3
 8001d1a:	e00b      	b.n	8001d34 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3302      	adds	r3, #2
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	4413      	add	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001d2a:	e7e0      	b.n	8001cee <u8g2_font_get_glyph_data+0xb2>
	break;
 8001d2c:	bf00      	nop
 8001d2e:	e000      	b.n	8001d32 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001d30:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	817b      	strh	r3, [r7, #10]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	813b      	strh	r3, [r7, #8]
 8001d52:	4613      	mov	r3, r2
 8001d54:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	897a      	ldrh	r2, [r7, #10]
 8001d5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	893a      	ldrh	r2, [r7, #8]
 8001d66:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff ff64 	bl	8001c3c <u8g2_font_get_glyph_data>
 8001d74:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001d7c:	6939      	ldr	r1, [r7, #16]
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7ff fe4e 	bl	8001a20 <u8g2_font_decode_glyph>
 8001d84:	4603      	mov	r3, r0
 8001d86:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001d88:	8afb      	ldrh	r3, [r7, #22]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	4619      	mov	r1, r3
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff4a 	bl	8001c3c <u8g2_font_get_glyph_data>
 8001da8:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001db0:	2300      	movs	r3, #0
 8001db2:	e027      	b.n	8001e04 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fdfb 	bl	80019b2 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f7ff fcd0 	bl	8001770 <u8g2_font_decode_get_signed_bits>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f7ff fcc1 	bl	8001770 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f7ff fcb7 	bl	8001770 <u8g2_font_decode_get_signed_bits>
 8001e02:	4603      	mov	r3, r0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	4608      	mov	r0, r1
 8001e36:	4611      	mov	r1, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	817b      	strh	r3, [r7, #10]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	813b      	strh	r3, [r7, #8]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d833      	bhi.n	8001eb8 <u8g2_DrawGlyph+0x8c>
 8001e50:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <u8g2_DrawGlyph+0x2c>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e69 	.word	0x08001e69
 8001e5c:	08001e7d 	.word	0x08001e7d
 8001e60:	08001e91 	.word	0x08001e91
 8001e64:	08001ea5 	.word	0x08001ea5
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	4798      	blx	r3
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	893b      	ldrh	r3, [r7, #8]
 8001e76:	4413      	add	r3, r2
 8001e78:	813b      	strh	r3, [r7, #8]
      break;
 8001e7a:	e01d      	b.n	8001eb8 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	4798      	blx	r3
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	897b      	ldrh	r3, [r7, #10]
 8001e8a:	1a9b      	subs	r3, r3, r2
 8001e8c:	817b      	strh	r3, [r7, #10]
      break;
 8001e8e:	e013      	b.n	8001eb8 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	4798      	blx	r3
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	893b      	ldrh	r3, [r7, #8]
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	813b      	strh	r3, [r7, #8]
      break;
 8001ea2:	e009      	b.n	8001eb8 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	4798      	blx	r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	897b      	ldrh	r3, [r7, #10]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	817b      	strh	r3, [r7, #10]
      break;
 8001eb6:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	893a      	ldrh	r2, [r7, #8]
 8001ebc:	8979      	ldrh	r1, [r7, #10]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7ff ff3c 	bl	8001d3c <u8g2_font_draw_glyph>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop

08001ed0 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 fd59 	bl	800299a <u8x8_utf8_init>
  sum = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	7812      	ldrb	r2, [r2, #0]
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	4798      	blx	r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001efe:	8abb      	ldrh	r3, [r7, #20]
 8001f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d038      	beq.n	8001f7a <u8g2_draw_string+0xaa>
      break;
    str++;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001f0e:	8abb      	ldrh	r3, [r7, #20]
 8001f10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d0e9      	beq.n	8001eec <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001f18:	8abb      	ldrh	r3, [r7, #20]
 8001f1a:	893a      	ldrh	r2, [r7, #8]
 8001f1c:	8979      	ldrh	r1, [r7, #10]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff ff84 	bl	8001e2c <u8g2_DrawGlyph>
 8001f24:	4603      	mov	r3, r0
 8001f26:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d81e      	bhi.n	8001f70 <u8g2_draw_string+0xa0>
 8001f32:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <u8g2_draw_string+0x68>)
 8001f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f38:	08001f49 	.word	0x08001f49
 8001f3c:	08001f53 	.word	0x08001f53
 8001f40:	08001f5d 	.word	0x08001f5d
 8001f44:	08001f67 	.word	0x08001f67
      {
	case 0:
	  x += delta;
 8001f48:	897a      	ldrh	r2, [r7, #10]
 8001f4a:	8a7b      	ldrh	r3, [r7, #18]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	817b      	strh	r3, [r7, #10]
	  break;
 8001f50:	e00e      	b.n	8001f70 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001f52:	893a      	ldrh	r2, [r7, #8]
 8001f54:	8a7b      	ldrh	r3, [r7, #18]
 8001f56:	4413      	add	r3, r2
 8001f58:	813b      	strh	r3, [r7, #8]
	  break;
 8001f5a:	e009      	b.n	8001f70 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001f5c:	897a      	ldrh	r2, [r7, #10]
 8001f5e:	8a7b      	ldrh	r3, [r7, #18]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	817b      	strh	r3, [r7, #10]
	  break;
 8001f64:	e004      	b.n	8001f70 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001f66:	893a      	ldrh	r2, [r7, #8]
 8001f68:	8a7b      	ldrh	r3, [r7, #18]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	813b      	strh	r3, [r7, #8]
	  break;
 8001f6e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001f70:	8afa      	ldrh	r2, [r7, #22]
 8001f72:	8a7b      	ldrh	r3, [r7, #18]
 8001f74:	4413      	add	r3, r2
 8001f76:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001f78:	e7b8      	b.n	8001eec <u8g2_draw_string+0x1c>
      break;
 8001f7a:	bf00      	nop
    }
  }
  return sum;
 8001f7c:	8afb      	ldrh	r3, [r7, #22]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop

08001f88 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	817b      	strh	r3, [r7, #10]
 8001f96:	4613      	mov	r3, r2
 8001f98:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <u8g2_DrawStr+0x30>)
 8001f9e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001fa0:	893a      	ldrh	r2, [r7, #8]
 8001fa2:	8979      	ldrh	r1, [r7, #10]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff ff92 	bl	8001ed0 <u8g2_draw_string>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	080029b7 	.word	0x080029b7

08001fbc <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	817b      	strh	r3, [r7, #10]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a06      	ldr	r2, [pc, #24]	; (8001fec <u8g2_DrawUTF8+0x30>)
 8001fd2:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001fd4:	893a      	ldrh	r2, [r7, #8]
 8001fd6:	8979      	ldrh	r1, [r7, #10]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7ff ff78 	bl	8001ed0 <u8g2_draw_string>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	080029e5 	.word	0x080029e5

08001ff0 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d05d      	beq.n	80020bc <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800201e:	2b00      	cmp	r3, #0
 8002020:	d04d      	beq.n	80020be <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002028:	2b01      	cmp	r3, #1
 800202a:	d11c      	bne.n	8002066 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8002038:	429a      	cmp	r2, r3
 800203a:	da05      	bge.n	8002048 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8002054:	429a      	cmp	r2, r3
 8002056:	dd32      	ble.n	80020be <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002064:	e02b      	b.n	80020be <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 800206c:	461a      	mov	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002074:	4619      	mov	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800207c:	440b      	add	r3, r1
 800207e:	429a      	cmp	r2, r3
 8002080:	da0d      	bge.n	800209e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002088:	b2da      	uxtb	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4413      	add	r3, r2
 8002094:	b2db      	uxtb	r3, r3
 8002096:	b25a      	sxtb	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80020aa:	429a      	cmp	r2, r3
 80020ac:	dd07      	ble.n	80020be <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80020ba:	e000      	b.n	80020be <u8g2_UpdateRefHeight+0xce>
    return;
 80020bc:	bf00      	nop
  }  
}
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return 0;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a04      	ldr	r2, [pc, #16]	; (80020fc <u8g2_SetFontPosBaseline+0x1c>)
 80020ec:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	080020c9 	.word	0x080020c9

08002100 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d00b      	beq.n	800212c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3374      	adds	r3, #116	; 0x74
 800211e:	6839      	ldr	r1, [r7, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fa31 	bl	8001588 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ff62 	bl	8001ff0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
  int8_t initial_x_offset = -64;
 800213e:	23c0      	movs	r3, #192	; 0xc0
 8002140:	72fb      	strb	r3, [r7, #11]
#endif 
  
  u8g2->font_decode.glyph_width = 0;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fc25 	bl	800299a <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	81fb      	strh	r3, [r7, #14]
  dx = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	81bb      	strh	r3, [r7, #12]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	4611      	mov	r1, r2
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4798      	blx	r3
 8002166:	4603      	mov	r3, r0
 8002168:	813b      	strh	r3, [r7, #8]
    if ( e == 0x0ffff )
 800216a:	893b      	ldrh	r3, [r7, #8]
 800216c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002170:	4293      	cmp	r3, r2
 8002172:	d01c      	beq.n	80021ae <u8g2_string_width+0x7a>
      break;
    str++;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	3301      	adds	r3, #1
 8002178:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 800217a:	893b      	ldrh	r3, [r7, #8]
 800217c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002180:	4293      	cmp	r3, r2
 8002182:	d0e9      	beq.n	8002158 <u8g2_string_width+0x24>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8002184:	893b      	ldrh	r3, [r7, #8]
 8002186:	4619      	mov	r1, r3
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff fe02 	bl	8001d92 <u8g2_GetGlyphWidth>
 800218e:	4603      	mov	r3, r0
 8002190:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
      if ( initial_x_offset == -64 )
 8002192:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002196:	f113 0f40 	cmn.w	r3, #64	; 0x40
 800219a:	d103      	bne.n	80021a4 <u8g2_string_width+0x70>
        initial_x_offset = u8g2->glyph_x_offset;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80021a2:	72fb      	strb	r3, [r7, #11]
#endif 
      //printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
      w += dx;
 80021a4:	89fa      	ldrh	r2, [r7, #14]
 80021a6:	89bb      	ldrh	r3, [r7, #12]
 80021a8:	4413      	add	r3, r2
 80021aa:	81fb      	strh	r3, [r7, #14]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80021ac:	e7d4      	b.n	8002158 <u8g2_string_width+0x24>
      break;
 80021ae:	bf00      	nop
    }
  }
  //printf("\n");
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01b      	beq.n	80021f2 <u8g2_string_width+0xbe>
  {
    //printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
    w -= dx;
 80021ba:	89fa      	ldrh	r2, [r7, #14]
 80021bc:	89bb      	ldrh	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	81fb      	strh	r3, [r7, #14]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	89fb      	ldrh	r3, [r7, #14]
 80021cc:	4413      	add	r3, r2
 80021ce:	81fb      	strh	r3, [r7, #14]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	89fb      	ldrh	r3, [r7, #14]
 80021da:	4413      	add	r3, r2
 80021dc:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
    /* https://github.com/olikraus/u8g2/issues/1561 */
    if ( initial_x_offset > 0 )
 80021de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	dd05      	ble.n	80021f2 <u8g2_string_width+0xbe>
      w+=initial_x_offset;
 80021e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	89fb      	ldrh	r3, [r7, #14]
 80021ee:	4413      	add	r3, r2
 80021f0:	81fb      	strh	r3, [r7, #14]
#endif 
  }
  // printf("w=%d \n", w);
  
  return w;  
 80021f2:	89fb      	ldrh	r3, [r7, #14]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a05      	ldr	r2, [pc, #20]	; (8002220 <u8g2_GetStrWidth+0x24>)
 800220a:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 800220c:	6839      	ldr	r1, [r7, #0]
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ff90 	bl	8002134 <u8g2_string_width>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	080029b7 	.word	0x080029b7

08002224 <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a05      	ldr	r2, [pc, #20]	; (8002248 <u8g2_GetUTF8Width+0x24>)
 8002232:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 8002234:	6839      	ldr	r1, [r7, #0]
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ff7c 	bl	8002134 <u8g2_string_width>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	080029e5 	.word	0x080029e5

0800224c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	4611      	mov	r1, r2
 8002258:	461a      	mov	r2, r3
 800225a:	460b      	mov	r3, r1
 800225c:	80fb      	strh	r3, [r7, #6]
 800225e:	4613      	mov	r3, r2
 8002260:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8002268:	8afb      	ldrh	r3, [r7, #22]
 800226a:	82bb      	strh	r3, [r7, #20]
  b += *len;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	881a      	ldrh	r2, [r3, #0]
 8002270:	8abb      	ldrh	r3, [r7, #20]
 8002272:	4413      	add	r3, r2
 8002274:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002276:	8afa      	ldrh	r2, [r7, #22]
 8002278:	8abb      	ldrh	r3, [r7, #20]
 800227a:	429a      	cmp	r2, r3
 800227c:	d90b      	bls.n	8002296 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800227e:	8afa      	ldrh	r2, [r7, #22]
 8002280:	88bb      	ldrh	r3, [r7, #4]
 8002282:	429a      	cmp	r2, r3
 8002284:	d205      	bcs.n	8002292 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002286:	88bb      	ldrh	r3, [r7, #4]
 8002288:	82bb      	strh	r3, [r7, #20]
      b--;
 800228a:	8abb      	ldrh	r3, [r7, #20]
 800228c:	3b01      	subs	r3, #1
 800228e:	82bb      	strh	r3, [r7, #20]
 8002290:	e001      	b.n	8002296 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002296:	8afa      	ldrh	r2, [r7, #22]
 8002298:	88bb      	ldrh	r3, [r7, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	d301      	bcc.n	80022a2 <u8g2_clip_intersection2+0x56>
    return 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	e01c      	b.n	80022dc <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80022a2:	8aba      	ldrh	r2, [r7, #20]
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d801      	bhi.n	80022ae <u8g2_clip_intersection2+0x62>
    return 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e016      	b.n	80022dc <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80022ae:	8afa      	ldrh	r2, [r7, #22]
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d201      	bcs.n	80022ba <u8g2_clip_intersection2+0x6e>
    a = c;
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80022ba:	8aba      	ldrh	r2, [r7, #20]
 80022bc:	88bb      	ldrh	r3, [r7, #4]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d901      	bls.n	80022c6 <u8g2_clip_intersection2+0x7a>
    b = d;
 80022c2:	88bb      	ldrh	r3, [r7, #4]
 80022c4:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8afa      	ldrh	r2, [r7, #22]
 80022ca:	801a      	strh	r2, [r3, #0]
  b -= a;
 80022cc:	8aba      	ldrh	r2, [r7, #20]
 80022ce:	8afb      	ldrh	r3, [r7, #22]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	8aba      	ldrh	r2, [r7, #20]
 80022d8:	801a      	strh	r2, [r3, #0]
  return 1;
 80022da:	2301      	movs	r3, #1
}
 80022dc:	4618      	mov	r0, r3
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	4608      	mov	r0, r1
 80022f2:	4611      	mov	r1, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	817b      	strh	r3, [r7, #10]
 80022fa:	460b      	mov	r3, r1
 80022fc:	813b      	strh	r3, [r7, #8]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002306:	893a      	ldrh	r2, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002310:	88f8      	ldrh	r0, [r7, #6]
 8002312:	893a      	ldrh	r2, [r7, #8]
 8002314:	8979      	ldrh	r1, [r7, #10]
 8002316:	f897 3020 	ldrb.w	r3, [r7, #32]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	4603      	mov	r3, r0
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	47a0      	blx	r4
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bd90      	pop	{r4, r7, pc}

0800232a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800232a:	b590      	push	{r4, r7, lr}
 800232c:	b087      	sub	sp, #28
 800232e:	af02      	add	r7, sp, #8
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	4608      	mov	r0, r1
 8002334:	4611      	mov	r1, r2
 8002336:	461a      	mov	r2, r3
 8002338:	4603      	mov	r3, r0
 800233a:	817b      	strh	r3, [r7, #10]
 800233c:	460b      	mov	r3, r1
 800233e:	813b      	strh	r3, [r7, #8]
 8002340:	4613      	mov	r3, r2
 8002342:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d075      	beq.n	800243a <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d072      	beq.n	800243a <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d91a      	bls.n	8002390 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 800235a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d109      	bne.n	8002376 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002362:	897a      	ldrh	r2, [r7, #10]
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	b29b      	uxth	r3, r3
 800236a:	817b      	strh	r3, [r7, #10]
	  x++;
 800236c:	897b      	ldrh	r3, [r7, #10]
 800236e:	3301      	adds	r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	817b      	strh	r3, [r7, #10]
 8002374:	e00c      	b.n	8002390 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002376:	f897 3020 	ldrb.w	r3, [r7, #32]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d108      	bne.n	8002390 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800237e:	893a      	ldrh	r2, [r7, #8]
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	b29b      	uxth	r3, r3
 8002386:	813b      	strh	r3, [r7, #8]
	  y++;
 8002388:	893b      	ldrh	r3, [r7, #8]
 800238a:	3301      	adds	r3, #1
 800238c:	b29b      	uxth	r3, r3
 800238e:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002390:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 800239c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d11a      	bne.n	80023da <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80023aa:	893b      	ldrh	r3, [r7, #8]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d83b      	bhi.n	8002428 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80023b6:	893b      	ldrh	r3, [r7, #8]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d937      	bls.n	800242c <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80023c8:	1db9      	adds	r1, r7, #6
 80023ca:	f107 000a 	add.w	r0, r7, #10
 80023ce:	f7ff ff3d 	bl	800224c <u8g2_clip_intersection2>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d11a      	bne.n	800240e <u8g2_DrawHVLine+0xe4>
	  return;
 80023d8:	e02f      	b.n	800243a <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80023e0:	897b      	ldrh	r3, [r7, #10]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d824      	bhi.n	8002430 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80023ec:	897b      	ldrh	r3, [r7, #10]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d920      	bls.n	8002434 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80023fe:	1db9      	adds	r1, r7, #6
 8002400:	f107 0008 	add.w	r0, r7, #8
 8002404:	f7ff ff22 	bl	800224c <u8g2_clip_intersection2>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d014      	beq.n	8002438 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	689c      	ldr	r4, [r3, #8]
 8002414:	8979      	ldrh	r1, [r7, #10]
 8002416:	893a      	ldrh	r2, [r7, #8]
 8002418:	88f8      	ldrh	r0, [r7, #6]
 800241a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	4603      	mov	r3, r0
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	47a0      	blx	r4
 8002426:	e008      	b.n	800243a <u8g2_DrawHVLine+0x110>
	  return;
 8002428:	bf00      	nop
 800242a:	e006      	b.n	800243a <u8g2_DrawHVLine+0x110>
	  return;
 800242c:	bf00      	nop
 800242e:	e004      	b.n	800243a <u8g2_DrawHVLine+0x110>
	  return;
 8002430:	bf00      	nop
 8002432:	e002      	b.n	800243a <u8g2_DrawHVLine+0x110>
	  return;
 8002434:	bf00      	nop
 8002436:	e000      	b.n	800243a <u8g2_DrawHVLine+0x110>
	  return;
 8002438:	bf00      	nop
    }
}
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bd90      	pop	{r4, r7, pc}

08002440 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	817b      	strh	r3, [r7, #10]
 8002452:	460b      	mov	r3, r1
 8002454:	813b      	strh	r3, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	893a      	ldrh	r2, [r7, #8]
 800245e:	8979      	ldrh	r1, [r7, #10]
 8002460:	2000      	movs	r0, #0
 8002462:	9000      	str	r0, [sp, #0]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff ff60 	bl	800232a <u8g2_DrawHVLine>
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af02      	add	r7, sp, #8
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	4608      	mov	r0, r1
 800247c:	4611      	mov	r1, r2
 800247e:	461a      	mov	r2, r3
 8002480:	4603      	mov	r3, r0
 8002482:	817b      	strh	r3, [r7, #10]
 8002484:	460b      	mov	r3, r1
 8002486:	813b      	strh	r3, [r7, #8]
 8002488:	4613      	mov	r3, r2
 800248a:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	893a      	ldrh	r2, [r7, #8]
 8002490:	8979      	ldrh	r1, [r7, #10]
 8002492:	2001      	movs	r0, #1
 8002494:	9000      	str	r0, [sp, #0]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f7ff ff47 	bl	800232a <u8g2_DrawHVLine>
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d903      	bls.n	80024c6 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80024d2:	b490      	push	{r4, r7}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4604      	mov	r4, r0
 80024da:	4608      	mov	r0, r1
 80024dc:	4611      	mov	r1, r2
 80024de:	461a      	mov	r2, r3
 80024e0:	4623      	mov	r3, r4
 80024e2:	80fb      	strh	r3, [r7, #6]
 80024e4:	4603      	mov	r3, r0
 80024e6:	80bb      	strh	r3, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
 80024ec:	4613      	mov	r3, r2
 80024ee:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80024f0:	887a      	ldrh	r2, [r7, #2]
 80024f2:	88bb      	ldrh	r3, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d20d      	bcs.n	8002514 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80024f8:	883a      	ldrh	r2, [r7, #0]
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d901      	bls.n	8002504 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002500:	2301      	movs	r3, #1
 8002502:	e014      	b.n	800252e <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002504:	887a      	ldrh	r2, [r7, #2]
 8002506:	883b      	ldrh	r3, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d901      	bls.n	8002510 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800250c:	2301      	movs	r3, #1
 800250e:	e00e      	b.n	800252e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002510:	2300      	movs	r3, #0
 8002512:	e00c      	b.n	800252e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002514:	883a      	ldrh	r2, [r7, #0]
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	429a      	cmp	r2, r3
 800251a:	d907      	bls.n	800252c <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800251c:	887a      	ldrh	r2, [r7, #2]
 800251e:	883b      	ldrh	r3, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d901      	bls.n	8002528 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002524:	2301      	movs	r3, #1
 8002526:	e002      	b.n	800252e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002528:	2300      	movs	r3, #0
 800252a:	e000      	b.n	800252e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800252c:	2300      	movs	r3, #0
    }
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bc90      	pop	{r4, r7}
 8002536:	4770      	bx	lr

08002538 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	4608      	mov	r0, r1
 8002542:	4611      	mov	r1, r2
 8002544:	461a      	mov	r2, r3
 8002546:	4603      	mov	r3, r0
 8002548:	817b      	strh	r3, [r7, #10]
 800254a:	460b      	mov	r3, r1
 800254c:	813b      	strh	r3, [r7, #8]
 800254e:	4613      	mov	r3, r2
 8002550:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800255e:	8b3b      	ldrh	r3, [r7, #24]
 8002560:	893a      	ldrh	r2, [r7, #8]
 8002562:	f7ff ffb6 	bl	80024d2 <u8g2_is_intersection_decision_tree>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <u8g2_IsIntersection+0x38>
    return 0; 
 800256c:	2300      	movs	r3, #0
 800256e:	e00a      	b.n	8002586 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	897a      	ldrh	r2, [r7, #10]
 8002580:	f7ff ffa7 	bl	80024d2 <u8g2_is_intersection_decision_tree>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800258e:	b480      	push	{r7}
 8002590:	b089      	sub	sp, #36	; 0x24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	4608      	mov	r0, r1
 8002598:	4611      	mov	r1, r2
 800259a:	461a      	mov	r2, r3
 800259c:	4603      	mov	r3, r0
 800259e:	817b      	strh	r3, [r7, #10]
 80025a0:	460b      	mov	r3, r1
 80025a2:	813b      	strh	r3, [r7, #8]
 80025a4:	4613      	mov	r3, r2
 80025a6:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80025a8:	893b      	ldrh	r3, [r7, #8]
 80025aa:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80025ac:	7efb      	ldrb	r3, [r7, #27]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80025b4:	2301      	movs	r3, #1
 80025b6:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80025b8:	7e3a      	ldrb	r2, [r7, #24]
 80025ba:	7efb      	ldrb	r3, [r7, #27]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d801      	bhi.n	80025d8 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80025d4:	7e3b      	ldrb	r3, [r7, #24]
 80025d6:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80025e2:	7e3b      	ldrb	r3, [r7, #24]
 80025e4:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80025e6:	893b      	ldrh	r3, [r7, #8]
 80025e8:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80025ea:	8afb      	ldrh	r3, [r7, #22]
 80025ec:	f023 0307 	bic.w	r3, r3, #7
 80025f0:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	7c1b      	ldrb	r3, [r3, #16]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	8afa      	ldrh	r2, [r7, #22]
 80025fc:	fb12 f303 	smulbb	r3, r2, r3
 8002600:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002608:	8afb      	ldrh	r3, [r7, #22]
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002610:	897b      	ldrh	r3, [r7, #10]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	4413      	add	r3, r2
 8002616:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	d117      	bne.n	8002650 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	781a      	ldrb	r2, [r3, #0]
 8002624:	7ebb      	ldrb	r3, [r7, #26]
 8002626:	4313      	orrs	r3, r2
 8002628:	b2da      	uxtb	r2, r3
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	781a      	ldrb	r2, [r3, #0]
 8002632:	7e7b      	ldrb	r3, [r7, #25]
 8002634:	4053      	eors	r3, r2
 8002636:	b2da      	uxtb	r2, r3
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	701a      	strb	r2, [r3, #0]
	ptr++;
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	3301      	adds	r3, #1
 8002640:	61fb      	str	r3, [r7, #28]
	len--;
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	3b01      	subs	r3, #1
 8002646:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1e8      	bne.n	8002620 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800264e:	e038      	b.n	80026c2 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	7ebb      	ldrb	r3, [r7, #26]
 8002656:	4313      	orrs	r3, r2
 8002658:	b2da      	uxtb	r2, r3
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	7e7b      	ldrb	r3, [r7, #25]
 8002664:	4053      	eors	r3, r2
 8002666:	b2da      	uxtb	r2, r3
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800266c:	7efb      	ldrb	r3, [r7, #27]
 800266e:	3301      	adds	r3, #1
 8002670:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002672:	7efb      	ldrb	r3, [r7, #27]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	76fb      	strb	r3, [r7, #27]
      len--;
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	3b01      	subs	r3, #1
 800267e:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002680:	7efb      	ldrb	r3, [r7, #27]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d114      	bne.n	80026b0 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800268a:	461a      	mov	r2, r3
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	4413      	add	r3, r2
 8002690:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002698:	2b01      	cmp	r3, #1
 800269a:	d801      	bhi.n	80026a0 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800269c:	2301      	movs	r3, #1
 800269e:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d008      	beq.n	80026bc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	767b      	strb	r3, [r7, #25]
 80026ae:	e005      	b.n	80026bc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80026b0:	7ebb      	ldrb	r3, [r7, #26]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80026b6:	7e7b      	ldrb	r3, [r7, #25]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1c6      	bne.n	8002650 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	79fa      	ldrb	r2, [r7, #7]
 8002732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff ffa9 	bl	80026ce <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff fcaf 	bl	80020e0 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002792:	b480      	push	{r7}
 8002794:	b085      	sub	sp, #20
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027a6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80027a8:	89fb      	ldrh	r3, [r7, #14]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	89fa      	ldrh	r2, [r7, #14]
 80027b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	7c1b      	ldrb	r3, [r3, #16]
 80027b8:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80027ba:	89fb      	ldrh	r3, [r7, #14]
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	89fa      	ldrh	r2, [r7, #14]
 80027c4:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027cc:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80027ce:	89fb      	ldrh	r3, [r7, #14]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	89fa      	ldrh	r2, [r7, #14]
 80027d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027e0:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80027e2:	89fb      	ldrh	r3, [r7, #14]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80027ea:	4413      	add	r3, r2
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	7c52      	ldrb	r2, [r2, #17]
 80027f0:	4293      	cmp	r3, r2
 80027f2:	dd08      	ble.n	8002806 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	7c5b      	ldrb	r3, [r3, #17]
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002800:	b29b      	uxth	r3, r3
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002806:	89fb      	ldrh	r3, [r7, #14]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002828:	89fb      	ldrh	r3, [r7, #14]
 800282a:	4413      	add	r3, r2
 800282c:	b29a      	uxth	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	8a9a      	ldrh	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	8ada      	ldrh	r2, [r3, #22]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af02      	add	r7, sp, #8
 800285a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	4603      	mov	r3, r0
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fe5d 	bl	8002538 <u8g2_IsIntersection>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d104      	bne.n	800288e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800288c:	e03b      	b.n	8002906 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d205      	bcs.n	80028b2 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028be:	429a      	cmp	r2, r3
 80028c0:	d905      	bls.n	80028ce <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80028da:	429a      	cmp	r2, r3
 80028dc:	d205      	bcs.n	80028ea <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d905      	bls.n	8002906 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ff3b 	bl	8002792 <u8g2_update_dimension_common>
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff7b 	bl	8002854 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af02      	add	r7, sp, #8
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	4608      	mov	r0, r1
 8002970:	4611      	mov	r1, r2
 8002972:	461a      	mov	r2, r3
 8002974:	4603      	mov	r3, r0
 8002976:	817b      	strh	r3, [r7, #10]
 8002978:	460b      	mov	r3, r1
 800297a:	813b      	strh	r3, [r7, #8]
 800297c:	4613      	mov	r3, r2
 800297e:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002980:	88f8      	ldrh	r0, [r7, #6]
 8002982:	893a      	ldrh	r2, [r7, #8]
 8002984:	8979      	ldrh	r1, [r7, #10]
 8002986:	7e3b      	ldrb	r3, [r7, #24]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	4603      	mov	r3, r0
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff fcab 	bl	80022e8 <u8g2_draw_hv_line_2dir>
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <u8x8_ascii_next+0x18>
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	2b0a      	cmp	r3, #10
 80029cc:	d102      	bne.n	80029d4 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80029ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d2:	e001      	b.n	80029d8 <u8x8_ascii_next+0x22>
  return b;
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	b29b      	uxth	r3, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <u8x8_utf8_next+0x18>
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	2b0a      	cmp	r3, #10
 80029fa:	d102      	bne.n	8002a02 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80029fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a00:	e06e      	b.n	8002ae0 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d145      	bne.n	8002a98 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	2bfb      	cmp	r3, #251	; 0xfb
 8002a10:	d908      	bls.n	8002a24 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2205      	movs	r2, #5
 8002a16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	70fb      	strb	r3, [r7, #3]
 8002a22:	e032      	b.n	8002a8a <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	2bf7      	cmp	r3, #247	; 0xf7
 8002a28:	d908      	bls.n	8002a3c <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	70fb      	strb	r3, [r7, #3]
 8002a3a:	e026      	b.n	8002a8a <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	2bef      	cmp	r3, #239	; 0xef
 8002a40:	d908      	bls.n	8002a54 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2203      	movs	r2, #3
 8002a46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	70fb      	strb	r3, [r7, #3]
 8002a52:	e01a      	b.n	8002a8a <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	2bdf      	cmp	r3, #223	; 0xdf
 8002a58:	d908      	bls.n	8002a6c <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	70fb      	strb	r3, [r7, #3]
 8002a6a:	e00e      	b.n	8002a8a <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	2bbf      	cmp	r3, #191	; 0xbf
 8002a70:	d908      	bls.n	8002a84 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	70fb      	strb	r3, [r7, #3]
 8002a82:	e002      	b.n	8002a8a <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	e02a      	b.n	8002ae0 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8002a92:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002a96:	e023      	b.n	8002ae0 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8c1b      	ldrh	r3, [r3, #32]
 8002aac:	019b      	lsls	r3, r3, #6
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aba:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8c1a      	ldrh	r2, [r3, #32]
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8002ad6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002ada:	e001      	b.n	8002ae0 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8c1b      	ldrh	r3, [r3, #32]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	460b      	mov	r3, r1
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	691c      	ldr	r4, [r3, #16]
 8002afe:	7afa      	ldrb	r2, [r7, #11]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2117      	movs	r1, #23
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	47a0      	blx	r4
 8002b08:	4603      	mov	r3, r0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd90      	pop	{r4, r7, pc}

08002b12 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002b1e:	1cfb      	adds	r3, r7, #3
 8002b20:	461a      	mov	r2, r3
 8002b22:	2101      	movs	r1, #1
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ffe1 	bl	8002aec <u8x8_byte_SendBytes>
 8002b2a:	4603      	mov	r3, r0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691c      	ldr	r4, [r3, #16]
 8002b40:	2300      	movs	r3, #0
 8002b42:	2200      	movs	r2, #0
 8002b44:	2118      	movs	r1, #24
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	47a0      	blx	r4
 8002b4a:	4603      	mov	r3, r0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd90      	pop	{r4, r7, pc}

08002b54 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691c      	ldr	r4, [r3, #16]
 8002b60:	2300      	movs	r3, #0
 8002b62:	2200      	movs	r2, #0
 8002b64:	2119      	movs	r1, #25
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	47a0      	blx	r4
 8002b6a:	4603      	mov	r3, r0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd90      	pop	{r4, r7, pc}

08002b74 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68dc      	ldr	r4, [r3, #12]
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	2300      	movs	r3, #0
 8002b88:	2115      	movs	r1, #21
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	47a0      	blx	r4
 8002b8e:	4603      	mov	r3, r0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd90      	pop	{r4, r7, pc}

08002b98 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68dc      	ldr	r4, [r3, #12]
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	2300      	movs	r3, #0
 8002bac:	2116      	movs	r1, #22
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	47a0      	blx	r4
 8002bb2:	4603      	mov	r3, r0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	68dc      	ldr	r4, [r3, #12]
 8002bce:	7afa      	ldrb	r2, [r7, #11]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2117      	movs	r1, #23
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	47a0      	blx	r4
 8002bd8:	4603      	mov	r3, r0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}

08002be2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002be2:	b590      	push	{r4, r7, lr}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68dc      	ldr	r4, [r3, #12]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2118      	movs	r1, #24
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	47a0      	blx	r4
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd90      	pop	{r4, r7, pc}

08002c02 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002c02:	b590      	push	{r4, r7, lr}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68dc      	ldr	r4, [r3, #12]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2200      	movs	r2, #0
 8002c12:	2119      	movs	r1, #25
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	47a0      	blx	r4
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd90      	pop	{r4, r7, pc}

08002c22 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002c22:	b590      	push	{r4, r7, lr}
 8002c24:	b085      	sub	sp, #20
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	73fb      	strb	r3, [r7, #15]
    data++;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2bfe      	cmp	r3, #254	; 0xfe
 8002c3c:	d031      	beq.n	8002ca2 <u8x8_cad_SendSequence+0x80>
 8002c3e:	2bfe      	cmp	r3, #254	; 0xfe
 8002c40:	dc3d      	bgt.n	8002cbe <u8x8_cad_SendSequence+0x9c>
 8002c42:	2b19      	cmp	r3, #25
 8002c44:	dc3b      	bgt.n	8002cbe <u8x8_cad_SendSequence+0x9c>
 8002c46:	2b18      	cmp	r3, #24
 8002c48:	da23      	bge.n	8002c92 <u8x8_cad_SendSequence+0x70>
 8002c4a:	2b16      	cmp	r3, #22
 8002c4c:	dc02      	bgt.n	8002c54 <u8x8_cad_SendSequence+0x32>
 8002c4e:	2b15      	cmp	r3, #21
 8002c50:	da03      	bge.n	8002c5a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002c52:	e034      	b.n	8002cbe <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002c54:	2b17      	cmp	r3, #23
 8002c56:	d00e      	beq.n	8002c76 <u8x8_cad_SendSequence+0x54>
	return;
 8002c58:	e031      	b.n	8002cbe <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68dc      	ldr	r4, [r3, #12]
 8002c64:	7bba      	ldrb	r2, [r7, #14]
 8002c66:	7bf9      	ldrb	r1, [r7, #15]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	47a0      	blx	r4
	  data++;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	3301      	adds	r3, #1
 8002c72:	603b      	str	r3, [r7, #0]
	  break;
 8002c74:	e022      	b.n	8002cbc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002c7c:	f107 030e 	add.w	r3, r7, #14
 8002c80:	461a      	mov	r2, r3
 8002c82:	2101      	movs	r1, #1
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff99 	bl	8002bbc <u8x8_cad_SendData>
	  data++;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	603b      	str	r3, [r7, #0]
	  break;
 8002c90:	e014      	b.n	8002cbc <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68dc      	ldr	r4, [r3, #12]
 8002c96:	7bf9      	ldrb	r1, [r7, #15]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	47a0      	blx	r4
	  break;
 8002ca0:	e00c      	b.n	8002cbc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002ca8:	7bbb      	ldrb	r3, [r7, #14]
 8002caa:	461a      	mov	r2, r3
 8002cac:	2129      	movs	r1, #41	; 0x29
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa0b 	bl	80030ca <u8x8_gpio_call>
	  data++;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	603b      	str	r3, [r7, #0]
	  break;
 8002cba:	bf00      	nop
    cmd = *data;
 8002cbc:	e7b6      	b.n	8002c2c <u8x8_cad_SendSequence+0xa>
	return;
 8002cbe:	bf00      	nop
    }
  }
}
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd90      	pop	{r4, r7, pc}

08002cc6 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002cc6:	b590      	push	{r4, r7, lr}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff ff2d 	bl	8002b34 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002cda:	2140      	movs	r1, #64	; 0x40
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff ff18 	bl	8002b12 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	691c      	ldr	r4, [r3, #16]
 8002ce6:	7afa      	ldrb	r2, [r7, #11]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2117      	movs	r1, #23
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7ff ff2f 	bl	8002b54 <u8x8_byte_EndTransfer>
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd90      	pop	{r4, r7, pc}
	...

08002d00 <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	72fb      	strb	r3, [r7, #11]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 8002d12:	7afb      	ldrb	r3, [r7, #11]
 8002d14:	3b14      	subs	r3, #20
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d848      	bhi.n	8002dac <u8x8_cad_ssd13xx_i2c+0xac>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <u8x8_cad_ssd13xx_i2c+0x20>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d89 	.word	0x08002d89
 8002d24:	08002d39 	.word	0x08002d39
 8002d28:	08002d39 	.word	0x08002d39
 8002d2c:	08002d59 	.word	0x08002d59
 8002d30:	08002db1 	.word	0x08002db1
 8002d34:	08002db1 	.word	0x08002db1
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7ff fefb 	bl	8002b34 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 8002d3e:	2100      	movs	r1, #0
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff fee6 	bl	8002b12 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002d46:	7abb      	ldrb	r3, [r7, #10]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f7ff fee1 	bl	8002b12 <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f7ff feff 	bl	8002b54 <u8x8_byte_EndTransfer>
      break;
 8002d56:	e02c      	b.n	8002db2 <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002d5c:	e00a      	b.n	8002d74 <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	2118      	movs	r1, #24
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f7ff ffaf 	bl	8002cc6 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002d68:	7abb      	ldrb	r3, [r7, #10]
 8002d6a:	3b18      	subs	r3, #24
 8002d6c:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	3318      	adds	r3, #24
 8002d72:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002d74:	7abb      	ldrb	r3, [r7, #10]
 8002d76:	2b18      	cmp	r3, #24
 8002d78:	d8f1      	bhi.n	8002d5e <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002d7a:	7abb      	ldrb	r3, [r7, #10]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7ff ffa0 	bl	8002cc6 <u8x8_i2c_data_transfer>
      break;
 8002d86:	e014      	b.n	8002db2 <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d8e:	2bff      	cmp	r3, #255	; 0xff
 8002d90:	d103      	bne.n	8002d9a <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2278      	movs	r2, #120	; 0x78
 8002d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	691c      	ldr	r4, [r3, #16]
 8002d9e:	7aba      	ldrb	r2, [r7, #10]
 8002da0:	7af9      	ldrb	r1, [r7, #11]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	47a0      	blx	r4
 8002da8:	4603      	mov	r3, r0
 8002daa:	e003      	b.n	8002db4 <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e001      	b.n	8002db4 <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 8002db0:	bf00      	nop
  }
  return 1;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd90      	pop	{r4, r7, pc}

08002dbc <u8x8_d_ssd1305_generic>:
};



static uint8_t u8x8_d_ssd1305_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	72fb      	strb	r3, [r7, #11]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002dce:	7afb      	ldrb	r3, [r7, #11]
 8002dd0:	2b0f      	cmp	r3, #15
 8002dd2:	d006      	beq.n	8002de2 <u8x8_d_ssd1305_generic+0x26>
 8002dd4:	2b0f      	cmp	r3, #15
 8002dd6:	dc67      	bgt.n	8002ea8 <u8x8_d_ssd1305_generic+0xec>
 8002dd8:	2b0b      	cmp	r3, #11
 8002dda:	d048      	beq.n	8002e6e <u8x8_d_ssd1305_generic+0xb2>
 8002ddc:	2b0e      	cmp	r3, #14
 8002dde:	d053      	beq.n	8002e88 <u8x8_d_ssd1305_generic+0xcc>
 8002de0:	e062      	b.n	8002ea8 <u8x8_d_ssd1305_generic+0xec>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7ff fefd 	bl	8002be2 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	795b      	ldrb	r3, [r3, #5]
 8002dec:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002e00:	2140      	movs	r1, #64	; 0x40
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f7ff feb6 	bl	8002b74 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f043 0310 	orr.w	r3, r3, #16
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	4619      	mov	r1, r3
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7ff feac 	bl	8002b74 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	4619      	mov	r1, r3
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff feb6 	bl	8002b98 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	799b      	ldrb	r3, [r3, #6]
 8002e30:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	4619      	mov	r1, r3
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff fead 	bl	8002b98 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	791b      	ldrb	r3, [r3, #4]
 8002e42:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002e4a:	7dbb      	ldrb	r3, [r7, #22]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4619      	mov	r1, r3
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff feb1 	bl	8002bbc <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002e5a:	7abb      	ldrb	r3, [r7, #10]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002e60:	7abb      	ldrb	r3, [r7, #10]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1eb      	bne.n	8002e3e <u8x8_d_ssd1305_generic+0x82>
      
      u8x8_cad_EndTransfer(u8x8);
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff fecb 	bl	8002c02 <u8x8_cad_EndTransfer>
      break;
 8002e6c:	e01e      	b.n	8002eac <u8x8_d_ssd1305_generic+0xf0>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002e6e:	7abb      	ldrb	r3, [r7, #10]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d104      	bne.n	8002e7e <u8x8_d_ssd1305_generic+0xc2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave0_seq);
 8002e74:	4910      	ldr	r1, [pc, #64]	; (8002eb8 <u8x8_d_ssd1305_generic+0xfc>)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff fed3 	bl	8002c22 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
      break;
 8002e7c:	e016      	b.n	8002eac <u8x8_d_ssd1305_generic+0xf0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
 8002e7e:	490f      	ldr	r1, [pc, #60]	; (8002ebc <u8x8_d_ssd1305_generic+0x100>)
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7ff fece 	bl	8002c22 <u8x8_cad_SendSequence>
      break;
 8002e86:	e011      	b.n	8002eac <u8x8_d_ssd1305_generic+0xf0>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7ff feaa 	bl	8002be2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002e8e:	2181      	movs	r1, #129	; 0x81
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7ff fe6f 	bl	8002b74 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1305 has range from 0 to 255 */
 8002e96:	7abb      	ldrb	r3, [r7, #10]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7ff fe7c 	bl	8002b98 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f7ff feae 	bl	8002c02 <u8x8_cad_EndTransfer>
      break;
 8002ea6:	e001      	b.n	8002eac <u8x8_d_ssd1305_generic+0xf0>
#endif
    default:
      return 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <u8x8_d_ssd1305_generic+0xf2>
  }
  return 1;
 8002eac:	2301      	movs	r3, #1
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	0801da40 	.word	0x0801da40
 8002ebc:	0801da48 	.word	0x0801da48

08002ec0 <u8x8_d_ssd1305_128x32_noname>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1305_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	72fb      	strb	r3, [r7, #11]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1305_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002ed2:	7aba      	ldrb	r2, [r7, #10]
 8002ed4:	7af9      	ldrb	r1, [r7, #11]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff ff6f 	bl	8002dbc <u8x8_d_ssd1305_generic>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <u8x8_d_ssd1305_128x32_noname+0x28>
    return 1;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e032      	b.n	8002f4e <u8x8_d_ssd1305_128x32_noname+0x8e>
  
  switch(msg)
 8002ee8:	7afb      	ldrb	r3, [r7, #11]
 8002eea:	2b0d      	cmp	r3, #13
 8002eec:	d006      	beq.n	8002efc <u8x8_d_ssd1305_128x32_noname+0x3c>
 8002eee:	2b0d      	cmp	r3, #13
 8002ef0:	dc2a      	bgt.n	8002f48 <u8x8_d_ssd1305_128x32_noname+0x88>
 8002ef2:	2b09      	cmp	r3, #9
 8002ef4:	d023      	beq.n	8002f3e <u8x8_d_ssd1305_128x32_noname+0x7e>
 8002ef6:	2b0a      	cmp	r3, #10
 8002ef8:	d019      	beq.n	8002f2e <u8x8_d_ssd1305_128x32_noname+0x6e>
 8002efa:	e025      	b.n	8002f48 <u8x8_d_ssd1305_128x32_noname+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002efc:	7abb      	ldrb	r3, [r7, #10]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <u8x8_d_ssd1305_128x32_noname+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip0_seq);
 8002f02:	4915      	ldr	r1, [pc, #84]	; (8002f58 <u8x8_d_ssd1305_128x32_noname+0x98>)
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff fe8c 	bl	8002c22 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	7c9a      	ldrb	r2, [r3, #18]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002f16:	e019      	b.n	8002f4c <u8x8_d_ssd1305_128x32_noname+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
 8002f18:	4910      	ldr	r1, [pc, #64]	; (8002f5c <u8x8_d_ssd1305_128x32_noname+0x9c>)
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff fe81 	bl	8002c22 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	7cda      	ldrb	r2, [r3, #19]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002f2c:	e00e      	b.n	8002f4c <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f82e 	bl	8002f90 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_noname_init_seq);    
 8002f34:	490a      	ldr	r1, [pc, #40]	; (8002f60 <u8x8_d_ssd1305_128x32_noname+0xa0>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff fe73 	bl	8002c22 <u8x8_cad_SendSequence>
      break;
 8002f3c:	e006      	b.n	8002f4c <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1305_128x32_noname_display_info);
 8002f3e:	4909      	ldr	r1, [pc, #36]	; (8002f64 <u8x8_d_ssd1305_128x32_noname+0xa4>)
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f811 	bl	8002f68 <u8x8_d_helper_display_setup_memory>
      break;
 8002f46:	e001      	b.n	8002f4c <u8x8_d_ssd1305_128x32_noname+0x8c>
    default:
      return 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <u8x8_d_ssd1305_128x32_noname+0x8e>
  }
  return 1;
 8002f4c:	2301      	movs	r3, #1
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	0801da50 	.word	0x0801da50
 8002f5c:	0801da5c 	.word	0x0801da5c
 8002f60:	0801da80 	.word	0x0801da80
 8002f64:	0801da68 	.word	0x0801da68

08002f68 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	7c9a      	ldrb	r2, [r3, #18]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695c      	ldr	r4, [r3, #20]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2128      	movs	r1, #40	; 0x28
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68dc      	ldr	r4, [r3, #12]
 8002faa:	2300      	movs	r3, #0
 8002fac:	2200      	movs	r2, #0
 8002fae:	2114      	movs	r1, #20
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	214b      	movs	r1, #75	; 0x4b
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f886 	bl	80030ca <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	791b      	ldrb	r3, [r3, #4]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2129      	movs	r1, #41	; 0x29
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f87e 	bl	80030ca <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	214b      	movs	r1, #75	; 0x4b
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f879 	bl	80030ca <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	791b      	ldrb	r3, [r3, #4]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2129      	movs	r1, #41	; 0x29
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f871 	bl	80030ca <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002fe8:	2201      	movs	r2, #1
 8002fea:	214b      	movs	r1, #75	; 0x4b
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f86c 	bl	80030ca <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	795b      	ldrb	r3, [r3, #5]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2129      	movs	r1, #41	; 0x29
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f864 	bl	80030ca <u8x8_gpio_call>
}    
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}

0800300a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800300a:	b590      	push	{r4, r7, lr}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	4608      	mov	r0, r1
 8003014:	4611      	mov	r1, r2
 8003016:	461a      	mov	r2, r3
 8003018:	4603      	mov	r3, r0
 800301a:	70fb      	strb	r3, [r7, #3]
 800301c:	460b      	mov	r3, r1
 800301e:	70bb      	strb	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003028:	78bb      	ldrb	r3, [r7, #2]
 800302a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800302c:	787b      	ldrb	r3, [r7, #1]
 800302e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689c      	ldr	r4, [r3, #8]
 8003038:	f107 0308 	add.w	r3, r7, #8
 800303c:	2201      	movs	r2, #1
 800303e:	210f      	movs	r1, #15
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	47a0      	blx	r4
 8003044:	4603      	mov	r3, r0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bd90      	pop	{r4, r7, pc}

0800304e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800304e:	b590      	push	{r4, r7, lr}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689c      	ldr	r4, [r3, #8]
 800305a:	2300      	movs	r3, #0
 800305c:	2200      	movs	r2, #0
 800305e:	2109      	movs	r1, #9
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	47a0      	blx	r4
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bd90      	pop	{r4, r7, pc}

0800306c <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689c      	ldr	r4, [r3, #8]
 8003078:	2300      	movs	r3, #0
 800307a:	2200      	movs	r2, #0
 800307c:	210a      	movs	r1, #10
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}

0800308a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800308a:	b590      	push	{r4, r7, lr}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689c      	ldr	r4, [r3, #8]
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	2300      	movs	r3, #0
 800309e:	210b      	movs	r1, #11
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	47a0      	blx	r4
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd90      	pop	{r4, r7, pc}

080030ac <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689c      	ldr	r4, [r3, #8]
 80030b8:	2300      	movs	r3, #0
 80030ba:	2200      	movs	r2, #0
 80030bc:	2110      	movs	r1, #16
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	47a0      	blx	r4
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd90      	pop	{r4, r7, pc}

080030ca <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80030ca:	b590      	push	{r4, r7, lr}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	70fb      	strb	r3, [r7, #3]
 80030d6:	4613      	mov	r3, r2
 80030d8:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695c      	ldr	r4, [r3, #20]
 80030de:	78ba      	ldrb	r2, [r7, #2]
 80030e0:	78f9      	ldrb	r1, [r7, #3]
 80030e2:	2300      	movs	r3, #0
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	47a0      	blx	r4
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd90      	pop	{r4, r7, pc}

080030f0 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	72fb      	strb	r3, [r7, #11]
 80030fe:	4613      	mov	r3, r2
 8003100:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a11      	ldr	r2, [pc, #68]	; (8003168 <u8x8_SetupDefaults+0x58>)
 8003122:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <u8x8_SetupDefaults+0x58>)
 8003128:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <u8x8_SetupDefaults+0x58>)
 800312e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <u8x8_SetupDefaults+0x58>)
 8003134:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	22ff      	movs	r2, #255	; 0xff
 8003150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	22ff      	movs	r2, #255	; 0xff
 8003158:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	080030f1 	.word	0x080030f1

0800316c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7ff ffc8 	bl	8003110 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff ff58 	bl	800304e <u8x8_SetupMemory>
}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <decode>:

volatile bool HKIW = false;
volatile bool HKIE = false;

void decode(void *argument)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
    CAN_MSG_t RX;

    for (;;) {
        osMessageQueueGet(msgInQHandle, &RX, NULL, osWaitForever);
 80031b0:	4b16      	ldr	r3, [pc, #88]	; (800320c <decode+0x64>)
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	f107 010c 	add.w	r1, r7, #12
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031bc:	2200      	movs	r2, #0
 80031be:	f008 fbc3 	bl	800b948 <osMessageQueueGet>

        if (RX.Message[0] == 'H') {
 80031c2:	7b3b      	ldrb	r3, [r7, #12]
 80031c4:	2b48      	cmp	r3, #72	; 0x48
 80031c6:	d1f3      	bne.n	80031b0 <decode+0x8>

            keyboard_count += 1;
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <decode+0x68>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <decode+0x68>)
 80031d4:	701a      	strb	r2, [r3, #0]

            // termination (UNTESTED)

            if (RX.Message[1] == 'X') {
 80031d6:	7b7b      	ldrb	r3, [r7, #13]
 80031d8:	2b58      	cmp	r3, #88	; 0x58
 80031da:	d1e9      	bne.n	80031b0 <decode+0x8>

                handshakeRequest = 0;	// or osEventFlagsClear
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <decode+0x6c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]

                // write the signals again to check for future disconnections
                
                osMutexAcquire(readMutexHandle, osWaitForever);
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <decode+0x70>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031ea:	4618      	mov	r0, r3
 80031ec:	f008 f931 	bl	800b452 <osMutexAcquire>
                setOutMuxBit(HKOE_BIT, GPIO_PIN_SET);
 80031f0:	2101      	movs	r1, #1
 80031f2:	2006      	movs	r0, #6
 80031f4:	f000 fecc 	bl	8003f90 <setOutMuxBit>
                setOutMuxBit(HKOE_BIT, GPIO_PIN_SET);
 80031f8:	2101      	movs	r1, #1
 80031fa:	2006      	movs	r0, #6
 80031fc:	f000 fec8 	bl	8003f90 <setOutMuxBit>
                osMutexRelease(readMutexHandle);
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <decode+0x70>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f008 f96f 	bl	800b4e8 <osMutexRelease>
        osMessageQueueGet(msgInQHandle, &RX, NULL, osWaitForever);
 800320a:	e7d1      	b.n	80031b0 <decode+0x8>
 800320c:	20000310 	.word	0x20000310
 8003210:	20000001 	.word	0x20000001
 8003214:	20000000 	.word	0x20000000
 8003218:	200005e8 	.word	0x200005e8

0800321c <CAN_Transmit>:
        }
    }
}

void CAN_Transmit(void *argument)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
    CAN_MSG_t TX;
    for (;;) {
        osMessageQueueGet(msgOutQHandle, &TX, NULL, osWaitForever);
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <CAN_Transmit+0x38>)
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	f107 010c 	add.w	r1, r7, #12
 800322c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003230:	2200      	movs	r2, #0
 8003232:	f008 fb89 	bl	800b948 <osMessageQueueGet>
        osSemaphoreAcquire(CAN_TX_SemaphoreHandle, osWaitForever);
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <CAN_Transmit+0x3c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800323e:	4618      	mov	r0, r3
 8003240:	f008 fa18 	bl	800b674 <osSemaphoreAcquire>
        CAN_TX(TX.ID, TX.Message);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f107 020c 	add.w	r2, r7, #12
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f000 f8b5 	bl	80033bc <CAN_TX>
        osMessageQueueGet(msgOutQHandle, &TX, NULL, osWaitForever);
 8003252:	e7e7      	b.n	8003224 <CAN_Transmit+0x8>
 8003254:	20000314 	.word	0x20000314
 8003258:	2000030c 	.word	0x2000030c

0800325c <handshake>:
    }
}

void handshake(void *argument)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    if (handshakeRequest) {	
 8003264:	4b31      	ldr	r3, [pc, #196]	; (800332c <handshake+0xd0>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d05a      	beq.n	8003322 <handshake+0xc6>
        // this could replaced with a flag ?
        // maybe something like osEventFlagsWait ?
        // osEventFlagsSet could be called from the task reading user inputs

        // write the outgoing handshaking signals to high
        outbits[5] = 1;
 800326c:	4b30      	ldr	r3, [pc, #192]	; (8003330 <handshake+0xd4>)
 800326e:	2201      	movs	r2, #1
 8003270:	715a      	strb	r2, [r3, #5]
        outbits[6] = 1;
 8003272:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <handshake+0xd4>)
 8003274:	2201      	movs	r2, #1
 8003276:	719a      	strb	r2, [r3, #6]

        osDelay(2000);
 8003278:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800327c:	f008 f848 	bl	800b310 <osDelay>
        
        // the keyboards turn off their east outgoing signal in turn
        // starting from the leftmost keyboard

        // wait for the west-side handshaking signal to go high
        while (!HKIW) {
 8003280:	e002      	b.n	8003288 <handshake+0x2c>
                osDelay(100);
 8003282:	2064      	movs	r0, #100	; 0x64
 8003284:	f008 f844 	bl	800b310 <osDelay>
        while (!HKIW) {
 8003288:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <handshake+0xd8>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f083 0301 	eor.w	r3, r3, #1
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f4      	bne.n	8003282 <handshake+0x26>
        }

        // keyboard_count is incremented at every received CAN message
        // -> see the decode task
        keyboard_position = keyboard_count - 1;
 8003298:	4b27      	ldr	r3, [pc, #156]	; (8003338 <handshake+0xdc>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4b26      	ldr	r3, [pc, #152]	; (800333c <handshake+0xe0>)
 80032a4:	701a      	strb	r2, [r3, #0]
        octave = keyboard_position + 3;
 80032a6:	4b25      	ldr	r3, [pc, #148]	; (800333c <handshake+0xe0>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3303      	adds	r3, #3
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	4b23      	ldr	r3, [pc, #140]	; (8003340 <handshake+0xe4>)
 80032b4:	801a      	strh	r2, [r3, #0]
        // inform other keyboards
        // send unique ID and position as per instructions

        CAN_MSG_t TX;

        TX.ID = IDout;
 80032b6:	f240 1323 	movw	r3, #291	; 0x123
 80032ba:	61fb      	str	r3, [r7, #28]
        TX.Message[0] = 'H';
 80032bc:	2348      	movs	r3, #72	; 0x48
 80032be:	753b      	strb	r3, [r7, #20]
        TX.Message[1] = (uint8_t) (UID0 & 0xF000) >> 24;
 80032c0:	2300      	movs	r3, #0
 80032c2:	757b      	strb	r3, [r7, #21]
        TX.Message[2] = (uint8_t) (UID0 & 0x0F00) >> 16;
 80032c4:	2300      	movs	r3, #0
 80032c6:	75bb      	strb	r3, [r7, #22]
        TX.Message[3] = (uint8_t) (UID0 & 0x00F0) >> 8;
 80032c8:	2300      	movs	r3, #0
 80032ca:	75fb      	strb	r3, [r7, #23]
        TX.Message[4] = (uint8_t) (UID0 & 0x000F);
 80032cc:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <handshake+0xe8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	763b      	strb	r3, [r7, #24]
        TX.Message[5] = keyboard_position;
 80032da:	4b18      	ldr	r3, [pc, #96]	; (800333c <handshake+0xe0>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	767b      	strb	r3, [r7, #25]

        osMessageQueuePut(msgOutQHandle, &TX, 0, 0);
 80032e2:	4b19      	ldr	r3, [pc, #100]	; (8003348 <handshake+0xec>)
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	f107 0114 	add.w	r1, r7, #20
 80032ea:	2300      	movs	r3, #0
 80032ec:	2200      	movs	r2, #0
 80032ee:	f008 facb 	bl	800b888 <osMessageQueuePut>

        // display the data to check
        char UID0text[8];
        sprintf(UID0text, "%lX", UID0);
 80032f2:	4b14      	ldr	r3, [pc, #80]	; (8003344 <handshake+0xe8>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	f107 030c 	add.w	r3, r7, #12
 80032fa:	4914      	ldr	r1, [pc, #80]	; (800334c <handshake+0xf0>)
 80032fc:	4618      	mov	r0, r3
 80032fe:	f00b feb5 	bl	800f06c <siprintf>
        //serialPrintln(UID0text);

        char posText[2];
        sprintf(posText, "%i", keyboard_position);
 8003302:	4b0e      	ldr	r3, [pc, #56]	; (800333c <handshake+0xe0>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	f107 0308 	add.w	r3, r7, #8
 800330e:	4910      	ldr	r1, [pc, #64]	; (8003350 <handshake+0xf4>)
 8003310:	4618      	mov	r0, r3
 8003312:	f00b feab 	bl	800f06c <siprintf>
        //serialPrintln(posText);

        HAL_Delay(100);
 8003316:	2064      	movs	r0, #100	; 0x64
 8003318:	f002 faa0 	bl	800585c <HAL_Delay>

        // turn off the east outgoing signal to inform the next keyboard

        outbits[6] = 0;
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <handshake+0xd4>)
 800331e:	2200      	movs	r2, #0
 8003320:	719a      	strb	r2, [r3, #6]
    }


    for(;;){
        osDelay(1);
 8003322:	2001      	movs	r0, #1
 8003324:	f007 fff4 	bl	800b310 <osDelay>
 8003328:	e7fb      	b.n	8003322 <handshake+0xc6>
 800332a:	bf00      	nop
 800332c:	20000000 	.word	0x20000000
 8003330:	20000004 	.word	0x20000004
 8003334:	2000031d 	.word	0x2000031d
 8003338:	20000001 	.word	0x20000001
 800333c:	2000031c 	.word	0x2000031c
 8003340:	2000000c 	.word	0x2000000c
 8003344:	20000318 	.word	0x20000318
 8003348:	20000314 	.word	0x20000314
 800334c:	08010b68 	.word	0x08010b68
 8003350:	08010b6c 	.word	0x08010b6c

08003354 <setCANFilter>:
}




uint32_t setCANFilter(uint32_t filterID, uint32_t maskID, uint32_t filterBank) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b08e      	sub	sp, #56	; 0x38
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]

	CAN_FilterTypeDef filterInfo = { 0 };
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	2228      	movs	r2, #40	; 0x28
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f00b fd69 	bl	800ee40 <memset>

	filterInfo.FilterIdHigh = (filterID << 5) & 0xffe0;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	015b      	lsls	r3, r3, #5
 8003372:	b29b      	uxth	r3, r3
 8003374:	613b      	str	r3, [r7, #16]
	filterInfo.FilterIdLow = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
	filterInfo.FilterMaskIdHigh = (maskID << 5) & 0xffe0;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	015b      	lsls	r3, r3, #5
 800337e:	b29b      	uxth	r3, r3
 8003380:	61bb      	str	r3, [r7, #24]
	filterInfo.FilterMaskIdLow = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
	filterInfo.FilterFIFOAssignment = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	623b      	str	r3, [r7, #32]
	filterInfo.FilterBank = filterBank & 0xf;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
	filterInfo.FilterMode = CAN_FILTERMODE_IDMASK;
 8003392:	2300      	movs	r3, #0
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
	filterInfo.FilterScale = CAN_FILTERSCALE_32BIT;
 8003396:	2301      	movs	r3, #1
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterInfo.FilterActivation = CAN_FILTER_ENABLE;
 800339a:	2301      	movs	r3, #1
 800339c:	633b      	str	r3, [r7, #48]	; 0x30
	filterInfo.SlaveStartFilterBank = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	637b      	str	r3, [r7, #52]	; 0x34

	return (uint32_t) HAL_CAN_ConfigFilter(&hcan1, &filterInfo);
 80033a2:	f107 0310 	add.w	r3, r7, #16
 80033a6:	4619      	mov	r1, r3
 80033a8:	4803      	ldr	r0, [pc, #12]	; (80033b8 <setCANFilter+0x64>)
 80033aa:	f003 fa36 	bl	800681a <HAL_CAN_ConfigFilter>
 80033ae:	4603      	mov	r3, r0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3738      	adds	r7, #56	; 0x38
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000384 	.word	0x20000384

080033bc <CAN_TX>:

uint32_t CAN_TX(uint32_t ID, uint8_t data[8]) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]

	CAN_TxHeaderTypeDef txHeader = { 0 };
 80033c6:	f107 0308 	add.w	r3, r7, #8
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	605a      	str	r2, [r3, #4]
 80033d0:	609a      	str	r2, [r3, #8]
 80033d2:	60da      	str	r2, [r3, #12]
 80033d4:	611a      	str	r2, [r3, #16]
 80033d6:	615a      	str	r2, [r3, #20]

	txHeader.StdId = ID & 0x7ff;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033de:	60bb      	str	r3, [r7, #8]
	txHeader.ExtId = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
	txHeader.IDE = CAN_ID_STD;
 80033e4:	2300      	movs	r3, #0
 80033e6:	613b      	str	r3, [r7, #16]
	txHeader.RTR = CAN_RTR_DATA;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
	txHeader.DLC = 8;
 80033ec:	2308      	movs	r3, #8
 80033ee:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	773b      	strb	r3, [r7, #28]

	while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1))
 80033f4:	bf00      	nop
 80033f6:	4809      	ldr	r0, [pc, #36]	; (800341c <CAN_TX+0x60>)
 80033f8:	f003 fbed 	bl	8006bd6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f9      	beq.n	80033f6 <CAN_TX+0x3a>
		;

	return (uint32_t) HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, NULL);
 8003402:	f107 0108 	add.w	r1, r7, #8
 8003406:	2300      	movs	r3, #0
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	4804      	ldr	r0, [pc, #16]	; (800341c <CAN_TX+0x60>)
 800340c:	f003 fb13 	bl	8006a36 <HAL_CAN_AddTxMessage>
 8003410:	4603      	mov	r3, r0

}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000384 	.word	0x20000384

08003420 <CAN_RX>:

	return HAL_CAN_GetRxFifoFillLevel(&hcan1, 0);

}

uint32_t CAN_RX(uint32_t *ID, uint8_t data[8]) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef rxHeader;

	while (!HAL_CAN_GetRxFifoFillLevel(&hcan1, 0))
 800342a:	bf00      	nop
 800342c:	2100      	movs	r1, #0
 800342e:	480b      	ldr	r0, [pc, #44]	; (800345c <CAN_RX+0x3c>)
 8003430:	f003 fd18 	bl	8006e64 <HAL_CAN_GetRxFifoFillLevel>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f8      	beq.n	800342c <CAN_RX+0xc>
		;

	uint32_t result = (uint32_t) HAL_CAN_GetRxMessage(&hcan1, 0, &rxHeader,
 800343a:	f107 0208 	add.w	r2, r7, #8
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2100      	movs	r1, #0
 8003442:	4806      	ldr	r0, [pc, #24]	; (800345c <CAN_RX+0x3c>)
 8003444:	f003 fbfc 	bl	8006c40 <HAL_CAN_GetRxMessage>
 8003448:	4603      	mov	r3, r0
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
			data);

	*ID = rxHeader.StdId;
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	601a      	str	r2, [r3, #0]

	return result;
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003454:	4618      	mov	r0, r3
 8003456:	3728      	adds	r7, #40	; 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000384 	.word	0x20000384

08003460 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	CAN_MSG_t RX;
	CAN_RX(&RX.ID, RX.Message);
 8003468:	f107 020c 	add.w	r2, r7, #12
 800346c:	f107 030c 	add.w	r3, r7, #12
 8003470:	3308      	adds	r3, #8
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ffd3 	bl	8003420 <CAN_RX>
	osMessageQueuePut(msgInQHandle, &RX.Message, 0, 0);
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	f107 010c 	add.w	r1, r7, #12
 8003482:	2300      	movs	r3, #0
 8003484:	2200      	movs	r2, #0
 8003486:	f008 f9ff 	bl	800b888 <osMessageQueuePut>
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000310 	.word	0x20000310

08003498 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f008 f937 	bl	800b718 <osSemaphoreRelease>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	2000030c 	.word	0x2000030c

080034b8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f008 f927 	bl	800b718 <osSemaphoreRelease>
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	2000030c 	.word	0x2000030c

080034d8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f008 f917 	bl	800b718 <osSemaphoreRelease>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	2000030c 	.word	0x2000030c

080034f8 <MX_DMA_Init>:
UART_HandleTypeDef huart2;


//Enable DMA controller clock
void MX_DMA_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0

  // DMA controller clock enable
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <MX_DMA_Init+0x38>)
 8003500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003502:	4a0b      	ldr	r2, [pc, #44]	; (8003530 <MX_DMA_Init+0x38>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6493      	str	r3, [r2, #72]	; 0x48
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <MX_DMA_Init+0x38>)
 800350c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]

  // DMA interrupt init
  // DMA1_Channel3_IRQn interrupt configuration
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003516:	2200      	movs	r2, #0
 8003518:	2105      	movs	r1, #5
 800351a:	200d      	movs	r0, #13
 800351c:	f003 ffba 	bl	8007494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003520:	200d      	movs	r0, #13
 8003522:	f003 ffd3 	bl	80074cc <HAL_NVIC_EnableIRQ>

}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000

08003534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b096      	sub	sp, #88	; 0x58
 8003538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800353a:	f107 0314 	add.w	r3, r7, #20
 800353e:	2244      	movs	r2, #68	; 0x44
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f00b fc7c 	bl	800ee40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003548:	463b      	mov	r3, r7
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	60da      	str	r2, [r3, #12]
 8003554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003556:	f44f 7000 	mov.w	r0, #512	; 0x200
 800355a:	f005 fab9 	bl	8008ad0 <HAL_PWREx_ControlVoltageScaling>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003564:	f001 f926 	bl	80047b4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003568:	f005 fa94 	bl	8008a94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800356c:	4b21      	ldr	r3, [pc, #132]	; (80035f4 <SystemClock_Config+0xc0>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	4a20      	ldr	r2, [pc, #128]	; (80035f4 <SystemClock_Config+0xc0>)
 8003574:	f023 0318 	bic.w	r3, r3, #24
 8003578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800357c:	2314      	movs	r3, #20
 800357e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003580:	2301      	movs	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003584:	2301      	movs	r3, #1
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800358c:	2360      	movs	r3, #96	; 0x60
 800358e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003590:	2302      	movs	r3, #2
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003594:	2301      	movs	r3, #1
 8003596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003598:	2301      	movs	r3, #1
 800359a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800359c:	2328      	movs	r3, #40	; 0x28
 800359e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80035a0:	2307      	movs	r3, #7
 80035a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80035a4:	2302      	movs	r3, #2
 80035a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80035a8:	2302      	movs	r3, #2
 80035aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	4618      	mov	r0, r3
 80035b2:	f005 fae3 	bl	8008b7c <HAL_RCC_OscConfig>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80035bc:	f001 f8fa 	bl	80047b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035c0:	230f      	movs	r3, #15
 80035c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035c4:	2303      	movs	r3, #3
 80035c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035d0:	2300      	movs	r3, #0
 80035d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80035d4:	463b      	mov	r3, r7
 80035d6:	2104      	movs	r1, #4
 80035d8:	4618      	mov	r0, r3
 80035da:	f005 fee3 	bl	80093a4 <HAL_RCC_ClockConfig>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80035e4:	f001 f8e6 	bl	80047b4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80035e8:	f006 fb28 	bl	8009c3c <HAL_RCCEx_EnableMSIPLLMode>
}
 80035ec:	bf00      	nop
 80035ee:	3758      	adds	r7, #88	; 0x58
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40021000 	.word	0x40021000

080035f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init()
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035fe:	463b      	mov	r3, r7
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
 800360c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800360e:	4b29      	ldr	r3, [pc, #164]	; (80036b4 <MX_ADC1_Init+0xbc>)
 8003610:	4a29      	ldr	r2, [pc, #164]	; (80036b8 <MX_ADC1_Init+0xc0>)
 8003612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003614:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <MX_ADC1_Init+0xbc>)
 8003616:	2200      	movs	r2, #0
 8003618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800361a:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <MX_ADC1_Init+0xbc>)
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <MX_ADC1_Init+0xbc>)
 8003622:	2200      	movs	r2, #0
 8003624:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003626:	4b23      	ldr	r3, [pc, #140]	; (80036b4 <MX_ADC1_Init+0xbc>)
 8003628:	2200      	movs	r2, #0
 800362a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800362c:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <MX_ADC1_Init+0xbc>)
 800362e:	2204      	movs	r2, #4
 8003630:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003632:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <MX_ADC1_Init+0xbc>)
 8003634:	2200      	movs	r2, #0
 8003636:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003638:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <MX_ADC1_Init+0xbc>)
 800363a:	2200      	movs	r2, #0
 800363c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <MX_ADC1_Init+0xbc>)
 8003640:	2201      	movs	r2, #1
 8003642:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003644:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <MX_ADC1_Init+0xbc>)
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <MX_ADC1_Init+0xbc>)
 800364e:	2200      	movs	r2, #0
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <MX_ADC1_Init+0xbc>)
 8003654:	2200      	movs	r2, #0
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003658:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <MX_ADC1_Init+0xbc>)
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003660:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <MX_ADC1_Init+0xbc>)
 8003662:	2200      	movs	r2, #0
 8003664:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <MX_ADC1_Init+0xbc>)
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800366e:	4811      	ldr	r0, [pc, #68]	; (80036b4 <MX_ADC1_Init+0xbc>)
 8003670:	f002 fab0 	bl	8005bd4 <HAL_ADC_Init>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800367a:	f001 f89b 	bl	80047b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800367e:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <MX_ADC1_Init+0xc4>)
 8003680:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003682:	2306      	movs	r3, #6
 8003684:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800368a:	237f      	movs	r3, #127	; 0x7f
 800368c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800368e:	2304      	movs	r3, #4
 8003690:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003696:	463b      	mov	r3, r7
 8003698:	4619      	mov	r1, r3
 800369a:	4806      	ldr	r0, [pc, #24]	; (80036b4 <MX_ADC1_Init+0xbc>)
 800369c:	f002 fbe2 	bl	8005e64 <HAL_ADC_ConfigChannel>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80036a6:	f001 f885 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80036aa:	bf00      	nop
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000320 	.word	0x20000320
 80036b8:	50040000 	.word	0x50040000
 80036bc:	14f00020 	.word	0x14f00020

080036c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN1_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80036c4:	4b18      	ldr	r3, [pc, #96]	; (8003728 <MX_CAN1_Init+0x68>)
 80036c6:	4a19      	ldr	r2, [pc, #100]	; (800372c <MX_CAN1_Init+0x6c>)
 80036c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <MX_CAN1_Init+0x68>)
 80036cc:	2228      	movs	r2, #40	; 0x28
 80036ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80036d0:	4b15      	ldr	r3, [pc, #84]	; (8003728 <MX_CAN1_Init+0x68>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80036d6:	4b14      	ldr	r3, [pc, #80]	; (8003728 <MX_CAN1_Init+0x68>)
 80036d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036dc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <MX_CAN1_Init+0x68>)
 80036e0:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80036e4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <MX_CAN1_Init+0x68>)
 80036e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036ec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <MX_CAN1_Init+0x68>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <MX_CAN1_Init+0x68>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <MX_CAN1_Init+0x68>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <MX_CAN1_Init+0x68>)
 8003702:	2201      	movs	r2, #1
 8003704:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <MX_CAN1_Init+0x68>)
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <MX_CAN1_Init+0x68>)
 800370e:	2201      	movs	r2, #1
 8003710:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003712:	4805      	ldr	r0, [pc, #20]	; (8003728 <MX_CAN1_Init+0x68>)
 8003714:	f002 ff86 	bl	8006624 <HAL_CAN_Init>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800371e:	f001 f849 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000384 	.word	0x20000384
 800372c:	40006400 	.word	0x40006400

08003730 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC1_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	; 0x28
 8003734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003736:	1d3b      	adds	r3, r7, #4
 8003738:	2224      	movs	r2, #36	; 0x24
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f00b fb7f 	bl	800ee40 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003742:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <MX_DAC1_Init+0x78>)
 8003744:	4a19      	ldr	r2, [pc, #100]	; (80037ac <MX_DAC1_Init+0x7c>)
 8003746:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003748:	4817      	ldr	r0, [pc, #92]	; (80037a8 <MX_DAC1_Init+0x78>)
 800374a:	f003 fecd 	bl	80074e8 <HAL_DAC_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003754:	f001 f82e 	bl	80047b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003758:	2300      	movs	r3, #0
 800375a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800375c:	2324      	movs	r3, #36	; 0x24
 800375e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003764:	2300      	movs	r3, #0
 8003766:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800376c:	1d3b      	adds	r3, r7, #4
 800376e:	2200      	movs	r2, #0
 8003770:	4619      	mov	r1, r3
 8003772:	480d      	ldr	r0, [pc, #52]	; (80037a8 <MX_DAC1_Init+0x78>)
 8003774:	f004 f814 	bl	80077a0 <HAL_DAC_ConfigChannel>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800377e:	f001 f819 	bl	80047b4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8003782:	2304      	movs	r3, #4
 8003784:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8003786:	2301      	movs	r3, #1
 8003788:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800378a:	1d3b      	adds	r3, r7, #4
 800378c:	2210      	movs	r2, #16
 800378e:	4619      	mov	r1, r3
 8003790:	4805      	ldr	r0, [pc, #20]	; (80037a8 <MX_DAC1_Init+0x78>)
 8003792:	f004 f805 	bl	80077a0 <HAL_DAC_ConfigChannel>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 800379c:	f001 f80a 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80037a0:	bf00      	nop
 80037a2:	3728      	adds	r7, #40	; 0x28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	200003ac 	.word	0x200003ac
 80037ac:	40007400 	.word	0x40007400

080037b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <MX_I2C1_Init+0x7c>)
 80037b6:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <MX_I2C1_Init+0x80>)
 80037b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F33;
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <MX_I2C1_Init+0x7c>)
 80037bc:	4a1d      	ldr	r2, [pc, #116]	; (8003834 <MX_I2C1_Init+0x84>)
 80037be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80037c0:	4b1a      	ldr	r3, [pc, #104]	; (800382c <MX_I2C1_Init+0x7c>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037c6:	4b19      	ldr	r3, [pc, #100]	; (800382c <MX_I2C1_Init+0x7c>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037cc:	4b17      	ldr	r3, [pc, #92]	; (800382c <MX_I2C1_Init+0x7c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80037d2:	4b16      	ldr	r3, [pc, #88]	; (800382c <MX_I2C1_Init+0x7c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <MX_I2C1_Init+0x7c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <MX_I2C1_Init+0x7c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <MX_I2C1_Init+0x7c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037ea:	4810      	ldr	r0, [pc, #64]	; (800382c <MX_I2C1_Init+0x7c>)
 80037ec:	f004 fd18 	bl	8008220 <HAL_I2C_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80037f6:	f000 ffdd 	bl	80047b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037fa:	2100      	movs	r1, #0
 80037fc:	480b      	ldr	r0, [pc, #44]	; (800382c <MX_I2C1_Init+0x7c>)
 80037fe:	f005 f891 	bl	8008924 <HAL_I2CEx_ConfigAnalogFilter>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003808:	f000 ffd4 	bl	80047b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800380c:	2100      	movs	r1, #0
 800380e:	4807      	ldr	r0, [pc, #28]	; (800382c <MX_I2C1_Init+0x7c>)
 8003810:	f005 f8d3 	bl	80089ba <HAL_I2CEx_ConfigDigitalFilter>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800381a:	f000 ffcb 	bl	80047b4 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800381e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003822:	f005 f917 	bl	8008a54 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000408 	.word	0x20000408
 8003830:	40005400 	.word	0x40005400
 8003834:	00300f33 	.word	0x00300f33

08003838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800383e:	f107 0310 	add.w	r3, r7, #16
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003856:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <MX_TIM2_Init+0x98>)
 8003858:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800385c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800385e:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <MX_TIM2_Init+0x98>)
 8003860:	2200      	movs	r2, #0
 8003862:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003864:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <MX_TIM2_Init+0x98>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 800386a:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <MX_TIM2_Init+0x98>)
 800386c:	f240 7216 	movw	r2, #1814	; 0x716
 8003870:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003872:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <MX_TIM2_Init+0x98>)
 8003874:	2200      	movs	r2, #0
 8003876:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <MX_TIM2_Init+0x98>)
 800387a:	2200      	movs	r2, #0
 800387c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800387e:	4814      	ldr	r0, [pc, #80]	; (80038d0 <MX_TIM2_Init+0x98>)
 8003880:	f006 fade 	bl	8009e40 <HAL_TIM_Base_Init>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800388a:	f000 ff93 	bl	80047b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800388e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003892:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003894:	f107 0310 	add.w	r3, r7, #16
 8003898:	4619      	mov	r1, r3
 800389a:	480d      	ldr	r0, [pc, #52]	; (80038d0 <MX_TIM2_Init+0x98>)
 800389c:	f006 fce7 	bl	800a26e <HAL_TIM_ConfigClockSource>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80038a6:	f000 ff85 	bl	80047b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80038aa:	2320      	movs	r3, #32
 80038ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038b2:	1d3b      	adds	r3, r7, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4806      	ldr	r0, [pc, #24]	; (80038d0 <MX_TIM2_Init+0x98>)
 80038b8:	f006 fec8 	bl	800a64c <HAL_TIMEx_MasterConfigSynchronization>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80038c2:	f000 ff77 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038c6:	bf00      	nop
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	2000045c 	.word	0x2000045c

080038d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM6_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038da:	1d3b      	adds	r3, r7, #4
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80038e4:	4b14      	ldr	r3, [pc, #80]	; (8003938 <MX_TIM6_Init+0x64>)
 80038e6:	4a15      	ldr	r2, [pc, #84]	; (800393c <MX_TIM6_Init+0x68>)
 80038e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <MX_TIM6_Init+0x64>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <MX_TIM6_Init+0x64>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3636-1;
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <MX_TIM6_Init+0x64>)
 80038f8:	f640 6233 	movw	r2, #3635	; 0xe33
 80038fc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038fe:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <MX_TIM6_Init+0x64>)
 8003900:	2200      	movs	r2, #0
 8003902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003904:	480c      	ldr	r0, [pc, #48]	; (8003938 <MX_TIM6_Init+0x64>)
 8003906:	f006 fa9b 	bl	8009e40 <HAL_TIM_Base_Init>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003910:	f000 ff50 	bl	80047b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003914:	2320      	movs	r3, #32
 8003916:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800391c:	1d3b      	adds	r3, r7, #4
 800391e:	4619      	mov	r1, r3
 8003920:	4805      	ldr	r0, [pc, #20]	; (8003938 <MX_TIM6_Init+0x64>)
 8003922:	f006 fe93 	bl	800a64c <HAL_TIMEx_MasterConfigSynchronization>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800392c:	f000 ff42 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200004a8 	.word	0x200004a8
 800393c:	40001000 	.word	0x40001000

08003940 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM7_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003946:	1d3b      	adds	r3, r7, #4
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <MX_TIM7_Init+0x64>)
 8003952:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <MX_TIM7_Init+0x68>)
 8003954:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80-1;
 8003956:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <MX_TIM7_Init+0x64>)
 8003958:	224f      	movs	r2, #79	; 0x4f
 800395a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <MX_TIM7_Init+0x64>)
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <MX_TIM7_Init+0x64>)
 8003964:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003968:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <MX_TIM7_Init+0x64>)
 800396c:	2200      	movs	r2, #0
 800396e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003970:	480c      	ldr	r0, [pc, #48]	; (80039a4 <MX_TIM7_Init+0x64>)
 8003972:	f006 fa65 	bl	8009e40 <HAL_TIM_Base_Init>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800397c:	f000 ff1a 	bl	80047b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003980:	2300      	movs	r3, #0
 8003982:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	4619      	mov	r1, r3
 800398c:	4805      	ldr	r0, [pc, #20]	; (80039a4 <MX_TIM7_Init+0x64>)
 800398e:	f006 fe5d 	bl	800a64c <HAL_TIMEx_MasterConfigSynchronization>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003998:	f000 ff0c 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	200004f4 	.word	0x200004f4
 80039a8:	40001400 	.word	0x40001400

080039ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039b2:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <MX_USART2_UART_Init+0x5c>)
 80039b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039b6:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039d2:	220c      	movs	r2, #12
 80039d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039d8:	2200      	movs	r2, #0
 80039da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039de:	2200      	movs	r2, #0
 80039e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039ee:	4805      	ldr	r0, [pc, #20]	; (8003a04 <MX_USART2_UART_Init+0x58>)
 80039f0:	f006 feb0 	bl	800a754 <HAL_UART_Init>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80039fa:	f000 fedb 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000540 	.word	0x20000540
 8003a08:	40004400 	.word	0x40004400

08003a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a12:	f107 030c 	add.w	r3, r7, #12
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	60da      	str	r2, [r3, #12]
 8003a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a22:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <MX_GPIO_Init+0xd4>)
 8003a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a26:	4a2e      	ldr	r2, [pc, #184]	; (8003ae0 <MX_GPIO_Init+0xd4>)
 8003a28:	f043 0304 	orr.w	r3, r3, #4
 8003a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <MX_GPIO_Init+0xd4>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3a:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <MX_GPIO_Init+0xd4>)
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3e:	4a28      	ldr	r2, [pc, #160]	; (8003ae0 <MX_GPIO_Init+0xd4>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a46:	4b26      	ldr	r3, [pc, #152]	; (8003ae0 <MX_GPIO_Init+0xd4>)
 8003a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a52:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <MX_GPIO_Init+0xd4>)
 8003a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a56:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <MX_GPIO_Init+0xd4>)
 8003a58:	f043 0302 	orr.w	r3, r3, #2
 8003a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a5e:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <MX_GPIO_Init+0xd4>)
 8003a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2140      	movs	r1, #64	; 0x40
 8003a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a72:	f004 fbbd 	bl	80081f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RA0_Pin|RA1_Pin|LED_BUILTIN_Pin|RA2_Pin
 8003a76:	2200      	movs	r2, #0
 8003a78:	213b      	movs	r1, #59	; 0x3b
 8003a7a:	481a      	ldr	r0, [pc, #104]	; (8003ae4 <MX_GPIO_Init+0xd8>)
 8003a7c:	f004 fbb8 	bl	80081f0 <HAL_GPIO_WritePin>
                          |OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C0_Pin C2_Pin C1_Pin C3_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C2_Pin|C1_Pin|C3_Pin;
 8003a80:	f44f 7362 	mov.w	r3, #904	; 0x388
 8003a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	4619      	mov	r1, r3
 8003a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a98:	f004 fa28 	bl	8007eec <HAL_GPIO_Init>

  /*Configure GPIO pin : REN_Pin */
  GPIO_InitStruct.Pin = REN_Pin;
 8003a9c:	2340      	movs	r3, #64	; 0x40
 8003a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(REN_GPIO_Port, &GPIO_InitStruct);
 8003aac:	f107 030c 	add.w	r3, r7, #12
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ab6:	f004 fa19 	bl	8007eec <HAL_GPIO_Init>

  /*Configure GPIO pins : RA0_Pin RA1_Pin LED_BUILTIN_Pin RA2_Pin
                           OUT_Pin */
  GPIO_InitStruct.Pin = RA0_Pin|RA1_Pin|LED_BUILTIN_Pin|RA2_Pin
 8003aba:	233b      	movs	r3, #59	; 0x3b
 8003abc:	60fb      	str	r3, [r7, #12]
                          |OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aca:	f107 030c 	add.w	r3, r7, #12
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4804      	ldr	r0, [pc, #16]	; (8003ae4 <MX_GPIO_Init+0xd8>)
 8003ad2:	f004 fa0b 	bl	8007eec <HAL_GPIO_Init>

}
 8003ad6:	bf00      	nop
 8003ad8:	3720      	adds	r7, #32
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	48000400 	.word	0x48000400

08003ae8 <u8x8_gpio_and_delay>:


uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	72fb      	strb	r3, [r7, #11]
 8003af6:	4613      	mov	r3, r2
 8003af8:	72bb      	strb	r3, [r7, #10]
	return 1;
 8003afa:	2301      	movs	r3, #1
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <u8x8_byte_i2c>:


uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	72fb      	strb	r3, [r7, #11]
 8003b16:	4613      	mov	r3, r2
 8003b18:	72bb      	strb	r3, [r7, #10]
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch (msg) {
 8003b1a:	7afb      	ldrb	r3, [r7, #11]
 8003b1c:	3b14      	subs	r3, #20
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d847      	bhi.n	8003bb2 <u8x8_byte_i2c+0xaa>
 8003b22:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <u8x8_byte_i2c+0x20>)
 8003b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b28:	08003bb7 	.word	0x08003bb7
 8003b2c:	08003bb3 	.word	0x08003bb3
 8003b30:	08003bb3 	.word	0x08003bb3
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	08003b8d 	.word	0x08003b8d
 8003b3c:	08003b95 	.word	0x08003b95
 8003b40:	08003bb3 	.word	0x08003bb3
 8003b44:	08003bb3 	.word	0x08003bb3
 8003b48:	08003bb3 	.word	0x08003bb3
 8003b4c:	08003bb3 	.word	0x08003bb3
 8003b50:	08003bb3 	.word	0x08003bb3
 8003b54:	08003bb3 	.word	0x08003bb3
 8003b58:	08003bb7 	.word	0x08003bb7
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	617b      	str	r3, [r7, #20]
		while (arg_int > 0) {
 8003b60:	e010      	b.n	8003b84 <u8x8_byte_i2c+0x7c>
			buffer[buf_idx++] = *data;
 8003b62:	4b18      	ldr	r3, [pc, #96]	; (8003bc4 <u8x8_byte_i2c+0xbc>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	b2d1      	uxtb	r1, r2
 8003b6a:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <u8x8_byte_i2c+0xbc>)
 8003b6c:	7011      	strb	r1, [r2, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	7819      	ldrb	r1, [r3, #0]
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <u8x8_byte_i2c+0xc0>)
 8003b76:	5499      	strb	r1, [r3, r2]
			data++;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
			arg_int--;
 8003b7e:	7abb      	ldrb	r3, [r7, #10]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0) {
 8003b84:	7abb      	ldrb	r3, [r7, #10]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1eb      	bne.n	8003b62 <u8x8_byte_i2c+0x5a>
		}
		break;
 8003b8a:	e015      	b.n	8003bb8 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8003b8c:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <u8x8_byte_i2c+0xbc>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
		break;
 8003b92:	e011      	b.n	8003bb8 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8),
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b9a:	b299      	uxth	r1, r3
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <u8x8_byte_i2c+0xbc>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ba6:	9200      	str	r2, [sp, #0]
 8003ba8:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <u8x8_byte_i2c+0xc0>)
 8003baa:	4808      	ldr	r0, [pc, #32]	; (8003bcc <u8x8_byte_i2c+0xc4>)
 8003bac:	f004 fbc8 	bl	8008340 <HAL_I2C_Master_Transmit>
				(uint8_t*) buffer, buf_idx, HAL_MAX_DELAY);
		break;
 8003bb0:	e002      	b.n	8003bb8 <u8x8_byte_i2c+0xb0>
	default:
		return 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e001      	b.n	8003bba <u8x8_byte_i2c+0xb2>
		break;
 8003bb6:	bf00      	nop
	}

	return 1;
 8003bb8:	2301      	movs	r3, #1

}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200005c4 	.word	0x200005c4
 8003bc8:	200005c8 	.word	0x200005c8
 8003bcc:	20000408 	.word	0x20000408

08003bd0 <main>:

int16_t changeKnobState(uint8_t knob_state, uint8_t previousKnobState, uint16_t volume, int8_t top_limit, int8_t bottom_limit);
void scanKnob(uint16_t localKnobs, uint16_t prev_Knobs, uint8_t knob_index, char type );

int main(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b092      	sub	sp, #72	; 0x48
 8003bd4:	af02      	add	r7, sp, #8
    /* MCU Configuration--------------------------------------------------------*/
    // Reset of all peripherals, Initializes the Flash interface and the Systick.
    HAL_Init();
 8003bd6:	f001 fe08 	bl	80057ea <HAL_Init>
    // Configure the system clock
    SystemClock_Config();
 8003bda:	f7ff fcab 	bl	8003534 <SystemClock_Config>

    // Initialize all configured peripherals
    MX_GPIO_Init();
 8003bde:	f7ff ff15 	bl	8003a0c <MX_GPIO_Init>
    MX_DMA_Init();
 8003be2:	f7ff fc89 	bl	80034f8 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8003be6:	f7ff fee1 	bl	80039ac <MX_USART2_UART_Init>
    MX_CAN1_Init();
 8003bea:	f7ff fd69 	bl	80036c0 <MX_CAN1_Init>
    MX_I2C1_Init();
 8003bee:	f7ff fddf 	bl	80037b0 <MX_I2C1_Init>
    MX_ADC1_Init();
 8003bf2:	f7ff fd01 	bl	80035f8 <MX_ADC1_Init>
    MX_DAC1_Init();
 8003bf6:	f7ff fd9b 	bl	8003730 <MX_DAC1_Init>
    MX_TIM6_Init();
 8003bfa:	f7ff fe6b 	bl	80038d4 <MX_TIM6_Init>
    MX_TIM7_Init();
 8003bfe:	f7ff fe9f 	bl	8003940 <MX_TIM7_Init>
    MX_TIM2_Init();
 8003c02:	f7ff fe19 	bl	8003838 <MX_TIM2_Init>

    HAL_TIM_Base_Start(&htim2);
 8003c06:	4875      	ldr	r0, [pc, #468]	; (8003ddc <main+0x20c>)
 8003c08:	f006 f972 	bl	8009ef0 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim7);
 8003c0c:	4874      	ldr	r0, [pc, #464]	; (8003de0 <main+0x210>)
 8003c0e:	f006 f96f 	bl	8009ef0 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start_IT(&htim6);
 8003c12:	4874      	ldr	r0, [pc, #464]	; (8003de4 <main+0x214>)
 8003c14:	f006 f9b8 	bl	8009f88 <HAL_TIM_Base_Start_IT>

    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)output_wave, OUTPUT_SAMPLES, DAC_ALIGN_12B_R);
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	f240 1351 	movw	r3, #337	; 0x151
 8003c20:	4a71      	ldr	r2, [pc, #452]	; (8003de8 <main+0x218>)
 8003c22:	2100      	movs	r1, #0
 8003c24:	4871      	ldr	r0, [pc, #452]	; (8003dec <main+0x21c>)
 8003c26:	f003 fc81 	bl	800752c <HAL_DAC_Start_DMA>
    //	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
    //	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);

    setOutMuxBit(DRST_BIT, GPIO_PIN_RESET);
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	2004      	movs	r0, #4
 8003c2e:	f000 f9af 	bl	8003f90 <setOutMuxBit>
    delayMicro(2);
 8003c32:	2002      	movs	r0, #2
 8003c34:	f000 f95a 	bl	8003eec <delayMicro>
    setOutMuxBit(DRST_BIT, GPIO_PIN_SET);
 8003c38:	2101      	movs	r1, #1
 8003c3a:	2004      	movs	r0, #4
 8003c3c:	f000 f9a8 	bl	8003f90 <setOutMuxBit>
    u8g2_Setup_ssd1305_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_gpio_and_delay);
 8003c40:	4b6b      	ldr	r3, [pc, #428]	; (8003df0 <main+0x220>)
 8003c42:	4a6c      	ldr	r2, [pc, #432]	; (8003df4 <main+0x224>)
 8003c44:	496c      	ldr	r1, [pc, #432]	; (8003df8 <main+0x228>)
 8003c46:	486d      	ldr	r0, [pc, #436]	; (8003dfc <main+0x22c>)
 8003c48:	f7fd fc44 	bl	80014d4 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>
    u8g2_InitDisplay(&u8g2);
 8003c4c:	486b      	ldr	r0, [pc, #428]	; (8003dfc <main+0x22c>)
 8003c4e:	f7ff fa0d 	bl	800306c <u8x8_InitDisplay>
    u8g2_ClearDisplay(&u8g2);
 8003c52:	486a      	ldr	r0, [pc, #424]	; (8003dfc <main+0x22c>)
 8003c54:	f7fd fc18 	bl	8001488 <u8g2_ClearDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4868      	ldr	r0, [pc, #416]	; (8003dfc <main+0x22c>)
 8003c5c:	f7ff fa15 	bl	800308a <u8x8_SetPowerSave>
    setOutMuxBit(DEN_BIT, GPIO_PIN_SET);
 8003c60:	2101      	movs	r1, #1
 8003c62:	2003      	movs	r0, #3
 8003c64:	f000 f994 	bl	8003f90 <setOutMuxBit>

    setCANFilter(IDin, 0x7ff, 0);
 8003c68:	4b65      	ldr	r3, [pc, #404]	; (8003e00 <main+0x230>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fb6e 	bl	8003354 <setCANFilter>
    HAL_CAN_Start(&hcan1);
 8003c78:	4862      	ldr	r0, [pc, #392]	; (8003e04 <main+0x234>)
 8003c7a:	f002 fe98 	bl	80069ae <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003c7e:	2102      	movs	r1, #2
 8003c80:	4860      	ldr	r0, [pc, #384]	; (8003e04 <main+0x234>)
 8003c82:	f003 f917 	bl	8006eb4 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 8003c86:	2101      	movs	r1, #1
 8003c88:	485e      	ldr	r0, [pc, #376]	; (8003e04 <main+0x234>)
 8003c8a:	f003 f913 	bl	8006eb4 <HAL_CAN_ActivateNotification>

    serialPrintln("charIOT-Key-C");
 8003c8e:	485e      	ldr	r0, [pc, #376]	; (8003e08 <main+0x238>)
 8003c90:	f000 f90e 	bl	8003eb0 <serialPrintln>
    UID0 = HAL_GetUIDw0();
 8003c94:	f001 fe06 	bl	80058a4 <HAL_GetUIDw0>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4a5c      	ldr	r2, [pc, #368]	; (8003e0c <main+0x23c>)
 8003c9c:	6013      	str	r3, [r2, #0]

    init_lookup_tables();
 8003c9e:	f001 f907 	bl	8004eb0 <init_lookup_tables>
    set_output_waveform(CLARINET);
 8003ca2:	2004      	movs	r0, #4
 8003ca4:	f001 fc24 	bl	80054f0 <set_output_waveform>

    // Init scheduler
    osKernelInitialize();
 8003ca8:	f007 fa56 	bl	800b158 <osKernelInitialize>

    // Mutex creation
    keysMutexHandle = osMutexNew(&keysMutex_attributes);
 8003cac:	4858      	ldr	r0, [pc, #352]	; (8003e10 <main+0x240>)
 8003cae:	f007 fb4a 	bl	800b346 <osMutexNew>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4a57      	ldr	r2, [pc, #348]	; (8003e14 <main+0x244>)
 8003cb6:	6013      	str	r3, [r2, #0]
    knobsMutexHandle = osMutexNew(&knobsMutex_attributes);
 8003cb8:	4857      	ldr	r0, [pc, #348]	; (8003e18 <main+0x248>)
 8003cba:	f007 fb44 	bl	800b346 <osMutexNew>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4a56      	ldr	r2, [pc, #344]	; (8003e1c <main+0x24c>)
 8003cc2:	6013      	str	r3, [r2, #0]
    readMutexHandle = osMutexNew(&readMutex_attributes);
 8003cc4:	4856      	ldr	r0, [pc, #344]	; (8003e20 <main+0x250>)
 8003cc6:	f007 fb3e 	bl	800b346 <osMutexNew>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4a55      	ldr	r2, [pc, #340]	; (8003e24 <main+0x254>)
 8003cce:	6013      	str	r3, [r2, #0]

    // Add mutexes
    osMutexRelease(keysMutexHandle);
 8003cd0:	4b50      	ldr	r3, [pc, #320]	; (8003e14 <main+0x244>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f007 fc07 	bl	800b4e8 <osMutexRelease>
    osMutexRelease(knobsMutexHandle);
 8003cda:	4b50      	ldr	r3, [pc, #320]	; (8003e1c <main+0x24c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f007 fc02 	bl	800b4e8 <osMutexRelease>
    osMutexRelease(readMutexHandle);
 8003ce4:	4b4f      	ldr	r3, [pc, #316]	; (8003e24 <main+0x254>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f007 fbfd 	bl	800b4e8 <osMutexRelease>

    // Create semaphores
    const osSemaphoreAttr_t CAN_TX_Semaphore_attributes = {.name = "CAN_TX_Semaphore"};
 8003cee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	609a      	str	r2, [r3, #8]
 8003cfa:	60da      	str	r2, [r3, #12]
 8003cfc:	4b4a      	ldr	r3, [pc, #296]	; (8003e28 <main+0x258>)
 8003cfe:	633b      	str	r3, [r7, #48]	; 0x30
    CAN_TX_SemaphoreHandle = osSemaphoreNew(3, 3, &CAN_TX_Semaphore_attributes);
 8003d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d04:	461a      	mov	r2, r3
 8003d06:	2103      	movs	r1, #3
 8003d08:	2003      	movs	r0, #3
 8003d0a:	f007 fc2a 	bl	800b562 <osSemaphoreNew>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4a46      	ldr	r2, [pc, #280]	; (8003e2c <main+0x25c>)
 8003d12:	6013      	str	r3, [r2, #0]

    // Add semaphores
    osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 8003d14:	4b45      	ldr	r3, [pc, #276]	; (8003e2c <main+0x25c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f007 fcfd 	bl	800b718 <osSemaphoreRelease>

    // Create queues
    const osMessageQueueAttr_t msgInQ_attributes = {.name = "msgInQ"};
 8003d1e:	f107 0318 	add.w	r3, r7, #24
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	611a      	str	r2, [r3, #16]
 8003d2e:	615a      	str	r2, [r3, #20]
 8003d30:	4b3f      	ldr	r3, [pc, #252]	; (8003e30 <main+0x260>)
 8003d32:	61bb      	str	r3, [r7, #24]
    const osMessageQueueAttr_t msgOutQ_attributes = {.name = "msgOutQ"};
 8003d34:	463b      	mov	r3, r7
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]
 8003d3c:	609a      	str	r2, [r3, #8]
 8003d3e:	60da      	str	r2, [r3, #12]
 8003d40:	611a      	str	r2, [r3, #16]
 8003d42:	615a      	str	r2, [r3, #20]
 8003d44:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <main+0x264>)
 8003d46:	603b      	str	r3, [r7, #0]
    msgInQHandle = osMessageQueueNew (36, sizeof(CAN_MSG_t), &msgInQ_attributes);
 8003d48:	f107 0318 	add.w	r3, r7, #24
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	210c      	movs	r1, #12
 8003d50:	2024      	movs	r0, #36	; 0x24
 8003d52:	f007 fd25 	bl	800b7a0 <osMessageQueueNew>
 8003d56:	4603      	mov	r3, r0
 8003d58:	4a37      	ldr	r2, [pc, #220]	; (8003e38 <main+0x268>)
 8003d5a:	6013      	str	r3, [r2, #0]
    msgOutQHandle = osMessageQueueNew (36, sizeof(CAN_MSG_t), &msgOutQ_attributes);
 8003d5c:	463b      	mov	r3, r7
 8003d5e:	461a      	mov	r2, r3
 8003d60:	210c      	movs	r1, #12
 8003d62:	2024      	movs	r0, #36	; 0x24
 8003d64:	f007 fd1c 	bl	800b7a0 <osMessageQueueNew>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4a34      	ldr	r2, [pc, #208]	; (8003e3c <main+0x26c>)
 8003d6c:	6013      	str	r3, [r2, #0]

    // Create threads
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003d6e:	4a34      	ldr	r2, [pc, #208]	; (8003e40 <main+0x270>)
 8003d70:	2100      	movs	r1, #0
 8003d72:	4834      	ldr	r0, [pc, #208]	; (8003e44 <main+0x274>)
 8003d74:	f007 fa3a 	bl	800b1ec <osThreadNew>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4a33      	ldr	r2, [pc, #204]	; (8003e48 <main+0x278>)
 8003d7c:	6013      	str	r3, [r2, #0]
    scanKeysHandle = osThreadNew(scanKeysTask, NULL, &scanKeys_attributes);
 8003d7e:	4a33      	ldr	r2, [pc, #204]	; (8003e4c <main+0x27c>)
 8003d80:	2100      	movs	r1, #0
 8003d82:	4833      	ldr	r0, [pc, #204]	; (8003e50 <main+0x280>)
 8003d84:	f007 fa32 	bl	800b1ec <osThreadNew>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	4a32      	ldr	r2, [pc, #200]	; (8003e54 <main+0x284>)
 8003d8c:	6013      	str	r3, [r2, #0]
    displayUpdateHandle = osThreadNew(displayUpdateTask, NULL, &displayUpdate_attributes);
 8003d8e:	4a32      	ldr	r2, [pc, #200]	; (8003e58 <main+0x288>)
 8003d90:	2100      	movs	r1, #0
 8003d92:	4832      	ldr	r0, [pc, #200]	; (8003e5c <main+0x28c>)
 8003d94:	f007 fa2a 	bl	800b1ec <osThreadNew>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4a31      	ldr	r2, [pc, #196]	; (8003e60 <main+0x290>)
 8003d9c:	6013      	str	r3, [r2, #0]
    decodeTaskHandle = osThreadNew(decode, NULL, &decodeTask_attributes);
 8003d9e:	4a31      	ldr	r2, [pc, #196]	; (8003e64 <main+0x294>)
 8003da0:	2100      	movs	r1, #0
 8003da2:	4831      	ldr	r0, [pc, #196]	; (8003e68 <main+0x298>)
 8003da4:	f007 fa22 	bl	800b1ec <osThreadNew>
 8003da8:	4603      	mov	r3, r0
 8003daa:	4a30      	ldr	r2, [pc, #192]	; (8003e6c <main+0x29c>)
 8003dac:	6013      	str	r3, [r2, #0]
    CAN_TX_TaskNameHandle = osThreadNew(CAN_Transmit, NULL, &CAN_TX_TaskName_attributes);
 8003dae:	4a30      	ldr	r2, [pc, #192]	; (8003e70 <main+0x2a0>)
 8003db0:	2100      	movs	r1, #0
 8003db2:	4830      	ldr	r0, [pc, #192]	; (8003e74 <main+0x2a4>)
 8003db4:	f007 fa1a 	bl	800b1ec <osThreadNew>
 8003db8:	4603      	mov	r3, r0
 8003dba:	4a2f      	ldr	r2, [pc, #188]	; (8003e78 <main+0x2a8>)
 8003dbc:	6013      	str	r3, [r2, #0]
    handshakeTaskHandle = osThreadNew(handshake, NULL, &handshakeTask_attributes);
 8003dbe:	4a2f      	ldr	r2, [pc, #188]	; (8003e7c <main+0x2ac>)
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	482f      	ldr	r0, [pc, #188]	; (8003e80 <main+0x2b0>)
 8003dc4:	f007 fa12 	bl	800b1ec <osThreadNew>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4a2e      	ldr	r2, [pc, #184]	; (8003e84 <main+0x2b4>)
 8003dcc:	6013      	str	r3, [r2, #0]

    // Start scheduler
    osKernelStart();
 8003dce:	f007 f9e7 	bl	800b1a0 <osKernelStart>
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3740      	adds	r7, #64	; 0x40
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	2000045c 	.word	0x2000045c
 8003de0:	200004f4 	.word	0x200004f4
 8003de4:	200004a8 	.word	0x200004a8
 8003de8:	200006fc 	.word	0x200006fc
 8003dec:	200003ac 	.word	0x200003ac
 8003df0:	08003ae9 	.word	0x08003ae9
 8003df4:	08003b09 	.word	0x08003b09
 8003df8:	0801da34 	.word	0x0801da34
 8003dfc:	2000060c 	.word	0x2000060c
 8003e00:	0801dab4 	.word	0x0801dab4
 8003e04:	20000384 	.word	0x20000384
 8003e08:	08010c1c 	.word	0x08010c1c
 8003e0c:	20000318 	.word	0x20000318
 8003e10:	0801db90 	.word	0x0801db90
 8003e14:	20000604 	.word	0x20000604
 8003e18:	0801dba0 	.word	0x0801dba0
 8003e1c:	20000608 	.word	0x20000608
 8003e20:	0801dbb0 	.word	0x0801dbb0
 8003e24:	200005e8 	.word	0x200005e8
 8003e28:	08010c2c 	.word	0x08010c2c
 8003e2c:	2000030c 	.word	0x2000030c
 8003e30:	08010c40 	.word	0x08010c40
 8003e34:	08010c48 	.word	0x08010c48
 8003e38:	20000310 	.word	0x20000310
 8003e3c:	20000314 	.word	0x20000314
 8003e40:	0801dab8 	.word	0x0801dab8
 8003e44:	08004425 	.word	0x08004425
 8003e48:	200005ec 	.word	0x200005ec
 8003e4c:	0801dadc 	.word	0x0801dadc
 8003e50:	08004451 	.word	0x08004451
 8003e54:	200005f0 	.word	0x200005f0
 8003e58:	0801db00 	.word	0x0801db00
 8003e5c:	0800451d 	.word	0x0800451d
 8003e60:	200005f4 	.word	0x200005f4
 8003e64:	0801db24 	.word	0x0801db24
 8003e68:	080031a9 	.word	0x080031a9
 8003e6c:	200005f8 	.word	0x200005f8
 8003e70:	0801db48 	.word	0x0801db48
 8003e74:	0800321d 	.word	0x0800321d
 8003e78:	200005fc 	.word	0x200005fc
 8003e7c:	0801db6c 	.word	0x0801db6c
 8003e80:	0800325d 	.word	0x0800325d
 8003e84:	20000600 	.word	0x20000600

08003e88 <serialPrint>:



void serialPrint(char val[]) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7fc f99d 	bl	80001d0 <strlen>
 8003e96:	4603      	mov	r3, r0
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	230a      	movs	r3, #10
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4803      	ldr	r0, [pc, #12]	; (8003eac <serialPrint+0x24>)
 8003ea0:	f006 fca6 	bl	800a7f0 <HAL_UART_Transmit>
}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20000540 	.word	0x20000540

08003eb0 <serialPrintln>:

void serialPrintln(char val[]) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7fc f989 	bl	80001d0 <strlen>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	230a      	movs	r3, #10
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4808      	ldr	r0, [pc, #32]	; (8003ee8 <serialPrintln+0x38>)
 8003ec8:	f006 fc92 	bl	800a7f0 <HAL_UART_Transmit>
    char rn[2] = "\r\n";
 8003ecc:	f640 230d 	movw	r3, #2573	; 0xa0d
 8003ed0:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, (uint8_t*) rn, 2, 10);
 8003ed2:	f107 010c 	add.w	r1, r7, #12
 8003ed6:	230a      	movs	r3, #10
 8003ed8:	2202      	movs	r2, #2
 8003eda:	4803      	ldr	r0, [pc, #12]	; (8003ee8 <serialPrintln+0x38>)
 8003edc:	f006 fc88 	bl	800a7f0 <HAL_UART_Transmit>
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000540 	.word	0x20000540

08003eec <delayMicro>:

void delayMicro(uint16_t us) {
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	80fb      	strh	r3, [r7, #6]
    htim7.Instance->CNT = 0;
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <delayMicro+0x30>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24
    while (htim7.Instance->CNT < us)
 8003efe:	bf00      	nop
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <delayMicro+0x30>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d3f9      	bcc.n	8003f00 <delayMicro+0x14>
            ;
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	200004f4 	.word	0x200004f4

08003f20 <HAL_DAC_ConvHalfCpltCallbackCh1>:



void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

    uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 8003f28:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <HAL_DAC_ConvHalfCpltCallbackCh1+0x2c>)
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	81fb      	strh	r3, [r7, #14]

    synthesize_output(localKeys, volume, octave, true);
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <HAL_DAC_ConvHalfCpltCallbackCh1+0x30>)
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	b2d9      	uxtb	r1, r3
 8003f34:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <HAL_DAC_ConvHalfCpltCallbackCh1+0x34>)
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	89f8      	ldrh	r0, [r7, #14]
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f001 fb8b 	bl	8005658 <synthesize_output>
    
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	2000000e 	.word	0x2000000e
 8003f50:	20000014 	.word	0x20000014
 8003f54:	2000000c 	.word	0x2000000c

08003f58 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
    
    uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	81fb      	strh	r3, [r7, #14]

    synthesize_output(localKeys, volume, octave, false);
 8003f66:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <HAL_DAC_ConvCpltCallbackCh1+0x30>)
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b2d9      	uxtb	r1, r3
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	89f8      	ldrh	r0, [r7, #14]
 8003f74:	2300      	movs	r3, #0
 8003f76:	f001 fb6f 	bl	8005658 <synthesize_output>
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	2000000e 	.word	0x2000000e
 8003f88:	20000014 	.word	0x20000014
 8003f8c:	2000000c 	.word	0x2000000c

08003f90 <setOutMuxBit>:


void setOutMuxBit(const uint8_t bitIdx, const bool value) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	460a      	mov	r2, r1
 8003f9a:	71fb      	strb	r3, [r7, #7]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2140      	movs	r1, #64	; 0x40
 8003fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fa8:	f004 f922 	bl	80081f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, bitIdx & 0x01);
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4816      	ldr	r0, [pc, #88]	; (8004014 <setOutMuxBit+0x84>)
 8003fba:	f004 f919 	bl	80081f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, bitIdx & 0x02);
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2102      	movs	r1, #2
 8003fca:	4812      	ldr	r0, [pc, #72]	; (8004014 <setOutMuxBit+0x84>)
 8003fcc:	f004 f910 	bl	80081f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, bitIdx & 0x04);
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2110      	movs	r1, #16
 8003fdc:	480d      	ldr	r0, [pc, #52]	; (8004014 <setOutMuxBit+0x84>)
 8003fde:	f004 f907 	bl	80081f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, value);
 8003fe2:	79bb      	ldrb	r3, [r7, #6]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	2120      	movs	r1, #32
 8003fe8:	480a      	ldr	r0, [pc, #40]	; (8004014 <setOutMuxBit+0x84>)
 8003fea:	f004 f901 	bl	80081f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 8003fee:	2201      	movs	r2, #1
 8003ff0:	2140      	movs	r1, #64	; 0x40
 8003ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ff6:	f004 f8fb 	bl	80081f0 <HAL_GPIO_WritePin>
	delayMicro(5);
 8003ffa:	2005      	movs	r0, #5
 8003ffc:	f7ff ff76 	bl	8003eec <delayMicro>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8004000:	2200      	movs	r2, #0
 8004002:	2140      	movs	r1, #64	; 0x40
 8004004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004008:	f004 f8f2 	bl	80081f0 <HAL_GPIO_WritePin>

}
 800400c:	bf00      	nop
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	48000400 	.word	0x48000400

08004018 <selectRow>:

void selectRow(uint8_t rowIdx) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8004022:	2200      	movs	r2, #0
 8004024:	2140      	movs	r1, #64	; 0x40
 8004026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800402a:	f004 f8e1 	bl	80081f0 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, rowIdx & 0x01);
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	b2db      	uxtb	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	2101      	movs	r1, #1
 800403a:	480c      	ldr	r0, [pc, #48]	; (800406c <selectRow+0x54>)
 800403c:	f004 f8d8 	bl	80081f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, rowIdx & 0x02);
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	2102      	movs	r1, #2
 800404c:	4807      	ldr	r0, [pc, #28]	; (800406c <selectRow+0x54>)
 800404e:	f004 f8cf 	bl	80081f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, rowIdx & 0x04);
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	2110      	movs	r1, #16
 800405e:	4803      	ldr	r0, [pc, #12]	; (800406c <selectRow+0x54>)
 8004060:	f004 f8c6 	bl	80081f0 <HAL_GPIO_WritePin>
}
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	48000400 	.word	0x48000400

08004070 <setMuxIO>:


void setMuxIO() {
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0

    uint16_t local_keys = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	81fb      	strh	r3, [r7, #14]
    uint16_t local_knobs = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	81bb      	strh	r3, [r7, #12]
    bool local_HKIW = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	72fb      	strb	r3, [r7, #11]
    bool local_HKIE = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	72bb      	strb	r3, [r7, #10]


    for(int r = 0; r < 7; r++){
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	e05d      	b.n	8004148 <setMuxIO+0xd8>
        selectRow(r);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ffc1 	bl	8004018 <selectRow>
        HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, outbits[r]);
 8004096:	4a36      	ldr	r2, [pc, #216]	; (8004170 <setMuxIO+0x100>)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4413      	add	r3, r2
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	2120      	movs	r1, #32
 80040a4:	4833      	ldr	r0, [pc, #204]	; (8004174 <setMuxIO+0x104>)
 80040a6:	f004 f8a3 	bl	80081f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(REN_GPIO_Port,REN_Pin, GPIO_PIN_SET);
 80040aa:	2201      	movs	r2, #1
 80040ac:	2140      	movs	r1, #64	; 0x40
 80040ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040b2:	f004 f89d 	bl	80081f0 <HAL_GPIO_WritePin>
        delayMicro(5);
 80040b6:	2005      	movs	r0, #5
 80040b8:	f7ff ff18 	bl	8003eec <delayMicro>
        if( r < 3) {
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	dc0e      	bgt.n	80040e0 <setMuxIO+0x70>
            local_keys |= readCols() << (r * 4);
 80040c2:	f000 f861 	bl	8004188 <readCols>
 80040c6:	4603      	mov	r3, r0
 80040c8:	461a      	mov	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	b21a      	sxth	r2, r3
 80040d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040d8:	4313      	orrs	r3, r2
 80040da:	b21b      	sxth	r3, r3
 80040dc:	81fb      	strh	r3, [r7, #14]
 80040de:	e02a      	b.n	8004136 <setMuxIO+0xc6>
        } else if (r < 5) {
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	dc0f      	bgt.n	8004106 <setMuxIO+0x96>
            local_knobs |= (readCols() << ((r - 3) * 4));
 80040e6:	f000 f84f 	bl	8004188 <readCols>
 80040ea:	4603      	mov	r3, r0
 80040ec:	461a      	mov	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3b03      	subs	r3, #3
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	b21a      	sxth	r2, r3
 80040fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	b21b      	sxth	r3, r3
 8004102:	81bb      	strh	r3, [r7, #12]
 8004104:	e017      	b.n	8004136 <setMuxIO+0xc6>
        } else if (r == 5) {
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b05      	cmp	r3, #5
 800410a:	d10a      	bne.n	8004122 <setMuxIO+0xb2>
            local_HKIW = readCols() >> 3;
 800410c:	f000 f83c 	bl	8004188 <readCols>
 8004110:	4603      	mov	r3, r0
 8004112:	08db      	lsrs	r3, r3, #3
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf14      	ite	ne
 800411a:	2301      	movne	r3, #1
 800411c:	2300      	moveq	r3, #0
 800411e:	72fb      	strb	r3, [r7, #11]
 8004120:	e009      	b.n	8004136 <setMuxIO+0xc6>
        } else {
            local_HKIE = readCols() >> 3;
 8004122:	f000 f831 	bl	8004188 <readCols>
 8004126:	4603      	mov	r3, r0
 8004128:	08db      	lsrs	r3, r3, #3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	72bb      	strb	r3, [r7, #10]
        }
        HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8004136:	2200      	movs	r2, #0
 8004138:	2140      	movs	r1, #64	; 0x40
 800413a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800413e:	f004 f857 	bl	80081f0 <HAL_GPIO_WritePin>
    for(int r = 0; r < 7; r++){
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3301      	adds	r3, #1
 8004146:	607b      	str	r3, [r7, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b06      	cmp	r3, #6
 800414c:	dd9e      	ble.n	800408c <setMuxIO+0x1c>
    }

    __atomic_store_n(&HKIW, local_HKIW, __ATOMIC_RELAXED);
 800414e:	7afa      	ldrb	r2, [r7, #11]
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <setMuxIO+0x108>)
 8004152:	701a      	strb	r2, [r3, #0]
    __atomic_store_n(&HKIE, local_HKIE, __ATOMIC_RELAXED);
 8004154:	7aba      	ldrb	r2, [r7, #10]
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <setMuxIO+0x10c>)
 8004158:	701a      	strb	r2, [r3, #0]
    __atomic_store_n(&keys, local_keys, __ATOMIC_RELAXED);
 800415a:	4a09      	ldr	r2, [pc, #36]	; (8004180 <setMuxIO+0x110>)
 800415c:	89fb      	ldrh	r3, [r7, #14]
 800415e:	8013      	strh	r3, [r2, #0]
    __atomic_store_n(&knobs, local_knobs, __ATOMIC_RELAXED);
 8004160:	4a08      	ldr	r2, [pc, #32]	; (8004184 <setMuxIO+0x114>)
 8004162:	89bb      	ldrh	r3, [r7, #12]
 8004164:	8013      	strh	r3, [r2, #0]
}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000004 	.word	0x20000004
 8004174:	48000400 	.word	0x48000400
 8004178:	2000031d 	.word	0x2000031d
 800417c:	2000031e 	.word	0x2000031e
 8004180:	2000000e 	.word	0x2000000e
 8004184:	20000010 	.word	0x20000010

08004188 <readCols>:

uint8_t readCols() {
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0

	uint8_t C0_val = HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin);
 800418e:	2108      	movs	r1, #8
 8004190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004194:	f004 f814 	bl	80081c0 <HAL_GPIO_ReadPin>
 8004198:	4603      	mov	r3, r0
 800419a:	71fb      	strb	r3, [r7, #7]
	uint8_t C1_val = HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin);
 800419c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041a4:	f004 f80c 	bl	80081c0 <HAL_GPIO_ReadPin>
 80041a8:	4603      	mov	r3, r0
 80041aa:	71bb      	strb	r3, [r7, #6]
	uint8_t C2_val = HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin);
 80041ac:	2180      	movs	r1, #128	; 0x80
 80041ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041b2:	f004 f805 	bl	80081c0 <HAL_GPIO_ReadPin>
 80041b6:	4603      	mov	r3, r0
 80041b8:	717b      	strb	r3, [r7, #5]
	uint8_t C3_val = HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin);
 80041ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041c2:	f003 fffd 	bl	80081c0 <HAL_GPIO_ReadPin>
 80041c6:	4603      	mov	r3, r0
 80041c8:	713b      	strb	r3, [r7, #4]

	return (C3_val << 3) | (C2_val << 2) | (C1_val << 1) | C0_val;
 80041ca:	793b      	ldrb	r3, [r7, #4]
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	b25a      	sxtb	r2, r3
 80041d0:	797b      	ldrb	r3, [r7, #5]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	b25b      	sxtb	r3, r3
 80041d6:	4313      	orrs	r3, r2
 80041d8:	b25a      	sxtb	r2, r3
 80041da:	79bb      	ldrb	r3, [r7, #6]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	b25b      	sxtb	r3, r3
 80041e0:	4313      	orrs	r3, r2
 80041e2:	b25a      	sxtb	r2, r3
 80041e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	b2db      	uxtb	r3, r3

}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <changeKnobState>:


int16_t changeKnobState(uint8_t knob_state, uint8_t previousKnobState, uint16_t knobRotation, int8_t top_limit, int8_t bottom_limit){
 80041f6:	b490      	push	{r4, r7}
 80041f8:	b086      	sub	sp, #24
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	4604      	mov	r4, r0
 80041fe:	4608      	mov	r0, r1
 8004200:	4611      	mov	r1, r2
 8004202:	461a      	mov	r2, r3
 8004204:	4623      	mov	r3, r4
 8004206:	71fb      	strb	r3, [r7, #7]
 8004208:	4603      	mov	r3, r0
 800420a:	71bb      	strb	r3, [r7, #6]
 800420c:	460b      	mov	r3, r1
 800420e:	80bb      	strh	r3, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	70fb      	strb	r3, [r7, #3]
    int16_t rotation = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	82fb      	strh	r3, [r7, #22]
    int current_knob = knob_state;
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	613b      	str	r3, [r7, #16]
    int prev_knob = previousKnobState;
 800421c:	79bb      	ldrb	r3, [r7, #6]
 800421e:	60fb      	str	r3, [r7, #12]

    // upper and bottom levels for knob
    if ((((prev_knob == 0b11) && (current_knob == 0b10)) ||
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b03      	cmp	r3, #3
 8004224:	d102      	bne.n	800422c <changeKnobState+0x36>
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d005      	beq.n	8004238 <changeKnobState+0x42>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10e      	bne.n	8004250 <changeKnobState+0x5a>
      ((prev_knob == 0b00) && (current_knob == 0b01))) &&
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d10b      	bne.n	8004250 <changeKnobState+0x5a>
            knobRotation < top_limit
 8004238:	88ba      	ldrh	r2, [r7, #4]
 800423a:	f997 3003 	ldrsb.w	r3, [r7, #3]
      ((prev_knob == 0b00) && (current_knob == 0b01))) &&
 800423e:	429a      	cmp	r2, r3
 8004240:	da06      	bge.n	8004250 <changeKnobState+0x5a>
    ){
        rotation ++;
 8004242:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004246:	b29b      	uxth	r3, r3
 8004248:	3301      	adds	r3, #1
 800424a:	b29b      	uxth	r3, r3
 800424c:	82fb      	strh	r3, [r7, #22]
 800424e:	e016      	b.n	800427e <changeKnobState+0x88>
    } else
        if ((((prev_knob == 0b01) && (current_knob == 0b00)) ||
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d102      	bne.n	800425c <changeKnobState+0x66>
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <changeKnobState+0x72>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d10d      	bne.n	800427e <changeKnobState+0x88>
           ((prev_knob == 0b10) && (current_knob == 0b11))) &&
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d10a      	bne.n	800427e <changeKnobState+0x88>
                 knobRotation > bottom_limit
 8004268:	88ba      	ldrh	r2, [r7, #4]
 800426a:	f997 3020 	ldrsb.w	r3, [r7, #32]
           ((prev_knob == 0b10) && (current_knob == 0b11))) &&
 800426e:	429a      	cmp	r2, r3
 8004270:	dd05      	ble.n	800427e <changeKnobState+0x88>
        ) {
        rotation --;
 8004272:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29b      	uxth	r3, r3
 800427c:	82fb      	strh	r3, [r7, #22]
    }

    return rotation;
 800427e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bc90      	pop	{r4, r7}
 800428a:	4770      	bx	lr

0800428c <scanKnob>:

void scanKnob(uint16_t localKnobs, uint16_t prevKnobs, uint8_t knob_index, char type ) {
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b089      	sub	sp, #36	; 0x24
 8004290:	af02      	add	r7, sp, #8
 8004292:	4604      	mov	r4, r0
 8004294:	4608      	mov	r0, r1
 8004296:	4611      	mov	r1, r2
 8004298:	461a      	mov	r2, r3
 800429a:	4623      	mov	r3, r4
 800429c:	80fb      	strh	r3, [r7, #6]
 800429e:	4603      	mov	r3, r0
 80042a0:	80bb      	strh	r3, [r7, #4]
 80042a2:	460b      	mov	r3, r1
 80042a4:	70fb      	strb	r3, [r7, #3]
 80042a6:	4613      	mov	r3, r2
 80042a8:	70bb      	strb	r3, [r7, #2]
	uint8_t shift_row = (knob_index >= 2) ? 0 : 4;
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d901      	bls.n	80042b4 <scanKnob+0x28>
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <scanKnob+0x2a>
 80042b4:	2304      	movs	r3, #4
 80042b6:	75fb      	strb	r3, [r7, #23]
	uint8_t row = 0xF;
 80042b8:	230f      	movs	r3, #15
 80042ba:	75bb      	strb	r3, [r7, #22]
	uint8_t knob_on_row = 1 - knob_index % 2;
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bf0c      	ite	eq
 80042c6:	2301      	moveq	r3, #1
 80042c8:	2300      	movne	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	757b      	strb	r3, [r7, #21]

	uint8_t rowKnobStates 	  = (localKnobs 	 >> shift_row) & row;
 80042ce:	88fa      	ldrh	r2, [r7, #6]
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	fa42 f303 	asr.w	r3, r2, r3
 80042d6:	b25a      	sxtb	r2, r3
 80042d8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80042dc:	4013      	ands	r3, r2
 80042de:	b25b      	sxtb	r3, r3
 80042e0:	753b      	strb	r3, [r7, #20]
	uint8_t rowPrevKnobStates = (prevKnobs >> shift_row) & row;
 80042e2:	88ba      	ldrh	r2, [r7, #4]
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	fa42 f303 	asr.w	r3, r2, r3
 80042ea:	b25a      	sxtb	r2, r3
 80042ec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80042f0:	4013      	ands	r3, r2
 80042f2:	b25b      	sxtb	r3, r3
 80042f4:	74fb      	strb	r3, [r7, #19]

//	char s[32];
//	sprintf(s, "rowKnobStates:%x", rowKnobStates);
//	serialPrintln(s);

	uint8_t knobState		  = (rowKnobStates 	   >> knob_on_row*2) & 0b11;
 80042f6:	7d3a      	ldrb	r2, [r7, #20]
 80042f8:	7d7b      	ldrb	r3, [r7, #21]
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	fa42 f303 	asr.w	r3, r2, r3
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	74bb      	strb	r3, [r7, #18]
	uint8_t previousKnobState = (rowPrevKnobStates >> knob_on_row*2) & 0b11;
 8004308:	7cfa      	ldrb	r2, [r7, #19]
 800430a:	7d7b      	ldrb	r3, [r7, #21]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	fa42 f303 	asr.w	r3, r2, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	747b      	strb	r3, [r7, #17]


//	UPDATE GLOBAL VARIABLES
	osMutexAcquire(knobsMutexHandle, osWaitForever);
 800431a:	4b3b      	ldr	r3, [pc, #236]	; (8004408 <scanKnob+0x17c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004322:	4618      	mov	r0, r3
 8004324:	f007 f895 	bl	800b452 <osMutexAcquire>
	__atomic_store_n(&knobs, localKnobs, __ATOMIC_RELAXED);
 8004328:	4a38      	ldr	r2, [pc, #224]	; (800440c <scanKnob+0x180>)
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	8013      	strh	r3, [r2, #0]
	osMutexRelease(knobsMutexHandle);
 800432e:	4b36      	ldr	r3, [pc, #216]	; (8004408 <scanKnob+0x17c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f007 f8d8 	bl	800b4e8 <osMutexRelease>

	if (previousKnobState != knobState) {
 8004338:	7c7a      	ldrb	r2, [r7, #17]
 800433a:	7cbb      	ldrb	r3, [r7, #18]
 800433c:	429a      	cmp	r2, r3
 800433e:	d05f      	beq.n	8004400 <scanKnob+0x174>
		osMutexAcquire(knobsMutexHandle, osWaitForever);
 8004340:	4b31      	ldr	r3, [pc, #196]	; (8004408 <scanKnob+0x17c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004348:	4618      	mov	r0, r3
 800434a:	f007 f882 	bl	800b452 <osMutexAcquire>
		__atomic_store_n(&prev_knobs, localKnobs, __ATOMIC_RELAXED);
 800434e:	4a30      	ldr	r2, [pc, #192]	; (8004410 <scanKnob+0x184>)
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	8013      	strh	r3, [r2, #0]
		osMutexRelease(knobsMutexHandle);
 8004354:	4b2c      	ldr	r3, [pc, #176]	; (8004408 <scanKnob+0x17c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f007 f8c5 	bl	800b4e8 <osMutexRelease>

		if (type == 'v'){
 800435e:	78bb      	ldrb	r3, [r7, #2]
 8004360:	2b76      	cmp	r3, #118	; 0x76
 8004362:	d112      	bne.n	800438a <scanKnob+0xfe>
			int16_t change_volume = changeKnobState(knobState, previousKnobState, volume, 12, 0);
 8004364:	4b2b      	ldr	r3, [pc, #172]	; (8004414 <scanKnob+0x188>)
 8004366:	881a      	ldrh	r2, [r3, #0]
 8004368:	7c79      	ldrb	r1, [r7, #17]
 800436a:	7cb8      	ldrb	r0, [r7, #18]
 800436c:	2300      	movs	r3, #0
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	230c      	movs	r3, #12
 8004372:	f7ff ff40 	bl	80041f6 <changeKnobState>
 8004376:	4603      	mov	r3, r0
 8004378:	813b      	strh	r3, [r7, #8]
			volume = volume + change_volume;
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <scanKnob+0x188>)
 800437c:	881a      	ldrh	r2, [r3, #0]
 800437e:	893b      	ldrh	r3, [r7, #8]
 8004380:	4413      	add	r3, r2
 8004382:	b29a      	uxth	r2, r3
 8004384:	4b23      	ldr	r3, [pc, #140]	; (8004414 <scanKnob+0x188>)
 8004386:	801a      	strh	r2, [r3, #0]
                        //
                        set_output_waveform(new_wavetype);
		}
	}

}
 8004388:	e03a      	b.n	8004400 <scanKnob+0x174>
		} else if (type == 'o'){
 800438a:	78bb      	ldrb	r3, [r7, #2]
 800438c:	2b6f      	cmp	r3, #111	; 0x6f
 800438e:	d112      	bne.n	80043b6 <scanKnob+0x12a>
                    int16_t change_octave = changeKnobState(knobState, previousKnobState, octave, 8, 2); // can only go one lower than the default octave
 8004390:	4b21      	ldr	r3, [pc, #132]	; (8004418 <scanKnob+0x18c>)
 8004392:	881a      	ldrh	r2, [r3, #0]
 8004394:	7c79      	ldrb	r1, [r7, #17]
 8004396:	7cb8      	ldrb	r0, [r7, #18]
 8004398:	2302      	movs	r3, #2
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2308      	movs	r3, #8
 800439e:	f7ff ff2a 	bl	80041f6 <changeKnobState>
 80043a2:	4603      	mov	r3, r0
 80043a4:	817b      	strh	r3, [r7, #10]
                    octave = octave + change_octave;
 80043a6:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <scanKnob+0x18c>)
 80043a8:	881a      	ldrh	r2, [r3, #0]
 80043aa:	897b      	ldrh	r3, [r7, #10]
 80043ac:	4413      	add	r3, r2
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <scanKnob+0x18c>)
 80043b2:	801a      	strh	r2, [r3, #0]
}
 80043b4:	e024      	b.n	8004400 <scanKnob+0x174>
		} else if (type == 'w'){
 80043b6:	78bb      	ldrb	r3, [r7, #2]
 80043b8:	2b77      	cmp	r3, #119	; 0x77
 80043ba:	d121      	bne.n	8004400 <scanKnob+0x174>
			int16_t change_wave = changeKnobState(knobState, previousKnobState, output_wavetype, 4, 0);
 80043bc:	4b17      	ldr	r3, [pc, #92]	; (800441c <scanKnob+0x190>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	7c79      	ldrb	r1, [r7, #17]
 80043c4:	7cb8      	ldrb	r0, [r7, #18]
 80043c6:	2300      	movs	r3, #0
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	2304      	movs	r3, #4
 80043cc:	f7ff ff13 	bl	80041f6 <changeKnobState>
 80043d0:	4603      	mov	r3, r0
 80043d2:	81fb      	strh	r3, [r7, #14]
			WaveType new_wavetype = (output_wavetype + change_wave) % END_WAVETYPE;
 80043d4:	4b11      	ldr	r3, [pc, #68]	; (800441c <scanKnob+0x190>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043de:	441a      	add	r2, r3
 80043e0:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <scanKnob+0x194>)
 80043e2:	fb83 1302 	smull	r1, r3, r3, r2
 80043e6:	1059      	asrs	r1, r3, #1
 80043e8:	17d3      	asrs	r3, r2, #31
 80043ea:	1ac9      	subs	r1, r1, r3
 80043ec:	460b      	mov	r3, r1
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	1ad1      	subs	r1, r2, r3
 80043f4:	460b      	mov	r3, r1
 80043f6:	737b      	strb	r3, [r7, #13]
                        set_output_waveform(new_wavetype);
 80043f8:	7b7b      	ldrb	r3, [r7, #13]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f001 f878 	bl	80054f0 <set_output_waveform>
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	bd90      	pop	{r4, r7, pc}
 8004408:	20000608 	.word	0x20000608
 800440c:	20000010 	.word	0x20000010
 8004410:	20000012 	.word	0x20000012
 8004414:	20000014 	.word	0x20000014
 8004418:	2000000c 	.word	0x2000000c
 800441c:	2000007c 	.word	0x2000007c
 8004420:	66666667 	.word	0x66666667

08004424 <StartDefaultTask>:


void StartDefaultTask(void *argument)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
    for (;;) {
        osDelay(100);
 800442c:	2064      	movs	r0, #100	; 0x64
 800442e:	f006 ff6f 	bl	800b310 <osDelay>
        char buf[20];
        sprintf(buf, "type: %i", output_wavetype);
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <StartDefaultTask+0x24>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	f107 030c 	add.w	r3, r7, #12
 800443c:	4903      	ldr	r1, [pc, #12]	; (800444c <StartDefaultTask+0x28>)
 800443e:	4618      	mov	r0, r3
 8004440:	f00a fe14 	bl	800f06c <siprintf>
    for (;;) {
 8004444:	e7f2      	b.n	800442c <StartDefaultTask+0x8>
 8004446:	bf00      	nop
 8004448:	2000007c 	.word	0x2000007c
 800444c:	08010c50 	.word	0x08010c50

08004450 <scanKeysTask>:
        //serialPrintln(buf);
    }
}

void scanKeysTask(void *argument)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
    const TickType_t xFrequency = 50 / portTICK_PERIOD_MS;
 8004458:	2332      	movs	r3, #50	; 0x32
 800445a:	617b      	str	r3, [r7, #20]
    TickType_t xLastWakeTime = xTaskGetTickCount();
 800445c:	f009 f804 	bl	800d468 <xTaskGetTickCount>
 8004460:	4603      	mov	r3, r0
 8004462:	60bb      	str	r3, [r7, #8]

    /* Infinite loop */
    for (;;) {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8004464:	f107 0308 	add.w	r3, r7, #8
 8004468:	6979      	ldr	r1, [r7, #20]
 800446a:	4618      	mov	r0, r3
 800446c:	f008 fe2e 	bl	800d0cc <vTaskDelayUntil>

        setMuxIO();
 8004470:	f7ff fdfe 	bl	8004070 <setMuxIO>
        uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 8004474:	4b24      	ldr	r3, [pc, #144]	; (8004508 <scanKeysTask+0xb8>)
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	827b      	strh	r3, [r7, #18]
        uint16_t localKnobs = __atomic_load_n(&knobs, __ATOMIC_RELAXED);
 800447a:	4b24      	ldr	r3, [pc, #144]	; (800450c <scanKeysTask+0xbc>)
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	823b      	strh	r3, [r7, #16]
        //
        //serialPrint("keys: ");
        //serialPrintln(key_s);
        //serialPrint("knobs: ");
        //serialPrintln(knobs_s);
        uint8_t keys_pressed = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	77fb      	strb	r3, [r7, #31]
        for (int t = 0; t < 12; t++){
 8004484:	2300      	movs	r3, #0
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	e022      	b.n	80044d0 <scanKeysTask+0x80>
                bool pressed = ~localKeys & ( 1 << (t));
 800448a:	8a7b      	ldrh	r3, [r7, #18]
 800448c:	43da      	mvns	r2, r3
 800448e:	2101      	movs	r1, #1
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	fa01 f303 	lsl.w	r3, r1, r3
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	bf14      	ite	ne
 800449c:	2301      	movne	r3, #1
 800449e:	2300      	moveq	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]

                if (pressed) {
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00b      	beq.n	80044c0 <scanKeysTask+0x70>
                        notesPressed[t] = keyNotes[t];
 80044a8:	4a19      	ldr	r2, [pc, #100]	; (8004510 <scanKeysTask+0xc0>)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80044b0:	4918      	ldr	r1, [pc, #96]	; (8004514 <scanKeysTask+0xc4>)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        keys_pressed += 1;
 80044b8:	7ffb      	ldrb	r3, [r7, #31]
 80044ba:	3301      	adds	r3, #1
 80044bc:	77fb      	strb	r3, [r7, #31]
 80044be:	e004      	b.n	80044ca <scanKeysTask+0x7a>
                } else {
                        notesPressed[t] = '-';
 80044c0:	4a14      	ldr	r2, [pc, #80]	; (8004514 <scanKeysTask+0xc4>)
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	212d      	movs	r1, #45	; 0x2d
 80044c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int t = 0; t < 12; t++){
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	3301      	adds	r3, #1
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b0b      	cmp	r3, #11
 80044d4:	ddd9      	ble.n	800448a <scanKeysTask+0x3a>
                }
        }

        scanKnob(localKnobs, (uint16_t) prev_knobs, 3, 'v');
 80044d6:	4b10      	ldr	r3, [pc, #64]	; (8004518 <scanKeysTask+0xc8>)
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b299      	uxth	r1, r3
 80044dc:	8a38      	ldrh	r0, [r7, #16]
 80044de:	2376      	movs	r3, #118	; 0x76
 80044e0:	2203      	movs	r2, #3
 80044e2:	f7ff fed3 	bl	800428c <scanKnob>
        scanKnob(localKnobs, (uint16_t) prev_knobs, 2, 'o');
 80044e6:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <scanKeysTask+0xc8>)
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b299      	uxth	r1, r3
 80044ec:	8a38      	ldrh	r0, [r7, #16]
 80044ee:	236f      	movs	r3, #111	; 0x6f
 80044f0:	2202      	movs	r2, #2
 80044f2:	f7ff fecb 	bl	800428c <scanKnob>
        scanKnob(localKnobs, (uint16_t) prev_knobs, 1, 'w');
 80044f6:	4b08      	ldr	r3, [pc, #32]	; (8004518 <scanKeysTask+0xc8>)
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b299      	uxth	r1, r3
 80044fc:	8a38      	ldrh	r0, [r7, #16]
 80044fe:	2377      	movs	r3, #119	; 0x77
 8004500:	2201      	movs	r2, #1
 8004502:	f7ff fec3 	bl	800428c <scanKnob>
    for (;;) {
 8004506:	e7ad      	b.n	8004464 <scanKeysTask+0x14>
 8004508:	2000000e 	.word	0x2000000e
 800450c:	20000010 	.word	0x20000010
 8004510:	20000018 	.word	0x20000018
 8004514:	20000048 	.word	0x20000048
 8004518:	20000012 	.word	0x20000012

0800451c <displayUpdateTask>:
    }
}

void displayUpdateTask(void *argument)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b0a0      	sub	sp, #128	; 0x80
 8004520:	af04      	add	r7, sp, #16
 8004522:	6078      	str	r0, [r7, #4]

    const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
 8004524:	2364      	movs	r3, #100	; 0x64
 8004526:	667b      	str	r3, [r7, #100]	; 0x64
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8004528:	f008 ff9e 	bl	800d468 <xTaskGetTickCount>
 800452c:	4603      	mov	r3, r0
 800452e:	65fb      	str	r3, [r7, #92]	; 0x5c

    for (;;) {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8004530:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004534:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004536:	4618      	mov	r0, r3
 8004538:	f008 fdc8 	bl	800d0cc <vTaskDelayUntil>

        osMutexAcquire(keysMutexHandle, osWaitForever);
 800453c:	4b7e      	ldr	r3, [pc, #504]	; (8004738 <displayUpdateTask+0x21c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004544:	4618      	mov	r0, r3
 8004546:	f006 ff84 	bl	800b452 <osMutexAcquire>

        uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 800454a:	4b7c      	ldr	r3, [pc, #496]	; (800473c <displayUpdateTask+0x220>)
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        osMutexRelease(keysMutexHandle);
 8004552:	4b79      	ldr	r3, [pc, #484]	; (8004738 <displayUpdateTask+0x21c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f006 ffc6 	bl	800b4e8 <osMutexRelease>
        osMutexRelease(knobsMutexHandle);
 800455c:	4b78      	ldr	r3, [pc, #480]	; (8004740 <displayUpdateTask+0x224>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f006 ffc1 	bl	800b4e8 <osMutexRelease>

        u8g2_ClearBuffer(&u8g2);
 8004566:	4877      	ldr	r0, [pc, #476]	; (8004744 <displayUpdateTask+0x228>)
 8004568:	f7fc fd6d 	bl	8001046 <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_new3x9pixelfont_tr);
 800456c:	4976      	ldr	r1, [pc, #472]	; (8004748 <displayUpdateTask+0x22c>)
 800456e:	4875      	ldr	r0, [pc, #468]	; (8004744 <displayUpdateTask+0x228>)
 8004570:	f7fd fdc6 	bl	8002100 <u8g2_SetFont>

        //PRINTING THE NOTES PRESSED
        uint8_t string_size = 2;
 8004574:	2302      	movs	r3, #2
 8004576:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        uint8_t space = 3;
 800457a:	2303      	movs	r3, #3
 800457c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
        char o_s[16];
        sprintf(o_s, "|%x|", octave);
 8004580:	4b72      	ldr	r3, [pc, #456]	; (800474c <displayUpdateTask+0x230>)
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800458a:	4971      	ldr	r1, [pc, #452]	; (8004750 <displayUpdateTask+0x234>)
 800458c:	4618      	mov	r0, r3
 800458e:	f00a fd6d 	bl	800f06c <siprintf>
        u8g2_DrawStr(&u8g2, string_size, 7, o_s);
 8004592:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004596:	b299      	uxth	r1, r3
 8004598:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800459c:	2207      	movs	r2, #7
 800459e:	4869      	ldr	r0, [pc, #420]	; (8004744 <displayUpdateTask+0x228>)
 80045a0:	f7fd fcf2 	bl	8001f88 <u8g2_DrawStr>
        string_size += 10;
 80045a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045a8:	330a      	adds	r3, #10
 80045aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        for (int t = 0; t < 12; t++){
 80045ae:	2300      	movs	r3, #0
 80045b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b2:	e029      	b.n	8004608 <displayUpdateTask+0xec>
                if (notesPressed[t] != '-') {
 80045b4:	4a67      	ldr	r2, [pc, #412]	; (8004754 <displayUpdateTask+0x238>)
 80045b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045bc:	2b2d      	cmp	r3, #45	; 0x2d
 80045be:	d020      	beq.n	8004602 <displayUpdateTask+0xe6>
                        uint8_t w = u8g2_GetStrWidth(&u8g2, keyNotes[t]);
 80045c0:	4a65      	ldr	r2, [pc, #404]	; (8004758 <displayUpdateTask+0x23c>)
 80045c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c8:	4619      	mov	r1, r3
 80045ca:	485e      	ldr	r0, [pc, #376]	; (8004744 <displayUpdateTask+0x228>)
 80045cc:	f7fd fe16 	bl	80021fc <u8g2_GetStrWidth>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        u8g2_DrawStr(&u8g2, string_size, 7, notesPressed[t]);
 80045d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045da:	b299      	uxth	r1, r3
 80045dc:	4a5d      	ldr	r2, [pc, #372]	; (8004754 <displayUpdateTask+0x238>)
 80045de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e4:	2207      	movs	r2, #7
 80045e6:	4857      	ldr	r0, [pc, #348]	; (8004744 <displayUpdateTask+0x228>)
 80045e8:	f7fd fcce 	bl	8001f88 <u8g2_DrawStr>
                        string_size += w + space;
 80045ec:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80045f0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80045f4:	4413      	add	r3, r2
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045fc:	4413      	add	r3, r2
 80045fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        for (int t = 0; t < 12; t++){
 8004602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004604:	3301      	adds	r3, #1
 8004606:	66bb      	str	r3, [r7, #104]	; 0x68
 8004608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800460a:	2b0b      	cmp	r3, #11
 800460c:	ddd2      	ble.n	80045b4 <displayUpdateTask+0x98>
                }
        }
        //uint32_t localDMAkeys2 = __atomic_load_n(&DMAkeys2, __ATOMIC_RELAXED);

        char buf[20];
        sprintf(buf, "%x", RX.Message[1]);
 800460e:	4b53      	ldr	r3, [pc, #332]	; (800475c <displayUpdateTask+0x240>)
 8004610:	785b      	ldrb	r3, [r3, #1]
 8004612:	461a      	mov	r2, r3
 8004614:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004618:	4951      	ldr	r1, [pc, #324]	; (8004760 <displayUpdateTask+0x244>)
 800461a:	4618      	mov	r0, r3
 800461c:	f00a fd26 	bl	800f06c <siprintf>
        //serialPrintln(buf);

        //PRINTING VOLUME
        u8g2_DrawButtonUTF8(&u8g2, 105, 30, U8G2_BTN_BW1, 18,  4,  2, "Vol:");
 8004620:	4b50      	ldr	r3, [pc, #320]	; (8004764 <displayUpdateTask+0x248>)
 8004622:	9303      	str	r3, [sp, #12]
 8004624:	2302      	movs	r3, #2
 8004626:	9302      	str	r3, [sp, #8]
 8004628:	2304      	movs	r3, #4
 800462a:	9301      	str	r3, [sp, #4]
 800462c:	2312      	movs	r3, #18
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	2301      	movs	r3, #1
 8004632:	221e      	movs	r2, #30
 8004634:	2169      	movs	r1, #105	; 0x69
 8004636:	4843      	ldr	r0, [pc, #268]	; (8004744 <displayUpdateTask+0x228>)
 8004638:	f7fc fed2 	bl	80013e0 <u8g2_DrawButtonUTF8>
        char volume_s[16];
        sprintf(volume_s, "%x", volume);
 800463c:	4b4a      	ldr	r3, [pc, #296]	; (8004768 <displayUpdateTask+0x24c>)
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004646:	4946      	ldr	r1, [pc, #280]	; (8004760 <displayUpdateTask+0x244>)
 8004648:	4618      	mov	r0, r3
 800464a:	f00a fd0f 	bl	800f06c <siprintf>
        u8g2_DrawStr(&u8g2, 118, 30, volume_s);
 800464e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004652:	221e      	movs	r2, #30
 8004654:	2176      	movs	r1, #118	; 0x76
 8004656:	483b      	ldr	r0, [pc, #236]	; (8004744 <displayUpdateTask+0x228>)
 8004658:	f7fd fc96 	bl	8001f88 <u8g2_DrawStr>

        //PRINTING Octave
        u8g2_DrawButtonUTF8(&u8g2, 75, 30, U8G2_BTN_BW1, 18,  4,  2, "Oct:");
 800465c:	4b43      	ldr	r3, [pc, #268]	; (800476c <displayUpdateTask+0x250>)
 800465e:	9303      	str	r3, [sp, #12]
 8004660:	2302      	movs	r3, #2
 8004662:	9302      	str	r3, [sp, #8]
 8004664:	2304      	movs	r3, #4
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	2312      	movs	r3, #18
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	2301      	movs	r3, #1
 800466e:	221e      	movs	r2, #30
 8004670:	214b      	movs	r1, #75	; 0x4b
 8004672:	4834      	ldr	r0, [pc, #208]	; (8004744 <displayUpdateTask+0x228>)
 8004674:	f7fc feb4 	bl	80013e0 <u8g2_DrawButtonUTF8>
        char s[16];
        sprintf(s, "%x", octave);
 8004678:	4b34      	ldr	r3, [pc, #208]	; (800474c <displayUpdateTask+0x230>)
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	f107 0318 	add.w	r3, r7, #24
 8004682:	4937      	ldr	r1, [pc, #220]	; (8004760 <displayUpdateTask+0x244>)
 8004684:	4618      	mov	r0, r3
 8004686:	f00a fcf1 	bl	800f06c <siprintf>
        u8g2_DrawStr(&u8g2, 89, 30, s);
 800468a:	f107 0318 	add.w	r3, r7, #24
 800468e:	221e      	movs	r2, #30
 8004690:	2159      	movs	r1, #89	; 0x59
 8004692:	482c      	ldr	r0, [pc, #176]	; (8004744 <displayUpdateTask+0x228>)
 8004694:	f7fd fc78 	bl	8001f88 <u8g2_DrawStr>

        //PRINTING WAVE_FORM
        u8g2_DrawButtonUTF8(&u8g2, 33, 30, 0, 30,  4,  3, "Wave:");
 8004698:	4b35      	ldr	r3, [pc, #212]	; (8004770 <displayUpdateTask+0x254>)
 800469a:	9303      	str	r3, [sp, #12]
 800469c:	2303      	movs	r3, #3
 800469e:	9302      	str	r3, [sp, #8]
 80046a0:	2304      	movs	r3, #4
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	231e      	movs	r3, #30
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	2300      	movs	r3, #0
 80046aa:	221e      	movs	r2, #30
 80046ac:	2121      	movs	r1, #33	; 0x21
 80046ae:	4825      	ldr	r0, [pc, #148]	; (8004744 <displayUpdateTask+0x228>)
 80046b0:	f7fc fe96 	bl	80013e0 <u8g2_DrawButtonUTF8>
        char wave_s[16];
        sprintf(wave_s, "%x", output_wavetype);
 80046b4:	4b2f      	ldr	r3, [pc, #188]	; (8004774 <displayUpdateTask+0x258>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	f107 0308 	add.w	r3, r7, #8
 80046be:	4928      	ldr	r1, [pc, #160]	; (8004760 <displayUpdateTask+0x244>)
 80046c0:	4618      	mov	r0, r3
 80046c2:	f00a fcd3 	bl	800f06c <siprintf>
        //u8g2_DrawStr(&u8g2, 61, 30, wave_s);
        display_wave(&u8g2, 51, 30);
 80046c6:	221e      	movs	r2, #30
 80046c8:	2133      	movs	r1, #51	; 0x33
 80046ca:	481e      	ldr	r0, [pc, #120]	; (8004744 <displayUpdateTask+0x228>)
 80046cc:	f000 ff62 	bl	8005594 <display_wave>

        //PRINTING PET
        u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
 80046d0:	4929      	ldr	r1, [pc, #164]	; (8004778 <displayUpdateTask+0x25c>)
 80046d2:	481c      	ldr	r0, [pc, #112]	; (8004744 <displayUpdateTask+0x228>)
 80046d4:	f7fd fd14 	bl	8002100 <u8g2_SetFont>
        if (localKeys == 0x0FFF) {
 80046d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80046dc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d10a      	bne.n	80046fa <displayUpdateTask+0x1de>

                //u8g2_DrawStr(&u8g2, 70, 10, "- ^_^ -");
                u8g2_SetFont(&u8g2, u8g2_font_streamline_all_t);
 80046e4:	4925      	ldr	r1, [pc, #148]	; (800477c <displayUpdateTask+0x260>)
 80046e6:	4817      	ldr	r0, [pc, #92]	; (8004744 <displayUpdateTask+0x228>)
 80046e8:	f7fd fd0a 	bl	8002100 <u8g2_SetFont>
                u8g2_DrawUTF8(&u8g2, 2, 30, " \u029a");
 80046ec:	4b24      	ldr	r3, [pc, #144]	; (8004780 <displayUpdateTask+0x264>)
 80046ee:	221e      	movs	r2, #30
 80046f0:	2102      	movs	r1, #2
 80046f2:	4814      	ldr	r0, [pc, #80]	; (8004744 <displayUpdateTask+0x228>)
 80046f4:	f7fd fc62 	bl	8001fbc <u8g2_DrawUTF8>
 80046f8:	e019      	b.n	800472e <displayUpdateTask+0x212>

        } else {
                //u8g2_DrawStr(&u8g2, 70, 10, "- ^0^ -");
                u8g2_SetFont(&u8g2, u8g2_font_streamline_all_t); //21x21
 80046fa:	4920      	ldr	r1, [pc, #128]	; (800477c <displayUpdateTask+0x260>)
 80046fc:	4811      	ldr	r0, [pc, #68]	; (8004744 <displayUpdateTask+0x228>)
 80046fe:	f7fd fcff 	bl	8002100 <u8g2_SetFont>
                u8g2_DrawUTF8(&u8g2, 2, 30, " \u0299");
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <displayUpdateTask+0x268>)
 8004704:	221e      	movs	r2, #30
 8004706:	2102      	movs	r1, #2
 8004708:	480e      	ldr	r0, [pc, #56]	; (8004744 <displayUpdateTask+0x228>)
 800470a:	f7fd fc57 	bl	8001fbc <u8g2_DrawUTF8>
                u8g2_SetFont(&u8g2, u8g2_font_unifont_t_0_76); //16x16
 800470e:	491e      	ldr	r1, [pc, #120]	; (8004788 <displayUpdateTask+0x26c>)
 8004710:	480c      	ldr	r0, [pc, #48]	; (8004744 <displayUpdateTask+0x228>)
 8004712:	f7fd fcf5 	bl	8002100 <u8g2_SetFont>
                u8g2_DrawUTF8(&u8g2, 16, 27, " \u266a");
 8004716:	4b1d      	ldr	r3, [pc, #116]	; (800478c <displayUpdateTask+0x270>)
 8004718:	221b      	movs	r2, #27
 800471a:	2110      	movs	r1, #16
 800471c:	4809      	ldr	r0, [pc, #36]	; (8004744 <displayUpdateTask+0x228>)
 800471e:	f7fd fc4d 	bl	8001fbc <u8g2_DrawUTF8>
                u8g2_DrawUTF8(&u8g2, 13, 19, " \u266a");
 8004722:	4b1a      	ldr	r3, [pc, #104]	; (800478c <displayUpdateTask+0x270>)
 8004724:	2213      	movs	r2, #19
 8004726:	210d      	movs	r1, #13
 8004728:	4806      	ldr	r0, [pc, #24]	; (8004744 <displayUpdateTask+0x228>)
 800472a:	f7fd fc47 	bl	8001fbc <u8g2_DrawUTF8>
        }

        u8g2_SendBuffer(&u8g2);
 800472e:	4805      	ldr	r0, [pc, #20]	; (8004744 <displayUpdateTask+0x228>)
 8004730:	f7fc fcfc 	bl	800112c <u8g2_SendBuffer>
    for (;;) {
 8004734:	e6fc      	b.n	8004530 <displayUpdateTask+0x14>
 8004736:	bf00      	nop
 8004738:	20000604 	.word	0x20000604
 800473c:	2000000e 	.word	0x2000000e
 8004740:	20000608 	.word	0x20000608
 8004744:	2000060c 	.word	0x2000060c
 8004748:	0801c2bc 	.word	0x0801c2bc
 800474c:	2000000c 	.word	0x2000000c
 8004750:	08010c5c 	.word	0x08010c5c
 8004754:	20000048 	.word	0x20000048
 8004758:	20000018 	.word	0x20000018
 800475c:	200006a0 	.word	0x200006a0
 8004760:	08010c64 	.word	0x08010c64
 8004764:	08010c68 	.word	0x08010c68
 8004768:	20000014 	.word	0x20000014
 800476c:	08010c70 	.word	0x08010c70
 8004770:	08010c78 	.word	0x08010c78
 8004774:	2000007c 	.word	0x2000007c
 8004778:	0801d5a4 	.word	0x0801d5a4
 800477c:	0801231c 	.word	0x0801231c
 8004780:	08010c80 	.word	0x08010c80
 8004784:	08010c84 	.word	0x08010c84
 8004788:	0801c5c8 	.word	0x0801c5c8
 800478c:	08010c88 	.word	0x08010c88

08004790 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d101      	bne.n	80047a6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80047a2:	f001 f83b 	bl	800581c <HAL_IncTick>
	}
}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40014400 	.word	0x40014400

080047b4 <Error_Handler>:

//This function is executed in case of error occurrence.
void Error_Handler(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047b8:	b672      	cpsid	i
}
 80047ba:	bf00      	nop
    __disable_irq();
    while (1) {
 80047bc:	e7fe      	b.n	80047bc <Error_Handler+0x8>
	...

080047c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c6:	4b11      	ldr	r3, [pc, #68]	; (800480c <HAL_MspInit+0x4c>)
 80047c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ca:	4a10      	ldr	r2, [pc, #64]	; (800480c <HAL_MspInit+0x4c>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	6613      	str	r3, [r2, #96]	; 0x60
 80047d2:	4b0e      	ldr	r3, [pc, #56]	; (800480c <HAL_MspInit+0x4c>)
 80047d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_MspInit+0x4c>)
 80047e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e2:	4a0a      	ldr	r2, [pc, #40]	; (800480c <HAL_MspInit+0x4c>)
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6593      	str	r3, [r2, #88]	; 0x58
 80047ea:	4b08      	ldr	r3, [pc, #32]	; (800480c <HAL_MspInit+0x4c>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80047f6:	2200      	movs	r2, #0
 80047f8:	210f      	movs	r1, #15
 80047fa:	f06f 0001 	mvn.w	r0, #1
 80047fe:	f002 fe49 	bl	8007494 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000

08004810 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b09e      	sub	sp, #120	; 0x78
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004818:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	605a      	str	r2, [r3, #4]
 8004822:	609a      	str	r2, [r3, #8]
 8004824:	60da      	str	r2, [r3, #12]
 8004826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004828:	f107 0310 	add.w	r3, r7, #16
 800482c:	2254      	movs	r2, #84	; 0x54
 800482e:	2100      	movs	r1, #0
 8004830:	4618      	mov	r0, r3
 8004832:	f00a fb05 	bl	800ee40 <memset>
  if(hadc->Instance==ADC1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a25      	ldr	r2, [pc, #148]	; (80048d0 <HAL_ADC_MspInit+0xc0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d143      	bne.n	80048c8 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004840:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004844:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004846:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800484a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800484c:	2301      	movs	r3, #1
 800484e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004850:	2301      	movs	r3, #1
 8004852:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8004854:	2310      	movs	r3, #16
 8004856:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004858:	2307      	movs	r3, #7
 800485a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800485c:	2302      	movs	r3, #2
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004860:	2302      	movs	r3, #2
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800486a:	f107 0310 	add.w	r3, r7, #16
 800486e:	4618      	mov	r0, r3
 8004870:	f004 ffee 	bl	8009850 <HAL_RCCEx_PeriphCLKConfig>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800487a:	f7ff ff9b 	bl	80047b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800487e:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <HAL_ADC_MspInit+0xc4>)
 8004880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004882:	4a14      	ldr	r2, [pc, #80]	; (80048d4 <HAL_ADC_MspInit+0xc4>)
 8004884:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800488a:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <HAL_ADC_MspInit+0xc4>)
 800488c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004896:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <HAL_ADC_MspInit+0xc4>)
 8004898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489a:	4a0e      	ldr	r2, [pc, #56]	; (80048d4 <HAL_ADC_MspInit+0xc4>)
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <HAL_ADC_MspInit+0xc4>)
 80048a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = JOYY_Pin|JOYX_Pin;
 80048ae:	2303      	movs	r3, #3
 80048b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80048b2:	230b      	movs	r3, #11
 80048b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048be:	4619      	mov	r1, r3
 80048c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048c4:	f003 fb12 	bl	8007eec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80048c8:	bf00      	nop
 80048ca:	3778      	adds	r7, #120	; 0x78
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	50040000 	.word	0x50040000
 80048d4:	40021000 	.word	0x40021000

080048d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e0:	f107 0314 	add.w	r3, r7, #20
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	60da      	str	r2, [r3, #12]
 80048ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a29      	ldr	r2, [pc, #164]	; (800499c <HAL_CAN_MspInit+0xc4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d14b      	bne.n	8004992 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80048fa:	4b29      	ldr	r3, [pc, #164]	; (80049a0 <HAL_CAN_MspInit+0xc8>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	4a28      	ldr	r2, [pc, #160]	; (80049a0 <HAL_CAN_MspInit+0xc8>)
 8004900:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004904:	6593      	str	r3, [r2, #88]	; 0x58
 8004906:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <HAL_CAN_MspInit+0xc8>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004912:	4b23      	ldr	r3, [pc, #140]	; (80049a0 <HAL_CAN_MspInit+0xc8>)
 8004914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004916:	4a22      	ldr	r2, [pc, #136]	; (80049a0 <HAL_CAN_MspInit+0xc8>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800491e:	4b20      	ldr	r3, [pc, #128]	; (80049a0 <HAL_CAN_MspInit+0xc8>)
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800492a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800492e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004930:	2302      	movs	r3, #2
 8004932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004934:	2301      	movs	r3, #1
 8004936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004938:	2301      	movs	r3, #1
 800493a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800493c:	2309      	movs	r3, #9
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004940:	f107 0314 	add.w	r3, r7, #20
 8004944:	4619      	mov	r1, r3
 8004946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800494a:	f003 facf 	bl	8007eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800494e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004954:	2302      	movs	r3, #2
 8004956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800495c:	2301      	movs	r3, #1
 800495e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004960:	2309      	movs	r3, #9
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004964:	f107 0314 	add.w	r3, r7, #20
 8004968:	4619      	mov	r1, r3
 800496a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800496e:	f003 fabd 	bl	8007eec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 8004972:	2200      	movs	r2, #0
 8004974:	2106      	movs	r1, #6
 8004976:	2013      	movs	r0, #19
 8004978:	f002 fd8c 	bl	8007494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800497c:	2013      	movs	r0, #19
 800497e:	f002 fda5 	bl	80074cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 8004982:	2200      	movs	r2, #0
 8004984:	2106      	movs	r1, #6
 8004986:	2014      	movs	r0, #20
 8004988:	f002 fd84 	bl	8007494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800498c:	2014      	movs	r0, #20
 800498e:	f002 fd9d 	bl	80074cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004992:	bf00      	nop
 8004994:	3728      	adds	r7, #40	; 0x28
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40006400 	.word	0x40006400
 80049a0:	40021000 	.word	0x40021000

080049a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	; 0x28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ac:	f107 0314 	add.w	r3, r7, #20
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	60da      	str	r2, [r3, #12]
 80049ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a2f      	ldr	r2, [pc, #188]	; (8004a80 <HAL_DAC_MspInit+0xdc>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d158      	bne.n	8004a78 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80049c6:	4b2f      	ldr	r3, [pc, #188]	; (8004a84 <HAL_DAC_MspInit+0xe0>)
 80049c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ca:	4a2e      	ldr	r2, [pc, #184]	; (8004a84 <HAL_DAC_MspInit+0xe0>)
 80049cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049d0:	6593      	str	r3, [r2, #88]	; 0x58
 80049d2:	4b2c      	ldr	r3, [pc, #176]	; (8004a84 <HAL_DAC_MspInit+0xe0>)
 80049d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049de:	4b29      	ldr	r3, [pc, #164]	; (8004a84 <HAL_DAC_MspInit+0xe0>)
 80049e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e2:	4a28      	ldr	r2, [pc, #160]	; (8004a84 <HAL_DAC_MspInit+0xe0>)
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049ea:	4b26      	ldr	r3, [pc, #152]	; (8004a84 <HAL_DAC_MspInit+0xe0>)
 80049ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = OUTR_Pin|OUTL_Pin;
 80049f6:	2330      	movs	r3, #48	; 0x30
 80049f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049fa:	2303      	movs	r3, #3
 80049fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a02:	f107 0314 	add.w	r3, r7, #20
 8004a06:	4619      	mov	r1, r3
 8004a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a0c:	f003 fa6e 	bl	8007eec <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8004a10:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <HAL_DAC_MspInit+0xe4>)
 8004a12:	4a1e      	ldr	r2, [pc, #120]	; (8004a8c <HAL_DAC_MspInit+0xe8>)
 8004a14:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8004a16:	4b1c      	ldr	r3, [pc, #112]	; (8004a88 <HAL_DAC_MspInit+0xe4>)
 8004a18:	2206      	movs	r2, #6
 8004a1a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a1c:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <HAL_DAC_MspInit+0xe4>)
 8004a1e:	2210      	movs	r2, #16
 8004a20:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a22:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <HAL_DAC_MspInit+0xe4>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004a28:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <HAL_DAC_MspInit+0xe4>)
 8004a2a:	2280      	movs	r2, #128	; 0x80
 8004a2c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a2e:	4b16      	ldr	r3, [pc, #88]	; (8004a88 <HAL_DAC_MspInit+0xe4>)
 8004a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a34:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <HAL_DAC_MspInit+0xe4>)
 8004a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a3c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <HAL_DAC_MspInit+0xe4>)
 8004a40:	2220      	movs	r2, #32
 8004a42:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8004a44:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <HAL_DAC_MspInit+0xe4>)
 8004a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8004a4c:	480e      	ldr	r0, [pc, #56]	; (8004a88 <HAL_DAC_MspInit+0xe4>)
 8004a4e:	f003 f855 	bl	8007afc <HAL_DMA_Init>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8004a58:	f7ff feac 	bl	80047b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <HAL_DAC_MspInit+0xe4>)
 8004a60:	609a      	str	r2, [r3, #8]
 8004a62:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <HAL_DAC_MspInit+0xe4>)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2105      	movs	r1, #5
 8004a6c:	2036      	movs	r0, #54	; 0x36
 8004a6e:	f002 fd11 	bl	8007494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a72:	2036      	movs	r0, #54	; 0x36
 8004a74:	f002 fd2a 	bl	80074cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8004a78:	bf00      	nop
 8004a7a:	3728      	adds	r7, #40	; 0x28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40007400 	.word	0x40007400
 8004a84:	40021000 	.word	0x40021000
 8004a88:	200003c0 	.word	0x200003c0
 8004a8c:	40020030 	.word	0x40020030

08004a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b09e      	sub	sp, #120	; 0x78
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004aa8:	f107 0310 	add.w	r3, r7, #16
 8004aac:	2254      	movs	r2, #84	; 0x54
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f00a f9c5 	bl	800ee40 <memset>
  if(hi2c->Instance==I2C1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1e      	ldr	r2, [pc, #120]	; (8004b34 <HAL_I2C_MspInit+0xa4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d135      	bne.n	8004b2c <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004ac0:	2340      	movs	r3, #64	; 0x40
 8004ac2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ac8:	f107 0310 	add.w	r3, r7, #16
 8004acc:	4618      	mov	r0, r3
 8004ace:	f004 febf 	bl	8009850 <HAL_RCCEx_PeriphCLKConfig>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004ad8:	f7ff fe6c 	bl	80047b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004adc:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <HAL_I2C_MspInit+0xa8>)
 8004ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae0:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <HAL_I2C_MspInit+0xa8>)
 8004ae2:	f043 0302 	orr.w	r3, r3, #2
 8004ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ae8:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <HAL_I2C_MspInit+0xa8>)
 8004aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004af4:	23c0      	movs	r3, #192	; 0xc0
 8004af6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004af8:	2312      	movs	r3, #18
 8004afa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b00:	2303      	movs	r3, #3
 8004b02:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b04:	2304      	movs	r3, #4
 8004b06:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	480b      	ldr	r0, [pc, #44]	; (8004b3c <HAL_I2C_MspInit+0xac>)
 8004b10:	f003 f9ec 	bl	8007eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b14:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <HAL_I2C_MspInit+0xa8>)
 8004b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b18:	4a07      	ldr	r2, [pc, #28]	; (8004b38 <HAL_I2C_MspInit+0xa8>)
 8004b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_I2C_MspInit+0xa8>)
 8004b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b2c:	bf00      	nop
 8004b2e:	3778      	adds	r7, #120	; 0x78
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40005400 	.word	0x40005400
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	48000400 	.word	0x48000400

08004b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b50:	d10c      	bne.n	8004b6c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b52:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <HAL_TIM_Base_MspInit+0x8c>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <HAL_TIM_Base_MspInit+0x8c>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b5e:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <HAL_TIM_Base_MspInit+0x8c>)
 8004b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004b6a:	e02a      	b.n	8004bc2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <HAL_TIM_Base_MspInit+0x90>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d114      	bne.n	8004ba0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004b76:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <HAL_TIM_Base_MspInit+0x8c>)
 8004b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7a:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <HAL_TIM_Base_MspInit+0x8c>)
 8004b7c:	f043 0310 	orr.w	r3, r3, #16
 8004b80:	6593      	str	r3, [r2, #88]	; 0x58
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <HAL_TIM_Base_MspInit+0x8c>)
 8004b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2105      	movs	r1, #5
 8004b92:	2036      	movs	r0, #54	; 0x36
 8004b94:	f002 fc7e 	bl	8007494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004b98:	2036      	movs	r0, #54	; 0x36
 8004b9a:	f002 fc97 	bl	80074cc <HAL_NVIC_EnableIRQ>
}
 8004b9e:	e010      	b.n	8004bc2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a0b      	ldr	r2, [pc, #44]	; (8004bd4 <HAL_TIM_Base_MspInit+0x94>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d10b      	bne.n	8004bc2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004baa:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <HAL_TIM_Base_MspInit+0x8c>)
 8004bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bae:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <HAL_TIM_Base_MspInit+0x8c>)
 8004bb0:	f043 0320 	orr.w	r3, r3, #32
 8004bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_TIM_Base_MspInit+0x8c>)
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
}
 8004bc2:	bf00      	nop
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	40001000 	.word	0x40001000
 8004bd4:	40001400 	.word	0x40001400

08004bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b09e      	sub	sp, #120	; 0x78
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	60da      	str	r2, [r3, #12]
 8004bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bf0:	f107 0310 	add.w	r3, r7, #16
 8004bf4:	2254      	movs	r2, #84	; 0x54
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f00a f921 	bl	800ee40 <memset>
  if(huart->Instance==USART2)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a28      	ldr	r2, [pc, #160]	; (8004ca4 <HAL_UART_MspInit+0xcc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d148      	bne.n	8004c9a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c10:	f107 0310 	add.w	r3, r7, #16
 8004c14:	4618      	mov	r0, r3
 8004c16:	f004 fe1b 	bl	8009850 <HAL_RCCEx_PeriphCLKConfig>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004c20:	f7ff fdc8 	bl	80047b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c24:	4b20      	ldr	r3, [pc, #128]	; (8004ca8 <HAL_UART_MspInit+0xd0>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c28:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <HAL_UART_MspInit+0xd0>)
 8004c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c30:	4b1d      	ldr	r3, [pc, #116]	; (8004ca8 <HAL_UART_MspInit+0xd0>)
 8004c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ca8 <HAL_UART_MspInit+0xd0>)
 8004c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c40:	4a19      	ldr	r2, [pc, #100]	; (8004ca8 <HAL_UART_MspInit+0xd0>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c48:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <HAL_UART_MspInit+0xd0>)
 8004c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	60bb      	str	r3, [r7, #8]
 8004c52:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c54:	2304      	movs	r3, #4
 8004c56:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c60:	2303      	movs	r3, #3
 8004c62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c64:	2307      	movs	r3, #7
 8004c66:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c72:	f003 f93b 	bl	8007eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c84:	2303      	movs	r3, #3
 8004c86:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004c90:	4619      	mov	r1, r3
 8004c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c96:	f003 f929 	bl	8007eec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c9a:	bf00      	nop
 8004c9c:	3778      	adds	r7, #120	; 0x78
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40004400 	.word	0x40004400
 8004ca8:	40021000 	.word	0x40021000

08004cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08c      	sub	sp, #48	; 0x30
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8004cba:	4b2e      	ldr	r3, [pc, #184]	; (8004d74 <HAL_InitTick+0xc8>)
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	4a2d      	ldr	r2, [pc, #180]	; (8004d74 <HAL_InitTick+0xc8>)
 8004cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc4:	6613      	str	r3, [r2, #96]	; 0x60
 8004cc6:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <HAL_InitTick+0xc8>)
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004cd2:	f107 020c 	add.w	r2, r7, #12
 8004cd6:	f107 0310 	add.w	r3, r7, #16
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f004 fd25 	bl	800972c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004ce2:	f004 fd0d 	bl	8009700 <HAL_RCC_GetPCLK2Freq>
 8004ce6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	4a23      	ldr	r2, [pc, #140]	; (8004d78 <HAL_InitTick+0xcc>)
 8004cec:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf0:	0c9b      	lsrs	r3, r3, #18
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8004cf6:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_InitTick+0xd0>)
 8004cf8:	4a21      	ldr	r2, [pc, #132]	; (8004d80 <HAL_InitTick+0xd4>)
 8004cfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8004cfc:	4b1f      	ldr	r3, [pc, #124]	; (8004d7c <HAL_InitTick+0xd0>)
 8004cfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d02:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8004d04:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <HAL_InitTick+0xd0>)
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8004d0a:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <HAL_InitTick+0xd0>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d10:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <HAL_InitTick+0xd0>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d16:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_InitTick+0xd0>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8004d1c:	4817      	ldr	r0, [pc, #92]	; (8004d7c <HAL_InitTick+0xd0>)
 8004d1e:	f005 f88f 	bl	8009e40 <HAL_TIM_Base_Init>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004d28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d11b      	bne.n	8004d68 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8004d30:	4812      	ldr	r0, [pc, #72]	; (8004d7c <HAL_InitTick+0xd0>)
 8004d32:	f005 f929 	bl	8009f88 <HAL_TIM_Base_Start_IT>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d111      	bne.n	8004d68 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004d44:	2019      	movs	r0, #25
 8004d46:	f002 fbc1 	bl	80074cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b0f      	cmp	r3, #15
 8004d4e:	d808      	bhi.n	8004d62 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8004d50:	2200      	movs	r2, #0
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	2019      	movs	r0, #25
 8004d56:	f002 fb9d 	bl	8007494 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <HAL_InitTick+0xd8>)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	e002      	b.n	8004d68 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3730      	adds	r7, #48	; 0x30
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000
 8004d78:	431bde83 	.word	0x431bde83
 8004d7c:	200006ac 	.word	0x200006ac
 8004d80:	40014400 	.word	0x40014400
 8004d84:	20000080 	.word	0x20000080

08004d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d8c:	e7fe      	b.n	8004d8c <NMI_Handler+0x4>

08004d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d92:	e7fe      	b.n	8004d92 <HardFault_Handler+0x4>

08004d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d98:	e7fe      	b.n	8004d98 <MemManage_Handler+0x4>

08004d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d9e:	e7fe      	b.n	8004d9e <BusFault_Handler+0x4>

08004da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004da4:	e7fe      	b.n	8004da4 <UsageFault_Handler+0x4>

08004da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004da6:	b480      	push	{r7}
 8004da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004daa:	bf00      	nop
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8004db8:	4802      	ldr	r0, [pc, #8]	; (8004dc4 <DMA1_Channel3_IRQHandler+0x10>)
 8004dba:	f002 ffb7 	bl	8007d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004dbe:	bf00      	nop
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	200003c0 	.word	0x200003c0

08004dc8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004dcc:	4802      	ldr	r0, [pc, #8]	; (8004dd8 <CAN1_TX_IRQHandler+0x10>)
 8004dce:	f002 f897 	bl	8006f00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004dd2:	bf00      	nop
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000384 	.word	0x20000384

08004ddc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004de0:	4802      	ldr	r0, [pc, #8]	; (8004dec <CAN1_RX0_IRQHandler+0x10>)
 8004de2:	f002 f88d 	bl	8006f00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004de6:	bf00      	nop
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000384 	.word	0x20000384

08004df0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004df4:	4802      	ldr	r0, [pc, #8]	; (8004e00 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004df6:	f005 f91b 	bl	800a030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	200006ac 	.word	0x200006ac

08004e04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004e08:	4803      	ldr	r0, [pc, #12]	; (8004e18 <TIM6_DAC_IRQHandler+0x14>)
 8004e0a:	f005 f911 	bl	800a030 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8004e0e:	4803      	ldr	r0, [pc, #12]	; (8004e1c <TIM6_DAC_IRQHandler+0x18>)
 8004e10:	f002 fc58 	bl	80076c4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004e14:	bf00      	nop
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	200004a8 	.word	0x200004a8
 8004e1c:	200003ac 	.word	0x200003ac

08004e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e28:	4a14      	ldr	r2, [pc, #80]	; (8004e7c <_sbrk+0x5c>)
 8004e2a:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <_sbrk+0x60>)
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e34:	4b13      	ldr	r3, [pc, #76]	; (8004e84 <_sbrk+0x64>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d102      	bne.n	8004e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <_sbrk+0x64>)
 8004e3e:	4a12      	ldr	r2, [pc, #72]	; (8004e88 <_sbrk+0x68>)
 8004e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e42:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <_sbrk+0x64>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4413      	add	r3, r2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d207      	bcs.n	8004e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e50:	f009 ffbc 	bl	800edcc <__errno>
 8004e54:	4603      	mov	r3, r0
 8004e56:	220c      	movs	r2, #12
 8004e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e5e:	e009      	b.n	8004e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e60:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <_sbrk+0x64>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e66:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <_sbrk+0x64>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	4a05      	ldr	r2, [pc, #20]	; (8004e84 <_sbrk+0x64>)
 8004e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e72:	68fb      	ldr	r3, [r7, #12]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20010000 	.word	0x20010000
 8004e80:	00000400 	.word	0x00000400
 8004e84:	200006f8 	.word	0x200006f8
 8004e88:	2000c1f8 	.word	0x2000c1f8

08004e8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <SystemInit+0x20>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	4a05      	ldr	r2, [pc, #20]	; (8004eac <SystemInit+0x20>)
 8004e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	e000ed00 	.word	0xe000ed00

08004eb0 <init_lookup_tables>:
// Initialize the contents of the all the LUTs
// This includes generating the different instrument
// waveforms as well as initializing each LUT
// so that freq_tables has pointers pointing to the correct
// parts of their data.
void init_lookup_tables(){
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
    init_lookup_table(&output_LUT);
 8004eb6:	4813      	ldr	r0, [pc, #76]	; (8004f04 <init_lookup_tables+0x54>)
 8004eb8:	f000 f828 	bl	8004f0c <init_lookup_table>

    for(WaveType type = 0; type < END_WAVETYPE; type++){
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	71fb      	strb	r3, [r7, #7]
 8004ec0:	e018      	b.n	8004ef4 <init_lookup_tables+0x44>
        init_lookup_table(&waveform_LUTs[type]);
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	f241 7284 	movw	r2, #6020	; 0x1784
 8004ec8:	fb02 f303 	mul.w	r3, r2, r3
 8004ecc:	4a0e      	ldr	r2, [pc, #56]	; (8004f08 <init_lookup_tables+0x58>)
 8004ece:	4413      	add	r3, r2
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 f81b 	bl	8004f0c <init_lookup_table>
        generate_waveform(&waveform_LUTs[type], type);
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	f241 7284 	movw	r2, #6020	; 0x1784
 8004edc:	fb02 f303 	mul.w	r3, r2, r3
 8004ee0:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <init_lookup_tables+0x58>)
 8004ee2:	4413      	add	r3, r2
 8004ee4:	79fa      	ldrb	r2, [r7, #7]
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 f839 	bl	8004f60 <generate_waveform>
    for(WaveType type = 0; type < END_WAVETYPE; type++){
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	71fb      	strb	r3, [r7, #7]
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d9e3      	bls.n	8004ec2 <init_lookup_tables+0x12>
    }

}
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	200009a0 	.word	0x200009a0
 8004f08:	2000213c 	.word	0x2000213c

08004f0c <init_lookup_table>:

void init_lookup_table(LookupTable* table) {
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
    int32_t offset = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
    for(int t = 0; t < 12; t++){
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	e014      	b.n	8004f48 <init_lookup_table+0x3c>
        table->freq_tables[t] = table->table_data + offset;
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	441a      	add	r2, r3
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	605a      	str	r2, [r3, #4]
        offset += LUT_freq_sizes[t];
 8004f34:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <init_lookup_table+0x50>)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
    for(int t = 0; t < 12; t++){
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	3301      	adds	r3, #1
 8004f46:	60bb      	str	r3, [r7, #8]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b0b      	cmp	r3, #11
 8004f4c:	dde7      	ble.n	8004f1e <init_lookup_table+0x12>
    }
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	0801dc08 	.word	0x0801dc08

08004f60 <generate_waveform>:

void generate_waveform(LookupTable* dest, WaveType wave){
 8004f60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f64:	b08e      	sub	sp, #56	; 0x38
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	70fb      	strb	r3, [r7, #3]
    for (int t = 0; t < 12; t++) {
 8004f6e:	2300      	movs	r3, #0
 8004f70:	637b      	str	r3, [r7, #52]	; 0x34
 8004f72:	e2a6      	b.n	80054c2 <generate_waveform+0x562>
        uint32_t samples =  LUT_freq_sizes[t];
 8004f74:	4aaa      	ldr	r2, [pc, #680]	; (8005220 <generate_waveform+0x2c0>)
 8004f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7c:	61fb      	str	r3, [r7, #28]

        int half_samples = samples / 2;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	61bb      	str	r3, [r7, #24]

        switch (wave) {
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	f200 813d 	bhi.w	8005206 <generate_waveform+0x2a6>
 8004f8c:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <generate_waveform+0x34>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08005005 	.word	0x08005005
 8004f9c:	080050ab 	.word	0x080050ab
 8004fa0:	080050ef 	.word	0x080050ef
            case SAWTOOTH: {
                serialPrint("sawtoothgen\n");
 8004fa4:	489f      	ldr	r0, [pc, #636]	; (8005224 <generate_waveform+0x2c4>)
 8004fa6:	f7fe ff6f 	bl	8003e88 <serialPrint>
                for (int i = 0; i < samples; i++) {
 8004faa:	2300      	movs	r3, #0
 8004fac:	633b      	str	r3, [r7, #48]	; 0x30
 8004fae:	e024      	b.n	8004ffa <generate_waveform+0x9a>
                        dest->freq_tables[t][i] = (i <= half_samples) ? 2048 * ((float)(i-half_samples) / (float) samples) : 2048 * ((float)(i-half_samples) / (float) samples);
 8004fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	ee07 3a90 	vmov	s15, r3
 8004fc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fcc:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005228 <generate_waveform+0x2c8>
 8004fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd8:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	4413      	add	r3, r2
 8004fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fec:	ee17 2a90 	vmov	r2, s15
 8004ff0:	b212      	sxth	r2, r2
 8004ff2:	801a      	strh	r2, [r3, #0]
                for (int i = 0; i < samples; i++) {
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d8d6      	bhi.n	8004fb0 <generate_waveform+0x50>
                }
            }
            break;
 8005002:	e25b      	b.n	80054bc <generate_waveform+0x55c>
            case SINE: {
                serialPrint("sinegen\n");
 8005004:	4889      	ldr	r0, [pc, #548]	; (800522c <generate_waveform+0x2cc>)
 8005006:	f7fe ff3f 	bl	8003e88 <serialPrint>
                for (int i = 0; i < samples; i++) {
 800500a:	2300      	movs	r3, #0
 800500c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800500e:	e047      	b.n	80050a0 <generate_waveform+0x140>
                        dest->freq_tables[t][i] = 2048 * sin(2.0 * PI * (float)i / (float) samples);
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800501a:	ee17 0a90 	vmov	r0, s15
 800501e:	f7fb fa93 	bl	8000548 <__aeabi_f2d>
 8005022:	a37d      	add	r3, pc, #500	; (adr r3, 8005218 <generate_waveform+0x2b8>)
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	f7fb fae6 	bl	80005f8 <__aeabi_dmul>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4614      	mov	r4, r2
 8005032:	461d      	mov	r5, r3
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	ee07 3a90 	vmov	s15, r3
 800503a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503e:	ee17 0a90 	vmov	r0, s15
 8005042:	f7fb fa81 	bl	8000548 <__aeabi_f2d>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4620      	mov	r0, r4
 800504c:	4629      	mov	r1, r5
 800504e:	f7fb fbfd 	bl	800084c <__aeabi_ddiv>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	ec43 2b17 	vmov	d7, r2, r3
 800505a:	eeb0 0a47 	vmov.f32	s0, s14
 800505e:	eef0 0a67 	vmov.f32	s1, s15
 8005062:	f00a fbbd 	bl	800f7e0 <sin>
 8005066:	ec51 0b10 	vmov	r0, r1, d0
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	4b70      	ldr	r3, [pc, #448]	; (8005230 <generate_waveform+0x2d0>)
 8005070:	f7fb fac2 	bl	80005f8 <__aeabi_dmul>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	18d4      	adds	r4, r2, r3
 8005090:	f7fb fd4c 	bl	8000b2c <__aeabi_d2iz>
 8005094:	4603      	mov	r3, r0
 8005096:	b21b      	sxth	r3, r3
 8005098:	8023      	strh	r3, [r4, #0]
                for (int i = 0; i < samples; i++) {
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	3301      	adds	r3, #1
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d8b3      	bhi.n	8005010 <generate_waveform+0xb0>
                }
            }
            break;
 80050a8:	e208      	b.n	80054bc <generate_waveform+0x55c>
            case SQUARE: {
                serialPrint("squaregen\n");
 80050aa:	4862      	ldr	r0, [pc, #392]	; (8005234 <generate_waveform+0x2d4>)
 80050ac:	f7fe feec 	bl	8003e88 <serialPrint>
                for (int i = 0; i < samples; i++) {
 80050b0:	2300      	movs	r3, #0
 80050b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b4:	e016      	b.n	80050e4 <generate_waveform+0x184>
                        dest->freq_tables[t][i] = (i <= half_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 80050b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	dc02      	bgt.n	80050c4 <generate_waveform+0x164>
 80050be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050c2:	e000      	b.n	80050c6 <generate_waveform+0x166>
 80050c4:	495c      	ldr	r1, [pc, #368]	; (8005238 <generate_waveform+0x2d8>)
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ca:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	4413      	add	r3, r2
 80050da:	460a      	mov	r2, r1
 80050dc:	801a      	strh	r2, [r3, #0]
                for (int i = 0; i < samples; i++) {
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	3301      	adds	r3, #1
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d8e4      	bhi.n	80050b6 <generate_waveform+0x156>
                }
            }
            break;
 80050ec:	e1e6      	b.n	80054bc <generate_waveform+0x55c>
            case TRIANGLE: {
                serialPrint("trianglegen\n");
 80050ee:	4853      	ldr	r0, [pc, #332]	; (800523c <generate_waveform+0x2dc>)
 80050f0:	f7fe feca 	bl	8003e88 <serialPrint>
                int half_samples = samples / 2;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	617b      	str	r3, [r7, #20]
                int first_fourth = samples / 4;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	089b      	lsrs	r3, r3, #2
 80050fe:	613b      	str	r3, [r7, #16]
                int third_fourth = half_samples + first_fourth;
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4413      	add	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
                for (int i = 0; i < samples; i++) {
 8005108:	2300      	movs	r3, #0
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
 800510c:	e076      	b.n	80051fc <generate_waveform+0x29c>
                    dest->freq_tables[t][i] = (i <= first_fourth) ?
 800510e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	dc16      	bgt.n	8005144 <generate_waveform+0x1e4>
                        2048 * ((float)(-i) / (float) samples) :
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	425b      	negs	r3, r3
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800512c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005130:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005228 <generate_waveform+0x2c8>
 8005134:	ee67 7a87 	vmul.f32	s15, s15, s14
                    dest->freq_tables[t][i] = (i <= first_fourth) ?
 8005138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800513c:	ee17 3a90 	vmov	r3, s15
 8005140:	b21a      	sxth	r2, r3
 8005142:	e032      	b.n	80051aa <generate_waveform+0x24a>
 8005144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	429a      	cmp	r2, r3
 800514a:	dc17      	bgt.n	800517c <generate_waveform+0x21c>
                        (i <= third_fourth) ? 2048 * ((float)(i-half_samples) / (float) samples) : 2048 * ((float)(samples-i) / (float) samples);
 800514c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	ee07 3a90 	vmov	s15, r3
 8005160:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005168:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005228 <generate_waveform+0x2c8>
 800516c:	ee67 7a87 	vmul.f32	s15, s15, s14
                    dest->freq_tables[t][i] = (i <= first_fourth) ?
 8005170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005174:	ee17 3a90 	vmov	r3, s15
 8005178:	b21a      	sxth	r2, r3
 800517a:	e016      	b.n	80051aa <generate_waveform+0x24a>
                        (i <= third_fourth) ? 2048 * ((float)(i-half_samples) / (float) samples) : 2048 * ((float)(samples-i) / (float) samples);
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005198:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005228 <generate_waveform+0x2c8>
 800519c:	ee67 7a87 	vmul.f32	s15, s15, s14
                    dest->freq_tables[t][i] = (i <= first_fourth) ?
 80051a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051a4:	ee17 3a90 	vmov	r3, s15
 80051a8:	b21a      	sxth	r2, r3
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ae:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	6859      	ldr	r1, [r3, #4]
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	440b      	add	r3, r1
 80051be:	801a      	strh	r2, [r3, #0]
                    dest->freq_tables[t][i] *= 4;
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c4:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	4413      	add	r3, r2
 80051d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	b299      	uxth	r1, r3
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e2:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	4413      	add	r3, r2
 80051f2:	b20a      	sxth	r2, r1
 80051f4:	801a      	strh	r2, [r3, #0]
                for (int i = 0; i < samples; i++) {
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	3301      	adds	r3, #1
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	429a      	cmp	r2, r3
 8005202:	d884      	bhi.n	800510e <generate_waveform+0x1ae>
                }
            }
            break;
 8005204:	e15a      	b.n	80054bc <generate_waveform+0x55c>
            default:
            case CLARINET: {
                serialPrint("clarinetgen\n");
 8005206:	480e      	ldr	r0, [pc, #56]	; (8005240 <generate_waveform+0x2e0>)
 8005208:	f7fe fe3e 	bl	8003e88 <serialPrint>
                for (int i = 0; i < samples; i++) {
 800520c:	2300      	movs	r3, #0
 800520e:	623b      	str	r3, [r7, #32]
 8005210:	e14e      	b.n	80054b0 <generate_waveform+0x550>
 8005212:	bf00      	nop
 8005214:	f3af 8000 	nop.w
 8005218:	54442eea 	.word	0x54442eea
 800521c:	401921fb 	.word	0x401921fb
 8005220:	0801dc08 	.word	0x0801dc08
 8005224:	08010c90 	.word	0x08010c90
 8005228:	45000000 	.word	0x45000000
 800522c:	08010ca0 	.word	0x08010ca0
 8005230:	40a00000 	.word	0x40a00000
 8005234:	08010cac 	.word	0x08010cac
 8005238:	fffff800 	.word	0xfffff800
 800523c:	08010cb8 	.word	0x08010cb8
 8005240:	08010cc8 	.word	0x08010cc8
                        float harmonic_sample =  sin(2.0 * PI * (float)i / ((float) samples));
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800524e:	ee17 0a90 	vmov	r0, s15
 8005252:	f7fb f979 	bl	8000548 <__aeabi_f2d>
 8005256:	a3a0      	add	r3, pc, #640	; (adr r3, 80054d8 <generate_waveform+0x578>)
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	f7fb f9cc 	bl	80005f8 <__aeabi_dmul>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4614      	mov	r4, r2
 8005266:	461d      	mov	r5, r3
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	ee17 0a90 	vmov	r0, s15
 8005276:	f7fb f967 	bl	8000548 <__aeabi_f2d>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4620      	mov	r0, r4
 8005280:	4629      	mov	r1, r5
 8005282:	f7fb fae3 	bl	800084c <__aeabi_ddiv>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	ec43 2b17 	vmov	d7, r2, r3
 800528e:	eeb0 0a47 	vmov.f32	s0, s14
 8005292:	eef0 0a67 	vmov.f32	s1, s15
 8005296:	f00a faa3 	bl	800f7e0 <sin>
 800529a:	ec53 2b10 	vmov	r2, r3, d0
 800529e:	4610      	mov	r0, r2
 80052a0:	4619      	mov	r1, r3
 80052a2:	f7fb fc6b 	bl	8000b7c <__aeabi_d2f>
 80052a6:	4603      	mov	r3, r0
 80052a8:	60bb      	str	r3, [r7, #8]
                        harmonic_sample += sin(2.0 * PI * (float)i * 3 / ((float) samples)) / 3;
 80052aa:	68b8      	ldr	r0, [r7, #8]
 80052ac:	f7fb f94c 	bl	8000548 <__aeabi_f2d>
 80052b0:	4604      	mov	r4, r0
 80052b2:	460d      	mov	r5, r1
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052be:	ee17 0a90 	vmov	r0, s15
 80052c2:	f7fb f941 	bl	8000548 <__aeabi_f2d>
 80052c6:	a384      	add	r3, pc, #528	; (adr r3, 80054d8 <generate_waveform+0x578>)
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f7fb f994 	bl	80005f8 <__aeabi_dmul>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4610      	mov	r0, r2
 80052d6:	4619      	mov	r1, r3
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	4b80      	ldr	r3, [pc, #512]	; (80054e0 <generate_waveform+0x580>)
 80052de:	f7fb f98b 	bl	80005f8 <__aeabi_dmul>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4690      	mov	r8, r2
 80052e8:	4699      	mov	r9, r3
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	ee07 3a90 	vmov	s15, r3
 80052f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f4:	ee17 0a90 	vmov	r0, s15
 80052f8:	f7fb f926 	bl	8000548 <__aeabi_f2d>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4640      	mov	r0, r8
 8005302:	4649      	mov	r1, r9
 8005304:	f7fb faa2 	bl	800084c <__aeabi_ddiv>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	ec43 2b17 	vmov	d7, r2, r3
 8005310:	eeb0 0a47 	vmov.f32	s0, s14
 8005314:	eef0 0a67 	vmov.f32	s1, s15
 8005318:	f00a fa62 	bl	800f7e0 <sin>
 800531c:	ec51 0b10 	vmov	r0, r1, d0
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	4b6e      	ldr	r3, [pc, #440]	; (80054e0 <generate_waveform+0x580>)
 8005326:	f7fb fa91 	bl	800084c <__aeabi_ddiv>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4620      	mov	r0, r4
 8005330:	4629      	mov	r1, r5
 8005332:	f7fa ffab 	bl	800028c <__adddf3>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4610      	mov	r0, r2
 800533c:	4619      	mov	r1, r3
 800533e:	f7fb fc1d 	bl	8000b7c <__aeabi_d2f>
 8005342:	4603      	mov	r3, r0
 8005344:	60bb      	str	r3, [r7, #8]
                        harmonic_sample += sin(2.0 * PI * (float)i * 7 / ((float) samples)) / 7;
 8005346:	68b8      	ldr	r0, [r7, #8]
 8005348:	f7fb f8fe 	bl	8000548 <__aeabi_f2d>
 800534c:	4604      	mov	r4, r0
 800534e:	460d      	mov	r5, r1
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800535a:	ee17 0a90 	vmov	r0, s15
 800535e:	f7fb f8f3 	bl	8000548 <__aeabi_f2d>
 8005362:	a35d      	add	r3, pc, #372	; (adr r3, 80054d8 <generate_waveform+0x578>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f7fb f946 	bl	80005f8 <__aeabi_dmul>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	4b5a      	ldr	r3, [pc, #360]	; (80054e4 <generate_waveform+0x584>)
 800537a:	f7fb f93d 	bl	80005f8 <__aeabi_dmul>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4690      	mov	r8, r2
 8005384:	4699      	mov	r9, r3
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	ee07 3a90 	vmov	s15, r3
 800538c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005390:	ee17 0a90 	vmov	r0, s15
 8005394:	f7fb f8d8 	bl	8000548 <__aeabi_f2d>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4640      	mov	r0, r8
 800539e:	4649      	mov	r1, r9
 80053a0:	f7fb fa54 	bl	800084c <__aeabi_ddiv>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	ec43 2b17 	vmov	d7, r2, r3
 80053ac:	eeb0 0a47 	vmov.f32	s0, s14
 80053b0:	eef0 0a67 	vmov.f32	s1, s15
 80053b4:	f00a fa14 	bl	800f7e0 <sin>
 80053b8:	ec51 0b10 	vmov	r0, r1, d0
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	4b48      	ldr	r3, [pc, #288]	; (80054e4 <generate_waveform+0x584>)
 80053c2:	f7fb fa43 	bl	800084c <__aeabi_ddiv>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4620      	mov	r0, r4
 80053cc:	4629      	mov	r1, r5
 80053ce:	f7fa ff5d 	bl	800028c <__adddf3>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4610      	mov	r0, r2
 80053d8:	4619      	mov	r1, r3
 80053da:	f7fb fbcf 	bl	8000b7c <__aeabi_d2f>
 80053de:	4603      	mov	r3, r0
 80053e0:	60bb      	str	r3, [r7, #8]
                        harmonic_sample += sin(2.0 * PI * (float)i * 8 / ((float) samples)) / 8;
 80053e2:	68b8      	ldr	r0, [r7, #8]
 80053e4:	f7fb f8b0 	bl	8000548 <__aeabi_f2d>
 80053e8:	4604      	mov	r4, r0
 80053ea:	460d      	mov	r5, r1
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053f6:	ee17 0a90 	vmov	r0, s15
 80053fa:	f7fb f8a5 	bl	8000548 <__aeabi_f2d>
 80053fe:	a336      	add	r3, pc, #216	; (adr r3, 80054d8 <generate_waveform+0x578>)
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f7fb f8f8 	bl	80005f8 <__aeabi_dmul>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4610      	mov	r0, r2
 800540e:	4619      	mov	r1, r3
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	4b34      	ldr	r3, [pc, #208]	; (80054e8 <generate_waveform+0x588>)
 8005416:	f7fb f8ef 	bl	80005f8 <__aeabi_dmul>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4690      	mov	r8, r2
 8005420:	4699      	mov	r9, r3
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	ee07 3a90 	vmov	s15, r3
 8005428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542c:	ee17 0a90 	vmov	r0, s15
 8005430:	f7fb f88a 	bl	8000548 <__aeabi_f2d>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4640      	mov	r0, r8
 800543a:	4649      	mov	r1, r9
 800543c:	f7fb fa06 	bl	800084c <__aeabi_ddiv>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	ec43 2b17 	vmov	d7, r2, r3
 8005448:	eeb0 0a47 	vmov.f32	s0, s14
 800544c:	eef0 0a67 	vmov.f32	s1, s15
 8005450:	f00a f9c6 	bl	800f7e0 <sin>
 8005454:	ec51 0b10 	vmov	r0, r1, d0
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	4b22      	ldr	r3, [pc, #136]	; (80054e8 <generate_waveform+0x588>)
 800545e:	f7fb f9f5 	bl	800084c <__aeabi_ddiv>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4620      	mov	r0, r4
 8005468:	4629      	mov	r1, r5
 800546a:	f7fa ff0f 	bl	800028c <__adddf3>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4610      	mov	r0, r2
 8005474:	4619      	mov	r1, r3
 8005476:	f7fb fb81 	bl	8000b7c <__aeabi_d2f>
 800547a:	4603      	mov	r3, r0
 800547c:	60bb      	str	r3, [r7, #8]
                        dest->freq_tables[t][i] = (2048 * harmonic_sample);
 800547e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005482:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80054ec <generate_waveform+0x58c>
 8005486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	4413      	add	r3, r2
 800549e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054a2:	ee17 2a90 	vmov	r2, s15
 80054a6:	b212      	sxth	r2, r2
 80054a8:	801a      	strh	r2, [r3, #0]
                for (int i = 0; i < samples; i++) {
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	3301      	adds	r3, #1
 80054ae:	623b      	str	r3, [r7, #32]
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	f63f aec5 	bhi.w	8005244 <generate_waveform+0x2e4>
                }
            }
            break;
 80054ba:	bf00      	nop
    for (int t = 0; t < 12; t++) {
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	3301      	adds	r3, #1
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
 80054c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c4:	2b0b      	cmp	r3, #11
 80054c6:	f77f ad55 	ble.w	8004f74 <generate_waveform+0x14>
        }
    }
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	3738      	adds	r7, #56	; 0x38
 80054d0:	46bd      	mov	sp, r7
 80054d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80054d6:	bf00      	nop
 80054d8:	54442eea 	.word	0x54442eea
 80054dc:	401921fb 	.word	0x401921fb
 80054e0:	40080000 	.word	0x40080000
 80054e4:	401c0000 	.word	0x401c0000
 80054e8:	40200000 	.word	0x40200000
 80054ec:	45000000 	.word	0x45000000

080054f0 <set_output_waveform>:

void set_output_waveform(WaveType wave){
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	71fb      	strb	r3, [r7, #7]

    if(output_wavetype == wave){
 80054fa:	4b22      	ldr	r3, [pc, #136]	; (8005584 <set_output_waveform+0x94>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	79fa      	ldrb	r2, [r7, #7]
 8005500:	429a      	cmp	r2, r3
 8005502:	d038      	beq.n	8005576 <set_output_waveform+0x86>
        return;
    }
    output_wavetype = wave;
 8005504:	4a1f      	ldr	r2, [pc, #124]	; (8005584 <set_output_waveform+0x94>)
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	7013      	strb	r3, [r2, #0]

    for (int t = 0; t < 12; t++) {
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e02e      	b.n	800556e <set_output_waveform+0x7e>
        uint32_t samples =  LUT_freq_sizes[t];
 8005510:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <set_output_waveform+0x98>)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005518:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < samples; i++) {
 800551a:	2300      	movs	r3, #0
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	e01f      	b.n	8005560 <set_output_waveform+0x70>
                output_LUT.freq_tables[t][i] = waveform_LUTs[wave].freq_tables[t][i];
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	491a      	ldr	r1, [pc, #104]	; (800558c <set_output_waveform+0x9c>)
 8005524:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8005528:	fb03 f202 	mul.w	r2, r3, r2
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	4413      	add	r3, r2
 8005530:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	441a      	add	r2, r3
 8005540:	4913      	ldr	r1, [pc, #76]	; (8005590 <set_output_waveform+0xa0>)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	6859      	ldr	r1, [r3, #4]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	440b      	add	r3, r1
 8005554:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005558:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < samples; i++) {
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	3301      	adds	r3, #1
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	429a      	cmp	r2, r3
 8005566:	d8db      	bhi.n	8005520 <set_output_waveform+0x30>
    for (int t = 0; t < 12; t++) {
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3301      	adds	r3, #1
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b0b      	cmp	r3, #11
 8005572:	ddcd      	ble.n	8005510 <set_output_waveform+0x20>
 8005574:	e000      	b.n	8005578 <set_output_waveform+0x88>
        return;
 8005576:	bf00      	nop
        }
    }

}
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	2000007c 	.word	0x2000007c
 8005588:	0801dc08 	.word	0x0801dc08
 800558c:	2000213c 	.word	0x2000213c
 8005590:	200009a0 	.word	0x200009a0

08005594 <display_wave>:

void display_wave(u8g2_t* u8g2, uint16_t x, uint16_t y){
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	807b      	strh	r3, [r7, #2]
 80055a0:	4613      	mov	r3, r2
 80055a2:	803b      	strh	r3, [r7, #0]
    switch (output_wavetype) {
 80055a4:	4b25      	ldr	r3, [pc, #148]	; (800563c <display_wave+0xa8>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d837      	bhi.n	800561c <display_wave+0x88>
 80055ac:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <display_wave+0x20>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	080055c5 	.word	0x080055c5
 80055b8:	080055db 	.word	0x080055db
 80055bc:	080055f1 	.word	0x080055f1
 80055c0:	08005607 	.word	0x08005607
        case SAWTOOTH: {
            u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 80055c4:	491e      	ldr	r1, [pc, #120]	; (8005640 <display_wave+0xac>)
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fc fd9a 	bl	8002100 <u8g2_SetFont>
            u8g2_DrawUTF8(u8g2, x, y, "//");
 80055cc:	883a      	ldrh	r2, [r7, #0]
 80055ce:	8879      	ldrh	r1, [r7, #2]
 80055d0:	4b1c      	ldr	r3, [pc, #112]	; (8005644 <display_wave+0xb0>)
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fc fcf2 	bl	8001fbc <u8g2_DrawUTF8>
            break;
 80055d8:	e02b      	b.n	8005632 <display_wave+0x9e>
        }
        break;
        case SINE: {
            u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 80055da:	4919      	ldr	r1, [pc, #100]	; (8005640 <display_wave+0xac>)
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7fc fd8f 	bl	8002100 <u8g2_SetFont>
            u8g2_DrawUTF8(u8g2, x, y, "◠◡");
 80055e2:	883a      	ldrh	r2, [r7, #0]
 80055e4:	8879      	ldrh	r1, [r7, #2]
 80055e6:	4b18      	ldr	r3, [pc, #96]	; (8005648 <display_wave+0xb4>)
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7fc fce7 	bl	8001fbc <u8g2_DrawUTF8>
        }
        break;
 80055ee:	e020      	b.n	8005632 <display_wave+0x9e>
        case SQUARE: {
            u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 80055f0:	4913      	ldr	r1, [pc, #76]	; (8005640 <display_wave+0xac>)
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fc fd84 	bl	8002100 <u8g2_SetFont>
            u8g2_DrawUTF8(u8g2, x, y, " \u25a0");
 80055f8:	883a      	ldrh	r2, [r7, #0]
 80055fa:	8879      	ldrh	r1, [r7, #2]
 80055fc:	4b13      	ldr	r3, [pc, #76]	; (800564c <display_wave+0xb8>)
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fc fcdc 	bl	8001fbc <u8g2_DrawUTF8>
        }
        break;
 8005604:	e015      	b.n	8005632 <display_wave+0x9e>
        case TRIANGLE: {
            u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005606:	490e      	ldr	r1, [pc, #56]	; (8005640 <display_wave+0xac>)
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7fc fd79 	bl	8002100 <u8g2_SetFont>
            u8g2_DrawUTF8(u8g2, x, y, " \u25b2");
 800560e:	883a      	ldrh	r2, [r7, #0]
 8005610:	8879      	ldrh	r1, [r7, #2]
 8005612:	4b0f      	ldr	r3, [pc, #60]	; (8005650 <display_wave+0xbc>)
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7fc fcd1 	bl	8001fbc <u8g2_DrawUTF8>
        }
        break;
 800561a:	e00a      	b.n	8005632 <display_wave+0x9e>
        default:
        case CLARINET: {
            u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 800561c:	4908      	ldr	r1, [pc, #32]	; (8005640 <display_wave+0xac>)
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fc fd6e 	bl	8002100 <u8g2_SetFont>
            u8g2_DrawUTF8(u8g2, x, y, " \u265b");
 8005624:	883a      	ldrh	r2, [r7, #0]
 8005626:	8879      	ldrh	r1, [r7, #2]
 8005628:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <display_wave+0xc0>)
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fc fcc6 	bl	8001fbc <u8g2_DrawUTF8>
        }
        break;
 8005630:	bf00      	nop
    }
}
 8005632:	bf00      	nop
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	2000007c 	.word	0x2000007c
 8005640:	08010d14 	.word	0x08010d14
 8005644:	08010cd8 	.word	0x08010cd8
 8005648:	08010cdc 	.word	0x08010cdc
 800564c:	08010ce4 	.word	0x08010ce4
 8005650:	08010cec 	.word	0x08010cec
 8005654:	08010cf4 	.word	0x08010cf4

08005658 <synthesize_output>:

inline void synthesize_output(uint16_t keys, uint8_t volume, uint8_t octave, bool first_half){
 8005658:	b490      	push	{r4, r7}
 800565a:	b08c      	sub	sp, #48	; 0x30
 800565c:	af00      	add	r7, sp, #0
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	4611      	mov	r1, r2
 8005664:	461a      	mov	r2, r3
 8005666:	4623      	mov	r3, r4
 8005668:	80fb      	strh	r3, [r7, #6]
 800566a:	4603      	mov	r3, r0
 800566c:	717b      	strb	r3, [r7, #5]
 800566e:	460b      	mov	r3, r1
 8005670:	713b      	strb	r3, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	70fb      	strb	r3, [r7, #3]

    // Wavetables are generated assuming that the step size is 2.
    int8_t step_octave = 1 << (octave - 1);
 8005676:	793b      	ldrb	r3, [r7, #4]
 8005678:	3b01      	subs	r3, #1
 800567a:	2201      	movs	r2, #1
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	75fb      	strb	r3, [r7, #23]
    int sample_begin, sample_end;
    if (first_half) {
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <synthesize_output+0x3a>
        sample_begin = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	62fb      	str	r3, [r7, #44]	; 0x2c
        sample_end = OUTPUT_SAMPLES/2;
 800568c:	23a8      	movs	r3, #168	; 0xa8
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005690:	e004      	b.n	800569c <synthesize_output+0x44>
    } else {
        sample_begin = OUTPUT_SAMPLES/2;
 8005692:	23a8      	movs	r3, #168	; 0xa8
 8005694:	62fb      	str	r3, [r7, #44]	; 0x2c
        sample_end = OUTPUT_SAMPLES;
 8005696:	f240 1351 	movw	r3, #337	; 0x151
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    bool keys_pressed [12];
    for (int k = 0; k < 12; k++) {
 800569c:	2300      	movs	r3, #0
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
 80056a0:	e014      	b.n	80056cc <synthesize_output+0x74>
        keys_pressed[k] = ~keys & ( 1 << (k));
 80056a2:	88fb      	ldrh	r3, [r7, #6]
 80056a4:	43da      	mvns	r2, r3
 80056a6:	2101      	movs	r1, #1
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bf14      	ite	ne
 80056b4:	2301      	movne	r3, #1
 80056b6:	2300      	moveq	r3, #0
 80056b8:	b2d9      	uxtb	r1, r3
 80056ba:	f107 0208 	add.w	r2, r7, #8
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	4413      	add	r3, r2
 80056c2:	460a      	mov	r2, r1
 80056c4:	701a      	strb	r2, [r3, #0]
    for (int k = 0; k < 12; k++) {
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	3301      	adds	r3, #1
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	2b0b      	cmp	r3, #11
 80056d0:	dde7      	ble.n	80056a2 <synthesize_output+0x4a>
    }


    for (int i = sample_begin; i < sample_end; i++) {
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	623b      	str	r3, [r7, #32]
 80056d6:	e04c      	b.n	8005772 <synthesize_output+0x11a>
        int32_t out = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	61fb      	str	r3, [r7, #28]

        for (int t = 0; t < 12; t++){
 80056dc:	2300      	movs	r3, #0
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	e033      	b.n	800574a <synthesize_output+0xf2>

            if (keys_pressed[t]) {
 80056e2:	f107 0208 	add.w	r2, r7, #8
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	4413      	add	r3, r2
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d029      	beq.n	8005744 <synthesize_output+0xec>
                output_LUT_indices[t] = (output_LUT_indices[t] + (step_octave)) % LUT_freq_sizes[t];
 80056f0:	4a25      	ldr	r2, [pc, #148]	; (8005788 <synthesize_output+0x130>)
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056f8:	461a      	mov	r2, r3
 80056fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056fe:	4413      	add	r3, r2
 8005700:	461a      	mov	r2, r3
 8005702:	4922      	ldr	r1, [pc, #136]	; (800578c <synthesize_output+0x134>)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800570a:	fbb2 f1f3 	udiv	r1, r2, r3
 800570e:	fb01 f303 	mul.w	r3, r1, r3
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	b299      	uxth	r1, r3
 8005716:	4a1c      	ldr	r2, [pc, #112]	; (8005788 <synthesize_output+0x130>)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                out += output_LUT.freq_tables[t][output_LUT_indices[t]];
 800571e:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <synthesize_output+0x138>)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	4916      	ldr	r1, [pc, #88]	; (8005788 <synthesize_output+0x130>)
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	4413      	add	r3, r2
 8005738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800573c:	461a      	mov	r2, r3
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	61fb      	str	r3, [r7, #28]
        for (int t = 0; t < 12; t++){
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	3301      	adds	r3, #1
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b0b      	cmp	r3, #11
 800574e:	ddc8      	ble.n	80056e2 <synthesize_output+0x8a>
            }
        }
        output_wave[i] = ((uint16_t)(out >> (12 - volume))) + 2048; // VOLUME to be added here
 8005750:	797b      	ldrb	r3, [r7, #5]
 8005752:	f1c3 030c 	rsb	r3, r3, #12
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	fa42 f303 	asr.w	r3, r2, r3
 800575c:	b29b      	uxth	r3, r3
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	b299      	uxth	r1, r3
 8005764:	4a0b      	ldr	r2, [pc, #44]	; (8005794 <synthesize_output+0x13c>)
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = sample_begin; i < sample_end; i++) {
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	3301      	adds	r3, #1
 8005770:	623b      	str	r3, [r7, #32]
 8005772:	6a3a      	ldr	r2, [r7, #32]
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	429a      	cmp	r2, r3
 8005778:	dbae      	blt.n	80056d8 <synthesize_output+0x80>
    }


    //HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
    //HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
}
 800577a:	bf00      	nop
 800577c:	bf00      	nop
 800577e:	3730      	adds	r7, #48	; 0x30
 8005780:	46bd      	mov	sp, r7
 8005782:	bc90      	pop	{r4, r7}
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	20002124 	.word	0x20002124
 800578c:	0801dc08 	.word	0x0801dc08
 8005790:	200009a0 	.word	0x200009a0
 8005794:	200006fc 	.word	0x200006fc

08005798 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800579c:	f7ff fb76 	bl	8004e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80057a0:	480c      	ldr	r0, [pc, #48]	; (80057d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80057a2:	490d      	ldr	r1, [pc, #52]	; (80057d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80057a4:	4a0d      	ldr	r2, [pc, #52]	; (80057dc <LoopForever+0xe>)
  movs r3, #0
 80057a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057a8:	e002      	b.n	80057b0 <LoopCopyDataInit>

080057aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057ae:	3304      	adds	r3, #4

080057b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057b4:	d3f9      	bcc.n	80057aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057b6:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80057b8:	4c0a      	ldr	r4, [pc, #40]	; (80057e4 <LoopForever+0x16>)
  movs r3, #0
 80057ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057bc:	e001      	b.n	80057c2 <LoopFillZerobss>

080057be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057c0:	3204      	adds	r2, #4

080057c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057c4:	d3fb      	bcc.n	80057be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80057c6:	f009 fb07 	bl	800edd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80057ca:	f7fe fa01 	bl	8003bd0 <main>

080057ce <LoopForever>:

LoopForever:
    b LoopForever
 80057ce:	e7fe      	b.n	80057ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80057d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80057d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057d8:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80057dc:	0801deb8 	.word	0x0801deb8
  ldr r2, =_sbss
 80057e0:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80057e4:	2000c1f4 	.word	0x2000c1f4

080057e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80057e8:	e7fe      	b.n	80057e8 <ADC1_IRQHandler>

080057ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b082      	sub	sp, #8
 80057ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057f4:	2003      	movs	r0, #3
 80057f6:	f001 fe42 	bl	800747e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057fa:	200f      	movs	r0, #15
 80057fc:	f7ff fa56 	bl	8004cac <HAL_InitTick>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	71fb      	strb	r3, [r7, #7]
 800580a:	e001      	b.n	8005810 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800580c:	f7fe ffd8 	bl	80047c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005810:	79fb      	ldrb	r3, [r7, #7]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005820:	4b06      	ldr	r3, [pc, #24]	; (800583c <HAL_IncTick+0x20>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	4b06      	ldr	r3, [pc, #24]	; (8005840 <HAL_IncTick+0x24>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4413      	add	r3, r2
 800582c:	4a04      	ldr	r2, [pc, #16]	; (8005840 <HAL_IncTick+0x24>)
 800582e:	6013      	str	r3, [r2, #0]
}
 8005830:	bf00      	nop
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	20000084 	.word	0x20000084
 8005840:	200096d0 	.word	0x200096d0

08005844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  return uwTick;
 8005848:	4b03      	ldr	r3, [pc, #12]	; (8005858 <HAL_GetTick+0x14>)
 800584a:	681b      	ldr	r3, [r3, #0]
}
 800584c:	4618      	mov	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	200096d0 	.word	0x200096d0

0800585c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005864:	f7ff ffee 	bl	8005844 <HAL_GetTick>
 8005868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005874:	d005      	beq.n	8005882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005876:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <HAL_Delay+0x44>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005882:	bf00      	nop
 8005884:	f7ff ffde 	bl	8005844 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	429a      	cmp	r2, r3
 8005892:	d8f7      	bhi.n	8005884 <HAL_Delay+0x28>
  {
  }
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000084 	.word	0x20000084

080058a4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80058a8:	4b03      	ldr	r3, [pc, #12]	; (80058b8 <HAL_GetUIDw0+0x14>)
 80058aa:	681b      	ldr	r3, [r3, #0]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	1fff7590 	.word	0x1fff7590

080058bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	609a      	str	r2, [r3, #8]
}
 80058d6:	bf00      	nop
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	609a      	str	r2, [r3, #8]
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3360      	adds	r3, #96	; 0x60
 8005936:	461a      	mov	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b08      	ldr	r3, [pc, #32]	; (8005968 <LL_ADC_SetOffset+0x44>)
 8005946:	4013      	ands	r3, r2
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	4313      	orrs	r3, r2
 8005954:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800595c:	bf00      	nop
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	03fff000 	.word	0x03fff000

0800596c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3360      	adds	r3, #96	; 0x60
 800597a:	461a      	mov	r2, r3
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3360      	adds	r3, #96	; 0x60
 80059a8:	461a      	mov	r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	431a      	orrs	r2, r3
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80059c2:	bf00      	nop
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b087      	sub	sp, #28
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3330      	adds	r3, #48	; 0x30
 80059de:	461a      	mov	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	0a1b      	lsrs	r3, r3, #8
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	f003 030c 	and.w	r3, r3, #12
 80059ea:	4413      	add	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f003 031f 	and.w	r3, r3, #31
 80059f8:	211f      	movs	r1, #31
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	401a      	ands	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	0e9b      	lsrs	r3, r3, #26
 8005a06:	f003 011f 	and.w	r1, r3, #31
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	fa01 f303 	lsl.w	r3, r1, r3
 8005a14:	431a      	orrs	r2, r3
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b087      	sub	sp, #28
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3314      	adds	r3, #20
 8005a36:	461a      	mov	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	0e5b      	lsrs	r3, r3, #25
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	4413      	add	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	0d1b      	lsrs	r3, r3, #20
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	2107      	movs	r1, #7
 8005a54:	fa01 f303 	lsl.w	r3, r1, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	401a      	ands	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	0d1b      	lsrs	r3, r3, #20
 8005a60:	f003 031f 	and.w	r3, r3, #31
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005a70:	bf00      	nop
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a94:	43db      	mvns	r3, r3
 8005a96:	401a      	ands	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f003 0318 	and.w	r3, r3, #24
 8005a9e:	4908      	ldr	r1, [pc, #32]	; (8005ac0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005aa0:	40d9      	lsrs	r1, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	400b      	ands	r3, r1
 8005aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	0007ffff 	.word	0x0007ffff

08005ac4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005ad4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6093      	str	r3, [r2, #8]
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005afc:	d101      	bne.n	8005b02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005afe:	2301      	movs	r3, #1
 8005b00:	e000      	b.n	8005b04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005b20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b4c:	d101      	bne.n	8005b52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <LL_ADC_IsEnabled+0x18>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <LL_ADC_IsEnabled+0x1a>
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d101      	bne.n	8005b9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d101      	bne.n	8005bc4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e12c      	b.n	8005e48 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7fe fe07 	bl	8004810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff ff67 	bl	8005ae8 <LL_ADC_IsDeepPowerDownEnabled>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d004      	beq.n	8005c2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff ff4d 	bl	8005ac4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff ff82 	bl	8005b38 <LL_ADC_IsInternalRegulatorEnabled>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d115      	bne.n	8005c66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7ff ff66 	bl	8005b10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c44:	4b82      	ldr	r3, [pc, #520]	; (8005e50 <HAL_ADC_Init+0x27c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	099b      	lsrs	r3, r3, #6
 8005c4a:	4a82      	ldr	r2, [pc, #520]	; (8005e54 <HAL_ADC_Init+0x280>)
 8005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c50:	099b      	lsrs	r3, r3, #6
 8005c52:	3301      	adds	r3, #1
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c58:	e002      	b.n	8005c60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1f9      	bne.n	8005c5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff ff64 	bl	8005b38 <LL_ADC_IsInternalRegulatorEnabled>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10d      	bne.n	8005c92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7a:	f043 0210 	orr.w	r2, r3, #16
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c86:	f043 0201 	orr.w	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff ff75 	bl	8005b86 <LL_ADC_REG_IsConversionOngoing>
 8005c9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f040 80c5 	bne.w	8005e36 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f040 80c1 	bne.w	8005e36 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005cbc:	f043 0202 	orr.w	r2, r3, #2
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff ff49 	bl	8005b60 <LL_ADC_IsEnabled>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10b      	bne.n	8005cec <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005cd4:	4860      	ldr	r0, [pc, #384]	; (8005e58 <HAL_ADC_Init+0x284>)
 8005cd6:	f7ff ff43 	bl	8005b60 <LL_ADC_IsEnabled>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	485d      	ldr	r0, [pc, #372]	; (8005e5c <HAL_ADC_Init+0x288>)
 8005ce8:	f7ff fde8 	bl	80058bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	7e5b      	ldrb	r3, [r3, #25]
 8005cf0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cf6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005cfc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005d02:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d0a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d106      	bne.n	8005d28 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	045b      	lsls	r3, r3, #17
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d009      	beq.n	8005d44 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	4b45      	ldr	r3, [pc, #276]	; (8005e60 <HAL_ADC_Init+0x28c>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6812      	ldr	r2, [r2, #0]
 8005d52:	69b9      	ldr	r1, [r7, #24]
 8005d54:	430b      	orrs	r3, r1
 8005d56:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff ff12 	bl	8005b86 <LL_ADC_REG_IsConversionOngoing>
 8005d62:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff ff1f 	bl	8005bac <LL_ADC_INJ_IsConversionOngoing>
 8005d6e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d13d      	bne.n	8005df2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d13a      	bne.n	8005df2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d80:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d88:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d98:	f023 0302 	bic.w	r3, r3, #2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	69b9      	ldr	r1, [r7, #24]
 8005da2:	430b      	orrs	r3, r1
 8005da4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d118      	bne.n	8005de2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005dba:	f023 0304 	bic.w	r3, r3, #4
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005dc6:	4311      	orrs	r1, r2
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005dcc:	4311      	orrs	r1, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	611a      	str	r2, [r3, #16]
 8005de0:	e007      	b.n	8005df2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0201 	bic.w	r2, r2, #1
 8005df0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d10c      	bne.n	8005e14 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e00:	f023 010f 	bic.w	r1, r3, #15
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	1e5a      	subs	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	631a      	str	r2, [r3, #48]	; 0x30
 8005e12:	e007      	b.n	8005e24 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 020f 	bic.w	r2, r2, #15
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	f023 0303 	bic.w	r3, r3, #3
 8005e2c:	f043 0201 	orr.w	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	655a      	str	r2, [r3, #84]	; 0x54
 8005e34:	e007      	b.n	8005e46 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	f043 0210 	orr.w	r2, r3, #16
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e46:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3720      	adds	r7, #32
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000078 	.word	0x20000078
 8005e54:	053e2d63 	.word	0x053e2d63
 8005e58:	50040000 	.word	0x50040000
 8005e5c:	50040300 	.word	0x50040300
 8005e60:	fff0c007 	.word	0xfff0c007

08005e64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b0b6      	sub	sp, #216	; 0xd8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_ADC_ConfigChannel+0x22>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e3b9      	b.n	80065fa <HAL_ADC_ConfigChannel+0x796>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff fe77 	bl	8005b86 <LL_ADC_REG_IsConversionOngoing>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f040 839e 	bne.w	80065dc <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2b05      	cmp	r3, #5
 8005ea6:	d824      	bhi.n	8005ef2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	3b02      	subs	r3, #2
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d81b      	bhi.n	8005eea <HAL_ADC_ConfigChannel+0x86>
 8005eb2:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <HAL_ADC_ConfigChannel+0x54>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005ec9 	.word	0x08005ec9
 8005ebc:	08005ed1 	.word	0x08005ed1
 8005ec0:	08005ed9 	.word	0x08005ed9
 8005ec4:	08005ee1 	.word	0x08005ee1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	220c      	movs	r2, #12
 8005ecc:	605a      	str	r2, [r3, #4]
          break;
 8005ece:	e011      	b.n	8005ef4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2212      	movs	r2, #18
 8005ed4:	605a      	str	r2, [r3, #4]
          break;
 8005ed6:	e00d      	b.n	8005ef4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2218      	movs	r2, #24
 8005edc:	605a      	str	r2, [r3, #4]
          break;
 8005ede:	e009      	b.n	8005ef4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ee6:	605a      	str	r2, [r3, #4]
          break;
 8005ee8:	e004      	b.n	8005ef4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2206      	movs	r2, #6
 8005eee:	605a      	str	r2, [r3, #4]
          break;
 8005ef0:	e000      	b.n	8005ef4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005ef2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	6859      	ldr	r1, [r3, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	f7ff fd64 	bl	80059ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff fe3b 	bl	8005b86 <LL_ADC_REG_IsConversionOngoing>
 8005f10:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff fe47 	bl	8005bac <LL_ADC_INJ_IsConversionOngoing>
 8005f1e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f040 81a6 	bne.w	8006278 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f040 81a1 	bne.w	8006278 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6819      	ldr	r1, [r3, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f7ff fd6f 	bl	8005a26 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	695a      	ldr	r2, [r3, #20]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	08db      	lsrs	r3, r3, #3
 8005f54:	f003 0303 	and.w	r3, r3, #3
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d00a      	beq.n	8005f80 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6919      	ldr	r1, [r3, #16]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f7a:	f7ff fcd3 	bl	8005924 <LL_ADC_SetOffset>
 8005f7e:	e17b      	b.n	8006278 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2100      	movs	r1, #0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fcf0 	bl	800596c <LL_ADC_GetOffsetChannel>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <HAL_ADC_ConfigChannel+0x148>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff fce5 	bl	800596c <LL_ADC_GetOffsetChannel>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	0e9b      	lsrs	r3, r3, #26
 8005fa6:	f003 021f 	and.w	r2, r3, #31
 8005faa:	e01e      	b.n	8005fea <HAL_ADC_ConfigChannel+0x186>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff fcda 	bl	800596c <LL_ADC_GetOffsetChannel>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fc2:	fa93 f3a3 	rbit	r3, r3
 8005fc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005fca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005fd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8005fda:	2320      	movs	r3, #32
 8005fdc:	e004      	b.n	8005fe8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8005fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fe2:	fab3 f383 	clz	r3, r3
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d105      	bne.n	8006002 <HAL_ADC_ConfigChannel+0x19e>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	0e9b      	lsrs	r3, r3, #26
 8005ffc:	f003 031f 	and.w	r3, r3, #31
 8006000:	e018      	b.n	8006034 <HAL_ADC_ConfigChannel+0x1d0>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800600e:	fa93 f3a3 	rbit	r3, r3
 8006012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800601a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800601e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8006026:	2320      	movs	r3, #32
 8006028:	e004      	b.n	8006034 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800602a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800602e:	fab3 f383 	clz	r3, r3
 8006032:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006034:	429a      	cmp	r2, r3
 8006036:	d106      	bne.n	8006046 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2200      	movs	r2, #0
 800603e:	2100      	movs	r1, #0
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff fca9 	bl	8005998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2101      	movs	r1, #1
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff fc8d 	bl	800596c <LL_ADC_GetOffsetChannel>
 8006052:	4603      	mov	r3, r0
 8006054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <HAL_ADC_ConfigChannel+0x20e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2101      	movs	r1, #1
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff fc82 	bl	800596c <LL_ADC_GetOffsetChannel>
 8006068:	4603      	mov	r3, r0
 800606a:	0e9b      	lsrs	r3, r3, #26
 800606c:	f003 021f 	and.w	r2, r3, #31
 8006070:	e01e      	b.n	80060b0 <HAL_ADC_ConfigChannel+0x24c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2101      	movs	r1, #1
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff fc77 	bl	800596c <LL_ADC_GetOffsetChannel>
 800607e:	4603      	mov	r3, r0
 8006080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006084:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006088:	fa93 f3a3 	rbit	r3, r3
 800608c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006090:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80060a0:	2320      	movs	r3, #32
 80060a2:	e004      	b.n	80060ae <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80060a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060a8:	fab3 f383 	clz	r3, r3
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d105      	bne.n	80060c8 <HAL_ADC_ConfigChannel+0x264>
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	0e9b      	lsrs	r3, r3, #26
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	e018      	b.n	80060fa <HAL_ADC_ConfigChannel+0x296>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060d4:	fa93 f3a3 	rbit	r3, r3
 80060d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80060dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80060e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80060ec:	2320      	movs	r3, #32
 80060ee:	e004      	b.n	80060fa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80060f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060f4:	fab3 f383 	clz	r3, r3
 80060f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d106      	bne.n	800610c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2200      	movs	r2, #0
 8006104:	2101      	movs	r1, #1
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fc46 	bl	8005998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2102      	movs	r1, #2
 8006112:	4618      	mov	r0, r3
 8006114:	f7ff fc2a 	bl	800596c <LL_ADC_GetOffsetChannel>
 8006118:	4603      	mov	r3, r0
 800611a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x2d4>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2102      	movs	r1, #2
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff fc1f 	bl	800596c <LL_ADC_GetOffsetChannel>
 800612e:	4603      	mov	r3, r0
 8006130:	0e9b      	lsrs	r3, r3, #26
 8006132:	f003 021f 	and.w	r2, r3, #31
 8006136:	e01e      	b.n	8006176 <HAL_ADC_ConfigChannel+0x312>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2102      	movs	r1, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fc14 	bl	800596c <LL_ADC_GetOffsetChannel>
 8006144:	4603      	mov	r3, r0
 8006146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800614e:	fa93 f3a3 	rbit	r3, r3
 8006152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006156:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800615a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800615e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8006166:	2320      	movs	r3, #32
 8006168:	e004      	b.n	8006174 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800616a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800616e:	fab3 f383 	clz	r3, r3
 8006172:	b2db      	uxtb	r3, r3
 8006174:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800617e:	2b00      	cmp	r3, #0
 8006180:	d105      	bne.n	800618e <HAL_ADC_ConfigChannel+0x32a>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	0e9b      	lsrs	r3, r3, #26
 8006188:	f003 031f 	and.w	r3, r3, #31
 800618c:	e016      	b.n	80061bc <HAL_ADC_ConfigChannel+0x358>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006196:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800619a:	fa93 f3a3 	rbit	r3, r3
 800619e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80061a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80061a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80061ae:	2320      	movs	r3, #32
 80061b0:	e004      	b.n	80061bc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80061b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061b6:	fab3 f383 	clz	r3, r3
 80061ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80061bc:	429a      	cmp	r2, r3
 80061be:	d106      	bne.n	80061ce <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2200      	movs	r2, #0
 80061c6:	2102      	movs	r1, #2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff fbe5 	bl	8005998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2103      	movs	r1, #3
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7ff fbc9 	bl	800596c <LL_ADC_GetOffsetChannel>
 80061da:	4603      	mov	r3, r0
 80061dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10a      	bne.n	80061fa <HAL_ADC_ConfigChannel+0x396>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2103      	movs	r1, #3
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff fbbe 	bl	800596c <LL_ADC_GetOffsetChannel>
 80061f0:	4603      	mov	r3, r0
 80061f2:	0e9b      	lsrs	r3, r3, #26
 80061f4:	f003 021f 	and.w	r2, r3, #31
 80061f8:	e017      	b.n	800622a <HAL_ADC_ConfigChannel+0x3c6>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2103      	movs	r1, #3
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff fbb3 	bl	800596c <LL_ADC_GetOffsetChannel>
 8006206:	4603      	mov	r3, r0
 8006208:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800620c:	fa93 f3a3 	rbit	r3, r3
 8006210:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006214:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800621c:	2320      	movs	r3, #32
 800621e:	e003      	b.n	8006228 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8006220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006222:	fab3 f383 	clz	r3, r3
 8006226:	b2db      	uxtb	r3, r3
 8006228:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006232:	2b00      	cmp	r3, #0
 8006234:	d105      	bne.n	8006242 <HAL_ADC_ConfigChannel+0x3de>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	0e9b      	lsrs	r3, r3, #26
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	e011      	b.n	8006266 <HAL_ADC_ConfigChannel+0x402>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800624a:	fa93 f3a3 	rbit	r3, r3
 800624e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006252:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800625a:	2320      	movs	r3, #32
 800625c:	e003      	b.n	8006266 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800625e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006260:	fab3 f383 	clz	r3, r3
 8006264:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006266:	429a      	cmp	r2, r3
 8006268:	d106      	bne.n	8006278 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2200      	movs	r2, #0
 8006270:	2103      	movs	r1, #3
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff fb90 	bl	8005998 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff fc6f 	bl	8005b60 <LL_ADC_IsEnabled>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	f040 813f 	bne.w	8006508 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6819      	ldr	r1, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	461a      	mov	r2, r3
 8006298:	f7ff fbf0 	bl	8005a7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	4a8e      	ldr	r2, [pc, #568]	; (80064dc <HAL_ADC_ConfigChannel+0x678>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	f040 8130 	bne.w	8006508 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10b      	bne.n	80062d0 <HAL_ADC_ConfigChannel+0x46c>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	0e9b      	lsrs	r3, r3, #26
 80062be:	3301      	adds	r3, #1
 80062c0:	f003 031f 	and.w	r3, r3, #31
 80062c4:	2b09      	cmp	r3, #9
 80062c6:	bf94      	ite	ls
 80062c8:	2301      	movls	r3, #1
 80062ca:	2300      	movhi	r3, #0
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	e019      	b.n	8006304 <HAL_ADC_ConfigChannel+0x4a0>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062d8:	fa93 f3a3 	rbit	r3, r3
 80062dc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80062de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80062e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80062e8:	2320      	movs	r3, #32
 80062ea:	e003      	b.n	80062f4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80062ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062ee:	fab3 f383 	clz	r3, r3
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	3301      	adds	r3, #1
 80062f6:	f003 031f 	and.w	r3, r3, #31
 80062fa:	2b09      	cmp	r3, #9
 80062fc:	bf94      	ite	ls
 80062fe:	2301      	movls	r3, #1
 8006300:	2300      	movhi	r3, #0
 8006302:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006304:	2b00      	cmp	r3, #0
 8006306:	d079      	beq.n	80063fc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006310:	2b00      	cmp	r3, #0
 8006312:	d107      	bne.n	8006324 <HAL_ADC_ConfigChannel+0x4c0>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	0e9b      	lsrs	r3, r3, #26
 800631a:	3301      	adds	r3, #1
 800631c:	069b      	lsls	r3, r3, #26
 800631e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006322:	e015      	b.n	8006350 <HAL_ADC_ConfigChannel+0x4ec>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800632c:	fa93 f3a3 	rbit	r3, r3
 8006330:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006334:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800633c:	2320      	movs	r3, #32
 800633e:	e003      	b.n	8006348 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8006340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006342:	fab3 f383 	clz	r3, r3
 8006346:	b2db      	uxtb	r3, r3
 8006348:	3301      	adds	r3, #1
 800634a:	069b      	lsls	r3, r3, #26
 800634c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006358:	2b00      	cmp	r3, #0
 800635a:	d109      	bne.n	8006370 <HAL_ADC_ConfigChannel+0x50c>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	0e9b      	lsrs	r3, r3, #26
 8006362:	3301      	adds	r3, #1
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	2101      	movs	r1, #1
 800636a:	fa01 f303 	lsl.w	r3, r1, r3
 800636e:	e017      	b.n	80063a0 <HAL_ADC_ConfigChannel+0x53c>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006378:	fa93 f3a3 	rbit	r3, r3
 800637c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800637e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006380:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8006388:	2320      	movs	r3, #32
 800638a:	e003      	b.n	8006394 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800638c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800638e:	fab3 f383 	clz	r3, r3
 8006392:	b2db      	uxtb	r3, r3
 8006394:	3301      	adds	r3, #1
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2101      	movs	r1, #1
 800639c:	fa01 f303 	lsl.w	r3, r1, r3
 80063a0:	ea42 0103 	orr.w	r1, r2, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <HAL_ADC_ConfigChannel+0x562>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	0e9b      	lsrs	r3, r3, #26
 80063b6:	3301      	adds	r3, #1
 80063b8:	f003 021f 	and.w	r2, r3, #31
 80063bc:	4613      	mov	r3, r2
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	4413      	add	r3, r2
 80063c2:	051b      	lsls	r3, r3, #20
 80063c4:	e018      	b.n	80063f8 <HAL_ADC_ConfigChannel+0x594>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ce:	fa93 f3a3 	rbit	r3, r3
 80063d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80063d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80063d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80063de:	2320      	movs	r3, #32
 80063e0:	e003      	b.n	80063ea <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80063e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e4:	fab3 f383 	clz	r3, r3
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	3301      	adds	r3, #1
 80063ec:	f003 021f 	and.w	r2, r3, #31
 80063f0:	4613      	mov	r3, r2
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	4413      	add	r3, r2
 80063f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063f8:	430b      	orrs	r3, r1
 80063fa:	e080      	b.n	80064fe <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006404:	2b00      	cmp	r3, #0
 8006406:	d107      	bne.n	8006418 <HAL_ADC_ConfigChannel+0x5b4>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	0e9b      	lsrs	r3, r3, #26
 800640e:	3301      	adds	r3, #1
 8006410:	069b      	lsls	r3, r3, #26
 8006412:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006416:	e015      	b.n	8006444 <HAL_ADC_ConfigChannel+0x5e0>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	fa93 f3a3 	rbit	r3, r3
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8006430:	2320      	movs	r3, #32
 8006432:	e003      	b.n	800643c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	fab3 f383 	clz	r3, r3
 800643a:	b2db      	uxtb	r3, r3
 800643c:	3301      	adds	r3, #1
 800643e:	069b      	lsls	r3, r3, #26
 8006440:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800644c:	2b00      	cmp	r3, #0
 800644e:	d109      	bne.n	8006464 <HAL_ADC_ConfigChannel+0x600>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	0e9b      	lsrs	r3, r3, #26
 8006456:	3301      	adds	r3, #1
 8006458:	f003 031f 	and.w	r3, r3, #31
 800645c:	2101      	movs	r1, #1
 800645e:	fa01 f303 	lsl.w	r3, r1, r3
 8006462:	e017      	b.n	8006494 <HAL_ADC_ConfigChannel+0x630>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	fa93 f3a3 	rbit	r3, r3
 8006470:	61fb      	str	r3, [r7, #28]
  return result;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800647c:	2320      	movs	r3, #32
 800647e:	e003      	b.n	8006488 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	fab3 f383 	clz	r3, r3
 8006486:	b2db      	uxtb	r3, r3
 8006488:	3301      	adds	r3, #1
 800648a:	f003 031f 	and.w	r3, r3, #31
 800648e:	2101      	movs	r1, #1
 8006490:	fa01 f303 	lsl.w	r3, r1, r3
 8006494:	ea42 0103 	orr.w	r1, r2, r3
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10d      	bne.n	80064c0 <HAL_ADC_ConfigChannel+0x65c>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	0e9b      	lsrs	r3, r3, #26
 80064aa:	3301      	adds	r3, #1
 80064ac:	f003 021f 	and.w	r2, r3, #31
 80064b0:	4613      	mov	r3, r2
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4413      	add	r3, r2
 80064b6:	3b1e      	subs	r3, #30
 80064b8:	051b      	lsls	r3, r3, #20
 80064ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064be:	e01d      	b.n	80064fc <HAL_ADC_ConfigChannel+0x698>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	fa93 f3a3 	rbit	r3, r3
 80064cc:	613b      	str	r3, [r7, #16]
  return result;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d103      	bne.n	80064e0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80064d8:	2320      	movs	r3, #32
 80064da:	e005      	b.n	80064e8 <HAL_ADC_ConfigChannel+0x684>
 80064dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	fab3 f383 	clz	r3, r3
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	3301      	adds	r3, #1
 80064ea:	f003 021f 	and.w	r2, r3, #31
 80064ee:	4613      	mov	r3, r2
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	4413      	add	r3, r2
 80064f4:	3b1e      	subs	r3, #30
 80064f6:	051b      	lsls	r3, r3, #20
 80064f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064fc:	430b      	orrs	r3, r1
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	6892      	ldr	r2, [r2, #8]
 8006502:	4619      	mov	r1, r3
 8006504:	f7ff fa8f 	bl	8005a26 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b3d      	ldr	r3, [pc, #244]	; (8006604 <HAL_ADC_ConfigChannel+0x7a0>)
 800650e:	4013      	ands	r3, r2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d06c      	beq.n	80065ee <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006514:	483c      	ldr	r0, [pc, #240]	; (8006608 <HAL_ADC_ConfigChannel+0x7a4>)
 8006516:	f7ff f9f7 	bl	8005908 <LL_ADC_GetCommonPathInternalCh>
 800651a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a3a      	ldr	r2, [pc, #232]	; (800660c <HAL_ADC_ConfigChannel+0x7a8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d127      	bne.n	8006578 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800652c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d121      	bne.n	8006578 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a35      	ldr	r2, [pc, #212]	; (8006610 <HAL_ADC_ConfigChannel+0x7ac>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d157      	bne.n	80065ee <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800653e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006542:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006546:	4619      	mov	r1, r3
 8006548:	482f      	ldr	r0, [pc, #188]	; (8006608 <HAL_ADC_ConfigChannel+0x7a4>)
 800654a:	f7ff f9ca 	bl	80058e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800654e:	4b31      	ldr	r3, [pc, #196]	; (8006614 <HAL_ADC_ConfigChannel+0x7b0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	099b      	lsrs	r3, r3, #6
 8006554:	4a30      	ldr	r2, [pc, #192]	; (8006618 <HAL_ADC_ConfigChannel+0x7b4>)
 8006556:	fba2 2303 	umull	r2, r3, r2, r3
 800655a:	099b      	lsrs	r3, r3, #6
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	4613      	mov	r3, r2
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006568:	e002      	b.n	8006570 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3b01      	subs	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1f9      	bne.n	800656a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006576:	e03a      	b.n	80065ee <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a27      	ldr	r2, [pc, #156]	; (800661c <HAL_ADC_ConfigChannel+0x7b8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d113      	bne.n	80065aa <HAL_ADC_ConfigChannel+0x746>
 8006582:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10d      	bne.n	80065aa <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1f      	ldr	r2, [pc, #124]	; (8006610 <HAL_ADC_ConfigChannel+0x7ac>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d12a      	bne.n	80065ee <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800659c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065a0:	4619      	mov	r1, r3
 80065a2:	4819      	ldr	r0, [pc, #100]	; (8006608 <HAL_ADC_ConfigChannel+0x7a4>)
 80065a4:	f7ff f99d 	bl	80058e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065a8:	e021      	b.n	80065ee <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1c      	ldr	r2, [pc, #112]	; (8006620 <HAL_ADC_ConfigChannel+0x7bc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d11c      	bne.n	80065ee <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80065b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d116      	bne.n	80065ee <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a12      	ldr	r2, [pc, #72]	; (8006610 <HAL_ADC_ConfigChannel+0x7ac>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d111      	bne.n	80065ee <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065d2:	4619      	mov	r1, r3
 80065d4:	480c      	ldr	r0, [pc, #48]	; (8006608 <HAL_ADC_ConfigChannel+0x7a4>)
 80065d6:	f7ff f984 	bl	80058e2 <LL_ADC_SetCommonPathInternalCh>
 80065da:	e008      	b.n	80065ee <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e0:	f043 0220 	orr.w	r2, r3, #32
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80065f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	37d8      	adds	r7, #216	; 0xd8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	80080000 	.word	0x80080000
 8006608:	50040300 	.word	0x50040300
 800660c:	c7520000 	.word	0xc7520000
 8006610:	50040000 	.word	0x50040000
 8006614:	20000078 	.word	0x20000078
 8006618:	053e2d63 	.word	0x053e2d63
 800661c:	cb840000 	.word	0xcb840000
 8006620:	80000001 	.word	0x80000001

08006624 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e0ed      	b.n	8006812 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d102      	bne.n	8006648 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fe f948 	bl	80048d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0201 	orr.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006658:	f7ff f8f4 	bl	8005844 <HAL_GetTick>
 800665c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800665e:	e012      	b.n	8006686 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006660:	f7ff f8f0 	bl	8005844 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b0a      	cmp	r3, #10
 800666c:	d90b      	bls.n	8006686 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2205      	movs	r2, #5
 800667e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e0c5      	b.n	8006812 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0e5      	beq.n	8006660 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0202 	bic.w	r2, r2, #2
 80066a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066a4:	f7ff f8ce 	bl	8005844 <HAL_GetTick>
 80066a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80066aa:	e012      	b.n	80066d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80066ac:	f7ff f8ca 	bl	8005844 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b0a      	cmp	r3, #10
 80066b8:	d90b      	bls.n	80066d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2205      	movs	r2, #5
 80066ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e09f      	b.n	8006812 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e5      	bne.n	80066ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	7e1b      	ldrb	r3, [r3, #24]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d108      	bne.n	80066fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	e007      	b.n	800670a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006708:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	7e5b      	ldrb	r3, [r3, #25]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d108      	bne.n	8006724 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	e007      	b.n	8006734 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006732:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	7e9b      	ldrb	r3, [r3, #26]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d108      	bne.n	800674e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0220 	orr.w	r2, r2, #32
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	e007      	b.n	800675e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0220 	bic.w	r2, r2, #32
 800675c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	7edb      	ldrb	r3, [r3, #27]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d108      	bne.n	8006778 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0210 	bic.w	r2, r2, #16
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e007      	b.n	8006788 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0210 	orr.w	r2, r2, #16
 8006786:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	7f1b      	ldrb	r3, [r3, #28]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d108      	bne.n	80067a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0208 	orr.w	r2, r2, #8
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	e007      	b.n	80067b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0208 	bic.w	r2, r2, #8
 80067b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7f5b      	ldrb	r3, [r3, #29]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d108      	bne.n	80067cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f042 0204 	orr.w	r2, r2, #4
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e007      	b.n	80067dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0204 	bic.w	r2, r2, #4
 80067da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	431a      	orrs	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	ea42 0103 	orr.w	r1, r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	1e5a      	subs	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800681a:	b480      	push	{r7}
 800681c:	b087      	sub	sp, #28
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006830:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006832:	7cfb      	ldrb	r3, [r7, #19]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d003      	beq.n	8006840 <HAL_CAN_ConfigFilter+0x26>
 8006838:	7cfb      	ldrb	r3, [r7, #19]
 800683a:	2b02      	cmp	r3, #2
 800683c:	f040 80aa 	bne.w	8006994 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006846:	f043 0201 	orr.w	r2, r3, #1
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	f003 031f 	and.w	r3, r3, #31
 8006858:	2201      	movs	r2, #1
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	43db      	mvns	r3, r3
 800686a:	401a      	ands	r2, r3
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d123      	bne.n	80068c2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	43db      	mvns	r3, r3
 8006884:	401a      	ands	r2, r3
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800689c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	3248      	adds	r2, #72	; 0x48
 80068a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80068b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80068b8:	6979      	ldr	r1, [r7, #20]
 80068ba:	3348      	adds	r3, #72	; 0x48
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	440b      	add	r3, r1
 80068c0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d122      	bne.n	8006910 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	431a      	orrs	r2, r3
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80068ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	3248      	adds	r2, #72	; 0x48
 80068f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006904:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006906:	6979      	ldr	r1, [r7, #20]
 8006908:	3348      	adds	r3, #72	; 0x48
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	440b      	add	r3, r1
 800690e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d109      	bne.n	800692c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	43db      	mvns	r3, r3
 8006922:	401a      	ands	r2, r3
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800692a:	e007      	b.n	800693c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	431a      	orrs	r2, r3
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d109      	bne.n	8006958 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	43db      	mvns	r3, r3
 800694e:	401a      	ands	r2, r3
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006956:	e007      	b.n	8006968 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	431a      	orrs	r2, r3
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d107      	bne.n	8006980 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	431a      	orrs	r2, r3
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006986:	f023 0201 	bic.w	r2, r3, #1
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	e006      	b.n	80069a2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
  }
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d12e      	bne.n	8006a20 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2202      	movs	r2, #2
 80069c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0201 	bic.w	r2, r2, #1
 80069d8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069da:	f7fe ff33 	bl	8005844 <HAL_GetTick>
 80069de:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80069e0:	e012      	b.n	8006a08 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80069e2:	f7fe ff2f 	bl	8005844 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b0a      	cmp	r3, #10
 80069ee:	d90b      	bls.n	8006a08 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2205      	movs	r2, #5
 8006a00:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e012      	b.n	8006a2e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e5      	bne.n	80069e2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e006      	b.n	8006a2e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
  }
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b089      	sub	sp, #36	; 0x24
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006a54:	7ffb      	ldrb	r3, [r7, #31]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d003      	beq.n	8006a62 <HAL_CAN_AddTxMessage+0x2c>
 8006a5a:	7ffb      	ldrb	r3, [r7, #31]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	f040 80ad 	bne.w	8006bbc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d105      	bne.n	8006a82 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 8095 	beq.w	8006bac <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	0e1b      	lsrs	r3, r3, #24
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	409a      	lsls	r2, r3
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10d      	bne.n	8006aba <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006aa8:	68f9      	ldr	r1, [r7, #12]
 8006aaa:	6809      	ldr	r1, [r1, #0]
 8006aac:	431a      	orrs	r2, r3
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	3318      	adds	r3, #24
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	440b      	add	r3, r1
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	e00f      	b.n	8006ada <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006ac4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006ace:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	3318      	adds	r3, #24
 8006ad4:	011b      	lsls	r3, r3, #4
 8006ad6:	440b      	add	r3, r1
 8006ad8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6819      	ldr	r1, [r3, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	691a      	ldr	r2, [r3, #16]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	3318      	adds	r3, #24
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	440b      	add	r3, r1
 8006aea:	3304      	adds	r3, #4
 8006aec:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	7d1b      	ldrb	r3, [r3, #20]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d111      	bne.n	8006b1a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	3318      	adds	r3, #24
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	4413      	add	r3, r2
 8006b02:	3304      	adds	r3, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	6811      	ldr	r1, [r2, #0]
 8006b0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	3318      	adds	r3, #24
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	440b      	add	r3, r1
 8006b16:	3304      	adds	r3, #4
 8006b18:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3307      	adds	r3, #7
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	061a      	lsls	r2, r3, #24
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3306      	adds	r3, #6
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	041b      	lsls	r3, r3, #16
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3305      	adds	r3, #5
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	4313      	orrs	r3, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	3204      	adds	r2, #4
 8006b3a:	7812      	ldrb	r2, [r2, #0]
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	6811      	ldr	r1, [r2, #0]
 8006b42:	ea43 0200 	orr.w	r2, r3, r0
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	440b      	add	r3, r1
 8006b4c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006b50:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3303      	adds	r3, #3
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	061a      	lsls	r2, r3, #24
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3302      	adds	r3, #2
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	041b      	lsls	r3, r3, #16
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3301      	adds	r3, #1
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	7812      	ldrb	r2, [r2, #0]
 8006b72:	4610      	mov	r0, r2
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	6811      	ldr	r1, [r2, #0]
 8006b78:	ea43 0200 	orr.w	r2, r3, r0
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	011b      	lsls	r3, r3, #4
 8006b80:	440b      	add	r3, r1
 8006b82:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006b86:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	3318      	adds	r3, #24
 8006b90:	011b      	lsls	r3, r3, #4
 8006b92:	4413      	add	r3, r2
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	6811      	ldr	r1, [r2, #0]
 8006b9a:	f043 0201 	orr.w	r2, r3, #1
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	3318      	adds	r3, #24
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	440b      	add	r3, r1
 8006ba6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e00e      	b.n	8006bca <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e006      	b.n	8006bca <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
  }
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3724      	adds	r7, #36	; 0x24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b085      	sub	sp, #20
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006be8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006bea:	7afb      	ldrb	r3, [r7, #11]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d002      	beq.n	8006bf6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006bf0:	7afb      	ldrb	r3, [r7, #11]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d11d      	bne.n	8006c32 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006c32:	68fb      	ldr	r3, [r7, #12]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c54:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d003      	beq.n	8006c64 <HAL_CAN_GetRxMessage+0x24>
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	f040 80f3 	bne.w	8006e4a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10e      	bne.n	8006c88 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0303 	and.w	r3, r3, #3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d116      	bne.n	8006ca6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0e7      	b.n	8006e58 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d107      	bne.n	8006ca6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e0d8      	b.n	8006e58 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	331b      	adds	r3, #27
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	4413      	add	r3, r2
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0204 	and.w	r2, r3, #4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10c      	bne.n	8006cde <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	331b      	adds	r3, #27
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	4413      	add	r3, r2
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	0d5b      	lsrs	r3, r3, #21
 8006cd4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e00b      	b.n	8006cf6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	331b      	adds	r3, #27
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	4413      	add	r3, r2
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	08db      	lsrs	r3, r3, #3
 8006cee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	331b      	adds	r3, #27
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	4413      	add	r3, r2
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0202 	and.w	r2, r3, #2
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	331b      	adds	r3, #27
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	4413      	add	r3, r2
 8006d18:	3304      	adds	r3, #4
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 020f 	and.w	r2, r3, #15
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	331b      	adds	r3, #27
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	4413      	add	r3, r2
 8006d30:	3304      	adds	r3, #4
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	331b      	adds	r3, #27
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	4413      	add	r3, r2
 8006d48:	3304      	adds	r3, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	0c1b      	lsrs	r3, r3, #16
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	0a1a      	lsrs	r2, r3, #8
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	0c1a      	lsrs	r2, r3, #16
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	3302      	adds	r3, #2
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	0e1a      	lsrs	r2, r3, #24
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	3303      	adds	r3, #3
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	0a1a      	lsrs	r2, r3, #8
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	3305      	adds	r3, #5
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	0c1a      	lsrs	r2, r3, #16
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	3306      	adds	r3, #6
 8006e00:	b2d2      	uxtb	r2, r2
 8006e02:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	0e1a      	lsrs	r2, r3, #24
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	3307      	adds	r3, #7
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d108      	bne.n	8006e36 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0220 	orr.w	r2, r2, #32
 8006e32:	60da      	str	r2, [r3, #12]
 8006e34:	e007      	b.n	8006e46 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0220 	orr.w	r2, r2, #32
 8006e44:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	e006      	b.n	8006e58 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
  }
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e78:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006e7a:	7afb      	ldrb	r3, [r7, #11]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d002      	beq.n	8006e86 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8006e80:	7afb      	ldrb	r3, [r7, #11]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d10f      	bne.n	8006ea6 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	e005      	b.n	8006ea6 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ec4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d002      	beq.n	8006ed2 <HAL_CAN_ActivateNotification+0x1e>
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d109      	bne.n	8006ee6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6959      	ldr	r1, [r3, #20]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e006      	b.n	8006ef4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
  }
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08a      	sub	sp, #40	; 0x28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d07c      	beq.n	8007040 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d023      	beq.n	8006f98 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2201      	movs	r2, #1
 8006f56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fc fa98 	bl	8003498 <HAL_CAN_TxMailbox0CompleteCallback>
 8006f68:	e016      	b.n	8006f98 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d004      	beq.n	8006f7e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f7c:	e00c      	b.n	8006f98 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f90:	e002      	b.n	8006f98 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f96b 	bl	800726e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d024      	beq.n	8006fec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006faa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7fc fa7e 	bl	80034b8 <HAL_CAN_TxMailbox1CompleteCallback>
 8006fbc:	e016      	b.n	8006fec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d004      	beq.n	8006fd2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006fce:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd0:	e00c      	b.n	8006fec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe4:	e002      	b.n	8006fec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f94b 	bl	8007282 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d024      	beq.n	8007040 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ffe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7fc fa64 	bl	80034d8 <HAL_CAN_TxMailbox2CompleteCallback>
 8007010:	e016      	b.n	8007040 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d004      	beq.n	8007026 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007022:	627b      	str	r3, [r7, #36]	; 0x24
 8007024:	e00c      	b.n	8007040 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d004      	beq.n	800703a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
 8007038:	e002      	b.n	8007040 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f92b 	bl	8007296 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00c      	beq.n	8007064 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f003 0310 	and.w	r3, r3, #16
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800705a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2210      	movs	r2, #16
 8007062:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	f003 0304 	and.w	r3, r3, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b00      	cmp	r3, #0
 8007076:	d006      	beq.n	8007086 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2208      	movs	r2, #8
 800707e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f912 	bl	80072aa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d009      	beq.n	80070a4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7fc f9de 	bl	8003460 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00c      	beq.n	80070c8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f003 0310 	and.w	r3, r3, #16
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d007      	beq.n	80070c8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2210      	movs	r2, #16
 80070c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00b      	beq.n	80070ea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d006      	beq.n	80070ea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2208      	movs	r2, #8
 80070e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f8f4 	bl	80072d2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d009      	beq.n	8007108 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0303 	and.w	r3, r3, #3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f8db 	bl	80072be <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	f003 0310 	and.w	r3, r3, #16
 8007118:	2b00      	cmp	r3, #0
 800711a:	d006      	beq.n	800712a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2210      	movs	r2, #16
 8007122:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f8de 	bl	80072e6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00b      	beq.n	800714c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d006      	beq.n	800714c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2208      	movs	r2, #8
 8007144:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f8d7 	bl	80072fa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d07b      	beq.n	800724e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d072      	beq.n	8007246 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007166:	2b00      	cmp	r3, #0
 8007168:	d008      	beq.n	800717c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	f043 0301 	orr.w	r3, r3, #1
 800717a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007182:	2b00      	cmp	r3, #0
 8007184:	d008      	beq.n	8007198 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	f043 0302 	orr.w	r3, r3, #2
 8007196:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d008      	beq.n	80071b4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	f043 0304 	orr.w	r3, r3, #4
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d043      	beq.n	8007246 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d03e      	beq.n	8007246 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071ce:	2b60      	cmp	r3, #96	; 0x60
 80071d0:	d02b      	beq.n	800722a <HAL_CAN_IRQHandler+0x32a>
 80071d2:	2b60      	cmp	r3, #96	; 0x60
 80071d4:	d82e      	bhi.n	8007234 <HAL_CAN_IRQHandler+0x334>
 80071d6:	2b50      	cmp	r3, #80	; 0x50
 80071d8:	d022      	beq.n	8007220 <HAL_CAN_IRQHandler+0x320>
 80071da:	2b50      	cmp	r3, #80	; 0x50
 80071dc:	d82a      	bhi.n	8007234 <HAL_CAN_IRQHandler+0x334>
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d019      	beq.n	8007216 <HAL_CAN_IRQHandler+0x316>
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	d826      	bhi.n	8007234 <HAL_CAN_IRQHandler+0x334>
 80071e6:	2b30      	cmp	r3, #48	; 0x30
 80071e8:	d010      	beq.n	800720c <HAL_CAN_IRQHandler+0x30c>
 80071ea:	2b30      	cmp	r3, #48	; 0x30
 80071ec:	d822      	bhi.n	8007234 <HAL_CAN_IRQHandler+0x334>
 80071ee:	2b10      	cmp	r3, #16
 80071f0:	d002      	beq.n	80071f8 <HAL_CAN_IRQHandler+0x2f8>
 80071f2:	2b20      	cmp	r3, #32
 80071f4:	d005      	beq.n	8007202 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80071f6:	e01d      	b.n	8007234 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	f043 0308 	orr.w	r3, r3, #8
 80071fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007200:	e019      	b.n	8007236 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	f043 0310 	orr.w	r3, r3, #16
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800720a:	e014      	b.n	8007236 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	f043 0320 	orr.w	r3, r3, #32
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007214:	e00f      	b.n	8007236 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800721e:	e00a      	b.n	8007236 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007226:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007228:	e005      	b.n	8007236 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007232:	e000      	b.n	8007236 <HAL_CAN_IRQHandler+0x336>
            break;
 8007234:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699a      	ldr	r2, [r3, #24]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007244:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2204      	movs	r2, #4
 800724c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f854 	bl	800730e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007266:	bf00      	nop
 8007268:	3728      	adds	r7, #40	; 0x28
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800728a:	bf00      	nop
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80072b2:	bf00      	nop
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b083      	sub	sp, #12
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80072ee:	bf00      	nop
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
	...

08007324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007334:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <__NVIC_SetPriorityGrouping+0x44>)
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007340:	4013      	ands	r3, r2
 8007342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800734c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007356:	4a04      	ldr	r2, [pc, #16]	; (8007368 <__NVIC_SetPriorityGrouping+0x44>)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	60d3      	str	r3, [r2, #12]
}
 800735c:	bf00      	nop
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	e000ed00 	.word	0xe000ed00

0800736c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007370:	4b04      	ldr	r3, [pc, #16]	; (8007384 <__NVIC_GetPriorityGrouping+0x18>)
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	0a1b      	lsrs	r3, r3, #8
 8007376:	f003 0307 	and.w	r3, r3, #7
}
 800737a:	4618      	mov	r0, r3
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	e000ed00 	.word	0xe000ed00

08007388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007396:	2b00      	cmp	r3, #0
 8007398:	db0b      	blt.n	80073b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	f003 021f 	and.w	r2, r3, #31
 80073a0:	4907      	ldr	r1, [pc, #28]	; (80073c0 <__NVIC_EnableIRQ+0x38>)
 80073a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	2001      	movs	r0, #1
 80073aa:	fa00 f202 	lsl.w	r2, r0, r2
 80073ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	e000e100 	.word	0xe000e100

080073c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	6039      	str	r1, [r7, #0]
 80073ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	db0a      	blt.n	80073ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	490c      	ldr	r1, [pc, #48]	; (8007410 <__NVIC_SetPriority+0x4c>)
 80073de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073e2:	0112      	lsls	r2, r2, #4
 80073e4:	b2d2      	uxtb	r2, r2
 80073e6:	440b      	add	r3, r1
 80073e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80073ec:	e00a      	b.n	8007404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	4908      	ldr	r1, [pc, #32]	; (8007414 <__NVIC_SetPriority+0x50>)
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	f003 030f 	and.w	r3, r3, #15
 80073fa:	3b04      	subs	r3, #4
 80073fc:	0112      	lsls	r2, r2, #4
 80073fe:	b2d2      	uxtb	r2, r2
 8007400:	440b      	add	r3, r1
 8007402:	761a      	strb	r2, [r3, #24]
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	e000e100 	.word	0xe000e100
 8007414:	e000ed00 	.word	0xe000ed00

08007418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007418:	b480      	push	{r7}
 800741a:	b089      	sub	sp, #36	; 0x24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f1c3 0307 	rsb	r3, r3, #7
 8007432:	2b04      	cmp	r3, #4
 8007434:	bf28      	it	cs
 8007436:	2304      	movcs	r3, #4
 8007438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	3304      	adds	r3, #4
 800743e:	2b06      	cmp	r3, #6
 8007440:	d902      	bls.n	8007448 <NVIC_EncodePriority+0x30>
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	3b03      	subs	r3, #3
 8007446:	e000      	b.n	800744a <NVIC_EncodePriority+0x32>
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800744c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	fa02 f303 	lsl.w	r3, r2, r3
 8007456:	43da      	mvns	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	401a      	ands	r2, r3
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007460:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	fa01 f303 	lsl.w	r3, r1, r3
 800746a:	43d9      	mvns	r1, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007470:	4313      	orrs	r3, r2
         );
}
 8007472:	4618      	mov	r0, r3
 8007474:	3724      	adds	r7, #36	; 0x24
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff ff4c 	bl	8007324 <__NVIC_SetPriorityGrouping>
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80074a6:	f7ff ff61 	bl	800736c <__NVIC_GetPriorityGrouping>
 80074aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	68b9      	ldr	r1, [r7, #8]
 80074b0:	6978      	ldr	r0, [r7, #20]
 80074b2:	f7ff ffb1 	bl	8007418 <NVIC_EncodePriority>
 80074b6:	4602      	mov	r2, r0
 80074b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074bc:	4611      	mov	r1, r2
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff ff80 	bl	80073c4 <__NVIC_SetPriority>
}
 80074c4:	bf00      	nop
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80074d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff ff54 	bl	8007388 <__NVIC_EnableIRQ>
}
 80074e0:	bf00      	nop
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e014      	b.n	8007524 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	791b      	ldrb	r3, [r3, #4]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d105      	bne.n	8007510 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7fd fa4a 	bl	80049a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	795b      	ldrb	r3, [r3, #5]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <HAL_DAC_Start_DMA+0x1e>
 8007546:	2302      	movs	r3, #2
 8007548:	e0ab      	b.n	80076a2 <HAL_DAC_Start_DMA+0x176>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2202      	movs	r2, #2
 8007554:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d12f      	bne.n	80075bc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	4a52      	ldr	r2, [pc, #328]	; (80076ac <HAL_DAC_Start_DMA+0x180>)
 8007562:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	4a51      	ldr	r2, [pc, #324]	; (80076b0 <HAL_DAC_Start_DMA+0x184>)
 800756a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	4a50      	ldr	r2, [pc, #320]	; (80076b4 <HAL_DAC_Start_DMA+0x188>)
 8007572:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007582:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	2b08      	cmp	r3, #8
 8007588:	d013      	beq.n	80075b2 <HAL_DAC_Start_DMA+0x86>
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	2b08      	cmp	r3, #8
 800758e:	d845      	bhi.n	800761c <HAL_DAC_Start_DMA+0xf0>
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_DAC_Start_DMA+0x72>
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	2b04      	cmp	r3, #4
 800759a:	d005      	beq.n	80075a8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800759c:	e03e      	b.n	800761c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	613b      	str	r3, [r7, #16]
        break;
 80075a6:	e03c      	b.n	8007622 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	330c      	adds	r3, #12
 80075ae:	613b      	str	r3, [r7, #16]
        break;
 80075b0:	e037      	b.n	8007622 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3310      	adds	r3, #16
 80075b8:	613b      	str	r3, [r7, #16]
        break;
 80075ba:	e032      	b.n	8007622 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	4a3d      	ldr	r2, [pc, #244]	; (80076b8 <HAL_DAC_Start_DMA+0x18c>)
 80075c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	4a3c      	ldr	r2, [pc, #240]	; (80076bc <HAL_DAC_Start_DMA+0x190>)
 80075ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	4a3b      	ldr	r2, [pc, #236]	; (80076c0 <HAL_DAC_Start_DMA+0x194>)
 80075d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	2b08      	cmp	r3, #8
 80075e8:	d013      	beq.n	8007612 <HAL_DAC_Start_DMA+0xe6>
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d817      	bhi.n	8007620 <HAL_DAC_Start_DMA+0xf4>
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_DAC_Start_DMA+0xd2>
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d005      	beq.n	8007608 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80075fc:	e010      	b.n	8007620 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3314      	adds	r3, #20
 8007604:	613b      	str	r3, [r7, #16]
        break;
 8007606:	e00c      	b.n	8007622 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3318      	adds	r3, #24
 800760e:	613b      	str	r3, [r7, #16]
        break;
 8007610:	e007      	b.n	8007622 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	331c      	adds	r3, #28
 8007618:	613b      	str	r3, [r7, #16]
        break;
 800761a:	e002      	b.n	8007622 <HAL_DAC_Start_DMA+0xf6>
        break;
 800761c:	bf00      	nop
 800761e:	e000      	b.n	8007622 <HAL_DAC_Start_DMA+0xf6>
        break;
 8007620:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d111      	bne.n	800764c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007636:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6898      	ldr	r0, [r3, #8]
 800763c:	6879      	ldr	r1, [r7, #4]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	f000 fb13 	bl	8007c6c <HAL_DMA_Start_IT>
 8007646:	4603      	mov	r3, r0
 8007648:	75fb      	strb	r3, [r7, #23]
 800764a:	e010      	b.n	800766e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800765a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	68d8      	ldr	r0, [r3, #12]
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	f000 fb01 	bl	8007c6c <HAL_DMA_Start_IT>
 800766a:	4603      	mov	r3, r0
 800766c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10c      	bne.n	8007694 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6819      	ldr	r1, [r3, #0]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 0310 	and.w	r3, r3, #16
 8007686:	2201      	movs	r2, #1
 8007688:	409a      	lsls	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	e005      	b.n	80076a0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	f043 0204 	orr.w	r2, r3, #4
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	080079d5 	.word	0x080079d5
 80076b0:	080079f7 	.word	0x080079f7
 80076b4:	08007a13 	.word	0x08007a13
 80076b8:	08007a91 	.word	0x08007a91
 80076bc:	08007ab3 	.word	0x08007ab3
 80076c0:	08007acf 	.word	0x08007acf

080076c4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076da:	d120      	bne.n	800771e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ea:	d118      	bne.n	800771e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2204      	movs	r2, #4
 80076f0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f043 0201 	orr.w	r2, r3, #1
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007706:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007716:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f837 	bl	800778c <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800772c:	d120      	bne.n	8007770 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800773c:	d118      	bne.n	8007770 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2204      	movs	r2, #4
 8007742:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	f043 0202 	orr.w	r2, r3, #2
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007758:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007768:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f986 	bl	8007a7c <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	795b      	ldrb	r3, [r3, #5]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_DAC_ConfigChannel+0x1c>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e107      	b.n	80079cc <HAL_DAC_ConfigChannel+0x22c>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2201      	movs	r2, #1
 80077c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2202      	movs	r2, #2
 80077c6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d174      	bne.n	80078ba <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80077d0:	f7fe f838 	bl	8005844 <HAL_GetTick>
 80077d4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d134      	bne.n	8007846 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80077dc:	e011      	b.n	8007802 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80077de:	f7fe f831 	bl	8005844 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d90a      	bls.n	8007802 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	f043 0208 	orr.w	r2, r3, #8
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2203      	movs	r2, #3
 80077fc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e0e4      	b.n	80079cc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e6      	bne.n	80077de <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8007810:	2001      	movs	r0, #1
 8007812:	f7fe f823 	bl	800585c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	6992      	ldr	r2, [r2, #24]
 800781e:	641a      	str	r2, [r3, #64]	; 0x40
 8007820:	e01e      	b.n	8007860 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007822:	f7fe f80f 	bl	8005844 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b01      	cmp	r3, #1
 800782e:	d90a      	bls.n	8007846 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	f043 0208 	orr.w	r2, r3, #8
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2203      	movs	r2, #3
 8007840:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e0c2      	b.n	80079cc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784c:	2b00      	cmp	r3, #0
 800784e:	dbe8      	blt.n	8007822 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8007850:	2001      	movs	r0, #1
 8007852:	f7fe f803 	bl	800585c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	6992      	ldr	r2, [r2, #24]
 800785e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007870:	fa01 f303 	lsl.w	r3, r1, r3
 8007874:	43db      	mvns	r3, r3
 8007876:	ea02 0103 	and.w	r1, r2, r3
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	69da      	ldr	r2, [r3, #28]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	409a      	lsls	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f003 0310 	and.w	r3, r3, #16
 800789a:	21ff      	movs	r1, #255	; 0xff
 800789c:	fa01 f303 	lsl.w	r3, r1, r3
 80078a0:	43db      	mvns	r3, r3
 80078a2:	ea02 0103 	and.w	r1, r2, r3
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	6a1a      	ldr	r2, [r3, #32]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f003 0310 	and.w	r3, r3, #16
 80078b0:	409a      	lsls	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d11d      	bne.n	80078fe <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	221f      	movs	r2, #31
 80078d2:	fa02 f303 	lsl.w	r3, r2, r3
 80078d6:	43db      	mvns	r3, r3
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	4013      	ands	r3, r2
 80078dc:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f003 0310 	and.w	r3, r3, #16
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	fa02 f303 	lsl.w	r3, r2, r3
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007904:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2207      	movs	r2, #7
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	43db      	mvns	r3, r3
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4013      	ands	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	431a      	orrs	r2, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f003 0310 	and.w	r3, r3, #16
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	fa02 f303 	lsl.w	r3, r2, r3
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	4313      	orrs	r3, r2
 800793c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6819      	ldr	r1, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f003 0310 	and.w	r3, r3, #16
 8007952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007956:	fa02 f303 	lsl.w	r3, r2, r3
 800795a:	43da      	mvns	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	400a      	ands	r2, r1
 8007962:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f003 0310 	and.w	r3, r3, #16
 8007972:	f640 72fc 	movw	r2, #4092	; 0xffc
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	43db      	mvns	r3, r3
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	4013      	ands	r3, r2
 8007980:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f003 0310 	and.w	r3, r3, #16
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	fa02 f303 	lsl.w	r3, r2, r3
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	4313      	orrs	r3, r2
 8007998:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6819      	ldr	r1, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f003 0310 	and.w	r3, r3, #16
 80079ae:	22c0      	movs	r2, #192	; 0xc0
 80079b0:	fa02 f303 	lsl.w	r3, r2, r3
 80079b4:	43da      	mvns	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	400a      	ands	r2, r1
 80079bc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2201      	movs	r2, #1
 80079c2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3720      	adds	r7, #32
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f7fc fab8 	bl	8003f58 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	711a      	strb	r2, [r3, #4]
}
 80079ee:	bf00      	nop
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f7fc fa8b 	bl	8003f20 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	f043 0204 	orr.w	r2, r3, #4
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f7ff fea3 	bl	8007778 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2201      	movs	r2, #1
 8007a36:	711a      	strb	r2, [r3, #4]
}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7ff ffce 	bl	8007a40 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	711a      	strb	r2, [r3, #4]
}
 8007aaa:	bf00      	nop
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f7ff ffc7 	bl	8007a54 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007ac6:	bf00      	nop
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	f043 0204 	orr.w	r2, r3, #4
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f7ff ffbd 	bl	8007a68 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	711a      	strb	r2, [r3, #4]
}
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e098      	b.n	8007c40 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	4b4d      	ldr	r3, [pc, #308]	; (8007c4c <HAL_DMA_Init+0x150>)
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d80f      	bhi.n	8007b3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	4b4b      	ldr	r3, [pc, #300]	; (8007c50 <HAL_DMA_Init+0x154>)
 8007b22:	4413      	add	r3, r2
 8007b24:	4a4b      	ldr	r2, [pc, #300]	; (8007c54 <HAL_DMA_Init+0x158>)
 8007b26:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2a:	091b      	lsrs	r3, r3, #4
 8007b2c:	009a      	lsls	r2, r3, #2
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a48      	ldr	r2, [pc, #288]	; (8007c58 <HAL_DMA_Init+0x15c>)
 8007b36:	641a      	str	r2, [r3, #64]	; 0x40
 8007b38:	e00e      	b.n	8007b58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	4b46      	ldr	r3, [pc, #280]	; (8007c5c <HAL_DMA_Init+0x160>)
 8007b42:	4413      	add	r3, r2
 8007b44:	4a43      	ldr	r2, [pc, #268]	; (8007c54 <HAL_DMA_Init+0x158>)
 8007b46:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4a:	091b      	lsrs	r3, r3, #4
 8007b4c:	009a      	lsls	r2, r3, #2
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a42      	ldr	r2, [pc, #264]	; (8007c60 <HAL_DMA_Init+0x164>)
 8007b56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bb2:	d039      	beq.n	8007c28 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb8:	4a27      	ldr	r2, [pc, #156]	; (8007c58 <HAL_DMA_Init+0x15c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d11a      	bne.n	8007bf4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007bbe:	4b29      	ldr	r3, [pc, #164]	; (8007c64 <HAL_DMA_Init+0x168>)
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc6:	f003 031c 	and.w	r3, r3, #28
 8007bca:	210f      	movs	r1, #15
 8007bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	4924      	ldr	r1, [pc, #144]	; (8007c64 <HAL_DMA_Init+0x168>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007bd8:	4b22      	ldr	r3, [pc, #136]	; (8007c64 <HAL_DMA_Init+0x168>)
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6859      	ldr	r1, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be4:	f003 031c 	and.w	r3, r3, #28
 8007be8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bec:	491d      	ldr	r1, [pc, #116]	; (8007c64 <HAL_DMA_Init+0x168>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	600b      	str	r3, [r1, #0]
 8007bf2:	e019      	b.n	8007c28 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007bf4:	4b1c      	ldr	r3, [pc, #112]	; (8007c68 <HAL_DMA_Init+0x16c>)
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfc:	f003 031c 	and.w	r3, r3, #28
 8007c00:	210f      	movs	r1, #15
 8007c02:	fa01 f303 	lsl.w	r3, r1, r3
 8007c06:	43db      	mvns	r3, r3
 8007c08:	4917      	ldr	r1, [pc, #92]	; (8007c68 <HAL_DMA_Init+0x16c>)
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007c0e:	4b16      	ldr	r3, [pc, #88]	; (8007c68 <HAL_DMA_Init+0x16c>)
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6859      	ldr	r1, [r3, #4]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1a:	f003 031c 	and.w	r3, r3, #28
 8007c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c22:	4911      	ldr	r1, [pc, #68]	; (8007c68 <HAL_DMA_Init+0x16c>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	40020407 	.word	0x40020407
 8007c50:	bffdfff8 	.word	0xbffdfff8
 8007c54:	cccccccd 	.word	0xcccccccd
 8007c58:	40020000 	.word	0x40020000
 8007c5c:	bffdfbf8 	.word	0xbffdfbf8
 8007c60:	40020400 	.word	0x40020400
 8007c64:	400200a8 	.word	0x400200a8
 8007c68:	400204a8 	.word	0x400204a8

08007c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d101      	bne.n	8007c8c <HAL_DMA_Start_IT+0x20>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e04b      	b.n	8007d24 <HAL_DMA_Start_IT+0xb8>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d13a      	bne.n	8007d16 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0201 	bic.w	r2, r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	68b9      	ldr	r1, [r7, #8]
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 f8e0 	bl	8007e8a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d008      	beq.n	8007ce4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f042 020e 	orr.w	r2, r2, #14
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	e00f      	b.n	8007d04 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0204 	bic.w	r2, r2, #4
 8007cf2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 020a 	orr.w	r2, r2, #10
 8007d02:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0201 	orr.w	r2, r2, #1
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	e005      	b.n	8007d22 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d48:	f003 031c 	and.w	r3, r3, #28
 8007d4c:	2204      	movs	r2, #4
 8007d4e:	409a      	lsls	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4013      	ands	r3, r2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d026      	beq.n	8007da6 <HAL_DMA_IRQHandler+0x7a>
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f003 0304 	and.w	r3, r3, #4
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d021      	beq.n	8007da6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0320 	and.w	r3, r3, #32
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d107      	bne.n	8007d80 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0204 	bic.w	r2, r2, #4
 8007d7e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d84:	f003 021c 	and.w	r2, r3, #28
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8c:	2104      	movs	r1, #4
 8007d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8007d92:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d071      	beq.n	8007e80 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007da4:	e06c      	b.n	8007e80 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007daa:	f003 031c 	and.w	r3, r3, #28
 8007dae:	2202      	movs	r2, #2
 8007db0:	409a      	lsls	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4013      	ands	r3, r2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d02e      	beq.n	8007e18 <HAL_DMA_IRQHandler+0xec>
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f003 0302 	and.w	r3, r3, #2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d029      	beq.n	8007e18 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 020a 	bic.w	r2, r2, #10
 8007de0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dee:	f003 021c 	and.w	r2, r3, #28
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	2102      	movs	r1, #2
 8007df8:	fa01 f202 	lsl.w	r2, r1, r2
 8007dfc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d038      	beq.n	8007e80 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007e16:	e033      	b.n	8007e80 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1c:	f003 031c 	and.w	r3, r3, #28
 8007e20:	2208      	movs	r2, #8
 8007e22:	409a      	lsls	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4013      	ands	r3, r2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d02a      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x156>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f003 0308 	and.w	r3, r3, #8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d025      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 020e 	bic.w	r2, r2, #14
 8007e44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4a:	f003 021c 	and.w	r2, r3, #28
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	2101      	movs	r1, #1
 8007e54:	fa01 f202 	lsl.w	r2, r1, r2
 8007e58:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d004      	beq.n	8007e82 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
}
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b085      	sub	sp, #20
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	607a      	str	r2, [r7, #4]
 8007e96:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e9c:	f003 021c 	and.w	r2, r3, #28
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8007eaa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	2b10      	cmp	r3, #16
 8007eba:	d108      	bne.n	8007ece <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007ecc:	e007      	b.n	8007ede <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	60da      	str	r2, [r3, #12]
}
 8007ede:	bf00      	nop
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
	...

08007eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007efa:	e148      	b.n	800818e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	2101      	movs	r1, #1
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	fa01 f303 	lsl.w	r3, r1, r3
 8007f08:	4013      	ands	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 813a 	beq.w	8008188 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d005      	beq.n	8007f2c <HAL_GPIO_Init+0x40>
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f003 0303 	and.w	r3, r3, #3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d130      	bne.n	8007f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	005b      	lsls	r3, r3, #1
 8007f36:	2203      	movs	r2, #3
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	43db      	mvns	r3, r3
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	4013      	ands	r3, r2
 8007f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	005b      	lsls	r3, r3, #1
 8007f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f62:	2201      	movs	r2, #1
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6a:	43db      	mvns	r3, r3
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	091b      	lsrs	r3, r3, #4
 8007f78:	f003 0201 	and.w	r2, r3, #1
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d017      	beq.n	8007fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007faa:	43db      	mvns	r3, r3
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	689a      	ldr	r2, [r3, #8]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f003 0303 	and.w	r3, r3, #3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d123      	bne.n	800801e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	08da      	lsrs	r2, r3, #3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3208      	adds	r2, #8
 8007fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	220f      	movs	r2, #15
 8007fee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff2:	43db      	mvns	r3, r3
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	691a      	ldr	r2, [r3, #16]
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	fa02 f303 	lsl.w	r3, r2, r3
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	08da      	lsrs	r2, r3, #3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3208      	adds	r2, #8
 8008018:	6939      	ldr	r1, [r7, #16]
 800801a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	2203      	movs	r2, #3
 800802a:	fa02 f303 	lsl.w	r3, r2, r3
 800802e:	43db      	mvns	r3, r3
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	4013      	ands	r3, r2
 8008034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f003 0203 	and.w	r2, r3, #3
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	005b      	lsls	r3, r3, #1
 8008042:	fa02 f303 	lsl.w	r3, r2, r3
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	4313      	orrs	r3, r2
 800804a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 8094 	beq.w	8008188 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008060:	4b52      	ldr	r3, [pc, #328]	; (80081ac <HAL_GPIO_Init+0x2c0>)
 8008062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008064:	4a51      	ldr	r2, [pc, #324]	; (80081ac <HAL_GPIO_Init+0x2c0>)
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	6613      	str	r3, [r2, #96]	; 0x60
 800806c:	4b4f      	ldr	r3, [pc, #316]	; (80081ac <HAL_GPIO_Init+0x2c0>)
 800806e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	60bb      	str	r3, [r7, #8]
 8008076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008078:	4a4d      	ldr	r2, [pc, #308]	; (80081b0 <HAL_GPIO_Init+0x2c4>)
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	089b      	lsrs	r3, r3, #2
 800807e:	3302      	adds	r3, #2
 8008080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	220f      	movs	r2, #15
 8008090:	fa02 f303 	lsl.w	r3, r2, r3
 8008094:	43db      	mvns	r3, r3
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4013      	ands	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80080a2:	d00d      	beq.n	80080c0 <HAL_GPIO_Init+0x1d4>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a43      	ldr	r2, [pc, #268]	; (80081b4 <HAL_GPIO_Init+0x2c8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d007      	beq.n	80080bc <HAL_GPIO_Init+0x1d0>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a42      	ldr	r2, [pc, #264]	; (80081b8 <HAL_GPIO_Init+0x2cc>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d101      	bne.n	80080b8 <HAL_GPIO_Init+0x1cc>
 80080b4:	2302      	movs	r3, #2
 80080b6:	e004      	b.n	80080c2 <HAL_GPIO_Init+0x1d6>
 80080b8:	2307      	movs	r3, #7
 80080ba:	e002      	b.n	80080c2 <HAL_GPIO_Init+0x1d6>
 80080bc:	2301      	movs	r3, #1
 80080be:	e000      	b.n	80080c2 <HAL_GPIO_Init+0x1d6>
 80080c0:	2300      	movs	r3, #0
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	f002 0203 	and.w	r2, r2, #3
 80080c8:	0092      	lsls	r2, r2, #2
 80080ca:	4093      	lsls	r3, r2
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80080d2:	4937      	ldr	r1, [pc, #220]	; (80081b0 <HAL_GPIO_Init+0x2c4>)
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	089b      	lsrs	r3, r3, #2
 80080d8:	3302      	adds	r3, #2
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80080e0:	4b36      	ldr	r3, [pc, #216]	; (80081bc <HAL_GPIO_Init+0x2d0>)
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	43db      	mvns	r3, r3
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	4013      	ands	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4313      	orrs	r3, r2
 8008102:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008104:	4a2d      	ldr	r2, [pc, #180]	; (80081bc <HAL_GPIO_Init+0x2d0>)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800810a:	4b2c      	ldr	r3, [pc, #176]	; (80081bc <HAL_GPIO_Init+0x2d0>)
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	43db      	mvns	r3, r3
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4013      	ands	r3, r2
 8008118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800812e:	4a23      	ldr	r2, [pc, #140]	; (80081bc <HAL_GPIO_Init+0x2d0>)
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008134:	4b21      	ldr	r3, [pc, #132]	; (80081bc <HAL_GPIO_Init+0x2d0>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	43db      	mvns	r3, r3
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4013      	ands	r3, r2
 8008142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008158:	4a18      	ldr	r2, [pc, #96]	; (80081bc <HAL_GPIO_Init+0x2d0>)
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800815e:	4b17      	ldr	r3, [pc, #92]	; (80081bc <HAL_GPIO_Init+0x2d0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	43db      	mvns	r3, r3
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	4013      	ands	r3, r2
 800816c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008182:	4a0e      	ldr	r2, [pc, #56]	; (80081bc <HAL_GPIO_Init+0x2d0>)
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	3301      	adds	r3, #1
 800818c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	fa22 f303 	lsr.w	r3, r2, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	f47f aeaf 	bne.w	8007efc <HAL_GPIO_Init+0x10>
  }
}
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	371c      	adds	r7, #28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	40021000 	.word	0x40021000
 80081b0:	40010000 	.word	0x40010000
 80081b4:	48000400 	.word	0x48000400
 80081b8:	48000800 	.word	0x48000800
 80081bc:	40010400 	.word	0x40010400

080081c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	691a      	ldr	r2, [r3, #16]
 80081d0:	887b      	ldrh	r3, [r7, #2]
 80081d2:	4013      	ands	r3, r2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081d8:	2301      	movs	r3, #1
 80081da:	73fb      	strb	r3, [r7, #15]
 80081dc:	e001      	b.n	80081e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	807b      	strh	r3, [r7, #2]
 80081fc:	4613      	mov	r3, r2
 80081fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008200:	787b      	ldrb	r3, [r7, #1]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008206:	887a      	ldrh	r2, [r7, #2]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800820c:	e002      	b.n	8008214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800820e:	887a      	ldrh	r2, [r7, #2]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e081      	b.n	8008336 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d106      	bne.n	800824c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7fc fc22 	bl	8004a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2224      	movs	r2, #36	; 0x24
 8008250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f022 0201 	bic.w	r2, r2, #1
 8008262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008270:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008280:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d107      	bne.n	800829a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008296:	609a      	str	r2, [r3, #8]
 8008298:	e006      	b.n	80082a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689a      	ldr	r2, [r3, #8]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80082a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d104      	bne.n	80082ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	6812      	ldr	r2, [r2, #0]
 80082c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691a      	ldr	r2, [r3, #16]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	69d9      	ldr	r1, [r3, #28]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a1a      	ldr	r2, [r3, #32]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f042 0201 	orr.w	r2, r2, #1
 8008316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b088      	sub	sp, #32
 8008344:	af02      	add	r7, sp, #8
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	607a      	str	r2, [r7, #4]
 800834a:	461a      	mov	r2, r3
 800834c:	460b      	mov	r3, r1
 800834e:	817b      	strh	r3, [r7, #10]
 8008350:	4613      	mov	r3, r2
 8008352:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b20      	cmp	r3, #32
 800835e:	f040 80da 	bne.w	8008516 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <HAL_I2C_Master_Transmit+0x30>
 800836c:	2302      	movs	r3, #2
 800836e:	e0d3      	b.n	8008518 <HAL_I2C_Master_Transmit+0x1d8>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008378:	f7fd fa64 	bl	8005844 <HAL_GetTick>
 800837c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	2319      	movs	r3, #25
 8008384:	2201      	movs	r2, #1
 8008386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 f8f0 	bl	8008570 <I2C_WaitOnFlagUntilTimeout>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e0be      	b.n	8008518 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2221      	movs	r2, #33	; 0x21
 800839e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2210      	movs	r2, #16
 80083a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	893a      	ldrh	r2, [r7, #8]
 80083ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	2bff      	cmp	r3, #255	; 0xff
 80083ca:	d90e      	bls.n	80083ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	22ff      	movs	r2, #255	; 0xff
 80083d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	8979      	ldrh	r1, [r7, #10]
 80083da:	4b51      	ldr	r3, [pc, #324]	; (8008520 <HAL_I2C_Master_Transmit+0x1e0>)
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 fa6c 	bl	80088c0 <I2C_TransferConfig>
 80083e8:	e06c      	b.n	80084c4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	8979      	ldrh	r1, [r7, #10]
 80083fc:	4b48      	ldr	r3, [pc, #288]	; (8008520 <HAL_I2C_Master_Transmit+0x1e0>)
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 fa5b 	bl	80088c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800840a:	e05b      	b.n	80084c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	6a39      	ldr	r1, [r7, #32]
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 f8ed 	bl	80085f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e07b      	b.n	8008518 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	781a      	ldrb	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800843a:	b29b      	uxth	r3, r3
 800843c:	3b01      	subs	r3, #1
 800843e:	b29a      	uxth	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008448:	3b01      	subs	r3, #1
 800844a:	b29a      	uxth	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008454:	b29b      	uxth	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d034      	beq.n	80084c4 <HAL_I2C_Master_Transmit+0x184>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800845e:	2b00      	cmp	r3, #0
 8008460:	d130      	bne.n	80084c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	2200      	movs	r2, #0
 800846a:	2180      	movs	r1, #128	; 0x80
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f87f 	bl	8008570 <I2C_WaitOnFlagUntilTimeout>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e04d      	b.n	8008518 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008480:	b29b      	uxth	r3, r3
 8008482:	2bff      	cmp	r3, #255	; 0xff
 8008484:	d90e      	bls.n	80084a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	22ff      	movs	r2, #255	; 0xff
 800848a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008490:	b2da      	uxtb	r2, r3
 8008492:	8979      	ldrh	r1, [r7, #10]
 8008494:	2300      	movs	r3, #0
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 fa0f 	bl	80088c0 <I2C_TransferConfig>
 80084a2:	e00f      	b.n	80084c4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	8979      	ldrh	r1, [r7, #10]
 80084b6:	2300      	movs	r3, #0
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 f9fe 	bl	80088c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d19e      	bne.n	800840c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	6a39      	ldr	r1, [r7, #32]
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 f8cc 	bl	8008670 <I2C_WaitOnSTOPFlagUntilTimeout>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e01a      	b.n	8008518 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2220      	movs	r2, #32
 80084e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6859      	ldr	r1, [r3, #4]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	4b0b      	ldr	r3, [pc, #44]	; (8008524 <HAL_I2C_Master_Transmit+0x1e4>)
 80084f6:	400b      	ands	r3, r1
 80084f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2220      	movs	r2, #32
 80084fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	e000      	b.n	8008518 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008516:	2302      	movs	r3, #2
  }
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	80002000 	.word	0x80002000
 8008524:	fe00e800 	.word	0xfe00e800

08008528 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b02      	cmp	r3, #2
 800853c:	d103      	bne.n	8008546 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2200      	movs	r2, #0
 8008544:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b01      	cmp	r3, #1
 8008552:	d007      	beq.n	8008564 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699a      	ldr	r2, [r3, #24]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	619a      	str	r2, [r3, #24]
  }
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	4613      	mov	r3, r2
 800857e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008580:	e022      	b.n	80085c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008588:	d01e      	beq.n	80085c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800858a:	f7fd f95b 	bl	8005844 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d302      	bcc.n	80085a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d113      	bne.n	80085c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a4:	f043 0220 	orr.w	r2, r3, #32
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e00f      	b.n	80085e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699a      	ldr	r2, [r3, #24]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	4013      	ands	r3, r2
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	bf0c      	ite	eq
 80085d8:	2301      	moveq	r3, #1
 80085da:	2300      	movne	r3, #0
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	79fb      	ldrb	r3, [r7, #7]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d0cd      	beq.n	8008582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80085fc:	e02c      	b.n	8008658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	68b9      	ldr	r1, [r7, #8]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 f870 	bl	80086e8 <I2C_IsErrorOccurred>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e02a      	b.n	8008668 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008618:	d01e      	beq.n	8008658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800861a:	f7fd f913 	bl	8005844 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	429a      	cmp	r2, r3
 8008628:	d302      	bcc.n	8008630 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d113      	bne.n	8008658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008634:	f043 0220 	orr.w	r2, r3, #32
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2220      	movs	r2, #32
 8008640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e007      	b.n	8008668 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b02      	cmp	r3, #2
 8008664:	d1cb      	bne.n	80085fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800867c:	e028      	b.n	80086d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	68b9      	ldr	r1, [r7, #8]
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f000 f830 	bl	80086e8 <I2C_IsErrorOccurred>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e026      	b.n	80086e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008692:	f7fd f8d7 	bl	8005844 <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d302      	bcc.n	80086a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d113      	bne.n	80086d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ac:	f043 0220 	orr.w	r2, r3, #32
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2220      	movs	r2, #32
 80086b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e007      	b.n	80086e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b20      	cmp	r3, #32
 80086dc:	d1cf      	bne.n	800867e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b08a      	sub	sp, #40	; 0x28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008702:	2300      	movs	r3, #0
 8008704:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	f003 0310 	and.w	r3, r3, #16
 8008710:	2b00      	cmp	r3, #0
 8008712:	d075      	beq.n	8008800 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2210      	movs	r2, #16
 800871a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800871c:	e056      	b.n	80087cc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008724:	d052      	beq.n	80087cc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008726:	f7fd f88d 	bl	8005844 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	429a      	cmp	r2, r3
 8008734:	d302      	bcc.n	800873c <I2C_IsErrorOccurred+0x54>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d147      	bne.n	80087cc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008746:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800874e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800875a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800875e:	d12e      	bne.n	80087be <I2C_IsErrorOccurred+0xd6>
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008766:	d02a      	beq.n	80087be <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008768:	7cfb      	ldrb	r3, [r7, #19]
 800876a:	2b20      	cmp	r3, #32
 800876c:	d027      	beq.n	80087be <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800877c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800877e:	f7fd f861 	bl	8005844 <HAL_GetTick>
 8008782:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008784:	e01b      	b.n	80087be <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008786:	f7fd f85d 	bl	8005844 <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	2b19      	cmp	r3, #25
 8008792:	d914      	bls.n	80087be <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008798:	f043 0220 	orr.w	r2, r3, #32
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	f003 0320 	and.w	r3, r3, #32
 80087c8:	2b20      	cmp	r3, #32
 80087ca:	d1dc      	bne.n	8008786 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b20      	cmp	r3, #32
 80087d8:	d003      	beq.n	80087e2 <I2C_IsErrorOccurred+0xfa>
 80087da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d09d      	beq.n	800871e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80087e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d103      	bne.n	80087f2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2220      	movs	r2, #32
 80087f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	f043 0304 	orr.w	r3, r3, #4
 80087f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00b      	beq.n	800882a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	f043 0301 	orr.w	r3, r3, #1
 8008818:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008822:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	f043 0308 	orr.w	r3, r3, #8
 800883a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008844:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00b      	beq.n	800886e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	f043 0302 	orr.w	r3, r3, #2
 800885c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008866:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800886e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008872:	2b00      	cmp	r3, #0
 8008874:	d01c      	beq.n	80088b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff fe56 	bl	8008528 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6859      	ldr	r1, [r3, #4]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	4b0d      	ldr	r3, [pc, #52]	; (80088bc <I2C_IsErrorOccurred+0x1d4>)
 8008888:	400b      	ands	r3, r1
 800888a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	431a      	orrs	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2220      	movs	r2, #32
 800889c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80088b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3728      	adds	r7, #40	; 0x28
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	fe00e800 	.word	0xfe00e800

080088c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	607b      	str	r3, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	817b      	strh	r3, [r7, #10]
 80088ce:	4613      	mov	r3, r2
 80088d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088d2:	897b      	ldrh	r3, [r7, #10]
 80088d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80088d8:	7a7b      	ldrb	r3, [r7, #9]
 80088da:	041b      	lsls	r3, r3, #16
 80088dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	0d5b      	lsrs	r3, r3, #21
 80088fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80088fe:	4b08      	ldr	r3, [pc, #32]	; (8008920 <I2C_TransferConfig+0x60>)
 8008900:	430b      	orrs	r3, r1
 8008902:	43db      	mvns	r3, r3
 8008904:	ea02 0103 	and.w	r1, r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	430a      	orrs	r2, r1
 8008910:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008912:	bf00      	nop
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	03ff63ff 	.word	0x03ff63ff

08008924 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b20      	cmp	r3, #32
 8008938:	d138      	bne.n	80089ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008944:	2302      	movs	r3, #2
 8008946:	e032      	b.n	80089ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2224      	movs	r2, #36	; 0x24
 8008954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0201 	bic.w	r2, r2, #1
 8008966:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008976:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6819      	ldr	r1, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0201 	orr.w	r2, r2, #1
 8008996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2220      	movs	r2, #32
 800899c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	e000      	b.n	80089ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089ac:	2302      	movs	r3, #2
  }
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b20      	cmp	r3, #32
 80089ce:	d139      	bne.n	8008a44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80089da:	2302      	movs	r3, #2
 80089dc:	e033      	b.n	8008a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2224      	movs	r2, #36	; 0x24
 80089ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f022 0201 	bic.w	r2, r2, #1
 80089fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	021b      	lsls	r3, r3, #8
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0201 	orr.w	r2, r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	e000      	b.n	8008a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008a44:	2302      	movs	r3, #2
  }
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
	...

08008a54 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a5c:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a60:	4a0a      	ldr	r2, [pc, #40]	; (8008a8c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008a62:	f043 0301 	orr.w	r3, r3, #1
 8008a66:	6613      	str	r3, [r2, #96]	; 0x60
 8008a68:	4b08      	ldr	r3, [pc, #32]	; (8008a8c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8008a74:	4b06      	ldr	r3, [pc, #24]	; (8008a90 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	4905      	ldr	r1, [pc, #20]	; (8008a90 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	604b      	str	r3, [r1, #4]
}
 8008a80:	bf00      	nop
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	40021000 	.word	0x40021000
 8008a90:	40010000 	.word	0x40010000

08008a94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a98:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a04      	ldr	r2, [pc, #16]	; (8008ab0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008aa2:	6013      	str	r3, [r2, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	40007000 	.word	0x40007000

08008ab4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008ab8:	4b04      	ldr	r3, [pc, #16]	; (8008acc <HAL_PWREx_GetVoltageRange+0x18>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	40007000 	.word	0x40007000

08008ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ade:	d130      	bne.n	8008b42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ae0:	4b23      	ldr	r3, [pc, #140]	; (8008b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aec:	d038      	beq.n	8008b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008aee:	4b20      	ldr	r3, [pc, #128]	; (8008b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008af6:	4a1e      	ldr	r2, [pc, #120]	; (8008b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008af8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008afc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008afe:	4b1d      	ldr	r3, [pc, #116]	; (8008b74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2232      	movs	r2, #50	; 0x32
 8008b04:	fb02 f303 	mul.w	r3, r2, r3
 8008b08:	4a1b      	ldr	r2, [pc, #108]	; (8008b78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b0e:	0c9b      	lsrs	r3, r3, #18
 8008b10:	3301      	adds	r3, #1
 8008b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b14:	e002      	b.n	8008b1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b1c:	4b14      	ldr	r3, [pc, #80]	; (8008b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b28:	d102      	bne.n	8008b30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1f2      	bne.n	8008b16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b30:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b3c:	d110      	bne.n	8008b60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e00f      	b.n	8008b62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008b42:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b4e:	d007      	beq.n	8008b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008b50:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008b58:	4a05      	ldr	r2, [pc, #20]	; (8008b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	40007000 	.word	0x40007000
 8008b74:	20000078 	.word	0x20000078
 8008b78:	431bde83 	.word	0x431bde83

08008b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d102      	bne.n	8008b90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	f000 bc02 	b.w	8009394 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b90:	4b96      	ldr	r3, [pc, #600]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f003 030c 	and.w	r3, r3, #12
 8008b98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b9a:	4b94      	ldr	r3, [pc, #592]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0310 	and.w	r3, r3, #16
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 80e4 	beq.w	8008d7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d007      	beq.n	8008bc8 <HAL_RCC_OscConfig+0x4c>
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	2b0c      	cmp	r3, #12
 8008bbc:	f040 808b 	bne.w	8008cd6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	f040 8087 	bne.w	8008cd6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008bc8:	4b88      	ldr	r3, [pc, #544]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0302 	and.w	r3, r3, #2
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d005      	beq.n	8008be0 <HAL_RCC_OscConfig+0x64>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e3d9      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a1a      	ldr	r2, [r3, #32]
 8008be4:	4b81      	ldr	r3, [pc, #516]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0308 	and.w	r3, r3, #8
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d004      	beq.n	8008bfa <HAL_RCC_OscConfig+0x7e>
 8008bf0:	4b7e      	ldr	r3, [pc, #504]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bf8:	e005      	b.n	8008c06 <HAL_RCC_OscConfig+0x8a>
 8008bfa:	4b7c      	ldr	r3, [pc, #496]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c00:	091b      	lsrs	r3, r3, #4
 8008c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d223      	bcs.n	8008c52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 fdbe 	bl	8009790 <RCC_SetFlashLatencyFromMSIRange>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e3ba      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008c1e:	4b73      	ldr	r3, [pc, #460]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a72      	ldr	r2, [pc, #456]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008c24:	f043 0308 	orr.w	r3, r3, #8
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	4b70      	ldr	r3, [pc, #448]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	496d      	ldr	r1, [pc, #436]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008c3c:	4b6b      	ldr	r3, [pc, #428]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	021b      	lsls	r3, r3, #8
 8008c4a:	4968      	ldr	r1, [pc, #416]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	604b      	str	r3, [r1, #4]
 8008c50:	e025      	b.n	8008c9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008c52:	4b66      	ldr	r3, [pc, #408]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a65      	ldr	r2, [pc, #404]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008c58:	f043 0308 	orr.w	r3, r3, #8
 8008c5c:	6013      	str	r3, [r2, #0]
 8008c5e:	4b63      	ldr	r3, [pc, #396]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	4960      	ldr	r1, [pc, #384]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008c70:	4b5e      	ldr	r3, [pc, #376]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	69db      	ldr	r3, [r3, #28]
 8008c7c:	021b      	lsls	r3, r3, #8
 8008c7e:	495b      	ldr	r1, [pc, #364]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d109      	bne.n	8008c9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fd7e 	bl	8009790 <RCC_SetFlashLatencyFromMSIRange>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e37a      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008c9e:	f000 fc81 	bl	80095a4 <HAL_RCC_GetSysClockFreq>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	4b51      	ldr	r3, [pc, #324]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	091b      	lsrs	r3, r3, #4
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	4950      	ldr	r1, [pc, #320]	; (8008df0 <HAL_RCC_OscConfig+0x274>)
 8008cb0:	5ccb      	ldrb	r3, [r1, r3]
 8008cb2:	f003 031f 	and.w	r3, r3, #31
 8008cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cba:	4a4e      	ldr	r2, [pc, #312]	; (8008df4 <HAL_RCC_OscConfig+0x278>)
 8008cbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008cbe:	4b4e      	ldr	r3, [pc, #312]	; (8008df8 <HAL_RCC_OscConfig+0x27c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fb fff2 	bl	8004cac <HAL_InitTick>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d052      	beq.n	8008d78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	e35e      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d032      	beq.n	8008d44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008cde:	4b43      	ldr	r3, [pc, #268]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a42      	ldr	r2, [pc, #264]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008ce4:	f043 0301 	orr.w	r3, r3, #1
 8008ce8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008cea:	f7fc fdab 	bl	8005844 <HAL_GetTick>
 8008cee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008cf0:	e008      	b.n	8008d04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008cf2:	f7fc fda7 	bl	8005844 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d901      	bls.n	8008d04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e347      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008d04:	4b39      	ldr	r3, [pc, #228]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0f0      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d10:	4b36      	ldr	r3, [pc, #216]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a35      	ldr	r2, [pc, #212]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008d16:	f043 0308 	orr.w	r3, r3, #8
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	4b33      	ldr	r3, [pc, #204]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a1b      	ldr	r3, [r3, #32]
 8008d28:	4930      	ldr	r1, [pc, #192]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d2e:	4b2f      	ldr	r3, [pc, #188]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	021b      	lsls	r3, r3, #8
 8008d3c:	492b      	ldr	r1, [pc, #172]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	604b      	str	r3, [r1, #4]
 8008d42:	e01a      	b.n	8008d7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008d44:	4b29      	ldr	r3, [pc, #164]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a28      	ldr	r2, [pc, #160]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008d4a:	f023 0301 	bic.w	r3, r3, #1
 8008d4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008d50:	f7fc fd78 	bl	8005844 <HAL_GetTick>
 8008d54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008d56:	e008      	b.n	8008d6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008d58:	f7fc fd74 	bl	8005844 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d901      	bls.n	8008d6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e314      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008d6a:	4b20      	ldr	r3, [pc, #128]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1f0      	bne.n	8008d58 <HAL_RCC_OscConfig+0x1dc>
 8008d76:	e000      	b.n	8008d7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008d78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d073      	beq.n	8008e6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	d005      	beq.n	8008d98 <HAL_RCC_OscConfig+0x21c>
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	2b0c      	cmp	r3, #12
 8008d90:	d10e      	bne.n	8008db0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d10b      	bne.n	8008db0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d98:	4b14      	ldr	r3, [pc, #80]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d063      	beq.n	8008e6c <HAL_RCC_OscConfig+0x2f0>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d15f      	bne.n	8008e6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e2f1      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db8:	d106      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x24c>
 8008dba:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a0b      	ldr	r2, [pc, #44]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	e025      	b.n	8008e14 <HAL_RCC_OscConfig+0x298>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dd0:	d114      	bne.n	8008dfc <HAL_RCC_OscConfig+0x280>
 8008dd2:	4b06      	ldr	r3, [pc, #24]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a05      	ldr	r2, [pc, #20]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ddc:	6013      	str	r3, [r2, #0]
 8008dde:	4b03      	ldr	r3, [pc, #12]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a02      	ldr	r2, [pc, #8]	; (8008dec <HAL_RCC_OscConfig+0x270>)
 8008de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	e013      	b.n	8008e14 <HAL_RCC_OscConfig+0x298>
 8008dec:	40021000 	.word	0x40021000
 8008df0:	0801dbc0 	.word	0x0801dbc0
 8008df4:	20000078 	.word	0x20000078
 8008df8:	20000080 	.word	0x20000080
 8008dfc:	4ba0      	ldr	r3, [pc, #640]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a9f      	ldr	r2, [pc, #636]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	4b9d      	ldr	r3, [pc, #628]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a9c      	ldr	r2, [pc, #624]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d013      	beq.n	8008e44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e1c:	f7fc fd12 	bl	8005844 <HAL_GetTick>
 8008e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e22:	e008      	b.n	8008e36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e24:	f7fc fd0e 	bl	8005844 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	2b64      	cmp	r3, #100	; 0x64
 8008e30:	d901      	bls.n	8008e36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e2ae      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e36:	4b92      	ldr	r3, [pc, #584]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0f0      	beq.n	8008e24 <HAL_RCC_OscConfig+0x2a8>
 8008e42:	e014      	b.n	8008e6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e44:	f7fc fcfe 	bl	8005844 <HAL_GetTick>
 8008e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e4a:	e008      	b.n	8008e5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e4c:	f7fc fcfa 	bl	8005844 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	2b64      	cmp	r3, #100	; 0x64
 8008e58:	d901      	bls.n	8008e5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e29a      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e5e:	4b88      	ldr	r3, [pc, #544]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1f0      	bne.n	8008e4c <HAL_RCC_OscConfig+0x2d0>
 8008e6a:	e000      	b.n	8008e6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0302 	and.w	r3, r3, #2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d060      	beq.n	8008f3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d005      	beq.n	8008e8c <HAL_RCC_OscConfig+0x310>
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b0c      	cmp	r3, #12
 8008e84:	d119      	bne.n	8008eba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d116      	bne.n	8008eba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e8c:	4b7c      	ldr	r3, [pc, #496]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d005      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x328>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e277      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ea4:	4b76      	ldr	r3, [pc, #472]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	061b      	lsls	r3, r3, #24
 8008eb2:	4973      	ldr	r1, [pc, #460]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008eb8:	e040      	b.n	8008f3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d023      	beq.n	8008f0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ec2:	4b6f      	ldr	r3, [pc, #444]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a6e      	ldr	r2, [pc, #440]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ece:	f7fc fcb9 	bl	8005844 <HAL_GetTick>
 8008ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ed4:	e008      	b.n	8008ee8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ed6:	f7fc fcb5 	bl	8005844 <HAL_GetTick>
 8008eda:	4602      	mov	r2, r0
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d901      	bls.n	8008ee8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e255      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ee8:	4b65      	ldr	r3, [pc, #404]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d0f0      	beq.n	8008ed6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ef4:	4b62      	ldr	r3, [pc, #392]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	061b      	lsls	r3, r3, #24
 8008f02:	495f      	ldr	r1, [pc, #380]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	604b      	str	r3, [r1, #4]
 8008f08:	e018      	b.n	8008f3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f0a:	4b5d      	ldr	r3, [pc, #372]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a5c      	ldr	r2, [pc, #368]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f16:	f7fc fc95 	bl	8005844 <HAL_GetTick>
 8008f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f1c:	e008      	b.n	8008f30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f1e:	f7fc fc91 	bl	8005844 <HAL_GetTick>
 8008f22:	4602      	mov	r2, r0
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d901      	bls.n	8008f30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e231      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f30:	4b53      	ldr	r3, [pc, #332]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1f0      	bne.n	8008f1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d03c      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d01c      	beq.n	8008f8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f50:	4b4b      	ldr	r3, [pc, #300]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f56:	4a4a      	ldr	r2, [pc, #296]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008f58:	f043 0301 	orr.w	r3, r3, #1
 8008f5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f60:	f7fc fc70 	bl	8005844 <HAL_GetTick>
 8008f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f66:	e008      	b.n	8008f7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f68:	f7fc fc6c 	bl	8005844 <HAL_GetTick>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d901      	bls.n	8008f7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e20c      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f7a:	4b41      	ldr	r3, [pc, #260]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0ef      	beq.n	8008f68 <HAL_RCC_OscConfig+0x3ec>
 8008f88:	e01b      	b.n	8008fc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f8a:	4b3d      	ldr	r3, [pc, #244]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f90:	4a3b      	ldr	r2, [pc, #236]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008f92:	f023 0301 	bic.w	r3, r3, #1
 8008f96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f9a:	f7fc fc53 	bl	8005844 <HAL_GetTick>
 8008f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008fa0:	e008      	b.n	8008fb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fa2:	f7fc fc4f 	bl	8005844 <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d901      	bls.n	8008fb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e1ef      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008fb4:	4b32      	ldr	r3, [pc, #200]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1ef      	bne.n	8008fa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0304 	and.w	r3, r3, #4
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 80a6 	beq.w	800911c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008fd4:	4b2a      	ldr	r3, [pc, #168]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10d      	bne.n	8008ffc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fe0:	4b27      	ldr	r3, [pc, #156]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe4:	4a26      	ldr	r2, [pc, #152]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fea:	6593      	str	r3, [r2, #88]	; 0x58
 8008fec:	4b24      	ldr	r3, [pc, #144]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8008fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ff4:	60bb      	str	r3, [r7, #8]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ffc:	4b21      	ldr	r3, [pc, #132]	; (8009084 <HAL_RCC_OscConfig+0x508>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009004:	2b00      	cmp	r3, #0
 8009006:	d118      	bne.n	800903a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009008:	4b1e      	ldr	r3, [pc, #120]	; (8009084 <HAL_RCC_OscConfig+0x508>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a1d      	ldr	r2, [pc, #116]	; (8009084 <HAL_RCC_OscConfig+0x508>)
 800900e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009014:	f7fc fc16 	bl	8005844 <HAL_GetTick>
 8009018:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800901a:	e008      	b.n	800902e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800901c:	f7fc fc12 	bl	8005844 <HAL_GetTick>
 8009020:	4602      	mov	r2, r0
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	2b02      	cmp	r3, #2
 8009028:	d901      	bls.n	800902e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e1b2      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800902e:	4b15      	ldr	r3, [pc, #84]	; (8009084 <HAL_RCC_OscConfig+0x508>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0f0      	beq.n	800901c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d108      	bne.n	8009054 <HAL_RCC_OscConfig+0x4d8>
 8009042:	4b0f      	ldr	r3, [pc, #60]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8009044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009048:	4a0d      	ldr	r2, [pc, #52]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 800904a:	f043 0301 	orr.w	r3, r3, #1
 800904e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009052:	e029      	b.n	80090a8 <HAL_RCC_OscConfig+0x52c>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	2b05      	cmp	r3, #5
 800905a:	d115      	bne.n	8009088 <HAL_RCC_OscConfig+0x50c>
 800905c:	4b08      	ldr	r3, [pc, #32]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 800905e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009062:	4a07      	ldr	r2, [pc, #28]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8009064:	f043 0304 	orr.w	r3, r3, #4
 8009068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800906c:	4b04      	ldr	r3, [pc, #16]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 800906e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009072:	4a03      	ldr	r2, [pc, #12]	; (8009080 <HAL_RCC_OscConfig+0x504>)
 8009074:	f043 0301 	orr.w	r3, r3, #1
 8009078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800907c:	e014      	b.n	80090a8 <HAL_RCC_OscConfig+0x52c>
 800907e:	bf00      	nop
 8009080:	40021000 	.word	0x40021000
 8009084:	40007000 	.word	0x40007000
 8009088:	4b9a      	ldr	r3, [pc, #616]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 800908a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800908e:	4a99      	ldr	r2, [pc, #612]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 8009090:	f023 0301 	bic.w	r3, r3, #1
 8009094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009098:	4b96      	ldr	r3, [pc, #600]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 800909a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800909e:	4a95      	ldr	r2, [pc, #596]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 80090a0:	f023 0304 	bic.w	r3, r3, #4
 80090a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d016      	beq.n	80090de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090b0:	f7fc fbc8 	bl	8005844 <HAL_GetTick>
 80090b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090b6:	e00a      	b.n	80090ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090b8:	f7fc fbc4 	bl	8005844 <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d901      	bls.n	80090ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e162      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090ce:	4b89      	ldr	r3, [pc, #548]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 80090d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090d4:	f003 0302 	and.w	r3, r3, #2
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d0ed      	beq.n	80090b8 <HAL_RCC_OscConfig+0x53c>
 80090dc:	e015      	b.n	800910a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090de:	f7fc fbb1 	bl	8005844 <HAL_GetTick>
 80090e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80090e4:	e00a      	b.n	80090fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090e6:	f7fc fbad 	bl	8005844 <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d901      	bls.n	80090fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e14b      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80090fc:	4b7d      	ldr	r3, [pc, #500]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 80090fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009102:	f003 0302 	and.w	r3, r3, #2
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1ed      	bne.n	80090e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800910a:	7ffb      	ldrb	r3, [r7, #31]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d105      	bne.n	800911c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009110:	4b78      	ldr	r3, [pc, #480]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 8009112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009114:	4a77      	ldr	r2, [pc, #476]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 8009116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800911a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0320 	and.w	r3, r3, #32
 8009124:	2b00      	cmp	r3, #0
 8009126:	d03c      	beq.n	80091a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	2b00      	cmp	r3, #0
 800912e:	d01c      	beq.n	800916a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009130:	4b70      	ldr	r3, [pc, #448]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 8009132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009136:	4a6f      	ldr	r2, [pc, #444]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 8009138:	f043 0301 	orr.w	r3, r3, #1
 800913c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009140:	f7fc fb80 	bl	8005844 <HAL_GetTick>
 8009144:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009146:	e008      	b.n	800915a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009148:	f7fc fb7c 	bl	8005844 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2b02      	cmp	r3, #2
 8009154:	d901      	bls.n	800915a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e11c      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800915a:	4b66      	ldr	r3, [pc, #408]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 800915c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009160:	f003 0302 	and.w	r3, r3, #2
 8009164:	2b00      	cmp	r3, #0
 8009166:	d0ef      	beq.n	8009148 <HAL_RCC_OscConfig+0x5cc>
 8009168:	e01b      	b.n	80091a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800916a:	4b62      	ldr	r3, [pc, #392]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 800916c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009170:	4a60      	ldr	r2, [pc, #384]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 8009172:	f023 0301 	bic.w	r3, r3, #1
 8009176:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800917a:	f7fc fb63 	bl	8005844 <HAL_GetTick>
 800917e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009180:	e008      	b.n	8009194 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009182:	f7fc fb5f 	bl	8005844 <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b02      	cmp	r3, #2
 800918e:	d901      	bls.n	8009194 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e0ff      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009194:	4b57      	ldr	r3, [pc, #348]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 8009196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1ef      	bne.n	8009182 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 80f3 	beq.w	8009392 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	f040 80c9 	bne.w	8009348 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80091b6:	4b4f      	ldr	r3, [pc, #316]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	f003 0203 	and.w	r2, r3, #3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d12c      	bne.n	8009224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d4:	3b01      	subs	r3, #1
 80091d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80091d8:	429a      	cmp	r2, r3
 80091da:	d123      	bne.n	8009224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d11b      	bne.n	8009224 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d113      	bne.n	8009224 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009206:	085b      	lsrs	r3, r3, #1
 8009208:	3b01      	subs	r3, #1
 800920a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800920c:	429a      	cmp	r2, r3
 800920e:	d109      	bne.n	8009224 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	085b      	lsrs	r3, r3, #1
 800921c:	3b01      	subs	r3, #1
 800921e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009220:	429a      	cmp	r2, r3
 8009222:	d06b      	beq.n	80092fc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	2b0c      	cmp	r3, #12
 8009228:	d062      	beq.n	80092f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800922a:	4b32      	ldr	r3, [pc, #200]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e0ac      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800923a:	4b2e      	ldr	r3, [pc, #184]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a2d      	ldr	r2, [pc, #180]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 8009240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009244:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009246:	f7fc fafd 	bl	8005844 <HAL_GetTick>
 800924a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800924c:	e008      	b.n	8009260 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800924e:	f7fc faf9 	bl	8005844 <HAL_GetTick>
 8009252:	4602      	mov	r2, r0
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	2b02      	cmp	r3, #2
 800925a:	d901      	bls.n	8009260 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e099      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009260:	4b24      	ldr	r3, [pc, #144]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1f0      	bne.n	800924e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800926c:	4b21      	ldr	r3, [pc, #132]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 800926e:	68da      	ldr	r2, [r3, #12]
 8009270:	4b21      	ldr	r3, [pc, #132]	; (80092f8 <HAL_RCC_OscConfig+0x77c>)
 8009272:	4013      	ands	r3, r2
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800927c:	3a01      	subs	r2, #1
 800927e:	0112      	lsls	r2, r2, #4
 8009280:	4311      	orrs	r1, r2
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009286:	0212      	lsls	r2, r2, #8
 8009288:	4311      	orrs	r1, r2
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800928e:	0852      	lsrs	r2, r2, #1
 8009290:	3a01      	subs	r2, #1
 8009292:	0552      	lsls	r2, r2, #21
 8009294:	4311      	orrs	r1, r2
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800929a:	0852      	lsrs	r2, r2, #1
 800929c:	3a01      	subs	r2, #1
 800929e:	0652      	lsls	r2, r2, #25
 80092a0:	4311      	orrs	r1, r2
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80092a6:	06d2      	lsls	r2, r2, #27
 80092a8:	430a      	orrs	r2, r1
 80092aa:	4912      	ldr	r1, [pc, #72]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 80092ac:	4313      	orrs	r3, r2
 80092ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80092b0:	4b10      	ldr	r3, [pc, #64]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a0f      	ldr	r2, [pc, #60]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 80092b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80092bc:	4b0d      	ldr	r3, [pc, #52]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	4a0c      	ldr	r2, [pc, #48]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 80092c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80092c8:	f7fc fabc 	bl	8005844 <HAL_GetTick>
 80092cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092ce:	e008      	b.n	80092e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092d0:	f7fc fab8 	bl	8005844 <HAL_GetTick>
 80092d4:	4602      	mov	r2, r0
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d901      	bls.n	80092e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e058      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092e2:	4b04      	ldr	r3, [pc, #16]	; (80092f4 <HAL_RCC_OscConfig+0x778>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d0f0      	beq.n	80092d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80092ee:	e050      	b.n	8009392 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e04f      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
 80092f4:	40021000 	.word	0x40021000
 80092f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092fc:	4b27      	ldr	r3, [pc, #156]	; (800939c <HAL_RCC_OscConfig+0x820>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d144      	bne.n	8009392 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009308:	4b24      	ldr	r3, [pc, #144]	; (800939c <HAL_RCC_OscConfig+0x820>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a23      	ldr	r2, [pc, #140]	; (800939c <HAL_RCC_OscConfig+0x820>)
 800930e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009312:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009314:	4b21      	ldr	r3, [pc, #132]	; (800939c <HAL_RCC_OscConfig+0x820>)
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	4a20      	ldr	r2, [pc, #128]	; (800939c <HAL_RCC_OscConfig+0x820>)
 800931a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800931e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009320:	f7fc fa90 	bl	8005844 <HAL_GetTick>
 8009324:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009326:	e008      	b.n	800933a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009328:	f7fc fa8c 	bl	8005844 <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	2b02      	cmp	r3, #2
 8009334:	d901      	bls.n	800933a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8009336:	2303      	movs	r3, #3
 8009338:	e02c      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800933a:	4b18      	ldr	r3, [pc, #96]	; (800939c <HAL_RCC_OscConfig+0x820>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d0f0      	beq.n	8009328 <HAL_RCC_OscConfig+0x7ac>
 8009346:	e024      	b.n	8009392 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	2b0c      	cmp	r3, #12
 800934c:	d01f      	beq.n	800938e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800934e:	4b13      	ldr	r3, [pc, #76]	; (800939c <HAL_RCC_OscConfig+0x820>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a12      	ldr	r2, [pc, #72]	; (800939c <HAL_RCC_OscConfig+0x820>)
 8009354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800935a:	f7fc fa73 	bl	8005844 <HAL_GetTick>
 800935e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009360:	e008      	b.n	8009374 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009362:	f7fc fa6f 	bl	8005844 <HAL_GetTick>
 8009366:	4602      	mov	r2, r0
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	2b02      	cmp	r3, #2
 800936e:	d901      	bls.n	8009374 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e00f      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009374:	4b09      	ldr	r3, [pc, #36]	; (800939c <HAL_RCC_OscConfig+0x820>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1f0      	bne.n	8009362 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8009380:	4b06      	ldr	r3, [pc, #24]	; (800939c <HAL_RCC_OscConfig+0x820>)
 8009382:	68da      	ldr	r2, [r3, #12]
 8009384:	4905      	ldr	r1, [pc, #20]	; (800939c <HAL_RCC_OscConfig+0x820>)
 8009386:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <HAL_RCC_OscConfig+0x824>)
 8009388:	4013      	ands	r3, r2
 800938a:	60cb      	str	r3, [r1, #12]
 800938c:	e001      	b.n	8009392 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e000      	b.n	8009394 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3720      	adds	r7, #32
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40021000 	.word	0x40021000
 80093a0:	feeefffc 	.word	0xfeeefffc

080093a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e0e7      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80093b8:	4b75      	ldr	r3, [pc, #468]	; (8009590 <HAL_RCC_ClockConfig+0x1ec>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0307 	and.w	r3, r3, #7
 80093c0:	683a      	ldr	r2, [r7, #0]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d910      	bls.n	80093e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093c6:	4b72      	ldr	r3, [pc, #456]	; (8009590 <HAL_RCC_ClockConfig+0x1ec>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f023 0207 	bic.w	r2, r3, #7
 80093ce:	4970      	ldr	r1, [pc, #448]	; (8009590 <HAL_RCC_ClockConfig+0x1ec>)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093d6:	4b6e      	ldr	r3, [pc, #440]	; (8009590 <HAL_RCC_ClockConfig+0x1ec>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0307 	and.w	r3, r3, #7
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d001      	beq.n	80093e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e0cf      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d010      	beq.n	8009416 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	689a      	ldr	r2, [r3, #8]
 80093f8:	4b66      	ldr	r3, [pc, #408]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009400:	429a      	cmp	r2, r3
 8009402:	d908      	bls.n	8009416 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009404:	4b63      	ldr	r3, [pc, #396]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	4960      	ldr	r1, [pc, #384]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 8009412:	4313      	orrs	r3, r2
 8009414:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d04c      	beq.n	80094bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	2b03      	cmp	r3, #3
 8009428:	d107      	bne.n	800943a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800942a:	4b5a      	ldr	r3, [pc, #360]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d121      	bne.n	800947a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e0a6      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	2b02      	cmp	r3, #2
 8009440:	d107      	bne.n	8009452 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009442:	4b54      	ldr	r3, [pc, #336]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d115      	bne.n	800947a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e09a      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d107      	bne.n	800946a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800945a:	4b4e      	ldr	r3, [pc, #312]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d109      	bne.n	800947a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e08e      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800946a:	4b4a      	ldr	r3, [pc, #296]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e086      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800947a:	4b46      	ldr	r3, [pc, #280]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f023 0203 	bic.w	r2, r3, #3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	4943      	ldr	r1, [pc, #268]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 8009488:	4313      	orrs	r3, r2
 800948a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800948c:	f7fc f9da 	bl	8005844 <HAL_GetTick>
 8009490:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009492:	e00a      	b.n	80094aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009494:	f7fc f9d6 	bl	8005844 <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d901      	bls.n	80094aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e06e      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094aa:	4b3a      	ldr	r3, [pc, #232]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f003 020c 	and.w	r2, r3, #12
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d1eb      	bne.n	8009494 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0302 	and.w	r3, r3, #2
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d010      	beq.n	80094ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689a      	ldr	r2, [r3, #8]
 80094cc:	4b31      	ldr	r3, [pc, #196]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d208      	bcs.n	80094ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094d8:	4b2e      	ldr	r3, [pc, #184]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	492b      	ldr	r1, [pc, #172]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80094ea:	4b29      	ldr	r3, [pc, #164]	; (8009590 <HAL_RCC_ClockConfig+0x1ec>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 0307 	and.w	r3, r3, #7
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d210      	bcs.n	800951a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094f8:	4b25      	ldr	r3, [pc, #148]	; (8009590 <HAL_RCC_ClockConfig+0x1ec>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f023 0207 	bic.w	r2, r3, #7
 8009500:	4923      	ldr	r1, [pc, #140]	; (8009590 <HAL_RCC_ClockConfig+0x1ec>)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	4313      	orrs	r3, r2
 8009506:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009508:	4b21      	ldr	r3, [pc, #132]	; (8009590 <HAL_RCC_ClockConfig+0x1ec>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0307 	and.w	r3, r3, #7
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	429a      	cmp	r2, r3
 8009514:	d001      	beq.n	800951a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e036      	b.n	8009588 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0304 	and.w	r3, r3, #4
 8009522:	2b00      	cmp	r3, #0
 8009524:	d008      	beq.n	8009538 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009526:	4b1b      	ldr	r3, [pc, #108]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	4918      	ldr	r1, [pc, #96]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 8009534:	4313      	orrs	r3, r2
 8009536:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 0308 	and.w	r3, r3, #8
 8009540:	2b00      	cmp	r3, #0
 8009542:	d009      	beq.n	8009558 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009544:	4b13      	ldr	r3, [pc, #76]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	00db      	lsls	r3, r3, #3
 8009552:	4910      	ldr	r1, [pc, #64]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 8009554:	4313      	orrs	r3, r2
 8009556:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009558:	f000 f824 	bl	80095a4 <HAL_RCC_GetSysClockFreq>
 800955c:	4602      	mov	r2, r0
 800955e:	4b0d      	ldr	r3, [pc, #52]	; (8009594 <HAL_RCC_ClockConfig+0x1f0>)
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	091b      	lsrs	r3, r3, #4
 8009564:	f003 030f 	and.w	r3, r3, #15
 8009568:	490b      	ldr	r1, [pc, #44]	; (8009598 <HAL_RCC_ClockConfig+0x1f4>)
 800956a:	5ccb      	ldrb	r3, [r1, r3]
 800956c:	f003 031f 	and.w	r3, r3, #31
 8009570:	fa22 f303 	lsr.w	r3, r2, r3
 8009574:	4a09      	ldr	r2, [pc, #36]	; (800959c <HAL_RCC_ClockConfig+0x1f8>)
 8009576:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009578:	4b09      	ldr	r3, [pc, #36]	; (80095a0 <HAL_RCC_ClockConfig+0x1fc>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4618      	mov	r0, r3
 800957e:	f7fb fb95 	bl	8004cac <HAL_InitTick>
 8009582:	4603      	mov	r3, r0
 8009584:	72fb      	strb	r3, [r7, #11]

  return status;
 8009586:	7afb      	ldrb	r3, [r7, #11]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	40022000 	.word	0x40022000
 8009594:	40021000 	.word	0x40021000
 8009598:	0801dbc0 	.word	0x0801dbc0
 800959c:	20000078 	.word	0x20000078
 80095a0:	20000080 	.word	0x20000080

080095a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b089      	sub	sp, #36	; 0x24
 80095a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	61fb      	str	r3, [r7, #28]
 80095ae:	2300      	movs	r3, #0
 80095b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095b2:	4b3e      	ldr	r3, [pc, #248]	; (80096ac <HAL_RCC_GetSysClockFreq+0x108>)
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f003 030c 	and.w	r3, r3, #12
 80095ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80095bc:	4b3b      	ldr	r3, [pc, #236]	; (80096ac <HAL_RCC_GetSysClockFreq+0x108>)
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	f003 0303 	and.w	r3, r3, #3
 80095c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d005      	beq.n	80095d8 <HAL_RCC_GetSysClockFreq+0x34>
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	2b0c      	cmp	r3, #12
 80095d0:	d121      	bne.n	8009616 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d11e      	bne.n	8009616 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80095d8:	4b34      	ldr	r3, [pc, #208]	; (80096ac <HAL_RCC_GetSysClockFreq+0x108>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0308 	and.w	r3, r3, #8
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d107      	bne.n	80095f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80095e4:	4b31      	ldr	r3, [pc, #196]	; (80096ac <HAL_RCC_GetSysClockFreq+0x108>)
 80095e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095ea:	0a1b      	lsrs	r3, r3, #8
 80095ec:	f003 030f 	and.w	r3, r3, #15
 80095f0:	61fb      	str	r3, [r7, #28]
 80095f2:	e005      	b.n	8009600 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80095f4:	4b2d      	ldr	r3, [pc, #180]	; (80096ac <HAL_RCC_GetSysClockFreq+0x108>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	091b      	lsrs	r3, r3, #4
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009600:	4a2b      	ldr	r2, [pc, #172]	; (80096b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009608:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10d      	bne.n	800962c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009614:	e00a      	b.n	800962c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	2b04      	cmp	r3, #4
 800961a:	d102      	bne.n	8009622 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800961c:	4b25      	ldr	r3, [pc, #148]	; (80096b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800961e:	61bb      	str	r3, [r7, #24]
 8009620:	e004      	b.n	800962c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	2b08      	cmp	r3, #8
 8009626:	d101      	bne.n	800962c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009628:	4b23      	ldr	r3, [pc, #140]	; (80096b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800962a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	2b0c      	cmp	r3, #12
 8009630:	d134      	bne.n	800969c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009632:	4b1e      	ldr	r3, [pc, #120]	; (80096ac <HAL_RCC_GetSysClockFreq+0x108>)
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	f003 0303 	and.w	r3, r3, #3
 800963a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b02      	cmp	r3, #2
 8009640:	d003      	beq.n	800964a <HAL_RCC_GetSysClockFreq+0xa6>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b03      	cmp	r3, #3
 8009646:	d003      	beq.n	8009650 <HAL_RCC_GetSysClockFreq+0xac>
 8009648:	e005      	b.n	8009656 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800964a:	4b1a      	ldr	r3, [pc, #104]	; (80096b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800964c:	617b      	str	r3, [r7, #20]
      break;
 800964e:	e005      	b.n	800965c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009650:	4b19      	ldr	r3, [pc, #100]	; (80096b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8009652:	617b      	str	r3, [r7, #20]
      break;
 8009654:	e002      	b.n	800965c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	617b      	str	r3, [r7, #20]
      break;
 800965a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800965c:	4b13      	ldr	r3, [pc, #76]	; (80096ac <HAL_RCC_GetSysClockFreq+0x108>)
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	091b      	lsrs	r3, r3, #4
 8009662:	f003 0307 	and.w	r3, r3, #7
 8009666:	3301      	adds	r3, #1
 8009668:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800966a:	4b10      	ldr	r3, [pc, #64]	; (80096ac <HAL_RCC_GetSysClockFreq+0x108>)
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	0a1b      	lsrs	r3, r3, #8
 8009670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	fb03 f202 	mul.w	r2, r3, r2
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009680:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009682:	4b0a      	ldr	r3, [pc, #40]	; (80096ac <HAL_RCC_GetSysClockFreq+0x108>)
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	0e5b      	lsrs	r3, r3, #25
 8009688:	f003 0303 	and.w	r3, r3, #3
 800968c:	3301      	adds	r3, #1
 800968e:	005b      	lsls	r3, r3, #1
 8009690:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	fbb2 f3f3 	udiv	r3, r2, r3
 800969a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800969c:	69bb      	ldr	r3, [r7, #24]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3724      	adds	r7, #36	; 0x24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	40021000 	.word	0x40021000
 80096b0:	0801dbd8 	.word	0x0801dbd8
 80096b4:	00f42400 	.word	0x00f42400
 80096b8:	007a1200 	.word	0x007a1200

080096bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096bc:	b480      	push	{r7}
 80096be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096c0:	4b03      	ldr	r3, [pc, #12]	; (80096d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80096c2:	681b      	ldr	r3, [r3, #0]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	20000078 	.word	0x20000078

080096d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80096d8:	f7ff fff0 	bl	80096bc <HAL_RCC_GetHCLKFreq>
 80096dc:	4602      	mov	r2, r0
 80096de:	4b06      	ldr	r3, [pc, #24]	; (80096f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	0a1b      	lsrs	r3, r3, #8
 80096e4:	f003 0307 	and.w	r3, r3, #7
 80096e8:	4904      	ldr	r1, [pc, #16]	; (80096fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80096ea:	5ccb      	ldrb	r3, [r1, r3]
 80096ec:	f003 031f 	and.w	r3, r3, #31
 80096f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	40021000 	.word	0x40021000
 80096fc:	0801dbd0 	.word	0x0801dbd0

08009700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009704:	f7ff ffda 	bl	80096bc <HAL_RCC_GetHCLKFreq>
 8009708:	4602      	mov	r2, r0
 800970a:	4b06      	ldr	r3, [pc, #24]	; (8009724 <HAL_RCC_GetPCLK2Freq+0x24>)
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	0adb      	lsrs	r3, r3, #11
 8009710:	f003 0307 	and.w	r3, r3, #7
 8009714:	4904      	ldr	r1, [pc, #16]	; (8009728 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009716:	5ccb      	ldrb	r3, [r1, r3]
 8009718:	f003 031f 	and.w	r3, r3, #31
 800971c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009720:	4618      	mov	r0, r3
 8009722:	bd80      	pop	{r7, pc}
 8009724:	40021000 	.word	0x40021000
 8009728:	0801dbd0 	.word	0x0801dbd0

0800972c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	220f      	movs	r2, #15
 800973a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800973c:	4b12      	ldr	r3, [pc, #72]	; (8009788 <HAL_RCC_GetClockConfig+0x5c>)
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f003 0203 	and.w	r2, r3, #3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009748:	4b0f      	ldr	r3, [pc, #60]	; (8009788 <HAL_RCC_GetClockConfig+0x5c>)
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009754:	4b0c      	ldr	r3, [pc, #48]	; (8009788 <HAL_RCC_GetClockConfig+0x5c>)
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009760:	4b09      	ldr	r3, [pc, #36]	; (8009788 <HAL_RCC_GetClockConfig+0x5c>)
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	08db      	lsrs	r3, r3, #3
 8009766:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800976e:	4b07      	ldr	r3, [pc, #28]	; (800978c <HAL_RCC_GetClockConfig+0x60>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 0207 	and.w	r2, r3, #7
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	601a      	str	r2, [r3, #0]
}
 800977a:	bf00      	nop
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	40021000 	.word	0x40021000
 800978c:	40022000 	.word	0x40022000

08009790 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009798:	2300      	movs	r3, #0
 800979a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800979c:	4b2a      	ldr	r3, [pc, #168]	; (8009848 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800979e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d003      	beq.n	80097b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80097a8:	f7ff f984 	bl	8008ab4 <HAL_PWREx_GetVoltageRange>
 80097ac:	6178      	str	r0, [r7, #20]
 80097ae:	e014      	b.n	80097da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80097b0:	4b25      	ldr	r3, [pc, #148]	; (8009848 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b4:	4a24      	ldr	r2, [pc, #144]	; (8009848 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ba:	6593      	str	r3, [r2, #88]	; 0x58
 80097bc:	4b22      	ldr	r3, [pc, #136]	; (8009848 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80097c8:	f7ff f974 	bl	8008ab4 <HAL_PWREx_GetVoltageRange>
 80097cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80097ce:	4b1e      	ldr	r3, [pc, #120]	; (8009848 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d2:	4a1d      	ldr	r2, [pc, #116]	; (8009848 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097e0:	d10b      	bne.n	80097fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b80      	cmp	r3, #128	; 0x80
 80097e6:	d919      	bls.n	800981c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2ba0      	cmp	r3, #160	; 0xa0
 80097ec:	d902      	bls.n	80097f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80097ee:	2302      	movs	r3, #2
 80097f0:	613b      	str	r3, [r7, #16]
 80097f2:	e013      	b.n	800981c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80097f4:	2301      	movs	r3, #1
 80097f6:	613b      	str	r3, [r7, #16]
 80097f8:	e010      	b.n	800981c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b80      	cmp	r3, #128	; 0x80
 80097fe:	d902      	bls.n	8009806 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009800:	2303      	movs	r3, #3
 8009802:	613b      	str	r3, [r7, #16]
 8009804:	e00a      	b.n	800981c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b80      	cmp	r3, #128	; 0x80
 800980a:	d102      	bne.n	8009812 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800980c:	2302      	movs	r3, #2
 800980e:	613b      	str	r3, [r7, #16]
 8009810:	e004      	b.n	800981c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b70      	cmp	r3, #112	; 0x70
 8009816:	d101      	bne.n	800981c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009818:	2301      	movs	r3, #1
 800981a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800981c:	4b0b      	ldr	r3, [pc, #44]	; (800984c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f023 0207 	bic.w	r2, r3, #7
 8009824:	4909      	ldr	r1, [pc, #36]	; (800984c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	4313      	orrs	r3, r2
 800982a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800982c:	4b07      	ldr	r3, [pc, #28]	; (800984c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f003 0307 	and.w	r3, r3, #7
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	429a      	cmp	r2, r3
 8009838:	d001      	beq.n	800983e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	40021000 	.word	0x40021000
 800984c:	40022000 	.word	0x40022000

08009850 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009858:	2300      	movs	r3, #0
 800985a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800985c:	2300      	movs	r3, #0
 800985e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009868:	2b00      	cmp	r3, #0
 800986a:	d031      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009870:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009874:	d01a      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8009876:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800987a:	d814      	bhi.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800987c:	2b00      	cmp	r3, #0
 800987e:	d009      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009880:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009884:	d10f      	bne.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8009886:	4b5d      	ldr	r3, [pc, #372]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	4a5c      	ldr	r2, [pc, #368]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800988c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009890:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009892:	e00c      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3304      	adds	r3, #4
 8009898:	2100      	movs	r1, #0
 800989a:	4618      	mov	r0, r3
 800989c:	f000 f9de 	bl	8009c5c <RCCEx_PLLSAI1_Config>
 80098a0:	4603      	mov	r3, r0
 80098a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80098a4:	e003      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	74fb      	strb	r3, [r7, #19]
      break;
 80098aa:	e000      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80098ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ae:	7cfb      	ldrb	r3, [r7, #19]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10b      	bne.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098b4:	4b51      	ldr	r3, [pc, #324]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c2:	494e      	ldr	r1, [pc, #312]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098c4:	4313      	orrs	r3, r2
 80098c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80098ca:	e001      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098cc:	7cfb      	ldrb	r3, [r7, #19]
 80098ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 809e 	beq.w	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098de:	2300      	movs	r3, #0
 80098e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80098e2:	4b46      	ldr	r3, [pc, #280]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d101      	bne.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80098ee:	2301      	movs	r3, #1
 80098f0:	e000      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80098f2:	2300      	movs	r3, #0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00d      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098f8:	4b40      	ldr	r3, [pc, #256]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098fc:	4a3f      	ldr	r2, [pc, #252]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009902:	6593      	str	r3, [r2, #88]	; 0x58
 8009904:	4b3d      	ldr	r3, [pc, #244]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800990c:	60bb      	str	r3, [r7, #8]
 800990e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009910:	2301      	movs	r3, #1
 8009912:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009914:	4b3a      	ldr	r3, [pc, #232]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a39      	ldr	r2, [pc, #228]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800991a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800991e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009920:	f7fb ff90 	bl	8005844 <HAL_GetTick>
 8009924:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009926:	e009      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009928:	f7fb ff8c 	bl	8005844 <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	2b02      	cmp	r3, #2
 8009934:	d902      	bls.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	74fb      	strb	r3, [r7, #19]
        break;
 800993a:	e005      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800993c:	4b30      	ldr	r3, [pc, #192]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009944:	2b00      	cmp	r3, #0
 8009946:	d0ef      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8009948:	7cfb      	ldrb	r3, [r7, #19]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d15a      	bne.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800994e:	4b2b      	ldr	r3, [pc, #172]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009958:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d01e      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	429a      	cmp	r2, r3
 8009968:	d019      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800996a:	4b24      	ldr	r3, [pc, #144]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800996c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009974:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009976:	4b21      	ldr	r3, [pc, #132]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800997c:	4a1f      	ldr	r2, [pc, #124]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800997e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009986:	4b1d      	ldr	r3, [pc, #116]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800998c:	4a1b      	ldr	r2, [pc, #108]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800998e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009996:	4a19      	ldr	r2, [pc, #100]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d016      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a8:	f7fb ff4c 	bl	8005844 <HAL_GetTick>
 80099ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099ae:	e00b      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099b0:	f7fb ff48 	bl	8005844 <HAL_GetTick>
 80099b4:	4602      	mov	r2, r0
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80099be:	4293      	cmp	r3, r2
 80099c0:	d902      	bls.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	74fb      	strb	r3, [r7, #19]
            break;
 80099c6:	e006      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099c8:	4b0c      	ldr	r3, [pc, #48]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80099ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ce:	f003 0302 	and.w	r3, r3, #2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d0ec      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80099d6:	7cfb      	ldrb	r3, [r7, #19]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10b      	bne.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099dc:	4b07      	ldr	r3, [pc, #28]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80099de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ea:	4904      	ldr	r1, [pc, #16]	; (80099fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80099f2:	e009      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099f4:	7cfb      	ldrb	r3, [r7, #19]
 80099f6:	74bb      	strb	r3, [r7, #18]
 80099f8:	e006      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80099fa:	bf00      	nop
 80099fc:	40021000 	.word	0x40021000
 8009a00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a04:	7cfb      	ldrb	r3, [r7, #19]
 8009a06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a08:	7c7b      	ldrb	r3, [r7, #17]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d105      	bne.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a0e:	4b8a      	ldr	r3, [pc, #552]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a12:	4a89      	ldr	r2, [pc, #548]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00a      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a26:	4b84      	ldr	r3, [pc, #528]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a2c:	f023 0203 	bic.w	r2, r3, #3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a1b      	ldr	r3, [r3, #32]
 8009a34:	4980      	ldr	r1, [pc, #512]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0302 	and.w	r3, r3, #2
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00a      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a48:	4b7b      	ldr	r3, [pc, #492]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a4e:	f023 020c 	bic.w	r2, r3, #12
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a56:	4978      	ldr	r1, [pc, #480]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00a      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a6a:	4b73      	ldr	r3, [pc, #460]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a78:	496f      	ldr	r1, [pc, #444]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00a      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a8c:	4b6a      	ldr	r3, [pc, #424]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a92:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a9a:	4967      	ldr	r1, [pc, #412]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00a      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009aae:	4b62      	ldr	r3, [pc, #392]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abc:	495e      	ldr	r1, [pc, #376]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00a      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009ad0:	4b59      	ldr	r3, [pc, #356]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ade:	4956      	ldr	r1, [pc, #344]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00a      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009af2:	4b51      	ldr	r3, [pc, #324]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009af8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b00:	494d      	ldr	r1, [pc, #308]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d028      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b14:	4b48      	ldr	r3, [pc, #288]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b22:	4945      	ldr	r1, [pc, #276]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b24:	4313      	orrs	r3, r2
 8009b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b32:	d106      	bne.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b34:	4b40      	ldr	r3, [pc, #256]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	4a3f      	ldr	r2, [pc, #252]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b3e:	60d3      	str	r3, [r2, #12]
 8009b40:	e011      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b4a:	d10c      	bne.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	2101      	movs	r1, #1
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 f882 	bl	8009c5c <RCCEx_PLLSAI1_Config>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009b5c:	7cfb      	ldrb	r3, [r7, #19]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8009b62:	7cfb      	ldrb	r3, [r7, #19]
 8009b64:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d028      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b72:	4b31      	ldr	r3, [pc, #196]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b80:	492d      	ldr	r1, [pc, #180]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b90:	d106      	bne.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b92:	4b29      	ldr	r3, [pc, #164]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	4a28      	ldr	r2, [pc, #160]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b9c:	60d3      	str	r3, [r2, #12]
 8009b9e:	e011      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ba8:	d10c      	bne.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	3304      	adds	r3, #4
 8009bae:	2101      	movs	r1, #1
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 f853 	bl	8009c5c <RCCEx_PLLSAI1_Config>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009bba:	7cfb      	ldrb	r3, [r7, #19]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8009bc0:	7cfb      	ldrb	r3, [r7, #19]
 8009bc2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d01c      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009bd0:	4b19      	ldr	r3, [pc, #100]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bde:	4916      	ldr	r1, [pc, #88]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bee:	d10c      	bne.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	2102      	movs	r1, #2
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 f830 	bl	8009c5c <RCCEx_PLLSAI1_Config>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009c00:	7cfb      	ldrb	r3, [r7, #19]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8009c06:	7cfb      	ldrb	r3, [r7, #19]
 8009c08:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c16:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c1c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c24:	4904      	ldr	r1, [pc, #16]	; (8009c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009c2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3718      	adds	r7, #24
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	40021000 	.word	0x40021000

08009c3c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009c40:	4b05      	ldr	r3, [pc, #20]	; (8009c58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a04      	ldr	r2, [pc, #16]	; (8009c58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009c46:	f043 0304 	orr.w	r3, r3, #4
 8009c4a:	6013      	str	r3, [r2, #0]
}
 8009c4c:	bf00      	nop
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	40021000 	.word	0x40021000

08009c5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009c6a:	4b74      	ldr	r3, [pc, #464]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	f003 0303 	and.w	r3, r3, #3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d018      	beq.n	8009ca8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009c76:	4b71      	ldr	r3, [pc, #452]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	f003 0203 	and.w	r2, r3, #3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d10d      	bne.n	8009ca2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
       ||
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d009      	beq.n	8009ca2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009c8e:	4b6b      	ldr	r3, [pc, #428]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	091b      	lsrs	r3, r3, #4
 8009c94:	f003 0307 	and.w	r3, r3, #7
 8009c98:	1c5a      	adds	r2, r3, #1
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685b      	ldr	r3, [r3, #4]
       ||
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d047      	beq.n	8009d32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	73fb      	strb	r3, [r7, #15]
 8009ca6:	e044      	b.n	8009d32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b03      	cmp	r3, #3
 8009cae:	d018      	beq.n	8009ce2 <RCCEx_PLLSAI1_Config+0x86>
 8009cb0:	2b03      	cmp	r3, #3
 8009cb2:	d825      	bhi.n	8009d00 <RCCEx_PLLSAI1_Config+0xa4>
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d002      	beq.n	8009cbe <RCCEx_PLLSAI1_Config+0x62>
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d009      	beq.n	8009cd0 <RCCEx_PLLSAI1_Config+0x74>
 8009cbc:	e020      	b.n	8009d00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009cbe:	4b5f      	ldr	r3, [pc, #380]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0302 	and.w	r3, r3, #2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d11d      	bne.n	8009d06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009cce:	e01a      	b.n	8009d06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009cd0:	4b5a      	ldr	r3, [pc, #360]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d116      	bne.n	8009d0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ce0:	e013      	b.n	8009d0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009ce2:	4b56      	ldr	r3, [pc, #344]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10f      	bne.n	8009d0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009cee:	4b53      	ldr	r3, [pc, #332]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d109      	bne.n	8009d0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009cfe:	e006      	b.n	8009d0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	73fb      	strb	r3, [r7, #15]
      break;
 8009d04:	e004      	b.n	8009d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009d06:	bf00      	nop
 8009d08:	e002      	b.n	8009d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009d0a:	bf00      	nop
 8009d0c:	e000      	b.n	8009d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009d0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10d      	bne.n	8009d32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009d16:	4b49      	ldr	r3, [pc, #292]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6819      	ldr	r1, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	011b      	lsls	r3, r3, #4
 8009d2a:	430b      	orrs	r3, r1
 8009d2c:	4943      	ldr	r1, [pc, #268]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d17c      	bne.n	8009e32 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009d38:	4b40      	ldr	r3, [pc, #256]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a3f      	ldr	r2, [pc, #252]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d44:	f7fb fd7e 	bl	8005844 <HAL_GetTick>
 8009d48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009d4a:	e009      	b.n	8009d60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009d4c:	f7fb fd7a 	bl	8005844 <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d902      	bls.n	8009d60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	73fb      	strb	r3, [r7, #15]
        break;
 8009d5e:	e005      	b.n	8009d6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009d60:	4b36      	ldr	r3, [pc, #216]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1ef      	bne.n	8009d4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d15f      	bne.n	8009e32 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d110      	bne.n	8009d9a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009d78:	4b30      	ldr	r3, [pc, #192]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009d80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	6892      	ldr	r2, [r2, #8]
 8009d88:	0211      	lsls	r1, r2, #8
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	68d2      	ldr	r2, [r2, #12]
 8009d8e:	06d2      	lsls	r2, r2, #27
 8009d90:	430a      	orrs	r2, r1
 8009d92:	492a      	ldr	r1, [pc, #168]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	610b      	str	r3, [r1, #16]
 8009d98:	e027      	b.n	8009dea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d112      	bne.n	8009dc6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009da0:	4b26      	ldr	r3, [pc, #152]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009da8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	6892      	ldr	r2, [r2, #8]
 8009db0:	0211      	lsls	r1, r2, #8
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	6912      	ldr	r2, [r2, #16]
 8009db6:	0852      	lsrs	r2, r2, #1
 8009db8:	3a01      	subs	r2, #1
 8009dba:	0552      	lsls	r2, r2, #21
 8009dbc:	430a      	orrs	r2, r1
 8009dbe:	491f      	ldr	r1, [pc, #124]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	610b      	str	r3, [r1, #16]
 8009dc4:	e011      	b.n	8009dea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009dc6:	4b1d      	ldr	r3, [pc, #116]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009dce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	6892      	ldr	r2, [r2, #8]
 8009dd6:	0211      	lsls	r1, r2, #8
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	6952      	ldr	r2, [r2, #20]
 8009ddc:	0852      	lsrs	r2, r2, #1
 8009dde:	3a01      	subs	r2, #1
 8009de0:	0652      	lsls	r2, r2, #25
 8009de2:	430a      	orrs	r2, r1
 8009de4:	4915      	ldr	r1, [pc, #84]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009de6:	4313      	orrs	r3, r2
 8009de8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009dea:	4b14      	ldr	r3, [pc, #80]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a13      	ldr	r2, [pc, #76]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009df0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009df4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009df6:	f7fb fd25 	bl	8005844 <HAL_GetTick>
 8009dfa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009dfc:	e009      	b.n	8009e12 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009dfe:	f7fb fd21 	bl	8005844 <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d902      	bls.n	8009e12 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	73fb      	strb	r3, [r7, #15]
          break;
 8009e10:	e005      	b.n	8009e1e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009e12:	4b0a      	ldr	r3, [pc, #40]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0ef      	beq.n	8009dfe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d106      	bne.n	8009e32 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009e24:	4b05      	ldr	r3, [pc, #20]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e26:	691a      	ldr	r2, [r3, #16]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	4903      	ldr	r1, [pc, #12]	; (8009e3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	40021000 	.word	0x40021000

08009e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e049      	b.n	8009ee6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d106      	bne.n	8009e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7fa fe6a 	bl	8004b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2202      	movs	r2, #2
 8009e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f000 fae6 	bl	800a450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d001      	beq.n	8009f08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e033      	b.n	8009f70 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a19      	ldr	r2, [pc, #100]	; (8009f7c <HAL_TIM_Base_Start+0x8c>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d009      	beq.n	8009f2e <HAL_TIM_Base_Start+0x3e>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f22:	d004      	beq.n	8009f2e <HAL_TIM_Base_Start+0x3e>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a15      	ldr	r2, [pc, #84]	; (8009f80 <HAL_TIM_Base_Start+0x90>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d115      	bne.n	8009f5a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	689a      	ldr	r2, [r3, #8]
 8009f34:	4b13      	ldr	r3, [pc, #76]	; (8009f84 <HAL_TIM_Base_Start+0x94>)
 8009f36:	4013      	ands	r3, r2
 8009f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b06      	cmp	r3, #6
 8009f3e:	d015      	beq.n	8009f6c <HAL_TIM_Base_Start+0x7c>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f46:	d011      	beq.n	8009f6c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f042 0201 	orr.w	r2, r2, #1
 8009f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f58:	e008      	b.n	8009f6c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f042 0201 	orr.w	r2, r2, #1
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	e000      	b.n	8009f6e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	40012c00 	.word	0x40012c00
 8009f80:	40014000 	.word	0x40014000
 8009f84:	00010007 	.word	0x00010007

08009f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d001      	beq.n	8009fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e03b      	b.n	800a018 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68da      	ldr	r2, [r3, #12]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f042 0201 	orr.w	r2, r2, #1
 8009fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a19      	ldr	r2, [pc, #100]	; (800a024 <HAL_TIM_Base_Start_IT+0x9c>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d009      	beq.n	8009fd6 <HAL_TIM_Base_Start_IT+0x4e>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fca:	d004      	beq.n	8009fd6 <HAL_TIM_Base_Start_IT+0x4e>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a15      	ldr	r2, [pc, #84]	; (800a028 <HAL_TIM_Base_Start_IT+0xa0>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d115      	bne.n	800a002 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	4b13      	ldr	r3, [pc, #76]	; (800a02c <HAL_TIM_Base_Start_IT+0xa4>)
 8009fde:	4013      	ands	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2b06      	cmp	r3, #6
 8009fe6:	d015      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0x8c>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fee:	d011      	beq.n	800a014 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f042 0201 	orr.w	r2, r2, #1
 8009ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a000:	e008      	b.n	800a014 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f042 0201 	orr.w	r2, r2, #1
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	e000      	b.n	800a016 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a014:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3714      	adds	r7, #20
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	40012c00 	.word	0x40012c00
 800a028:	40014000 	.word	0x40014000
 800a02c:	00010007 	.word	0x00010007

0800a030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	f003 0302 	and.w	r3, r3, #2
 800a042:	2b02      	cmp	r3, #2
 800a044:	d122      	bne.n	800a08c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f003 0302 	and.w	r3, r3, #2
 800a050:	2b02      	cmp	r3, #2
 800a052:	d11b      	bne.n	800a08c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f06f 0202 	mvn.w	r2, #2
 800a05c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	f003 0303 	and.w	r3, r3, #3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d003      	beq.n	800a07a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f9ce 	bl	800a414 <HAL_TIM_IC_CaptureCallback>
 800a078:	e005      	b.n	800a086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f9c0 	bl	800a400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 f9d1 	bl	800a428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	f003 0304 	and.w	r3, r3, #4
 800a096:	2b04      	cmp	r3, #4
 800a098:	d122      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	f003 0304 	and.w	r3, r3, #4
 800a0a4:	2b04      	cmp	r3, #4
 800a0a6:	d11b      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f06f 0204 	mvn.w	r2, #4
 800a0b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2202      	movs	r2, #2
 800a0b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d003      	beq.n	800a0ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f9a4 	bl	800a414 <HAL_TIM_IC_CaptureCallback>
 800a0cc:	e005      	b.n	800a0da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f996 	bl	800a400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f9a7 	bl	800a428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	f003 0308 	and.w	r3, r3, #8
 800a0ea:	2b08      	cmp	r3, #8
 800a0ec:	d122      	bne.n	800a134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	f003 0308 	and.w	r3, r3, #8
 800a0f8:	2b08      	cmp	r3, #8
 800a0fa:	d11b      	bne.n	800a134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f06f 0208 	mvn.w	r2, #8
 800a104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2204      	movs	r2, #4
 800a10a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	69db      	ldr	r3, [r3, #28]
 800a112:	f003 0303 	and.w	r3, r3, #3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f97a 	bl	800a414 <HAL_TIM_IC_CaptureCallback>
 800a120:	e005      	b.n	800a12e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f96c 	bl	800a400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f97d 	bl	800a428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f003 0310 	and.w	r3, r3, #16
 800a13e:	2b10      	cmp	r3, #16
 800a140:	d122      	bne.n	800a188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	f003 0310 	and.w	r3, r3, #16
 800a14c:	2b10      	cmp	r3, #16
 800a14e:	d11b      	bne.n	800a188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f06f 0210 	mvn.w	r2, #16
 800a158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2208      	movs	r2, #8
 800a15e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d003      	beq.n	800a176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f950 	bl	800a414 <HAL_TIM_IC_CaptureCallback>
 800a174:	e005      	b.n	800a182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f942 	bl	800a400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f953 	bl	800a428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	f003 0301 	and.w	r3, r3, #1
 800a192:	2b01      	cmp	r3, #1
 800a194:	d10e      	bne.n	800a1b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	f003 0301 	and.w	r3, r3, #1
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d107      	bne.n	800a1b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f06f 0201 	mvn.w	r2, #1
 800a1ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7fa faee 	bl	8004790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1be:	2b80      	cmp	r3, #128	; 0x80
 800a1c0:	d10e      	bne.n	800a1e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1cc:	2b80      	cmp	r3, #128	; 0x80
 800a1ce:	d107      	bne.n	800a1e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 faa6 	bl	800a72c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ee:	d10e      	bne.n	800a20e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1fa:	2b80      	cmp	r3, #128	; 0x80
 800a1fc:	d107      	bne.n	800a20e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fa99 	bl	800a740 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a218:	2b40      	cmp	r3, #64	; 0x40
 800a21a:	d10e      	bne.n	800a23a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a226:	2b40      	cmp	r3, #64	; 0x40
 800a228:	d107      	bne.n	800a23a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f901 	bl	800a43c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	f003 0320 	and.w	r3, r3, #32
 800a244:	2b20      	cmp	r3, #32
 800a246:	d10e      	bne.n	800a266 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	f003 0320 	and.w	r3, r3, #32
 800a252:	2b20      	cmp	r3, #32
 800a254:	d107      	bne.n	800a266 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f06f 0220 	mvn.w	r2, #32
 800a25e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fa59 	bl	800a718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a266:	bf00      	nop
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a282:	2b01      	cmp	r3, #1
 800a284:	d101      	bne.n	800a28a <HAL_TIM_ConfigClockSource+0x1c>
 800a286:	2302      	movs	r3, #2
 800a288:	e0b6      	b.n	800a3f8 <HAL_TIM_ConfigClockSource+0x18a>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2202      	movs	r2, #2
 800a296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a2ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2c6:	d03e      	beq.n	800a346 <HAL_TIM_ConfigClockSource+0xd8>
 800a2c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2cc:	f200 8087 	bhi.w	800a3de <HAL_TIM_ConfigClockSource+0x170>
 800a2d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2d4:	f000 8086 	beq.w	800a3e4 <HAL_TIM_ConfigClockSource+0x176>
 800a2d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2dc:	d87f      	bhi.n	800a3de <HAL_TIM_ConfigClockSource+0x170>
 800a2de:	2b70      	cmp	r3, #112	; 0x70
 800a2e0:	d01a      	beq.n	800a318 <HAL_TIM_ConfigClockSource+0xaa>
 800a2e2:	2b70      	cmp	r3, #112	; 0x70
 800a2e4:	d87b      	bhi.n	800a3de <HAL_TIM_ConfigClockSource+0x170>
 800a2e6:	2b60      	cmp	r3, #96	; 0x60
 800a2e8:	d050      	beq.n	800a38c <HAL_TIM_ConfigClockSource+0x11e>
 800a2ea:	2b60      	cmp	r3, #96	; 0x60
 800a2ec:	d877      	bhi.n	800a3de <HAL_TIM_ConfigClockSource+0x170>
 800a2ee:	2b50      	cmp	r3, #80	; 0x50
 800a2f0:	d03c      	beq.n	800a36c <HAL_TIM_ConfigClockSource+0xfe>
 800a2f2:	2b50      	cmp	r3, #80	; 0x50
 800a2f4:	d873      	bhi.n	800a3de <HAL_TIM_ConfigClockSource+0x170>
 800a2f6:	2b40      	cmp	r3, #64	; 0x40
 800a2f8:	d058      	beq.n	800a3ac <HAL_TIM_ConfigClockSource+0x13e>
 800a2fa:	2b40      	cmp	r3, #64	; 0x40
 800a2fc:	d86f      	bhi.n	800a3de <HAL_TIM_ConfigClockSource+0x170>
 800a2fe:	2b30      	cmp	r3, #48	; 0x30
 800a300:	d064      	beq.n	800a3cc <HAL_TIM_ConfigClockSource+0x15e>
 800a302:	2b30      	cmp	r3, #48	; 0x30
 800a304:	d86b      	bhi.n	800a3de <HAL_TIM_ConfigClockSource+0x170>
 800a306:	2b20      	cmp	r3, #32
 800a308:	d060      	beq.n	800a3cc <HAL_TIM_ConfigClockSource+0x15e>
 800a30a:	2b20      	cmp	r3, #32
 800a30c:	d867      	bhi.n	800a3de <HAL_TIM_ConfigClockSource+0x170>
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d05c      	beq.n	800a3cc <HAL_TIM_ConfigClockSource+0x15e>
 800a312:	2b10      	cmp	r3, #16
 800a314:	d05a      	beq.n	800a3cc <HAL_TIM_ConfigClockSource+0x15e>
 800a316:	e062      	b.n	800a3de <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6818      	ldr	r0, [r3, #0]
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	6899      	ldr	r1, [r3, #8]
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685a      	ldr	r2, [r3, #4]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f000 f970 	bl	800a60c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a33a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68ba      	ldr	r2, [r7, #8]
 800a342:	609a      	str	r2, [r3, #8]
      break;
 800a344:	e04f      	b.n	800a3e6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6818      	ldr	r0, [r3, #0]
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	6899      	ldr	r1, [r3, #8]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	f000 f959 	bl	800a60c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689a      	ldr	r2, [r3, #8]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a368:	609a      	str	r2, [r3, #8]
      break;
 800a36a:	e03c      	b.n	800a3e6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6818      	ldr	r0, [r3, #0]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	6859      	ldr	r1, [r3, #4]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	461a      	mov	r2, r3
 800a37a:	f000 f8cd 	bl	800a518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2150      	movs	r1, #80	; 0x50
 800a384:	4618      	mov	r0, r3
 800a386:	f000 f926 	bl	800a5d6 <TIM_ITRx_SetConfig>
      break;
 800a38a:	e02c      	b.n	800a3e6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6818      	ldr	r0, [r3, #0]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	6859      	ldr	r1, [r3, #4]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	461a      	mov	r2, r3
 800a39a:	f000 f8ec 	bl	800a576 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2160      	movs	r1, #96	; 0x60
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 f916 	bl	800a5d6 <TIM_ITRx_SetConfig>
      break;
 800a3aa:	e01c      	b.n	800a3e6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6818      	ldr	r0, [r3, #0]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	6859      	ldr	r1, [r3, #4]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	f000 f8ad 	bl	800a518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2140      	movs	r1, #64	; 0x40
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 f906 	bl	800a5d6 <TIM_ITRx_SetConfig>
      break;
 800a3ca:	e00c      	b.n	800a3e6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4610      	mov	r0, r2
 800a3d8:	f000 f8fd 	bl	800a5d6 <TIM_ITRx_SetConfig>
      break;
 800a3dc:	e003      	b.n	800a3e6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e2:	e000      	b.n	800a3e6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a3e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a2a      	ldr	r2, [pc, #168]	; (800a50c <TIM_Base_SetConfig+0xbc>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d003      	beq.n	800a470 <TIM_Base_SetConfig+0x20>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a46e:	d108      	bne.n	800a482 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	4313      	orrs	r3, r2
 800a480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a21      	ldr	r2, [pc, #132]	; (800a50c <TIM_Base_SetConfig+0xbc>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d00b      	beq.n	800a4a2 <TIM_Base_SetConfig+0x52>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a490:	d007      	beq.n	800a4a2 <TIM_Base_SetConfig+0x52>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a1e      	ldr	r2, [pc, #120]	; (800a510 <TIM_Base_SetConfig+0xc0>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d003      	beq.n	800a4a2 <TIM_Base_SetConfig+0x52>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a1d      	ldr	r2, [pc, #116]	; (800a514 <TIM_Base_SetConfig+0xc4>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d108      	bne.n	800a4b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	689a      	ldr	r2, [r3, #8]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a0c      	ldr	r2, [pc, #48]	; (800a50c <TIM_Base_SetConfig+0xbc>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d007      	beq.n	800a4f0 <TIM_Base_SetConfig+0xa0>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a0b      	ldr	r2, [pc, #44]	; (800a510 <TIM_Base_SetConfig+0xc0>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d003      	beq.n	800a4f0 <TIM_Base_SetConfig+0xa0>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a0a      	ldr	r2, [pc, #40]	; (800a514 <TIM_Base_SetConfig+0xc4>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d103      	bne.n	800a4f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	691a      	ldr	r2, [r3, #16]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	615a      	str	r2, [r3, #20]
}
 800a4fe:	bf00      	nop
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	40012c00 	.word	0x40012c00
 800a510:	40014000 	.word	0x40014000
 800a514:	40014400 	.word	0x40014400

0800a518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a518:	b480      	push	{r7}
 800a51a:	b087      	sub	sp, #28
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6a1b      	ldr	r3, [r3, #32]
 800a52e:	f023 0201 	bic.w	r2, r3, #1
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	011b      	lsls	r3, r3, #4
 800a548:	693a      	ldr	r2, [r7, #16]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f023 030a 	bic.w	r3, r3, #10
 800a554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	697a      	ldr	r2, [r7, #20]
 800a568:	621a      	str	r2, [r3, #32]
}
 800a56a:	bf00      	nop
 800a56c:	371c      	adds	r7, #28
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a576:	b480      	push	{r7}
 800a578:	b087      	sub	sp, #28
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	60b9      	str	r1, [r7, #8]
 800a580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	f023 0210 	bic.w	r2, r3, #16
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6a1b      	ldr	r3, [r3, #32]
 800a598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	031b      	lsls	r3, r3, #12
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	011b      	lsls	r3, r3, #4
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	697a      	ldr	r2, [r7, #20]
 800a5c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	621a      	str	r2, [r3, #32]
}
 800a5ca:	bf00      	nop
 800a5cc:	371c      	adds	r7, #28
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b085      	sub	sp, #20
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	f043 0307 	orr.w	r3, r3, #7
 800a5f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	609a      	str	r2, [r3, #8]
}
 800a600:	bf00      	nop
 800a602:	3714      	adds	r7, #20
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b087      	sub	sp, #28
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	021a      	lsls	r2, r3, #8
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	431a      	orrs	r2, r3
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	4313      	orrs	r3, r2
 800a634:	697a      	ldr	r2, [r7, #20]
 800a636:	4313      	orrs	r3, r2
 800a638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	697a      	ldr	r2, [r7, #20]
 800a63e:	609a      	str	r2, [r3, #8]
}
 800a640:	bf00      	nop
 800a642:	371c      	adds	r7, #28
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d101      	bne.n	800a664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a660:	2302      	movs	r3, #2
 800a662:	e04f      	b.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2202      	movs	r2, #2
 800a670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a21      	ldr	r2, [pc, #132]	; (800a710 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d108      	bne.n	800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a694:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	68fa      	ldr	r2, [r7, #12]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a14      	ldr	r2, [pc, #80]	; (800a710 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d009      	beq.n	800a6d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6cc:	d004      	beq.n	800a6d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a10      	ldr	r2, [pc, #64]	; (800a714 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d10c      	bne.n	800a6f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3714      	adds	r7, #20
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr
 800a710:	40012c00 	.word	0x40012c00
 800a714:	40014000 	.word	0x40014000

0800a718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d101      	bne.n	800a766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	e040      	b.n	800a7e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d106      	bne.n	800a77c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7fa fa2e 	bl	8004bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2224      	movs	r2, #36	; 0x24
 800a780:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f022 0201 	bic.w	r2, r2, #1
 800a790:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f8c0 	bl	800a918 <UART_SetConfig>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d101      	bne.n	800a7a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e022      	b.n	800a7e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d002      	beq.n	800a7b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fae0 	bl	800ad70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	689a      	ldr	r2, [r3, #8]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f042 0201 	orr.w	r2, r2, #1
 800a7de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fb67 	bl	800aeb4 <UART_CheckIdleState>
 800a7e6:	4603      	mov	r3, r0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08a      	sub	sp, #40	; 0x28
 800a7f4:	af02      	add	r7, sp, #8
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	603b      	str	r3, [r7, #0]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a804:	2b20      	cmp	r3, #32
 800a806:	f040 8082 	bne.w	800a90e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d002      	beq.n	800a816 <HAL_UART_Transmit+0x26>
 800a810:	88fb      	ldrh	r3, [r7, #6]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e07a      	b.n	800a910 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a820:	2b01      	cmp	r3, #1
 800a822:	d101      	bne.n	800a828 <HAL_UART_Transmit+0x38>
 800a824:	2302      	movs	r3, #2
 800a826:	e073      	b.n	800a910 <HAL_UART_Transmit+0x120>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2221      	movs	r2, #33	; 0x21
 800a83c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a83e:	f7fb f801 	bl	8005844 <HAL_GetTick>
 800a842:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	88fa      	ldrh	r2, [r7, #6]
 800a848:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	88fa      	ldrh	r2, [r7, #6]
 800a850:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a85c:	d108      	bne.n	800a870 <HAL_UART_Transmit+0x80>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d104      	bne.n	800a870 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a866:	2300      	movs	r3, #0
 800a868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	61bb      	str	r3, [r7, #24]
 800a86e:	e003      	b.n	800a878 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a874:	2300      	movs	r3, #0
 800a876:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a880:	e02d      	b.n	800a8de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2200      	movs	r2, #0
 800a88a:	2180      	movs	r1, #128	; 0x80
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 fb5a 	bl	800af46 <UART_WaitOnFlagUntilTimeout>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a898:	2303      	movs	r3, #3
 800a89a:	e039      	b.n	800a910 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10b      	bne.n	800a8ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	881a      	ldrh	r2, [r3, #0]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8ae:	b292      	uxth	r2, r2
 800a8b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	3302      	adds	r3, #2
 800a8b6:	61bb      	str	r3, [r7, #24]
 800a8b8:	e008      	b.n	800a8cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	781a      	ldrb	r2, [r3, #0]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	b292      	uxth	r2, r2
 800a8c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1cb      	bne.n	800a882 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	2140      	movs	r1, #64	; 0x40
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f000 fb26 	bl	800af46 <UART_WaitOnFlagUntilTimeout>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e005      	b.n	800a910 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2220      	movs	r2, #32
 800a908:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a90a:	2300      	movs	r3, #0
 800a90c:	e000      	b.n	800a910 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a90e:	2302      	movs	r3, #2
  }
}
 800a910:	4618      	mov	r0, r3
 800a912:	3720      	adds	r7, #32
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a91c:	b08a      	sub	sp, #40	; 0x28
 800a91e:	af00      	add	r7, sp, #0
 800a920:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	689a      	ldr	r2, [r3, #8]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	431a      	orrs	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	431a      	orrs	r2, r3
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	69db      	ldr	r3, [r3, #28]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	4bb4      	ldr	r3, [pc, #720]	; (800ac18 <UART_SetConfig+0x300>)
 800a948:	4013      	ands	r3, r2
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	6812      	ldr	r2, [r2, #0]
 800a94e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a950:	430b      	orrs	r3, r1
 800a952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	68da      	ldr	r2, [r3, #12]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	430a      	orrs	r2, r1
 800a968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4aa9      	ldr	r2, [pc, #676]	; (800ac1c <UART_SetConfig+0x304>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d004      	beq.n	800a984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a980:	4313      	orrs	r3, r2
 800a982:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a994:	430a      	orrs	r2, r1
 800a996:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4aa0      	ldr	r2, [pc, #640]	; (800ac20 <UART_SetConfig+0x308>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d126      	bne.n	800a9f0 <UART_SetConfig+0xd8>
 800a9a2:	4ba0      	ldr	r3, [pc, #640]	; (800ac24 <UART_SetConfig+0x30c>)
 800a9a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a8:	f003 0303 	and.w	r3, r3, #3
 800a9ac:	2b03      	cmp	r3, #3
 800a9ae:	d81b      	bhi.n	800a9e8 <UART_SetConfig+0xd0>
 800a9b0:	a201      	add	r2, pc, #4	; (adr r2, 800a9b8 <UART_SetConfig+0xa0>)
 800a9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b6:	bf00      	nop
 800a9b8:	0800a9c9 	.word	0x0800a9c9
 800a9bc:	0800a9d9 	.word	0x0800a9d9
 800a9c0:	0800a9d1 	.word	0x0800a9d1
 800a9c4:	0800a9e1 	.word	0x0800a9e1
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9ce:	e080      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9d6:	e07c      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800a9d8:	2304      	movs	r3, #4
 800a9da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9de:	e078      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800a9e0:	2308      	movs	r3, #8
 800a9e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9e6:	e074      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800a9e8:	2310      	movs	r3, #16
 800a9ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9ee:	e070      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a8c      	ldr	r2, [pc, #560]	; (800ac28 <UART_SetConfig+0x310>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d138      	bne.n	800aa6c <UART_SetConfig+0x154>
 800a9fa:	4b8a      	ldr	r3, [pc, #552]	; (800ac24 <UART_SetConfig+0x30c>)
 800a9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa00:	f003 030c 	and.w	r3, r3, #12
 800aa04:	2b0c      	cmp	r3, #12
 800aa06:	d82d      	bhi.n	800aa64 <UART_SetConfig+0x14c>
 800aa08:	a201      	add	r2, pc, #4	; (adr r2, 800aa10 <UART_SetConfig+0xf8>)
 800aa0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0e:	bf00      	nop
 800aa10:	0800aa45 	.word	0x0800aa45
 800aa14:	0800aa65 	.word	0x0800aa65
 800aa18:	0800aa65 	.word	0x0800aa65
 800aa1c:	0800aa65 	.word	0x0800aa65
 800aa20:	0800aa55 	.word	0x0800aa55
 800aa24:	0800aa65 	.word	0x0800aa65
 800aa28:	0800aa65 	.word	0x0800aa65
 800aa2c:	0800aa65 	.word	0x0800aa65
 800aa30:	0800aa4d 	.word	0x0800aa4d
 800aa34:	0800aa65 	.word	0x0800aa65
 800aa38:	0800aa65 	.word	0x0800aa65
 800aa3c:	0800aa65 	.word	0x0800aa65
 800aa40:	0800aa5d 	.word	0x0800aa5d
 800aa44:	2300      	movs	r3, #0
 800aa46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa4a:	e042      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa52:	e03e      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800aa54:	2304      	movs	r3, #4
 800aa56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa5a:	e03a      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800aa5c:	2308      	movs	r3, #8
 800aa5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa62:	e036      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800aa64:	2310      	movs	r3, #16
 800aa66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa6a:	e032      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a6a      	ldr	r2, [pc, #424]	; (800ac1c <UART_SetConfig+0x304>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d12a      	bne.n	800aacc <UART_SetConfig+0x1b4>
 800aa76:	4b6b      	ldr	r3, [pc, #428]	; (800ac24 <UART_SetConfig+0x30c>)
 800aa78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa84:	d01a      	beq.n	800aabc <UART_SetConfig+0x1a4>
 800aa86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa8a:	d81b      	bhi.n	800aac4 <UART_SetConfig+0x1ac>
 800aa8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa90:	d00c      	beq.n	800aaac <UART_SetConfig+0x194>
 800aa92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa96:	d815      	bhi.n	800aac4 <UART_SetConfig+0x1ac>
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <UART_SetConfig+0x18c>
 800aa9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaa0:	d008      	beq.n	800aab4 <UART_SetConfig+0x19c>
 800aaa2:	e00f      	b.n	800aac4 <UART_SetConfig+0x1ac>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaaa:	e012      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800aaac:	2302      	movs	r3, #2
 800aaae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aab2:	e00e      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800aab4:	2304      	movs	r3, #4
 800aab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaba:	e00a      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800aabc:	2308      	movs	r3, #8
 800aabe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aac2:	e006      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800aac4:	2310      	movs	r3, #16
 800aac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaca:	e002      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800aacc:	2310      	movs	r3, #16
 800aace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a51      	ldr	r2, [pc, #324]	; (800ac1c <UART_SetConfig+0x304>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d17a      	bne.n	800abd2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aadc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aae0:	2b08      	cmp	r3, #8
 800aae2:	d824      	bhi.n	800ab2e <UART_SetConfig+0x216>
 800aae4:	a201      	add	r2, pc, #4	; (adr r2, 800aaec <UART_SetConfig+0x1d4>)
 800aae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaea:	bf00      	nop
 800aaec:	0800ab11 	.word	0x0800ab11
 800aaf0:	0800ab2f 	.word	0x0800ab2f
 800aaf4:	0800ab19 	.word	0x0800ab19
 800aaf8:	0800ab2f 	.word	0x0800ab2f
 800aafc:	0800ab1f 	.word	0x0800ab1f
 800ab00:	0800ab2f 	.word	0x0800ab2f
 800ab04:	0800ab2f 	.word	0x0800ab2f
 800ab08:	0800ab2f 	.word	0x0800ab2f
 800ab0c:	0800ab27 	.word	0x0800ab27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab10:	f7fe fde0 	bl	80096d4 <HAL_RCC_GetPCLK1Freq>
 800ab14:	61f8      	str	r0, [r7, #28]
        break;
 800ab16:	e010      	b.n	800ab3a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab18:	4b44      	ldr	r3, [pc, #272]	; (800ac2c <UART_SetConfig+0x314>)
 800ab1a:	61fb      	str	r3, [r7, #28]
        break;
 800ab1c:	e00d      	b.n	800ab3a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab1e:	f7fe fd41 	bl	80095a4 <HAL_RCC_GetSysClockFreq>
 800ab22:	61f8      	str	r0, [r7, #28]
        break;
 800ab24:	e009      	b.n	800ab3a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab2a:	61fb      	str	r3, [r7, #28]
        break;
 800ab2c:	e005      	b.n	800ab3a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ab38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 8107 	beq.w	800ad50 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	4613      	mov	r3, r2
 800ab48:	005b      	lsls	r3, r3, #1
 800ab4a:	4413      	add	r3, r2
 800ab4c:	69fa      	ldr	r2, [r7, #28]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d305      	bcc.n	800ab5e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ab58:	69fa      	ldr	r2, [r7, #28]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d903      	bls.n	800ab66 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ab64:	e0f4      	b.n	800ad50 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	461c      	mov	r4, r3
 800ab6c:	4615      	mov	r5, r2
 800ab6e:	f04f 0200 	mov.w	r2, #0
 800ab72:	f04f 0300 	mov.w	r3, #0
 800ab76:	022b      	lsls	r3, r5, #8
 800ab78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ab7c:	0222      	lsls	r2, r4, #8
 800ab7e:	68f9      	ldr	r1, [r7, #12]
 800ab80:	6849      	ldr	r1, [r1, #4]
 800ab82:	0849      	lsrs	r1, r1, #1
 800ab84:	2000      	movs	r0, #0
 800ab86:	4688      	mov	r8, r1
 800ab88:	4681      	mov	r9, r0
 800ab8a:	eb12 0a08 	adds.w	sl, r2, r8
 800ab8e:	eb43 0b09 	adc.w	fp, r3, r9
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	603b      	str	r3, [r7, #0]
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aba0:	4650      	mov	r0, sl
 800aba2:	4659      	mov	r1, fp
 800aba4:	f7f6 f83a 	bl	8000c1c <__aeabi_uldivmod>
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	4613      	mov	r3, r2
 800abae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abb6:	d308      	bcc.n	800abca <UART_SetConfig+0x2b2>
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abbe:	d204      	bcs.n	800abca <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	69ba      	ldr	r2, [r7, #24]
 800abc6:	60da      	str	r2, [r3, #12]
 800abc8:	e0c2      	b.n	800ad50 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800abd0:	e0be      	b.n	800ad50 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abda:	d16a      	bne.n	800acb2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800abdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abe0:	2b08      	cmp	r3, #8
 800abe2:	d834      	bhi.n	800ac4e <UART_SetConfig+0x336>
 800abe4:	a201      	add	r2, pc, #4	; (adr r2, 800abec <UART_SetConfig+0x2d4>)
 800abe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abea:	bf00      	nop
 800abec:	0800ac11 	.word	0x0800ac11
 800abf0:	0800ac31 	.word	0x0800ac31
 800abf4:	0800ac39 	.word	0x0800ac39
 800abf8:	0800ac4f 	.word	0x0800ac4f
 800abfc:	0800ac3f 	.word	0x0800ac3f
 800ac00:	0800ac4f 	.word	0x0800ac4f
 800ac04:	0800ac4f 	.word	0x0800ac4f
 800ac08:	0800ac4f 	.word	0x0800ac4f
 800ac0c:	0800ac47 	.word	0x0800ac47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac10:	f7fe fd60 	bl	80096d4 <HAL_RCC_GetPCLK1Freq>
 800ac14:	61f8      	str	r0, [r7, #28]
        break;
 800ac16:	e020      	b.n	800ac5a <UART_SetConfig+0x342>
 800ac18:	efff69f3 	.word	0xefff69f3
 800ac1c:	40008000 	.word	0x40008000
 800ac20:	40013800 	.word	0x40013800
 800ac24:	40021000 	.word	0x40021000
 800ac28:	40004400 	.word	0x40004400
 800ac2c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac30:	f7fe fd66 	bl	8009700 <HAL_RCC_GetPCLK2Freq>
 800ac34:	61f8      	str	r0, [r7, #28]
        break;
 800ac36:	e010      	b.n	800ac5a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac38:	4b4c      	ldr	r3, [pc, #304]	; (800ad6c <UART_SetConfig+0x454>)
 800ac3a:	61fb      	str	r3, [r7, #28]
        break;
 800ac3c:	e00d      	b.n	800ac5a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac3e:	f7fe fcb1 	bl	80095a4 <HAL_RCC_GetSysClockFreq>
 800ac42:	61f8      	str	r0, [r7, #28]
        break;
 800ac44:	e009      	b.n	800ac5a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac4a:	61fb      	str	r3, [r7, #28]
        break;
 800ac4c:	e005      	b.n	800ac5a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ac58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d077      	beq.n	800ad50 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	005a      	lsls	r2, r3, #1
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	085b      	lsrs	r3, r3, #1
 800ac6a:	441a      	add	r2, r3
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b0f      	cmp	r3, #15
 800ac7a:	d916      	bls.n	800acaa <UART_SetConfig+0x392>
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac82:	d212      	bcs.n	800acaa <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	f023 030f 	bic.w	r3, r3, #15
 800ac8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	085b      	lsrs	r3, r3, #1
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	f003 0307 	and.w	r3, r3, #7
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	8afb      	ldrh	r3, [r7, #22]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	8afa      	ldrh	r2, [r7, #22]
 800aca6:	60da      	str	r2, [r3, #12]
 800aca8:	e052      	b.n	800ad50 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800acb0:	e04e      	b.n	800ad50 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800acb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800acb6:	2b08      	cmp	r3, #8
 800acb8:	d827      	bhi.n	800ad0a <UART_SetConfig+0x3f2>
 800acba:	a201      	add	r2, pc, #4	; (adr r2, 800acc0 <UART_SetConfig+0x3a8>)
 800acbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc0:	0800ace5 	.word	0x0800ace5
 800acc4:	0800aced 	.word	0x0800aced
 800acc8:	0800acf5 	.word	0x0800acf5
 800accc:	0800ad0b 	.word	0x0800ad0b
 800acd0:	0800acfb 	.word	0x0800acfb
 800acd4:	0800ad0b 	.word	0x0800ad0b
 800acd8:	0800ad0b 	.word	0x0800ad0b
 800acdc:	0800ad0b 	.word	0x0800ad0b
 800ace0:	0800ad03 	.word	0x0800ad03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ace4:	f7fe fcf6 	bl	80096d4 <HAL_RCC_GetPCLK1Freq>
 800ace8:	61f8      	str	r0, [r7, #28]
        break;
 800acea:	e014      	b.n	800ad16 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acec:	f7fe fd08 	bl	8009700 <HAL_RCC_GetPCLK2Freq>
 800acf0:	61f8      	str	r0, [r7, #28]
        break;
 800acf2:	e010      	b.n	800ad16 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acf4:	4b1d      	ldr	r3, [pc, #116]	; (800ad6c <UART_SetConfig+0x454>)
 800acf6:	61fb      	str	r3, [r7, #28]
        break;
 800acf8:	e00d      	b.n	800ad16 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acfa:	f7fe fc53 	bl	80095a4 <HAL_RCC_GetSysClockFreq>
 800acfe:	61f8      	str	r0, [r7, #28]
        break;
 800ad00:	e009      	b.n	800ad16 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad06:	61fb      	str	r3, [r7, #28]
        break;
 800ad08:	e005      	b.n	800ad16 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ad14:	bf00      	nop
    }

    if (pclk != 0U)
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d019      	beq.n	800ad50 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	085a      	lsrs	r2, r3, #1
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	441a      	add	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	2b0f      	cmp	r3, #15
 800ad34:	d909      	bls.n	800ad4a <UART_SetConfig+0x432>
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad3c:	d205      	bcs.n	800ad4a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60da      	str	r2, [r3, #12]
 800ad48:	e002      	b.n	800ad50 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ad5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3728      	adds	r7, #40	; 0x28
 800ad64:	46bd      	mov	sp, r7
 800ad66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad6a:	bf00      	nop
 800ad6c:	00f42400 	.word	0x00f42400

0800ad70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7c:	f003 0301 	and.w	r3, r3, #1
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00a      	beq.n	800ad9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	430a      	orrs	r2, r1
 800ad98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	f003 0302 	and.w	r3, r3, #2
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00a      	beq.n	800adbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	430a      	orrs	r2, r1
 800adba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	f003 0304 	and.w	r3, r3, #4
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00a      	beq.n	800adde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	430a      	orrs	r2, r1
 800addc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade2:	f003 0308 	and.w	r3, r3, #8
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00a      	beq.n	800ae00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	430a      	orrs	r2, r1
 800adfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae04:	f003 0310 	and.w	r3, r3, #16
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00a      	beq.n	800ae22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	430a      	orrs	r2, r1
 800ae20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae26:	f003 0320 	and.w	r3, r3, #32
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00a      	beq.n	800ae44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	430a      	orrs	r2, r1
 800ae42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d01a      	beq.n	800ae86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	430a      	orrs	r2, r1
 800ae64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae6e:	d10a      	bne.n	800ae86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00a      	beq.n	800aea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	430a      	orrs	r2, r1
 800aea6:	605a      	str	r2, [r3, #4]
  }
}
 800aea8:	bf00      	nop
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af02      	add	r7, sp, #8
 800aeba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aec4:	f7fa fcbe 	bl	8005844 <HAL_GetTick>
 800aec8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 0308 	and.w	r3, r3, #8
 800aed4:	2b08      	cmp	r3, #8
 800aed6:	d10e      	bne.n	800aef6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f82d 	bl	800af46 <UART_WaitOnFlagUntilTimeout>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aef2:	2303      	movs	r3, #3
 800aef4:	e023      	b.n	800af3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b04      	cmp	r3, #4
 800af02:	d10e      	bne.n	800af22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f817 	bl	800af46 <UART_WaitOnFlagUntilTimeout>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d001      	beq.n	800af22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e00d      	b.n	800af3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2220      	movs	r2, #32
 800af26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2220      	movs	r2, #32
 800af2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b09c      	sub	sp, #112	; 0x70
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	60f8      	str	r0, [r7, #12]
 800af4e:	60b9      	str	r1, [r7, #8]
 800af50:	603b      	str	r3, [r7, #0]
 800af52:	4613      	mov	r3, r2
 800af54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af56:	e0a5      	b.n	800b0a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af5e:	f000 80a1 	beq.w	800b0a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af62:	f7fa fc6f 	bl	8005844 <HAL_GetTick>
 800af66:	4602      	mov	r2, r0
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800af6e:	429a      	cmp	r2, r3
 800af70:	d302      	bcc.n	800af78 <UART_WaitOnFlagUntilTimeout+0x32>
 800af72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af74:	2b00      	cmp	r3, #0
 800af76:	d13e      	bne.n	800aff6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af80:	e853 3f00 	ldrex	r3, [r3]
 800af84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800af86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af8c:	667b      	str	r3, [r7, #100]	; 0x64
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	461a      	mov	r2, r3
 800af94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af9e:	e841 2300 	strex	r3, r2, [r1]
 800afa2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800afa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1e6      	bne.n	800af78 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3308      	adds	r3, #8
 800afb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb4:	e853 3f00 	ldrex	r3, [r3]
 800afb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbc:	f023 0301 	bic.w	r3, r3, #1
 800afc0:	663b      	str	r3, [r7, #96]	; 0x60
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	3308      	adds	r3, #8
 800afc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800afca:	64ba      	str	r2, [r7, #72]	; 0x48
 800afcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800afd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afd2:	e841 2300 	strex	r3, r2, [r1]
 800afd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800afd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1e5      	bne.n	800afaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2220      	movs	r2, #32
 800afe2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2220      	movs	r2, #32
 800afe8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aff2:	2303      	movs	r3, #3
 800aff4:	e067      	b.n	800b0c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 0304 	and.w	r3, r3, #4
 800b000:	2b00      	cmp	r3, #0
 800b002:	d04f      	beq.n	800b0a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	69db      	ldr	r3, [r3, #28]
 800b00a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b00e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b012:	d147      	bne.n	800b0a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b01c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	e853 3f00 	ldrex	r3, [r3]
 800b02a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b032:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	461a      	mov	r2, r3
 800b03a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b03c:	637b      	str	r3, [r7, #52]	; 0x34
 800b03e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b040:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b044:	e841 2300 	strex	r3, r2, [r1]
 800b048:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1e6      	bne.n	800b01e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	3308      	adds	r3, #8
 800b056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	e853 3f00 	ldrex	r3, [r3]
 800b05e:	613b      	str	r3, [r7, #16]
   return(result);
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	f023 0301 	bic.w	r3, r3, #1
 800b066:	66bb      	str	r3, [r7, #104]	; 0x68
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	3308      	adds	r3, #8
 800b06e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b070:	623a      	str	r2, [r7, #32]
 800b072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b074:	69f9      	ldr	r1, [r7, #28]
 800b076:	6a3a      	ldr	r2, [r7, #32]
 800b078:	e841 2300 	strex	r3, r2, [r1]
 800b07c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1e5      	bne.n	800b050 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2220      	movs	r2, #32
 800b088:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2220      	movs	r2, #32
 800b08e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2220      	movs	r2, #32
 800b094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	e010      	b.n	800b0c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	69da      	ldr	r2, [r3, #28]
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	bf0c      	ite	eq
 800b0b4:	2301      	moveq	r3, #1
 800b0b6:	2300      	movne	r3, #0
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	79fb      	ldrb	r3, [r7, #7]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	f43f af4a 	beq.w	800af58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3770      	adds	r7, #112	; 0x70
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
	...

0800b0d0 <__NVIC_SetPriority>:
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	6039      	str	r1, [r7, #0]
 800b0da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	db0a      	blt.n	800b0fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	490c      	ldr	r1, [pc, #48]	; (800b11c <__NVIC_SetPriority+0x4c>)
 800b0ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0ee:	0112      	lsls	r2, r2, #4
 800b0f0:	b2d2      	uxtb	r2, r2
 800b0f2:	440b      	add	r3, r1
 800b0f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b0f8:	e00a      	b.n	800b110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	4908      	ldr	r1, [pc, #32]	; (800b120 <__NVIC_SetPriority+0x50>)
 800b100:	79fb      	ldrb	r3, [r7, #7]
 800b102:	f003 030f 	and.w	r3, r3, #15
 800b106:	3b04      	subs	r3, #4
 800b108:	0112      	lsls	r2, r2, #4
 800b10a:	b2d2      	uxtb	r2, r2
 800b10c:	440b      	add	r3, r1
 800b10e:	761a      	strb	r2, [r3, #24]
}
 800b110:	bf00      	nop
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr
 800b11c:	e000e100 	.word	0xe000e100
 800b120:	e000ed00 	.word	0xe000ed00

0800b124 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b128:	4b05      	ldr	r3, [pc, #20]	; (800b140 <SysTick_Handler+0x1c>)
 800b12a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b12c:	f002 fcec 	bl	800db08 <xTaskGetSchedulerState>
 800b130:	4603      	mov	r3, r0
 800b132:	2b01      	cmp	r3, #1
 800b134:	d001      	beq.n	800b13a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b136:	f003 fbcf 	bl	800e8d8 <xPortSysTickHandler>
  }
}
 800b13a:	bf00      	nop
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	e000e010 	.word	0xe000e010

0800b144 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b144:	b580      	push	{r7, lr}
 800b146:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b148:	2100      	movs	r1, #0
 800b14a:	f06f 0004 	mvn.w	r0, #4
 800b14e:	f7ff ffbf 	bl	800b0d0 <__NVIC_SetPriority>
#endif
}
 800b152:	bf00      	nop
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b15e:	f3ef 8305 	mrs	r3, IPSR
 800b162:	603b      	str	r3, [r7, #0]
  return(result);
 800b164:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b16a:	f06f 0305 	mvn.w	r3, #5
 800b16e:	607b      	str	r3, [r7, #4]
 800b170:	e00c      	b.n	800b18c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b172:	4b0a      	ldr	r3, [pc, #40]	; (800b19c <osKernelInitialize+0x44>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d105      	bne.n	800b186 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b17a:	4b08      	ldr	r3, [pc, #32]	; (800b19c <osKernelInitialize+0x44>)
 800b17c:	2201      	movs	r2, #1
 800b17e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b180:	2300      	movs	r3, #0
 800b182:	607b      	str	r3, [r7, #4]
 800b184:	e002      	b.n	800b18c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b18a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b18c:	687b      	ldr	r3, [r7, #4]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	370c      	adds	r7, #12
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	200096d4 	.word	0x200096d4

0800b1a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1a6:	f3ef 8305 	mrs	r3, IPSR
 800b1aa:	603b      	str	r3, [r7, #0]
  return(result);
 800b1ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <osKernelStart+0x1a>
    stat = osErrorISR;
 800b1b2:	f06f 0305 	mvn.w	r3, #5
 800b1b6:	607b      	str	r3, [r7, #4]
 800b1b8:	e010      	b.n	800b1dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b1ba:	4b0b      	ldr	r3, [pc, #44]	; (800b1e8 <osKernelStart+0x48>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d109      	bne.n	800b1d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b1c2:	f7ff ffbf 	bl	800b144 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b1c6:	4b08      	ldr	r3, [pc, #32]	; (800b1e8 <osKernelStart+0x48>)
 800b1c8:	2202      	movs	r2, #2
 800b1ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b1cc:	f002 f830 	bl	800d230 <vTaskStartScheduler>
      stat = osOK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	607b      	str	r3, [r7, #4]
 800b1d4:	e002      	b.n	800b1dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b1d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b1dc:	687b      	ldr	r3, [r7, #4]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	200096d4 	.word	0x200096d4

0800b1ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b08e      	sub	sp, #56	; 0x38
 800b1f0:	af04      	add	r7, sp, #16
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1fc:	f3ef 8305 	mrs	r3, IPSR
 800b200:	617b      	str	r3, [r7, #20]
  return(result);
 800b202:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b204:	2b00      	cmp	r3, #0
 800b206:	d17e      	bne.n	800b306 <osThreadNew+0x11a>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d07b      	beq.n	800b306 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b20e:	2340      	movs	r3, #64	; 0x40
 800b210:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b212:	2318      	movs	r3, #24
 800b214:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b216:	2300      	movs	r3, #0
 800b218:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b21a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b21e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d045      	beq.n	800b2b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d002      	beq.n	800b234 <osThreadNew+0x48>
        name = attr->name;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	699b      	ldr	r3, [r3, #24]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d008      	beq.n	800b25a <osThreadNew+0x6e>
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	2b38      	cmp	r3, #56	; 0x38
 800b24c:	d805      	bhi.n	800b25a <osThreadNew+0x6e>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	f003 0301 	and.w	r3, r3, #1
 800b256:	2b00      	cmp	r3, #0
 800b258:	d001      	beq.n	800b25e <osThreadNew+0x72>
        return (NULL);
 800b25a:	2300      	movs	r3, #0
 800b25c:	e054      	b.n	800b308 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	695b      	ldr	r3, [r3, #20]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	695b      	ldr	r3, [r3, #20]
 800b26a:	089b      	lsrs	r3, r3, #2
 800b26c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00e      	beq.n	800b294 <osThreadNew+0xa8>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	2bbb      	cmp	r3, #187	; 0xbb
 800b27c:	d90a      	bls.n	800b294 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b282:	2b00      	cmp	r3, #0
 800b284:	d006      	beq.n	800b294 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d002      	beq.n	800b294 <osThreadNew+0xa8>
        mem = 1;
 800b28e:	2301      	movs	r3, #1
 800b290:	61bb      	str	r3, [r7, #24]
 800b292:	e010      	b.n	800b2b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10c      	bne.n	800b2b6 <osThreadNew+0xca>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d108      	bne.n	800b2b6 <osThreadNew+0xca>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d104      	bne.n	800b2b6 <osThreadNew+0xca>
          mem = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	61bb      	str	r3, [r7, #24]
 800b2b0:	e001      	b.n	800b2b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d110      	bne.n	800b2de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b2c4:	9202      	str	r2, [sp, #8]
 800b2c6:	9301      	str	r3, [sp, #4]
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	6a3a      	ldr	r2, [r7, #32]
 800b2d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f001 fd42 	bl	800cd5c <xTaskCreateStatic>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	613b      	str	r3, [r7, #16]
 800b2dc:	e013      	b.n	800b306 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d110      	bne.n	800b306 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b2e4:	6a3b      	ldr	r3, [r7, #32]
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	f107 0310 	add.w	r3, r7, #16
 800b2ec:	9301      	str	r3, [sp, #4]
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f001 fd8d 	bl	800ce16 <xTaskCreate>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d001      	beq.n	800b306 <osThreadNew+0x11a>
            hTask = NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b306:	693b      	ldr	r3, [r7, #16]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3728      	adds	r7, #40	; 0x28
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b318:	f3ef 8305 	mrs	r3, IPSR
 800b31c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b31e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b320:	2b00      	cmp	r3, #0
 800b322:	d003      	beq.n	800b32c <osDelay+0x1c>
    stat = osErrorISR;
 800b324:	f06f 0305 	mvn.w	r3, #5
 800b328:	60fb      	str	r3, [r7, #12]
 800b32a:	e007      	b.n	800b33c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b32c:	2300      	movs	r3, #0
 800b32e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d002      	beq.n	800b33c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f001 ff46 	bl	800d1c8 <vTaskDelay>
    }
  }

  return (stat);
 800b33c:	68fb      	ldr	r3, [r7, #12]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b346:	b580      	push	{r7, lr}
 800b348:	b088      	sub	sp, #32
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b34e:	2300      	movs	r3, #0
 800b350:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b352:	f3ef 8305 	mrs	r3, IPSR
 800b356:	60bb      	str	r3, [r7, #8]
  return(result);
 800b358:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d174      	bne.n	800b448 <osMutexNew+0x102>
    if (attr != NULL) {
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d003      	beq.n	800b36c <osMutexNew+0x26>
      type = attr->attr_bits;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	61bb      	str	r3, [r7, #24]
 800b36a:	e001      	b.n	800b370 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b36c:	2300      	movs	r3, #0
 800b36e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	2b00      	cmp	r3, #0
 800b378:	d002      	beq.n	800b380 <osMutexNew+0x3a>
      rmtx = 1U;
 800b37a:	2301      	movs	r3, #1
 800b37c:	617b      	str	r3, [r7, #20]
 800b37e:	e001      	b.n	800b384 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b380:	2300      	movs	r3, #0
 800b382:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	f003 0308 	and.w	r3, r3, #8
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d15c      	bne.n	800b448 <osMutexNew+0x102>
      mem = -1;
 800b38e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b392:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d015      	beq.n	800b3c6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d006      	beq.n	800b3b0 <osMutexNew+0x6a>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	2b4f      	cmp	r3, #79	; 0x4f
 800b3a8:	d902      	bls.n	800b3b0 <osMutexNew+0x6a>
          mem = 1;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	613b      	str	r3, [r7, #16]
 800b3ae:	e00c      	b.n	800b3ca <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d108      	bne.n	800b3ca <osMutexNew+0x84>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d104      	bne.n	800b3ca <osMutexNew+0x84>
            mem = 0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	613b      	str	r3, [r7, #16]
 800b3c4:	e001      	b.n	800b3ca <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d112      	bne.n	800b3f6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d007      	beq.n	800b3e6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	4619      	mov	r1, r3
 800b3dc:	2004      	movs	r0, #4
 800b3de:	f000 fd68 	bl	800beb2 <xQueueCreateMutexStatic>
 800b3e2:	61f8      	str	r0, [r7, #28]
 800b3e4:	e016      	b.n	800b414 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	2001      	movs	r0, #1
 800b3ee:	f000 fd60 	bl	800beb2 <xQueueCreateMutexStatic>
 800b3f2:	61f8      	str	r0, [r7, #28]
 800b3f4:	e00e      	b.n	800b414 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10b      	bne.n	800b414 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d004      	beq.n	800b40c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b402:	2004      	movs	r0, #4
 800b404:	f000 fd3d 	bl	800be82 <xQueueCreateMutex>
 800b408:	61f8      	str	r0, [r7, #28]
 800b40a:	e003      	b.n	800b414 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b40c:	2001      	movs	r0, #1
 800b40e:	f000 fd38 	bl	800be82 <xQueueCreateMutex>
 800b412:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00c      	beq.n	800b434 <osMutexNew+0xee>
        if (attr != NULL) {
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d003      	beq.n	800b428 <osMutexNew+0xe2>
          name = attr->name;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	60fb      	str	r3, [r7, #12]
 800b426:	e001      	b.n	800b42c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b428:	2300      	movs	r3, #0
 800b42a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b42c:	68f9      	ldr	r1, [r7, #12]
 800b42e:	69f8      	ldr	r0, [r7, #28]
 800b430:	f001 fc0c 	bl	800cc4c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d006      	beq.n	800b448 <osMutexNew+0x102>
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d003      	beq.n	800b448 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	f043 0301 	orr.w	r3, r3, #1
 800b446:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b448:	69fb      	ldr	r3, [r7, #28]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3720      	adds	r7, #32
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b452:	b580      	push	{r7, lr}
 800b454:	b086      	sub	sp, #24
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f023 0301 	bic.w	r3, r3, #1
 800b462:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b470:	f3ef 8305 	mrs	r3, IPSR
 800b474:	60bb      	str	r3, [r7, #8]
  return(result);
 800b476:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d003      	beq.n	800b484 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b47c:	f06f 0305 	mvn.w	r3, #5
 800b480:	617b      	str	r3, [r7, #20]
 800b482:	e02c      	b.n	800b4de <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d103      	bne.n	800b492 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b48a:	f06f 0303 	mvn.w	r3, #3
 800b48e:	617b      	str	r3, [r7, #20]
 800b490:	e025      	b.n	800b4de <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d011      	beq.n	800b4bc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b498:	6839      	ldr	r1, [r7, #0]
 800b49a:	6938      	ldr	r0, [r7, #16]
 800b49c:	f000 fd58 	bl	800bf50 <xQueueTakeMutexRecursive>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d01b      	beq.n	800b4de <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b4ac:	f06f 0301 	mvn.w	r3, #1
 800b4b0:	617b      	str	r3, [r7, #20]
 800b4b2:	e014      	b.n	800b4de <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b4b4:	f06f 0302 	mvn.w	r3, #2
 800b4b8:	617b      	str	r3, [r7, #20]
 800b4ba:	e010      	b.n	800b4de <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	6938      	ldr	r0, [r7, #16]
 800b4c0:	f001 f8ec 	bl	800c69c <xQueueSemaphoreTake>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d009      	beq.n	800b4de <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d003      	beq.n	800b4d8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b4d0:	f06f 0301 	mvn.w	r3, #1
 800b4d4:	617b      	str	r3, [r7, #20]
 800b4d6:	e002      	b.n	800b4de <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b4d8:	f06f 0302 	mvn.w	r3, #2
 800b4dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b4de:	697b      	ldr	r3, [r7, #20]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3718      	adds	r7, #24
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f023 0301 	bic.w	r3, r3, #1
 800b4f6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b500:	2300      	movs	r3, #0
 800b502:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b504:	f3ef 8305 	mrs	r3, IPSR
 800b508:	60bb      	str	r3, [r7, #8]
  return(result);
 800b50a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d003      	beq.n	800b518 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b510:	f06f 0305 	mvn.w	r3, #5
 800b514:	617b      	str	r3, [r7, #20]
 800b516:	e01f      	b.n	800b558 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d103      	bne.n	800b526 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b51e:	f06f 0303 	mvn.w	r3, #3
 800b522:	617b      	str	r3, [r7, #20]
 800b524:	e018      	b.n	800b558 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d009      	beq.n	800b540 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b52c:	6938      	ldr	r0, [r7, #16]
 800b52e:	f000 fcdb 	bl	800bee8 <xQueueGiveMutexRecursive>
 800b532:	4603      	mov	r3, r0
 800b534:	2b01      	cmp	r3, #1
 800b536:	d00f      	beq.n	800b558 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b538:	f06f 0302 	mvn.w	r3, #2
 800b53c:	617b      	str	r3, [r7, #20]
 800b53e:	e00b      	b.n	800b558 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b540:	2300      	movs	r3, #0
 800b542:	2200      	movs	r2, #0
 800b544:	2100      	movs	r1, #0
 800b546:	6938      	ldr	r0, [r7, #16]
 800b548:	f000 fda2 	bl	800c090 <xQueueGenericSend>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d002      	beq.n	800b558 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b552:	f06f 0302 	mvn.w	r3, #2
 800b556:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b558:	697b      	ldr	r3, [r7, #20]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b562:	b580      	push	{r7, lr}
 800b564:	b08a      	sub	sp, #40	; 0x28
 800b566:	af02      	add	r7, sp, #8
 800b568:	60f8      	str	r0, [r7, #12]
 800b56a:	60b9      	str	r1, [r7, #8]
 800b56c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b572:	f3ef 8305 	mrs	r3, IPSR
 800b576:	613b      	str	r3, [r7, #16]
  return(result);
 800b578:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d175      	bne.n	800b66a <osSemaphoreNew+0x108>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d072      	beq.n	800b66a <osSemaphoreNew+0x108>
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d86e      	bhi.n	800b66a <osSemaphoreNew+0x108>
    mem = -1;
 800b58c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b590:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d015      	beq.n	800b5c4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d006      	beq.n	800b5ae <osSemaphoreNew+0x4c>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	2b4f      	cmp	r3, #79	; 0x4f
 800b5a6:	d902      	bls.n	800b5ae <osSemaphoreNew+0x4c>
        mem = 1;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	61bb      	str	r3, [r7, #24]
 800b5ac:	e00c      	b.n	800b5c8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d108      	bne.n	800b5c8 <osSemaphoreNew+0x66>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d104      	bne.n	800b5c8 <osSemaphoreNew+0x66>
          mem = 0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	61bb      	str	r3, [r7, #24]
 800b5c2:	e001      	b.n	800b5c8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5ce:	d04c      	beq.n	800b66a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d128      	bne.n	800b628 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d10a      	bne.n	800b5f2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	2203      	movs	r2, #3
 800b5e2:	9200      	str	r2, [sp, #0]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	2001      	movs	r0, #1
 800b5ea:	f000 fb5b 	bl	800bca4 <xQueueGenericCreateStatic>
 800b5ee:	61f8      	str	r0, [r7, #28]
 800b5f0:	e005      	b.n	800b5fe <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b5f2:	2203      	movs	r2, #3
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	2001      	movs	r0, #1
 800b5f8:	f000 fbcc 	bl	800bd94 <xQueueGenericCreate>
 800b5fc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d022      	beq.n	800b64a <osSemaphoreNew+0xe8>
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d01f      	beq.n	800b64a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b60a:	2300      	movs	r3, #0
 800b60c:	2200      	movs	r2, #0
 800b60e:	2100      	movs	r1, #0
 800b610:	69f8      	ldr	r0, [r7, #28]
 800b612:	f000 fd3d 	bl	800c090 <xQueueGenericSend>
 800b616:	4603      	mov	r3, r0
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d016      	beq.n	800b64a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b61c:	69f8      	ldr	r0, [r7, #28]
 800b61e:	f001 f9c9 	bl	800c9b4 <vQueueDelete>
            hSemaphore = NULL;
 800b622:	2300      	movs	r3, #0
 800b624:	61fb      	str	r3, [r7, #28]
 800b626:	e010      	b.n	800b64a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d108      	bne.n	800b640 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	461a      	mov	r2, r3
 800b634:	68b9      	ldr	r1, [r7, #8]
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 fcc0 	bl	800bfbc <xQueueCreateCountingSemaphoreStatic>
 800b63c:	61f8      	str	r0, [r7, #28]
 800b63e:	e004      	b.n	800b64a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b640:	68b9      	ldr	r1, [r7, #8]
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f000 fcf1 	bl	800c02a <xQueueCreateCountingSemaphore>
 800b648:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00c      	beq.n	800b66a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <osSemaphoreNew+0xfc>
          name = attr->name;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	617b      	str	r3, [r7, #20]
 800b65c:	e001      	b.n	800b662 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b65e:	2300      	movs	r3, #0
 800b660:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b662:	6979      	ldr	r1, [r7, #20]
 800b664:	69f8      	ldr	r0, [r7, #28]
 800b666:	f001 faf1 	bl	800cc4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b66a:	69fb      	ldr	r3, [r7, #28]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3720      	adds	r7, #32
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b682:	2300      	movs	r3, #0
 800b684:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d103      	bne.n	800b694 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b68c:	f06f 0303 	mvn.w	r3, #3
 800b690:	617b      	str	r3, [r7, #20]
 800b692:	e039      	b.n	800b708 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b694:	f3ef 8305 	mrs	r3, IPSR
 800b698:	60fb      	str	r3, [r7, #12]
  return(result);
 800b69a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d022      	beq.n	800b6e6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d003      	beq.n	800b6ae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b6a6:	f06f 0303 	mvn.w	r3, #3
 800b6aa:	617b      	str	r3, [r7, #20]
 800b6ac:	e02c      	b.n	800b708 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b6b2:	f107 0308 	add.w	r3, r7, #8
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	6938      	ldr	r0, [r7, #16]
 800b6bc:	f001 f8fa 	bl	800c8b4 <xQueueReceiveFromISR>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d003      	beq.n	800b6ce <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b6c6:	f06f 0302 	mvn.w	r3, #2
 800b6ca:	617b      	str	r3, [r7, #20]
 800b6cc:	e01c      	b.n	800b708 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d019      	beq.n	800b708 <osSemaphoreAcquire+0x94>
 800b6d4:	4b0f      	ldr	r3, [pc, #60]	; (800b714 <osSemaphoreAcquire+0xa0>)
 800b6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6da:	601a      	str	r2, [r3, #0]
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	f3bf 8f6f 	isb	sy
 800b6e4:	e010      	b.n	800b708 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b6e6:	6839      	ldr	r1, [r7, #0]
 800b6e8:	6938      	ldr	r0, [r7, #16]
 800b6ea:	f000 ffd7 	bl	800c69c <xQueueSemaphoreTake>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d009      	beq.n	800b708 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d003      	beq.n	800b702 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b6fa:	f06f 0301 	mvn.w	r3, #1
 800b6fe:	617b      	str	r3, [r7, #20]
 800b700:	e002      	b.n	800b708 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b702:	f06f 0302 	mvn.w	r3, #2
 800b706:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b708:	697b      	ldr	r3, [r7, #20]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3718      	adds	r7, #24
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	e000ed04 	.word	0xe000ed04

0800b718 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b724:	2300      	movs	r3, #0
 800b726:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d103      	bne.n	800b736 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b72e:	f06f 0303 	mvn.w	r3, #3
 800b732:	617b      	str	r3, [r7, #20]
 800b734:	e02c      	b.n	800b790 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b736:	f3ef 8305 	mrs	r3, IPSR
 800b73a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b73c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d01a      	beq.n	800b778 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b742:	2300      	movs	r3, #0
 800b744:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b746:	f107 0308 	add.w	r3, r7, #8
 800b74a:	4619      	mov	r1, r3
 800b74c:	6938      	ldr	r0, [r7, #16]
 800b74e:	f000 fe38 	bl	800c3c2 <xQueueGiveFromISR>
 800b752:	4603      	mov	r3, r0
 800b754:	2b01      	cmp	r3, #1
 800b756:	d003      	beq.n	800b760 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b758:	f06f 0302 	mvn.w	r3, #2
 800b75c:	617b      	str	r3, [r7, #20]
 800b75e:	e017      	b.n	800b790 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d014      	beq.n	800b790 <osSemaphoreRelease+0x78>
 800b766:	4b0d      	ldr	r3, [pc, #52]	; (800b79c <osSemaphoreRelease+0x84>)
 800b768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b76c:	601a      	str	r2, [r3, #0]
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	e00b      	b.n	800b790 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b778:	2300      	movs	r3, #0
 800b77a:	2200      	movs	r2, #0
 800b77c:	2100      	movs	r1, #0
 800b77e:	6938      	ldr	r0, [r7, #16]
 800b780:	f000 fc86 	bl	800c090 <xQueueGenericSend>
 800b784:	4603      	mov	r3, r0
 800b786:	2b01      	cmp	r3, #1
 800b788:	d002      	beq.n	800b790 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b78a:	f06f 0302 	mvn.w	r3, #2
 800b78e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b790:	697b      	ldr	r3, [r7, #20]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3718      	adds	r7, #24
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	e000ed04 	.word	0xe000ed04

0800b7a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b08a      	sub	sp, #40	; 0x28
 800b7a4:	af02      	add	r7, sp, #8
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7b0:	f3ef 8305 	mrs	r3, IPSR
 800b7b4:	613b      	str	r3, [r7, #16]
  return(result);
 800b7b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d15f      	bne.n	800b87c <osMessageQueueNew+0xdc>
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d05c      	beq.n	800b87c <osMessageQueueNew+0xdc>
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d059      	beq.n	800b87c <osMessageQueueNew+0xdc>
    mem = -1;
 800b7c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d029      	beq.n	800b828 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d012      	beq.n	800b802 <osMessageQueueNew+0x62>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	2b4f      	cmp	r3, #79	; 0x4f
 800b7e2:	d90e      	bls.n	800b802 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00a      	beq.n	800b802 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	695a      	ldr	r2, [r3, #20]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	68b9      	ldr	r1, [r7, #8]
 800b7f4:	fb01 f303 	mul.w	r3, r1, r3
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d302      	bcc.n	800b802 <osMessageQueueNew+0x62>
        mem = 1;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	61bb      	str	r3, [r7, #24]
 800b800:	e014      	b.n	800b82c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d110      	bne.n	800b82c <osMessageQueueNew+0x8c>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10c      	bne.n	800b82c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b816:	2b00      	cmp	r3, #0
 800b818:	d108      	bne.n	800b82c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	695b      	ldr	r3, [r3, #20]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d104      	bne.n	800b82c <osMessageQueueNew+0x8c>
          mem = 0;
 800b822:	2300      	movs	r3, #0
 800b824:	61bb      	str	r3, [r7, #24]
 800b826:	e001      	b.n	800b82c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d10b      	bne.n	800b84a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	691a      	ldr	r2, [r3, #16]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	2100      	movs	r1, #0
 800b83c:	9100      	str	r1, [sp, #0]
 800b83e:	68b9      	ldr	r1, [r7, #8]
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 fa2f 	bl	800bca4 <xQueueGenericCreateStatic>
 800b846:	61f8      	str	r0, [r7, #28]
 800b848:	e008      	b.n	800b85c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d105      	bne.n	800b85c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b850:	2200      	movs	r2, #0
 800b852:	68b9      	ldr	r1, [r7, #8]
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f000 fa9d 	bl	800bd94 <xQueueGenericCreate>
 800b85a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00c      	beq.n	800b87c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d003      	beq.n	800b870 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	e001      	b.n	800b874 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b870:	2300      	movs	r3, #0
 800b872:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b874:	6979      	ldr	r1, [r7, #20]
 800b876:	69f8      	ldr	r0, [r7, #28]
 800b878:	f001 f9e8 	bl	800cc4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b87c:	69fb      	ldr	r3, [r7, #28]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3720      	adds	r7, #32
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
	...

0800b888 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b888:	b580      	push	{r7, lr}
 800b88a:	b088      	sub	sp, #32
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	603b      	str	r3, [r7, #0]
 800b894:	4613      	mov	r3, r2
 800b896:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8a0:	f3ef 8305 	mrs	r3, IPSR
 800b8a4:	617b      	str	r3, [r7, #20]
  return(result);
 800b8a6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d028      	beq.n	800b8fe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d005      	beq.n	800b8be <osMessageQueuePut+0x36>
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d002      	beq.n	800b8be <osMessageQueuePut+0x36>
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d003      	beq.n	800b8c6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b8be:	f06f 0303 	mvn.w	r3, #3
 800b8c2:	61fb      	str	r3, [r7, #28]
 800b8c4:	e038      	b.n	800b938 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b8ca:	f107 0210 	add.w	r2, r7, #16
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	68b9      	ldr	r1, [r7, #8]
 800b8d2:	69b8      	ldr	r0, [r7, #24]
 800b8d4:	f000 fcda 	bl	800c28c <xQueueGenericSendFromISR>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d003      	beq.n	800b8e6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b8de:	f06f 0302 	mvn.w	r3, #2
 800b8e2:	61fb      	str	r3, [r7, #28]
 800b8e4:	e028      	b.n	800b938 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d025      	beq.n	800b938 <osMessageQueuePut+0xb0>
 800b8ec:	4b15      	ldr	r3, [pc, #84]	; (800b944 <osMessageQueuePut+0xbc>)
 800b8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8f2:	601a      	str	r2, [r3, #0]
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	e01c      	b.n	800b938 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d002      	beq.n	800b90a <osMessageQueuePut+0x82>
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d103      	bne.n	800b912 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b90a:	f06f 0303 	mvn.w	r3, #3
 800b90e:	61fb      	str	r3, [r7, #28]
 800b910:	e012      	b.n	800b938 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b912:	2300      	movs	r3, #0
 800b914:	683a      	ldr	r2, [r7, #0]
 800b916:	68b9      	ldr	r1, [r7, #8]
 800b918:	69b8      	ldr	r0, [r7, #24]
 800b91a:	f000 fbb9 	bl	800c090 <xQueueGenericSend>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b01      	cmp	r3, #1
 800b922:	d009      	beq.n	800b938 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d003      	beq.n	800b932 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b92a:	f06f 0301 	mvn.w	r3, #1
 800b92e:	61fb      	str	r3, [r7, #28]
 800b930:	e002      	b.n	800b938 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b932:	f06f 0302 	mvn.w	r3, #2
 800b936:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b938:	69fb      	ldr	r3, [r7, #28]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3720      	adds	r7, #32
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	e000ed04 	.word	0xe000ed04

0800b948 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b948:	b580      	push	{r7, lr}
 800b94a:	b088      	sub	sp, #32
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	607a      	str	r2, [r7, #4]
 800b954:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b95a:	2300      	movs	r3, #0
 800b95c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b95e:	f3ef 8305 	mrs	r3, IPSR
 800b962:	617b      	str	r3, [r7, #20]
  return(result);
 800b964:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b966:	2b00      	cmp	r3, #0
 800b968:	d028      	beq.n	800b9bc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d005      	beq.n	800b97c <osMessageQueueGet+0x34>
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d002      	beq.n	800b97c <osMessageQueueGet+0x34>
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b97c:	f06f 0303 	mvn.w	r3, #3
 800b980:	61fb      	str	r3, [r7, #28]
 800b982:	e037      	b.n	800b9f4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b984:	2300      	movs	r3, #0
 800b986:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b988:	f107 0310 	add.w	r3, r7, #16
 800b98c:	461a      	mov	r2, r3
 800b98e:	68b9      	ldr	r1, [r7, #8]
 800b990:	69b8      	ldr	r0, [r7, #24]
 800b992:	f000 ff8f 	bl	800c8b4 <xQueueReceiveFromISR>
 800b996:	4603      	mov	r3, r0
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d003      	beq.n	800b9a4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b99c:	f06f 0302 	mvn.w	r3, #2
 800b9a0:	61fb      	str	r3, [r7, #28]
 800b9a2:	e027      	b.n	800b9f4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d024      	beq.n	800b9f4 <osMessageQueueGet+0xac>
 800b9aa:	4b15      	ldr	r3, [pc, #84]	; (800ba00 <osMessageQueueGet+0xb8>)
 800b9ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b0:	601a      	str	r2, [r3, #0]
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	e01b      	b.n	800b9f4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d002      	beq.n	800b9c8 <osMessageQueueGet+0x80>
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d103      	bne.n	800b9d0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b9c8:	f06f 0303 	mvn.w	r3, #3
 800b9cc:	61fb      	str	r3, [r7, #28]
 800b9ce:	e011      	b.n	800b9f4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	68b9      	ldr	r1, [r7, #8]
 800b9d4:	69b8      	ldr	r0, [r7, #24]
 800b9d6:	f000 fd81 	bl	800c4dc <xQueueReceive>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d009      	beq.n	800b9f4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d003      	beq.n	800b9ee <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b9e6:	f06f 0301 	mvn.w	r3, #1
 800b9ea:	61fb      	str	r3, [r7, #28]
 800b9ec:	e002      	b.n	800b9f4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b9ee:	f06f 0302 	mvn.w	r3, #2
 800b9f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b9f4:	69fb      	ldr	r3, [r7, #28]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3720      	adds	r7, #32
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	e000ed04 	.word	0xe000ed04

0800ba04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	4a07      	ldr	r2, [pc, #28]	; (800ba30 <vApplicationGetIdleTaskMemory+0x2c>)
 800ba14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	4a06      	ldr	r2, [pc, #24]	; (800ba34 <vApplicationGetIdleTaskMemory+0x30>)
 800ba1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2240      	movs	r2, #64	; 0x40
 800ba20:	601a      	str	r2, [r3, #0]
}
 800ba22:	bf00      	nop
 800ba24:	3714      	adds	r7, #20
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	200096d8 	.word	0x200096d8
 800ba34:	20009794 	.word	0x20009794

0800ba38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	4a07      	ldr	r2, [pc, #28]	; (800ba64 <vApplicationGetTimerTaskMemory+0x2c>)
 800ba48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	4a06      	ldr	r2, [pc, #24]	; (800ba68 <vApplicationGetTimerTaskMemory+0x30>)
 800ba4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2280      	movs	r2, #128	; 0x80
 800ba54:	601a      	str	r2, [r3, #0]
}
 800ba56:	bf00      	nop
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	20009894 	.word	0x20009894
 800ba68:	20009950 	.word	0x20009950

0800ba6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f103 0208 	add.w	r2, r3, #8
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f103 0208 	add.w	r2, r3, #8
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f103 0208 	add.w	r2, r3, #8
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800baba:	bf00      	nop
 800babc:	370c      	adds	r7, #12
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bac6:	b480      	push	{r7}
 800bac8:	b085      	sub	sp, #20
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
 800bace:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	689a      	ldr	r2, [r3, #8]
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	1c5a      	adds	r2, r3, #1
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	601a      	str	r2, [r3, #0]
}
 800bb02:	bf00      	nop
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b085      	sub	sp, #20
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb24:	d103      	bne.n	800bb2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	691b      	ldr	r3, [r3, #16]
 800bb2a:	60fb      	str	r3, [r7, #12]
 800bb2c:	e00c      	b.n	800bb48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	3308      	adds	r3, #8
 800bb32:	60fb      	str	r3, [r7, #12]
 800bb34:	e002      	b.n	800bb3c <vListInsert+0x2e>
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	60fb      	str	r3, [r7, #12]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	68ba      	ldr	r2, [r7, #8]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d2f6      	bcs.n	800bb36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	685a      	ldr	r2, [r3, #4]
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	683a      	ldr	r2, [r7, #0]
 800bb56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	601a      	str	r2, [r3, #0]
}
 800bb74:	bf00      	nop
 800bb76:	3714      	adds	r7, #20
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	691b      	ldr	r3, [r3, #16]
 800bb8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	6892      	ldr	r2, [r2, #8]
 800bb96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	6852      	ldr	r2, [r2, #4]
 800bba0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d103      	bne.n	800bbb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	689a      	ldr	r2, [r3, #8]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	1e5a      	subs	r2, r3, #1
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3714      	adds	r7, #20
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10a      	bne.n	800bbfe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbec:	f383 8811 	msr	BASEPRI, r3
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bbfa:	bf00      	nop
 800bbfc:	e7fe      	b.n	800bbfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bbfe:	f002 fdd9 	bl	800e7b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0a:	68f9      	ldr	r1, [r7, #12]
 800bc0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc0e:	fb01 f303 	mul.w	r3, r1, r3
 800bc12:	441a      	add	r2, r3
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	68f9      	ldr	r1, [r7, #12]
 800bc32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc34:	fb01 f303 	mul.w	r3, r1, r3
 800bc38:	441a      	add	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	22ff      	movs	r2, #255	; 0xff
 800bc42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	22ff      	movs	r2, #255	; 0xff
 800bc4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d114      	bne.n	800bc7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d01a      	beq.n	800bc92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	3310      	adds	r3, #16
 800bc60:	4618      	mov	r0, r3
 800bc62:	f001 fd7f 	bl	800d764 <xTaskRemoveFromEventList>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d012      	beq.n	800bc92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc6c:	4b0c      	ldr	r3, [pc, #48]	; (800bca0 <xQueueGenericReset+0xcc>)
 800bc6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc72:	601a      	str	r2, [r3, #0]
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	e009      	b.n	800bc92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	3310      	adds	r3, #16
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff fef2 	bl	800ba6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3324      	adds	r3, #36	; 0x24
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7ff feed 	bl	800ba6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc92:	f002 fdbf 	bl	800e814 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bc96:	2301      	movs	r3, #1
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	e000ed04 	.word	0xe000ed04

0800bca4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b08e      	sub	sp, #56	; 0x38
 800bca8:	af02      	add	r7, sp, #8
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
 800bcb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10a      	bne.n	800bcce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbc:	f383 8811 	msr	BASEPRI, r3
 800bcc0:	f3bf 8f6f 	isb	sy
 800bcc4:	f3bf 8f4f 	dsb	sy
 800bcc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcca:	bf00      	nop
 800bccc:	e7fe      	b.n	800bccc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10a      	bne.n	800bcea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bce6:	bf00      	nop
 800bce8:	e7fe      	b.n	800bce8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <xQueueGenericCreateStatic+0x52>
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <xQueueGenericCreateStatic+0x56>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e000      	b.n	800bcfc <xQueueGenericCreateStatic+0x58>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10a      	bne.n	800bd16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	623b      	str	r3, [r7, #32]
}
 800bd12:	bf00      	nop
 800bd14:	e7fe      	b.n	800bd14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d102      	bne.n	800bd22 <xQueueGenericCreateStatic+0x7e>
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d101      	bne.n	800bd26 <xQueueGenericCreateStatic+0x82>
 800bd22:	2301      	movs	r3, #1
 800bd24:	e000      	b.n	800bd28 <xQueueGenericCreateStatic+0x84>
 800bd26:	2300      	movs	r3, #0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10a      	bne.n	800bd42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	61fb      	str	r3, [r7, #28]
}
 800bd3e:	bf00      	nop
 800bd40:	e7fe      	b.n	800bd40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd42:	2350      	movs	r3, #80	; 0x50
 800bd44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b50      	cmp	r3, #80	; 0x50
 800bd4a:	d00a      	beq.n	800bd62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	61bb      	str	r3, [r7, #24]
}
 800bd5e:	bf00      	nop
 800bd60:	e7fe      	b.n	800bd60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00d      	beq.n	800bd8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	4613      	mov	r3, r2
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	68b9      	ldr	r1, [r7, #8]
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f000 f83f 	bl	800be08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3730      	adds	r7, #48	; 0x30
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b08a      	sub	sp, #40	; 0x28
 800bd98:	af02      	add	r7, sp, #8
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10a      	bne.n	800bdbe <xQueueGenericCreate+0x2a>
	__asm volatile
 800bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	613b      	str	r3, [r7, #16]
}
 800bdba:	bf00      	nop
 800bdbc:	e7fe      	b.n	800bdbc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	fb02 f303 	mul.w	r3, r2, r3
 800bdc6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	3350      	adds	r3, #80	; 0x50
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f002 fe13 	bl	800e9f8 <pvPortMalloc>
 800bdd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d011      	beq.n	800bdfe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	3350      	adds	r3, #80	; 0x50
 800bde2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bdec:	79fa      	ldrb	r2, [r7, #7]
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	697a      	ldr	r2, [r7, #20]
 800bdf6:	68b9      	ldr	r1, [r7, #8]
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f000 f805 	bl	800be08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bdfe:	69bb      	ldr	r3, [r7, #24]
	}
 800be00:	4618      	mov	r0, r3
 800be02:	3720      	adds	r7, #32
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
 800be14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d103      	bne.n	800be24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	69ba      	ldr	r2, [r7, #24]
 800be20:	601a      	str	r2, [r3, #0]
 800be22:	e002      	b.n	800be2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be36:	2101      	movs	r1, #1
 800be38:	69b8      	ldr	r0, [r7, #24]
 800be3a:	f7ff fecb 	bl	800bbd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	78fa      	ldrb	r2, [r7, #3]
 800be42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be46:	bf00      	nop
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b082      	sub	sp, #8
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00e      	beq.n	800be7a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800be6e:	2300      	movs	r3, #0
 800be70:	2200      	movs	r2, #0
 800be72:	2100      	movs	r1, #0
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 f90b 	bl	800c090 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800be7a:	bf00      	nop
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800be82:	b580      	push	{r7, lr}
 800be84:	b086      	sub	sp, #24
 800be86:	af00      	add	r7, sp, #0
 800be88:	4603      	mov	r3, r0
 800be8a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800be8c:	2301      	movs	r3, #1
 800be8e:	617b      	str	r3, [r7, #20]
 800be90:	2300      	movs	r3, #0
 800be92:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800be94:	79fb      	ldrb	r3, [r7, #7]
 800be96:	461a      	mov	r2, r3
 800be98:	6939      	ldr	r1, [r7, #16]
 800be9a:	6978      	ldr	r0, [r7, #20]
 800be9c:	f7ff ff7a 	bl	800bd94 <xQueueGenericCreate>
 800bea0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f7ff ffd3 	bl	800be4e <prvInitialiseMutex>

		return xNewQueue;
 800bea8:	68fb      	ldr	r3, [r7, #12]
	}
 800beaa:	4618      	mov	r0, r3
 800beac:	3718      	adds	r7, #24
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b088      	sub	sp, #32
 800beb6:	af02      	add	r7, sp, #8
 800beb8:	4603      	mov	r3, r0
 800beba:	6039      	str	r1, [r7, #0]
 800bebc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bebe:	2301      	movs	r3, #1
 800bec0:	617b      	str	r3, [r7, #20]
 800bec2:	2300      	movs	r3, #0
 800bec4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bec6:	79fb      	ldrb	r3, [r7, #7]
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2200      	movs	r2, #0
 800bece:	6939      	ldr	r1, [r7, #16]
 800bed0:	6978      	ldr	r0, [r7, #20]
 800bed2:	f7ff fee7 	bl	800bca4 <xQueueGenericCreateStatic>
 800bed6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f7ff ffb8 	bl	800be4e <prvInitialiseMutex>

		return xNewQueue;
 800bede:	68fb      	ldr	r3, [r7, #12]
	}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3718      	adds	r7, #24
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800bee8:	b590      	push	{r4, r7, lr}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d10a      	bne.n	800bf10 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800befa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	60fb      	str	r3, [r7, #12]
}
 800bf0c:	bf00      	nop
 800bf0e:	e7fe      	b.n	800bf0e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	689c      	ldr	r4, [r3, #8]
 800bf14:	f001 fde8 	bl	800dae8 <xTaskGetCurrentTaskHandle>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	429c      	cmp	r4, r3
 800bf1c:	d111      	bne.n	800bf42 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	1e5a      	subs	r2, r3, #1
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d105      	bne.n	800bf3c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bf30:	2300      	movs	r3, #0
 800bf32:	2200      	movs	r2, #0
 800bf34:	2100      	movs	r1, #0
 800bf36:	6938      	ldr	r0, [r7, #16]
 800bf38:	f000 f8aa 	bl	800c090 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	617b      	str	r3, [r7, #20]
 800bf40:	e001      	b.n	800bf46 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800bf42:	2300      	movs	r3, #0
 800bf44:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800bf46:	697b      	ldr	r3, [r7, #20]
	}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	371c      	adds	r7, #28
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd90      	pop	{r4, r7, pc}

0800bf50 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800bf50:	b590      	push	{r4, r7, lr}
 800bf52:	b087      	sub	sp, #28
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10a      	bne.n	800bf7a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	60fb      	str	r3, [r7, #12]
}
 800bf76:	bf00      	nop
 800bf78:	e7fe      	b.n	800bf78 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	689c      	ldr	r4, [r3, #8]
 800bf7e:	f001 fdb3 	bl	800dae8 <xTaskGetCurrentTaskHandle>
 800bf82:	4603      	mov	r3, r0
 800bf84:	429c      	cmp	r4, r3
 800bf86:	d107      	bne.n	800bf98 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	1c5a      	adds	r2, r3, #1
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800bf92:	2301      	movs	r3, #1
 800bf94:	617b      	str	r3, [r7, #20]
 800bf96:	e00c      	b.n	800bfb2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6938      	ldr	r0, [r7, #16]
 800bf9c:	f000 fb7e 	bl	800c69c <xQueueSemaphoreTake>
 800bfa0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d004      	beq.n	800bfb2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800bfb2:	697b      	ldr	r3, [r7, #20]
	}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	371c      	adds	r7, #28
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd90      	pop	{r4, r7, pc}

0800bfbc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b08a      	sub	sp, #40	; 0x28
 800bfc0:	af02      	add	r7, sp, #8
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10a      	bne.n	800bfe4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	61bb      	str	r3, [r7, #24]
}
 800bfe0:	bf00      	nop
 800bfe2:	e7fe      	b.n	800bfe2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d90a      	bls.n	800c002 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	617b      	str	r3, [r7, #20]
}
 800bffe:	bf00      	nop
 800c000:	e7fe      	b.n	800c000 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c002:	2302      	movs	r3, #2
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	2100      	movs	r1, #0
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f7ff fe49 	bl	800bca4 <xQueueGenericCreateStatic>
 800c012:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d002      	beq.n	800c020 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c020:	69fb      	ldr	r3, [r7, #28]
	}
 800c022:	4618      	mov	r0, r3
 800c024:	3720      	adds	r7, #32
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b086      	sub	sp, #24
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d10a      	bne.n	800c050 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03e:	f383 8811 	msr	BASEPRI, r3
 800c042:	f3bf 8f6f 	isb	sy
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	613b      	str	r3, [r7, #16]
}
 800c04c:	bf00      	nop
 800c04e:	e7fe      	b.n	800c04e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c050:	683a      	ldr	r2, [r7, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	429a      	cmp	r2, r3
 800c056:	d90a      	bls.n	800c06e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05c:	f383 8811 	msr	BASEPRI, r3
 800c060:	f3bf 8f6f 	isb	sy
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	60fb      	str	r3, [r7, #12]
}
 800c06a:	bf00      	nop
 800c06c:	e7fe      	b.n	800c06c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c06e:	2202      	movs	r2, #2
 800c070:	2100      	movs	r1, #0
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7ff fe8e 	bl	800bd94 <xQueueGenericCreate>
 800c078:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d002      	beq.n	800c086 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	683a      	ldr	r2, [r7, #0]
 800c084:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c086:	697b      	ldr	r3, [r7, #20]
	}
 800c088:	4618      	mov	r0, r3
 800c08a:	3718      	adds	r7, #24
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b08e      	sub	sp, #56	; 0x38
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
 800c09c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10a      	bne.n	800c0c2 <xQueueGenericSend+0x32>
	__asm volatile
 800c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0be:	bf00      	nop
 800c0c0:	e7fe      	b.n	800c0c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d103      	bne.n	800c0d0 <xQueueGenericSend+0x40>
 800c0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <xQueueGenericSend+0x44>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e000      	b.n	800c0d6 <xQueueGenericSend+0x46>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10a      	bne.n	800c0f0 <xQueueGenericSend+0x60>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0ec:	bf00      	nop
 800c0ee:	e7fe      	b.n	800c0ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d103      	bne.n	800c0fe <xQueueGenericSend+0x6e>
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d101      	bne.n	800c102 <xQueueGenericSend+0x72>
 800c0fe:	2301      	movs	r3, #1
 800c100:	e000      	b.n	800c104 <xQueueGenericSend+0x74>
 800c102:	2300      	movs	r3, #0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d10a      	bne.n	800c11e <xQueueGenericSend+0x8e>
	__asm volatile
 800c108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	623b      	str	r3, [r7, #32]
}
 800c11a:	bf00      	nop
 800c11c:	e7fe      	b.n	800c11c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c11e:	f001 fcf3 	bl	800db08 <xTaskGetSchedulerState>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d102      	bne.n	800c12e <xQueueGenericSend+0x9e>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d101      	bne.n	800c132 <xQueueGenericSend+0xa2>
 800c12e:	2301      	movs	r3, #1
 800c130:	e000      	b.n	800c134 <xQueueGenericSend+0xa4>
 800c132:	2300      	movs	r3, #0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10a      	bne.n	800c14e <xQueueGenericSend+0xbe>
	__asm volatile
 800c138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	61fb      	str	r3, [r7, #28]
}
 800c14a:	bf00      	nop
 800c14c:	e7fe      	b.n	800c14c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c14e:	f002 fb31 	bl	800e7b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d302      	bcc.n	800c164 <xQueueGenericSend+0xd4>
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	2b02      	cmp	r3, #2
 800c162:	d129      	bne.n	800c1b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c164:	683a      	ldr	r2, [r7, #0]
 800c166:	68b9      	ldr	r1, [r7, #8]
 800c168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c16a:	f000 fc5e 	bl	800ca2a <prvCopyDataToQueue>
 800c16e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c174:	2b00      	cmp	r3, #0
 800c176:	d010      	beq.n	800c19a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	3324      	adds	r3, #36	; 0x24
 800c17c:	4618      	mov	r0, r3
 800c17e:	f001 faf1 	bl	800d764 <xTaskRemoveFromEventList>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d013      	beq.n	800c1b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c188:	4b3f      	ldr	r3, [pc, #252]	; (800c288 <xQueueGenericSend+0x1f8>)
 800c18a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	f3bf 8f4f 	dsb	sy
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	e00a      	b.n	800c1b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d007      	beq.n	800c1b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c1a0:	4b39      	ldr	r3, [pc, #228]	; (800c288 <xQueueGenericSend+0x1f8>)
 800c1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1a6:	601a      	str	r2, [r3, #0]
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c1b0:	f002 fb30 	bl	800e814 <vPortExitCritical>
				return pdPASS;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e063      	b.n	800c280 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d103      	bne.n	800c1c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1be:	f002 fb29 	bl	800e814 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	e05c      	b.n	800c280 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d106      	bne.n	800c1da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1cc:	f107 0314 	add.w	r3, r7, #20
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f001 fb2b 	bl	800d82c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1da:	f002 fb1b 	bl	800e814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1de:	f001 f897 	bl	800d310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1e2:	f002 fae7 	bl	800e7b4 <vPortEnterCritical>
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1ec:	b25b      	sxtb	r3, r3
 800c1ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1f2:	d103      	bne.n	800c1fc <xQueueGenericSend+0x16c>
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c202:	b25b      	sxtb	r3, r3
 800c204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c208:	d103      	bne.n	800c212 <xQueueGenericSend+0x182>
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c212:	f002 faff 	bl	800e814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c216:	1d3a      	adds	r2, r7, #4
 800c218:	f107 0314 	add.w	r3, r7, #20
 800c21c:	4611      	mov	r1, r2
 800c21e:	4618      	mov	r0, r3
 800c220:	f001 fb1a 	bl	800d858 <xTaskCheckForTimeOut>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d124      	bne.n	800c274 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c22a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c22c:	f000 fcf5 	bl	800cc1a <prvIsQueueFull>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d018      	beq.n	800c268 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c238:	3310      	adds	r3, #16
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	4611      	mov	r1, r2
 800c23e:	4618      	mov	r0, r3
 800c240:	f001 fa40 	bl	800d6c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c246:	f000 fc80 	bl	800cb4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c24a:	f001 f86f 	bl	800d32c <xTaskResumeAll>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	f47f af7c 	bne.w	800c14e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c256:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <xQueueGenericSend+0x1f8>)
 800c258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	e772      	b.n	800c14e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c26a:	f000 fc6e 	bl	800cb4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c26e:	f001 f85d 	bl	800d32c <xTaskResumeAll>
 800c272:	e76c      	b.n	800c14e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c276:	f000 fc68 	bl	800cb4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c27a:	f001 f857 	bl	800d32c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c27e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c280:	4618      	mov	r0, r3
 800c282:	3738      	adds	r7, #56	; 0x38
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	e000ed04 	.word	0xe000ed04

0800c28c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b090      	sub	sp, #64	; 0x40
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
 800c298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d10a      	bne.n	800c2ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a8:	f383 8811 	msr	BASEPRI, r3
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	f3bf 8f4f 	dsb	sy
 800c2b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2b6:	bf00      	nop
 800c2b8:	e7fe      	b.n	800c2b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d103      	bne.n	800c2c8 <xQueueGenericSendFromISR+0x3c>
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <xQueueGenericSendFromISR+0x40>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e000      	b.n	800c2ce <xQueueGenericSendFromISR+0x42>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10a      	bne.n	800c2e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2e4:	bf00      	nop
 800c2e6:	e7fe      	b.n	800c2e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d103      	bne.n	800c2f6 <xQueueGenericSendFromISR+0x6a>
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d101      	bne.n	800c2fa <xQueueGenericSendFromISR+0x6e>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e000      	b.n	800c2fc <xQueueGenericSendFromISR+0x70>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10a      	bne.n	800c316 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	623b      	str	r3, [r7, #32]
}
 800c312:	bf00      	nop
 800c314:	e7fe      	b.n	800c314 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c316:	f002 fb2f 	bl	800e978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c31a:	f3ef 8211 	mrs	r2, BASEPRI
 800c31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	61fa      	str	r2, [r7, #28]
 800c330:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c332:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c334:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c33e:	429a      	cmp	r2, r3
 800c340:	d302      	bcc.n	800c348 <xQueueGenericSendFromISR+0xbc>
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	2b02      	cmp	r3, #2
 800c346:	d12f      	bne.n	800c3a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c356:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c358:	683a      	ldr	r2, [r7, #0]
 800c35a:	68b9      	ldr	r1, [r7, #8]
 800c35c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c35e:	f000 fb64 	bl	800ca2a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c362:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c36a:	d112      	bne.n	800c392 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c370:	2b00      	cmp	r3, #0
 800c372:	d016      	beq.n	800c3a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c376:	3324      	adds	r3, #36	; 0x24
 800c378:	4618      	mov	r0, r3
 800c37a:	f001 f9f3 	bl	800d764 <xTaskRemoveFromEventList>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00e      	beq.n	800c3a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00b      	beq.n	800c3a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2201      	movs	r2, #1
 800c38e:	601a      	str	r2, [r3, #0]
 800c390:	e007      	b.n	800c3a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c392:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c396:	3301      	adds	r3, #1
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	b25a      	sxtb	r2, r3
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c3a6:	e001      	b.n	800c3ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c3b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3740      	adds	r7, #64	; 0x40
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b08e      	sub	sp, #56	; 0x38
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
 800c3ca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d10a      	bne.n	800c3ec <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3da:	f383 8811 	msr	BASEPRI, r3
 800c3de:	f3bf 8f6f 	isb	sy
 800c3e2:	f3bf 8f4f 	dsb	sy
 800c3e6:	623b      	str	r3, [r7, #32]
}
 800c3e8:	bf00      	nop
 800c3ea:	e7fe      	b.n	800c3ea <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00a      	beq.n	800c40a <xQueueGiveFromISR+0x48>
	__asm volatile
 800c3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f8:	f383 8811 	msr	BASEPRI, r3
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	61fb      	str	r3, [r7, #28]
}
 800c406:	bf00      	nop
 800c408:	e7fe      	b.n	800c408 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d103      	bne.n	800c41a <xQueueGiveFromISR+0x58>
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d101      	bne.n	800c41e <xQueueGiveFromISR+0x5c>
 800c41a:	2301      	movs	r3, #1
 800c41c:	e000      	b.n	800c420 <xQueueGiveFromISR+0x5e>
 800c41e:	2300      	movs	r3, #0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10a      	bne.n	800c43a <xQueueGiveFromISR+0x78>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	61bb      	str	r3, [r7, #24]
}
 800c436:	bf00      	nop
 800c438:	e7fe      	b.n	800c438 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c43a:	f002 fa9d 	bl	800e978 <vPortValidateInterruptPriority>
	__asm volatile
 800c43e:	f3ef 8211 	mrs	r2, BASEPRI
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	617a      	str	r2, [r7, #20]
 800c454:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c456:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c458:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c466:	429a      	cmp	r2, r3
 800c468:	d22b      	bcs.n	800c4c2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c47c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c484:	d112      	bne.n	800c4ac <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d016      	beq.n	800c4bc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c490:	3324      	adds	r3, #36	; 0x24
 800c492:	4618      	mov	r0, r3
 800c494:	f001 f966 	bl	800d764 <xTaskRemoveFromEventList>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00e      	beq.n	800c4bc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00b      	beq.n	800c4bc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	601a      	str	r2, [r3, #0]
 800c4aa:	e007      	b.n	800c4bc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	b25a      	sxtb	r2, r3
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	637b      	str	r3, [r7, #52]	; 0x34
 800c4c0:	e001      	b.n	800c4c6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f383 8811 	msr	BASEPRI, r3
}
 800c4d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3738      	adds	r7, #56	; 0x38
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b08c      	sub	sp, #48	; 0x30
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10a      	bne.n	800c50c <xQueueReceive+0x30>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	623b      	str	r3, [r7, #32]
}
 800c508:	bf00      	nop
 800c50a:	e7fe      	b.n	800c50a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d103      	bne.n	800c51a <xQueueReceive+0x3e>
 800c512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c516:	2b00      	cmp	r3, #0
 800c518:	d101      	bne.n	800c51e <xQueueReceive+0x42>
 800c51a:	2301      	movs	r3, #1
 800c51c:	e000      	b.n	800c520 <xQueueReceive+0x44>
 800c51e:	2300      	movs	r3, #0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d10a      	bne.n	800c53a <xQueueReceive+0x5e>
	__asm volatile
 800c524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c528:	f383 8811 	msr	BASEPRI, r3
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	f3bf 8f4f 	dsb	sy
 800c534:	61fb      	str	r3, [r7, #28]
}
 800c536:	bf00      	nop
 800c538:	e7fe      	b.n	800c538 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c53a:	f001 fae5 	bl	800db08 <xTaskGetSchedulerState>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d102      	bne.n	800c54a <xQueueReceive+0x6e>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d101      	bne.n	800c54e <xQueueReceive+0x72>
 800c54a:	2301      	movs	r3, #1
 800c54c:	e000      	b.n	800c550 <xQueueReceive+0x74>
 800c54e:	2300      	movs	r3, #0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d10a      	bne.n	800c56a <xQueueReceive+0x8e>
	__asm volatile
 800c554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	61bb      	str	r3, [r7, #24]
}
 800c566:	bf00      	nop
 800c568:	e7fe      	b.n	800c568 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c56a:	f002 f923 	bl	800e7b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c572:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	2b00      	cmp	r3, #0
 800c578:	d01f      	beq.n	800c5ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c57a:	68b9      	ldr	r1, [r7, #8]
 800c57c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c57e:	f000 fabe 	bl	800cafe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c584:	1e5a      	subs	r2, r3, #1
 800c586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c588:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00f      	beq.n	800c5b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	3310      	adds	r3, #16
 800c596:	4618      	mov	r0, r3
 800c598:	f001 f8e4 	bl	800d764 <xTaskRemoveFromEventList>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d007      	beq.n	800c5b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5a2:	4b3d      	ldr	r3, [pc, #244]	; (800c698 <xQueueReceive+0x1bc>)
 800c5a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5a8:	601a      	str	r2, [r3, #0]
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5b2:	f002 f92f 	bl	800e814 <vPortExitCritical>
				return pdPASS;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e069      	b.n	800c68e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d103      	bne.n	800c5c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5c0:	f002 f928 	bl	800e814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	e062      	b.n	800c68e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d106      	bne.n	800c5dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5ce:	f107 0310 	add.w	r3, r7, #16
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f001 f92a 	bl	800d82c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5dc:	f002 f91a 	bl	800e814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5e0:	f000 fe96 	bl	800d310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5e4:	f002 f8e6 	bl	800e7b4 <vPortEnterCritical>
 800c5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5ee:	b25b      	sxtb	r3, r3
 800c5f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5f4:	d103      	bne.n	800c5fe <xQueueReceive+0x122>
 800c5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c604:	b25b      	sxtb	r3, r3
 800c606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c60a:	d103      	bne.n	800c614 <xQueueReceive+0x138>
 800c60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c614:	f002 f8fe 	bl	800e814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c618:	1d3a      	adds	r2, r7, #4
 800c61a:	f107 0310 	add.w	r3, r7, #16
 800c61e:	4611      	mov	r1, r2
 800c620:	4618      	mov	r0, r3
 800c622:	f001 f919 	bl	800d858 <xTaskCheckForTimeOut>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d123      	bne.n	800c674 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c62e:	f000 fade 	bl	800cbee <prvIsQueueEmpty>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d017      	beq.n	800c668 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63a:	3324      	adds	r3, #36	; 0x24
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	4611      	mov	r1, r2
 800c640:	4618      	mov	r0, r3
 800c642:	f001 f83f 	bl	800d6c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c648:	f000 fa7f 	bl	800cb4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c64c:	f000 fe6e 	bl	800d32c <xTaskResumeAll>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d189      	bne.n	800c56a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c656:	4b10      	ldr	r3, [pc, #64]	; (800c698 <xQueueReceive+0x1bc>)
 800c658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c65c:	601a      	str	r2, [r3, #0]
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	e780      	b.n	800c56a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c66a:	f000 fa6e 	bl	800cb4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c66e:	f000 fe5d 	bl	800d32c <xTaskResumeAll>
 800c672:	e77a      	b.n	800c56a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c676:	f000 fa68 	bl	800cb4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c67a:	f000 fe57 	bl	800d32c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c67e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c680:	f000 fab5 	bl	800cbee <prvIsQueueEmpty>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	f43f af6f 	beq.w	800c56a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c68c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3730      	adds	r7, #48	; 0x30
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	e000ed04 	.word	0xe000ed04

0800c69c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b08e      	sub	sp, #56	; 0x38
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d10a      	bne.n	800c6ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6bc:	f383 8811 	msr	BASEPRI, r3
 800c6c0:	f3bf 8f6f 	isb	sy
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	623b      	str	r3, [r7, #32]
}
 800c6ca:	bf00      	nop
 800c6cc:	e7fe      	b.n	800c6cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00a      	beq.n	800c6ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	61fb      	str	r3, [r7, #28]
}
 800c6e8:	bf00      	nop
 800c6ea:	e7fe      	b.n	800c6ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6ec:	f001 fa0c 	bl	800db08 <xTaskGetSchedulerState>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d102      	bne.n	800c6fc <xQueueSemaphoreTake+0x60>
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <xQueueSemaphoreTake+0x64>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e000      	b.n	800c702 <xQueueSemaphoreTake+0x66>
 800c700:	2300      	movs	r3, #0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10a      	bne.n	800c71c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	61bb      	str	r3, [r7, #24]
}
 800c718:	bf00      	nop
 800c71a:	e7fe      	b.n	800c71a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c71c:	f002 f84a 	bl	800e7b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c724:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d024      	beq.n	800c776 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72e:	1e5a      	subs	r2, r3, #1
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d104      	bne.n	800c746 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c73c:	f001 fb5a 	bl	800ddf4 <pvTaskIncrementMutexHeldCount>
 800c740:	4602      	mov	r2, r0
 800c742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c744:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c748:	691b      	ldr	r3, [r3, #16]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00f      	beq.n	800c76e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c750:	3310      	adds	r3, #16
 800c752:	4618      	mov	r0, r3
 800c754:	f001 f806 	bl	800d764 <xTaskRemoveFromEventList>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d007      	beq.n	800c76e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c75e:	4b54      	ldr	r3, [pc, #336]	; (800c8b0 <xQueueSemaphoreTake+0x214>)
 800c760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c764:	601a      	str	r2, [r3, #0]
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c76e:	f002 f851 	bl	800e814 <vPortExitCritical>
				return pdPASS;
 800c772:	2301      	movs	r3, #1
 800c774:	e097      	b.n	800c8a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d111      	bne.n	800c7a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00a      	beq.n	800c798 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	617b      	str	r3, [r7, #20]
}
 800c794:	bf00      	nop
 800c796:	e7fe      	b.n	800c796 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c798:	f002 f83c 	bl	800e814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c79c:	2300      	movs	r3, #0
 800c79e:	e082      	b.n	800c8a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d106      	bne.n	800c7b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7a6:	f107 030c 	add.w	r3, r7, #12
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f001 f83e 	bl	800d82c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7b4:	f002 f82e 	bl	800e814 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7b8:	f000 fdaa 	bl	800d310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7bc:	f001 fffa 	bl	800e7b4 <vPortEnterCritical>
 800c7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7c6:	b25b      	sxtb	r3, r3
 800c7c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7cc:	d103      	bne.n	800c7d6 <xQueueSemaphoreTake+0x13a>
 800c7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7dc:	b25b      	sxtb	r3, r3
 800c7de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7e2:	d103      	bne.n	800c7ec <xQueueSemaphoreTake+0x150>
 800c7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7ec:	f002 f812 	bl	800e814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7f0:	463a      	mov	r2, r7
 800c7f2:	f107 030c 	add.w	r3, r7, #12
 800c7f6:	4611      	mov	r1, r2
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f001 f82d 	bl	800d858 <xTaskCheckForTimeOut>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	d132      	bne.n	800c86a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c806:	f000 f9f2 	bl	800cbee <prvIsQueueEmpty>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d026      	beq.n	800c85e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d109      	bne.n	800c82c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c818:	f001 ffcc 	bl	800e7b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	4618      	mov	r0, r3
 800c822:	f001 f98f 	bl	800db44 <xTaskPriorityInherit>
 800c826:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c828:	f001 fff4 	bl	800e814 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	3324      	adds	r3, #36	; 0x24
 800c830:	683a      	ldr	r2, [r7, #0]
 800c832:	4611      	mov	r1, r2
 800c834:	4618      	mov	r0, r3
 800c836:	f000 ff45 	bl	800d6c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c83a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c83c:	f000 f985 	bl	800cb4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c840:	f000 fd74 	bl	800d32c <xTaskResumeAll>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	f47f af68 	bne.w	800c71c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c84c:	4b18      	ldr	r3, [pc, #96]	; (800c8b0 <xQueueSemaphoreTake+0x214>)
 800c84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	e75e      	b.n	800c71c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c85e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c860:	f000 f973 	bl	800cb4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c864:	f000 fd62 	bl	800d32c <xTaskResumeAll>
 800c868:	e758      	b.n	800c71c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c86a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c86c:	f000 f96d 	bl	800cb4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c870:	f000 fd5c 	bl	800d32c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c874:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c876:	f000 f9ba 	bl	800cbee <prvIsQueueEmpty>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f43f af4d 	beq.w	800c71c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00d      	beq.n	800c8a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c888:	f001 ff94 	bl	800e7b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c88c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c88e:	f000 f8b4 	bl	800c9fa <prvGetDisinheritPriorityAfterTimeout>
 800c892:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c89a:	4618      	mov	r0, r3
 800c89c:	f001 fa28 	bl	800dcf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c8a0:	f001 ffb8 	bl	800e814 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c8a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3738      	adds	r7, #56	; 0x38
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	e000ed04 	.word	0xe000ed04

0800c8b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b08e      	sub	sp, #56	; 0x38
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10a      	bne.n	800c8e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	623b      	str	r3, [r7, #32]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d103      	bne.n	800c8ee <xQueueReceiveFromISR+0x3a>
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d101      	bne.n	800c8f2 <xQueueReceiveFromISR+0x3e>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e000      	b.n	800c8f4 <xQueueReceiveFromISR+0x40>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d10a      	bne.n	800c90e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	61fb      	str	r3, [r7, #28]
}
 800c90a:	bf00      	nop
 800c90c:	e7fe      	b.n	800c90c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c90e:	f002 f833 	bl	800e978 <vPortValidateInterruptPriority>
	__asm volatile
 800c912:	f3ef 8211 	mrs	r2, BASEPRI
 800c916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	61ba      	str	r2, [r7, #24]
 800c928:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c92a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c92c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c932:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c936:	2b00      	cmp	r3, #0
 800c938:	d02f      	beq.n	800c99a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c944:	68b9      	ldr	r1, [r7, #8]
 800c946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c948:	f000 f8d9 	bl	800cafe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94e:	1e5a      	subs	r2, r3, #1
 800c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c952:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c954:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c95c:	d112      	bne.n	800c984 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d016      	beq.n	800c994 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	3310      	adds	r3, #16
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 fefa 	bl	800d764 <xTaskRemoveFromEventList>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00e      	beq.n	800c994 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00b      	beq.n	800c994 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2201      	movs	r2, #1
 800c980:	601a      	str	r2, [r3, #0]
 800c982:	e007      	b.n	800c994 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c988:	3301      	adds	r3, #1
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	b25a      	sxtb	r2, r3
 800c98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c994:	2301      	movs	r3, #1
 800c996:	637b      	str	r3, [r7, #52]	; 0x34
 800c998:	e001      	b.n	800c99e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c99a:	2300      	movs	r3, #0
 800c99c:	637b      	str	r3, [r7, #52]	; 0x34
 800c99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f383 8811 	msr	BASEPRI, r3
}
 800c9a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3738      	adds	r7, #56	; 0x38
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d10a      	bne.n	800c9dc <vQueueDelete+0x28>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	60bb      	str	r3, [r7, #8]
}
 800c9d8:	bf00      	nop
 800c9da:	e7fe      	b.n	800c9da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c9dc:	68f8      	ldr	r0, [r7, #12]
 800c9de:	f000 f95f 	bl	800cca0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d102      	bne.n	800c9f2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f002 f8cf 	bl	800eb90 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c9f2:	bf00      	nop
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c9fa:	b480      	push	{r7}
 800c9fc:	b085      	sub	sp, #20
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d006      	beq.n	800ca18 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ca14:	60fb      	str	r3, [r7, #12]
 800ca16:	e001      	b.n	800ca1c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
	}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3714      	adds	r7, #20
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr

0800ca2a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b086      	sub	sp, #24
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	60f8      	str	r0, [r7, #12]
 800ca32:	60b9      	str	r1, [r7, #8]
 800ca34:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ca36:	2300      	movs	r3, #0
 800ca38:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10d      	bne.n	800ca64 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d14d      	bne.n	800caec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	4618      	mov	r0, r3
 800ca56:	f001 f8dd 	bl	800dc14 <xTaskPriorityDisinherit>
 800ca5a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	609a      	str	r2, [r3, #8]
 800ca62:	e043      	b.n	800caec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d119      	bne.n	800ca9e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6858      	ldr	r0, [r3, #4]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca72:	461a      	mov	r2, r3
 800ca74:	68b9      	ldr	r1, [r7, #8]
 800ca76:	f002 f9d5 	bl	800ee24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca82:	441a      	add	r2, r3
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d32b      	bcc.n	800caec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	605a      	str	r2, [r3, #4]
 800ca9c:	e026      	b.n	800caec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	68d8      	ldr	r0, [r3, #12]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa6:	461a      	mov	r2, r3
 800caa8:	68b9      	ldr	r1, [r7, #8]
 800caaa:	f002 f9bb 	bl	800ee24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	68da      	ldr	r2, [r3, #12]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab6:	425b      	negs	r3, r3
 800cab8:	441a      	add	r2, r3
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	68da      	ldr	r2, [r3, #12]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d207      	bcs.n	800cada <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	689a      	ldr	r2, [r3, #8]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad2:	425b      	negs	r3, r3
 800cad4:	441a      	add	r2, r3
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d105      	bne.n	800caec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d002      	beq.n	800caec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	3b01      	subs	r3, #1
 800caea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	1c5a      	adds	r2, r3, #1
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800caf4:	697b      	ldr	r3, [r7, #20]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b082      	sub	sp, #8
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
 800cb06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d018      	beq.n	800cb42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	68da      	ldr	r2, [r3, #12]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb18:	441a      	add	r2, r3
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	68da      	ldr	r2, [r3, #12]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d303      	bcc.n	800cb32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	68d9      	ldr	r1, [r3, #12]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	6838      	ldr	r0, [r7, #0]
 800cb3e:	f002 f971 	bl	800ee24 <memcpy>
	}
}
 800cb42:	bf00      	nop
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cb52:	f001 fe2f 	bl	800e7b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb5e:	e011      	b.n	800cb84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d012      	beq.n	800cb8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	3324      	adds	r3, #36	; 0x24
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f000 fdf9 	bl	800d764 <xTaskRemoveFromEventList>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb78:	f000 fed0 	bl	800d91c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb7c:	7bfb      	ldrb	r3, [r7, #15]
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	dce9      	bgt.n	800cb60 <prvUnlockQueue+0x16>
 800cb8c:	e000      	b.n	800cb90 <prvUnlockQueue+0x46>
					break;
 800cb8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	22ff      	movs	r2, #255	; 0xff
 800cb94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cb98:	f001 fe3c 	bl	800e814 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb9c:	f001 fe0a 	bl	800e7b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cba6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cba8:	e011      	b.n	800cbce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	691b      	ldr	r3, [r3, #16]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d012      	beq.n	800cbd8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	3310      	adds	r3, #16
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 fdd4 	bl	800d764 <xTaskRemoveFromEventList>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d001      	beq.n	800cbc6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cbc2:	f000 feab 	bl	800d91c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cbc6:	7bbb      	ldrb	r3, [r7, #14]
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	dce9      	bgt.n	800cbaa <prvUnlockQueue+0x60>
 800cbd6:	e000      	b.n	800cbda <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cbd8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	22ff      	movs	r2, #255	; 0xff
 800cbde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cbe2:	f001 fe17 	bl	800e814 <vPortExitCritical>
}
 800cbe6:	bf00      	nop
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b084      	sub	sp, #16
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbf6:	f001 fddd 	bl	800e7b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d102      	bne.n	800cc08 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cc02:	2301      	movs	r3, #1
 800cc04:	60fb      	str	r3, [r7, #12]
 800cc06:	e001      	b.n	800cc0c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc0c:	f001 fe02 	bl	800e814 <vPortExitCritical>

	return xReturn;
 800cc10:	68fb      	ldr	r3, [r7, #12]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b084      	sub	sp, #16
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc22:	f001 fdc7 	bl	800e7b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d102      	bne.n	800cc38 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cc32:	2301      	movs	r3, #1
 800cc34:	60fb      	str	r3, [r7, #12]
 800cc36:	e001      	b.n	800cc3c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc3c:	f001 fdea 	bl	800e814 <vPortExitCritical>

	return xReturn;
 800cc40:	68fb      	ldr	r3, [r7, #12]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
	...

0800cc4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b085      	sub	sp, #20
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc56:	2300      	movs	r3, #0
 800cc58:	60fb      	str	r3, [r7, #12]
 800cc5a:	e014      	b.n	800cc86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cc5c:	4a0f      	ldr	r2, [pc, #60]	; (800cc9c <vQueueAddToRegistry+0x50>)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d10b      	bne.n	800cc80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cc68:	490c      	ldr	r1, [pc, #48]	; (800cc9c <vQueueAddToRegistry+0x50>)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	683a      	ldr	r2, [r7, #0]
 800cc6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cc72:	4a0a      	ldr	r2, [pc, #40]	; (800cc9c <vQueueAddToRegistry+0x50>)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	00db      	lsls	r3, r3, #3
 800cc78:	4413      	add	r3, r2
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc7e:	e006      	b.n	800cc8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	3301      	adds	r3, #1
 800cc84:	60fb      	str	r3, [r7, #12]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2b07      	cmp	r3, #7
 800cc8a:	d9e7      	bls.n	800cc5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc8c:	bf00      	nop
 800cc8e:	bf00      	nop
 800cc90:	3714      	adds	r7, #20
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	20009b50 	.word	0x20009b50

0800cca0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cca8:	2300      	movs	r3, #0
 800ccaa:	60fb      	str	r3, [r7, #12]
 800ccac:	e016      	b.n	800ccdc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ccae:	4a10      	ldr	r2, [pc, #64]	; (800ccf0 <vQueueUnregisterQueue+0x50>)
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	00db      	lsls	r3, r3, #3
 800ccb4:	4413      	add	r3, r2
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d10b      	bne.n	800ccd6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ccbe:	4a0c      	ldr	r2, [pc, #48]	; (800ccf0 <vQueueUnregisterQueue+0x50>)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ccc8:	4a09      	ldr	r2, [pc, #36]	; (800ccf0 <vQueueUnregisterQueue+0x50>)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	4413      	add	r3, r2
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	605a      	str	r2, [r3, #4]
				break;
 800ccd4:	e006      	b.n	800cce4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	60fb      	str	r3, [r7, #12]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2b07      	cmp	r3, #7
 800cce0:	d9e5      	bls.n	800ccae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cce2:	bf00      	nop
 800cce4:	bf00      	nop
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	20009b50 	.word	0x20009b50

0800ccf4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cd04:	f001 fd56 	bl	800e7b4 <vPortEnterCritical>
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd0e:	b25b      	sxtb	r3, r3
 800cd10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd14:	d103      	bne.n	800cd1e <vQueueWaitForMessageRestricted+0x2a>
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd24:	b25b      	sxtb	r3, r3
 800cd26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd2a:	d103      	bne.n	800cd34 <vQueueWaitForMessageRestricted+0x40>
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd34:	f001 fd6e 	bl	800e814 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d106      	bne.n	800cd4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	3324      	adds	r3, #36	; 0x24
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	68b9      	ldr	r1, [r7, #8]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 fcdf 	bl	800d70c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cd4e:	6978      	ldr	r0, [r7, #20]
 800cd50:	f7ff fefb 	bl	800cb4a <prvUnlockQueue>
	}
 800cd54:	bf00      	nop
 800cd56:	3718      	adds	r7, #24
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b08e      	sub	sp, #56	; 0x38
 800cd60:	af04      	add	r7, sp, #16
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
 800cd68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10a      	bne.n	800cd86 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	623b      	str	r3, [r7, #32]
}
 800cd82:	bf00      	nop
 800cd84:	e7fe      	b.n	800cd84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d10a      	bne.n	800cda2 <xTaskCreateStatic+0x46>
	__asm volatile
 800cd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd90:	f383 8811 	msr	BASEPRI, r3
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	61fb      	str	r3, [r7, #28]
}
 800cd9e:	bf00      	nop
 800cda0:	e7fe      	b.n	800cda0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cda2:	23bc      	movs	r3, #188	; 0xbc
 800cda4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	2bbc      	cmp	r3, #188	; 0xbc
 800cdaa:	d00a      	beq.n	800cdc2 <xTaskCreateStatic+0x66>
	__asm volatile
 800cdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb0:	f383 8811 	msr	BASEPRI, r3
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	61bb      	str	r3, [r7, #24]
}
 800cdbe:	bf00      	nop
 800cdc0:	e7fe      	b.n	800cdc0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cdc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d01e      	beq.n	800ce08 <xTaskCreateStatic+0xac>
 800cdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d01b      	beq.n	800ce08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cddc:	2202      	movs	r2, #2
 800cdde:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cde2:	2300      	movs	r3, #0
 800cde4:	9303      	str	r3, [sp, #12]
 800cde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde8:	9302      	str	r3, [sp, #8]
 800cdea:	f107 0314 	add.w	r3, r7, #20
 800cdee:	9301      	str	r3, [sp, #4]
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	68b9      	ldr	r1, [r7, #8]
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f000 f850 	bl	800cea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce02:	f000 f8f3 	bl	800cfec <prvAddNewTaskToReadyList>
 800ce06:	e001      	b.n	800ce0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ce0c:	697b      	ldr	r3, [r7, #20]
	}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3728      	adds	r7, #40	; 0x28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b08c      	sub	sp, #48	; 0x30
 800ce1a:	af04      	add	r7, sp, #16
 800ce1c:	60f8      	str	r0, [r7, #12]
 800ce1e:	60b9      	str	r1, [r7, #8]
 800ce20:	603b      	str	r3, [r7, #0]
 800ce22:	4613      	mov	r3, r2
 800ce24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ce26:	88fb      	ldrh	r3, [r7, #6]
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f001 fde4 	bl	800e9f8 <pvPortMalloc>
 800ce30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00e      	beq.n	800ce56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ce38:	20bc      	movs	r0, #188	; 0xbc
 800ce3a:	f001 fddd 	bl	800e9f8 <pvPortMalloc>
 800ce3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d003      	beq.n	800ce4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	697a      	ldr	r2, [r7, #20]
 800ce4a:	631a      	str	r2, [r3, #48]	; 0x30
 800ce4c:	e005      	b.n	800ce5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ce4e:	6978      	ldr	r0, [r7, #20]
 800ce50:	f001 fe9e 	bl	800eb90 <vPortFree>
 800ce54:	e001      	b.n	800ce5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ce56:	2300      	movs	r3, #0
 800ce58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d017      	beq.n	800ce90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce68:	88fa      	ldrh	r2, [r7, #6]
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	9303      	str	r3, [sp, #12]
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	9302      	str	r3, [sp, #8]
 800ce72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	68b9      	ldr	r1, [r7, #8]
 800ce7e:	68f8      	ldr	r0, [r7, #12]
 800ce80:	f000 f80e 	bl	800cea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce84:	69f8      	ldr	r0, [r7, #28]
 800ce86:	f000 f8b1 	bl	800cfec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	61bb      	str	r3, [r7, #24]
 800ce8e:	e002      	b.n	800ce96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce96:	69bb      	ldr	r3, [r7, #24]
	}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3720      	adds	r7, #32
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b088      	sub	sp, #32
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	21a5      	movs	r1, #165	; 0xa5
 800ceba:	f001 ffc1 	bl	800ee40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cec8:	3b01      	subs	r3, #1
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	4413      	add	r3, r2
 800cece:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	f023 0307 	bic.w	r3, r3, #7
 800ced6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	f003 0307 	and.w	r3, r3, #7
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00a      	beq.n	800cef8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee6:	f383 8811 	msr	BASEPRI, r3
 800ceea:	f3bf 8f6f 	isb	sy
 800ceee:	f3bf 8f4f 	dsb	sy
 800cef2:	617b      	str	r3, [r7, #20]
}
 800cef4:	bf00      	nop
 800cef6:	e7fe      	b.n	800cef6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d01f      	beq.n	800cf3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cefe:	2300      	movs	r3, #0
 800cf00:	61fb      	str	r3, [r7, #28]
 800cf02:	e012      	b.n	800cf2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	4413      	add	r3, r2
 800cf0a:	7819      	ldrb	r1, [r3, #0]
 800cf0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	4413      	add	r3, r2
 800cf12:	3334      	adds	r3, #52	; 0x34
 800cf14:	460a      	mov	r2, r1
 800cf16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d006      	beq.n	800cf32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	3301      	adds	r3, #1
 800cf28:	61fb      	str	r3, [r7, #28]
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	2b0f      	cmp	r3, #15
 800cf2e:	d9e9      	bls.n	800cf04 <prvInitialiseNewTask+0x64>
 800cf30:	e000      	b.n	800cf34 <prvInitialiseNewTask+0x94>
			{
				break;
 800cf32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf36:	2200      	movs	r2, #0
 800cf38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cf3c:	e003      	b.n	800cf46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf48:	2b37      	cmp	r3, #55	; 0x37
 800cf4a:	d901      	bls.n	800cf50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cf4c:	2337      	movs	r3, #55	; 0x37
 800cf4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5e:	2200      	movs	r2, #0
 800cf60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf64:	3304      	adds	r3, #4
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7fe fda0 	bl	800baac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6e:	3318      	adds	r3, #24
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fe fd9b 	bl	800baac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf96:	2200      	movs	r2, #0
 800cf98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9e:	3354      	adds	r3, #84	; 0x54
 800cfa0:	2260      	movs	r2, #96	; 0x60
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f001 ff4b 	bl	800ee40 <memset>
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfac:	4a0c      	ldr	r2, [pc, #48]	; (800cfe0 <prvInitialiseNewTask+0x140>)
 800cfae:	659a      	str	r2, [r3, #88]	; 0x58
 800cfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb2:	4a0c      	ldr	r2, [pc, #48]	; (800cfe4 <prvInitialiseNewTask+0x144>)
 800cfb4:	65da      	str	r2, [r3, #92]	; 0x5c
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb8:	4a0b      	ldr	r2, [pc, #44]	; (800cfe8 <prvInitialiseNewTask+0x148>)
 800cfba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cfbc:	683a      	ldr	r2, [r7, #0]
 800cfbe:	68f9      	ldr	r1, [r7, #12]
 800cfc0:	69b8      	ldr	r0, [r7, #24]
 800cfc2:	f001 facd 	bl	800e560 <pxPortInitialiseStack>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d002      	beq.n	800cfd8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfd8:	bf00      	nop
 800cfda:	3720      	adds	r7, #32
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	0801dc58 	.word	0x0801dc58
 800cfe4:	0801dc78 	.word	0x0801dc78
 800cfe8:	0801dc38 	.word	0x0801dc38

0800cfec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cff4:	f001 fbde 	bl	800e7b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cff8:	4b2d      	ldr	r3, [pc, #180]	; (800d0b0 <prvAddNewTaskToReadyList+0xc4>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3301      	adds	r3, #1
 800cffe:	4a2c      	ldr	r2, [pc, #176]	; (800d0b0 <prvAddNewTaskToReadyList+0xc4>)
 800d000:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d002:	4b2c      	ldr	r3, [pc, #176]	; (800d0b4 <prvAddNewTaskToReadyList+0xc8>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d109      	bne.n	800d01e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d00a:	4a2a      	ldr	r2, [pc, #168]	; (800d0b4 <prvAddNewTaskToReadyList+0xc8>)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d010:	4b27      	ldr	r3, [pc, #156]	; (800d0b0 <prvAddNewTaskToReadyList+0xc4>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2b01      	cmp	r3, #1
 800d016:	d110      	bne.n	800d03a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d018:	f000 fca4 	bl	800d964 <prvInitialiseTaskLists>
 800d01c:	e00d      	b.n	800d03a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d01e:	4b26      	ldr	r3, [pc, #152]	; (800d0b8 <prvAddNewTaskToReadyList+0xcc>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d109      	bne.n	800d03a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d026:	4b23      	ldr	r3, [pc, #140]	; (800d0b4 <prvAddNewTaskToReadyList+0xc8>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d030:	429a      	cmp	r2, r3
 800d032:	d802      	bhi.n	800d03a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d034:	4a1f      	ldr	r2, [pc, #124]	; (800d0b4 <prvAddNewTaskToReadyList+0xc8>)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d03a:	4b20      	ldr	r3, [pc, #128]	; (800d0bc <prvAddNewTaskToReadyList+0xd0>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	3301      	adds	r3, #1
 800d040:	4a1e      	ldr	r2, [pc, #120]	; (800d0bc <prvAddNewTaskToReadyList+0xd0>)
 800d042:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d044:	4b1d      	ldr	r3, [pc, #116]	; (800d0bc <prvAddNewTaskToReadyList+0xd0>)
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d050:	4b1b      	ldr	r3, [pc, #108]	; (800d0c0 <prvAddNewTaskToReadyList+0xd4>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	429a      	cmp	r2, r3
 800d056:	d903      	bls.n	800d060 <prvAddNewTaskToReadyList+0x74>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05c:	4a18      	ldr	r2, [pc, #96]	; (800d0c0 <prvAddNewTaskToReadyList+0xd4>)
 800d05e:	6013      	str	r3, [r2, #0]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d064:	4613      	mov	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	4413      	add	r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	4a15      	ldr	r2, [pc, #84]	; (800d0c4 <prvAddNewTaskToReadyList+0xd8>)
 800d06e:	441a      	add	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	3304      	adds	r3, #4
 800d074:	4619      	mov	r1, r3
 800d076:	4610      	mov	r0, r2
 800d078:	f7fe fd25 	bl	800bac6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d07c:	f001 fbca 	bl	800e814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d080:	4b0d      	ldr	r3, [pc, #52]	; (800d0b8 <prvAddNewTaskToReadyList+0xcc>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00e      	beq.n	800d0a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d088:	4b0a      	ldr	r3, [pc, #40]	; (800d0b4 <prvAddNewTaskToReadyList+0xc8>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d092:	429a      	cmp	r2, r3
 800d094:	d207      	bcs.n	800d0a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d096:	4b0c      	ldr	r3, [pc, #48]	; (800d0c8 <prvAddNewTaskToReadyList+0xdc>)
 800d098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0a6:	bf00      	nop
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	2000a064 	.word	0x2000a064
 800d0b4:	20009b90 	.word	0x20009b90
 800d0b8:	2000a070 	.word	0x2000a070
 800d0bc:	2000a080 	.word	0x2000a080
 800d0c0:	2000a06c 	.word	0x2000a06c
 800d0c4:	20009b94 	.word	0x20009b94
 800d0c8:	e000ed04 	.word	0xe000ed04

0800d0cc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b08a      	sub	sp, #40	; 0x28
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10a      	bne.n	800d0f6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800d0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	617b      	str	r3, [r7, #20]
}
 800d0f2:	bf00      	nop
 800d0f4:	e7fe      	b.n	800d0f4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d10a      	bne.n	800d112 <vTaskDelayUntil+0x46>
	__asm volatile
 800d0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d100:	f383 8811 	msr	BASEPRI, r3
 800d104:	f3bf 8f6f 	isb	sy
 800d108:	f3bf 8f4f 	dsb	sy
 800d10c:	613b      	str	r3, [r7, #16]
}
 800d10e:	bf00      	nop
 800d110:	e7fe      	b.n	800d110 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800d112:	4b2a      	ldr	r3, [pc, #168]	; (800d1bc <vTaskDelayUntil+0xf0>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00a      	beq.n	800d130 <vTaskDelayUntil+0x64>
	__asm volatile
 800d11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11e:	f383 8811 	msr	BASEPRI, r3
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	f3bf 8f4f 	dsb	sy
 800d12a:	60fb      	str	r3, [r7, #12]
}
 800d12c:	bf00      	nop
 800d12e:	e7fe      	b.n	800d12e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800d130:	f000 f8ee 	bl	800d310 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d134:	4b22      	ldr	r3, [pc, #136]	; (800d1c0 <vTaskDelayUntil+0xf4>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	683a      	ldr	r2, [r7, #0]
 800d140:	4413      	add	r3, r2
 800d142:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6a3a      	ldr	r2, [r7, #32]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d20b      	bcs.n	800d166 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	69fa      	ldr	r2, [r7, #28]
 800d154:	429a      	cmp	r2, r3
 800d156:	d211      	bcs.n	800d17c <vTaskDelayUntil+0xb0>
 800d158:	69fa      	ldr	r2, [r7, #28]
 800d15a:	6a3b      	ldr	r3, [r7, #32]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d90d      	bls.n	800d17c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d160:	2301      	movs	r3, #1
 800d162:	627b      	str	r3, [r7, #36]	; 0x24
 800d164:	e00a      	b.n	800d17c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	69fa      	ldr	r2, [r7, #28]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d303      	bcc.n	800d178 <vTaskDelayUntil+0xac>
 800d170:	69fa      	ldr	r2, [r7, #28]
 800d172:	6a3b      	ldr	r3, [r7, #32]
 800d174:	429a      	cmp	r2, r3
 800d176:	d901      	bls.n	800d17c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d178:	2301      	movs	r3, #1
 800d17a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	69fa      	ldr	r2, [r7, #28]
 800d180:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	2b00      	cmp	r3, #0
 800d186:	d006      	beq.n	800d196 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d188:	69fa      	ldr	r2, [r7, #28]
 800d18a:	6a3b      	ldr	r3, [r7, #32]
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	2100      	movs	r1, #0
 800d190:	4618      	mov	r0, r3
 800d192:	f000 fe43 	bl	800de1c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d196:	f000 f8c9 	bl	800d32c <xTaskResumeAll>
 800d19a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d19c:	69bb      	ldr	r3, [r7, #24]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d107      	bne.n	800d1b2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800d1a2:	4b08      	ldr	r3, [pc, #32]	; (800d1c4 <vTaskDelayUntil+0xf8>)
 800d1a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a8:	601a      	str	r2, [r3, #0]
 800d1aa:	f3bf 8f4f 	dsb	sy
 800d1ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1b2:	bf00      	nop
 800d1b4:	3728      	adds	r7, #40	; 0x28
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	2000a08c 	.word	0x2000a08c
 800d1c0:	2000a068 	.word	0x2000a068
 800d1c4:	e000ed04 	.word	0xe000ed04

0800d1c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d017      	beq.n	800d20a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d1da:	4b13      	ldr	r3, [pc, #76]	; (800d228 <vTaskDelay+0x60>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00a      	beq.n	800d1f8 <vTaskDelay+0x30>
	__asm volatile
 800d1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e6:	f383 8811 	msr	BASEPRI, r3
 800d1ea:	f3bf 8f6f 	isb	sy
 800d1ee:	f3bf 8f4f 	dsb	sy
 800d1f2:	60bb      	str	r3, [r7, #8]
}
 800d1f4:	bf00      	nop
 800d1f6:	e7fe      	b.n	800d1f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d1f8:	f000 f88a 	bl	800d310 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 fe0c 	bl	800de1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d204:	f000 f892 	bl	800d32c <xTaskResumeAll>
 800d208:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d107      	bne.n	800d220 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d210:	4b06      	ldr	r3, [pc, #24]	; (800d22c <vTaskDelay+0x64>)
 800d212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d216:	601a      	str	r2, [r3, #0]
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d220:	bf00      	nop
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	2000a08c 	.word	0x2000a08c
 800d22c:	e000ed04 	.word	0xe000ed04

0800d230 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b08a      	sub	sp, #40	; 0x28
 800d234:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d236:	2300      	movs	r3, #0
 800d238:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d23a:	2300      	movs	r3, #0
 800d23c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d23e:	463a      	mov	r2, r7
 800d240:	1d39      	adds	r1, r7, #4
 800d242:	f107 0308 	add.w	r3, r7, #8
 800d246:	4618      	mov	r0, r3
 800d248:	f7fe fbdc 	bl	800ba04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d24c:	6839      	ldr	r1, [r7, #0]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	68ba      	ldr	r2, [r7, #8]
 800d252:	9202      	str	r2, [sp, #8]
 800d254:	9301      	str	r3, [sp, #4]
 800d256:	2300      	movs	r3, #0
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	2300      	movs	r3, #0
 800d25c:	460a      	mov	r2, r1
 800d25e:	4924      	ldr	r1, [pc, #144]	; (800d2f0 <vTaskStartScheduler+0xc0>)
 800d260:	4824      	ldr	r0, [pc, #144]	; (800d2f4 <vTaskStartScheduler+0xc4>)
 800d262:	f7ff fd7b 	bl	800cd5c <xTaskCreateStatic>
 800d266:	4603      	mov	r3, r0
 800d268:	4a23      	ldr	r2, [pc, #140]	; (800d2f8 <vTaskStartScheduler+0xc8>)
 800d26a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d26c:	4b22      	ldr	r3, [pc, #136]	; (800d2f8 <vTaskStartScheduler+0xc8>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d274:	2301      	movs	r3, #1
 800d276:	617b      	str	r3, [r7, #20]
 800d278:	e001      	b.n	800d27e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d27a:	2300      	movs	r3, #0
 800d27c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	2b01      	cmp	r3, #1
 800d282:	d102      	bne.n	800d28a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d284:	f000 fe1e 	bl	800dec4 <xTimerCreateTimerTask>
 800d288:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d11b      	bne.n	800d2c8 <vTaskStartScheduler+0x98>
	__asm volatile
 800d290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d294:	f383 8811 	msr	BASEPRI, r3
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	f3bf 8f4f 	dsb	sy
 800d2a0:	613b      	str	r3, [r7, #16]
}
 800d2a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2a4:	4b15      	ldr	r3, [pc, #84]	; (800d2fc <vTaskStartScheduler+0xcc>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	3354      	adds	r3, #84	; 0x54
 800d2aa:	4a15      	ldr	r2, [pc, #84]	; (800d300 <vTaskStartScheduler+0xd0>)
 800d2ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2ae:	4b15      	ldr	r3, [pc, #84]	; (800d304 <vTaskStartScheduler+0xd4>)
 800d2b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d2b6:	4b14      	ldr	r3, [pc, #80]	; (800d308 <vTaskStartScheduler+0xd8>)
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2bc:	4b13      	ldr	r3, [pc, #76]	; (800d30c <vTaskStartScheduler+0xdc>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d2c2:	f001 f9d5 	bl	800e670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d2c6:	e00e      	b.n	800d2e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2ce:	d10a      	bne.n	800d2e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800d2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	60fb      	str	r3, [r7, #12]
}
 800d2e2:	bf00      	nop
 800d2e4:	e7fe      	b.n	800d2e4 <vTaskStartScheduler+0xb4>
}
 800d2e6:	bf00      	nop
 800d2e8:	3718      	adds	r7, #24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	08010cfc 	.word	0x08010cfc
 800d2f4:	0800d935 	.word	0x0800d935
 800d2f8:	2000a088 	.word	0x2000a088
 800d2fc:	20009b90 	.word	0x20009b90
 800d300:	2000008c 	.word	0x2000008c
 800d304:	2000a084 	.word	0x2000a084
 800d308:	2000a070 	.word	0x2000a070
 800d30c:	2000a068 	.word	0x2000a068

0800d310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d310:	b480      	push	{r7}
 800d312:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d314:	4b04      	ldr	r3, [pc, #16]	; (800d328 <vTaskSuspendAll+0x18>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3301      	adds	r3, #1
 800d31a:	4a03      	ldr	r2, [pc, #12]	; (800d328 <vTaskSuspendAll+0x18>)
 800d31c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d31e:	bf00      	nop
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr
 800d328:	2000a08c 	.word	0x2000a08c

0800d32c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d332:	2300      	movs	r3, #0
 800d334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d336:	2300      	movs	r3, #0
 800d338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d33a:	4b42      	ldr	r3, [pc, #264]	; (800d444 <xTaskResumeAll+0x118>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d10a      	bne.n	800d358 <xTaskResumeAll+0x2c>
	__asm volatile
 800d342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d346:	f383 8811 	msr	BASEPRI, r3
 800d34a:	f3bf 8f6f 	isb	sy
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	603b      	str	r3, [r7, #0]
}
 800d354:	bf00      	nop
 800d356:	e7fe      	b.n	800d356 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d358:	f001 fa2c 	bl	800e7b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d35c:	4b39      	ldr	r3, [pc, #228]	; (800d444 <xTaskResumeAll+0x118>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	3b01      	subs	r3, #1
 800d362:	4a38      	ldr	r2, [pc, #224]	; (800d444 <xTaskResumeAll+0x118>)
 800d364:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d366:	4b37      	ldr	r3, [pc, #220]	; (800d444 <xTaskResumeAll+0x118>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d162      	bne.n	800d434 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d36e:	4b36      	ldr	r3, [pc, #216]	; (800d448 <xTaskResumeAll+0x11c>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d05e      	beq.n	800d434 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d376:	e02f      	b.n	800d3d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d378:	4b34      	ldr	r3, [pc, #208]	; (800d44c <xTaskResumeAll+0x120>)
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	3318      	adds	r3, #24
 800d384:	4618      	mov	r0, r3
 800d386:	f7fe fbfb 	bl	800bb80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	3304      	adds	r3, #4
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fe fbf6 	bl	800bb80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d398:	4b2d      	ldr	r3, [pc, #180]	; (800d450 <xTaskResumeAll+0x124>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d903      	bls.n	800d3a8 <xTaskResumeAll+0x7c>
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a4:	4a2a      	ldr	r2, [pc, #168]	; (800d450 <xTaskResumeAll+0x124>)
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4413      	add	r3, r2
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	4a27      	ldr	r2, [pc, #156]	; (800d454 <xTaskResumeAll+0x128>)
 800d3b6:	441a      	add	r2, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	3304      	adds	r3, #4
 800d3bc:	4619      	mov	r1, r3
 800d3be:	4610      	mov	r0, r2
 800d3c0:	f7fe fb81 	bl	800bac6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c8:	4b23      	ldr	r3, [pc, #140]	; (800d458 <xTaskResumeAll+0x12c>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d302      	bcc.n	800d3d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d3d2:	4b22      	ldr	r3, [pc, #136]	; (800d45c <xTaskResumeAll+0x130>)
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3d8:	4b1c      	ldr	r3, [pc, #112]	; (800d44c <xTaskResumeAll+0x120>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1cb      	bne.n	800d378 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d001      	beq.n	800d3ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d3e6:	f000 fb5f 	bl	800daa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d3ea:	4b1d      	ldr	r3, [pc, #116]	; (800d460 <xTaskResumeAll+0x134>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d010      	beq.n	800d418 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d3f6:	f000 f847 	bl	800d488 <xTaskIncrementTick>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d002      	beq.n	800d406 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d400:	4b16      	ldr	r3, [pc, #88]	; (800d45c <xTaskResumeAll+0x130>)
 800d402:	2201      	movs	r2, #1
 800d404:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	3b01      	subs	r3, #1
 800d40a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d1f1      	bne.n	800d3f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d412:	4b13      	ldr	r3, [pc, #76]	; (800d460 <xTaskResumeAll+0x134>)
 800d414:	2200      	movs	r2, #0
 800d416:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d418:	4b10      	ldr	r3, [pc, #64]	; (800d45c <xTaskResumeAll+0x130>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d009      	beq.n	800d434 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d420:	2301      	movs	r3, #1
 800d422:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d424:	4b0f      	ldr	r3, [pc, #60]	; (800d464 <xTaskResumeAll+0x138>)
 800d426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d42a:	601a      	str	r2, [r3, #0]
 800d42c:	f3bf 8f4f 	dsb	sy
 800d430:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d434:	f001 f9ee 	bl	800e814 <vPortExitCritical>

	return xAlreadyYielded;
 800d438:	68bb      	ldr	r3, [r7, #8]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	2000a08c 	.word	0x2000a08c
 800d448:	2000a064 	.word	0x2000a064
 800d44c:	2000a024 	.word	0x2000a024
 800d450:	2000a06c 	.word	0x2000a06c
 800d454:	20009b94 	.word	0x20009b94
 800d458:	20009b90 	.word	0x20009b90
 800d45c:	2000a078 	.word	0x2000a078
 800d460:	2000a074 	.word	0x2000a074
 800d464:	e000ed04 	.word	0xe000ed04

0800d468 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d46e:	4b05      	ldr	r3, [pc, #20]	; (800d484 <xTaskGetTickCount+0x1c>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d474:	687b      	ldr	r3, [r7, #4]
}
 800d476:	4618      	mov	r0, r3
 800d478:	370c      	adds	r7, #12
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	2000a068 	.word	0x2000a068

0800d488 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d48e:	2300      	movs	r3, #0
 800d490:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d492:	4b4f      	ldr	r3, [pc, #316]	; (800d5d0 <xTaskIncrementTick+0x148>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	f040 808f 	bne.w	800d5ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d49c:	4b4d      	ldr	r3, [pc, #308]	; (800d5d4 <xTaskIncrementTick+0x14c>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4a4:	4a4b      	ldr	r2, [pc, #300]	; (800d5d4 <xTaskIncrementTick+0x14c>)
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d120      	bne.n	800d4f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4b0:	4b49      	ldr	r3, [pc, #292]	; (800d5d8 <xTaskIncrementTick+0x150>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	603b      	str	r3, [r7, #0]
}
 800d4cc:	bf00      	nop
 800d4ce:	e7fe      	b.n	800d4ce <xTaskIncrementTick+0x46>
 800d4d0:	4b41      	ldr	r3, [pc, #260]	; (800d5d8 <xTaskIncrementTick+0x150>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	60fb      	str	r3, [r7, #12]
 800d4d6:	4b41      	ldr	r3, [pc, #260]	; (800d5dc <xTaskIncrementTick+0x154>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a3f      	ldr	r2, [pc, #252]	; (800d5d8 <xTaskIncrementTick+0x150>)
 800d4dc:	6013      	str	r3, [r2, #0]
 800d4de:	4a3f      	ldr	r2, [pc, #252]	; (800d5dc <xTaskIncrementTick+0x154>)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6013      	str	r3, [r2, #0]
 800d4e4:	4b3e      	ldr	r3, [pc, #248]	; (800d5e0 <xTaskIncrementTick+0x158>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	4a3d      	ldr	r2, [pc, #244]	; (800d5e0 <xTaskIncrementTick+0x158>)
 800d4ec:	6013      	str	r3, [r2, #0]
 800d4ee:	f000 fadb 	bl	800daa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d4f2:	4b3c      	ldr	r3, [pc, #240]	; (800d5e4 <xTaskIncrementTick+0x15c>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	693a      	ldr	r2, [r7, #16]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d349      	bcc.n	800d590 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4fc:	4b36      	ldr	r3, [pc, #216]	; (800d5d8 <xTaskIncrementTick+0x150>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d104      	bne.n	800d510 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d506:	4b37      	ldr	r3, [pc, #220]	; (800d5e4 <xTaskIncrementTick+0x15c>)
 800d508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d50c:	601a      	str	r2, [r3, #0]
					break;
 800d50e:	e03f      	b.n	800d590 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d510:	4b31      	ldr	r3, [pc, #196]	; (800d5d8 <xTaskIncrementTick+0x150>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	68db      	ldr	r3, [r3, #12]
 800d518:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d520:	693a      	ldr	r2, [r7, #16]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	429a      	cmp	r2, r3
 800d526:	d203      	bcs.n	800d530 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d528:	4a2e      	ldr	r2, [pc, #184]	; (800d5e4 <xTaskIncrementTick+0x15c>)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d52e:	e02f      	b.n	800d590 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	3304      	adds	r3, #4
 800d534:	4618      	mov	r0, r3
 800d536:	f7fe fb23 	bl	800bb80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d004      	beq.n	800d54c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	3318      	adds	r3, #24
 800d546:	4618      	mov	r0, r3
 800d548:	f7fe fb1a 	bl	800bb80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d550:	4b25      	ldr	r3, [pc, #148]	; (800d5e8 <xTaskIncrementTick+0x160>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	429a      	cmp	r2, r3
 800d556:	d903      	bls.n	800d560 <xTaskIncrementTick+0xd8>
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d55c:	4a22      	ldr	r2, [pc, #136]	; (800d5e8 <xTaskIncrementTick+0x160>)
 800d55e:	6013      	str	r3, [r2, #0]
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d564:	4613      	mov	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4413      	add	r3, r2
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	4a1f      	ldr	r2, [pc, #124]	; (800d5ec <xTaskIncrementTick+0x164>)
 800d56e:	441a      	add	r2, r3
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	3304      	adds	r3, #4
 800d574:	4619      	mov	r1, r3
 800d576:	4610      	mov	r0, r2
 800d578:	f7fe faa5 	bl	800bac6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d580:	4b1b      	ldr	r3, [pc, #108]	; (800d5f0 <xTaskIncrementTick+0x168>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d586:	429a      	cmp	r2, r3
 800d588:	d3b8      	bcc.n	800d4fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d58a:	2301      	movs	r3, #1
 800d58c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d58e:	e7b5      	b.n	800d4fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d590:	4b17      	ldr	r3, [pc, #92]	; (800d5f0 <xTaskIncrementTick+0x168>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d596:	4915      	ldr	r1, [pc, #84]	; (800d5ec <xTaskIncrementTick+0x164>)
 800d598:	4613      	mov	r3, r2
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	4413      	add	r3, r2
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	440b      	add	r3, r1
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d901      	bls.n	800d5ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5ac:	4b11      	ldr	r3, [pc, #68]	; (800d5f4 <xTaskIncrementTick+0x16c>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d007      	beq.n	800d5c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	617b      	str	r3, [r7, #20]
 800d5b8:	e004      	b.n	800d5c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d5ba:	4b0f      	ldr	r3, [pc, #60]	; (800d5f8 <xTaskIncrementTick+0x170>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	4a0d      	ldr	r2, [pc, #52]	; (800d5f8 <xTaskIncrementTick+0x170>)
 800d5c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d5c4:	697b      	ldr	r3, [r7, #20]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3718      	adds	r7, #24
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	2000a08c 	.word	0x2000a08c
 800d5d4:	2000a068 	.word	0x2000a068
 800d5d8:	2000a01c 	.word	0x2000a01c
 800d5dc:	2000a020 	.word	0x2000a020
 800d5e0:	2000a07c 	.word	0x2000a07c
 800d5e4:	2000a084 	.word	0x2000a084
 800d5e8:	2000a06c 	.word	0x2000a06c
 800d5ec:	20009b94 	.word	0x20009b94
 800d5f0:	20009b90 	.word	0x20009b90
 800d5f4:	2000a078 	.word	0x2000a078
 800d5f8:	2000a074 	.word	0x2000a074

0800d5fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b085      	sub	sp, #20
 800d600:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d602:	4b2a      	ldr	r3, [pc, #168]	; (800d6ac <vTaskSwitchContext+0xb0>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d003      	beq.n	800d612 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d60a:	4b29      	ldr	r3, [pc, #164]	; (800d6b0 <vTaskSwitchContext+0xb4>)
 800d60c:	2201      	movs	r2, #1
 800d60e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d610:	e046      	b.n	800d6a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d612:	4b27      	ldr	r3, [pc, #156]	; (800d6b0 <vTaskSwitchContext+0xb4>)
 800d614:	2200      	movs	r2, #0
 800d616:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d618:	4b26      	ldr	r3, [pc, #152]	; (800d6b4 <vTaskSwitchContext+0xb8>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	60fb      	str	r3, [r7, #12]
 800d61e:	e010      	b.n	800d642 <vTaskSwitchContext+0x46>
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10a      	bne.n	800d63c <vTaskSwitchContext+0x40>
	__asm volatile
 800d626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62a:	f383 8811 	msr	BASEPRI, r3
 800d62e:	f3bf 8f6f 	isb	sy
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	607b      	str	r3, [r7, #4]
}
 800d638:	bf00      	nop
 800d63a:	e7fe      	b.n	800d63a <vTaskSwitchContext+0x3e>
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	3b01      	subs	r3, #1
 800d640:	60fb      	str	r3, [r7, #12]
 800d642:	491d      	ldr	r1, [pc, #116]	; (800d6b8 <vTaskSwitchContext+0xbc>)
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	4613      	mov	r3, r2
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	4413      	add	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	440b      	add	r3, r1
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d0e4      	beq.n	800d620 <vTaskSwitchContext+0x24>
 800d656:	68fa      	ldr	r2, [r7, #12]
 800d658:	4613      	mov	r3, r2
 800d65a:	009b      	lsls	r3, r3, #2
 800d65c:	4413      	add	r3, r2
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	4a15      	ldr	r2, [pc, #84]	; (800d6b8 <vTaskSwitchContext+0xbc>)
 800d662:	4413      	add	r3, r2
 800d664:	60bb      	str	r3, [r7, #8]
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	685a      	ldr	r2, [r3, #4]
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	605a      	str	r2, [r3, #4]
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	3308      	adds	r3, #8
 800d678:	429a      	cmp	r2, r3
 800d67a:	d104      	bne.n	800d686 <vTaskSwitchContext+0x8a>
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	685a      	ldr	r2, [r3, #4]
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	605a      	str	r2, [r3, #4]
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	68db      	ldr	r3, [r3, #12]
 800d68c:	4a0b      	ldr	r2, [pc, #44]	; (800d6bc <vTaskSwitchContext+0xc0>)
 800d68e:	6013      	str	r3, [r2, #0]
 800d690:	4a08      	ldr	r2, [pc, #32]	; (800d6b4 <vTaskSwitchContext+0xb8>)
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d696:	4b09      	ldr	r3, [pc, #36]	; (800d6bc <vTaskSwitchContext+0xc0>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	3354      	adds	r3, #84	; 0x54
 800d69c:	4a08      	ldr	r2, [pc, #32]	; (800d6c0 <vTaskSwitchContext+0xc4>)
 800d69e:	6013      	str	r3, [r2, #0]
}
 800d6a0:	bf00      	nop
 800d6a2:	3714      	adds	r7, #20
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr
 800d6ac:	2000a08c 	.word	0x2000a08c
 800d6b0:	2000a078 	.word	0x2000a078
 800d6b4:	2000a06c 	.word	0x2000a06c
 800d6b8:	20009b94 	.word	0x20009b94
 800d6bc:	20009b90 	.word	0x20009b90
 800d6c0:	2000008c 	.word	0x2000008c

0800d6c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10a      	bne.n	800d6ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	60fb      	str	r3, [r7, #12]
}
 800d6e6:	bf00      	nop
 800d6e8:	e7fe      	b.n	800d6e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6ea:	4b07      	ldr	r3, [pc, #28]	; (800d708 <vTaskPlaceOnEventList+0x44>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	3318      	adds	r3, #24
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7fe fa0b 	bl	800bb0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d6f8:	2101      	movs	r1, #1
 800d6fa:	6838      	ldr	r0, [r7, #0]
 800d6fc:	f000 fb8e 	bl	800de1c <prvAddCurrentTaskToDelayedList>
}
 800d700:	bf00      	nop
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	20009b90 	.word	0x20009b90

0800d70c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d10a      	bne.n	800d734 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	617b      	str	r3, [r7, #20]
}
 800d730:	bf00      	nop
 800d732:	e7fe      	b.n	800d732 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d734:	4b0a      	ldr	r3, [pc, #40]	; (800d760 <vTaskPlaceOnEventListRestricted+0x54>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	3318      	adds	r3, #24
 800d73a:	4619      	mov	r1, r3
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f7fe f9c2 	bl	800bac6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d002      	beq.n	800d74e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d74c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d74e:	6879      	ldr	r1, [r7, #4]
 800d750:	68b8      	ldr	r0, [r7, #8]
 800d752:	f000 fb63 	bl	800de1c <prvAddCurrentTaskToDelayedList>
	}
 800d756:	bf00      	nop
 800d758:	3718      	adds	r7, #24
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	20009b90 	.word	0x20009b90

0800d764 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b086      	sub	sp, #24
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d10a      	bne.n	800d790 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77e:	f383 8811 	msr	BASEPRI, r3
 800d782:	f3bf 8f6f 	isb	sy
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	60fb      	str	r3, [r7, #12]
}
 800d78c:	bf00      	nop
 800d78e:	e7fe      	b.n	800d78e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	3318      	adds	r3, #24
 800d794:	4618      	mov	r0, r3
 800d796:	f7fe f9f3 	bl	800bb80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d79a:	4b1e      	ldr	r3, [pc, #120]	; (800d814 <xTaskRemoveFromEventList+0xb0>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d11d      	bne.n	800d7de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	3304      	adds	r3, #4
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fe f9ea 	bl	800bb80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b0:	4b19      	ldr	r3, [pc, #100]	; (800d818 <xTaskRemoveFromEventList+0xb4>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d903      	bls.n	800d7c0 <xTaskRemoveFromEventList+0x5c>
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7bc:	4a16      	ldr	r2, [pc, #88]	; (800d818 <xTaskRemoveFromEventList+0xb4>)
 800d7be:	6013      	str	r3, [r2, #0]
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	4413      	add	r3, r2
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	4a13      	ldr	r2, [pc, #76]	; (800d81c <xTaskRemoveFromEventList+0xb8>)
 800d7ce:	441a      	add	r2, r3
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	3304      	adds	r3, #4
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	4610      	mov	r0, r2
 800d7d8:	f7fe f975 	bl	800bac6 <vListInsertEnd>
 800d7dc:	e005      	b.n	800d7ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	3318      	adds	r3, #24
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	480e      	ldr	r0, [pc, #56]	; (800d820 <xTaskRemoveFromEventList+0xbc>)
 800d7e6:	f7fe f96e 	bl	800bac6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ee:	4b0d      	ldr	r3, [pc, #52]	; (800d824 <xTaskRemoveFromEventList+0xc0>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d905      	bls.n	800d804 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d7fc:	4b0a      	ldr	r3, [pc, #40]	; (800d828 <xTaskRemoveFromEventList+0xc4>)
 800d7fe:	2201      	movs	r2, #1
 800d800:	601a      	str	r2, [r3, #0]
 800d802:	e001      	b.n	800d808 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d804:	2300      	movs	r3, #0
 800d806:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d808:	697b      	ldr	r3, [r7, #20]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3718      	adds	r7, #24
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	2000a08c 	.word	0x2000a08c
 800d818:	2000a06c 	.word	0x2000a06c
 800d81c:	20009b94 	.word	0x20009b94
 800d820:	2000a024 	.word	0x2000a024
 800d824:	20009b90 	.word	0x20009b90
 800d828:	2000a078 	.word	0x2000a078

0800d82c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d834:	4b06      	ldr	r3, [pc, #24]	; (800d850 <vTaskInternalSetTimeOutState+0x24>)
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d83c:	4b05      	ldr	r3, [pc, #20]	; (800d854 <vTaskInternalSetTimeOutState+0x28>)
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	605a      	str	r2, [r3, #4]
}
 800d844:	bf00      	nop
 800d846:	370c      	adds	r7, #12
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr
 800d850:	2000a07c 	.word	0x2000a07c
 800d854:	2000a068 	.word	0x2000a068

0800d858 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b088      	sub	sp, #32
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10a      	bne.n	800d87e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86c:	f383 8811 	msr	BASEPRI, r3
 800d870:	f3bf 8f6f 	isb	sy
 800d874:	f3bf 8f4f 	dsb	sy
 800d878:	613b      	str	r3, [r7, #16]
}
 800d87a:	bf00      	nop
 800d87c:	e7fe      	b.n	800d87c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d10a      	bne.n	800d89a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d888:	f383 8811 	msr	BASEPRI, r3
 800d88c:	f3bf 8f6f 	isb	sy
 800d890:	f3bf 8f4f 	dsb	sy
 800d894:	60fb      	str	r3, [r7, #12]
}
 800d896:	bf00      	nop
 800d898:	e7fe      	b.n	800d898 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d89a:	f000 ff8b 	bl	800e7b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d89e:	4b1d      	ldr	r3, [pc, #116]	; (800d914 <xTaskCheckForTimeOut+0xbc>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	69ba      	ldr	r2, [r7, #24]
 800d8aa:	1ad3      	subs	r3, r2, r3
 800d8ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8b6:	d102      	bne.n	800d8be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	61fb      	str	r3, [r7, #28]
 800d8bc:	e023      	b.n	800d906 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	4b15      	ldr	r3, [pc, #84]	; (800d918 <xTaskCheckForTimeOut+0xc0>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d007      	beq.n	800d8da <xTaskCheckForTimeOut+0x82>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	69ba      	ldr	r2, [r7, #24]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d302      	bcc.n	800d8da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	61fb      	str	r3, [r7, #28]
 800d8d8:	e015      	b.n	800d906 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	697a      	ldr	r2, [r7, #20]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d20b      	bcs.n	800d8fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	1ad2      	subs	r2, r2, r3
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f7ff ff9b 	bl	800d82c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	61fb      	str	r3, [r7, #28]
 800d8fa:	e004      	b.n	800d906 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	2200      	movs	r2, #0
 800d900:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d902:	2301      	movs	r3, #1
 800d904:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d906:	f000 ff85 	bl	800e814 <vPortExitCritical>

	return xReturn;
 800d90a:	69fb      	ldr	r3, [r7, #28]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3720      	adds	r7, #32
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	2000a068 	.word	0x2000a068
 800d918:	2000a07c 	.word	0x2000a07c

0800d91c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d91c:	b480      	push	{r7}
 800d91e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d920:	4b03      	ldr	r3, [pc, #12]	; (800d930 <vTaskMissedYield+0x14>)
 800d922:	2201      	movs	r2, #1
 800d924:	601a      	str	r2, [r3, #0]
}
 800d926:	bf00      	nop
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr
 800d930:	2000a078 	.word	0x2000a078

0800d934 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d93c:	f000 f852 	bl	800d9e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d940:	4b06      	ldr	r3, [pc, #24]	; (800d95c <prvIdleTask+0x28>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b01      	cmp	r3, #1
 800d946:	d9f9      	bls.n	800d93c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d948:	4b05      	ldr	r3, [pc, #20]	; (800d960 <prvIdleTask+0x2c>)
 800d94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d94e:	601a      	str	r2, [r3, #0]
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d958:	e7f0      	b.n	800d93c <prvIdleTask+0x8>
 800d95a:	bf00      	nop
 800d95c:	20009b94 	.word	0x20009b94
 800d960:	e000ed04 	.word	0xe000ed04

0800d964 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d96a:	2300      	movs	r3, #0
 800d96c:	607b      	str	r3, [r7, #4]
 800d96e:	e00c      	b.n	800d98a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	4613      	mov	r3, r2
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	4413      	add	r3, r2
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	4a12      	ldr	r2, [pc, #72]	; (800d9c4 <prvInitialiseTaskLists+0x60>)
 800d97c:	4413      	add	r3, r2
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fe f874 	bl	800ba6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	3301      	adds	r3, #1
 800d988:	607b      	str	r3, [r7, #4]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2b37      	cmp	r3, #55	; 0x37
 800d98e:	d9ef      	bls.n	800d970 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d990:	480d      	ldr	r0, [pc, #52]	; (800d9c8 <prvInitialiseTaskLists+0x64>)
 800d992:	f7fe f86b 	bl	800ba6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d996:	480d      	ldr	r0, [pc, #52]	; (800d9cc <prvInitialiseTaskLists+0x68>)
 800d998:	f7fe f868 	bl	800ba6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d99c:	480c      	ldr	r0, [pc, #48]	; (800d9d0 <prvInitialiseTaskLists+0x6c>)
 800d99e:	f7fe f865 	bl	800ba6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9a2:	480c      	ldr	r0, [pc, #48]	; (800d9d4 <prvInitialiseTaskLists+0x70>)
 800d9a4:	f7fe f862 	bl	800ba6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9a8:	480b      	ldr	r0, [pc, #44]	; (800d9d8 <prvInitialiseTaskLists+0x74>)
 800d9aa:	f7fe f85f 	bl	800ba6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9ae:	4b0b      	ldr	r3, [pc, #44]	; (800d9dc <prvInitialiseTaskLists+0x78>)
 800d9b0:	4a05      	ldr	r2, [pc, #20]	; (800d9c8 <prvInitialiseTaskLists+0x64>)
 800d9b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9b4:	4b0a      	ldr	r3, [pc, #40]	; (800d9e0 <prvInitialiseTaskLists+0x7c>)
 800d9b6:	4a05      	ldr	r2, [pc, #20]	; (800d9cc <prvInitialiseTaskLists+0x68>)
 800d9b8:	601a      	str	r2, [r3, #0]
}
 800d9ba:	bf00      	nop
 800d9bc:	3708      	adds	r7, #8
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	20009b94 	.word	0x20009b94
 800d9c8:	20009ff4 	.word	0x20009ff4
 800d9cc:	2000a008 	.word	0x2000a008
 800d9d0:	2000a024 	.word	0x2000a024
 800d9d4:	2000a038 	.word	0x2000a038
 800d9d8:	2000a050 	.word	0x2000a050
 800d9dc:	2000a01c 	.word	0x2000a01c
 800d9e0:	2000a020 	.word	0x2000a020

0800d9e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d9ea:	e019      	b.n	800da20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d9ec:	f000 fee2 	bl	800e7b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9f0:	4b10      	ldr	r3, [pc, #64]	; (800da34 <prvCheckTasksWaitingTermination+0x50>)
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	3304      	adds	r3, #4
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7fe f8bf 	bl	800bb80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da02:	4b0d      	ldr	r3, [pc, #52]	; (800da38 <prvCheckTasksWaitingTermination+0x54>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	3b01      	subs	r3, #1
 800da08:	4a0b      	ldr	r2, [pc, #44]	; (800da38 <prvCheckTasksWaitingTermination+0x54>)
 800da0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da0c:	4b0b      	ldr	r3, [pc, #44]	; (800da3c <prvCheckTasksWaitingTermination+0x58>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	3b01      	subs	r3, #1
 800da12:	4a0a      	ldr	r2, [pc, #40]	; (800da3c <prvCheckTasksWaitingTermination+0x58>)
 800da14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da16:	f000 fefd 	bl	800e814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f810 	bl	800da40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da20:	4b06      	ldr	r3, [pc, #24]	; (800da3c <prvCheckTasksWaitingTermination+0x58>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1e1      	bne.n	800d9ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da28:	bf00      	nop
 800da2a:	bf00      	nop
 800da2c:	3708      	adds	r7, #8
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	2000a038 	.word	0x2000a038
 800da38:	2000a064 	.word	0x2000a064
 800da3c:	2000a04c 	.word	0x2000a04c

0800da40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	3354      	adds	r3, #84	; 0x54
 800da4c:	4618      	mov	r0, r3
 800da4e:	f001 faa1 	bl	800ef94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d108      	bne.n	800da6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da60:	4618      	mov	r0, r3
 800da62:	f001 f895 	bl	800eb90 <vPortFree>
				vPortFree( pxTCB );
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f001 f892 	bl	800eb90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da6c:	e018      	b.n	800daa0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800da74:	2b01      	cmp	r3, #1
 800da76:	d103      	bne.n	800da80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f001 f889 	bl	800eb90 <vPortFree>
	}
 800da7e:	e00f      	b.n	800daa0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800da86:	2b02      	cmp	r3, #2
 800da88:	d00a      	beq.n	800daa0 <prvDeleteTCB+0x60>
	__asm volatile
 800da8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8e:	f383 8811 	msr	BASEPRI, r3
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	60fb      	str	r3, [r7, #12]
}
 800da9c:	bf00      	nop
 800da9e:	e7fe      	b.n	800da9e <prvDeleteTCB+0x5e>
	}
 800daa0:	bf00      	nop
 800daa2:	3710      	adds	r7, #16
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800daae:	4b0c      	ldr	r3, [pc, #48]	; (800dae0 <prvResetNextTaskUnblockTime+0x38>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d104      	bne.n	800dac2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dab8:	4b0a      	ldr	r3, [pc, #40]	; (800dae4 <prvResetNextTaskUnblockTime+0x3c>)
 800daba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dabe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dac0:	e008      	b.n	800dad4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dac2:	4b07      	ldr	r3, [pc, #28]	; (800dae0 <prvResetNextTaskUnblockTime+0x38>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	4a04      	ldr	r2, [pc, #16]	; (800dae4 <prvResetNextTaskUnblockTime+0x3c>)
 800dad2:	6013      	str	r3, [r2, #0]
}
 800dad4:	bf00      	nop
 800dad6:	370c      	adds	r7, #12
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr
 800dae0:	2000a01c 	.word	0x2000a01c
 800dae4:	2000a084 	.word	0x2000a084

0800dae8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800daee:	4b05      	ldr	r3, [pc, #20]	; (800db04 <xTaskGetCurrentTaskHandle+0x1c>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800daf4:	687b      	ldr	r3, [r7, #4]
	}
 800daf6:	4618      	mov	r0, r3
 800daf8:	370c      	adds	r7, #12
 800dafa:	46bd      	mov	sp, r7
 800dafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db00:	4770      	bx	lr
 800db02:	bf00      	nop
 800db04:	20009b90 	.word	0x20009b90

0800db08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db08:	b480      	push	{r7}
 800db0a:	b083      	sub	sp, #12
 800db0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db0e:	4b0b      	ldr	r3, [pc, #44]	; (800db3c <xTaskGetSchedulerState+0x34>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d102      	bne.n	800db1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db16:	2301      	movs	r3, #1
 800db18:	607b      	str	r3, [r7, #4]
 800db1a:	e008      	b.n	800db2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db1c:	4b08      	ldr	r3, [pc, #32]	; (800db40 <xTaskGetSchedulerState+0x38>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d102      	bne.n	800db2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db24:	2302      	movs	r3, #2
 800db26:	607b      	str	r3, [r7, #4]
 800db28:	e001      	b.n	800db2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db2a:	2300      	movs	r3, #0
 800db2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db2e:	687b      	ldr	r3, [r7, #4]
	}
 800db30:	4618      	mov	r0, r3
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	2000a070 	.word	0x2000a070
 800db40:	2000a08c 	.word	0x2000a08c

0800db44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800db50:	2300      	movs	r3, #0
 800db52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d051      	beq.n	800dbfe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db5e:	4b2a      	ldr	r3, [pc, #168]	; (800dc08 <xTaskPriorityInherit+0xc4>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db64:	429a      	cmp	r2, r3
 800db66:	d241      	bcs.n	800dbec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	699b      	ldr	r3, [r3, #24]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	db06      	blt.n	800db7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db70:	4b25      	ldr	r3, [pc, #148]	; (800dc08 <xTaskPriorityInherit+0xc4>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	6959      	ldr	r1, [r3, #20]
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db86:	4613      	mov	r3, r2
 800db88:	009b      	lsls	r3, r3, #2
 800db8a:	4413      	add	r3, r2
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	4a1f      	ldr	r2, [pc, #124]	; (800dc0c <xTaskPriorityInherit+0xc8>)
 800db90:	4413      	add	r3, r2
 800db92:	4299      	cmp	r1, r3
 800db94:	d122      	bne.n	800dbdc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	3304      	adds	r3, #4
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7fd fff0 	bl	800bb80 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dba0:	4b19      	ldr	r3, [pc, #100]	; (800dc08 <xTaskPriorityInherit+0xc4>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbae:	4b18      	ldr	r3, [pc, #96]	; (800dc10 <xTaskPriorityInherit+0xcc>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d903      	bls.n	800dbbe <xTaskPriorityInherit+0x7a>
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbba:	4a15      	ldr	r2, [pc, #84]	; (800dc10 <xTaskPriorityInherit+0xcc>)
 800dbbc:	6013      	str	r3, [r2, #0]
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	4a10      	ldr	r2, [pc, #64]	; (800dc0c <xTaskPriorityInherit+0xc8>)
 800dbcc:	441a      	add	r2, r3
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	f7fd ff76 	bl	800bac6 <vListInsertEnd>
 800dbda:	e004      	b.n	800dbe6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbdc:	4b0a      	ldr	r3, [pc, #40]	; (800dc08 <xTaskPriorityInherit+0xc4>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	60fb      	str	r3, [r7, #12]
 800dbea:	e008      	b.n	800dbfe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbf0:	4b05      	ldr	r3, [pc, #20]	; (800dc08 <xTaskPriorityInherit+0xc4>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d201      	bcs.n	800dbfe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
	}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	20009b90 	.word	0x20009b90
 800dc0c:	20009b94 	.word	0x20009b94
 800dc10:	2000a06c 	.word	0x2000a06c

0800dc14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b086      	sub	sp, #24
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dc20:	2300      	movs	r3, #0
 800dc22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d056      	beq.n	800dcd8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dc2a:	4b2e      	ldr	r3, [pc, #184]	; (800dce4 <xTaskPriorityDisinherit+0xd0>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	693a      	ldr	r2, [r7, #16]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d00a      	beq.n	800dc4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc38:	f383 8811 	msr	BASEPRI, r3
 800dc3c:	f3bf 8f6f 	isb	sy
 800dc40:	f3bf 8f4f 	dsb	sy
 800dc44:	60fb      	str	r3, [r7, #12]
}
 800dc46:	bf00      	nop
 800dc48:	e7fe      	b.n	800dc48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d10a      	bne.n	800dc68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc56:	f383 8811 	msr	BASEPRI, r3
 800dc5a:	f3bf 8f6f 	isb	sy
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	60bb      	str	r3, [r7, #8]
}
 800dc64:	bf00      	nop
 800dc66:	e7fe      	b.n	800dc66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc6c:	1e5a      	subs	r2, r3, #1
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d02c      	beq.n	800dcd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d128      	bne.n	800dcd8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	3304      	adds	r3, #4
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fd ff78 	bl	800bb80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca8:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <xTaskPriorityDisinherit+0xd4>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d903      	bls.n	800dcb8 <xTaskPriorityDisinherit+0xa4>
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb4:	4a0c      	ldr	r2, [pc, #48]	; (800dce8 <xTaskPriorityDisinherit+0xd4>)
 800dcb6:	6013      	str	r3, [r2, #0]
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	4413      	add	r3, r2
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	4a09      	ldr	r2, [pc, #36]	; (800dcec <xTaskPriorityDisinherit+0xd8>)
 800dcc6:	441a      	add	r2, r3
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	3304      	adds	r3, #4
 800dccc:	4619      	mov	r1, r3
 800dcce:	4610      	mov	r0, r2
 800dcd0:	f7fd fef9 	bl	800bac6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dcd8:	697b      	ldr	r3, [r7, #20]
	}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3718      	adds	r7, #24
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	20009b90 	.word	0x20009b90
 800dce8:	2000a06c 	.word	0x2000a06c
 800dcec:	20009b94 	.word	0x20009b94

0800dcf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b088      	sub	sp, #32
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d06a      	beq.n	800ddde <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dd08:	69bb      	ldr	r3, [r7, #24]
 800dd0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10a      	bne.n	800dd26 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd14:	f383 8811 	msr	BASEPRI, r3
 800dd18:	f3bf 8f6f 	isb	sy
 800dd1c:	f3bf 8f4f 	dsb	sy
 800dd20:	60fb      	str	r3, [r7, #12]
}
 800dd22:	bf00      	nop
 800dd24:	e7fe      	b.n	800dd24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd2a:	683a      	ldr	r2, [r7, #0]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d902      	bls.n	800dd36 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	61fb      	str	r3, [r7, #28]
 800dd34:	e002      	b.n	800dd3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd40:	69fa      	ldr	r2, [r7, #28]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d04b      	beq.n	800ddde <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd4a:	697a      	ldr	r2, [r7, #20]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d146      	bne.n	800ddde <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dd50:	4b25      	ldr	r3, [pc, #148]	; (800dde8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	69ba      	ldr	r2, [r7, #24]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d10a      	bne.n	800dd70 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5e:	f383 8811 	msr	BASEPRI, r3
 800dd62:	f3bf 8f6f 	isb	sy
 800dd66:	f3bf 8f4f 	dsb	sy
 800dd6a:	60bb      	str	r3, [r7, #8]
}
 800dd6c:	bf00      	nop
 800dd6e:	e7fe      	b.n	800dd6e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd74:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	69fa      	ldr	r2, [r7, #28]
 800dd7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	699b      	ldr	r3, [r3, #24]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	db04      	blt.n	800dd8e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	6959      	ldr	r1, [r3, #20]
 800dd92:	693a      	ldr	r2, [r7, #16]
 800dd94:	4613      	mov	r3, r2
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	4413      	add	r3, r2
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	4a13      	ldr	r2, [pc, #76]	; (800ddec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dd9e:	4413      	add	r3, r2
 800dda0:	4299      	cmp	r1, r3
 800dda2:	d11c      	bne.n	800ddde <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	3304      	adds	r3, #4
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7fd fee9 	bl	800bb80 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb2:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d903      	bls.n	800ddc2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddbe:	4a0c      	ldr	r2, [pc, #48]	; (800ddf0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ddc0:	6013      	str	r3, [r2, #0]
 800ddc2:	69bb      	ldr	r3, [r7, #24]
 800ddc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	009b      	lsls	r3, r3, #2
 800ddca:	4413      	add	r3, r2
 800ddcc:	009b      	lsls	r3, r3, #2
 800ddce:	4a07      	ldr	r2, [pc, #28]	; (800ddec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ddd0:	441a      	add	r2, r3
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	3304      	adds	r3, #4
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	4610      	mov	r0, r2
 800ddda:	f7fd fe74 	bl	800bac6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddde:	bf00      	nop
 800dde0:	3720      	adds	r7, #32
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	20009b90 	.word	0x20009b90
 800ddec:	20009b94 	.word	0x20009b94
 800ddf0:	2000a06c 	.word	0x2000a06c

0800ddf4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ddf4:	b480      	push	{r7}
 800ddf6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ddf8:	4b07      	ldr	r3, [pc, #28]	; (800de18 <pvTaskIncrementMutexHeldCount+0x24>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d004      	beq.n	800de0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800de00:	4b05      	ldr	r3, [pc, #20]	; (800de18 <pvTaskIncrementMutexHeldCount+0x24>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de06:	3201      	adds	r2, #1
 800de08:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800de0a:	4b03      	ldr	r3, [pc, #12]	; (800de18 <pvTaskIncrementMutexHeldCount+0x24>)
 800de0c:	681b      	ldr	r3, [r3, #0]
	}
 800de0e:	4618      	mov	r0, r3
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr
 800de18:	20009b90 	.word	0x20009b90

0800de1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800de26:	4b21      	ldr	r3, [pc, #132]	; (800deac <prvAddCurrentTaskToDelayedList+0x90>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de2c:	4b20      	ldr	r3, [pc, #128]	; (800deb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	3304      	adds	r3, #4
 800de32:	4618      	mov	r0, r3
 800de34:	f7fd fea4 	bl	800bb80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de3e:	d10a      	bne.n	800de56 <prvAddCurrentTaskToDelayedList+0x3a>
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d007      	beq.n	800de56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de46:	4b1a      	ldr	r3, [pc, #104]	; (800deb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	3304      	adds	r3, #4
 800de4c:	4619      	mov	r1, r3
 800de4e:	4819      	ldr	r0, [pc, #100]	; (800deb4 <prvAddCurrentTaskToDelayedList+0x98>)
 800de50:	f7fd fe39 	bl	800bac6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800de54:	e026      	b.n	800dea4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4413      	add	r3, r2
 800de5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800de5e:	4b14      	ldr	r3, [pc, #80]	; (800deb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800de66:	68ba      	ldr	r2, [r7, #8]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d209      	bcs.n	800de82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de6e:	4b12      	ldr	r3, [pc, #72]	; (800deb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	4b0f      	ldr	r3, [pc, #60]	; (800deb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	3304      	adds	r3, #4
 800de78:	4619      	mov	r1, r3
 800de7a:	4610      	mov	r0, r2
 800de7c:	f7fd fe47 	bl	800bb0e <vListInsert>
}
 800de80:	e010      	b.n	800dea4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de82:	4b0e      	ldr	r3, [pc, #56]	; (800debc <prvAddCurrentTaskToDelayedList+0xa0>)
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	4b0a      	ldr	r3, [pc, #40]	; (800deb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	3304      	adds	r3, #4
 800de8c:	4619      	mov	r1, r3
 800de8e:	4610      	mov	r0, r2
 800de90:	f7fd fe3d 	bl	800bb0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de94:	4b0a      	ldr	r3, [pc, #40]	; (800dec0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	68ba      	ldr	r2, [r7, #8]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d202      	bcs.n	800dea4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800de9e:	4a08      	ldr	r2, [pc, #32]	; (800dec0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	6013      	str	r3, [r2, #0]
}
 800dea4:	bf00      	nop
 800dea6:	3710      	adds	r7, #16
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	2000a068 	.word	0x2000a068
 800deb0:	20009b90 	.word	0x20009b90
 800deb4:	2000a050 	.word	0x2000a050
 800deb8:	2000a020 	.word	0x2000a020
 800debc:	2000a01c 	.word	0x2000a01c
 800dec0:	2000a084 	.word	0x2000a084

0800dec4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b08a      	sub	sp, #40	; 0x28
 800dec8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800deca:	2300      	movs	r3, #0
 800decc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dece:	f000 fb07 	bl	800e4e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ded2:	4b1c      	ldr	r3, [pc, #112]	; (800df44 <xTimerCreateTimerTask+0x80>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d021      	beq.n	800df1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800deda:	2300      	movs	r3, #0
 800dedc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dede:	2300      	movs	r3, #0
 800dee0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dee2:	1d3a      	adds	r2, r7, #4
 800dee4:	f107 0108 	add.w	r1, r7, #8
 800dee8:	f107 030c 	add.w	r3, r7, #12
 800deec:	4618      	mov	r0, r3
 800deee:	f7fd fda3 	bl	800ba38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800def2:	6879      	ldr	r1, [r7, #4]
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	68fa      	ldr	r2, [r7, #12]
 800def8:	9202      	str	r2, [sp, #8]
 800defa:	9301      	str	r3, [sp, #4]
 800defc:	2302      	movs	r3, #2
 800defe:	9300      	str	r3, [sp, #0]
 800df00:	2300      	movs	r3, #0
 800df02:	460a      	mov	r2, r1
 800df04:	4910      	ldr	r1, [pc, #64]	; (800df48 <xTimerCreateTimerTask+0x84>)
 800df06:	4811      	ldr	r0, [pc, #68]	; (800df4c <xTimerCreateTimerTask+0x88>)
 800df08:	f7fe ff28 	bl	800cd5c <xTaskCreateStatic>
 800df0c:	4603      	mov	r3, r0
 800df0e:	4a10      	ldr	r2, [pc, #64]	; (800df50 <xTimerCreateTimerTask+0x8c>)
 800df10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800df12:	4b0f      	ldr	r3, [pc, #60]	; (800df50 <xTimerCreateTimerTask+0x8c>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d001      	beq.n	800df1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800df1a:	2301      	movs	r3, #1
 800df1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d10a      	bne.n	800df3a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800df24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df28:	f383 8811 	msr	BASEPRI, r3
 800df2c:	f3bf 8f6f 	isb	sy
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	613b      	str	r3, [r7, #16]
}
 800df36:	bf00      	nop
 800df38:	e7fe      	b.n	800df38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800df3a:	697b      	ldr	r3, [r7, #20]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3718      	adds	r7, #24
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	2000a0c0 	.word	0x2000a0c0
 800df48:	08010d04 	.word	0x08010d04
 800df4c:	0800e089 	.word	0x0800e089
 800df50:	2000a0c4 	.word	0x2000a0c4

0800df54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b08a      	sub	sp, #40	; 0x28
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
 800df60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800df62:	2300      	movs	r3, #0
 800df64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d10a      	bne.n	800df82 <xTimerGenericCommand+0x2e>
	__asm volatile
 800df6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df70:	f383 8811 	msr	BASEPRI, r3
 800df74:	f3bf 8f6f 	isb	sy
 800df78:	f3bf 8f4f 	dsb	sy
 800df7c:	623b      	str	r3, [r7, #32]
}
 800df7e:	bf00      	nop
 800df80:	e7fe      	b.n	800df80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800df82:	4b1a      	ldr	r3, [pc, #104]	; (800dfec <xTimerGenericCommand+0x98>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d02a      	beq.n	800dfe0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	2b05      	cmp	r3, #5
 800df9a:	dc18      	bgt.n	800dfce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df9c:	f7ff fdb4 	bl	800db08 <xTaskGetSchedulerState>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b02      	cmp	r3, #2
 800dfa4:	d109      	bne.n	800dfba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dfa6:	4b11      	ldr	r3, [pc, #68]	; (800dfec <xTimerGenericCommand+0x98>)
 800dfa8:	6818      	ldr	r0, [r3, #0]
 800dfaa:	f107 0110 	add.w	r1, r7, #16
 800dfae:	2300      	movs	r3, #0
 800dfb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfb2:	f7fe f86d 	bl	800c090 <xQueueGenericSend>
 800dfb6:	6278      	str	r0, [r7, #36]	; 0x24
 800dfb8:	e012      	b.n	800dfe0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dfba:	4b0c      	ldr	r3, [pc, #48]	; (800dfec <xTimerGenericCommand+0x98>)
 800dfbc:	6818      	ldr	r0, [r3, #0]
 800dfbe:	f107 0110 	add.w	r1, r7, #16
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	f7fe f863 	bl	800c090 <xQueueGenericSend>
 800dfca:	6278      	str	r0, [r7, #36]	; 0x24
 800dfcc:	e008      	b.n	800dfe0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dfce:	4b07      	ldr	r3, [pc, #28]	; (800dfec <xTimerGenericCommand+0x98>)
 800dfd0:	6818      	ldr	r0, [r3, #0]
 800dfd2:	f107 0110 	add.w	r1, r7, #16
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	683a      	ldr	r2, [r7, #0]
 800dfda:	f7fe f957 	bl	800c28c <xQueueGenericSendFromISR>
 800dfde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3728      	adds	r7, #40	; 0x28
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	2000a0c0 	.word	0x2000a0c0

0800dff0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b088      	sub	sp, #32
 800dff4:	af02      	add	r7, sp, #8
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dffa:	4b22      	ldr	r3, [pc, #136]	; (800e084 <prvProcessExpiredTimer+0x94>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	3304      	adds	r3, #4
 800e008:	4618      	mov	r0, r3
 800e00a:	f7fd fdb9 	bl	800bb80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e014:	f003 0304 	and.w	r3, r3, #4
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d022      	beq.n	800e062 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	699a      	ldr	r2, [r3, #24]
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	18d1      	adds	r1, r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	683a      	ldr	r2, [r7, #0]
 800e028:	6978      	ldr	r0, [r7, #20]
 800e02a:	f000 f8d1 	bl	800e1d0 <prvInsertTimerInActiveList>
 800e02e:	4603      	mov	r3, r0
 800e030:	2b00      	cmp	r3, #0
 800e032:	d01f      	beq.n	800e074 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e034:	2300      	movs	r3, #0
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	2300      	movs	r3, #0
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	2100      	movs	r1, #0
 800e03e:	6978      	ldr	r0, [r7, #20]
 800e040:	f7ff ff88 	bl	800df54 <xTimerGenericCommand>
 800e044:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d113      	bne.n	800e074 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e050:	f383 8811 	msr	BASEPRI, r3
 800e054:	f3bf 8f6f 	isb	sy
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	60fb      	str	r3, [r7, #12]
}
 800e05e:	bf00      	nop
 800e060:	e7fe      	b.n	800e060 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e068:	f023 0301 	bic.w	r3, r3, #1
 800e06c:	b2da      	uxtb	r2, r3
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	6a1b      	ldr	r3, [r3, #32]
 800e078:	6978      	ldr	r0, [r7, #20]
 800e07a:	4798      	blx	r3
}
 800e07c:	bf00      	nop
 800e07e:	3718      	adds	r7, #24
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	2000a0b8 	.word	0x2000a0b8

0800e088 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e090:	f107 0308 	add.w	r3, r7, #8
 800e094:	4618      	mov	r0, r3
 800e096:	f000 f857 	bl	800e148 <prvGetNextExpireTime>
 800e09a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	4619      	mov	r1, r3
 800e0a0:	68f8      	ldr	r0, [r7, #12]
 800e0a2:	f000 f803 	bl	800e0ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e0a6:	f000 f8d5 	bl	800e254 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e0aa:	e7f1      	b.n	800e090 <prvTimerTask+0x8>

0800e0ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e0b6:	f7ff f92b 	bl	800d310 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0ba:	f107 0308 	add.w	r3, r7, #8
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f000 f866 	bl	800e190 <prvSampleTimeNow>
 800e0c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d130      	bne.n	800e12e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d10a      	bne.n	800e0e8 <prvProcessTimerOrBlockTask+0x3c>
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d806      	bhi.n	800e0e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e0da:	f7ff f927 	bl	800d32c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e0de:	68f9      	ldr	r1, [r7, #12]
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f7ff ff85 	bl	800dff0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e0e6:	e024      	b.n	800e132 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d008      	beq.n	800e100 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e0ee:	4b13      	ldr	r3, [pc, #76]	; (800e13c <prvProcessTimerOrBlockTask+0x90>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d101      	bne.n	800e0fc <prvProcessTimerOrBlockTask+0x50>
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	e000      	b.n	800e0fe <prvProcessTimerOrBlockTask+0x52>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e100:	4b0f      	ldr	r3, [pc, #60]	; (800e140 <prvProcessTimerOrBlockTask+0x94>)
 800e102:	6818      	ldr	r0, [r3, #0]
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	683a      	ldr	r2, [r7, #0]
 800e10c:	4619      	mov	r1, r3
 800e10e:	f7fe fdf1 	bl	800ccf4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e112:	f7ff f90b 	bl	800d32c <xTaskResumeAll>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d10a      	bne.n	800e132 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e11c:	4b09      	ldr	r3, [pc, #36]	; (800e144 <prvProcessTimerOrBlockTask+0x98>)
 800e11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e122:	601a      	str	r2, [r3, #0]
 800e124:	f3bf 8f4f 	dsb	sy
 800e128:	f3bf 8f6f 	isb	sy
}
 800e12c:	e001      	b.n	800e132 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e12e:	f7ff f8fd 	bl	800d32c <xTaskResumeAll>
}
 800e132:	bf00      	nop
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	2000a0bc 	.word	0x2000a0bc
 800e140:	2000a0c0 	.word	0x2000a0c0
 800e144:	e000ed04 	.word	0xe000ed04

0800e148 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e150:	4b0e      	ldr	r3, [pc, #56]	; (800e18c <prvGetNextExpireTime+0x44>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d101      	bne.n	800e15e <prvGetNextExpireTime+0x16>
 800e15a:	2201      	movs	r2, #1
 800e15c:	e000      	b.n	800e160 <prvGetNextExpireTime+0x18>
 800e15e:	2200      	movs	r2, #0
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d105      	bne.n	800e178 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e16c:	4b07      	ldr	r3, [pc, #28]	; (800e18c <prvGetNextExpireTime+0x44>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	60fb      	str	r3, [r7, #12]
 800e176:	e001      	b.n	800e17c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e178:	2300      	movs	r3, #0
 800e17a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e17c:	68fb      	ldr	r3, [r7, #12]
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3714      	adds	r7, #20
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr
 800e18a:	bf00      	nop
 800e18c:	2000a0b8 	.word	0x2000a0b8

0800e190 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e198:	f7ff f966 	bl	800d468 <xTaskGetTickCount>
 800e19c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e19e:	4b0b      	ldr	r3, [pc, #44]	; (800e1cc <prvSampleTimeNow+0x3c>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d205      	bcs.n	800e1b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e1a8:	f000 f936 	bl	800e418 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	601a      	str	r2, [r3, #0]
 800e1b2:	e002      	b.n	800e1ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e1ba:	4a04      	ldr	r2, [pc, #16]	; (800e1cc <prvSampleTimeNow+0x3c>)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3710      	adds	r7, #16
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	2000a0c8 	.word	0x2000a0c8

0800e1d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b086      	sub	sp, #24
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
 800e1dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	68ba      	ldr	r2, [r7, #8]
 800e1e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	68fa      	ldr	r2, [r7, #12]
 800e1ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d812      	bhi.n	800e21c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	1ad2      	subs	r2, r2, r3
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	699b      	ldr	r3, [r3, #24]
 800e200:	429a      	cmp	r2, r3
 800e202:	d302      	bcc.n	800e20a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e204:	2301      	movs	r3, #1
 800e206:	617b      	str	r3, [r7, #20]
 800e208:	e01b      	b.n	800e242 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e20a:	4b10      	ldr	r3, [pc, #64]	; (800e24c <prvInsertTimerInActiveList+0x7c>)
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	3304      	adds	r3, #4
 800e212:	4619      	mov	r1, r3
 800e214:	4610      	mov	r0, r2
 800e216:	f7fd fc7a 	bl	800bb0e <vListInsert>
 800e21a:	e012      	b.n	800e242 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	429a      	cmp	r2, r3
 800e222:	d206      	bcs.n	800e232 <prvInsertTimerInActiveList+0x62>
 800e224:	68ba      	ldr	r2, [r7, #8]
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d302      	bcc.n	800e232 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e22c:	2301      	movs	r3, #1
 800e22e:	617b      	str	r3, [r7, #20]
 800e230:	e007      	b.n	800e242 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e232:	4b07      	ldr	r3, [pc, #28]	; (800e250 <prvInsertTimerInActiveList+0x80>)
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	3304      	adds	r3, #4
 800e23a:	4619      	mov	r1, r3
 800e23c:	4610      	mov	r0, r2
 800e23e:	f7fd fc66 	bl	800bb0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e242:	697b      	ldr	r3, [r7, #20]
}
 800e244:	4618      	mov	r0, r3
 800e246:	3718      	adds	r7, #24
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	2000a0bc 	.word	0x2000a0bc
 800e250:	2000a0b8 	.word	0x2000a0b8

0800e254 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b08e      	sub	sp, #56	; 0x38
 800e258:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e25a:	e0ca      	b.n	800e3f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	da18      	bge.n	800e294 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e262:	1d3b      	adds	r3, r7, #4
 800e264:	3304      	adds	r3, #4
 800e266:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10a      	bne.n	800e284 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e272:	f383 8811 	msr	BASEPRI, r3
 800e276:	f3bf 8f6f 	isb	sy
 800e27a:	f3bf 8f4f 	dsb	sy
 800e27e:	61fb      	str	r3, [r7, #28]
}
 800e280:	bf00      	nop
 800e282:	e7fe      	b.n	800e282 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e28a:	6850      	ldr	r0, [r2, #4]
 800e28c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e28e:	6892      	ldr	r2, [r2, #8]
 800e290:	4611      	mov	r1, r2
 800e292:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	f2c0 80aa 	blt.w	800e3f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	695b      	ldr	r3, [r3, #20]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d004      	beq.n	800e2b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2aa:	3304      	adds	r3, #4
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7fd fc67 	bl	800bb80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e2b2:	463b      	mov	r3, r7
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7ff ff6b 	bl	800e190 <prvSampleTimeNow>
 800e2ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b09      	cmp	r3, #9
 800e2c0:	f200 8097 	bhi.w	800e3f2 <prvProcessReceivedCommands+0x19e>
 800e2c4:	a201      	add	r2, pc, #4	; (adr r2, 800e2cc <prvProcessReceivedCommands+0x78>)
 800e2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ca:	bf00      	nop
 800e2cc:	0800e2f5 	.word	0x0800e2f5
 800e2d0:	0800e2f5 	.word	0x0800e2f5
 800e2d4:	0800e2f5 	.word	0x0800e2f5
 800e2d8:	0800e369 	.word	0x0800e369
 800e2dc:	0800e37d 	.word	0x0800e37d
 800e2e0:	0800e3c7 	.word	0x0800e3c7
 800e2e4:	0800e2f5 	.word	0x0800e2f5
 800e2e8:	0800e2f5 	.word	0x0800e2f5
 800e2ec:	0800e369 	.word	0x0800e369
 800e2f0:	0800e37d 	.word	0x0800e37d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2fa:	f043 0301 	orr.w	r3, r3, #1
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30a:	699b      	ldr	r3, [r3, #24]
 800e30c:	18d1      	adds	r1, r2, r3
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e314:	f7ff ff5c 	bl	800e1d0 <prvInsertTimerInActiveList>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d069      	beq.n	800e3f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e320:	6a1b      	ldr	r3, [r3, #32]
 800e322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e324:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e32c:	f003 0304 	and.w	r3, r3, #4
 800e330:	2b00      	cmp	r3, #0
 800e332:	d05e      	beq.n	800e3f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e334:	68ba      	ldr	r2, [r7, #8]
 800e336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e338:	699b      	ldr	r3, [r3, #24]
 800e33a:	441a      	add	r2, r3
 800e33c:	2300      	movs	r3, #0
 800e33e:	9300      	str	r3, [sp, #0]
 800e340:	2300      	movs	r3, #0
 800e342:	2100      	movs	r1, #0
 800e344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e346:	f7ff fe05 	bl	800df54 <xTimerGenericCommand>
 800e34a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e34c:	6a3b      	ldr	r3, [r7, #32]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d14f      	bne.n	800e3f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e356:	f383 8811 	msr	BASEPRI, r3
 800e35a:	f3bf 8f6f 	isb	sy
 800e35e:	f3bf 8f4f 	dsb	sy
 800e362:	61bb      	str	r3, [r7, #24]
}
 800e364:	bf00      	nop
 800e366:	e7fe      	b.n	800e366 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e36e:	f023 0301 	bic.w	r3, r3, #1
 800e372:	b2da      	uxtb	r2, r3
 800e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e37a:	e03a      	b.n	800e3f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e382:	f043 0301 	orr.w	r3, r3, #1
 800e386:	b2da      	uxtb	r2, r3
 800e388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e38e:	68ba      	ldr	r2, [r7, #8]
 800e390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e392:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e396:	699b      	ldr	r3, [r3, #24]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d10a      	bne.n	800e3b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a0:	f383 8811 	msr	BASEPRI, r3
 800e3a4:	f3bf 8f6f 	isb	sy
 800e3a8:	f3bf 8f4f 	dsb	sy
 800e3ac:	617b      	str	r3, [r7, #20]
}
 800e3ae:	bf00      	nop
 800e3b0:	e7fe      	b.n	800e3b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b4:	699a      	ldr	r2, [r3, #24]
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b8:	18d1      	adds	r1, r2, r3
 800e3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3c0:	f7ff ff06 	bl	800e1d0 <prvInsertTimerInActiveList>
					break;
 800e3c4:	e015      	b.n	800e3f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3cc:	f003 0302 	and.w	r3, r3, #2
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d103      	bne.n	800e3dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e3d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3d6:	f000 fbdb 	bl	800eb90 <vPortFree>
 800e3da:	e00a      	b.n	800e3f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3e2:	f023 0301 	bic.w	r3, r3, #1
 800e3e6:	b2da      	uxtb	r2, r3
 800e3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e3ee:	e000      	b.n	800e3f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e3f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3f2:	4b08      	ldr	r3, [pc, #32]	; (800e414 <prvProcessReceivedCommands+0x1c0>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	1d39      	adds	r1, r7, #4
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fe f86e 	bl	800c4dc <xQueueReceive>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	f47f af2a 	bne.w	800e25c <prvProcessReceivedCommands+0x8>
	}
}
 800e408:	bf00      	nop
 800e40a:	bf00      	nop
 800e40c:	3730      	adds	r7, #48	; 0x30
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	2000a0c0 	.word	0x2000a0c0

0800e418 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b088      	sub	sp, #32
 800e41c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e41e:	e048      	b.n	800e4b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e420:	4b2d      	ldr	r3, [pc, #180]	; (800e4d8 <prvSwitchTimerLists+0xc0>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e42a:	4b2b      	ldr	r3, [pc, #172]	; (800e4d8 <prvSwitchTimerLists+0xc0>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	68db      	ldr	r3, [r3, #12]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	3304      	adds	r3, #4
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fd fba1 	bl	800bb80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	6a1b      	ldr	r3, [r3, #32]
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e44c:	f003 0304 	and.w	r3, r3, #4
 800e450:	2b00      	cmp	r3, #0
 800e452:	d02e      	beq.n	800e4b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	699b      	ldr	r3, [r3, #24]
 800e458:	693a      	ldr	r2, [r7, #16]
 800e45a:	4413      	add	r3, r2
 800e45c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	429a      	cmp	r2, r3
 800e464:	d90e      	bls.n	800e484 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	68ba      	ldr	r2, [r7, #8]
 800e46a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	68fa      	ldr	r2, [r7, #12]
 800e470:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e472:	4b19      	ldr	r3, [pc, #100]	; (800e4d8 <prvSwitchTimerLists+0xc0>)
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	3304      	adds	r3, #4
 800e47a:	4619      	mov	r1, r3
 800e47c:	4610      	mov	r0, r2
 800e47e:	f7fd fb46 	bl	800bb0e <vListInsert>
 800e482:	e016      	b.n	800e4b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e484:	2300      	movs	r3, #0
 800e486:	9300      	str	r3, [sp, #0]
 800e488:	2300      	movs	r3, #0
 800e48a:	693a      	ldr	r2, [r7, #16]
 800e48c:	2100      	movs	r1, #0
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	f7ff fd60 	bl	800df54 <xTimerGenericCommand>
 800e494:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d10a      	bne.n	800e4b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a0:	f383 8811 	msr	BASEPRI, r3
 800e4a4:	f3bf 8f6f 	isb	sy
 800e4a8:	f3bf 8f4f 	dsb	sy
 800e4ac:	603b      	str	r3, [r7, #0]
}
 800e4ae:	bf00      	nop
 800e4b0:	e7fe      	b.n	800e4b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e4b2:	4b09      	ldr	r3, [pc, #36]	; (800e4d8 <prvSwitchTimerLists+0xc0>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1b1      	bne.n	800e420 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e4bc:	4b06      	ldr	r3, [pc, #24]	; (800e4d8 <prvSwitchTimerLists+0xc0>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e4c2:	4b06      	ldr	r3, [pc, #24]	; (800e4dc <prvSwitchTimerLists+0xc4>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	4a04      	ldr	r2, [pc, #16]	; (800e4d8 <prvSwitchTimerLists+0xc0>)
 800e4c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e4ca:	4a04      	ldr	r2, [pc, #16]	; (800e4dc <prvSwitchTimerLists+0xc4>)
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	6013      	str	r3, [r2, #0]
}
 800e4d0:	bf00      	nop
 800e4d2:	3718      	adds	r7, #24
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	2000a0b8 	.word	0x2000a0b8
 800e4dc:	2000a0bc 	.word	0x2000a0bc

0800e4e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e4e6:	f000 f965 	bl	800e7b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e4ea:	4b15      	ldr	r3, [pc, #84]	; (800e540 <prvCheckForValidListAndQueue+0x60>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d120      	bne.n	800e534 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e4f2:	4814      	ldr	r0, [pc, #80]	; (800e544 <prvCheckForValidListAndQueue+0x64>)
 800e4f4:	f7fd faba 	bl	800ba6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e4f8:	4813      	ldr	r0, [pc, #76]	; (800e548 <prvCheckForValidListAndQueue+0x68>)
 800e4fa:	f7fd fab7 	bl	800ba6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e4fe:	4b13      	ldr	r3, [pc, #76]	; (800e54c <prvCheckForValidListAndQueue+0x6c>)
 800e500:	4a10      	ldr	r2, [pc, #64]	; (800e544 <prvCheckForValidListAndQueue+0x64>)
 800e502:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e504:	4b12      	ldr	r3, [pc, #72]	; (800e550 <prvCheckForValidListAndQueue+0x70>)
 800e506:	4a10      	ldr	r2, [pc, #64]	; (800e548 <prvCheckForValidListAndQueue+0x68>)
 800e508:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e50a:	2300      	movs	r3, #0
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	4b11      	ldr	r3, [pc, #68]	; (800e554 <prvCheckForValidListAndQueue+0x74>)
 800e510:	4a11      	ldr	r2, [pc, #68]	; (800e558 <prvCheckForValidListAndQueue+0x78>)
 800e512:	2110      	movs	r1, #16
 800e514:	200a      	movs	r0, #10
 800e516:	f7fd fbc5 	bl	800bca4 <xQueueGenericCreateStatic>
 800e51a:	4603      	mov	r3, r0
 800e51c:	4a08      	ldr	r2, [pc, #32]	; (800e540 <prvCheckForValidListAndQueue+0x60>)
 800e51e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e520:	4b07      	ldr	r3, [pc, #28]	; (800e540 <prvCheckForValidListAndQueue+0x60>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d005      	beq.n	800e534 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e528:	4b05      	ldr	r3, [pc, #20]	; (800e540 <prvCheckForValidListAndQueue+0x60>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	490b      	ldr	r1, [pc, #44]	; (800e55c <prvCheckForValidListAndQueue+0x7c>)
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fe fb8c 	bl	800cc4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e534:	f000 f96e 	bl	800e814 <vPortExitCritical>
}
 800e538:	bf00      	nop
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
 800e53e:	bf00      	nop
 800e540:	2000a0c0 	.word	0x2000a0c0
 800e544:	2000a090 	.word	0x2000a090
 800e548:	2000a0a4 	.word	0x2000a0a4
 800e54c:	2000a0b8 	.word	0x2000a0b8
 800e550:	2000a0bc 	.word	0x2000a0bc
 800e554:	2000a16c 	.word	0x2000a16c
 800e558:	2000a0cc 	.word	0x2000a0cc
 800e55c:	08010d0c 	.word	0x08010d0c

0800e560 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e560:	b480      	push	{r7}
 800e562:	b085      	sub	sp, #20
 800e564:	af00      	add	r7, sp, #0
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	60b9      	str	r1, [r7, #8]
 800e56a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	3b04      	subs	r3, #4
 800e570:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	3b04      	subs	r3, #4
 800e57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	f023 0201 	bic.w	r2, r3, #1
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	3b04      	subs	r3, #4
 800e58e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e590:	4a0c      	ldr	r2, [pc, #48]	; (800e5c4 <pxPortInitialiseStack+0x64>)
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	3b14      	subs	r3, #20
 800e59a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	3b04      	subs	r3, #4
 800e5a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f06f 0202 	mvn.w	r2, #2
 800e5ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	3b20      	subs	r3, #32
 800e5b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3714      	adds	r7, #20
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr
 800e5c4:	0800e5c9 	.word	0x0800e5c9

0800e5c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b085      	sub	sp, #20
 800e5cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e5d2:	4b12      	ldr	r3, [pc, #72]	; (800e61c <prvTaskExitError+0x54>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5da:	d00a      	beq.n	800e5f2 <prvTaskExitError+0x2a>
	__asm volatile
 800e5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e0:	f383 8811 	msr	BASEPRI, r3
 800e5e4:	f3bf 8f6f 	isb	sy
 800e5e8:	f3bf 8f4f 	dsb	sy
 800e5ec:	60fb      	str	r3, [r7, #12]
}
 800e5ee:	bf00      	nop
 800e5f0:	e7fe      	b.n	800e5f0 <prvTaskExitError+0x28>
	__asm volatile
 800e5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f6:	f383 8811 	msr	BASEPRI, r3
 800e5fa:	f3bf 8f6f 	isb	sy
 800e5fe:	f3bf 8f4f 	dsb	sy
 800e602:	60bb      	str	r3, [r7, #8]
}
 800e604:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e606:	bf00      	nop
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d0fc      	beq.n	800e608 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e60e:	bf00      	nop
 800e610:	bf00      	nop
 800e612:	3714      	adds	r7, #20
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr
 800e61c:	20000088 	.word	0x20000088

0800e620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e620:	4b07      	ldr	r3, [pc, #28]	; (800e640 <pxCurrentTCBConst2>)
 800e622:	6819      	ldr	r1, [r3, #0]
 800e624:	6808      	ldr	r0, [r1, #0]
 800e626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e62a:	f380 8809 	msr	PSP, r0
 800e62e:	f3bf 8f6f 	isb	sy
 800e632:	f04f 0000 	mov.w	r0, #0
 800e636:	f380 8811 	msr	BASEPRI, r0
 800e63a:	4770      	bx	lr
 800e63c:	f3af 8000 	nop.w

0800e640 <pxCurrentTCBConst2>:
 800e640:	20009b90 	.word	0x20009b90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e644:	bf00      	nop
 800e646:	bf00      	nop

0800e648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e648:	4808      	ldr	r0, [pc, #32]	; (800e66c <prvPortStartFirstTask+0x24>)
 800e64a:	6800      	ldr	r0, [r0, #0]
 800e64c:	6800      	ldr	r0, [r0, #0]
 800e64e:	f380 8808 	msr	MSP, r0
 800e652:	f04f 0000 	mov.w	r0, #0
 800e656:	f380 8814 	msr	CONTROL, r0
 800e65a:	b662      	cpsie	i
 800e65c:	b661      	cpsie	f
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	f3bf 8f6f 	isb	sy
 800e666:	df00      	svc	0
 800e668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e66a:	bf00      	nop
 800e66c:	e000ed08 	.word	0xe000ed08

0800e670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b086      	sub	sp, #24
 800e674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e676:	4b46      	ldr	r3, [pc, #280]	; (800e790 <xPortStartScheduler+0x120>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4a46      	ldr	r2, [pc, #280]	; (800e794 <xPortStartScheduler+0x124>)
 800e67c:	4293      	cmp	r3, r2
 800e67e:	d10a      	bne.n	800e696 <xPortStartScheduler+0x26>
	__asm volatile
 800e680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e684:	f383 8811 	msr	BASEPRI, r3
 800e688:	f3bf 8f6f 	isb	sy
 800e68c:	f3bf 8f4f 	dsb	sy
 800e690:	613b      	str	r3, [r7, #16]
}
 800e692:	bf00      	nop
 800e694:	e7fe      	b.n	800e694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e696:	4b3e      	ldr	r3, [pc, #248]	; (800e790 <xPortStartScheduler+0x120>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4a3f      	ldr	r2, [pc, #252]	; (800e798 <xPortStartScheduler+0x128>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d10a      	bne.n	800e6b6 <xPortStartScheduler+0x46>
	__asm volatile
 800e6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a4:	f383 8811 	msr	BASEPRI, r3
 800e6a8:	f3bf 8f6f 	isb	sy
 800e6ac:	f3bf 8f4f 	dsb	sy
 800e6b0:	60fb      	str	r3, [r7, #12]
}
 800e6b2:	bf00      	nop
 800e6b4:	e7fe      	b.n	800e6b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e6b6:	4b39      	ldr	r3, [pc, #228]	; (800e79c <xPortStartScheduler+0x12c>)
 800e6b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	22ff      	movs	r2, #255	; 0xff
 800e6c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e6d0:	78fb      	ldrb	r3, [r7, #3]
 800e6d2:	b2db      	uxtb	r3, r3
 800e6d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e6d8:	b2da      	uxtb	r2, r3
 800e6da:	4b31      	ldr	r3, [pc, #196]	; (800e7a0 <xPortStartScheduler+0x130>)
 800e6dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e6de:	4b31      	ldr	r3, [pc, #196]	; (800e7a4 <xPortStartScheduler+0x134>)
 800e6e0:	2207      	movs	r2, #7
 800e6e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6e4:	e009      	b.n	800e6fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e6e6:	4b2f      	ldr	r3, [pc, #188]	; (800e7a4 <xPortStartScheduler+0x134>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	3b01      	subs	r3, #1
 800e6ec:	4a2d      	ldr	r2, [pc, #180]	; (800e7a4 <xPortStartScheduler+0x134>)
 800e6ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e6f0:	78fb      	ldrb	r3, [r7, #3]
 800e6f2:	b2db      	uxtb	r3, r3
 800e6f4:	005b      	lsls	r3, r3, #1
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6fa:	78fb      	ldrb	r3, [r7, #3]
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e702:	2b80      	cmp	r3, #128	; 0x80
 800e704:	d0ef      	beq.n	800e6e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e706:	4b27      	ldr	r3, [pc, #156]	; (800e7a4 <xPortStartScheduler+0x134>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f1c3 0307 	rsb	r3, r3, #7
 800e70e:	2b04      	cmp	r3, #4
 800e710:	d00a      	beq.n	800e728 <xPortStartScheduler+0xb8>
	__asm volatile
 800e712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	60bb      	str	r3, [r7, #8]
}
 800e724:	bf00      	nop
 800e726:	e7fe      	b.n	800e726 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e728:	4b1e      	ldr	r3, [pc, #120]	; (800e7a4 <xPortStartScheduler+0x134>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	021b      	lsls	r3, r3, #8
 800e72e:	4a1d      	ldr	r2, [pc, #116]	; (800e7a4 <xPortStartScheduler+0x134>)
 800e730:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e732:	4b1c      	ldr	r3, [pc, #112]	; (800e7a4 <xPortStartScheduler+0x134>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e73a:	4a1a      	ldr	r2, [pc, #104]	; (800e7a4 <xPortStartScheduler+0x134>)
 800e73c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	b2da      	uxtb	r2, r3
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e746:	4b18      	ldr	r3, [pc, #96]	; (800e7a8 <xPortStartScheduler+0x138>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4a17      	ldr	r2, [pc, #92]	; (800e7a8 <xPortStartScheduler+0x138>)
 800e74c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e752:	4b15      	ldr	r3, [pc, #84]	; (800e7a8 <xPortStartScheduler+0x138>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4a14      	ldr	r2, [pc, #80]	; (800e7a8 <xPortStartScheduler+0x138>)
 800e758:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e75c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e75e:	f000 f8dd 	bl	800e91c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e762:	4b12      	ldr	r3, [pc, #72]	; (800e7ac <xPortStartScheduler+0x13c>)
 800e764:	2200      	movs	r2, #0
 800e766:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e768:	f000 f8fc 	bl	800e964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e76c:	4b10      	ldr	r3, [pc, #64]	; (800e7b0 <xPortStartScheduler+0x140>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a0f      	ldr	r2, [pc, #60]	; (800e7b0 <xPortStartScheduler+0x140>)
 800e772:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e776:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e778:	f7ff ff66 	bl	800e648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e77c:	f7fe ff3e 	bl	800d5fc <vTaskSwitchContext>
	prvTaskExitError();
 800e780:	f7ff ff22 	bl	800e5c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e784:	2300      	movs	r3, #0
}
 800e786:	4618      	mov	r0, r3
 800e788:	3718      	adds	r7, #24
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	e000ed00 	.word	0xe000ed00
 800e794:	410fc271 	.word	0x410fc271
 800e798:	410fc270 	.word	0x410fc270
 800e79c:	e000e400 	.word	0xe000e400
 800e7a0:	2000a1bc 	.word	0x2000a1bc
 800e7a4:	2000a1c0 	.word	0x2000a1c0
 800e7a8:	e000ed20 	.word	0xe000ed20
 800e7ac:	20000088 	.word	0x20000088
 800e7b0:	e000ef34 	.word	0xe000ef34

0800e7b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
	__asm volatile
 800e7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7be:	f383 8811 	msr	BASEPRI, r3
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	607b      	str	r3, [r7, #4]
}
 800e7cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e7ce:	4b0f      	ldr	r3, [pc, #60]	; (800e80c <vPortEnterCritical+0x58>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	4a0d      	ldr	r2, [pc, #52]	; (800e80c <vPortEnterCritical+0x58>)
 800e7d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e7d8:	4b0c      	ldr	r3, [pc, #48]	; (800e80c <vPortEnterCritical+0x58>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d10f      	bne.n	800e800 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e7e0:	4b0b      	ldr	r3, [pc, #44]	; (800e810 <vPortEnterCritical+0x5c>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00a      	beq.n	800e800 <vPortEnterCritical+0x4c>
	__asm volatile
 800e7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ee:	f383 8811 	msr	BASEPRI, r3
 800e7f2:	f3bf 8f6f 	isb	sy
 800e7f6:	f3bf 8f4f 	dsb	sy
 800e7fa:	603b      	str	r3, [r7, #0]
}
 800e7fc:	bf00      	nop
 800e7fe:	e7fe      	b.n	800e7fe <vPortEnterCritical+0x4a>
	}
}
 800e800:	bf00      	nop
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr
 800e80c:	20000088 	.word	0x20000088
 800e810:	e000ed04 	.word	0xe000ed04

0800e814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e81a:	4b12      	ldr	r3, [pc, #72]	; (800e864 <vPortExitCritical+0x50>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d10a      	bne.n	800e838 <vPortExitCritical+0x24>
	__asm volatile
 800e822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e826:	f383 8811 	msr	BASEPRI, r3
 800e82a:	f3bf 8f6f 	isb	sy
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	607b      	str	r3, [r7, #4]
}
 800e834:	bf00      	nop
 800e836:	e7fe      	b.n	800e836 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e838:	4b0a      	ldr	r3, [pc, #40]	; (800e864 <vPortExitCritical+0x50>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	3b01      	subs	r3, #1
 800e83e:	4a09      	ldr	r2, [pc, #36]	; (800e864 <vPortExitCritical+0x50>)
 800e840:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e842:	4b08      	ldr	r3, [pc, #32]	; (800e864 <vPortExitCritical+0x50>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d105      	bne.n	800e856 <vPortExitCritical+0x42>
 800e84a:	2300      	movs	r3, #0
 800e84c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	f383 8811 	msr	BASEPRI, r3
}
 800e854:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e856:	bf00      	nop
 800e858:	370c      	adds	r7, #12
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr
 800e862:	bf00      	nop
 800e864:	20000088 	.word	0x20000088
	...

0800e870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e870:	f3ef 8009 	mrs	r0, PSP
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	4b15      	ldr	r3, [pc, #84]	; (800e8d0 <pxCurrentTCBConst>)
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	f01e 0f10 	tst.w	lr, #16
 800e880:	bf08      	it	eq
 800e882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e88a:	6010      	str	r0, [r2, #0]
 800e88c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e890:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e894:	f380 8811 	msr	BASEPRI, r0
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	f3bf 8f6f 	isb	sy
 800e8a0:	f7fe feac 	bl	800d5fc <vTaskSwitchContext>
 800e8a4:	f04f 0000 	mov.w	r0, #0
 800e8a8:	f380 8811 	msr	BASEPRI, r0
 800e8ac:	bc09      	pop	{r0, r3}
 800e8ae:	6819      	ldr	r1, [r3, #0]
 800e8b0:	6808      	ldr	r0, [r1, #0]
 800e8b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b6:	f01e 0f10 	tst.w	lr, #16
 800e8ba:	bf08      	it	eq
 800e8bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e8c0:	f380 8809 	msr	PSP, r0
 800e8c4:	f3bf 8f6f 	isb	sy
 800e8c8:	4770      	bx	lr
 800e8ca:	bf00      	nop
 800e8cc:	f3af 8000 	nop.w

0800e8d0 <pxCurrentTCBConst>:
 800e8d0:	20009b90 	.word	0x20009b90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e8d4:	bf00      	nop
 800e8d6:	bf00      	nop

0800e8d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e2:	f383 8811 	msr	BASEPRI, r3
 800e8e6:	f3bf 8f6f 	isb	sy
 800e8ea:	f3bf 8f4f 	dsb	sy
 800e8ee:	607b      	str	r3, [r7, #4]
}
 800e8f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e8f2:	f7fe fdc9 	bl	800d488 <xTaskIncrementTick>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d003      	beq.n	800e904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e8fc:	4b06      	ldr	r3, [pc, #24]	; (800e918 <xPortSysTickHandler+0x40>)
 800e8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e902:	601a      	str	r2, [r3, #0]
 800e904:	2300      	movs	r3, #0
 800e906:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	f383 8811 	msr	BASEPRI, r3
}
 800e90e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e910:	bf00      	nop
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	e000ed04 	.word	0xe000ed04

0800e91c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e91c:	b480      	push	{r7}
 800e91e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e920:	4b0b      	ldr	r3, [pc, #44]	; (800e950 <vPortSetupTimerInterrupt+0x34>)
 800e922:	2200      	movs	r2, #0
 800e924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e926:	4b0b      	ldr	r3, [pc, #44]	; (800e954 <vPortSetupTimerInterrupt+0x38>)
 800e928:	2200      	movs	r2, #0
 800e92a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e92c:	4b0a      	ldr	r3, [pc, #40]	; (800e958 <vPortSetupTimerInterrupt+0x3c>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a0a      	ldr	r2, [pc, #40]	; (800e95c <vPortSetupTimerInterrupt+0x40>)
 800e932:	fba2 2303 	umull	r2, r3, r2, r3
 800e936:	099b      	lsrs	r3, r3, #6
 800e938:	4a09      	ldr	r2, [pc, #36]	; (800e960 <vPortSetupTimerInterrupt+0x44>)
 800e93a:	3b01      	subs	r3, #1
 800e93c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e93e:	4b04      	ldr	r3, [pc, #16]	; (800e950 <vPortSetupTimerInterrupt+0x34>)
 800e940:	2207      	movs	r2, #7
 800e942:	601a      	str	r2, [r3, #0]
}
 800e944:	bf00      	nop
 800e946:	46bd      	mov	sp, r7
 800e948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94c:	4770      	bx	lr
 800e94e:	bf00      	nop
 800e950:	e000e010 	.word	0xe000e010
 800e954:	e000e018 	.word	0xe000e018
 800e958:	20000078 	.word	0x20000078
 800e95c:	10624dd3 	.word	0x10624dd3
 800e960:	e000e014 	.word	0xe000e014

0800e964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e974 <vPortEnableVFP+0x10>
 800e968:	6801      	ldr	r1, [r0, #0]
 800e96a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e96e:	6001      	str	r1, [r0, #0]
 800e970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e972:	bf00      	nop
 800e974:	e000ed88 	.word	0xe000ed88

0800e978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e978:	b480      	push	{r7}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e97e:	f3ef 8305 	mrs	r3, IPSR
 800e982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2b0f      	cmp	r3, #15
 800e988:	d914      	bls.n	800e9b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e98a:	4a17      	ldr	r2, [pc, #92]	; (800e9e8 <vPortValidateInterruptPriority+0x70>)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	4413      	add	r3, r2
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e994:	4b15      	ldr	r3, [pc, #84]	; (800e9ec <vPortValidateInterruptPriority+0x74>)
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	7afa      	ldrb	r2, [r7, #11]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d20a      	bcs.n	800e9b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	607b      	str	r3, [r7, #4]
}
 800e9b0:	bf00      	nop
 800e9b2:	e7fe      	b.n	800e9b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e9b4:	4b0e      	ldr	r3, [pc, #56]	; (800e9f0 <vPortValidateInterruptPriority+0x78>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e9bc:	4b0d      	ldr	r3, [pc, #52]	; (800e9f4 <vPortValidateInterruptPriority+0x7c>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d90a      	bls.n	800e9da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c8:	f383 8811 	msr	BASEPRI, r3
 800e9cc:	f3bf 8f6f 	isb	sy
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	603b      	str	r3, [r7, #0]
}
 800e9d6:	bf00      	nop
 800e9d8:	e7fe      	b.n	800e9d8 <vPortValidateInterruptPriority+0x60>
	}
 800e9da:	bf00      	nop
 800e9dc:	3714      	adds	r7, #20
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	e000e3f0 	.word	0xe000e3f0
 800e9ec:	2000a1bc 	.word	0x2000a1bc
 800e9f0:	e000ed0c 	.word	0xe000ed0c
 800e9f4:	2000a1c0 	.word	0x2000a1c0

0800e9f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b08a      	sub	sp, #40	; 0x28
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ea00:	2300      	movs	r3, #0
 800ea02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ea04:	f7fe fc84 	bl	800d310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ea08:	4b5b      	ldr	r3, [pc, #364]	; (800eb78 <pvPortMalloc+0x180>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d101      	bne.n	800ea14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ea10:	f000 f920 	bl	800ec54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ea14:	4b59      	ldr	r3, [pc, #356]	; (800eb7c <pvPortMalloc+0x184>)
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	4013      	ands	r3, r2
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	f040 8093 	bne.w	800eb48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d01d      	beq.n	800ea64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ea28:	2208      	movs	r2, #8
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f003 0307 	and.w	r3, r3, #7
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d014      	beq.n	800ea64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f023 0307 	bic.w	r3, r3, #7
 800ea40:	3308      	adds	r3, #8
 800ea42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f003 0307 	and.w	r3, r3, #7
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d00a      	beq.n	800ea64 <pvPortMalloc+0x6c>
	__asm volatile
 800ea4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea52:	f383 8811 	msr	BASEPRI, r3
 800ea56:	f3bf 8f6f 	isb	sy
 800ea5a:	f3bf 8f4f 	dsb	sy
 800ea5e:	617b      	str	r3, [r7, #20]
}
 800ea60:	bf00      	nop
 800ea62:	e7fe      	b.n	800ea62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d06e      	beq.n	800eb48 <pvPortMalloc+0x150>
 800ea6a:	4b45      	ldr	r3, [pc, #276]	; (800eb80 <pvPortMalloc+0x188>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d869      	bhi.n	800eb48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea74:	4b43      	ldr	r3, [pc, #268]	; (800eb84 <pvPortMalloc+0x18c>)
 800ea76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea78:	4b42      	ldr	r3, [pc, #264]	; (800eb84 <pvPortMalloc+0x18c>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea7e:	e004      	b.n	800ea8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ea80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d903      	bls.n	800ea9c <pvPortMalloc+0xa4>
 800ea94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d1f1      	bne.n	800ea80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea9c:	4b36      	ldr	r3, [pc, #216]	; (800eb78 <pvPortMalloc+0x180>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d050      	beq.n	800eb48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eaa6:	6a3b      	ldr	r3, [r7, #32]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2208      	movs	r2, #8
 800eaac:	4413      	add	r3, r2
 800eaae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	6a3b      	ldr	r3, [r7, #32]
 800eab6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaba:	685a      	ldr	r2, [r3, #4]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	1ad2      	subs	r2, r2, r3
 800eac0:	2308      	movs	r3, #8
 800eac2:	005b      	lsls	r3, r3, #1
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d91f      	bls.n	800eb08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4413      	add	r3, r2
 800eace:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	f003 0307 	and.w	r3, r3, #7
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d00a      	beq.n	800eaf0 <pvPortMalloc+0xf8>
	__asm volatile
 800eada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eade:	f383 8811 	msr	BASEPRI, r3
 800eae2:	f3bf 8f6f 	isb	sy
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	613b      	str	r3, [r7, #16]
}
 800eaec:	bf00      	nop
 800eaee:	e7fe      	b.n	800eaee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf2:	685a      	ldr	r2, [r3, #4]
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	1ad2      	subs	r2, r2, r3
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eb02:	69b8      	ldr	r0, [r7, #24]
 800eb04:	f000 f908 	bl	800ed18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb08:	4b1d      	ldr	r3, [pc, #116]	; (800eb80 <pvPortMalloc+0x188>)
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	1ad3      	subs	r3, r2, r3
 800eb12:	4a1b      	ldr	r2, [pc, #108]	; (800eb80 <pvPortMalloc+0x188>)
 800eb14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb16:	4b1a      	ldr	r3, [pc, #104]	; (800eb80 <pvPortMalloc+0x188>)
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	4b1b      	ldr	r3, [pc, #108]	; (800eb88 <pvPortMalloc+0x190>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d203      	bcs.n	800eb2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eb22:	4b17      	ldr	r3, [pc, #92]	; (800eb80 <pvPortMalloc+0x188>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4a18      	ldr	r2, [pc, #96]	; (800eb88 <pvPortMalloc+0x190>)
 800eb28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2c:	685a      	ldr	r2, [r3, #4]
 800eb2e:	4b13      	ldr	r3, [pc, #76]	; (800eb7c <pvPortMalloc+0x184>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	431a      	orrs	r2, r3
 800eb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eb3e:	4b13      	ldr	r3, [pc, #76]	; (800eb8c <pvPortMalloc+0x194>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	3301      	adds	r3, #1
 800eb44:	4a11      	ldr	r2, [pc, #68]	; (800eb8c <pvPortMalloc+0x194>)
 800eb46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb48:	f7fe fbf0 	bl	800d32c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	f003 0307 	and.w	r3, r3, #7
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d00a      	beq.n	800eb6c <pvPortMalloc+0x174>
	__asm volatile
 800eb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb5a:	f383 8811 	msr	BASEPRI, r3
 800eb5e:	f3bf 8f6f 	isb	sy
 800eb62:	f3bf 8f4f 	dsb	sy
 800eb66:	60fb      	str	r3, [r7, #12]
}
 800eb68:	bf00      	nop
 800eb6a:	e7fe      	b.n	800eb6a <pvPortMalloc+0x172>
	return pvReturn;
 800eb6c:	69fb      	ldr	r3, [r7, #28]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3728      	adds	r7, #40	; 0x28
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	2000c1cc 	.word	0x2000c1cc
 800eb7c:	2000c1e0 	.word	0x2000c1e0
 800eb80:	2000c1d0 	.word	0x2000c1d0
 800eb84:	2000c1c4 	.word	0x2000c1c4
 800eb88:	2000c1d4 	.word	0x2000c1d4
 800eb8c:	2000c1d8 	.word	0x2000c1d8

0800eb90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b086      	sub	sp, #24
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d04d      	beq.n	800ec3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eba2:	2308      	movs	r3, #8
 800eba4:	425b      	negs	r3, r3
 800eba6:	697a      	ldr	r2, [r7, #20]
 800eba8:	4413      	add	r3, r2
 800ebaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	685a      	ldr	r2, [r3, #4]
 800ebb4:	4b24      	ldr	r3, [pc, #144]	; (800ec48 <vPortFree+0xb8>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	4013      	ands	r3, r2
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d10a      	bne.n	800ebd4 <vPortFree+0x44>
	__asm volatile
 800ebbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc2:	f383 8811 	msr	BASEPRI, r3
 800ebc6:	f3bf 8f6f 	isb	sy
 800ebca:	f3bf 8f4f 	dsb	sy
 800ebce:	60fb      	str	r3, [r7, #12]
}
 800ebd0:	bf00      	nop
 800ebd2:	e7fe      	b.n	800ebd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d00a      	beq.n	800ebf2 <vPortFree+0x62>
	__asm volatile
 800ebdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe0:	f383 8811 	msr	BASEPRI, r3
 800ebe4:	f3bf 8f6f 	isb	sy
 800ebe8:	f3bf 8f4f 	dsb	sy
 800ebec:	60bb      	str	r3, [r7, #8]
}
 800ebee:	bf00      	nop
 800ebf0:	e7fe      	b.n	800ebf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	685a      	ldr	r2, [r3, #4]
 800ebf6:	4b14      	ldr	r3, [pc, #80]	; (800ec48 <vPortFree+0xb8>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4013      	ands	r3, r2
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d01e      	beq.n	800ec3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d11a      	bne.n	800ec3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	685a      	ldr	r2, [r3, #4]
 800ec0c:	4b0e      	ldr	r3, [pc, #56]	; (800ec48 <vPortFree+0xb8>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	43db      	mvns	r3, r3
 800ec12:	401a      	ands	r2, r3
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ec18:	f7fe fb7a 	bl	800d310 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	685a      	ldr	r2, [r3, #4]
 800ec20:	4b0a      	ldr	r3, [pc, #40]	; (800ec4c <vPortFree+0xbc>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4413      	add	r3, r2
 800ec26:	4a09      	ldr	r2, [pc, #36]	; (800ec4c <vPortFree+0xbc>)
 800ec28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec2a:	6938      	ldr	r0, [r7, #16]
 800ec2c:	f000 f874 	bl	800ed18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ec30:	4b07      	ldr	r3, [pc, #28]	; (800ec50 <vPortFree+0xc0>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	3301      	adds	r3, #1
 800ec36:	4a06      	ldr	r2, [pc, #24]	; (800ec50 <vPortFree+0xc0>)
 800ec38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ec3a:	f7fe fb77 	bl	800d32c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ec3e:	bf00      	nop
 800ec40:	3718      	adds	r7, #24
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	2000c1e0 	.word	0x2000c1e0
 800ec4c:	2000c1d0 	.word	0x2000c1d0
 800ec50:	2000c1dc 	.word	0x2000c1dc

0800ec54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ec54:	b480      	push	{r7}
 800ec56:	b085      	sub	sp, #20
 800ec58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ec5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ec60:	4b27      	ldr	r3, [pc, #156]	; (800ed00 <prvHeapInit+0xac>)
 800ec62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f003 0307 	and.w	r3, r3, #7
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d00c      	beq.n	800ec88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	3307      	adds	r3, #7
 800ec72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f023 0307 	bic.w	r3, r3, #7
 800ec7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec7c:	68ba      	ldr	r2, [r7, #8]
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	1ad3      	subs	r3, r2, r3
 800ec82:	4a1f      	ldr	r2, [pc, #124]	; (800ed00 <prvHeapInit+0xac>)
 800ec84:	4413      	add	r3, r2
 800ec86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec8c:	4a1d      	ldr	r2, [pc, #116]	; (800ed04 <prvHeapInit+0xb0>)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec92:	4b1c      	ldr	r3, [pc, #112]	; (800ed04 <prvHeapInit+0xb0>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eca0:	2208      	movs	r2, #8
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	1a9b      	subs	r3, r3, r2
 800eca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f023 0307 	bic.w	r3, r3, #7
 800ecae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	4a15      	ldr	r2, [pc, #84]	; (800ed08 <prvHeapInit+0xb4>)
 800ecb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ecb6:	4b14      	ldr	r3, [pc, #80]	; (800ed08 <prvHeapInit+0xb4>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ecbe:	4b12      	ldr	r3, [pc, #72]	; (800ed08 <prvHeapInit+0xb4>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	68fa      	ldr	r2, [r7, #12]
 800ecce:	1ad2      	subs	r2, r2, r3
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ecd4:	4b0c      	ldr	r3, [pc, #48]	; (800ed08 <prvHeapInit+0xb4>)
 800ecd6:	681a      	ldr	r2, [r3, #0]
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	4a0a      	ldr	r2, [pc, #40]	; (800ed0c <prvHeapInit+0xb8>)
 800ece2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	4a09      	ldr	r2, [pc, #36]	; (800ed10 <prvHeapInit+0xbc>)
 800ecea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ecec:	4b09      	ldr	r3, [pc, #36]	; (800ed14 <prvHeapInit+0xc0>)
 800ecee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ecf2:	601a      	str	r2, [r3, #0]
}
 800ecf4:	bf00      	nop
 800ecf6:	3714      	adds	r7, #20
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr
 800ed00:	2000a1c4 	.word	0x2000a1c4
 800ed04:	2000c1c4 	.word	0x2000c1c4
 800ed08:	2000c1cc 	.word	0x2000c1cc
 800ed0c:	2000c1d4 	.word	0x2000c1d4
 800ed10:	2000c1d0 	.word	0x2000c1d0
 800ed14:	2000c1e0 	.word	0x2000c1e0

0800ed18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b085      	sub	sp, #20
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ed20:	4b28      	ldr	r3, [pc, #160]	; (800edc4 <prvInsertBlockIntoFreeList+0xac>)
 800ed22:	60fb      	str	r3, [r7, #12]
 800ed24:	e002      	b.n	800ed2c <prvInsertBlockIntoFreeList+0x14>
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	60fb      	str	r3, [r7, #12]
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d8f7      	bhi.n	800ed26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	68ba      	ldr	r2, [r7, #8]
 800ed40:	4413      	add	r3, r2
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d108      	bne.n	800ed5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	685a      	ldr	r2, [r3, #4]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	441a      	add	r2, r3
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	68ba      	ldr	r2, [r7, #8]
 800ed64:	441a      	add	r2, r3
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d118      	bne.n	800eda0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	4b15      	ldr	r3, [pc, #84]	; (800edc8 <prvInsertBlockIntoFreeList+0xb0>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d00d      	beq.n	800ed96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	685a      	ldr	r2, [r3, #4]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	441a      	add	r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	601a      	str	r2, [r3, #0]
 800ed94:	e008      	b.n	800eda8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed96:	4b0c      	ldr	r3, [pc, #48]	; (800edc8 <prvInsertBlockIntoFreeList+0xb0>)
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	601a      	str	r2, [r3, #0]
 800ed9e:	e003      	b.n	800eda8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eda8:	68fa      	ldr	r2, [r7, #12]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	429a      	cmp	r2, r3
 800edae:	d002      	beq.n	800edb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	687a      	ldr	r2, [r7, #4]
 800edb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800edb6:	bf00      	nop
 800edb8:	3714      	adds	r7, #20
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr
 800edc2:	bf00      	nop
 800edc4:	2000c1c4 	.word	0x2000c1c4
 800edc8:	2000c1cc 	.word	0x2000c1cc

0800edcc <__errno>:
 800edcc:	4b01      	ldr	r3, [pc, #4]	; (800edd4 <__errno+0x8>)
 800edce:	6818      	ldr	r0, [r3, #0]
 800edd0:	4770      	bx	lr
 800edd2:	bf00      	nop
 800edd4:	2000008c 	.word	0x2000008c

0800edd8 <__libc_init_array>:
 800edd8:	b570      	push	{r4, r5, r6, lr}
 800edda:	4d0d      	ldr	r5, [pc, #52]	; (800ee10 <__libc_init_array+0x38>)
 800eddc:	4c0d      	ldr	r4, [pc, #52]	; (800ee14 <__libc_init_array+0x3c>)
 800edde:	1b64      	subs	r4, r4, r5
 800ede0:	10a4      	asrs	r4, r4, #2
 800ede2:	2600      	movs	r6, #0
 800ede4:	42a6      	cmp	r6, r4
 800ede6:	d109      	bne.n	800edfc <__libc_init_array+0x24>
 800ede8:	4d0b      	ldr	r5, [pc, #44]	; (800ee18 <__libc_init_array+0x40>)
 800edea:	4c0c      	ldr	r4, [pc, #48]	; (800ee1c <__libc_init_array+0x44>)
 800edec:	f001 feae 	bl	8010b4c <_init>
 800edf0:	1b64      	subs	r4, r4, r5
 800edf2:	10a4      	asrs	r4, r4, #2
 800edf4:	2600      	movs	r6, #0
 800edf6:	42a6      	cmp	r6, r4
 800edf8:	d105      	bne.n	800ee06 <__libc_init_array+0x2e>
 800edfa:	bd70      	pop	{r4, r5, r6, pc}
 800edfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee00:	4798      	blx	r3
 800ee02:	3601      	adds	r6, #1
 800ee04:	e7ee      	b.n	800ede4 <__libc_init_array+0xc>
 800ee06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee0a:	4798      	blx	r3
 800ee0c:	3601      	adds	r6, #1
 800ee0e:	e7f2      	b.n	800edf6 <__libc_init_array+0x1e>
 800ee10:	0801deb0 	.word	0x0801deb0
 800ee14:	0801deb0 	.word	0x0801deb0
 800ee18:	0801deb0 	.word	0x0801deb0
 800ee1c:	0801deb4 	.word	0x0801deb4

0800ee20 <__retarget_lock_acquire_recursive>:
 800ee20:	4770      	bx	lr

0800ee22 <__retarget_lock_release_recursive>:
 800ee22:	4770      	bx	lr

0800ee24 <memcpy>:
 800ee24:	440a      	add	r2, r1
 800ee26:	4291      	cmp	r1, r2
 800ee28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ee2c:	d100      	bne.n	800ee30 <memcpy+0xc>
 800ee2e:	4770      	bx	lr
 800ee30:	b510      	push	{r4, lr}
 800ee32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee3a:	4291      	cmp	r1, r2
 800ee3c:	d1f9      	bne.n	800ee32 <memcpy+0xe>
 800ee3e:	bd10      	pop	{r4, pc}

0800ee40 <memset>:
 800ee40:	4402      	add	r2, r0
 800ee42:	4603      	mov	r3, r0
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d100      	bne.n	800ee4a <memset+0xa>
 800ee48:	4770      	bx	lr
 800ee4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ee4e:	e7f9      	b.n	800ee44 <memset+0x4>

0800ee50 <sbrk_aligned>:
 800ee50:	b570      	push	{r4, r5, r6, lr}
 800ee52:	4e0e      	ldr	r6, [pc, #56]	; (800ee8c <sbrk_aligned+0x3c>)
 800ee54:	460c      	mov	r4, r1
 800ee56:	6831      	ldr	r1, [r6, #0]
 800ee58:	4605      	mov	r5, r0
 800ee5a:	b911      	cbnz	r1, 800ee62 <sbrk_aligned+0x12>
 800ee5c:	f000 f8f6 	bl	800f04c <_sbrk_r>
 800ee60:	6030      	str	r0, [r6, #0]
 800ee62:	4621      	mov	r1, r4
 800ee64:	4628      	mov	r0, r5
 800ee66:	f000 f8f1 	bl	800f04c <_sbrk_r>
 800ee6a:	1c43      	adds	r3, r0, #1
 800ee6c:	d00a      	beq.n	800ee84 <sbrk_aligned+0x34>
 800ee6e:	1cc4      	adds	r4, r0, #3
 800ee70:	f024 0403 	bic.w	r4, r4, #3
 800ee74:	42a0      	cmp	r0, r4
 800ee76:	d007      	beq.n	800ee88 <sbrk_aligned+0x38>
 800ee78:	1a21      	subs	r1, r4, r0
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	f000 f8e6 	bl	800f04c <_sbrk_r>
 800ee80:	3001      	adds	r0, #1
 800ee82:	d101      	bne.n	800ee88 <sbrk_aligned+0x38>
 800ee84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ee88:	4620      	mov	r0, r4
 800ee8a:	bd70      	pop	{r4, r5, r6, pc}
 800ee8c:	2000c1ec 	.word	0x2000c1ec

0800ee90 <_malloc_r>:
 800ee90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee94:	1ccd      	adds	r5, r1, #3
 800ee96:	f025 0503 	bic.w	r5, r5, #3
 800ee9a:	3508      	adds	r5, #8
 800ee9c:	2d0c      	cmp	r5, #12
 800ee9e:	bf38      	it	cc
 800eea0:	250c      	movcc	r5, #12
 800eea2:	2d00      	cmp	r5, #0
 800eea4:	4607      	mov	r7, r0
 800eea6:	db01      	blt.n	800eeac <_malloc_r+0x1c>
 800eea8:	42a9      	cmp	r1, r5
 800eeaa:	d905      	bls.n	800eeb8 <_malloc_r+0x28>
 800eeac:	230c      	movs	r3, #12
 800eeae:	603b      	str	r3, [r7, #0]
 800eeb0:	2600      	movs	r6, #0
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb8:	4e2e      	ldr	r6, [pc, #184]	; (800ef74 <_malloc_r+0xe4>)
 800eeba:	f000 f8f7 	bl	800f0ac <__malloc_lock>
 800eebe:	6833      	ldr	r3, [r6, #0]
 800eec0:	461c      	mov	r4, r3
 800eec2:	bb34      	cbnz	r4, 800ef12 <_malloc_r+0x82>
 800eec4:	4629      	mov	r1, r5
 800eec6:	4638      	mov	r0, r7
 800eec8:	f7ff ffc2 	bl	800ee50 <sbrk_aligned>
 800eecc:	1c43      	adds	r3, r0, #1
 800eece:	4604      	mov	r4, r0
 800eed0:	d14d      	bne.n	800ef6e <_malloc_r+0xde>
 800eed2:	6834      	ldr	r4, [r6, #0]
 800eed4:	4626      	mov	r6, r4
 800eed6:	2e00      	cmp	r6, #0
 800eed8:	d140      	bne.n	800ef5c <_malloc_r+0xcc>
 800eeda:	6823      	ldr	r3, [r4, #0]
 800eedc:	4631      	mov	r1, r6
 800eede:	4638      	mov	r0, r7
 800eee0:	eb04 0803 	add.w	r8, r4, r3
 800eee4:	f000 f8b2 	bl	800f04c <_sbrk_r>
 800eee8:	4580      	cmp	r8, r0
 800eeea:	d13a      	bne.n	800ef62 <_malloc_r+0xd2>
 800eeec:	6821      	ldr	r1, [r4, #0]
 800eeee:	3503      	adds	r5, #3
 800eef0:	1a6d      	subs	r5, r5, r1
 800eef2:	f025 0503 	bic.w	r5, r5, #3
 800eef6:	3508      	adds	r5, #8
 800eef8:	2d0c      	cmp	r5, #12
 800eefa:	bf38      	it	cc
 800eefc:	250c      	movcc	r5, #12
 800eefe:	4629      	mov	r1, r5
 800ef00:	4638      	mov	r0, r7
 800ef02:	f7ff ffa5 	bl	800ee50 <sbrk_aligned>
 800ef06:	3001      	adds	r0, #1
 800ef08:	d02b      	beq.n	800ef62 <_malloc_r+0xd2>
 800ef0a:	6823      	ldr	r3, [r4, #0]
 800ef0c:	442b      	add	r3, r5
 800ef0e:	6023      	str	r3, [r4, #0]
 800ef10:	e00e      	b.n	800ef30 <_malloc_r+0xa0>
 800ef12:	6822      	ldr	r2, [r4, #0]
 800ef14:	1b52      	subs	r2, r2, r5
 800ef16:	d41e      	bmi.n	800ef56 <_malloc_r+0xc6>
 800ef18:	2a0b      	cmp	r2, #11
 800ef1a:	d916      	bls.n	800ef4a <_malloc_r+0xba>
 800ef1c:	1961      	adds	r1, r4, r5
 800ef1e:	42a3      	cmp	r3, r4
 800ef20:	6025      	str	r5, [r4, #0]
 800ef22:	bf18      	it	ne
 800ef24:	6059      	strne	r1, [r3, #4]
 800ef26:	6863      	ldr	r3, [r4, #4]
 800ef28:	bf08      	it	eq
 800ef2a:	6031      	streq	r1, [r6, #0]
 800ef2c:	5162      	str	r2, [r4, r5]
 800ef2e:	604b      	str	r3, [r1, #4]
 800ef30:	4638      	mov	r0, r7
 800ef32:	f104 060b 	add.w	r6, r4, #11
 800ef36:	f000 f8bf 	bl	800f0b8 <__malloc_unlock>
 800ef3a:	f026 0607 	bic.w	r6, r6, #7
 800ef3e:	1d23      	adds	r3, r4, #4
 800ef40:	1af2      	subs	r2, r6, r3
 800ef42:	d0b6      	beq.n	800eeb2 <_malloc_r+0x22>
 800ef44:	1b9b      	subs	r3, r3, r6
 800ef46:	50a3      	str	r3, [r4, r2]
 800ef48:	e7b3      	b.n	800eeb2 <_malloc_r+0x22>
 800ef4a:	6862      	ldr	r2, [r4, #4]
 800ef4c:	42a3      	cmp	r3, r4
 800ef4e:	bf0c      	ite	eq
 800ef50:	6032      	streq	r2, [r6, #0]
 800ef52:	605a      	strne	r2, [r3, #4]
 800ef54:	e7ec      	b.n	800ef30 <_malloc_r+0xa0>
 800ef56:	4623      	mov	r3, r4
 800ef58:	6864      	ldr	r4, [r4, #4]
 800ef5a:	e7b2      	b.n	800eec2 <_malloc_r+0x32>
 800ef5c:	4634      	mov	r4, r6
 800ef5e:	6876      	ldr	r6, [r6, #4]
 800ef60:	e7b9      	b.n	800eed6 <_malloc_r+0x46>
 800ef62:	230c      	movs	r3, #12
 800ef64:	603b      	str	r3, [r7, #0]
 800ef66:	4638      	mov	r0, r7
 800ef68:	f000 f8a6 	bl	800f0b8 <__malloc_unlock>
 800ef6c:	e7a1      	b.n	800eeb2 <_malloc_r+0x22>
 800ef6e:	6025      	str	r5, [r4, #0]
 800ef70:	e7de      	b.n	800ef30 <_malloc_r+0xa0>
 800ef72:	bf00      	nop
 800ef74:	2000c1e8 	.word	0x2000c1e8

0800ef78 <cleanup_glue>:
 800ef78:	b538      	push	{r3, r4, r5, lr}
 800ef7a:	460c      	mov	r4, r1
 800ef7c:	6809      	ldr	r1, [r1, #0]
 800ef7e:	4605      	mov	r5, r0
 800ef80:	b109      	cbz	r1, 800ef86 <cleanup_glue+0xe>
 800ef82:	f7ff fff9 	bl	800ef78 <cleanup_glue>
 800ef86:	4621      	mov	r1, r4
 800ef88:	4628      	mov	r0, r5
 800ef8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef8e:	f000 b899 	b.w	800f0c4 <_free_r>
	...

0800ef94 <_reclaim_reent>:
 800ef94:	4b2c      	ldr	r3, [pc, #176]	; (800f048 <_reclaim_reent+0xb4>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4283      	cmp	r3, r0
 800ef9a:	b570      	push	{r4, r5, r6, lr}
 800ef9c:	4604      	mov	r4, r0
 800ef9e:	d051      	beq.n	800f044 <_reclaim_reent+0xb0>
 800efa0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800efa2:	b143      	cbz	r3, 800efb6 <_reclaim_reent+0x22>
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d14a      	bne.n	800f040 <_reclaim_reent+0xac>
 800efaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efac:	6819      	ldr	r1, [r3, #0]
 800efae:	b111      	cbz	r1, 800efb6 <_reclaim_reent+0x22>
 800efb0:	4620      	mov	r0, r4
 800efb2:	f000 f887 	bl	800f0c4 <_free_r>
 800efb6:	6961      	ldr	r1, [r4, #20]
 800efb8:	b111      	cbz	r1, 800efc0 <_reclaim_reent+0x2c>
 800efba:	4620      	mov	r0, r4
 800efbc:	f000 f882 	bl	800f0c4 <_free_r>
 800efc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800efc2:	b111      	cbz	r1, 800efca <_reclaim_reent+0x36>
 800efc4:	4620      	mov	r0, r4
 800efc6:	f000 f87d 	bl	800f0c4 <_free_r>
 800efca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800efcc:	b111      	cbz	r1, 800efd4 <_reclaim_reent+0x40>
 800efce:	4620      	mov	r0, r4
 800efd0:	f000 f878 	bl	800f0c4 <_free_r>
 800efd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800efd6:	b111      	cbz	r1, 800efde <_reclaim_reent+0x4a>
 800efd8:	4620      	mov	r0, r4
 800efda:	f000 f873 	bl	800f0c4 <_free_r>
 800efde:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800efe0:	b111      	cbz	r1, 800efe8 <_reclaim_reent+0x54>
 800efe2:	4620      	mov	r0, r4
 800efe4:	f000 f86e 	bl	800f0c4 <_free_r>
 800efe8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800efea:	b111      	cbz	r1, 800eff2 <_reclaim_reent+0x5e>
 800efec:	4620      	mov	r0, r4
 800efee:	f000 f869 	bl	800f0c4 <_free_r>
 800eff2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eff4:	b111      	cbz	r1, 800effc <_reclaim_reent+0x68>
 800eff6:	4620      	mov	r0, r4
 800eff8:	f000 f864 	bl	800f0c4 <_free_r>
 800effc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800effe:	b111      	cbz	r1, 800f006 <_reclaim_reent+0x72>
 800f000:	4620      	mov	r0, r4
 800f002:	f000 f85f 	bl	800f0c4 <_free_r>
 800f006:	69a3      	ldr	r3, [r4, #24]
 800f008:	b1e3      	cbz	r3, 800f044 <_reclaim_reent+0xb0>
 800f00a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f00c:	4620      	mov	r0, r4
 800f00e:	4798      	blx	r3
 800f010:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f012:	b1b9      	cbz	r1, 800f044 <_reclaim_reent+0xb0>
 800f014:	4620      	mov	r0, r4
 800f016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f01a:	f7ff bfad 	b.w	800ef78 <cleanup_glue>
 800f01e:	5949      	ldr	r1, [r1, r5]
 800f020:	b941      	cbnz	r1, 800f034 <_reclaim_reent+0xa0>
 800f022:	3504      	adds	r5, #4
 800f024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f026:	2d80      	cmp	r5, #128	; 0x80
 800f028:	68d9      	ldr	r1, [r3, #12]
 800f02a:	d1f8      	bne.n	800f01e <_reclaim_reent+0x8a>
 800f02c:	4620      	mov	r0, r4
 800f02e:	f000 f849 	bl	800f0c4 <_free_r>
 800f032:	e7ba      	b.n	800efaa <_reclaim_reent+0x16>
 800f034:	680e      	ldr	r6, [r1, #0]
 800f036:	4620      	mov	r0, r4
 800f038:	f000 f844 	bl	800f0c4 <_free_r>
 800f03c:	4631      	mov	r1, r6
 800f03e:	e7ef      	b.n	800f020 <_reclaim_reent+0x8c>
 800f040:	2500      	movs	r5, #0
 800f042:	e7ef      	b.n	800f024 <_reclaim_reent+0x90>
 800f044:	bd70      	pop	{r4, r5, r6, pc}
 800f046:	bf00      	nop
 800f048:	2000008c 	.word	0x2000008c

0800f04c <_sbrk_r>:
 800f04c:	b538      	push	{r3, r4, r5, lr}
 800f04e:	4d06      	ldr	r5, [pc, #24]	; (800f068 <_sbrk_r+0x1c>)
 800f050:	2300      	movs	r3, #0
 800f052:	4604      	mov	r4, r0
 800f054:	4608      	mov	r0, r1
 800f056:	602b      	str	r3, [r5, #0]
 800f058:	f7f5 fee2 	bl	8004e20 <_sbrk>
 800f05c:	1c43      	adds	r3, r0, #1
 800f05e:	d102      	bne.n	800f066 <_sbrk_r+0x1a>
 800f060:	682b      	ldr	r3, [r5, #0]
 800f062:	b103      	cbz	r3, 800f066 <_sbrk_r+0x1a>
 800f064:	6023      	str	r3, [r4, #0]
 800f066:	bd38      	pop	{r3, r4, r5, pc}
 800f068:	2000c1f0 	.word	0x2000c1f0

0800f06c <siprintf>:
 800f06c:	b40e      	push	{r1, r2, r3}
 800f06e:	b500      	push	{lr}
 800f070:	b09c      	sub	sp, #112	; 0x70
 800f072:	ab1d      	add	r3, sp, #116	; 0x74
 800f074:	9002      	str	r0, [sp, #8]
 800f076:	9006      	str	r0, [sp, #24]
 800f078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f07c:	4809      	ldr	r0, [pc, #36]	; (800f0a4 <siprintf+0x38>)
 800f07e:	9107      	str	r1, [sp, #28]
 800f080:	9104      	str	r1, [sp, #16]
 800f082:	4909      	ldr	r1, [pc, #36]	; (800f0a8 <siprintf+0x3c>)
 800f084:	f853 2b04 	ldr.w	r2, [r3], #4
 800f088:	9105      	str	r1, [sp, #20]
 800f08a:	6800      	ldr	r0, [r0, #0]
 800f08c:	9301      	str	r3, [sp, #4]
 800f08e:	a902      	add	r1, sp, #8
 800f090:	f000 f8c0 	bl	800f214 <_svfiprintf_r>
 800f094:	9b02      	ldr	r3, [sp, #8]
 800f096:	2200      	movs	r2, #0
 800f098:	701a      	strb	r2, [r3, #0]
 800f09a:	b01c      	add	sp, #112	; 0x70
 800f09c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0a0:	b003      	add	sp, #12
 800f0a2:	4770      	bx	lr
 800f0a4:	2000008c 	.word	0x2000008c
 800f0a8:	ffff0208 	.word	0xffff0208

0800f0ac <__malloc_lock>:
 800f0ac:	4801      	ldr	r0, [pc, #4]	; (800f0b4 <__malloc_lock+0x8>)
 800f0ae:	f7ff beb7 	b.w	800ee20 <__retarget_lock_acquire_recursive>
 800f0b2:	bf00      	nop
 800f0b4:	2000c1e4 	.word	0x2000c1e4

0800f0b8 <__malloc_unlock>:
 800f0b8:	4801      	ldr	r0, [pc, #4]	; (800f0c0 <__malloc_unlock+0x8>)
 800f0ba:	f7ff beb2 	b.w	800ee22 <__retarget_lock_release_recursive>
 800f0be:	bf00      	nop
 800f0c0:	2000c1e4 	.word	0x2000c1e4

0800f0c4 <_free_r>:
 800f0c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f0c6:	2900      	cmp	r1, #0
 800f0c8:	d044      	beq.n	800f154 <_free_r+0x90>
 800f0ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0ce:	9001      	str	r0, [sp, #4]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	f1a1 0404 	sub.w	r4, r1, #4
 800f0d6:	bfb8      	it	lt
 800f0d8:	18e4      	addlt	r4, r4, r3
 800f0da:	f7ff ffe7 	bl	800f0ac <__malloc_lock>
 800f0de:	4a1e      	ldr	r2, [pc, #120]	; (800f158 <_free_r+0x94>)
 800f0e0:	9801      	ldr	r0, [sp, #4]
 800f0e2:	6813      	ldr	r3, [r2, #0]
 800f0e4:	b933      	cbnz	r3, 800f0f4 <_free_r+0x30>
 800f0e6:	6063      	str	r3, [r4, #4]
 800f0e8:	6014      	str	r4, [r2, #0]
 800f0ea:	b003      	add	sp, #12
 800f0ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0f0:	f7ff bfe2 	b.w	800f0b8 <__malloc_unlock>
 800f0f4:	42a3      	cmp	r3, r4
 800f0f6:	d908      	bls.n	800f10a <_free_r+0x46>
 800f0f8:	6825      	ldr	r5, [r4, #0]
 800f0fa:	1961      	adds	r1, r4, r5
 800f0fc:	428b      	cmp	r3, r1
 800f0fe:	bf01      	itttt	eq
 800f100:	6819      	ldreq	r1, [r3, #0]
 800f102:	685b      	ldreq	r3, [r3, #4]
 800f104:	1949      	addeq	r1, r1, r5
 800f106:	6021      	streq	r1, [r4, #0]
 800f108:	e7ed      	b.n	800f0e6 <_free_r+0x22>
 800f10a:	461a      	mov	r2, r3
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	b10b      	cbz	r3, 800f114 <_free_r+0x50>
 800f110:	42a3      	cmp	r3, r4
 800f112:	d9fa      	bls.n	800f10a <_free_r+0x46>
 800f114:	6811      	ldr	r1, [r2, #0]
 800f116:	1855      	adds	r5, r2, r1
 800f118:	42a5      	cmp	r5, r4
 800f11a:	d10b      	bne.n	800f134 <_free_r+0x70>
 800f11c:	6824      	ldr	r4, [r4, #0]
 800f11e:	4421      	add	r1, r4
 800f120:	1854      	adds	r4, r2, r1
 800f122:	42a3      	cmp	r3, r4
 800f124:	6011      	str	r1, [r2, #0]
 800f126:	d1e0      	bne.n	800f0ea <_free_r+0x26>
 800f128:	681c      	ldr	r4, [r3, #0]
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	6053      	str	r3, [r2, #4]
 800f12e:	4421      	add	r1, r4
 800f130:	6011      	str	r1, [r2, #0]
 800f132:	e7da      	b.n	800f0ea <_free_r+0x26>
 800f134:	d902      	bls.n	800f13c <_free_r+0x78>
 800f136:	230c      	movs	r3, #12
 800f138:	6003      	str	r3, [r0, #0]
 800f13a:	e7d6      	b.n	800f0ea <_free_r+0x26>
 800f13c:	6825      	ldr	r5, [r4, #0]
 800f13e:	1961      	adds	r1, r4, r5
 800f140:	428b      	cmp	r3, r1
 800f142:	bf04      	itt	eq
 800f144:	6819      	ldreq	r1, [r3, #0]
 800f146:	685b      	ldreq	r3, [r3, #4]
 800f148:	6063      	str	r3, [r4, #4]
 800f14a:	bf04      	itt	eq
 800f14c:	1949      	addeq	r1, r1, r5
 800f14e:	6021      	streq	r1, [r4, #0]
 800f150:	6054      	str	r4, [r2, #4]
 800f152:	e7ca      	b.n	800f0ea <_free_r+0x26>
 800f154:	b003      	add	sp, #12
 800f156:	bd30      	pop	{r4, r5, pc}
 800f158:	2000c1e8 	.word	0x2000c1e8

0800f15c <__ssputs_r>:
 800f15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f160:	688e      	ldr	r6, [r1, #8]
 800f162:	429e      	cmp	r6, r3
 800f164:	4682      	mov	sl, r0
 800f166:	460c      	mov	r4, r1
 800f168:	4690      	mov	r8, r2
 800f16a:	461f      	mov	r7, r3
 800f16c:	d838      	bhi.n	800f1e0 <__ssputs_r+0x84>
 800f16e:	898a      	ldrh	r2, [r1, #12]
 800f170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f174:	d032      	beq.n	800f1dc <__ssputs_r+0x80>
 800f176:	6825      	ldr	r5, [r4, #0]
 800f178:	6909      	ldr	r1, [r1, #16]
 800f17a:	eba5 0901 	sub.w	r9, r5, r1
 800f17e:	6965      	ldr	r5, [r4, #20]
 800f180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f188:	3301      	adds	r3, #1
 800f18a:	444b      	add	r3, r9
 800f18c:	106d      	asrs	r5, r5, #1
 800f18e:	429d      	cmp	r5, r3
 800f190:	bf38      	it	cc
 800f192:	461d      	movcc	r5, r3
 800f194:	0553      	lsls	r3, r2, #21
 800f196:	d531      	bpl.n	800f1fc <__ssputs_r+0xa0>
 800f198:	4629      	mov	r1, r5
 800f19a:	f7ff fe79 	bl	800ee90 <_malloc_r>
 800f19e:	4606      	mov	r6, r0
 800f1a0:	b950      	cbnz	r0, 800f1b8 <__ssputs_r+0x5c>
 800f1a2:	230c      	movs	r3, #12
 800f1a4:	f8ca 3000 	str.w	r3, [sl]
 800f1a8:	89a3      	ldrh	r3, [r4, #12]
 800f1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1ae:	81a3      	strh	r3, [r4, #12]
 800f1b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1b8:	6921      	ldr	r1, [r4, #16]
 800f1ba:	464a      	mov	r2, r9
 800f1bc:	f7ff fe32 	bl	800ee24 <memcpy>
 800f1c0:	89a3      	ldrh	r3, [r4, #12]
 800f1c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f1c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1ca:	81a3      	strh	r3, [r4, #12]
 800f1cc:	6126      	str	r6, [r4, #16]
 800f1ce:	6165      	str	r5, [r4, #20]
 800f1d0:	444e      	add	r6, r9
 800f1d2:	eba5 0509 	sub.w	r5, r5, r9
 800f1d6:	6026      	str	r6, [r4, #0]
 800f1d8:	60a5      	str	r5, [r4, #8]
 800f1da:	463e      	mov	r6, r7
 800f1dc:	42be      	cmp	r6, r7
 800f1de:	d900      	bls.n	800f1e2 <__ssputs_r+0x86>
 800f1e0:	463e      	mov	r6, r7
 800f1e2:	6820      	ldr	r0, [r4, #0]
 800f1e4:	4632      	mov	r2, r6
 800f1e6:	4641      	mov	r1, r8
 800f1e8:	f000 faa8 	bl	800f73c <memmove>
 800f1ec:	68a3      	ldr	r3, [r4, #8]
 800f1ee:	1b9b      	subs	r3, r3, r6
 800f1f0:	60a3      	str	r3, [r4, #8]
 800f1f2:	6823      	ldr	r3, [r4, #0]
 800f1f4:	4433      	add	r3, r6
 800f1f6:	6023      	str	r3, [r4, #0]
 800f1f8:	2000      	movs	r0, #0
 800f1fa:	e7db      	b.n	800f1b4 <__ssputs_r+0x58>
 800f1fc:	462a      	mov	r2, r5
 800f1fe:	f000 fab7 	bl	800f770 <_realloc_r>
 800f202:	4606      	mov	r6, r0
 800f204:	2800      	cmp	r0, #0
 800f206:	d1e1      	bne.n	800f1cc <__ssputs_r+0x70>
 800f208:	6921      	ldr	r1, [r4, #16]
 800f20a:	4650      	mov	r0, sl
 800f20c:	f7ff ff5a 	bl	800f0c4 <_free_r>
 800f210:	e7c7      	b.n	800f1a2 <__ssputs_r+0x46>
	...

0800f214 <_svfiprintf_r>:
 800f214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f218:	4698      	mov	r8, r3
 800f21a:	898b      	ldrh	r3, [r1, #12]
 800f21c:	061b      	lsls	r3, r3, #24
 800f21e:	b09d      	sub	sp, #116	; 0x74
 800f220:	4607      	mov	r7, r0
 800f222:	460d      	mov	r5, r1
 800f224:	4614      	mov	r4, r2
 800f226:	d50e      	bpl.n	800f246 <_svfiprintf_r+0x32>
 800f228:	690b      	ldr	r3, [r1, #16]
 800f22a:	b963      	cbnz	r3, 800f246 <_svfiprintf_r+0x32>
 800f22c:	2140      	movs	r1, #64	; 0x40
 800f22e:	f7ff fe2f 	bl	800ee90 <_malloc_r>
 800f232:	6028      	str	r0, [r5, #0]
 800f234:	6128      	str	r0, [r5, #16]
 800f236:	b920      	cbnz	r0, 800f242 <_svfiprintf_r+0x2e>
 800f238:	230c      	movs	r3, #12
 800f23a:	603b      	str	r3, [r7, #0]
 800f23c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f240:	e0d1      	b.n	800f3e6 <_svfiprintf_r+0x1d2>
 800f242:	2340      	movs	r3, #64	; 0x40
 800f244:	616b      	str	r3, [r5, #20]
 800f246:	2300      	movs	r3, #0
 800f248:	9309      	str	r3, [sp, #36]	; 0x24
 800f24a:	2320      	movs	r3, #32
 800f24c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f250:	f8cd 800c 	str.w	r8, [sp, #12]
 800f254:	2330      	movs	r3, #48	; 0x30
 800f256:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f400 <_svfiprintf_r+0x1ec>
 800f25a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f25e:	f04f 0901 	mov.w	r9, #1
 800f262:	4623      	mov	r3, r4
 800f264:	469a      	mov	sl, r3
 800f266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f26a:	b10a      	cbz	r2, 800f270 <_svfiprintf_r+0x5c>
 800f26c:	2a25      	cmp	r2, #37	; 0x25
 800f26e:	d1f9      	bne.n	800f264 <_svfiprintf_r+0x50>
 800f270:	ebba 0b04 	subs.w	fp, sl, r4
 800f274:	d00b      	beq.n	800f28e <_svfiprintf_r+0x7a>
 800f276:	465b      	mov	r3, fp
 800f278:	4622      	mov	r2, r4
 800f27a:	4629      	mov	r1, r5
 800f27c:	4638      	mov	r0, r7
 800f27e:	f7ff ff6d 	bl	800f15c <__ssputs_r>
 800f282:	3001      	adds	r0, #1
 800f284:	f000 80aa 	beq.w	800f3dc <_svfiprintf_r+0x1c8>
 800f288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f28a:	445a      	add	r2, fp
 800f28c:	9209      	str	r2, [sp, #36]	; 0x24
 800f28e:	f89a 3000 	ldrb.w	r3, [sl]
 800f292:	2b00      	cmp	r3, #0
 800f294:	f000 80a2 	beq.w	800f3dc <_svfiprintf_r+0x1c8>
 800f298:	2300      	movs	r3, #0
 800f29a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f29e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2a2:	f10a 0a01 	add.w	sl, sl, #1
 800f2a6:	9304      	str	r3, [sp, #16]
 800f2a8:	9307      	str	r3, [sp, #28]
 800f2aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2ae:	931a      	str	r3, [sp, #104]	; 0x68
 800f2b0:	4654      	mov	r4, sl
 800f2b2:	2205      	movs	r2, #5
 800f2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2b8:	4851      	ldr	r0, [pc, #324]	; (800f400 <_svfiprintf_r+0x1ec>)
 800f2ba:	f7f0 ff91 	bl	80001e0 <memchr>
 800f2be:	9a04      	ldr	r2, [sp, #16]
 800f2c0:	b9d8      	cbnz	r0, 800f2fa <_svfiprintf_r+0xe6>
 800f2c2:	06d0      	lsls	r0, r2, #27
 800f2c4:	bf44      	itt	mi
 800f2c6:	2320      	movmi	r3, #32
 800f2c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2cc:	0711      	lsls	r1, r2, #28
 800f2ce:	bf44      	itt	mi
 800f2d0:	232b      	movmi	r3, #43	; 0x2b
 800f2d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2d6:	f89a 3000 	ldrb.w	r3, [sl]
 800f2da:	2b2a      	cmp	r3, #42	; 0x2a
 800f2dc:	d015      	beq.n	800f30a <_svfiprintf_r+0xf6>
 800f2de:	9a07      	ldr	r2, [sp, #28]
 800f2e0:	4654      	mov	r4, sl
 800f2e2:	2000      	movs	r0, #0
 800f2e4:	f04f 0c0a 	mov.w	ip, #10
 800f2e8:	4621      	mov	r1, r4
 800f2ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2ee:	3b30      	subs	r3, #48	; 0x30
 800f2f0:	2b09      	cmp	r3, #9
 800f2f2:	d94e      	bls.n	800f392 <_svfiprintf_r+0x17e>
 800f2f4:	b1b0      	cbz	r0, 800f324 <_svfiprintf_r+0x110>
 800f2f6:	9207      	str	r2, [sp, #28]
 800f2f8:	e014      	b.n	800f324 <_svfiprintf_r+0x110>
 800f2fa:	eba0 0308 	sub.w	r3, r0, r8
 800f2fe:	fa09 f303 	lsl.w	r3, r9, r3
 800f302:	4313      	orrs	r3, r2
 800f304:	9304      	str	r3, [sp, #16]
 800f306:	46a2      	mov	sl, r4
 800f308:	e7d2      	b.n	800f2b0 <_svfiprintf_r+0x9c>
 800f30a:	9b03      	ldr	r3, [sp, #12]
 800f30c:	1d19      	adds	r1, r3, #4
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	9103      	str	r1, [sp, #12]
 800f312:	2b00      	cmp	r3, #0
 800f314:	bfbb      	ittet	lt
 800f316:	425b      	neglt	r3, r3
 800f318:	f042 0202 	orrlt.w	r2, r2, #2
 800f31c:	9307      	strge	r3, [sp, #28]
 800f31e:	9307      	strlt	r3, [sp, #28]
 800f320:	bfb8      	it	lt
 800f322:	9204      	strlt	r2, [sp, #16]
 800f324:	7823      	ldrb	r3, [r4, #0]
 800f326:	2b2e      	cmp	r3, #46	; 0x2e
 800f328:	d10c      	bne.n	800f344 <_svfiprintf_r+0x130>
 800f32a:	7863      	ldrb	r3, [r4, #1]
 800f32c:	2b2a      	cmp	r3, #42	; 0x2a
 800f32e:	d135      	bne.n	800f39c <_svfiprintf_r+0x188>
 800f330:	9b03      	ldr	r3, [sp, #12]
 800f332:	1d1a      	adds	r2, r3, #4
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	9203      	str	r2, [sp, #12]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	bfb8      	it	lt
 800f33c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f340:	3402      	adds	r4, #2
 800f342:	9305      	str	r3, [sp, #20]
 800f344:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f410 <_svfiprintf_r+0x1fc>
 800f348:	7821      	ldrb	r1, [r4, #0]
 800f34a:	2203      	movs	r2, #3
 800f34c:	4650      	mov	r0, sl
 800f34e:	f7f0 ff47 	bl	80001e0 <memchr>
 800f352:	b140      	cbz	r0, 800f366 <_svfiprintf_r+0x152>
 800f354:	2340      	movs	r3, #64	; 0x40
 800f356:	eba0 000a 	sub.w	r0, r0, sl
 800f35a:	fa03 f000 	lsl.w	r0, r3, r0
 800f35e:	9b04      	ldr	r3, [sp, #16]
 800f360:	4303      	orrs	r3, r0
 800f362:	3401      	adds	r4, #1
 800f364:	9304      	str	r3, [sp, #16]
 800f366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f36a:	4826      	ldr	r0, [pc, #152]	; (800f404 <_svfiprintf_r+0x1f0>)
 800f36c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f370:	2206      	movs	r2, #6
 800f372:	f7f0 ff35 	bl	80001e0 <memchr>
 800f376:	2800      	cmp	r0, #0
 800f378:	d038      	beq.n	800f3ec <_svfiprintf_r+0x1d8>
 800f37a:	4b23      	ldr	r3, [pc, #140]	; (800f408 <_svfiprintf_r+0x1f4>)
 800f37c:	bb1b      	cbnz	r3, 800f3c6 <_svfiprintf_r+0x1b2>
 800f37e:	9b03      	ldr	r3, [sp, #12]
 800f380:	3307      	adds	r3, #7
 800f382:	f023 0307 	bic.w	r3, r3, #7
 800f386:	3308      	adds	r3, #8
 800f388:	9303      	str	r3, [sp, #12]
 800f38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f38c:	4433      	add	r3, r6
 800f38e:	9309      	str	r3, [sp, #36]	; 0x24
 800f390:	e767      	b.n	800f262 <_svfiprintf_r+0x4e>
 800f392:	fb0c 3202 	mla	r2, ip, r2, r3
 800f396:	460c      	mov	r4, r1
 800f398:	2001      	movs	r0, #1
 800f39a:	e7a5      	b.n	800f2e8 <_svfiprintf_r+0xd4>
 800f39c:	2300      	movs	r3, #0
 800f39e:	3401      	adds	r4, #1
 800f3a0:	9305      	str	r3, [sp, #20]
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	f04f 0c0a 	mov.w	ip, #10
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3ae:	3a30      	subs	r2, #48	; 0x30
 800f3b0:	2a09      	cmp	r2, #9
 800f3b2:	d903      	bls.n	800f3bc <_svfiprintf_r+0x1a8>
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d0c5      	beq.n	800f344 <_svfiprintf_r+0x130>
 800f3b8:	9105      	str	r1, [sp, #20]
 800f3ba:	e7c3      	b.n	800f344 <_svfiprintf_r+0x130>
 800f3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3c0:	4604      	mov	r4, r0
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	e7f0      	b.n	800f3a8 <_svfiprintf_r+0x194>
 800f3c6:	ab03      	add	r3, sp, #12
 800f3c8:	9300      	str	r3, [sp, #0]
 800f3ca:	462a      	mov	r2, r5
 800f3cc:	4b0f      	ldr	r3, [pc, #60]	; (800f40c <_svfiprintf_r+0x1f8>)
 800f3ce:	a904      	add	r1, sp, #16
 800f3d0:	4638      	mov	r0, r7
 800f3d2:	f3af 8000 	nop.w
 800f3d6:	1c42      	adds	r2, r0, #1
 800f3d8:	4606      	mov	r6, r0
 800f3da:	d1d6      	bne.n	800f38a <_svfiprintf_r+0x176>
 800f3dc:	89ab      	ldrh	r3, [r5, #12]
 800f3de:	065b      	lsls	r3, r3, #25
 800f3e0:	f53f af2c 	bmi.w	800f23c <_svfiprintf_r+0x28>
 800f3e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3e6:	b01d      	add	sp, #116	; 0x74
 800f3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ec:	ab03      	add	r3, sp, #12
 800f3ee:	9300      	str	r3, [sp, #0]
 800f3f0:	462a      	mov	r2, r5
 800f3f2:	4b06      	ldr	r3, [pc, #24]	; (800f40c <_svfiprintf_r+0x1f8>)
 800f3f4:	a904      	add	r1, sp, #16
 800f3f6:	4638      	mov	r0, r7
 800f3f8:	f000 f87a 	bl	800f4f0 <_printf_i>
 800f3fc:	e7eb      	b.n	800f3d6 <_svfiprintf_r+0x1c2>
 800f3fe:	bf00      	nop
 800f400:	0801dc98 	.word	0x0801dc98
 800f404:	0801dca2 	.word	0x0801dca2
 800f408:	00000000 	.word	0x00000000
 800f40c:	0800f15d 	.word	0x0800f15d
 800f410:	0801dc9e 	.word	0x0801dc9e

0800f414 <_printf_common>:
 800f414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f418:	4616      	mov	r6, r2
 800f41a:	4699      	mov	r9, r3
 800f41c:	688a      	ldr	r2, [r1, #8]
 800f41e:	690b      	ldr	r3, [r1, #16]
 800f420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f424:	4293      	cmp	r3, r2
 800f426:	bfb8      	it	lt
 800f428:	4613      	movlt	r3, r2
 800f42a:	6033      	str	r3, [r6, #0]
 800f42c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f430:	4607      	mov	r7, r0
 800f432:	460c      	mov	r4, r1
 800f434:	b10a      	cbz	r2, 800f43a <_printf_common+0x26>
 800f436:	3301      	adds	r3, #1
 800f438:	6033      	str	r3, [r6, #0]
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	0699      	lsls	r1, r3, #26
 800f43e:	bf42      	ittt	mi
 800f440:	6833      	ldrmi	r3, [r6, #0]
 800f442:	3302      	addmi	r3, #2
 800f444:	6033      	strmi	r3, [r6, #0]
 800f446:	6825      	ldr	r5, [r4, #0]
 800f448:	f015 0506 	ands.w	r5, r5, #6
 800f44c:	d106      	bne.n	800f45c <_printf_common+0x48>
 800f44e:	f104 0a19 	add.w	sl, r4, #25
 800f452:	68e3      	ldr	r3, [r4, #12]
 800f454:	6832      	ldr	r2, [r6, #0]
 800f456:	1a9b      	subs	r3, r3, r2
 800f458:	42ab      	cmp	r3, r5
 800f45a:	dc26      	bgt.n	800f4aa <_printf_common+0x96>
 800f45c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f460:	1e13      	subs	r3, r2, #0
 800f462:	6822      	ldr	r2, [r4, #0]
 800f464:	bf18      	it	ne
 800f466:	2301      	movne	r3, #1
 800f468:	0692      	lsls	r2, r2, #26
 800f46a:	d42b      	bmi.n	800f4c4 <_printf_common+0xb0>
 800f46c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f470:	4649      	mov	r1, r9
 800f472:	4638      	mov	r0, r7
 800f474:	47c0      	blx	r8
 800f476:	3001      	adds	r0, #1
 800f478:	d01e      	beq.n	800f4b8 <_printf_common+0xa4>
 800f47a:	6823      	ldr	r3, [r4, #0]
 800f47c:	68e5      	ldr	r5, [r4, #12]
 800f47e:	6832      	ldr	r2, [r6, #0]
 800f480:	f003 0306 	and.w	r3, r3, #6
 800f484:	2b04      	cmp	r3, #4
 800f486:	bf08      	it	eq
 800f488:	1aad      	subeq	r5, r5, r2
 800f48a:	68a3      	ldr	r3, [r4, #8]
 800f48c:	6922      	ldr	r2, [r4, #16]
 800f48e:	bf0c      	ite	eq
 800f490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f494:	2500      	movne	r5, #0
 800f496:	4293      	cmp	r3, r2
 800f498:	bfc4      	itt	gt
 800f49a:	1a9b      	subgt	r3, r3, r2
 800f49c:	18ed      	addgt	r5, r5, r3
 800f49e:	2600      	movs	r6, #0
 800f4a0:	341a      	adds	r4, #26
 800f4a2:	42b5      	cmp	r5, r6
 800f4a4:	d11a      	bne.n	800f4dc <_printf_common+0xc8>
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	e008      	b.n	800f4bc <_printf_common+0xa8>
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	4652      	mov	r2, sl
 800f4ae:	4649      	mov	r1, r9
 800f4b0:	4638      	mov	r0, r7
 800f4b2:	47c0      	blx	r8
 800f4b4:	3001      	adds	r0, #1
 800f4b6:	d103      	bne.n	800f4c0 <_printf_common+0xac>
 800f4b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4c0:	3501      	adds	r5, #1
 800f4c2:	e7c6      	b.n	800f452 <_printf_common+0x3e>
 800f4c4:	18e1      	adds	r1, r4, r3
 800f4c6:	1c5a      	adds	r2, r3, #1
 800f4c8:	2030      	movs	r0, #48	; 0x30
 800f4ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4ce:	4422      	add	r2, r4
 800f4d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f4d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f4d8:	3302      	adds	r3, #2
 800f4da:	e7c7      	b.n	800f46c <_printf_common+0x58>
 800f4dc:	2301      	movs	r3, #1
 800f4de:	4622      	mov	r2, r4
 800f4e0:	4649      	mov	r1, r9
 800f4e2:	4638      	mov	r0, r7
 800f4e4:	47c0      	blx	r8
 800f4e6:	3001      	adds	r0, #1
 800f4e8:	d0e6      	beq.n	800f4b8 <_printf_common+0xa4>
 800f4ea:	3601      	adds	r6, #1
 800f4ec:	e7d9      	b.n	800f4a2 <_printf_common+0x8e>
	...

0800f4f0 <_printf_i>:
 800f4f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4f4:	7e0f      	ldrb	r7, [r1, #24]
 800f4f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4f8:	2f78      	cmp	r7, #120	; 0x78
 800f4fa:	4691      	mov	r9, r2
 800f4fc:	4680      	mov	r8, r0
 800f4fe:	460c      	mov	r4, r1
 800f500:	469a      	mov	sl, r3
 800f502:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f506:	d807      	bhi.n	800f518 <_printf_i+0x28>
 800f508:	2f62      	cmp	r7, #98	; 0x62
 800f50a:	d80a      	bhi.n	800f522 <_printf_i+0x32>
 800f50c:	2f00      	cmp	r7, #0
 800f50e:	f000 80d8 	beq.w	800f6c2 <_printf_i+0x1d2>
 800f512:	2f58      	cmp	r7, #88	; 0x58
 800f514:	f000 80a3 	beq.w	800f65e <_printf_i+0x16e>
 800f518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f51c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f520:	e03a      	b.n	800f598 <_printf_i+0xa8>
 800f522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f526:	2b15      	cmp	r3, #21
 800f528:	d8f6      	bhi.n	800f518 <_printf_i+0x28>
 800f52a:	a101      	add	r1, pc, #4	; (adr r1, 800f530 <_printf_i+0x40>)
 800f52c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f530:	0800f589 	.word	0x0800f589
 800f534:	0800f59d 	.word	0x0800f59d
 800f538:	0800f519 	.word	0x0800f519
 800f53c:	0800f519 	.word	0x0800f519
 800f540:	0800f519 	.word	0x0800f519
 800f544:	0800f519 	.word	0x0800f519
 800f548:	0800f59d 	.word	0x0800f59d
 800f54c:	0800f519 	.word	0x0800f519
 800f550:	0800f519 	.word	0x0800f519
 800f554:	0800f519 	.word	0x0800f519
 800f558:	0800f519 	.word	0x0800f519
 800f55c:	0800f6a9 	.word	0x0800f6a9
 800f560:	0800f5cd 	.word	0x0800f5cd
 800f564:	0800f68b 	.word	0x0800f68b
 800f568:	0800f519 	.word	0x0800f519
 800f56c:	0800f519 	.word	0x0800f519
 800f570:	0800f6cb 	.word	0x0800f6cb
 800f574:	0800f519 	.word	0x0800f519
 800f578:	0800f5cd 	.word	0x0800f5cd
 800f57c:	0800f519 	.word	0x0800f519
 800f580:	0800f519 	.word	0x0800f519
 800f584:	0800f693 	.word	0x0800f693
 800f588:	682b      	ldr	r3, [r5, #0]
 800f58a:	1d1a      	adds	r2, r3, #4
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	602a      	str	r2, [r5, #0]
 800f590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f598:	2301      	movs	r3, #1
 800f59a:	e0a3      	b.n	800f6e4 <_printf_i+0x1f4>
 800f59c:	6820      	ldr	r0, [r4, #0]
 800f59e:	6829      	ldr	r1, [r5, #0]
 800f5a0:	0606      	lsls	r6, r0, #24
 800f5a2:	f101 0304 	add.w	r3, r1, #4
 800f5a6:	d50a      	bpl.n	800f5be <_printf_i+0xce>
 800f5a8:	680e      	ldr	r6, [r1, #0]
 800f5aa:	602b      	str	r3, [r5, #0]
 800f5ac:	2e00      	cmp	r6, #0
 800f5ae:	da03      	bge.n	800f5b8 <_printf_i+0xc8>
 800f5b0:	232d      	movs	r3, #45	; 0x2d
 800f5b2:	4276      	negs	r6, r6
 800f5b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5b8:	485e      	ldr	r0, [pc, #376]	; (800f734 <_printf_i+0x244>)
 800f5ba:	230a      	movs	r3, #10
 800f5bc:	e019      	b.n	800f5f2 <_printf_i+0x102>
 800f5be:	680e      	ldr	r6, [r1, #0]
 800f5c0:	602b      	str	r3, [r5, #0]
 800f5c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f5c6:	bf18      	it	ne
 800f5c8:	b236      	sxthne	r6, r6
 800f5ca:	e7ef      	b.n	800f5ac <_printf_i+0xbc>
 800f5cc:	682b      	ldr	r3, [r5, #0]
 800f5ce:	6820      	ldr	r0, [r4, #0]
 800f5d0:	1d19      	adds	r1, r3, #4
 800f5d2:	6029      	str	r1, [r5, #0]
 800f5d4:	0601      	lsls	r1, r0, #24
 800f5d6:	d501      	bpl.n	800f5dc <_printf_i+0xec>
 800f5d8:	681e      	ldr	r6, [r3, #0]
 800f5da:	e002      	b.n	800f5e2 <_printf_i+0xf2>
 800f5dc:	0646      	lsls	r6, r0, #25
 800f5de:	d5fb      	bpl.n	800f5d8 <_printf_i+0xe8>
 800f5e0:	881e      	ldrh	r6, [r3, #0]
 800f5e2:	4854      	ldr	r0, [pc, #336]	; (800f734 <_printf_i+0x244>)
 800f5e4:	2f6f      	cmp	r7, #111	; 0x6f
 800f5e6:	bf0c      	ite	eq
 800f5e8:	2308      	moveq	r3, #8
 800f5ea:	230a      	movne	r3, #10
 800f5ec:	2100      	movs	r1, #0
 800f5ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5f2:	6865      	ldr	r5, [r4, #4]
 800f5f4:	60a5      	str	r5, [r4, #8]
 800f5f6:	2d00      	cmp	r5, #0
 800f5f8:	bfa2      	ittt	ge
 800f5fa:	6821      	ldrge	r1, [r4, #0]
 800f5fc:	f021 0104 	bicge.w	r1, r1, #4
 800f600:	6021      	strge	r1, [r4, #0]
 800f602:	b90e      	cbnz	r6, 800f608 <_printf_i+0x118>
 800f604:	2d00      	cmp	r5, #0
 800f606:	d04d      	beq.n	800f6a4 <_printf_i+0x1b4>
 800f608:	4615      	mov	r5, r2
 800f60a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f60e:	fb03 6711 	mls	r7, r3, r1, r6
 800f612:	5dc7      	ldrb	r7, [r0, r7]
 800f614:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f618:	4637      	mov	r7, r6
 800f61a:	42bb      	cmp	r3, r7
 800f61c:	460e      	mov	r6, r1
 800f61e:	d9f4      	bls.n	800f60a <_printf_i+0x11a>
 800f620:	2b08      	cmp	r3, #8
 800f622:	d10b      	bne.n	800f63c <_printf_i+0x14c>
 800f624:	6823      	ldr	r3, [r4, #0]
 800f626:	07de      	lsls	r6, r3, #31
 800f628:	d508      	bpl.n	800f63c <_printf_i+0x14c>
 800f62a:	6923      	ldr	r3, [r4, #16]
 800f62c:	6861      	ldr	r1, [r4, #4]
 800f62e:	4299      	cmp	r1, r3
 800f630:	bfde      	ittt	le
 800f632:	2330      	movle	r3, #48	; 0x30
 800f634:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f638:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f63c:	1b52      	subs	r2, r2, r5
 800f63e:	6122      	str	r2, [r4, #16]
 800f640:	f8cd a000 	str.w	sl, [sp]
 800f644:	464b      	mov	r3, r9
 800f646:	aa03      	add	r2, sp, #12
 800f648:	4621      	mov	r1, r4
 800f64a:	4640      	mov	r0, r8
 800f64c:	f7ff fee2 	bl	800f414 <_printf_common>
 800f650:	3001      	adds	r0, #1
 800f652:	d14c      	bne.n	800f6ee <_printf_i+0x1fe>
 800f654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f658:	b004      	add	sp, #16
 800f65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f65e:	4835      	ldr	r0, [pc, #212]	; (800f734 <_printf_i+0x244>)
 800f660:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f664:	6829      	ldr	r1, [r5, #0]
 800f666:	6823      	ldr	r3, [r4, #0]
 800f668:	f851 6b04 	ldr.w	r6, [r1], #4
 800f66c:	6029      	str	r1, [r5, #0]
 800f66e:	061d      	lsls	r5, r3, #24
 800f670:	d514      	bpl.n	800f69c <_printf_i+0x1ac>
 800f672:	07df      	lsls	r7, r3, #31
 800f674:	bf44      	itt	mi
 800f676:	f043 0320 	orrmi.w	r3, r3, #32
 800f67a:	6023      	strmi	r3, [r4, #0]
 800f67c:	b91e      	cbnz	r6, 800f686 <_printf_i+0x196>
 800f67e:	6823      	ldr	r3, [r4, #0]
 800f680:	f023 0320 	bic.w	r3, r3, #32
 800f684:	6023      	str	r3, [r4, #0]
 800f686:	2310      	movs	r3, #16
 800f688:	e7b0      	b.n	800f5ec <_printf_i+0xfc>
 800f68a:	6823      	ldr	r3, [r4, #0]
 800f68c:	f043 0320 	orr.w	r3, r3, #32
 800f690:	6023      	str	r3, [r4, #0]
 800f692:	2378      	movs	r3, #120	; 0x78
 800f694:	4828      	ldr	r0, [pc, #160]	; (800f738 <_printf_i+0x248>)
 800f696:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f69a:	e7e3      	b.n	800f664 <_printf_i+0x174>
 800f69c:	0659      	lsls	r1, r3, #25
 800f69e:	bf48      	it	mi
 800f6a0:	b2b6      	uxthmi	r6, r6
 800f6a2:	e7e6      	b.n	800f672 <_printf_i+0x182>
 800f6a4:	4615      	mov	r5, r2
 800f6a6:	e7bb      	b.n	800f620 <_printf_i+0x130>
 800f6a8:	682b      	ldr	r3, [r5, #0]
 800f6aa:	6826      	ldr	r6, [r4, #0]
 800f6ac:	6961      	ldr	r1, [r4, #20]
 800f6ae:	1d18      	adds	r0, r3, #4
 800f6b0:	6028      	str	r0, [r5, #0]
 800f6b2:	0635      	lsls	r5, r6, #24
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	d501      	bpl.n	800f6bc <_printf_i+0x1cc>
 800f6b8:	6019      	str	r1, [r3, #0]
 800f6ba:	e002      	b.n	800f6c2 <_printf_i+0x1d2>
 800f6bc:	0670      	lsls	r0, r6, #25
 800f6be:	d5fb      	bpl.n	800f6b8 <_printf_i+0x1c8>
 800f6c0:	8019      	strh	r1, [r3, #0]
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	6123      	str	r3, [r4, #16]
 800f6c6:	4615      	mov	r5, r2
 800f6c8:	e7ba      	b.n	800f640 <_printf_i+0x150>
 800f6ca:	682b      	ldr	r3, [r5, #0]
 800f6cc:	1d1a      	adds	r2, r3, #4
 800f6ce:	602a      	str	r2, [r5, #0]
 800f6d0:	681d      	ldr	r5, [r3, #0]
 800f6d2:	6862      	ldr	r2, [r4, #4]
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	f7f0 fd82 	bl	80001e0 <memchr>
 800f6dc:	b108      	cbz	r0, 800f6e2 <_printf_i+0x1f2>
 800f6de:	1b40      	subs	r0, r0, r5
 800f6e0:	6060      	str	r0, [r4, #4]
 800f6e2:	6863      	ldr	r3, [r4, #4]
 800f6e4:	6123      	str	r3, [r4, #16]
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6ec:	e7a8      	b.n	800f640 <_printf_i+0x150>
 800f6ee:	6923      	ldr	r3, [r4, #16]
 800f6f0:	462a      	mov	r2, r5
 800f6f2:	4649      	mov	r1, r9
 800f6f4:	4640      	mov	r0, r8
 800f6f6:	47d0      	blx	sl
 800f6f8:	3001      	adds	r0, #1
 800f6fa:	d0ab      	beq.n	800f654 <_printf_i+0x164>
 800f6fc:	6823      	ldr	r3, [r4, #0]
 800f6fe:	079b      	lsls	r3, r3, #30
 800f700:	d413      	bmi.n	800f72a <_printf_i+0x23a>
 800f702:	68e0      	ldr	r0, [r4, #12]
 800f704:	9b03      	ldr	r3, [sp, #12]
 800f706:	4298      	cmp	r0, r3
 800f708:	bfb8      	it	lt
 800f70a:	4618      	movlt	r0, r3
 800f70c:	e7a4      	b.n	800f658 <_printf_i+0x168>
 800f70e:	2301      	movs	r3, #1
 800f710:	4632      	mov	r2, r6
 800f712:	4649      	mov	r1, r9
 800f714:	4640      	mov	r0, r8
 800f716:	47d0      	blx	sl
 800f718:	3001      	adds	r0, #1
 800f71a:	d09b      	beq.n	800f654 <_printf_i+0x164>
 800f71c:	3501      	adds	r5, #1
 800f71e:	68e3      	ldr	r3, [r4, #12]
 800f720:	9903      	ldr	r1, [sp, #12]
 800f722:	1a5b      	subs	r3, r3, r1
 800f724:	42ab      	cmp	r3, r5
 800f726:	dcf2      	bgt.n	800f70e <_printf_i+0x21e>
 800f728:	e7eb      	b.n	800f702 <_printf_i+0x212>
 800f72a:	2500      	movs	r5, #0
 800f72c:	f104 0619 	add.w	r6, r4, #25
 800f730:	e7f5      	b.n	800f71e <_printf_i+0x22e>
 800f732:	bf00      	nop
 800f734:	0801dca9 	.word	0x0801dca9
 800f738:	0801dcba 	.word	0x0801dcba

0800f73c <memmove>:
 800f73c:	4288      	cmp	r0, r1
 800f73e:	b510      	push	{r4, lr}
 800f740:	eb01 0402 	add.w	r4, r1, r2
 800f744:	d902      	bls.n	800f74c <memmove+0x10>
 800f746:	4284      	cmp	r4, r0
 800f748:	4623      	mov	r3, r4
 800f74a:	d807      	bhi.n	800f75c <memmove+0x20>
 800f74c:	1e43      	subs	r3, r0, #1
 800f74e:	42a1      	cmp	r1, r4
 800f750:	d008      	beq.n	800f764 <memmove+0x28>
 800f752:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f75a:	e7f8      	b.n	800f74e <memmove+0x12>
 800f75c:	4402      	add	r2, r0
 800f75e:	4601      	mov	r1, r0
 800f760:	428a      	cmp	r2, r1
 800f762:	d100      	bne.n	800f766 <memmove+0x2a>
 800f764:	bd10      	pop	{r4, pc}
 800f766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f76a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f76e:	e7f7      	b.n	800f760 <memmove+0x24>

0800f770 <_realloc_r>:
 800f770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f774:	4680      	mov	r8, r0
 800f776:	4614      	mov	r4, r2
 800f778:	460e      	mov	r6, r1
 800f77a:	b921      	cbnz	r1, 800f786 <_realloc_r+0x16>
 800f77c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f780:	4611      	mov	r1, r2
 800f782:	f7ff bb85 	b.w	800ee90 <_malloc_r>
 800f786:	b92a      	cbnz	r2, 800f794 <_realloc_r+0x24>
 800f788:	f7ff fc9c 	bl	800f0c4 <_free_r>
 800f78c:	4625      	mov	r5, r4
 800f78e:	4628      	mov	r0, r5
 800f790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f794:	f000 f81b 	bl	800f7ce <_malloc_usable_size_r>
 800f798:	4284      	cmp	r4, r0
 800f79a:	4607      	mov	r7, r0
 800f79c:	d802      	bhi.n	800f7a4 <_realloc_r+0x34>
 800f79e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f7a2:	d812      	bhi.n	800f7ca <_realloc_r+0x5a>
 800f7a4:	4621      	mov	r1, r4
 800f7a6:	4640      	mov	r0, r8
 800f7a8:	f7ff fb72 	bl	800ee90 <_malloc_r>
 800f7ac:	4605      	mov	r5, r0
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	d0ed      	beq.n	800f78e <_realloc_r+0x1e>
 800f7b2:	42bc      	cmp	r4, r7
 800f7b4:	4622      	mov	r2, r4
 800f7b6:	4631      	mov	r1, r6
 800f7b8:	bf28      	it	cs
 800f7ba:	463a      	movcs	r2, r7
 800f7bc:	f7ff fb32 	bl	800ee24 <memcpy>
 800f7c0:	4631      	mov	r1, r6
 800f7c2:	4640      	mov	r0, r8
 800f7c4:	f7ff fc7e 	bl	800f0c4 <_free_r>
 800f7c8:	e7e1      	b.n	800f78e <_realloc_r+0x1e>
 800f7ca:	4635      	mov	r5, r6
 800f7cc:	e7df      	b.n	800f78e <_realloc_r+0x1e>

0800f7ce <_malloc_usable_size_r>:
 800f7ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7d2:	1f18      	subs	r0, r3, #4
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	bfbc      	itt	lt
 800f7d8:	580b      	ldrlt	r3, [r1, r0]
 800f7da:	18c0      	addlt	r0, r0, r3
 800f7dc:	4770      	bx	lr
	...

0800f7e0 <sin>:
 800f7e0:	ec51 0b10 	vmov	r0, r1, d0
 800f7e4:	4a20      	ldr	r2, [pc, #128]	; (800f868 <sin+0x88>)
 800f7e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	dd27      	ble.n	800f83e <sin+0x5e>
 800f7ee:	b500      	push	{lr}
 800f7f0:	4a1e      	ldr	r2, [pc, #120]	; (800f86c <sin+0x8c>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	b085      	sub	sp, #20
 800f7f6:	dd09      	ble.n	800f80c <sin+0x2c>
 800f7f8:	ee10 2a10 	vmov	r2, s0
 800f7fc:	460b      	mov	r3, r1
 800f7fe:	f7f0 fd43 	bl	8000288 <__aeabi_dsub>
 800f802:	ec41 0b10 	vmov	d0, r0, r1
 800f806:	b005      	add	sp, #20
 800f808:	f85d fb04 	ldr.w	pc, [sp], #4
 800f80c:	4668      	mov	r0, sp
 800f80e:	f000 f82f 	bl	800f870 <__ieee754_rem_pio2>
 800f812:	f000 0003 	and.w	r0, r0, #3
 800f816:	2801      	cmp	r0, #1
 800f818:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f81c:	ed9d 0b00 	vldr	d0, [sp]
 800f820:	d012      	beq.n	800f848 <sin+0x68>
 800f822:	2802      	cmp	r0, #2
 800f824:	d017      	beq.n	800f856 <sin+0x76>
 800f826:	b190      	cbz	r0, 800f84e <sin+0x6e>
 800f828:	f000 fa4a 	bl	800fcc0 <__kernel_cos>
 800f82c:	ec53 2b10 	vmov	r2, r3, d0
 800f830:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f834:	ee00 3a90 	vmov	s1, r3
 800f838:	b005      	add	sp, #20
 800f83a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f83e:	ed9f 1b08 	vldr	d1, [pc, #32]	; 800f860 <sin+0x80>
 800f842:	2000      	movs	r0, #0
 800f844:	f000 bfa4 	b.w	8010790 <__kernel_sin>
 800f848:	f000 fa3a 	bl	800fcc0 <__kernel_cos>
 800f84c:	e7db      	b.n	800f806 <sin+0x26>
 800f84e:	2001      	movs	r0, #1
 800f850:	f000 ff9e 	bl	8010790 <__kernel_sin>
 800f854:	e7d7      	b.n	800f806 <sin+0x26>
 800f856:	2001      	movs	r0, #1
 800f858:	f000 ff9a 	bl	8010790 <__kernel_sin>
 800f85c:	e7e6      	b.n	800f82c <sin+0x4c>
 800f85e:	bf00      	nop
	...
 800f868:	3fe921fb 	.word	0x3fe921fb
 800f86c:	7fefffff 	.word	0x7fefffff

0800f870 <__ieee754_rem_pio2>:
 800f870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f874:	ec53 2b10 	vmov	r2, r3, d0
 800f878:	ed2d 8b04 	vpush	{d8-d9}
 800f87c:	4990      	ldr	r1, [pc, #576]	; (800fac0 <__ieee754_rem_pio2+0x250>)
 800f87e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800f882:	428d      	cmp	r5, r1
 800f884:	b08b      	sub	sp, #44	; 0x2c
 800f886:	4604      	mov	r4, r0
 800f888:	f340 808c 	ble.w	800f9a4 <__ieee754_rem_pio2+0x134>
 800f88c:	498d      	ldr	r1, [pc, #564]	; (800fac4 <__ieee754_rem_pio2+0x254>)
 800f88e:	428d      	cmp	r5, r1
 800f890:	461f      	mov	r7, r3
 800f892:	dc2b      	bgt.n	800f8ec <__ieee754_rem_pio2+0x7c>
 800f894:	2f00      	cmp	r7, #0
 800f896:	4619      	mov	r1, r3
 800f898:	ee10 0a10 	vmov	r0, s0
 800f89c:	a37e      	add	r3, pc, #504	; (adr r3, 800fa98 <__ieee754_rem_pio2+0x228>)
 800f89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a2:	f340 81b6 	ble.w	800fc12 <__ieee754_rem_pio2+0x3a2>
 800f8a6:	f7f0 fcef 	bl	8000288 <__aeabi_dsub>
 800f8aa:	4b87      	ldr	r3, [pc, #540]	; (800fac8 <__ieee754_rem_pio2+0x258>)
 800f8ac:	429d      	cmp	r5, r3
 800f8ae:	4680      	mov	r8, r0
 800f8b0:	4689      	mov	r9, r1
 800f8b2:	f000 808f 	beq.w	800f9d4 <__ieee754_rem_pio2+0x164>
 800f8b6:	a37a      	add	r3, pc, #488	; (adr r3, 800faa0 <__ieee754_rem_pio2+0x230>)
 800f8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8bc:	f7f0 fce4 	bl	8000288 <__aeabi_dsub>
 800f8c0:	4602      	mov	r2, r0
 800f8c2:	460b      	mov	r3, r1
 800f8c4:	e9c4 2300 	strd	r2, r3, [r4]
 800f8c8:	4640      	mov	r0, r8
 800f8ca:	4649      	mov	r1, r9
 800f8cc:	f7f0 fcdc 	bl	8000288 <__aeabi_dsub>
 800f8d0:	a373      	add	r3, pc, #460	; (adr r3, 800faa0 <__ieee754_rem_pio2+0x230>)
 800f8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d6:	f7f0 fcd7 	bl	8000288 <__aeabi_dsub>
 800f8da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f8de:	2601      	movs	r6, #1
 800f8e0:	4630      	mov	r0, r6
 800f8e2:	b00b      	add	sp, #44	; 0x2c
 800f8e4:	ecbd 8b04 	vpop	{d8-d9}
 800f8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ec:	4977      	ldr	r1, [pc, #476]	; (800facc <__ieee754_rem_pio2+0x25c>)
 800f8ee:	428d      	cmp	r5, r1
 800f8f0:	f340 8092 	ble.w	800fa18 <__ieee754_rem_pio2+0x1a8>
 800f8f4:	4976      	ldr	r1, [pc, #472]	; (800fad0 <__ieee754_rem_pio2+0x260>)
 800f8f6:	428d      	cmp	r5, r1
 800f8f8:	dc61      	bgt.n	800f9be <__ieee754_rem_pio2+0x14e>
 800f8fa:	152e      	asrs	r6, r5, #20
 800f8fc:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800f900:	ee10 0a10 	vmov	r0, s0
 800f904:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 800f908:	4690      	mov	r8, r2
 800f90a:	4689      	mov	r9, r1
 800f90c:	f7f1 f90e 	bl	8000b2c <__aeabi_d2iz>
 800f910:	f7f0 fe08 	bl	8000524 <__aeabi_i2d>
 800f914:	4602      	mov	r2, r0
 800f916:	460b      	mov	r3, r1
 800f918:	4640      	mov	r0, r8
 800f91a:	4649      	mov	r1, r9
 800f91c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f920:	f7f0 fcb2 	bl	8000288 <__aeabi_dsub>
 800f924:	4b6b      	ldr	r3, [pc, #428]	; (800fad4 <__ieee754_rem_pio2+0x264>)
 800f926:	2200      	movs	r2, #0
 800f928:	f7f0 fe66 	bl	80005f8 <__aeabi_dmul>
 800f92c:	4689      	mov	r9, r1
 800f92e:	4680      	mov	r8, r0
 800f930:	f7f1 f8fc 	bl	8000b2c <__aeabi_d2iz>
 800f934:	4605      	mov	r5, r0
 800f936:	f7f0 fdf5 	bl	8000524 <__aeabi_i2d>
 800f93a:	4602      	mov	r2, r0
 800f93c:	460b      	mov	r3, r1
 800f93e:	4640      	mov	r0, r8
 800f940:	4649      	mov	r1, r9
 800f942:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f946:	f7f0 fc9f 	bl	8000288 <__aeabi_dsub>
 800f94a:	4b62      	ldr	r3, [pc, #392]	; (800fad4 <__ieee754_rem_pio2+0x264>)
 800f94c:	2200      	movs	r2, #0
 800f94e:	f7f0 fe53 	bl	80005f8 <__aeabi_dmul>
 800f952:	4602      	mov	r2, r0
 800f954:	460b      	mov	r3, r1
 800f956:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f95a:	2200      	movs	r2, #0
 800f95c:	2300      	movs	r3, #0
 800f95e:	f7f1 f8b3 	bl	8000ac8 <__aeabi_dcmpeq>
 800f962:	2800      	cmp	r0, #0
 800f964:	f000 8153 	beq.w	800fc0e <__ieee754_rem_pio2+0x39e>
 800f968:	2d00      	cmp	r5, #0
 800f96a:	bf0c      	ite	eq
 800f96c:	2301      	moveq	r3, #1
 800f96e:	2302      	movne	r3, #2
 800f970:	4a59      	ldr	r2, [pc, #356]	; (800fad8 <__ieee754_rem_pio2+0x268>)
 800f972:	9201      	str	r2, [sp, #4]
 800f974:	2202      	movs	r2, #2
 800f976:	9200      	str	r2, [sp, #0]
 800f978:	4621      	mov	r1, r4
 800f97a:	4632      	mov	r2, r6
 800f97c:	a804      	add	r0, sp, #16
 800f97e:	f000 fadf 	bl	800ff40 <__kernel_rem_pio2>
 800f982:	2f00      	cmp	r7, #0
 800f984:	4606      	mov	r6, r0
 800f986:	daab      	bge.n	800f8e0 <__ieee754_rem_pio2+0x70>
 800f988:	6861      	ldr	r1, [r4, #4]
 800f98a:	6822      	ldr	r2, [r4, #0]
 800f98c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f990:	68e1      	ldr	r1, [r4, #12]
 800f992:	e9c4 2300 	strd	r2, r3, [r4]
 800f996:	68a2      	ldr	r2, [r4, #8]
 800f998:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f99c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f9a0:	4246      	negs	r6, r0
 800f9a2:	e79d      	b.n	800f8e0 <__ieee754_rem_pio2+0x70>
 800f9a4:	2000      	movs	r0, #0
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	2600      	movs	r6, #0
 800f9aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f9ae:	4630      	mov	r0, r6
 800f9b0:	ed84 0b00 	vstr	d0, [r4]
 800f9b4:	b00b      	add	sp, #44	; 0x2c
 800f9b6:	ecbd 8b04 	vpop	{d8-d9}
 800f9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9be:	ee10 0a10 	vmov	r0, s0
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	f7f0 fc60 	bl	8000288 <__aeabi_dsub>
 800f9c8:	2600      	movs	r6, #0
 800f9ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f9ce:	e9c4 0100 	strd	r0, r1, [r4]
 800f9d2:	e785      	b.n	800f8e0 <__ieee754_rem_pio2+0x70>
 800f9d4:	a334      	add	r3, pc, #208	; (adr r3, 800faa8 <__ieee754_rem_pio2+0x238>)
 800f9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9da:	f7f0 fc55 	bl	8000288 <__aeabi_dsub>
 800f9de:	a334      	add	r3, pc, #208	; (adr r3, 800fab0 <__ieee754_rem_pio2+0x240>)
 800f9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e4:	4680      	mov	r8, r0
 800f9e6:	4689      	mov	r9, r1
 800f9e8:	f7f0 fc4e 	bl	8000288 <__aeabi_dsub>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	460b      	mov	r3, r1
 800f9f0:	e9c4 2300 	strd	r2, r3, [r4]
 800f9f4:	4640      	mov	r0, r8
 800f9f6:	4649      	mov	r1, r9
 800f9f8:	f7f0 fc46 	bl	8000288 <__aeabi_dsub>
 800f9fc:	a32c      	add	r3, pc, #176	; (adr r3, 800fab0 <__ieee754_rem_pio2+0x240>)
 800f9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa02:	f7f0 fc41 	bl	8000288 <__aeabi_dsub>
 800fa06:	2601      	movs	r6, #1
 800fa08:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	b00b      	add	sp, #44	; 0x2c
 800fa10:	ecbd 8b04 	vpop	{d8-d9}
 800fa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa18:	f000 ff78 	bl	801090c <fabs>
 800fa1c:	ec59 8b10 	vmov	r8, r9, d0
 800fa20:	ee10 0a10 	vmov	r0, s0
 800fa24:	a324      	add	r3, pc, #144	; (adr r3, 800fab8 <__ieee754_rem_pio2+0x248>)
 800fa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2a:	4649      	mov	r1, r9
 800fa2c:	f7f0 fde4 	bl	80005f8 <__aeabi_dmul>
 800fa30:	4b2a      	ldr	r3, [pc, #168]	; (800fadc <__ieee754_rem_pio2+0x26c>)
 800fa32:	2200      	movs	r2, #0
 800fa34:	f7f0 fc2a 	bl	800028c <__adddf3>
 800fa38:	f7f1 f878 	bl	8000b2c <__aeabi_d2iz>
 800fa3c:	4606      	mov	r6, r0
 800fa3e:	f7f0 fd71 	bl	8000524 <__aeabi_i2d>
 800fa42:	4602      	mov	r2, r0
 800fa44:	460b      	mov	r3, r1
 800fa46:	ec43 2b18 	vmov	d8, r2, r3
 800fa4a:	a313      	add	r3, pc, #76	; (adr r3, 800fa98 <__ieee754_rem_pio2+0x228>)
 800fa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa50:	eeb0 9a48 	vmov.f32	s18, s16
 800fa54:	eef0 9a68 	vmov.f32	s19, s17
 800fa58:	f7f0 fdce 	bl	80005f8 <__aeabi_dmul>
 800fa5c:	4602      	mov	r2, r0
 800fa5e:	460b      	mov	r3, r1
 800fa60:	4640      	mov	r0, r8
 800fa62:	4649      	mov	r1, r9
 800fa64:	f7f0 fc10 	bl	8000288 <__aeabi_dsub>
 800fa68:	a30d      	add	r3, pc, #52	; (adr r3, 800faa0 <__ieee754_rem_pio2+0x230>)
 800fa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6e:	4682      	mov	sl, r0
 800fa70:	468b      	mov	fp, r1
 800fa72:	ec51 0b18 	vmov	r0, r1, d8
 800fa76:	f7f0 fdbf 	bl	80005f8 <__aeabi_dmul>
 800fa7a:	2e1f      	cmp	r6, #31
 800fa7c:	ec41 0b18 	vmov	d8, r0, r1
 800fa80:	dc30      	bgt.n	800fae4 <__ieee754_rem_pio2+0x274>
 800fa82:	4b17      	ldr	r3, [pc, #92]	; (800fae0 <__ieee754_rem_pio2+0x270>)
 800fa84:	1e72      	subs	r2, r6, #1
 800fa86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa8a:	42ab      	cmp	r3, r5
 800fa8c:	d02a      	beq.n	800fae4 <__ieee754_rem_pio2+0x274>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	460b      	mov	r3, r1
 800fa92:	e09b      	b.n	800fbcc <__ieee754_rem_pio2+0x35c>
 800fa94:	f3af 8000 	nop.w
 800fa98:	54400000 	.word	0x54400000
 800fa9c:	3ff921fb 	.word	0x3ff921fb
 800faa0:	1a626331 	.word	0x1a626331
 800faa4:	3dd0b461 	.word	0x3dd0b461
 800faa8:	1a600000 	.word	0x1a600000
 800faac:	3dd0b461 	.word	0x3dd0b461
 800fab0:	2e037073 	.word	0x2e037073
 800fab4:	3ba3198a 	.word	0x3ba3198a
 800fab8:	6dc9c883 	.word	0x6dc9c883
 800fabc:	3fe45f30 	.word	0x3fe45f30
 800fac0:	3fe921fb 	.word	0x3fe921fb
 800fac4:	4002d97b 	.word	0x4002d97b
 800fac8:	3ff921fb 	.word	0x3ff921fb
 800facc:	413921fb 	.word	0x413921fb
 800fad0:	7fefffff 	.word	0x7fefffff
 800fad4:	41700000 	.word	0x41700000
 800fad8:	0801dd4c 	.word	0x0801dd4c
 800fadc:	3fe00000 	.word	0x3fe00000
 800fae0:	0801dccc 	.word	0x0801dccc
 800fae4:	152b      	asrs	r3, r5, #20
 800fae6:	9303      	str	r3, [sp, #12]
 800fae8:	4650      	mov	r0, sl
 800faea:	ec53 2b18 	vmov	r2, r3, d8
 800faee:	4659      	mov	r1, fp
 800faf0:	f7f0 fbca 	bl	8000288 <__aeabi_dsub>
 800faf4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800faf8:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 800fafc:	2d10      	cmp	r5, #16
 800fafe:	4680      	mov	r8, r0
 800fb00:	4689      	mov	r9, r1
 800fb02:	dd69      	ble.n	800fbd8 <__ieee754_rem_pio2+0x368>
 800fb04:	a364      	add	r3, pc, #400	; (adr r3, 800fc98 <__ieee754_rem_pio2+0x428>)
 800fb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0a:	ec51 0b19 	vmov	r0, r1, d9
 800fb0e:	f7f0 fd73 	bl	80005f8 <__aeabi_dmul>
 800fb12:	4680      	mov	r8, r0
 800fb14:	4689      	mov	r9, r1
 800fb16:	4642      	mov	r2, r8
 800fb18:	464b      	mov	r3, r9
 800fb1a:	4650      	mov	r0, sl
 800fb1c:	4659      	mov	r1, fp
 800fb1e:	f7f0 fbb3 	bl	8000288 <__aeabi_dsub>
 800fb22:	4602      	mov	r2, r0
 800fb24:	460b      	mov	r3, r1
 800fb26:	4650      	mov	r0, sl
 800fb28:	4659      	mov	r1, fp
 800fb2a:	4692      	mov	sl, r2
 800fb2c:	469b      	mov	fp, r3
 800fb2e:	f7f0 fbab 	bl	8000288 <__aeabi_dsub>
 800fb32:	4642      	mov	r2, r8
 800fb34:	464b      	mov	r3, r9
 800fb36:	f7f0 fba7 	bl	8000288 <__aeabi_dsub>
 800fb3a:	a359      	add	r3, pc, #356	; (adr r3, 800fca0 <__ieee754_rem_pio2+0x430>)
 800fb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb40:	4680      	mov	r8, r0
 800fb42:	4689      	mov	r9, r1
 800fb44:	ec51 0b19 	vmov	r0, r1, d9
 800fb48:	f7f0 fd56 	bl	80005f8 <__aeabi_dmul>
 800fb4c:	4642      	mov	r2, r8
 800fb4e:	464b      	mov	r3, r9
 800fb50:	f7f0 fb9a 	bl	8000288 <__aeabi_dsub>
 800fb54:	4602      	mov	r2, r0
 800fb56:	460b      	mov	r3, r1
 800fb58:	4650      	mov	r0, sl
 800fb5a:	4659      	mov	r1, fp
 800fb5c:	ec43 2b18 	vmov	d8, r2, r3
 800fb60:	f7f0 fb92 	bl	8000288 <__aeabi_dsub>
 800fb64:	9a03      	ldr	r2, [sp, #12]
 800fb66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fb6a:	1ad3      	subs	r3, r2, r3
 800fb6c:	2b31      	cmp	r3, #49	; 0x31
 800fb6e:	4680      	mov	r8, r0
 800fb70:	4689      	mov	r9, r1
 800fb72:	dd31      	ble.n	800fbd8 <__ieee754_rem_pio2+0x368>
 800fb74:	a34d      	add	r3, pc, #308	; (adr r3, 800fcac <__ieee754_rem_pio2+0x43c>)
 800fb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7a:	ec51 0b19 	vmov	r0, r1, d9
 800fb7e:	f7f0 fd3b 	bl	80005f8 <__aeabi_dmul>
 800fb82:	4680      	mov	r8, r0
 800fb84:	4689      	mov	r9, r1
 800fb86:	4642      	mov	r2, r8
 800fb88:	464b      	mov	r3, r9
 800fb8a:	4650      	mov	r0, sl
 800fb8c:	4659      	mov	r1, fp
 800fb8e:	f7f0 fb7b 	bl	8000288 <__aeabi_dsub>
 800fb92:	4602      	mov	r2, r0
 800fb94:	460b      	mov	r3, r1
 800fb96:	4650      	mov	r0, sl
 800fb98:	4659      	mov	r1, fp
 800fb9a:	4692      	mov	sl, r2
 800fb9c:	469b      	mov	fp, r3
 800fb9e:	f7f0 fb73 	bl	8000288 <__aeabi_dsub>
 800fba2:	4642      	mov	r2, r8
 800fba4:	464b      	mov	r3, r9
 800fba6:	f7f0 fb6f 	bl	8000288 <__aeabi_dsub>
 800fbaa:	a342      	add	r3, pc, #264	; (adr r3, 800fcb4 <__ieee754_rem_pio2+0x444>)
 800fbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb0:	4680      	mov	r8, r0
 800fbb2:	4689      	mov	r9, r1
 800fbb4:	ec51 0b19 	vmov	r0, r1, d9
 800fbb8:	f7f0 fd1e 	bl	80005f8 <__aeabi_dmul>
 800fbbc:	4642      	mov	r2, r8
 800fbbe:	464b      	mov	r3, r9
 800fbc0:	f7f0 fb62 	bl	8000288 <__aeabi_dsub>
 800fbc4:	4602      	mov	r2, r0
 800fbc6:	460b      	mov	r3, r1
 800fbc8:	ec43 2b18 	vmov	d8, r2, r3
 800fbcc:	4650      	mov	r0, sl
 800fbce:	4659      	mov	r1, fp
 800fbd0:	f7f0 fb5a 	bl	8000288 <__aeabi_dsub>
 800fbd4:	4680      	mov	r8, r0
 800fbd6:	4689      	mov	r9, r1
 800fbd8:	4642      	mov	r2, r8
 800fbda:	464b      	mov	r3, r9
 800fbdc:	e9c4 8900 	strd	r8, r9, [r4]
 800fbe0:	4650      	mov	r0, sl
 800fbe2:	4659      	mov	r1, fp
 800fbe4:	f7f0 fb50 	bl	8000288 <__aeabi_dsub>
 800fbe8:	ec53 2b18 	vmov	r2, r3, d8
 800fbec:	f7f0 fb4c 	bl	8000288 <__aeabi_dsub>
 800fbf0:	2f00      	cmp	r7, #0
 800fbf2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fbf6:	f6bf ae73 	bge.w	800f8e0 <__ieee754_rem_pio2+0x70>
 800fbfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fbfe:	e9c4 8300 	strd	r8, r3, [r4]
 800fc02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc06:	e9c4 0302 	strd	r0, r3, [r4, #8]
 800fc0a:	4276      	negs	r6, r6
 800fc0c:	e668      	b.n	800f8e0 <__ieee754_rem_pio2+0x70>
 800fc0e:	2303      	movs	r3, #3
 800fc10:	e6ae      	b.n	800f970 <__ieee754_rem_pio2+0x100>
 800fc12:	f7f0 fb3b 	bl	800028c <__adddf3>
 800fc16:	4b24      	ldr	r3, [pc, #144]	; (800fca8 <__ieee754_rem_pio2+0x438>)
 800fc18:	429d      	cmp	r5, r3
 800fc1a:	4680      	mov	r8, r0
 800fc1c:	4689      	mov	r9, r1
 800fc1e:	d016      	beq.n	800fc4e <__ieee754_rem_pio2+0x3de>
 800fc20:	a31b      	add	r3, pc, #108	; (adr r3, 800fc90 <__ieee754_rem_pio2+0x420>)
 800fc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc26:	f7f0 fb31 	bl	800028c <__adddf3>
 800fc2a:	4602      	mov	r2, r0
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	e9c4 2300 	strd	r2, r3, [r4]
 800fc32:	4640      	mov	r0, r8
 800fc34:	4649      	mov	r1, r9
 800fc36:	f7f0 fb27 	bl	8000288 <__aeabi_dsub>
 800fc3a:	a315      	add	r3, pc, #84	; (adr r3, 800fc90 <__ieee754_rem_pio2+0x420>)
 800fc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc40:	f7f0 fb24 	bl	800028c <__adddf3>
 800fc44:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800fc48:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fc4c:	e648      	b.n	800f8e0 <__ieee754_rem_pio2+0x70>
 800fc4e:	a312      	add	r3, pc, #72	; (adr r3, 800fc98 <__ieee754_rem_pio2+0x428>)
 800fc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc54:	f7f0 fb1a 	bl	800028c <__adddf3>
 800fc58:	a311      	add	r3, pc, #68	; (adr r3, 800fca0 <__ieee754_rem_pio2+0x430>)
 800fc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5e:	4680      	mov	r8, r0
 800fc60:	4689      	mov	r9, r1
 800fc62:	f7f0 fb13 	bl	800028c <__adddf3>
 800fc66:	4602      	mov	r2, r0
 800fc68:	460b      	mov	r3, r1
 800fc6a:	e9c4 2300 	strd	r2, r3, [r4]
 800fc6e:	4640      	mov	r0, r8
 800fc70:	4649      	mov	r1, r9
 800fc72:	f7f0 fb09 	bl	8000288 <__aeabi_dsub>
 800fc76:	a30a      	add	r3, pc, #40	; (adr r3, 800fca0 <__ieee754_rem_pio2+0x430>)
 800fc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7c:	f7f0 fb06 	bl	800028c <__adddf3>
 800fc80:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800fc84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fc88:	e62a      	b.n	800f8e0 <__ieee754_rem_pio2+0x70>
 800fc8a:	bf00      	nop
 800fc8c:	f3af 8000 	nop.w
 800fc90:	1a626331 	.word	0x1a626331
 800fc94:	3dd0b461 	.word	0x3dd0b461
 800fc98:	1a600000 	.word	0x1a600000
 800fc9c:	3dd0b461 	.word	0x3dd0b461
 800fca0:	2e037073 	.word	0x2e037073
 800fca4:	3ba3198a 	.word	0x3ba3198a
 800fca8:	3ff921fb 	.word	0x3ff921fb
 800fcac:	2e000000 	.word	0x2e000000
 800fcb0:	3ba3198a 	.word	0x3ba3198a
 800fcb4:	252049c1 	.word	0x252049c1
 800fcb8:	397b839a 	.word	0x397b839a
 800fcbc:	00000000 	.word	0x00000000

0800fcc0 <__kernel_cos>:
 800fcc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc4:	ec57 6b10 	vmov	r6, r7, d0
 800fcc8:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 800fccc:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 800fcd0:	ed2d 8b04 	vpush	{d8-d9}
 800fcd4:	ec5b ab11 	vmov	sl, fp, d1
 800fcd8:	da71      	bge.n	800fdbe <__kernel_cos+0xfe>
 800fcda:	ee10 0a10 	vmov	r0, s0
 800fcde:	4639      	mov	r1, r7
 800fce0:	f7f0 ff24 	bl	8000b2c <__aeabi_d2iz>
 800fce4:	2800      	cmp	r0, #0
 800fce6:	f000 80f6 	beq.w	800fed6 <__kernel_cos+0x216>
 800fcea:	4632      	mov	r2, r6
 800fcec:	463b      	mov	r3, r7
 800fcee:	4630      	mov	r0, r6
 800fcf0:	4639      	mov	r1, r7
 800fcf2:	f7f0 fc81 	bl	80005f8 <__aeabi_dmul>
 800fcf6:	a37c      	add	r3, pc, #496	; (adr r3, 800fee8 <__kernel_cos+0x228>)
 800fcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	460d      	mov	r5, r1
 800fd00:	f7f0 fc7a 	bl	80005f8 <__aeabi_dmul>
 800fd04:	a37a      	add	r3, pc, #488	; (adr r3, 800fef0 <__kernel_cos+0x230>)
 800fd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0a:	f7f0 fabf 	bl	800028c <__adddf3>
 800fd0e:	4622      	mov	r2, r4
 800fd10:	462b      	mov	r3, r5
 800fd12:	f7f0 fc71 	bl	80005f8 <__aeabi_dmul>
 800fd16:	a378      	add	r3, pc, #480	; (adr r3, 800fef8 <__kernel_cos+0x238>)
 800fd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1c:	f7f0 fab4 	bl	8000288 <__aeabi_dsub>
 800fd20:	4622      	mov	r2, r4
 800fd22:	462b      	mov	r3, r5
 800fd24:	f7f0 fc68 	bl	80005f8 <__aeabi_dmul>
 800fd28:	a375      	add	r3, pc, #468	; (adr r3, 800ff00 <__kernel_cos+0x240>)
 800fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2e:	f7f0 faad 	bl	800028c <__adddf3>
 800fd32:	4622      	mov	r2, r4
 800fd34:	462b      	mov	r3, r5
 800fd36:	f7f0 fc5f 	bl	80005f8 <__aeabi_dmul>
 800fd3a:	a373      	add	r3, pc, #460	; (adr r3, 800ff08 <__kernel_cos+0x248>)
 800fd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd40:	f7f0 faa2 	bl	8000288 <__aeabi_dsub>
 800fd44:	4622      	mov	r2, r4
 800fd46:	462b      	mov	r3, r5
 800fd48:	f7f0 fc56 	bl	80005f8 <__aeabi_dmul>
 800fd4c:	a370      	add	r3, pc, #448	; (adr r3, 800ff10 <__kernel_cos+0x250>)
 800fd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd52:	f7f0 fa9b 	bl	800028c <__adddf3>
 800fd56:	4622      	mov	r2, r4
 800fd58:	462b      	mov	r3, r5
 800fd5a:	f7f0 fc4d 	bl	80005f8 <__aeabi_dmul>
 800fd5e:	ec41 0b18 	vmov	d8, r0, r1
 800fd62:	4b71      	ldr	r3, [pc, #452]	; (800ff28 <__kernel_cos+0x268>)
 800fd64:	2200      	movs	r2, #0
 800fd66:	4620      	mov	r0, r4
 800fd68:	4629      	mov	r1, r5
 800fd6a:	f7f0 fc45 	bl	80005f8 <__aeabi_dmul>
 800fd6e:	ec53 2b18 	vmov	r2, r3, d8
 800fd72:	4680      	mov	r8, r0
 800fd74:	4689      	mov	r9, r1
 800fd76:	4620      	mov	r0, r4
 800fd78:	4629      	mov	r1, r5
 800fd7a:	f7f0 fc3d 	bl	80005f8 <__aeabi_dmul>
 800fd7e:	4652      	mov	r2, sl
 800fd80:	465b      	mov	r3, fp
 800fd82:	4604      	mov	r4, r0
 800fd84:	460d      	mov	r5, r1
 800fd86:	4630      	mov	r0, r6
 800fd88:	4639      	mov	r1, r7
 800fd8a:	f7f0 fc35 	bl	80005f8 <__aeabi_dmul>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	460b      	mov	r3, r1
 800fd92:	4620      	mov	r0, r4
 800fd94:	4629      	mov	r1, r5
 800fd96:	f7f0 fa77 	bl	8000288 <__aeabi_dsub>
 800fd9a:	4602      	mov	r2, r0
 800fd9c:	460b      	mov	r3, r1
 800fd9e:	4640      	mov	r0, r8
 800fda0:	4649      	mov	r1, r9
 800fda2:	f7f0 fa71 	bl	8000288 <__aeabi_dsub>
 800fda6:	4602      	mov	r2, r0
 800fda8:	460b      	mov	r3, r1
 800fdaa:	2000      	movs	r0, #0
 800fdac:	495f      	ldr	r1, [pc, #380]	; (800ff2c <__kernel_cos+0x26c>)
 800fdae:	f7f0 fa6b 	bl	8000288 <__aeabi_dsub>
 800fdb2:	ecbd 8b04 	vpop	{d8-d9}
 800fdb6:	ec41 0b10 	vmov	d0, r0, r1
 800fdba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdbe:	ee10 2a10 	vmov	r2, s0
 800fdc2:	ee10 0a10 	vmov	r0, s0
 800fdc6:	463b      	mov	r3, r7
 800fdc8:	4639      	mov	r1, r7
 800fdca:	f7f0 fc15 	bl	80005f8 <__aeabi_dmul>
 800fdce:	a346      	add	r3, pc, #280	; (adr r3, 800fee8 <__kernel_cos+0x228>)
 800fdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd4:	4604      	mov	r4, r0
 800fdd6:	460d      	mov	r5, r1
 800fdd8:	f7f0 fc0e 	bl	80005f8 <__aeabi_dmul>
 800fddc:	a344      	add	r3, pc, #272	; (adr r3, 800fef0 <__kernel_cos+0x230>)
 800fdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde2:	f7f0 fa53 	bl	800028c <__adddf3>
 800fde6:	4622      	mov	r2, r4
 800fde8:	462b      	mov	r3, r5
 800fdea:	f7f0 fc05 	bl	80005f8 <__aeabi_dmul>
 800fdee:	a342      	add	r3, pc, #264	; (adr r3, 800fef8 <__kernel_cos+0x238>)
 800fdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf4:	f7f0 fa48 	bl	8000288 <__aeabi_dsub>
 800fdf8:	4622      	mov	r2, r4
 800fdfa:	462b      	mov	r3, r5
 800fdfc:	f7f0 fbfc 	bl	80005f8 <__aeabi_dmul>
 800fe00:	a33f      	add	r3, pc, #252	; (adr r3, 800ff00 <__kernel_cos+0x240>)
 800fe02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe06:	f7f0 fa41 	bl	800028c <__adddf3>
 800fe0a:	4622      	mov	r2, r4
 800fe0c:	462b      	mov	r3, r5
 800fe0e:	f7f0 fbf3 	bl	80005f8 <__aeabi_dmul>
 800fe12:	a33d      	add	r3, pc, #244	; (adr r3, 800ff08 <__kernel_cos+0x248>)
 800fe14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe18:	f7f0 fa36 	bl	8000288 <__aeabi_dsub>
 800fe1c:	4622      	mov	r2, r4
 800fe1e:	462b      	mov	r3, r5
 800fe20:	f7f0 fbea 	bl	80005f8 <__aeabi_dmul>
 800fe24:	a33a      	add	r3, pc, #232	; (adr r3, 800ff10 <__kernel_cos+0x250>)
 800fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2a:	f7f0 fa2f 	bl	800028c <__adddf3>
 800fe2e:	462b      	mov	r3, r5
 800fe30:	4622      	mov	r2, r4
 800fe32:	f7f0 fbe1 	bl	80005f8 <__aeabi_dmul>
 800fe36:	4b3e      	ldr	r3, [pc, #248]	; (800ff30 <__kernel_cos+0x270>)
 800fe38:	4599      	cmp	r9, r3
 800fe3a:	ec41 0b18 	vmov	d8, r0, r1
 800fe3e:	dd90      	ble.n	800fd62 <__kernel_cos+0xa2>
 800fe40:	4b3c      	ldr	r3, [pc, #240]	; (800ff34 <__kernel_cos+0x274>)
 800fe42:	4599      	cmp	r9, r3
 800fe44:	dc3c      	bgt.n	800fec0 <__kernel_cos+0x200>
 800fe46:	2200      	movs	r2, #0
 800fe48:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 800fe4c:	4937      	ldr	r1, [pc, #220]	; (800ff2c <__kernel_cos+0x26c>)
 800fe4e:	2000      	movs	r0, #0
 800fe50:	4690      	mov	r8, r2
 800fe52:	4699      	mov	r9, r3
 800fe54:	f7f0 fa18 	bl	8000288 <__aeabi_dsub>
 800fe58:	ec41 0b19 	vmov	d9, r0, r1
 800fe5c:	4b32      	ldr	r3, [pc, #200]	; (800ff28 <__kernel_cos+0x268>)
 800fe5e:	2200      	movs	r2, #0
 800fe60:	4620      	mov	r0, r4
 800fe62:	4629      	mov	r1, r5
 800fe64:	f7f0 fbc8 	bl	80005f8 <__aeabi_dmul>
 800fe68:	4642      	mov	r2, r8
 800fe6a:	464b      	mov	r3, r9
 800fe6c:	f7f0 fa0c 	bl	8000288 <__aeabi_dsub>
 800fe70:	ec53 2b18 	vmov	r2, r3, d8
 800fe74:	4680      	mov	r8, r0
 800fe76:	4689      	mov	r9, r1
 800fe78:	4620      	mov	r0, r4
 800fe7a:	4629      	mov	r1, r5
 800fe7c:	f7f0 fbbc 	bl	80005f8 <__aeabi_dmul>
 800fe80:	4652      	mov	r2, sl
 800fe82:	465b      	mov	r3, fp
 800fe84:	4604      	mov	r4, r0
 800fe86:	460d      	mov	r5, r1
 800fe88:	4630      	mov	r0, r6
 800fe8a:	4639      	mov	r1, r7
 800fe8c:	f7f0 fbb4 	bl	80005f8 <__aeabi_dmul>
 800fe90:	4602      	mov	r2, r0
 800fe92:	460b      	mov	r3, r1
 800fe94:	4620      	mov	r0, r4
 800fe96:	4629      	mov	r1, r5
 800fe98:	f7f0 f9f6 	bl	8000288 <__aeabi_dsub>
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	460b      	mov	r3, r1
 800fea0:	4640      	mov	r0, r8
 800fea2:	4649      	mov	r1, r9
 800fea4:	f7f0 f9f0 	bl	8000288 <__aeabi_dsub>
 800fea8:	4602      	mov	r2, r0
 800feaa:	460b      	mov	r3, r1
 800feac:	ec51 0b19 	vmov	r0, r1, d9
 800feb0:	f7f0 f9ea 	bl	8000288 <__aeabi_dsub>
 800feb4:	ecbd 8b04 	vpop	{d8-d9}
 800feb8:	ec41 0b10 	vmov	d0, r0, r1
 800febc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800ff18 <__kernel_cos+0x258>
 800fec4:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800ff38 <__kernel_cos+0x278>
 800fec8:	eeb0 9a47 	vmov.f32	s18, s14
 800fecc:	eef0 9a67 	vmov.f32	s19, s15
 800fed0:	f04f 0800 	mov.w	r8, #0
 800fed4:	e7c2      	b.n	800fe5c <__kernel_cos+0x19c>
 800fed6:	ecbd 8b04 	vpop	{d8-d9}
 800feda:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800ff20 <__kernel_cos+0x260>
 800fede:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee2:	bf00      	nop
 800fee4:	f3af 8000 	nop.w
 800fee8:	be8838d4 	.word	0xbe8838d4
 800feec:	bda8fae9 	.word	0xbda8fae9
 800fef0:	bdb4b1c4 	.word	0xbdb4b1c4
 800fef4:	3e21ee9e 	.word	0x3e21ee9e
 800fef8:	809c52ad 	.word	0x809c52ad
 800fefc:	3e927e4f 	.word	0x3e927e4f
 800ff00:	19cb1590 	.word	0x19cb1590
 800ff04:	3efa01a0 	.word	0x3efa01a0
 800ff08:	16c15177 	.word	0x16c15177
 800ff0c:	3f56c16c 	.word	0x3f56c16c
 800ff10:	5555554c 	.word	0x5555554c
 800ff14:	3fa55555 	.word	0x3fa55555
 800ff18:	00000000 	.word	0x00000000
 800ff1c:	3fe70000 	.word	0x3fe70000
 800ff20:	00000000 	.word	0x00000000
 800ff24:	3ff00000 	.word	0x3ff00000
 800ff28:	3fe00000 	.word	0x3fe00000
 800ff2c:	3ff00000 	.word	0x3ff00000
 800ff30:	3fd33332 	.word	0x3fd33332
 800ff34:	3fe90000 	.word	0x3fe90000
 800ff38:	3fd20000 	.word	0x3fd20000
 800ff3c:	00000000 	.word	0x00000000

0800ff40 <__kernel_rem_pio2>:
 800ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff44:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ff48:	461c      	mov	r4, r3
 800ff4a:	9308      	str	r3, [sp, #32]
 800ff4c:	910b      	str	r1, [sp, #44]	; 0x2c
 800ff4e:	4bba      	ldr	r3, [pc, #744]	; (8010238 <__kernel_rem_pio2+0x2f8>)
 800ff50:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ff52:	9004      	str	r0, [sp, #16]
 800ff54:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800ff58:	9105      	str	r1, [sp, #20]
 800ff5a:	1e63      	subs	r3, r4, #1
 800ff5c:	f112 0f14 	cmn.w	r2, #20
 800ff60:	9303      	str	r3, [sp, #12]
 800ff62:	f2c0 834b 	blt.w	80105fc <__kernel_rem_pio2+0x6bc>
 800ff66:	49b5      	ldr	r1, [pc, #724]	; (801023c <__kernel_rem_pio2+0x2fc>)
 800ff68:	1ed3      	subs	r3, r2, #3
 800ff6a:	fb81 0103 	smull	r0, r1, r1, r3
 800ff6e:	17db      	asrs	r3, r3, #31
 800ff70:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 800ff74:	9307      	str	r3, [sp, #28]
 800ff76:	3301      	adds	r3, #1
 800ff78:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 800ff7c:	00db      	lsls	r3, r3, #3
 800ff7e:	18d3      	adds	r3, r2, r3
 800ff80:	9306      	str	r3, [sp, #24]
 800ff82:	9a07      	ldr	r2, [sp, #28]
 800ff84:	9b03      	ldr	r3, [sp, #12]
 800ff86:	1ad4      	subs	r4, r2, r3
 800ff88:	9a05      	ldr	r2, [sp, #20]
 800ff8a:	18d6      	adds	r6, r2, r3
 800ff8c:	d41a      	bmi.n	800ffc4 <__kernel_rem_pio2+0x84>
 800ff8e:	3601      	adds	r6, #1
 800ff90:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 800ff92:	4426      	add	r6, r4
 800ff94:	ad20      	add	r5, sp, #128	; 0x80
 800ff96:	f04f 0800 	mov.w	r8, #0
 800ff9a:	f04f 0900 	mov.w	r9, #0
 800ff9e:	e008      	b.n	800ffb2 <__kernel_rem_pio2+0x72>
 800ffa0:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 800ffa4:	f7f0 fabe 	bl	8000524 <__aeabi_i2d>
 800ffa8:	3401      	adds	r4, #1
 800ffaa:	42b4      	cmp	r4, r6
 800ffac:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ffb0:	d008      	beq.n	800ffc4 <__kernel_rem_pio2+0x84>
 800ffb2:	2c00      	cmp	r4, #0
 800ffb4:	daf4      	bge.n	800ffa0 <__kernel_rem_pio2+0x60>
 800ffb6:	3401      	adds	r4, #1
 800ffb8:	4640      	mov	r0, r8
 800ffba:	4649      	mov	r1, r9
 800ffbc:	42b4      	cmp	r4, r6
 800ffbe:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ffc2:	d1f6      	bne.n	800ffb2 <__kernel_rem_pio2+0x72>
 800ffc4:	9b05      	ldr	r3, [sp, #20]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	f2c0 83c6 	blt.w	8010758 <__kernel_rem_pio2+0x818>
 800ffcc:	9b08      	ldr	r3, [sp, #32]
 800ffce:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ffd2:	aa20      	add	r2, sp, #128	; 0x80
 800ffd4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800ffd8:	00da      	lsls	r2, r3, #3
 800ffda:	9202      	str	r2, [sp, #8]
 800ffdc:	9a05      	ldr	r2, [sp, #20]
 800ffde:	441a      	add	r2, r3
 800ffe0:	9201      	str	r2, [sp, #4]
 800ffe2:	9a04      	ldr	r2, [sp, #16]
 800ffe4:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ffe8:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 800ffec:	9b03      	ldr	r3, [sp, #12]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	f2c0 81a7 	blt.w	8010342 <__kernel_rem_pio2+0x402>
 800fff4:	9e04      	ldr	r6, [sp, #16]
 800fff6:	4657      	mov	r7, sl
 800fff8:	2400      	movs	r4, #0
 800fffa:	2500      	movs	r5, #0
 800fffc:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 8010000:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010004:	f7f0 faf8 	bl	80005f8 <__aeabi_dmul>
 8010008:	4602      	mov	r2, r0
 801000a:	460b      	mov	r3, r1
 801000c:	4620      	mov	r0, r4
 801000e:	4629      	mov	r1, r5
 8010010:	f7f0 f93c 	bl	800028c <__adddf3>
 8010014:	4546      	cmp	r6, r8
 8010016:	4604      	mov	r4, r0
 8010018:	460d      	mov	r5, r1
 801001a:	d1ef      	bne.n	800fffc <__kernel_rem_pio2+0xbc>
 801001c:	9b01      	ldr	r3, [sp, #4]
 801001e:	f109 0901 	add.w	r9, r9, #1
 8010022:	4599      	cmp	r9, r3
 8010024:	e8eb 4502 	strd	r4, r5, [fp], #8
 8010028:	f10a 0a08 	add.w	sl, sl, #8
 801002c:	d1de      	bne.n	800ffec <__kernel_rem_pio2+0xac>
 801002e:	9a04      	ldr	r2, [sp, #16]
 8010030:	9b02      	ldr	r3, [sp, #8]
 8010032:	4413      	add	r3, r2
 8010034:	9a05      	ldr	r2, [sp, #20]
 8010036:	9201      	str	r2, [sp, #4]
 8010038:	469b      	mov	fp, r3
 801003a:	ab0b      	add	r3, sp, #44	; 0x2c
 801003c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010040:	930a      	str	r3, [sp, #40]	; 0x28
 8010042:	ab0c      	add	r3, sp, #48	; 0x30
 8010044:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010048:	3b08      	subs	r3, #8
 801004a:	9309      	str	r3, [sp, #36]	; 0x24
 801004c:	9a01      	ldr	r2, [sp, #4]
 801004e:	ab98      	add	r3, sp, #608	; 0x260
 8010050:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010054:	2a00      	cmp	r2, #0
 8010056:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 801005a:	dd29      	ble.n	80100b0 <__kernel_rem_pio2+0x170>
 801005c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8010060:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 8010064:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8010068:	4b75      	ldr	r3, [pc, #468]	; (8010240 <__kernel_rem_pio2+0x300>)
 801006a:	2200      	movs	r2, #0
 801006c:	4620      	mov	r0, r4
 801006e:	4629      	mov	r1, r5
 8010070:	f7f0 fac2 	bl	80005f8 <__aeabi_dmul>
 8010074:	f7f0 fd5a 	bl	8000b2c <__aeabi_d2iz>
 8010078:	f7f0 fa54 	bl	8000524 <__aeabi_i2d>
 801007c:	4b71      	ldr	r3, [pc, #452]	; (8010244 <__kernel_rem_pio2+0x304>)
 801007e:	2200      	movs	r2, #0
 8010080:	4606      	mov	r6, r0
 8010082:	460f      	mov	r7, r1
 8010084:	f7f0 fab8 	bl	80005f8 <__aeabi_dmul>
 8010088:	4602      	mov	r2, r0
 801008a:	460b      	mov	r3, r1
 801008c:	4620      	mov	r0, r4
 801008e:	4629      	mov	r1, r5
 8010090:	f7f0 f8fa 	bl	8000288 <__aeabi_dsub>
 8010094:	f7f0 fd4a 	bl	8000b2c <__aeabi_d2iz>
 8010098:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 801009c:	f849 0b04 	str.w	r0, [r9], #4
 80100a0:	4639      	mov	r1, r7
 80100a2:	4630      	mov	r0, r6
 80100a4:	f7f0 f8f2 	bl	800028c <__adddf3>
 80100a8:	45d0      	cmp	r8, sl
 80100aa:	4604      	mov	r4, r0
 80100ac:	460d      	mov	r5, r1
 80100ae:	d1db      	bne.n	8010068 <__kernel_rem_pio2+0x128>
 80100b0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80100b4:	ec45 4b10 	vmov	d0, r4, r5
 80100b8:	4648      	mov	r0, r9
 80100ba:	f000 fcb5 	bl	8010a28 <scalbn>
 80100be:	ec55 4b10 	vmov	r4, r5, d0
 80100c2:	2200      	movs	r2, #0
 80100c4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80100c8:	ee10 0a10 	vmov	r0, s0
 80100cc:	4629      	mov	r1, r5
 80100ce:	f7f0 fa93 	bl	80005f8 <__aeabi_dmul>
 80100d2:	ec41 0b10 	vmov	d0, r0, r1
 80100d6:	f000 fc23 	bl	8010920 <floor>
 80100da:	4b5b      	ldr	r3, [pc, #364]	; (8010248 <__kernel_rem_pio2+0x308>)
 80100dc:	ec51 0b10 	vmov	r0, r1, d0
 80100e0:	2200      	movs	r2, #0
 80100e2:	f7f0 fa89 	bl	80005f8 <__aeabi_dmul>
 80100e6:	4602      	mov	r2, r0
 80100e8:	460b      	mov	r3, r1
 80100ea:	4620      	mov	r0, r4
 80100ec:	4629      	mov	r1, r5
 80100ee:	f7f0 f8cb 	bl	8000288 <__aeabi_dsub>
 80100f2:	460d      	mov	r5, r1
 80100f4:	4604      	mov	r4, r0
 80100f6:	f7f0 fd19 	bl	8000b2c <__aeabi_d2iz>
 80100fa:	4680      	mov	r8, r0
 80100fc:	f7f0 fa12 	bl	8000524 <__aeabi_i2d>
 8010100:	460b      	mov	r3, r1
 8010102:	4602      	mov	r2, r0
 8010104:	4629      	mov	r1, r5
 8010106:	4620      	mov	r0, r4
 8010108:	f7f0 f8be 	bl	8000288 <__aeabi_dsub>
 801010c:	464b      	mov	r3, r9
 801010e:	2b00      	cmp	r3, #0
 8010110:	4606      	mov	r6, r0
 8010112:	460f      	mov	r7, r1
 8010114:	f340 809a 	ble.w	801024c <__kernel_rem_pio2+0x30c>
 8010118:	9a01      	ldr	r2, [sp, #4]
 801011a:	1e51      	subs	r1, r2, #1
 801011c:	aa0c      	add	r2, sp, #48	; 0x30
 801011e:	f1c9 0318 	rsb	r3, r9, #24
 8010122:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8010126:	fa42 f003 	asr.w	r0, r2, r3
 801012a:	fa00 f303 	lsl.w	r3, r0, r3
 801012e:	1ad3      	subs	r3, r2, r3
 8010130:	f1c9 0517 	rsb	r5, r9, #23
 8010134:	aa0c      	add	r2, sp, #48	; 0x30
 8010136:	fa43 f505 	asr.w	r5, r3, r5
 801013a:	2d00      	cmp	r5, #0
 801013c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010140:	4480      	add	r8, r0
 8010142:	f300 808d 	bgt.w	8010260 <__kernel_rem_pio2+0x320>
 8010146:	2200      	movs	r2, #0
 8010148:	2300      	movs	r3, #0
 801014a:	4630      	mov	r0, r6
 801014c:	4639      	mov	r1, r7
 801014e:	f7f0 fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8010152:	2800      	cmp	r0, #0
 8010154:	f000 8259 	beq.w	801060a <__kernel_rem_pio2+0x6ca>
 8010158:	9b01      	ldr	r3, [sp, #4]
 801015a:	9a05      	ldr	r2, [sp, #20]
 801015c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8010160:	4552      	cmp	r2, sl
 8010162:	dc10      	bgt.n	8010186 <__kernel_rem_pio2+0x246>
 8010164:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010168:	aa0c      	add	r2, sp, #48	; 0x30
 801016a:	3b01      	subs	r3, #1
 801016c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801016e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010172:	2200      	movs	r2, #0
 8010174:	f853 1904 	ldr.w	r1, [r3], #-4
 8010178:	4283      	cmp	r3, r0
 801017a:	ea42 0201 	orr.w	r2, r2, r1
 801017e:	d1f9      	bne.n	8010174 <__kernel_rem_pio2+0x234>
 8010180:	2a00      	cmp	r2, #0
 8010182:	f040 80e1 	bne.w	8010348 <__kernel_rem_pio2+0x408>
 8010186:	9b05      	ldr	r3, [sp, #20]
 8010188:	aa0c      	add	r2, sp, #48	; 0x30
 801018a:	3b01      	subs	r3, #1
 801018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010190:	2b00      	cmp	r3, #0
 8010192:	f040 80d1 	bne.w	8010338 <__kernel_rem_pio2+0x3f8>
 8010196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010198:	2301      	movs	r3, #1
 801019a:	f852 1904 	ldr.w	r1, [r2], #-4
 801019e:	3301      	adds	r3, #1
 80101a0:	2900      	cmp	r1, #0
 80101a2:	d0fa      	beq.n	801019a <__kernel_rem_pio2+0x25a>
 80101a4:	9a01      	ldr	r2, [sp, #4]
 80101a6:	18d3      	adds	r3, r2, r3
 80101a8:	9302      	str	r3, [sp, #8]
 80101aa:	1c53      	adds	r3, r2, #1
 80101ac:	4699      	mov	r9, r3
 80101ae:	9a01      	ldr	r2, [sp, #4]
 80101b0:	9908      	ldr	r1, [sp, #32]
 80101b2:	440a      	add	r2, r1
 80101b4:	4690      	mov	r8, r2
 80101b6:	9a07      	ldr	r2, [sp, #28]
 80101b8:	eb02 0a03 	add.w	sl, r2, r3
 80101bc:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 80101c0:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 80101c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80101c6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80101ca:	aa20      	add	r2, sp, #128	; 0x80
 80101cc:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 80101d0:	aa70      	add	r2, sp, #448	; 0x1c0
 80101d2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80101d6:	9301      	str	r3, [sp, #4]
 80101d8:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80101dc:	f7f0 f9a2 	bl	8000524 <__aeabi_i2d>
 80101e0:	460b      	mov	r3, r1
 80101e2:	9903      	ldr	r1, [sp, #12]
 80101e4:	4602      	mov	r2, r0
 80101e6:	2900      	cmp	r1, #0
 80101e8:	e9c8 2300 	strd	r2, r3, [r8]
 80101ec:	4647      	mov	r7, r8
 80101ee:	f108 0808 	add.w	r8, r8, #8
 80101f2:	db1e      	blt.n	8010232 <__kernel_rem_pio2+0x2f2>
 80101f4:	9e04      	ldr	r6, [sp, #16]
 80101f6:	2400      	movs	r4, #0
 80101f8:	2500      	movs	r5, #0
 80101fa:	e001      	b.n	8010200 <__kernel_rem_pio2+0x2c0>
 80101fc:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 8010200:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010204:	f7f0 f9f8 	bl	80005f8 <__aeabi_dmul>
 8010208:	4602      	mov	r2, r0
 801020a:	460b      	mov	r3, r1
 801020c:	4620      	mov	r0, r4
 801020e:	4629      	mov	r1, r5
 8010210:	f7f0 f83c 	bl	800028c <__adddf3>
 8010214:	455e      	cmp	r6, fp
 8010216:	4604      	mov	r4, r0
 8010218:	460d      	mov	r5, r1
 801021a:	d1ef      	bne.n	80101fc <__kernel_rem_pio2+0x2bc>
 801021c:	9b01      	ldr	r3, [sp, #4]
 801021e:	e8e3 4502 	strd	r4, r5, [r3], #8
 8010222:	9301      	str	r3, [sp, #4]
 8010224:	9b02      	ldr	r3, [sp, #8]
 8010226:	f109 0901 	add.w	r9, r9, #1
 801022a:	4599      	cmp	r9, r3
 801022c:	ddd4      	ble.n	80101d8 <__kernel_rem_pio2+0x298>
 801022e:	9301      	str	r3, [sp, #4]
 8010230:	e70c      	b.n	801004c <__kernel_rem_pio2+0x10c>
 8010232:	2400      	movs	r4, #0
 8010234:	2500      	movs	r5, #0
 8010236:	e7f1      	b.n	801021c <__kernel_rem_pio2+0x2dc>
 8010238:	0801de98 	.word	0x0801de98
 801023c:	2aaaaaab 	.word	0x2aaaaaab
 8010240:	3e700000 	.word	0x3e700000
 8010244:	41700000 	.word	0x41700000
 8010248:	40200000 	.word	0x40200000
 801024c:	d16b      	bne.n	8010326 <__kernel_rem_pio2+0x3e6>
 801024e:	9b01      	ldr	r3, [sp, #4]
 8010250:	aa0c      	add	r2, sp, #48	; 0x30
 8010252:	3b01      	subs	r3, #1
 8010254:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8010258:	15ed      	asrs	r5, r5, #23
 801025a:	2d00      	cmp	r5, #0
 801025c:	f77f af73 	ble.w	8010146 <__kernel_rem_pio2+0x206>
 8010260:	9b01      	ldr	r3, [sp, #4]
 8010262:	2b00      	cmp	r3, #0
 8010264:	f108 0801 	add.w	r8, r8, #1
 8010268:	f340 81cd 	ble.w	8010606 <__kernel_rem_pio2+0x6c6>
 801026c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801026e:	2c00      	cmp	r4, #0
 8010270:	d151      	bne.n	8010316 <__kernel_rem_pio2+0x3d6>
 8010272:	9b01      	ldr	r3, [sp, #4]
 8010274:	2b01      	cmp	r3, #1
 8010276:	d020      	beq.n	80102ba <__kernel_rem_pio2+0x37a>
 8010278:	ab0c      	add	r3, sp, #48	; 0x30
 801027a:	2201      	movs	r2, #1
 801027c:	f853 4f04 	ldr.w	r4, [r3, #4]!
 8010280:	2c00      	cmp	r4, #0
 8010282:	d04b      	beq.n	801031c <__kernel_rem_pio2+0x3dc>
 8010284:	1c53      	adds	r3, r2, #1
 8010286:	a90c      	add	r1, sp, #48	; 0x30
 8010288:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 801028c:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 8010290:	9901      	ldr	r1, [sp, #4]
 8010292:	4299      	cmp	r1, r3
 8010294:	dd10      	ble.n	80102b8 <__kernel_rem_pio2+0x378>
 8010296:	aa0c      	add	r2, sp, #48	; 0x30
 8010298:	a80c      	add	r0, sp, #48	; 0x30
 801029a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801029e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80102a2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80102a6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80102aa:	e000      	b.n	80102ae <__kernel_rem_pio2+0x36e>
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	1a8a      	subs	r2, r1, r2
 80102b0:	f843 2b04 	str.w	r2, [r3], #4
 80102b4:	4283      	cmp	r3, r0
 80102b6:	d1f9      	bne.n	80102ac <__kernel_rem_pio2+0x36c>
 80102b8:	2401      	movs	r4, #1
 80102ba:	9b06      	ldr	r3, [sp, #24]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	dd0e      	ble.n	80102de <__kernel_rem_pio2+0x39e>
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	f000 816c 	beq.w	801059e <__kernel_rem_pio2+0x65e>
 80102c6:	2b02      	cmp	r3, #2
 80102c8:	d109      	bne.n	80102de <__kernel_rem_pio2+0x39e>
 80102ca:	9b01      	ldr	r3, [sp, #4]
 80102cc:	1e5a      	subs	r2, r3, #1
 80102ce:	ab0c      	add	r3, sp, #48	; 0x30
 80102d0:	a90c      	add	r1, sp, #48	; 0x30
 80102d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102d6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80102da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80102de:	2d02      	cmp	r5, #2
 80102e0:	f47f af31 	bne.w	8010146 <__kernel_rem_pio2+0x206>
 80102e4:	4632      	mov	r2, r6
 80102e6:	463b      	mov	r3, r7
 80102e8:	49b7      	ldr	r1, [pc, #732]	; (80105c8 <__kernel_rem_pio2+0x688>)
 80102ea:	2000      	movs	r0, #0
 80102ec:	f7ef ffcc 	bl	8000288 <__aeabi_dsub>
 80102f0:	4606      	mov	r6, r0
 80102f2:	460f      	mov	r7, r1
 80102f4:	2c00      	cmp	r4, #0
 80102f6:	f43f af26 	beq.w	8010146 <__kernel_rem_pio2+0x206>
 80102fa:	9806      	ldr	r0, [sp, #24]
 80102fc:	ed9f 0bae 	vldr	d0, [pc, #696]	; 80105b8 <__kernel_rem_pio2+0x678>
 8010300:	f000 fb92 	bl	8010a28 <scalbn>
 8010304:	4630      	mov	r0, r6
 8010306:	4639      	mov	r1, r7
 8010308:	ec53 2b10 	vmov	r2, r3, d0
 801030c:	f7ef ffbc 	bl	8000288 <__aeabi_dsub>
 8010310:	4606      	mov	r6, r0
 8010312:	460f      	mov	r7, r1
 8010314:	e717      	b.n	8010146 <__kernel_rem_pio2+0x206>
 8010316:	2301      	movs	r3, #1
 8010318:	2200      	movs	r2, #0
 801031a:	e7b4      	b.n	8010286 <__kernel_rem_pio2+0x346>
 801031c:	9901      	ldr	r1, [sp, #4]
 801031e:	3201      	adds	r2, #1
 8010320:	428a      	cmp	r2, r1
 8010322:	d1ab      	bne.n	801027c <__kernel_rem_pio2+0x33c>
 8010324:	e7c9      	b.n	80102ba <__kernel_rem_pio2+0x37a>
 8010326:	4ba9      	ldr	r3, [pc, #676]	; (80105cc <__kernel_rem_pio2+0x68c>)
 8010328:	2200      	movs	r2, #0
 801032a:	f7f0 fbeb 	bl	8000b04 <__aeabi_dcmpge>
 801032e:	2800      	cmp	r0, #0
 8010330:	f040 8152 	bne.w	80105d8 <__kernel_rem_pio2+0x698>
 8010334:	4605      	mov	r5, r0
 8010336:	e706      	b.n	8010146 <__kernel_rem_pio2+0x206>
 8010338:	9b01      	ldr	r3, [sp, #4]
 801033a:	3301      	adds	r3, #1
 801033c:	4699      	mov	r9, r3
 801033e:	9302      	str	r3, [sp, #8]
 8010340:	e735      	b.n	80101ae <__kernel_rem_pio2+0x26e>
 8010342:	2400      	movs	r4, #0
 8010344:	2500      	movs	r5, #0
 8010346:	e669      	b.n	801001c <__kernel_rem_pio2+0xdc>
 8010348:	9b06      	ldr	r3, [sp, #24]
 801034a:	9503      	str	r5, [sp, #12]
 801034c:	f1a3 0218 	sub.w	r2, r3, #24
 8010350:	ab0c      	add	r3, sp, #48	; 0x30
 8010352:	f8cd 801c 	str.w	r8, [sp, #28]
 8010356:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 801035a:	9206      	str	r2, [sp, #24]
 801035c:	b973      	cbnz	r3, 801037c <__kernel_rem_pio2+0x43c>
 801035e:	9b01      	ldr	r3, [sp, #4]
 8010360:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010364:	3b02      	subs	r3, #2
 8010366:	a90c      	add	r1, sp, #48	; 0x30
 8010368:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801036c:	f853 1904 	ldr.w	r1, [r3], #-4
 8010370:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010374:	3a18      	subs	r2, #24
 8010376:	2900      	cmp	r1, #0
 8010378:	d0f8      	beq.n	801036c <__kernel_rem_pio2+0x42c>
 801037a:	9206      	str	r2, [sp, #24]
 801037c:	ed9f 0b8e 	vldr	d0, [pc, #568]	; 80105b8 <__kernel_rem_pio2+0x678>
 8010380:	9806      	ldr	r0, [sp, #24]
 8010382:	f000 fb51 	bl	8010a28 <scalbn>
 8010386:	f1ba 0f00 	cmp.w	sl, #0
 801038a:	ec55 4b10 	vmov	r4, r5, d0
 801038e:	f2c0 81d9 	blt.w	8010744 <__kernel_rem_pio2+0x804>
 8010392:	ab70      	add	r3, sp, #448	; 0x1c0
 8010394:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 8010398:	aa0c      	add	r2, sp, #48	; 0x30
 801039a:	f10a 0301 	add.w	r3, sl, #1
 801039e:	9306      	str	r3, [sp, #24]
 80103a0:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80103a4:	f8df 9228 	ldr.w	r9, [pc, #552]	; 80105d0 <__kernel_rem_pio2+0x690>
 80103a8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80103ac:	9304      	str	r3, [sp, #16]
 80103ae:	f10b 0708 	add.w	r7, fp, #8
 80103b2:	f04f 0800 	mov.w	r8, #0
 80103b6:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 80103ba:	f7f0 f8b3 	bl	8000524 <__aeabi_i2d>
 80103be:	4622      	mov	r2, r4
 80103c0:	462b      	mov	r3, r5
 80103c2:	f7f0 f919 	bl	80005f8 <__aeabi_dmul>
 80103c6:	464b      	mov	r3, r9
 80103c8:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80103cc:	4642      	mov	r2, r8
 80103ce:	4620      	mov	r0, r4
 80103d0:	4629      	mov	r1, r5
 80103d2:	f7f0 f911 	bl	80005f8 <__aeabi_dmul>
 80103d6:	ab0c      	add	r3, sp, #48	; 0x30
 80103d8:	429e      	cmp	r6, r3
 80103da:	4604      	mov	r4, r0
 80103dc:	460d      	mov	r5, r1
 80103de:	d1ea      	bne.n	80103b6 <__kernel_rem_pio2+0x476>
 80103e0:	ab48      	add	r3, sp, #288	; 0x120
 80103e2:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 80103e6:	f8dd a014 	ldr.w	sl, [sp, #20]
 80103ea:	f1ba 0f00 	cmp.w	sl, #0
 80103ee:	f04f 0900 	mov.w	r9, #0
 80103f2:	db2c      	blt.n	801044e <__kernel_rem_pio2+0x50e>
 80103f4:	a372      	add	r3, pc, #456	; (adr r3, 80105c0 <__kernel_rem_pio2+0x680>)
 80103f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fa:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80105d4 <__kernel_rem_pio2+0x694>
 80103fe:	465f      	mov	r7, fp
 8010400:	2600      	movs	r6, #0
 8010402:	2400      	movs	r4, #0
 8010404:	2500      	movs	r5, #0
 8010406:	e003      	b.n	8010410 <__kernel_rem_pio2+0x4d0>
 8010408:	45b1      	cmp	r9, r6
 801040a:	db10      	blt.n	801042e <__kernel_rem_pio2+0x4ee>
 801040c:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8010410:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8010414:	f7f0 f8f0 	bl	80005f8 <__aeabi_dmul>
 8010418:	4602      	mov	r2, r0
 801041a:	460b      	mov	r3, r1
 801041c:	4620      	mov	r0, r4
 801041e:	4629      	mov	r1, r5
 8010420:	f7ef ff34 	bl	800028c <__adddf3>
 8010424:	3601      	adds	r6, #1
 8010426:	45b2      	cmp	sl, r6
 8010428:	4604      	mov	r4, r0
 801042a:	460d      	mov	r5, r1
 801042c:	daec      	bge.n	8010408 <__kernel_rem_pio2+0x4c8>
 801042e:	9b01      	ldr	r3, [sp, #4]
 8010430:	9a02      	ldr	r2, [sp, #8]
 8010432:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010436:	454a      	cmp	r2, r9
 8010438:	e9c3 4500 	strd	r4, r5, [r3]
 801043c:	f1ab 0b08 	sub.w	fp, fp, #8
 8010440:	f109 0301 	add.w	r3, r9, #1
 8010444:	d006      	beq.n	8010454 <__kernel_rem_pio2+0x514>
 8010446:	f1ba 0f00 	cmp.w	sl, #0
 801044a:	4699      	mov	r9, r3
 801044c:	dad2      	bge.n	80103f4 <__kernel_rem_pio2+0x4b4>
 801044e:	2400      	movs	r4, #0
 8010450:	2500      	movs	r5, #0
 8010452:	e7ec      	b.n	801042e <__kernel_rem_pio2+0x4ee>
 8010454:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8010456:	f8dd a008 	ldr.w	sl, [sp, #8]
 801045a:	2b02      	cmp	r3, #2
 801045c:	dc1e      	bgt.n	801049c <__kernel_rem_pio2+0x55c>
 801045e:	2b00      	cmp	r3, #0
 8010460:	f300 8109 	bgt.w	8010676 <__kernel_rem_pio2+0x736>
 8010464:	d113      	bne.n	801048e <__kernel_rem_pio2+0x54e>
 8010466:	9c04      	ldr	r4, [sp, #16]
 8010468:	9d01      	ldr	r5, [sp, #4]
 801046a:	3408      	adds	r4, #8
 801046c:	442c      	add	r4, r5
 801046e:	2000      	movs	r0, #0
 8010470:	2100      	movs	r1, #0
 8010472:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010476:	f7ef ff09 	bl	800028c <__adddf3>
 801047a:	42a5      	cmp	r5, r4
 801047c:	d1f9      	bne.n	8010472 <__kernel_rem_pio2+0x532>
 801047e:	9b03      	ldr	r3, [sp, #12]
 8010480:	b113      	cbz	r3, 8010488 <__kernel_rem_pio2+0x548>
 8010482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010486:	4619      	mov	r1, r3
 8010488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801048a:	e9c3 0100 	strd	r0, r1, [r3]
 801048e:	9b07      	ldr	r3, [sp, #28]
 8010490:	f003 0007 	and.w	r0, r3, #7
 8010494:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801049c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 801049e:	2b03      	cmp	r3, #3
 80104a0:	d1f5      	bne.n	801048e <__kernel_rem_pio2+0x54e>
 80104a2:	f1ba 0f00 	cmp.w	sl, #0
 80104a6:	f000 8169 	beq.w	801077c <__kernel_rem_pio2+0x83c>
 80104aa:	9a01      	ldr	r2, [sp, #4]
 80104ac:	9b04      	ldr	r3, [sp, #16]
 80104ae:	18d3      	adds	r3, r2, r3
 80104b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80104b4:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 80104b8:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 80104bc:	4620      	mov	r0, r4
 80104be:	4629      	mov	r1, r5
 80104c0:	4632      	mov	r2, r6
 80104c2:	463b      	mov	r3, r7
 80104c4:	f7ef fee2 	bl	800028c <__adddf3>
 80104c8:	46a0      	mov	r8, r4
 80104ca:	46a9      	mov	r9, r5
 80104cc:	4604      	mov	r4, r0
 80104ce:	460d      	mov	r5, r1
 80104d0:	4622      	mov	r2, r4
 80104d2:	462b      	mov	r3, r5
 80104d4:	4630      	mov	r0, r6
 80104d6:	4639      	mov	r1, r7
 80104d8:	f7ef fed6 	bl	8000288 <__aeabi_dsub>
 80104dc:	464b      	mov	r3, r9
 80104de:	4642      	mov	r2, r8
 80104e0:	f7ef fed4 	bl	800028c <__adddf3>
 80104e4:	9b01      	ldr	r3, [sp, #4]
 80104e6:	455b      	cmp	r3, fp
 80104e8:	e9cb 0102 	strd	r0, r1, [fp, #8]
 80104ec:	e9cb 4500 	strd	r4, r5, [fp]
 80104f0:	d1e2      	bne.n	80104b8 <__kernel_rem_pio2+0x578>
 80104f2:	f1ba 0f01 	cmp.w	sl, #1
 80104f6:	f340 8141 	ble.w	801077c <__kernel_rem_pio2+0x83c>
 80104fa:	9a01      	ldr	r2, [sp, #4]
 80104fc:	9b04      	ldr	r3, [sp, #16]
 80104fe:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
 8010502:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010506:	4413      	add	r3, r2
 8010508:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 801050c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010510:	f101 0a08 	add.w	sl, r1, #8
 8010514:	9102      	str	r1, [sp, #8]
 8010516:	4492      	add	sl, r2
 8010518:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 801051c:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 8010520:	4620      	mov	r0, r4
 8010522:	4629      	mov	r1, r5
 8010524:	4632      	mov	r2, r6
 8010526:	463b      	mov	r3, r7
 8010528:	f7ef feb0 	bl	800028c <__adddf3>
 801052c:	46a0      	mov	r8, r4
 801052e:	46a9      	mov	r9, r5
 8010530:	4604      	mov	r4, r0
 8010532:	460d      	mov	r5, r1
 8010534:	4622      	mov	r2, r4
 8010536:	462b      	mov	r3, r5
 8010538:	4630      	mov	r0, r6
 801053a:	4639      	mov	r1, r7
 801053c:	f7ef fea4 	bl	8000288 <__aeabi_dsub>
 8010540:	4642      	mov	r2, r8
 8010542:	464b      	mov	r3, r9
 8010544:	f7ef fea2 	bl	800028c <__adddf3>
 8010548:	45d3      	cmp	fp, sl
 801054a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801054e:	e9ca 4500 	strd	r4, r5, [sl]
 8010552:	d1e3      	bne.n	801051c <__kernel_rem_pio2+0x5dc>
 8010554:	9c02      	ldr	r4, [sp, #8]
 8010556:	9b01      	ldr	r3, [sp, #4]
 8010558:	3410      	adds	r4, #16
 801055a:	441c      	add	r4, r3
 801055c:	f103 0510 	add.w	r5, r3, #16
 8010560:	2000      	movs	r0, #0
 8010562:	2100      	movs	r1, #0
 8010564:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010568:	f7ef fe90 	bl	800028c <__adddf3>
 801056c:	42a5      	cmp	r5, r4
 801056e:	d1f9      	bne.n	8010564 <__kernel_rem_pio2+0x624>
 8010570:	9b03      	ldr	r3, [sp, #12]
 8010572:	2b00      	cmp	r3, #0
 8010574:	f040 80bd 	bne.w	80106f2 <__kernel_rem_pio2+0x7b2>
 8010578:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801057a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 801057e:	9801      	ldr	r0, [sp, #4]
 8010580:	e9d0 2300 	ldrd	r2, r3, [r0]
 8010584:	e9c4 2300 	strd	r2, r3, [r4]
 8010588:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 801058c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010590:	9b07      	ldr	r3, [sp, #28]
 8010592:	f003 0007 	and.w	r0, r3, #7
 8010596:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801059a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801059e:	9b01      	ldr	r3, [sp, #4]
 80105a0:	1e5a      	subs	r2, r3, #1
 80105a2:	ab0c      	add	r3, sp, #48	; 0x30
 80105a4:	a90c      	add	r1, sp, #48	; 0x30
 80105a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80105ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80105b2:	e694      	b.n	80102de <__kernel_rem_pio2+0x39e>
 80105b4:	f3af 8000 	nop.w
 80105b8:	00000000 	.word	0x00000000
 80105bc:	3ff00000 	.word	0x3ff00000
 80105c0:	40000000 	.word	0x40000000
 80105c4:	3ff921fb 	.word	0x3ff921fb
 80105c8:	3ff00000 	.word	0x3ff00000
 80105cc:	3fe00000 	.word	0x3fe00000
 80105d0:	3e700000 	.word	0x3e700000
 80105d4:	0801de60 	.word	0x0801de60
 80105d8:	9b01      	ldr	r3, [sp, #4]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f108 0801 	add.w	r8, r8, #1
 80105e0:	bfc8      	it	gt
 80105e2:	2502      	movgt	r5, #2
 80105e4:	f73f ae42 	bgt.w	801026c <__kernel_rem_pio2+0x32c>
 80105e8:	4632      	mov	r2, r6
 80105ea:	463b      	mov	r3, r7
 80105ec:	4965      	ldr	r1, [pc, #404]	; (8010784 <__kernel_rem_pio2+0x844>)
 80105ee:	2000      	movs	r0, #0
 80105f0:	f7ef fe4a 	bl	8000288 <__aeabi_dsub>
 80105f4:	2502      	movs	r5, #2
 80105f6:	4606      	mov	r6, r0
 80105f8:	460f      	mov	r7, r1
 80105fa:	e5a4      	b.n	8010146 <__kernel_rem_pio2+0x206>
 80105fc:	2100      	movs	r1, #0
 80105fe:	f06f 0317 	mvn.w	r3, #23
 8010602:	9107      	str	r1, [sp, #28]
 8010604:	e4bb      	b.n	800ff7e <__kernel_rem_pio2+0x3e>
 8010606:	2400      	movs	r4, #0
 8010608:	e657      	b.n	80102ba <__kernel_rem_pio2+0x37a>
 801060a:	ec47 6b10 	vmov	d0, r6, r7
 801060e:	9e06      	ldr	r6, [sp, #24]
 8010610:	9503      	str	r5, [sp, #12]
 8010612:	4270      	negs	r0, r6
 8010614:	f8cd 801c 	str.w	r8, [sp, #28]
 8010618:	f000 fa06 	bl	8010a28 <scalbn>
 801061c:	ec55 4b10 	vmov	r4, r5, d0
 8010620:	4b59      	ldr	r3, [pc, #356]	; (8010788 <__kernel_rem_pio2+0x848>)
 8010622:	ee10 0a10 	vmov	r0, s0
 8010626:	2200      	movs	r2, #0
 8010628:	4629      	mov	r1, r5
 801062a:	f7f0 fa6b 	bl	8000b04 <__aeabi_dcmpge>
 801062e:	2800      	cmp	r0, #0
 8010630:	d055      	beq.n	80106de <__kernel_rem_pio2+0x79e>
 8010632:	4b56      	ldr	r3, [pc, #344]	; (801078c <__kernel_rem_pio2+0x84c>)
 8010634:	9f01      	ldr	r7, [sp, #4]
 8010636:	2200      	movs	r2, #0
 8010638:	3618      	adds	r6, #24
 801063a:	4620      	mov	r0, r4
 801063c:	4629      	mov	r1, r5
 801063e:	9606      	str	r6, [sp, #24]
 8010640:	f7ef ffda 	bl	80005f8 <__aeabi_dmul>
 8010644:	f7f0 fa72 	bl	8000b2c <__aeabi_d2iz>
 8010648:	4606      	mov	r6, r0
 801064a:	f7ef ff6b 	bl	8000524 <__aeabi_i2d>
 801064e:	4b4e      	ldr	r3, [pc, #312]	; (8010788 <__kernel_rem_pio2+0x848>)
 8010650:	2200      	movs	r2, #0
 8010652:	f7ef ffd1 	bl	80005f8 <__aeabi_dmul>
 8010656:	460b      	mov	r3, r1
 8010658:	4602      	mov	r2, r0
 801065a:	4629      	mov	r1, r5
 801065c:	4620      	mov	r0, r4
 801065e:	f7ef fe13 	bl	8000288 <__aeabi_dsub>
 8010662:	f7f0 fa63 	bl	8000b2c <__aeabi_d2iz>
 8010666:	f107 0a01 	add.w	sl, r7, #1
 801066a:	ab0c      	add	r3, sp, #48	; 0x30
 801066c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8010670:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 8010674:	e682      	b.n	801037c <__kernel_rem_pio2+0x43c>
 8010676:	9d01      	ldr	r5, [sp, #4]
 8010678:	9b06      	ldr	r3, [sp, #24]
 801067a:	2000      	movs	r0, #0
 801067c:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8010680:	2100      	movs	r1, #0
 8010682:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010686:	f7ef fe01 	bl	800028c <__adddf3>
 801068a:	42a5      	cmp	r5, r4
 801068c:	d1f9      	bne.n	8010682 <__kernel_rem_pio2+0x742>
 801068e:	9b03      	ldr	r3, [sp, #12]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d147      	bne.n	8010724 <__kernel_rem_pio2+0x7e4>
 8010694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010696:	e9c3 0100 	strd	r0, r1, [r3]
 801069a:	460b      	mov	r3, r1
 801069c:	9901      	ldr	r1, [sp, #4]
 801069e:	4602      	mov	r2, r0
 80106a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106a4:	f7ef fdf0 	bl	8000288 <__aeabi_dsub>
 80106a8:	f1ba 0f00 	cmp.w	sl, #0
 80106ac:	dd0d      	ble.n	80106ca <__kernel_rem_pio2+0x78a>
 80106ae:	ad4a      	add	r5, sp, #296	; 0x128
 80106b0:	2401      	movs	r4, #1
 80106b2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80106b6:	3401      	adds	r4, #1
 80106b8:	f7ef fde8 	bl	800028c <__adddf3>
 80106bc:	45a2      	cmp	sl, r4
 80106be:	daf8      	bge.n	80106b2 <__kernel_rem_pio2+0x772>
 80106c0:	9b03      	ldr	r3, [sp, #12]
 80106c2:	b113      	cbz	r3, 80106ca <__kernel_rem_pio2+0x78a>
 80106c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80106c8:	4619      	mov	r1, r3
 80106ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80106d0:	9b07      	ldr	r3, [sp, #28]
 80106d2:	f003 0007 	and.w	r0, r3, #7
 80106d6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80106da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106de:	4620      	mov	r0, r4
 80106e0:	4629      	mov	r1, r5
 80106e2:	f7f0 fa23 	bl	8000b2c <__aeabi_d2iz>
 80106e6:	9b01      	ldr	r3, [sp, #4]
 80106e8:	aa0c      	add	r2, sp, #48	; 0x30
 80106ea:	469a      	mov	sl, r3
 80106ec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80106f0:	e644      	b.n	801037c <__kernel_rem_pio2+0x43c>
 80106f2:	9e01      	ldr	r6, [sp, #4]
 80106f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80106f8:	6874      	ldr	r4, [r6, #4]
 80106fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80106fc:	6832      	ldr	r2, [r6, #0]
 80106fe:	68f5      	ldr	r5, [r6, #12]
 8010700:	e9c1 0304 	strd	r0, r3, [r1, #16]
 8010704:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8010708:	e9c1 2300 	strd	r2, r3, [r1]
 801070c:	68b2      	ldr	r2, [r6, #8]
 801070e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8010712:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8010716:	9b07      	ldr	r3, [sp, #28]
 8010718:	f003 0007 	and.w	r0, r3, #7
 801071c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010726:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801072a:	6053      	str	r3, [r2, #4]
 801072c:	460b      	mov	r3, r1
 801072e:	9901      	ldr	r1, [sp, #4]
 8010730:	6010      	str	r0, [r2, #0]
 8010732:	4602      	mov	r2, r0
 8010734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010738:	f7ef fda6 	bl	8000288 <__aeabi_dsub>
 801073c:	f1ba 0f00 	cmp.w	sl, #0
 8010740:	dcb5      	bgt.n	80106ae <__kernel_rem_pio2+0x76e>
 8010742:	e7bf      	b.n	80106c4 <__kernel_rem_pio2+0x784>
 8010744:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8010746:	2b02      	cmp	r3, #2
 8010748:	dc0a      	bgt.n	8010760 <__kernel_rem_pio2+0x820>
 801074a:	2b00      	cmp	r3, #0
 801074c:	dc11      	bgt.n	8010772 <__kernel_rem_pio2+0x832>
 801074e:	f47f ae9e 	bne.w	801048e <__kernel_rem_pio2+0x54e>
 8010752:	2000      	movs	r0, #0
 8010754:	2100      	movs	r1, #0
 8010756:	e692      	b.n	801047e <__kernel_rem_pio2+0x53e>
 8010758:	9b08      	ldr	r3, [sp, #32]
 801075a:	00db      	lsls	r3, r3, #3
 801075c:	9302      	str	r3, [sp, #8]
 801075e:	e466      	b.n	801002e <__kernel_rem_pio2+0xee>
 8010760:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8010762:	2b03      	cmp	r3, #3
 8010764:	f47f ae93 	bne.w	801048e <__kernel_rem_pio2+0x54e>
 8010768:	ab48      	add	r3, sp, #288	; 0x120
 801076a:	2000      	movs	r0, #0
 801076c:	2100      	movs	r1, #0
 801076e:	9301      	str	r3, [sp, #4]
 8010770:	e6fe      	b.n	8010570 <__kernel_rem_pio2+0x630>
 8010772:	ab48      	add	r3, sp, #288	; 0x120
 8010774:	2000      	movs	r0, #0
 8010776:	2100      	movs	r1, #0
 8010778:	9301      	str	r3, [sp, #4]
 801077a:	e788      	b.n	801068e <__kernel_rem_pio2+0x74e>
 801077c:	2000      	movs	r0, #0
 801077e:	2100      	movs	r1, #0
 8010780:	e6f6      	b.n	8010570 <__kernel_rem_pio2+0x630>
 8010782:	bf00      	nop
 8010784:	3ff00000 	.word	0x3ff00000
 8010788:	41700000 	.word	0x41700000
 801078c:	3e700000 	.word	0x3e700000

08010790 <__kernel_sin>:
 8010790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010794:	ec55 4b10 	vmov	r4, r5, d0
 8010798:	b085      	sub	sp, #20
 801079a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801079e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80107a2:	ed8d 1b00 	vstr	d1, [sp]
 80107a6:	9003      	str	r0, [sp, #12]
 80107a8:	da07      	bge.n	80107ba <__kernel_sin+0x2a>
 80107aa:	ee10 0a10 	vmov	r0, s0
 80107ae:	4629      	mov	r1, r5
 80107b0:	f7f0 f9bc 	bl	8000b2c <__aeabi_d2iz>
 80107b4:	2800      	cmp	r0, #0
 80107b6:	f000 8089 	beq.w	80108cc <__kernel_sin+0x13c>
 80107ba:	4622      	mov	r2, r4
 80107bc:	462b      	mov	r3, r5
 80107be:	4620      	mov	r0, r4
 80107c0:	4629      	mov	r1, r5
 80107c2:	f7ef ff19 	bl	80005f8 <__aeabi_dmul>
 80107c6:	4606      	mov	r6, r0
 80107c8:	460f      	mov	r7, r1
 80107ca:	4632      	mov	r2, r6
 80107cc:	463b      	mov	r3, r7
 80107ce:	4620      	mov	r0, r4
 80107d0:	4629      	mov	r1, r5
 80107d2:	f7ef ff11 	bl	80005f8 <__aeabi_dmul>
 80107d6:	a343      	add	r3, pc, #268	; (adr r3, 80108e4 <__kernel_sin+0x154>)
 80107d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107dc:	4682      	mov	sl, r0
 80107de:	468b      	mov	fp, r1
 80107e0:	4630      	mov	r0, r6
 80107e2:	4639      	mov	r1, r7
 80107e4:	f7ef ff08 	bl	80005f8 <__aeabi_dmul>
 80107e8:	a340      	add	r3, pc, #256	; (adr r3, 80108ec <__kernel_sin+0x15c>)
 80107ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ee:	f7ef fd4b 	bl	8000288 <__aeabi_dsub>
 80107f2:	4632      	mov	r2, r6
 80107f4:	463b      	mov	r3, r7
 80107f6:	f7ef feff 	bl	80005f8 <__aeabi_dmul>
 80107fa:	a33e      	add	r3, pc, #248	; (adr r3, 80108f4 <__kernel_sin+0x164>)
 80107fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010800:	f7ef fd44 	bl	800028c <__adddf3>
 8010804:	4632      	mov	r2, r6
 8010806:	463b      	mov	r3, r7
 8010808:	f7ef fef6 	bl	80005f8 <__aeabi_dmul>
 801080c:	a33b      	add	r3, pc, #236	; (adr r3, 80108fc <__kernel_sin+0x16c>)
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	f7ef fd39 	bl	8000288 <__aeabi_dsub>
 8010816:	4632      	mov	r2, r6
 8010818:	463b      	mov	r3, r7
 801081a:	f7ef feed 	bl	80005f8 <__aeabi_dmul>
 801081e:	a339      	add	r3, pc, #228	; (adr r3, 8010904 <__kernel_sin+0x174>)
 8010820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010824:	f7ef fd32 	bl	800028c <__adddf3>
 8010828:	9b03      	ldr	r3, [sp, #12]
 801082a:	4680      	mov	r8, r0
 801082c:	4689      	mov	r9, r1
 801082e:	b3ab      	cbz	r3, 801089c <__kernel_sin+0x10c>
 8010830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010834:	4b2a      	ldr	r3, [pc, #168]	; (80108e0 <__kernel_sin+0x150>)
 8010836:	2200      	movs	r2, #0
 8010838:	f7ef fede 	bl	80005f8 <__aeabi_dmul>
 801083c:	4642      	mov	r2, r8
 801083e:	464b      	mov	r3, r9
 8010840:	4680      	mov	r8, r0
 8010842:	4689      	mov	r9, r1
 8010844:	4650      	mov	r0, sl
 8010846:	4659      	mov	r1, fp
 8010848:	f7ef fed6 	bl	80005f8 <__aeabi_dmul>
 801084c:	4602      	mov	r2, r0
 801084e:	460b      	mov	r3, r1
 8010850:	4640      	mov	r0, r8
 8010852:	4649      	mov	r1, r9
 8010854:	f7ef fd18 	bl	8000288 <__aeabi_dsub>
 8010858:	4632      	mov	r2, r6
 801085a:	463b      	mov	r3, r7
 801085c:	f7ef fecc 	bl	80005f8 <__aeabi_dmul>
 8010860:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010864:	f7ef fd10 	bl	8000288 <__aeabi_dsub>
 8010868:	a31b      	add	r3, pc, #108	; (adr r3, 80108d8 <__kernel_sin+0x148>)
 801086a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086e:	4606      	mov	r6, r0
 8010870:	460f      	mov	r7, r1
 8010872:	4650      	mov	r0, sl
 8010874:	4659      	mov	r1, fp
 8010876:	f7ef febf 	bl	80005f8 <__aeabi_dmul>
 801087a:	4602      	mov	r2, r0
 801087c:	460b      	mov	r3, r1
 801087e:	4630      	mov	r0, r6
 8010880:	4639      	mov	r1, r7
 8010882:	f7ef fd03 	bl	800028c <__adddf3>
 8010886:	4602      	mov	r2, r0
 8010888:	460b      	mov	r3, r1
 801088a:	4620      	mov	r0, r4
 801088c:	4629      	mov	r1, r5
 801088e:	f7ef fcfb 	bl	8000288 <__aeabi_dsub>
 8010892:	ec41 0b10 	vmov	d0, r0, r1
 8010896:	b005      	add	sp, #20
 8010898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089c:	4602      	mov	r2, r0
 801089e:	460b      	mov	r3, r1
 80108a0:	4630      	mov	r0, r6
 80108a2:	4639      	mov	r1, r7
 80108a4:	f7ef fea8 	bl	80005f8 <__aeabi_dmul>
 80108a8:	a30b      	add	r3, pc, #44	; (adr r3, 80108d8 <__kernel_sin+0x148>)
 80108aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ae:	f7ef fceb 	bl	8000288 <__aeabi_dsub>
 80108b2:	4652      	mov	r2, sl
 80108b4:	465b      	mov	r3, fp
 80108b6:	f7ef fe9f 	bl	80005f8 <__aeabi_dmul>
 80108ba:	4622      	mov	r2, r4
 80108bc:	462b      	mov	r3, r5
 80108be:	f7ef fce5 	bl	800028c <__adddf3>
 80108c2:	ec41 0b10 	vmov	d0, r0, r1
 80108c6:	b005      	add	sp, #20
 80108c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108cc:	ec45 4b10 	vmov	d0, r4, r5
 80108d0:	b005      	add	sp, #20
 80108d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108d6:	bf00      	nop
 80108d8:	55555549 	.word	0x55555549
 80108dc:	3fc55555 	.word	0x3fc55555
 80108e0:	3fe00000 	.word	0x3fe00000
 80108e4:	5acfd57c 	.word	0x5acfd57c
 80108e8:	3de5d93a 	.word	0x3de5d93a
 80108ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80108f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80108f4:	57b1fe7d 	.word	0x57b1fe7d
 80108f8:	3ec71de3 	.word	0x3ec71de3
 80108fc:	19c161d5 	.word	0x19c161d5
 8010900:	3f2a01a0 	.word	0x3f2a01a0
 8010904:	1110f8a6 	.word	0x1110f8a6
 8010908:	3f811111 	.word	0x3f811111

0801090c <fabs>:
 801090c:	ec51 0b10 	vmov	r0, r1, d0
 8010910:	ee10 2a10 	vmov	r2, s0
 8010914:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010918:	ec43 2b10 	vmov	d0, r2, r3
 801091c:	4770      	bx	lr
 801091e:	bf00      	nop

08010920 <floor>:
 8010920:	ec51 0b10 	vmov	r0, r1, d0
 8010924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010926:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801092a:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 801092e:	2d13      	cmp	r5, #19
 8010930:	ee10 6a10 	vmov	r6, s0
 8010934:	460c      	mov	r4, r1
 8010936:	dc30      	bgt.n	801099a <floor+0x7a>
 8010938:	2d00      	cmp	r5, #0
 801093a:	db1e      	blt.n	801097a <floor+0x5a>
 801093c:	4f38      	ldr	r7, [pc, #224]	; (8010a20 <floor+0x100>)
 801093e:	412f      	asrs	r7, r5
 8010940:	ea01 0307 	and.w	r3, r1, r7
 8010944:	4303      	orrs	r3, r0
 8010946:	d02d      	beq.n	80109a4 <floor+0x84>
 8010948:	a333      	add	r3, pc, #204	; (adr r3, 8010a18 <floor+0xf8>)
 801094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094e:	f7ef fc9d 	bl	800028c <__adddf3>
 8010952:	2200      	movs	r2, #0
 8010954:	2300      	movs	r3, #0
 8010956:	f7f0 f8df 	bl	8000b18 <__aeabi_dcmpgt>
 801095a:	b148      	cbz	r0, 8010970 <floor+0x50>
 801095c:	2c00      	cmp	r4, #0
 801095e:	da04      	bge.n	801096a <floor+0x4a>
 8010960:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010964:	fa43 f505 	asr.w	r5, r3, r5
 8010968:	442c      	add	r4, r5
 801096a:	ea24 0407 	bic.w	r4, r4, r7
 801096e:	2600      	movs	r6, #0
 8010970:	4623      	mov	r3, r4
 8010972:	4632      	mov	r2, r6
 8010974:	ec43 2b10 	vmov	d0, r2, r3
 8010978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801097a:	a327      	add	r3, pc, #156	; (adr r3, 8010a18 <floor+0xf8>)
 801097c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010980:	f7ef fc84 	bl	800028c <__adddf3>
 8010984:	2200      	movs	r2, #0
 8010986:	2300      	movs	r3, #0
 8010988:	f7f0 f8c6 	bl	8000b18 <__aeabi_dcmpgt>
 801098c:	2800      	cmp	r0, #0
 801098e:	d0ef      	beq.n	8010970 <floor+0x50>
 8010990:	2c00      	cmp	r4, #0
 8010992:	db29      	blt.n	80109e8 <floor+0xc8>
 8010994:	2600      	movs	r6, #0
 8010996:	4634      	mov	r4, r6
 8010998:	e7ea      	b.n	8010970 <floor+0x50>
 801099a:	2d33      	cmp	r5, #51	; 0x33
 801099c:	dd05      	ble.n	80109aa <floor+0x8a>
 801099e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80109a2:	d019      	beq.n	80109d8 <floor+0xb8>
 80109a4:	ec41 0b10 	vmov	d0, r0, r1
 80109a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109aa:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80109ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80109b2:	40df      	lsrs	r7, r3
 80109b4:	4207      	tst	r7, r0
 80109b6:	d0f5      	beq.n	80109a4 <floor+0x84>
 80109b8:	a317      	add	r3, pc, #92	; (adr r3, 8010a18 <floor+0xf8>)
 80109ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109be:	f7ef fc65 	bl	800028c <__adddf3>
 80109c2:	2200      	movs	r2, #0
 80109c4:	2300      	movs	r3, #0
 80109c6:	f7f0 f8a7 	bl	8000b18 <__aeabi_dcmpgt>
 80109ca:	2800      	cmp	r0, #0
 80109cc:	d0d0      	beq.n	8010970 <floor+0x50>
 80109ce:	2c00      	cmp	r4, #0
 80109d0:	db13      	blt.n	80109fa <floor+0xda>
 80109d2:	ea26 0607 	bic.w	r6, r6, r7
 80109d6:	e7cb      	b.n	8010970 <floor+0x50>
 80109d8:	ee10 2a10 	vmov	r2, s0
 80109dc:	460b      	mov	r3, r1
 80109de:	f7ef fc55 	bl	800028c <__adddf3>
 80109e2:	ec41 0b10 	vmov	d0, r0, r1
 80109e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80109ec:	4a0d      	ldr	r2, [pc, #52]	; (8010a24 <floor+0x104>)
 80109ee:	431e      	orrs	r6, r3
 80109f0:	2e00      	cmp	r6, #0
 80109f2:	bf18      	it	ne
 80109f4:	4614      	movne	r4, r2
 80109f6:	2600      	movs	r6, #0
 80109f8:	e7ba      	b.n	8010970 <floor+0x50>
 80109fa:	2d14      	cmp	r5, #20
 80109fc:	d008      	beq.n	8010a10 <floor+0xf0>
 80109fe:	2301      	movs	r3, #1
 8010a00:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 8010a04:	fa03 f505 	lsl.w	r5, r3, r5
 8010a08:	19ae      	adds	r6, r5, r6
 8010a0a:	bf28      	it	cs
 8010a0c:	18e4      	addcs	r4, r4, r3
 8010a0e:	e7e0      	b.n	80109d2 <floor+0xb2>
 8010a10:	3401      	adds	r4, #1
 8010a12:	e7de      	b.n	80109d2 <floor+0xb2>
 8010a14:	f3af 8000 	nop.w
 8010a18:	8800759c 	.word	0x8800759c
 8010a1c:	7e37e43c 	.word	0x7e37e43c
 8010a20:	000fffff 	.word	0x000fffff
 8010a24:	bff00000 	.word	0xbff00000

08010a28 <scalbn>:
 8010a28:	b538      	push	{r3, r4, r5, lr}
 8010a2a:	ec53 2b10 	vmov	r2, r3, d0
 8010a2e:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8010a32:	4604      	mov	r4, r0
 8010a34:	469c      	mov	ip, r3
 8010a36:	bb89      	cbnz	r1, 8010a9c <scalbn+0x74>
 8010a38:	ee10 1a10 	vmov	r1, s0
 8010a3c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8010a40:	ea5c 0101 	orrs.w	r1, ip, r1
 8010a44:	d029      	beq.n	8010a9a <scalbn+0x72>
 8010a46:	4619      	mov	r1, r3
 8010a48:	2200      	movs	r2, #0
 8010a4a:	4b3d      	ldr	r3, [pc, #244]	; (8010b40 <scalbn+0x118>)
 8010a4c:	4d3d      	ldr	r5, [pc, #244]	; (8010b44 <scalbn+0x11c>)
 8010a4e:	ee10 0a10 	vmov	r0, s0
 8010a52:	f7ef fdd1 	bl	80005f8 <__aeabi_dmul>
 8010a56:	42ac      	cmp	r4, r5
 8010a58:	4602      	mov	r2, r0
 8010a5a:	460b      	mov	r3, r1
 8010a5c:	db16      	blt.n	8010a8c <scalbn+0x64>
 8010a5e:	468c      	mov	ip, r1
 8010a60:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010a64:	3936      	subs	r1, #54	; 0x36
 8010a66:	4421      	add	r1, r4
 8010a68:	f240 70fe 	movw	r0, #2046	; 0x7fe
 8010a6c:	4281      	cmp	r1, r0
 8010a6e:	dc21      	bgt.n	8010ab4 <scalbn+0x8c>
 8010a70:	2900      	cmp	r1, #0
 8010a72:	dc47      	bgt.n	8010b04 <scalbn+0xdc>
 8010a74:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8010a78:	da34      	bge.n	8010ae4 <scalbn+0xbc>
 8010a7a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8010a7e:	428c      	cmp	r4, r1
 8010a80:	dc18      	bgt.n	8010ab4 <scalbn+0x8c>
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	a126      	add	r1, pc, #152	; (adr r1, 8010b20 <scalbn+0xf8>)
 8010a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a8a:	db44      	blt.n	8010b16 <scalbn+0xee>
 8010a8c:	a324      	add	r3, pc, #144	; (adr r3, 8010b20 <scalbn+0xf8>)
 8010a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a92:	f7ef fdb1 	bl	80005f8 <__aeabi_dmul>
 8010a96:	ec41 0b10 	vmov	d0, r0, r1
 8010a9a:	bd38      	pop	{r3, r4, r5, pc}
 8010a9c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8010aa0:	4281      	cmp	r1, r0
 8010aa2:	d1e0      	bne.n	8010a66 <scalbn+0x3e>
 8010aa4:	ee10 0a10 	vmov	r0, s0
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	f7ef fbef 	bl	800028c <__adddf3>
 8010aae:	ec41 0b10 	vmov	d0, r0, r1
 8010ab2:	bd38      	pop	{r3, r4, r5, pc}
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	a11c      	add	r1, pc, #112	; (adr r1, 8010b28 <scalbn+0x100>)
 8010ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010abc:	db07      	blt.n	8010ace <scalbn+0xa6>
 8010abe:	a31a      	add	r3, pc, #104	; (adr r3, 8010b28 <scalbn+0x100>)
 8010ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac4:	f7ef fd98 	bl	80005f8 <__aeabi_dmul>
 8010ac8:	ec41 0b10 	vmov	d0, r0, r1
 8010acc:	bd38      	pop	{r3, r4, r5, pc}
 8010ace:	a118      	add	r1, pc, #96	; (adr r1, 8010b30 <scalbn+0x108>)
 8010ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ad4:	a314      	add	r3, pc, #80	; (adr r3, 8010b28 <scalbn+0x100>)
 8010ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ada:	f7ef fd8d 	bl	80005f8 <__aeabi_dmul>
 8010ade:	ec41 0b10 	vmov	d0, r0, r1
 8010ae2:	e7f3      	b.n	8010acc <scalbn+0xa4>
 8010ae4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8010ae8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 8010aec:	3136      	adds	r1, #54	; 0x36
 8010aee:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
 8010af2:	4610      	mov	r0, r2
 8010af4:	4619      	mov	r1, r3
 8010af6:	2200      	movs	r2, #0
 8010af8:	4b13      	ldr	r3, [pc, #76]	; (8010b48 <scalbn+0x120>)
 8010afa:	f7ef fd7d 	bl	80005f8 <__aeabi_dmul>
 8010afe:	ec41 0b10 	vmov	d0, r0, r1
 8010b02:	bd38      	pop	{r3, r4, r5, pc}
 8010b04:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8010b08:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 8010b0c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
 8010b10:	ec43 2b10 	vmov	d0, r2, r3
 8010b14:	bd38      	pop	{r3, r4, r5, pc}
 8010b16:	a108      	add	r1, pc, #32	; (adr r1, 8010b38 <scalbn+0x110>)
 8010b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b1c:	e7b6      	b.n	8010a8c <scalbn+0x64>
 8010b1e:	bf00      	nop
 8010b20:	c2f8f359 	.word	0xc2f8f359
 8010b24:	01a56e1f 	.word	0x01a56e1f
 8010b28:	8800759c 	.word	0x8800759c
 8010b2c:	7e37e43c 	.word	0x7e37e43c
 8010b30:	8800759c 	.word	0x8800759c
 8010b34:	fe37e43c 	.word	0xfe37e43c
 8010b38:	c2f8f359 	.word	0xc2f8f359
 8010b3c:	81a56e1f 	.word	0x81a56e1f
 8010b40:	43500000 	.word	0x43500000
 8010b44:	ffff3cb0 	.word	0xffff3cb0
 8010b48:	3c900000 	.word	0x3c900000

08010b4c <_init>:
 8010b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b4e:	bf00      	nop
 8010b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b52:	bc08      	pop	{r3}
 8010b54:	469e      	mov	lr, r3
 8010b56:	4770      	bx	lr

08010b58 <_fini>:
 8010b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b5a:	bf00      	nop
 8010b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b5e:	bc08      	pop	{r3}
 8010b60:	469e      	mov	lr, r3
 8010b62:	4770      	bx	lr
