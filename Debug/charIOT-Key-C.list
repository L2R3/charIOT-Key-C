
charIOT-Key-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  0800fd78  0800fd78  0001fd78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106d0  080106d0  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  080106d0  080106d0  000206d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106d8  080106d8  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106d8  080106d8  000206d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106dc  080106dc  000206dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080106e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003734  200000a8  08010788  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200037dc  08010788  000337dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00069662  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006316  00000000  00000000  0009973a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004870  00000000  00000000  0009fa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000045b8  00000000  00000000  000a42c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006256  00000000  00000000  000a8878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033889  00000000  00000000  000aeace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105b95  00000000  00000000  000e2357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e7eec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001493c  00000000  00000000  001e7f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fd5c 	.word	0x0800fd5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800fd5c 	.word	0x0800fd5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	7c1b      	ldrb	r3, [r3, #16]
 8000f5a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	fb02 f303 	mul.w	r3, r2, r3
 8000f6a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f00c faf0 	bl	800d560 <memset>
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
 8000f94:	4613      	mov	r3, r2
 8000f96:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	7c1b      	ldrb	r3, [r3, #16]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	89ba      	ldrh	r2, [r7, #12]
 8000fb0:	fb12 f303 	smulbb	r3, r2, r3
 8000fb4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000fb6:	89bb      	ldrh	r3, [r7, #12]
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000fbc:	89bb      	ldrh	r3, [r7, #12]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000fc4:	7bf9      	ldrb	r1, [r7, #15]
 8000fc6:	78ba      	ldrb	r2, [r7, #2]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	2100      	movs	r1, #0
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f001 fc96 	bl	8002902 <u8x8_DrawTile>
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ff0:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ff8:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	7c5b      	ldrb	r3, [r3, #17]
 8001000:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001002:	7bba      	ldrb	r2, [r7, #14]
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	4619      	mov	r1, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ffbd 	bl	8000f88 <u8g2_send_tile_row>
    src_row++;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	3301      	adds	r3, #1
 8001018:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	7b7b      	ldrb	r3, [r7, #13]
 800101e:	429a      	cmp	r2, r3
 8001020:	d203      	bcs.n	800102a <u8g2_send_buffer+0x4c>
 8001022:	7bba      	ldrb	r2, [r7, #14]
 8001024:	7b3b      	ldrb	r3, [r7, #12]
 8001026:	429a      	cmp	r2, r3
 8001028:	d3eb      	bcc.n	8001002 <u8g2_send_buffer+0x24>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffcf 	bl	8000fde <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f001 fcaf 	bl	80029a4 <u8x8_RefreshDisplay>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	460b      	mov	r3, r1
 8001058:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4798      	blx	r3
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff5b 	bl	8000f4c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001096:	2100      	movs	r1, #0
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffd8 	bl	800104e <u8g2_SetBufferCurrTileRow>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff95 	bl	8000fde <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010ba:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	4413      	add	r3, r2
 80010c6:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	7c5b      	ldrb	r3, [r3, #17]
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d304      	bcc.n	80010de <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f001 fc65 	bl	80029a4 <u8x8_RefreshDisplay>
    return 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	e00d      	b.n	80010fa <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff2f 	bl	8000f4c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	4619      	mov	r1, r3
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffab 	bl	800104e <u8g2_SetBufferCurrTileRow>
  return 1;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffb7 	bl	800107e <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ffc8 	bl	80010a6 <u8g2_NextPage>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f9      	bne.n	8001110 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800111c:	2100      	movs	r1, #0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff95 	bl	800104e <u8g2_SetBufferCurrTileRow>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2204      	movs	r2, #4
 8001138:	701a      	strb	r2, [r3, #0]
  return buf;
 800113a:	4b03      	ldr	r3, [pc, #12]	; (8001148 <u8g2_m_16_4_f+0x1c>)
  #endif
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200000c4 	.word	0x200000c4

0800114c <u8g2_Setup_ssd1305_i2c_128x32_noname_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1305 f */
void u8g2_Setup_ssd1305_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af02      	add	r7, sp, #8
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1305_128x32_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x44>)
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x48>)
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f001 fc7d 	bl	8002a64 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 800116a:	f107 0313 	add.w	r3, r7, #19
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ffdc 	bl	800112c <u8g2_m_16_4_f>
 8001174:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001176:	7cfa      	ldrb	r2, [r7, #19]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x4c>)
 800117e:	6979      	ldr	r1, [r7, #20]
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f000 ffc4 	bl	800210e <u8g2_SetupBuffer>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	080025f9 	.word	0x080025f9
 8001194:	080027b9 	.word	0x080027b9
 8001198:	08001f91 	.word	0x08001f91

0800119c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	781b      	ldrb	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	81fb      	strh	r3, [r7, #14]
    font++;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3301      	adds	r3, #1
 80011de:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80011e0:	89fb      	ldrh	r3, [r7, #14]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	4413      	add	r3, r2
 80011f0:	81fb      	strh	r3, [r7, #14]
    return pos;
 80011f2:	89fb      	ldrh	r3, [r7, #14]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800120a:	2100      	movs	r1, #0
 800120c:	6838      	ldr	r0, [r7, #0]
 800120e:	f7ff ffc5 	bl	800119c <u8g2_font_get_byte>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800121a:	2101      	movs	r1, #1
 800121c:	6838      	ldr	r0, [r7, #0]
 800121e:	f7ff ffbd 	bl	800119c <u8g2_font_get_byte>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800122a:	2102      	movs	r1, #2
 800122c:	6838      	ldr	r0, [r7, #0]
 800122e:	f7ff ffb5 	bl	800119c <u8g2_font_get_byte>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800123a:	2103      	movs	r1, #3
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	f7ff ffad 	bl	800119c <u8g2_font_get_byte>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800124a:	2104      	movs	r1, #4
 800124c:	6838      	ldr	r0, [r7, #0]
 800124e:	f7ff ffa5 	bl	800119c <u8g2_font_get_byte>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800125a:	2105      	movs	r1, #5
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f7ff ff9d 	bl	800119c <u8g2_font_get_byte>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800126a:	2106      	movs	r1, #6
 800126c:	6838      	ldr	r0, [r7, #0]
 800126e:	f7ff ff95 	bl	800119c <u8g2_font_get_byte>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800127a:	2107      	movs	r1, #7
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f7ff ff8d 	bl	800119c <u8g2_font_get_byte>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800128a:	2108      	movs	r1, #8
 800128c:	6838      	ldr	r0, [r7, #0]
 800128e:	f7ff ff85 	bl	800119c <u8g2_font_get_byte>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800129a:	2109      	movs	r1, #9
 800129c:	6838      	ldr	r0, [r7, #0]
 800129e:	f7ff ff7d 	bl	800119c <u8g2_font_get_byte>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b25a      	sxtb	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80012aa:	210a      	movs	r1, #10
 80012ac:	6838      	ldr	r0, [r7, #0]
 80012ae:	f7ff ff75 	bl	800119c <u8g2_font_get_byte>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b25a      	sxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80012ba:	210b      	movs	r1, #11
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	f7ff ff6d 	bl	800119c <u8g2_font_get_byte>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b25a      	sxtb	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80012ca:	210c      	movs	r1, #12
 80012cc:	6838      	ldr	r0, [r7, #0]
 80012ce:	f7ff ff65 	bl	800119c <u8g2_font_get_byte>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b25a      	sxtb	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80012da:	210d      	movs	r1, #13
 80012dc:	6838      	ldr	r0, [r7, #0]
 80012de:	f7ff ff5d 	bl	800119c <u8g2_font_get_byte>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b25a      	sxtb	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80012ea:	210e      	movs	r1, #14
 80012ec:	6838      	ldr	r0, [r7, #0]
 80012ee:	f7ff ff55 	bl	800119c <u8g2_font_get_byte>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b25a      	sxtb	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80012fa:	210f      	movs	r1, #15
 80012fc:	6838      	ldr	r0, [r7, #0]
 80012fe:	f7ff ff4d 	bl	800119c <u8g2_font_get_byte>
 8001302:	4603      	mov	r3, r0
 8001304:	b25a      	sxtb	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800130a:	2110      	movs	r1, #16
 800130c:	6838      	ldr	r0, [r7, #0]
 800130e:	f7ff ff45 	bl	800119c <u8g2_font_get_byte>
 8001312:	4603      	mov	r3, r0
 8001314:	b25a      	sxtb	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800131a:	2111      	movs	r1, #17
 800131c:	6838      	ldr	r0, [r7, #0]
 800131e:	f7ff ff4f 	bl	80011c0 <u8g2_font_get_word>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800132a:	2113      	movs	r1, #19
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f7ff ff47 	bl	80011c0 <u8g2_font_get_word>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800133a:	2115      	movs	r1, #21
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f7ff ff3f 	bl	80011c0 <u8g2_font_get_word>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	82da      	strh	r2, [r3, #22]
#endif
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001352:	b480      	push	{r7}
 8001354:	b085      	sub	sp, #20
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7b1b      	ldrb	r3, [r3, #12]
 8001362:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	fa42 f303 	asr.w	r3, r2, r3
 8001374:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001376:	7b7b      	ldrb	r3, [r7, #13]
 8001378:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800137a:	7bba      	ldrb	r2, [r7, #14]
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	4413      	add	r3, r2
 8001380:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	2b07      	cmp	r3, #7
 8001386:	d91a      	bls.n	80013be <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001388:	2308      	movs	r3, #8
 800138a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800138c:	7b3a      	ldrb	r2, [r7, #12]
 800138e:	7b7b      	ldrb	r3, [r7, #13]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	b25a      	sxtb	r2, r3
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	3b08      	subs	r3, #8
 80013bc:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	4013      	ands	r3, r2
 80013d2:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7bba      	ldrb	r2, [r7, #14]
 80013d8:	731a      	strb	r2, [r3, #12]
  return val;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	4619      	mov	r1, r3
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ffaa 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	3b01      	subs	r3, #1
 800140a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800140c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	73fb      	strb	r3, [r7, #15]
  return v;
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800142e:	b490      	push	{r4, r7}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	4604      	mov	r4, r0
 8001436:	4608      	mov	r0, r1
 8001438:	4611      	mov	r1, r2
 800143a:	461a      	mov	r2, r3
 800143c:	4623      	mov	r3, r4
 800143e:	80fb      	strh	r3, [r7, #6]
 8001440:	4603      	mov	r3, r0
 8001442:	717b      	strb	r3, [r7, #5]
 8001444:	460b      	mov	r3, r1
 8001446:	713b      	strb	r3, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d014      	beq.n	800147c <u8g2_add_vector_y+0x4e>
 8001452:	2b02      	cmp	r3, #2
 8001454:	dc19      	bgt.n	800148a <u8g2_add_vector_y+0x5c>
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <u8g2_add_vector_y+0x32>
 800145a:	2b01      	cmp	r3, #1
 800145c:	d007      	beq.n	800146e <u8g2_add_vector_y+0x40>
 800145e:	e014      	b.n	800148a <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001460:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001464:	b29a      	uxth	r2, r3
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4413      	add	r3, r2
 800146a:	80fb      	strh	r3, [r7, #6]
      break;
 800146c:	e014      	b.n	8001498 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800146e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001472:	b29a      	uxth	r2, r3
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4413      	add	r3, r2
 8001478:	80fb      	strh	r3, [r7, #6]
      break;
 800147a:	e00d      	b.n	8001498 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800147c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001480:	b29b      	uxth	r3, r3
 8001482:	88fa      	ldrh	r2, [r7, #6]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	80fb      	strh	r3, [r7, #6]
      break;
 8001488:	e006      	b.n	8001498 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800148a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800148e:	b29b      	uxth	r3, r3
 8001490:	88fa      	ldrh	r2, [r7, #6]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	80fb      	strh	r3, [r7, #6]
      break;      
 8001496:	bf00      	nop
  }
  return dy;
 8001498:	88fb      	ldrh	r3, [r7, #6]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc90      	pop	{r4, r7}
 80014a2:	4770      	bx	lr

080014a4 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80014a4:	b490      	push	{r4, r7}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	4603      	mov	r3, r0
 80014b8:	717b      	strb	r3, [r7, #5]
 80014ba:	460b      	mov	r3, r1
 80014bc:	713b      	strb	r3, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d014      	beq.n	80014f2 <u8g2_add_vector_x+0x4e>
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	dc19      	bgt.n	8001500 <u8g2_add_vector_x+0x5c>
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <u8g2_add_vector_x+0x32>
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d007      	beq.n	80014e4 <u8g2_add_vector_x+0x40>
 80014d4:	e014      	b.n	8001500 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80014d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	4413      	add	r3, r2
 80014e0:	80fb      	strh	r3, [r7, #6]
      break;
 80014e2:	e014      	b.n	800150e <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80014e4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	88fa      	ldrh	r2, [r7, #6]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	80fb      	strh	r3, [r7, #6]
      break;
 80014f0:	e00d      	b.n	800150e <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80014f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	88fa      	ldrh	r2, [r7, #6]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	80fb      	strh	r3, [r7, #6]
      break;
 80014fe:	e006      	b.n	800150e <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001500:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001504:	b29a      	uxth	r2, r3
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	4413      	add	r3, r2
 800150a:	80fb      	strh	r3, [r7, #6]
      break;      
 800150c:	bf00      	nop
  }
  return dx;
 800150e:	88fb      	ldrh	r3, [r7, #6]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bc90      	pop	{r4, r7}
 8001518:	4770      	bx	lr

0800151a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b088      	sub	sp, #32
 800151e:	af02      	add	r7, sp, #8
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	70fb      	strb	r3, [r7, #3]
 8001526:	4613      	mov	r3, r2
 8001528:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3360      	adds	r3, #96	; 0x60
 800152e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800153a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001542:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800154a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	7d7b      	ldrb	r3, [r7, #21]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001558:	7dfa      	ldrb	r2, [r7, #23]
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	429a      	cmp	r2, r3
 800155e:	d201      	bcs.n	8001564 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	889b      	ldrh	r3, [r3, #4]
 8001568:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	88db      	ldrh	r3, [r3, #6]
 800156e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001570:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001574:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	7c1b      	ldrb	r3, [r3, #16]
 800157c:	89b8      	ldrh	r0, [r7, #12]
 800157e:	f7ff ff91 	bl	80014a4 <u8g2_add_vector_x>
 8001582:	4603      	mov	r3, r0
 8001584:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001586:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800158a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	7c1b      	ldrb	r3, [r3, #16]
 8001592:	8978      	ldrh	r0, [r7, #10]
 8001594:	f7ff ff4b 	bl	800142e <u8g2_add_vector_y>
 8001598:	4603      	mov	r3, r0
 800159a:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800159c:	78bb      	ldrb	r3, [r7, #2]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d010      	beq.n	80015c4 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	7b9a      	ldrb	r2, [r3, #14]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80015ac:	7dbb      	ldrb	r3, [r7, #22]
 80015ae:	b298      	uxth	r0, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	7c1b      	ldrb	r3, [r3, #16]
 80015b4:	897a      	ldrh	r2, [r7, #10]
 80015b6:	89b9      	ldrh	r1, [r7, #12]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4603      	mov	r3, r0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fbfe 	bl	8001dbe <u8g2_DrawHVLine>
 80015c2:	e013      	b.n	80015ec <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	7b5b      	ldrb	r3, [r3, #13]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10f      	bne.n	80015ec <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	7bda      	ldrb	r2, [r3, #15]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80015d6:	7dbb      	ldrb	r3, [r7, #22]
 80015d8:	b298      	uxth	r0, r3
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	7c1b      	ldrb	r3, [r3, #16]
 80015de:	897a      	ldrh	r2, [r7, #10]
 80015e0:	89b9      	ldrh	r1, [r7, #12]
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	4603      	mov	r3, r0
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fbe9 	bl	8001dbe <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80015ec:	7dfa      	ldrb	r2, [r7, #23]
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d309      	bcc.n	8001608 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80015f4:	7dfa      	ldrb	r2, [r7, #23]
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	757b      	strb	r3, [r7, #21]
    ly++;
 8001600:	7d3b      	ldrb	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001606:	e79d      	b.n	8001544 <u8g2_font_decode_len+0x2a>
      break;
 8001608:	bf00      	nop
  }
  lx += cnt;
 800160a:	7d7a      	ldrb	r2, [r7, #21]
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	4413      	add	r3, r2
 8001610:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001612:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800161a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	725a      	strb	r2, [r3, #9]
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3360      	adds	r3, #96	; 0x60
 8001638:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800164c:	4619      	mov	r1, r3
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff fe7f 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 8001654:	4603      	mov	r3, r0
 8001656:	b25a      	sxtb	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001662:	4619      	mov	r1, r3
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff fe74 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 800166a:	4603      	mov	r3, r0
 800166c:	b25a      	sxtb	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	7b9b      	ldrb	r3, [r3, #14]
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	73da      	strb	r2, [r3, #15]
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af02      	add	r7, sp, #8
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3360      	adds	r3, #96	; 0x60
 80016a6:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80016a8:	6839      	ldr	r1, [r7, #0]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffbd 	bl	800162a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80016b6:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80016be:	4619      	mov	r1, r3
 80016c0:	6978      	ldr	r0, [r7, #20]
 80016c2:	f7ff fe91 	bl	80013e8 <u8g2_font_decode_get_signed_bits>
 80016c6:	4603      	mov	r3, r0
 80016c8:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80016d0:	4619      	mov	r1, r3
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7ff fe88 	bl	80013e8 <u8g2_font_decode_get_signed_bits>
 80016d8:	4603      	mov	r3, r0
 80016da:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80016e2:	4619      	mov	r1, r3
 80016e4:	6978      	ldr	r0, [r7, #20]
 80016e6:	f7ff fe7f 	bl	80013e8 <u8g2_font_decode_get_signed_bits>
 80016ea:	4603      	mov	r3, r0
 80016ec:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f340 80d7 	ble.w	80018a8 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	8898      	ldrh	r0, [r3, #4]
 80016fe:	7cfa      	ldrb	r2, [r7, #19]
 8001700:	7c7b      	ldrb	r3, [r7, #17]
 8001702:	4413      	add	r3, r2
 8001704:	b2db      	uxtb	r3, r3
 8001706:	425b      	negs	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	b25a      	sxtb	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	7c1b      	ldrb	r3, [r3, #16]
 8001710:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001714:	f7ff fec6 	bl	80014a4 <u8g2_add_vector_x>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	88d8      	ldrh	r0, [r3, #6]
 8001724:	7cfa      	ldrb	r2, [r7, #19]
 8001726:	7c7b      	ldrb	r3, [r7, #17]
 8001728:	4413      	add	r3, r2
 800172a:	b2db      	uxtb	r3, r3
 800172c:	425b      	negs	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	b25a      	sxtb	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	7c1b      	ldrb	r3, [r3, #16]
 8001736:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800173a:	f7ff fe78 	bl	800142e <u8g2_add_vector_y>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	889b      	ldrh	r3, [r3, #4]
 800174a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	88db      	ldrh	r3, [r3, #6]
 8001750:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001752:	8bfb      	ldrh	r3, [r7, #30]
 8001754:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001756:	8b7b      	ldrh	r3, [r7, #26]
 8001758:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	7c1b      	ldrb	r3, [r3, #16]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d85a      	bhi.n	8001818 <u8g2_font_decode_glyph+0x180>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <u8g2_font_decode_glyph+0xd0>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	08001779 	.word	0x08001779
 800176c:	08001795 	.word	0x08001795
 8001770:	080017bd 	.word	0x080017bd
 8001774:	080017f1 	.word	0x080017f1
      {
	case 0:
	    x1 += decode->glyph_width;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800177e:	b29a      	uxth	r2, r3
 8001780:	8bbb      	ldrh	r3, [r7, #28]
 8001782:	4413      	add	r3, r2
 8001784:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001786:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800178a:	b29a      	uxth	r2, r3
 800178c:	8b3b      	ldrh	r3, [r7, #24]
 800178e:	4413      	add	r3, r2
 8001790:	833b      	strh	r3, [r7, #24]
	    break;
 8001792:	e041      	b.n	8001818 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001794:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001798:	b29b      	uxth	r3, r3
 800179a:	8bfa      	ldrh	r2, [r7, #30]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80017a0:	8bfb      	ldrh	r3, [r7, #30]
 80017a2:	3301      	adds	r3, #1
 80017a4:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80017a6:	8bbb      	ldrh	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	8b3b      	ldrh	r3, [r7, #24]
 80017b6:	4413      	add	r3, r2
 80017b8:	833b      	strh	r3, [r7, #24]
	    break;
 80017ba:	e02d      	b.n	8001818 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	8bfa      	ldrh	r2, [r7, #30]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80017ca:	8bfb      	ldrh	r3, [r7, #30]
 80017cc:	3301      	adds	r3, #1
 80017ce:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80017d0:	8bbb      	ldrh	r3, [r7, #28]
 80017d2:	3301      	adds	r3, #1
 80017d4:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80017d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	8b7a      	ldrh	r2, [r7, #26]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80017e2:	8b7b      	ldrh	r3, [r7, #26]
 80017e4:	3301      	adds	r3, #1
 80017e6:	837b      	strh	r3, [r7, #26]
	    y1++;
 80017e8:	8b3b      	ldrh	r3, [r7, #24]
 80017ea:	3301      	adds	r3, #1
 80017ec:	833b      	strh	r3, [r7, #24]
	    break;	  
 80017ee:	e013      	b.n	8001818 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80017f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	8bbb      	ldrh	r3, [r7, #28]
 80017f8:	4413      	add	r3, r2
 80017fa:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001802:	b29b      	uxth	r3, r3
 8001804:	8b7a      	ldrh	r2, [r7, #26]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800180a:	8b7b      	ldrh	r3, [r7, #26]
 800180c:	3301      	adds	r3, #1
 800180e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001810:	8b3b      	ldrh	r3, [r7, #24]
 8001812:	3301      	adds	r3, #1
 8001814:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001816:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001818:	8bb8      	ldrh	r0, [r7, #28]
 800181a:	8b7a      	ldrh	r2, [r7, #26]
 800181c:	8bf9      	ldrh	r1, [r7, #30]
 800181e:	8b3b      	ldrh	r3, [r7, #24]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	4603      	mov	r3, r0
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 fb88 	bl	8001f3a <u8g2_IsIntersection>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <u8g2_font_decode_glyph+0x19e>
	return d;
 8001830:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001834:	e03a      	b.n	80018ac <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2200      	movs	r2, #0
 800183a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2200      	movs	r2, #0
 8001840:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001848:	4619      	mov	r1, r3
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff fd81 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800185a:	4619      	mov	r1, r3
 800185c:	6978      	ldr	r0, [r7, #20]
 800185e:	f7ff fd78 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 8001862:	4603      	mov	r3, r0
 8001864:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	2200      	movs	r2, #0
 800186a:	4619      	mov	r1, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fe54 	bl	800151a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001872:	7bbb      	ldrb	r3, [r7, #14]
 8001874:	2201      	movs	r2, #1
 8001876:	4619      	mov	r1, r3
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fe4e 	bl	800151a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800187e:	2101      	movs	r1, #1
 8001880:	6978      	ldr	r0, [r7, #20]
 8001882:	f7ff fd66 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ec      	bne.n	8001866 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001892:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001896:	429a      	cmp	r2, r3
 8001898:	dd00      	ble.n	800189c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800189a:	e7d2      	b.n	8001842 <u8g2_font_decode_glyph+0x1aa>
	break;
 800189c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	7b9a      	ldrb	r2, [r3, #14]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 80018a8:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c4:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3317      	adds	r3, #23
 80018ca:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80018cc:	887b      	ldrh	r3, [r7, #2]
 80018ce:	2bff      	cmp	r3, #255	; 0xff
 80018d0:	d82a      	bhi.n	8001928 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	2b60      	cmp	r3, #96	; 0x60
 80018d6:	d907      	bls.n	80018e8 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80018de:	461a      	mov	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	4413      	add	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e009      	b.n	80018fc <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	2b40      	cmp	r3, #64	; 0x40
 80018ec:	d906      	bls.n	80018fc <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80018f4:	461a      	mov	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d04e      	beq.n	80019a4 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	887a      	ldrh	r2, [r7, #2]
 800190e:	429a      	cmp	r2, r3
 8001910:	d102      	bne.n	8001918 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3302      	adds	r3, #2
 8001916:	e049      	b.n	80019ac <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	4413      	add	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001926:	e7e9      	b.n	80018fc <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800192e:	461a      	mov	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	4413      	add	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800193a:	2100      	movs	r1, #0
 800193c:	6938      	ldr	r0, [r7, #16]
 800193e:	f7ff fc3f 	bl	80011c0 <u8g2_font_get_word>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	4413      	add	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800194c:	2102      	movs	r1, #2
 800194e:	6938      	ldr	r0, [r7, #16]
 8001950:	f7ff fc36 	bl	80011c0 <u8g2_font_get_word>
 8001954:	4603      	mov	r3, r0
 8001956:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	3304      	adds	r3, #4
 800195c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800195e:	89fa      	ldrh	r2, [r7, #14]
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	429a      	cmp	r2, r3
 8001964:	d3e9      	bcc.n	800193a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800196c:	89fb      	ldrh	r3, [r7, #14]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b29a      	uxth	r2, r3
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	4313      	orrs	r3, r2
 800197e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001980:	89fb      	ldrh	r3, [r7, #14]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d010      	beq.n	80019a8 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001986:	89fa      	ldrh	r2, [r7, #14]
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	429a      	cmp	r2, r3
 800198c:	d102      	bne.n	8001994 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3303      	adds	r3, #3
 8001992:	e00b      	b.n	80019ac <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3302      	adds	r3, #2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	4413      	add	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80019a2:	e7e0      	b.n	8001966 <u8g2_font_get_glyph_data+0xb2>
	break;
 80019a4:	bf00      	nop
 80019a6:	e000      	b.n	80019aa <u8g2_font_get_glyph_data+0xf6>
	break;
 80019a8:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	817b      	strh	r3, [r7, #10]
 80019c6:	460b      	mov	r3, r1
 80019c8:	813b      	strh	r3, [r7, #8]
 80019ca:	4613      	mov	r3, r2
 80019cc:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	897a      	ldrh	r2, [r7, #10]
 80019d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	893a      	ldrh	r2, [r7, #8]
 80019de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4619      	mov	r1, r3
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7ff ff64 	bl	80018b4 <u8g2_font_get_glyph_data>
 80019ec:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80019f4:	6939      	ldr	r1, [r7, #16]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fe4e 	bl	8001698 <u8g2_font_decode_glyph>
 80019fc:	4603      	mov	r3, r0
 80019fe:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001a00:	8afb      	ldrh	r3, [r7, #22]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	4608      	mov	r0, r1
 8001a16:	4611      	mov	r1, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	817b      	strh	r3, [r7, #10]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	813b      	strh	r3, [r7, #8]
 8001a22:	4613      	mov	r3, r2
 8001a24:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d833      	bhi.n	8001a98 <u8g2_DrawGlyph+0x8c>
 8001a30:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <u8g2_DrawGlyph+0x2c>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a49 	.word	0x08001a49
 8001a3c:	08001a5d 	.word	0x08001a5d
 8001a40:	08001a71 	.word	0x08001a71
 8001a44:	08001a85 	.word	0x08001a85
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	4798      	blx	r3
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	893b      	ldrh	r3, [r7, #8]
 8001a56:	4413      	add	r3, r2
 8001a58:	813b      	strh	r3, [r7, #8]
      break;
 8001a5a:	e01d      	b.n	8001a98 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	4798      	blx	r3
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	897b      	ldrh	r3, [r7, #10]
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	817b      	strh	r3, [r7, #10]
      break;
 8001a6e:	e013      	b.n	8001a98 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	4798      	blx	r3
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	893b      	ldrh	r3, [r7, #8]
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	813b      	strh	r3, [r7, #8]
      break;
 8001a82:	e009      	b.n	8001a98 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	4798      	blx	r3
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	897b      	ldrh	r3, [r7, #10]
 8001a92:	4413      	add	r3, r2
 8001a94:	817b      	strh	r3, [r7, #10]
      break;
 8001a96:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	893a      	ldrh	r2, [r7, #8]
 8001a9c:	8979      	ldrh	r1, [r7, #10]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7ff ff88 	bl	80019b4 <u8g2_font_draw_glyph>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop

08001ab0 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	817b      	strh	r3, [r7, #10]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 fc6a 	bl	800239c <u8x8_utf8_init>
  sum = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	7812      	ldrb	r2, [r2, #0]
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	4798      	blx	r3
 8001ada:	4603      	mov	r3, r0
 8001adc:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001ade:	8abb      	ldrh	r3, [r7, #20]
 8001ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d038      	beq.n	8001b5a <u8g2_draw_string+0xaa>
      break;
    str++;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3301      	adds	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001aee:	8abb      	ldrh	r3, [r7, #20]
 8001af0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d0e9      	beq.n	8001acc <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001af8:	8abb      	ldrh	r3, [r7, #20]
 8001afa:	893a      	ldrh	r2, [r7, #8]
 8001afc:	8979      	ldrh	r1, [r7, #10]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f7ff ff84 	bl	8001a0c <u8g2_DrawGlyph>
 8001b04:	4603      	mov	r3, r0
 8001b06:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d81e      	bhi.n	8001b50 <u8g2_draw_string+0xa0>
 8001b12:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <u8g2_draw_string+0x68>)
 8001b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001b33 	.word	0x08001b33
 8001b20:	08001b3d 	.word	0x08001b3d
 8001b24:	08001b47 	.word	0x08001b47
      {
	case 0:
	  x += delta;
 8001b28:	897a      	ldrh	r2, [r7, #10]
 8001b2a:	8a7b      	ldrh	r3, [r7, #18]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	817b      	strh	r3, [r7, #10]
	  break;
 8001b30:	e00e      	b.n	8001b50 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001b32:	893a      	ldrh	r2, [r7, #8]
 8001b34:	8a7b      	ldrh	r3, [r7, #18]
 8001b36:	4413      	add	r3, r2
 8001b38:	813b      	strh	r3, [r7, #8]
	  break;
 8001b3a:	e009      	b.n	8001b50 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001b3c:	897a      	ldrh	r2, [r7, #10]
 8001b3e:	8a7b      	ldrh	r3, [r7, #18]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	817b      	strh	r3, [r7, #10]
	  break;
 8001b44:	e004      	b.n	8001b50 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001b46:	893a      	ldrh	r2, [r7, #8]
 8001b48:	8a7b      	ldrh	r3, [r7, #18]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	813b      	strh	r3, [r7, #8]
	  break;
 8001b4e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001b50:	8afa      	ldrh	r2, [r7, #22]
 8001b52:	8a7b      	ldrh	r3, [r7, #18]
 8001b54:	4413      	add	r3, r2
 8001b56:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001b58:	e7b8      	b.n	8001acc <u8g2_draw_string+0x1c>
      break;
 8001b5a:	bf00      	nop
    }
  }
  return sum;
 8001b5c:	8afb      	ldrh	r3, [r7, #22]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop

08001b68 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	817b      	strh	r3, [r7, #10]
 8001b76:	4613      	mov	r3, r2
 8001b78:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <u8g2_DrawStr+0x30>)
 8001b7e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001b80:	893a      	ldrh	r2, [r7, #8]
 8001b82:	8979      	ldrh	r1, [r7, #10]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7ff ff92 	bl	8001ab0 <u8g2_draw_string>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	080023b9 	.word	0x080023b9

08001b9c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d05d      	beq.n	8001c68 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d04d      	beq.n	8001c6a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d11c      	bne.n	8001c12 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8001be4:	429a      	cmp	r2, r3
 8001be6:	da05      	bge.n	8001bf4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dd32      	ble.n	8001c6a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001c10:	e02b      	b.n	8001c6a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001c20:	4619      	mov	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001c28:	440b      	add	r3, r1
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	da0d      	bge.n	8001c4a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	b25a      	sxtb	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dd07      	ble.n	8001c6a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001c66:	e000      	b.n	8001c6a <u8g2_UpdateRefHeight+0xce>
    return;
 8001c68:	bf00      	nop
  }  
}
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <u8g2_SetFontPosBaseline+0x1c>)
 8001c98:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	08001c75 	.word	0x08001c75

08001cac <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d00b      	beq.n	8001cd8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3374      	adds	r3, #116	; 0x74
 8001cca:	6839      	ldr	r1, [r7, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fa97 	bl	8001200 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ff62 	bl	8001b9c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	4611      	mov	r1, r2
 8001cec:	461a      	mov	r2, r3
 8001cee:	460b      	mov	r3, r1
 8001cf0:	80fb      	strh	r3, [r7, #6]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001cfc:	8afb      	ldrh	r3, [r7, #22]
 8001cfe:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	881a      	ldrh	r2, [r3, #0]
 8001d04:	8abb      	ldrh	r3, [r7, #20]
 8001d06:	4413      	add	r3, r2
 8001d08:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001d0a:	8afa      	ldrh	r2, [r7, #22]
 8001d0c:	8abb      	ldrh	r3, [r7, #20]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d90b      	bls.n	8001d2a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001d12:	8afa      	ldrh	r2, [r7, #22]
 8001d14:	88bb      	ldrh	r3, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d205      	bcs.n	8001d26 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001d1a:	88bb      	ldrh	r3, [r7, #4]
 8001d1c:	82bb      	strh	r3, [r7, #20]
      b--;
 8001d1e:	8abb      	ldrh	r3, [r7, #20]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	82bb      	strh	r3, [r7, #20]
 8001d24:	e001      	b.n	8001d2a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001d2a:	8afa      	ldrh	r2, [r7, #22]
 8001d2c:	88bb      	ldrh	r3, [r7, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d301      	bcc.n	8001d36 <u8g2_clip_intersection2+0x56>
    return 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e01c      	b.n	8001d70 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001d36:	8aba      	ldrh	r2, [r7, #20]
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d801      	bhi.n	8001d42 <u8g2_clip_intersection2+0x62>
    return 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e016      	b.n	8001d70 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001d42:	8afa      	ldrh	r2, [r7, #22]
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d201      	bcs.n	8001d4e <u8g2_clip_intersection2+0x6e>
    a = c;
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8001d4e:	8aba      	ldrh	r2, [r7, #20]
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d901      	bls.n	8001d5a <u8g2_clip_intersection2+0x7a>
    b = d;
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8afa      	ldrh	r2, [r7, #22]
 8001d5e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001d60:	8aba      	ldrh	r2, [r7, #20]
 8001d62:	8afb      	ldrh	r3, [r7, #22]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	8aba      	ldrh	r2, [r7, #20]
 8001d6c:	801a      	strh	r2, [r3, #0]
  return 1;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	817b      	strh	r3, [r7, #10]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	813b      	strh	r3, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d9a:	893a      	ldrh	r2, [r7, #8]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001da4:	88f8      	ldrh	r0, [r7, #6]
 8001da6:	893a      	ldrh	r2, [r7, #8]
 8001da8:	8979      	ldrh	r1, [r7, #10]
 8001daa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	4603      	mov	r3, r0
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	47a0      	blx	r4
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}

08001dbe <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001dbe:	b590      	push	{r4, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	af02      	add	r7, sp, #8
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	4608      	mov	r0, r1
 8001dc8:	4611      	mov	r1, r2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4603      	mov	r3, r0
 8001dce:	817b      	strh	r3, [r7, #10]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	813b      	strh	r3, [r7, #8]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d075      	beq.n	8001ece <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d072      	beq.n	8001ece <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d91a      	bls.n	8001e24 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8001dee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d109      	bne.n	8001e0a <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8001df6:	897a      	ldrh	r2, [r7, #10]
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	817b      	strh	r3, [r7, #10]
	  x++;
 8001e00:	897b      	ldrh	r3, [r7, #10]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	817b      	strh	r3, [r7, #10]
 8001e08:	e00c      	b.n	8001e24 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001e0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d108      	bne.n	8001e24 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8001e12:	893a      	ldrh	r2, [r7, #8]
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	813b      	strh	r3, [r7, #8]
	  y++;
 8001e1c:	893b      	ldrh	r3, [r7, #8]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001e24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001e30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d11a      	bne.n	8001e6e <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001e3e:	893b      	ldrh	r3, [r7, #8]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d83b      	bhi.n	8001ebc <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8001e4a:	893b      	ldrh	r3, [r7, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d937      	bls.n	8001ec0 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001e5c:	1db9      	adds	r1, r7, #6
 8001e5e:	f107 000a 	add.w	r0, r7, #10
 8001e62:	f7ff ff3d 	bl	8001ce0 <u8g2_clip_intersection2>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d11a      	bne.n	8001ea2 <u8g2_DrawHVLine+0xe4>
	  return;
 8001e6c:	e02f      	b.n	8001ece <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001e74:	897b      	ldrh	r3, [r7, #10]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d824      	bhi.n	8001ec4 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001e80:	897b      	ldrh	r3, [r7, #10]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d920      	bls.n	8001ec8 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001e92:	1db9      	adds	r1, r7, #6
 8001e94:	f107 0008 	add.w	r0, r7, #8
 8001e98:	f7ff ff22 	bl	8001ce0 <u8g2_clip_intersection2>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d014      	beq.n	8001ecc <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	689c      	ldr	r4, [r3, #8]
 8001ea8:	8979      	ldrh	r1, [r7, #10]
 8001eaa:	893a      	ldrh	r2, [r7, #8]
 8001eac:	88f8      	ldrh	r0, [r7, #6]
 8001eae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	47a0      	blx	r4
 8001eba:	e008      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ebc:	bf00      	nop
 8001ebe:	e006      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ec0:	bf00      	nop
 8001ec2:	e004      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ec4:	bf00      	nop
 8001ec6:	e002      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ec8:	bf00      	nop
 8001eca:	e000      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ecc:	bf00      	nop
    }
}
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd90      	pop	{r4, r7, pc}

08001ed4 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001ed4:	b490      	push	{r4, r7}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4604      	mov	r4, r0
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	80fb      	strh	r3, [r7, #6]
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	80bb      	strh	r3, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	807b      	strh	r3, [r7, #2]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	88bb      	ldrh	r3, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d20d      	bcs.n	8001f16 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001efa:	883a      	ldrh	r2, [r7, #0]
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d901      	bls.n	8001f06 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e014      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	883b      	ldrh	r3, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d901      	bls.n	8001f12 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00e      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e00c      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001f16:	883a      	ldrh	r2, [r7, #0]
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d907      	bls.n	8001f2e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	883b      	ldrh	r3, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d901      	bls.n	8001f2a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e002      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001f2e:	2300      	movs	r3, #0
    }
  }
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc90      	pop	{r4, r7}
 8001f38:	4770      	bx	lr

08001f3a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	4608      	mov	r0, r1
 8001f44:	4611      	mov	r1, r2
 8001f46:	461a      	mov	r2, r3
 8001f48:	4603      	mov	r3, r0
 8001f4a:	817b      	strh	r3, [r7, #10]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	813b      	strh	r3, [r7, #8]
 8001f50:	4613      	mov	r3, r2
 8001f52:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8001f60:	8b3b      	ldrh	r3, [r7, #24]
 8001f62:	893a      	ldrh	r2, [r7, #8]
 8001f64:	f7ff ffb6 	bl	8001ed4 <u8g2_is_intersection_decision_tree>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <u8g2_IsIntersection+0x38>
    return 0; 
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e00a      	b.n	8001f88 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	897a      	ldrh	r2, [r7, #10]
 8001f82:	f7ff ffa7 	bl	8001ed4 <u8g2_is_intersection_decision_tree>
 8001f86:	4603      	mov	r3, r0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	817b      	strh	r3, [r7, #10]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	813b      	strh	r3, [r7, #8]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001faa:	893b      	ldrh	r3, [r7, #8]
 8001fac:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001fae:	7efb      	ldrb	r3, [r7, #27]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001fba:	7e3a      	ldrb	r2, [r7, #24]
 8001fbc:	7efb      	ldrb	r3, [r7, #27]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d801      	bhi.n	8001fda <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001fd6:	7e3b      	ldrb	r3, [r7, #24]
 8001fd8:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d001      	beq.n	8001fe8 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001fe4:	7e3b      	ldrb	r3, [r7, #24]
 8001fe6:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001fe8:	893b      	ldrh	r3, [r7, #8]
 8001fea:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001fec:	8afb      	ldrh	r3, [r7, #22]
 8001fee:	f023 0307 	bic.w	r3, r3, #7
 8001ff2:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	7c1b      	ldrb	r3, [r3, #16]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	8afa      	ldrh	r2, [r7, #22]
 8001ffe:	fb12 f303 	smulbb	r3, r2, r3
 8002002:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002008:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800200a:	8afb      	ldrh	r3, [r7, #22]
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	4413      	add	r3, r2
 8002010:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002012:	897b      	ldrh	r3, [r7, #10]
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	4413      	add	r3, r2
 8002018:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800201a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	d117      	bne.n	8002052 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	7ebb      	ldrb	r3, [r7, #26]
 8002028:	4313      	orrs	r3, r2
 800202a:	b2da      	uxtb	r2, r3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	7e7b      	ldrb	r3, [r7, #25]
 8002036:	4053      	eors	r3, r2
 8002038:	b2da      	uxtb	r2, r3
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	701a      	strb	r2, [r3, #0]
	ptr++;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
	len--;
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	3b01      	subs	r3, #1
 8002048:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e8      	bne.n	8002022 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002050:	e038      	b.n	80020c4 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	7ebb      	ldrb	r3, [r7, #26]
 8002058:	4313      	orrs	r3, r2
 800205a:	b2da      	uxtb	r2, r3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	781a      	ldrb	r2, [r3, #0]
 8002064:	7e7b      	ldrb	r3, [r7, #25]
 8002066:	4053      	eors	r3, r2
 8002068:	b2da      	uxtb	r2, r3
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800206e:	7efb      	ldrb	r3, [r7, #27]
 8002070:	3301      	adds	r3, #1
 8002072:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002074:	7efb      	ldrb	r3, [r7, #27]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	76fb      	strb	r3, [r7, #27]
      len--;
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	3b01      	subs	r3, #1
 8002080:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002082:	7efb      	ldrb	r3, [r7, #27]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d114      	bne.n	80020b2 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800208c:	461a      	mov	r2, r3
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	4413      	add	r3, r2
 8002092:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800209a:	2b01      	cmp	r3, #1
 800209c:	d801      	bhi.n	80020a2 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800209e:	2301      	movs	r3, #1
 80020a0:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d008      	beq.n	80020be <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	767b      	strb	r3, [r7, #25]
 80020b0:	e005      	b.n	80020be <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80020b2:	7ebb      	ldrb	r3, [r7, #26]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80020b8:	7e7b      	ldrb	r3, [r7, #25]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1c6      	bne.n	8002052 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80020c4:	bf00      	nop
 80020c6:	3724      	adds	r7, #36	; 0x24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	4613      	mov	r3, r2
 800211c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	79fa      	ldrb	r2, [r7, #7]
 8002134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f7ff ffa9 	bl	80020d0 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff fd84 	bl	8001c8c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021a8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80021aa:	89fb      	ldrh	r3, [r7, #14]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	89fa      	ldrh	r2, [r7, #14]
 80021b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	7c1b      	ldrb	r3, [r3, #16]
 80021ba:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80021bc:	89fb      	ldrh	r3, [r7, #14]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	89fa      	ldrh	r2, [r7, #14]
 80021c6:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021ce:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80021d0:	89fb      	ldrh	r3, [r7, #14]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	89fa      	ldrh	r2, [r7, #14]
 80021da:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021e2:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80021e4:	89fb      	ldrh	r3, [r7, #14]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80021ec:	4413      	add	r3, r2
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	7c52      	ldrb	r2, [r2, #17]
 80021f2:	4293      	cmp	r3, r2
 80021f4:	dd08      	ble.n	8002208 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	7c5b      	ldrb	r3, [r3, #17]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002202:	b29b      	uxth	r3, r3
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002208:	89fb      	ldrh	r3, [r7, #14]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800222a:	89fb      	ldrh	r3, [r7, #14]
 800222c:	4413      	add	r3, r2
 800222e:	b29a      	uxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	8a9a      	ldrh	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	8ada      	ldrh	r2, [r3, #22]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af02      	add	r7, sp, #8
 800225c:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	4603      	mov	r3, r0
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff fe5d 	bl	8001f3a <u8g2_IsIntersection>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d104      	bne.n	8002290 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800228e:	e03b      	b.n	8002308 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d205      	bcs.n	80022b4 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d905      	bls.n	80022d0 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80022dc:	429a      	cmp	r2, r3
 80022de:	d205      	bcs.n	80022ec <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d905      	bls.n	8002308 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff3b 	bl	8002194 <u8g2_update_dimension_common>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ff7b 	bl	8002256 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	4603      	mov	r3, r0
 8002378:	817b      	strh	r3, [r7, #10]
 800237a:	460b      	mov	r3, r1
 800237c:	813b      	strh	r3, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002382:	88f8      	ldrh	r0, [r7, #6]
 8002384:	893a      	ldrh	r2, [r7, #8]
 8002386:	8979      	ldrh	r1, [r7, #10]
 8002388:	7e3b      	ldrb	r3, [r7, #24]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	4603      	mov	r3, r0
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff fcf4 	bl	8001d7c <u8g2_draw_hv_line_2dir>
}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <u8x8_ascii_next+0x18>
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	2b0a      	cmp	r3, #10
 80023ce:	d102      	bne.n	80023d6 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80023d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d4:	e001      	b.n	80023da <u8x8_ascii_next+0x22>
  return b;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	b29b      	uxth	r3, r3
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80023e6:	b590      	push	{r4, r7, lr}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	460b      	mov	r3, r1
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	691c      	ldr	r4, [r3, #16]
 80023f8:	7afa      	ldrb	r2, [r7, #11]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2117      	movs	r1, #23
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	47a0      	blx	r4
 8002402:	4603      	mov	r3, r0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}

0800240c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002418:	1cfb      	adds	r3, r7, #3
 800241a:	461a      	mov	r2, r3
 800241c:	2101      	movs	r1, #1
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ffe1 	bl	80023e6 <u8x8_byte_SendBytes>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800242e:	b590      	push	{r4, r7, lr}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691c      	ldr	r4, [r3, #16]
 800243a:	2300      	movs	r3, #0
 800243c:	2200      	movs	r2, #0
 800243e:	2118      	movs	r1, #24
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	47a0      	blx	r4
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bd90      	pop	{r4, r7, pc}

0800244e <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800244e:	b590      	push	{r4, r7, lr}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691c      	ldr	r4, [r3, #16]
 800245a:	2300      	movs	r3, #0
 800245c:	2200      	movs	r2, #0
 800245e:	2119      	movs	r1, #25
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	47a0      	blx	r4
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}

0800246e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800246e:	b590      	push	{r4, r7, lr}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68dc      	ldr	r4, [r3, #12]
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	2300      	movs	r3, #0
 8002482:	2115      	movs	r1, #21
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	47a0      	blx	r4
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bd90      	pop	{r4, r7, pc}

08002492 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002492:	b590      	push	{r4, r7, lr}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68dc      	ldr	r4, [r3, #12]
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	2300      	movs	r3, #0
 80024a6:	2116      	movs	r1, #22
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	47a0      	blx	r4
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd90      	pop	{r4, r7, pc}

080024b6 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80024b6:	b590      	push	{r4, r7, lr}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	460b      	mov	r3, r1
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68dc      	ldr	r4, [r3, #12]
 80024c8:	7afa      	ldrb	r2, [r7, #11]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2117      	movs	r1, #23
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	47a0      	blx	r4
 80024d2:	4603      	mov	r3, r0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd90      	pop	{r4, r7, pc}

080024dc <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68dc      	ldr	r4, [r3, #12]
 80024e8:	2300      	movs	r3, #0
 80024ea:	2200      	movs	r2, #0
 80024ec:	2118      	movs	r1, #24
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	47a0      	blx	r4
 80024f2:	4603      	mov	r3, r0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd90      	pop	{r4, r7, pc}

080024fc <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68dc      	ldr	r4, [r3, #12]
 8002508:	2300      	movs	r3, #0
 800250a:	2200      	movs	r2, #0
 800250c:	2119      	movs	r1, #25
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	47a0      	blx	r4
 8002512:	4603      	mov	r3, r0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bd90      	pop	{r4, r7, pc}

0800251c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	73fb      	strb	r3, [r7, #15]
    data++;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2bfe      	cmp	r3, #254	; 0xfe
 8002536:	d031      	beq.n	800259c <u8x8_cad_SendSequence+0x80>
 8002538:	2bfe      	cmp	r3, #254	; 0xfe
 800253a:	dc3d      	bgt.n	80025b8 <u8x8_cad_SendSequence+0x9c>
 800253c:	2b19      	cmp	r3, #25
 800253e:	dc3b      	bgt.n	80025b8 <u8x8_cad_SendSequence+0x9c>
 8002540:	2b18      	cmp	r3, #24
 8002542:	da23      	bge.n	800258c <u8x8_cad_SendSequence+0x70>
 8002544:	2b16      	cmp	r3, #22
 8002546:	dc02      	bgt.n	800254e <u8x8_cad_SendSequence+0x32>
 8002548:	2b15      	cmp	r3, #21
 800254a:	da03      	bge.n	8002554 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800254c:	e034      	b.n	80025b8 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800254e:	2b17      	cmp	r3, #23
 8002550:	d00e      	beq.n	8002570 <u8x8_cad_SendSequence+0x54>
	return;
 8002552:	e031      	b.n	80025b8 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68dc      	ldr	r4, [r3, #12]
 800255e:	7bba      	ldrb	r2, [r7, #14]
 8002560:	7bf9      	ldrb	r1, [r7, #15]
 8002562:	2300      	movs	r3, #0
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	47a0      	blx	r4
	  data++;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	3301      	adds	r3, #1
 800256c:	603b      	str	r3, [r7, #0]
	  break;
 800256e:	e022      	b.n	80025b6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002576:	f107 030e 	add.w	r3, r7, #14
 800257a:	461a      	mov	r2, r3
 800257c:	2101      	movs	r1, #1
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ff99 	bl	80024b6 <u8x8_cad_SendData>
	  data++;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	603b      	str	r3, [r7, #0]
	  break;
 800258a:	e014      	b.n	80025b6 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68dc      	ldr	r4, [r3, #12]
 8002590:	7bf9      	ldrb	r1, [r7, #15]
 8002592:	2300      	movs	r3, #0
 8002594:	2200      	movs	r2, #0
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	47a0      	blx	r4
	  break;
 800259a:	e00c      	b.n	80025b6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80025a2:	7bbb      	ldrb	r3, [r7, #14]
 80025a4:	461a      	mov	r2, r3
 80025a6:	2129      	movs	r1, #41	; 0x29
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fa0a 	bl	80029c2 <u8x8_gpio_call>
	  data++;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	603b      	str	r3, [r7, #0]
	  break;
 80025b4:	bf00      	nop
    cmd = *data;
 80025b6:	e7b6      	b.n	8002526 <u8x8_cad_SendSequence+0xa>
	return;
 80025b8:	bf00      	nop
    }
  }
}
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}

080025c0 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	460b      	mov	r3, r1
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7ff ff2d 	bl	800242e <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80025d4:	2140      	movs	r1, #64	; 0x40
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f7ff ff18 	bl	800240c <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	691c      	ldr	r4, [r3, #16]
 80025e0:	7afa      	ldrb	r2, [r7, #11]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2117      	movs	r1, #23
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7ff ff2f 	bl	800244e <u8x8_byte_EndTransfer>
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd90      	pop	{r4, r7, pc}

080025f8 <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	72fb      	strb	r3, [r7, #11]
 8002606:	4613      	mov	r3, r2
 8002608:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	3b14      	subs	r3, #20
 800260e:	2b05      	cmp	r3, #5
 8002610:	d848      	bhi.n	80026a4 <u8x8_cad_ssd13xx_i2c+0xac>
 8002612:	a201      	add	r2, pc, #4	; (adr r2, 8002618 <u8x8_cad_ssd13xx_i2c+0x20>)
 8002614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002618:	08002681 	.word	0x08002681
 800261c:	08002631 	.word	0x08002631
 8002620:	08002631 	.word	0x08002631
 8002624:	08002651 	.word	0x08002651
 8002628:	080026a9 	.word	0x080026a9
 800262c:	080026a9 	.word	0x080026a9
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7ff fefc 	bl	800242e <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 8002636:	2100      	movs	r1, #0
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff fee7 	bl	800240c <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800263e:	7abb      	ldrb	r3, [r7, #10]
 8002640:	4619      	mov	r1, r3
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff fee2 	bl	800240c <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f7ff ff00 	bl	800244e <u8x8_byte_EndTransfer>
      break;
 800264e:	e02c      	b.n	80026aa <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002654:	e00a      	b.n	800266c <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	2118      	movs	r1, #24
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff ffb0 	bl	80025c0 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002660:	7abb      	ldrb	r3, [r7, #10]
 8002662:	3b18      	subs	r3, #24
 8002664:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3318      	adds	r3, #24
 800266a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800266c:	7abb      	ldrb	r3, [r7, #10]
 800266e:	2b18      	cmp	r3, #24
 8002670:	d8f1      	bhi.n	8002656 <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002672:	7abb      	ldrb	r3, [r7, #10]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4619      	mov	r1, r3
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff ffa1 	bl	80025c0 <u8x8_i2c_data_transfer>
      break;
 800267e:	e014      	b.n	80026aa <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002686:	2bff      	cmp	r3, #255	; 0xff
 8002688:	d103      	bne.n	8002692 <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2278      	movs	r2, #120	; 0x78
 800268e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	691c      	ldr	r4, [r3, #16]
 8002696:	7aba      	ldrb	r2, [r7, #10]
 8002698:	7af9      	ldrb	r1, [r7, #11]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	47a0      	blx	r4
 80026a0:	4603      	mov	r3, r0
 80026a2:	e003      	b.n	80026ac <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e001      	b.n	80026ac <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 80026a8:	bf00      	nop
  }
  return 1;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd90      	pop	{r4, r7, pc}

080026b4 <u8x8_d_ssd1305_generic>:
};



static uint8_t u8x8_d_ssd1305_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	72fb      	strb	r3, [r7, #11]
 80026c2:	4613      	mov	r3, r2
 80026c4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d006      	beq.n	80026da <u8x8_d_ssd1305_generic+0x26>
 80026cc:	2b0f      	cmp	r3, #15
 80026ce:	dc67      	bgt.n	80027a0 <u8x8_d_ssd1305_generic+0xec>
 80026d0:	2b0b      	cmp	r3, #11
 80026d2:	d048      	beq.n	8002766 <u8x8_d_ssd1305_generic+0xb2>
 80026d4:	2b0e      	cmp	r3, #14
 80026d6:	d053      	beq.n	8002780 <u8x8_d_ssd1305_generic+0xcc>
 80026d8:	e062      	b.n	80027a0 <u8x8_d_ssd1305_generic+0xec>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7ff fefe 	bl	80024dc <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	795b      	ldrb	r3, [r3, #5]
 80026e4:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	4413      	add	r3, r2
 80026f6:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff feb7 	bl	800246e <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f043 0310 	orr.w	r3, r3, #16
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff fead 	bl	800246e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	b2db      	uxtb	r3, r3
 800271c:	4619      	mov	r1, r3
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f7ff feb7 	bl	8002492 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	799b      	ldrb	r3, [r3, #6]
 8002728:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff feae 	bl	8002492 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	791b      	ldrb	r3, [r3, #4]
 800273a:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002742:	7dbb      	ldrb	r3, [r7, #22]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4619      	mov	r1, r3
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff feb2 	bl	80024b6 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002752:	7abb      	ldrb	r3, [r7, #10]
 8002754:	3b01      	subs	r3, #1
 8002756:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002758:	7abb      	ldrb	r3, [r7, #10]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1eb      	bne.n	8002736 <u8x8_d_ssd1305_generic+0x82>
      
      u8x8_cad_EndTransfer(u8x8);
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7ff fecc 	bl	80024fc <u8x8_cad_EndTransfer>
      break;
 8002764:	e01e      	b.n	80027a4 <u8x8_d_ssd1305_generic+0xf0>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002766:	7abb      	ldrb	r3, [r7, #10]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <u8x8_d_ssd1305_generic+0xc2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave0_seq);
 800276c:	4910      	ldr	r1, [pc, #64]	; (80027b0 <u8x8_d_ssd1305_generic+0xfc>)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff fed4 	bl	800251c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
      break;
 8002774:	e016      	b.n	80027a4 <u8x8_d_ssd1305_generic+0xf0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
 8002776:	490f      	ldr	r1, [pc, #60]	; (80027b4 <u8x8_d_ssd1305_generic+0x100>)
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff fecf 	bl	800251c <u8x8_cad_SendSequence>
      break;
 800277e:	e011      	b.n	80027a4 <u8x8_d_ssd1305_generic+0xf0>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f7ff feab 	bl	80024dc <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002786:	2181      	movs	r1, #129	; 0x81
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff fe70 	bl	800246e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1305 has range from 0 to 255 */
 800278e:	7abb      	ldrb	r3, [r7, #10]
 8002790:	4619      	mov	r1, r3
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f7ff fe7d 	bl	8002492 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff feaf 	bl	80024fc <u8x8_cad_EndTransfer>
      break;
 800279e:	e001      	b.n	80027a4 <u8x8_d_ssd1305_generic+0xf0>
#endif
    default:
      return 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e000      	b.n	80027a6 <u8x8_d_ssd1305_generic+0xf2>
  }
  return 1;
 80027a4:	2301      	movs	r3, #1
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	080102a8 	.word	0x080102a8
 80027b4:	080102b0 	.word	0x080102b0

080027b8 <u8x8_d_ssd1305_128x32_noname>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1305_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	72fb      	strb	r3, [r7, #11]
 80027c6:	4613      	mov	r3, r2
 80027c8:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1305_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80027ca:	7aba      	ldrb	r2, [r7, #10]
 80027cc:	7af9      	ldrb	r1, [r7, #11]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff ff6f 	bl	80026b4 <u8x8_d_ssd1305_generic>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <u8x8_d_ssd1305_128x32_noname+0x28>
    return 1;
 80027dc:	2301      	movs	r3, #1
 80027de:	e032      	b.n	8002846 <u8x8_d_ssd1305_128x32_noname+0x8e>
  
  switch(msg)
 80027e0:	7afb      	ldrb	r3, [r7, #11]
 80027e2:	2b0d      	cmp	r3, #13
 80027e4:	d006      	beq.n	80027f4 <u8x8_d_ssd1305_128x32_noname+0x3c>
 80027e6:	2b0d      	cmp	r3, #13
 80027e8:	dc2a      	bgt.n	8002840 <u8x8_d_ssd1305_128x32_noname+0x88>
 80027ea:	2b09      	cmp	r3, #9
 80027ec:	d023      	beq.n	8002836 <u8x8_d_ssd1305_128x32_noname+0x7e>
 80027ee:	2b0a      	cmp	r3, #10
 80027f0:	d019      	beq.n	8002826 <u8x8_d_ssd1305_128x32_noname+0x6e>
 80027f2:	e025      	b.n	8002840 <u8x8_d_ssd1305_128x32_noname+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80027f4:	7abb      	ldrb	r3, [r7, #10]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10a      	bne.n	8002810 <u8x8_d_ssd1305_128x32_noname+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip0_seq);
 80027fa:	4915      	ldr	r1, [pc, #84]	; (8002850 <u8x8_d_ssd1305_128x32_noname+0x98>)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f7ff fe8d 	bl	800251c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	7c9a      	ldrb	r2, [r3, #18]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800280e:	e019      	b.n	8002844 <u8x8_d_ssd1305_128x32_noname+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
 8002810:	4910      	ldr	r1, [pc, #64]	; (8002854 <u8x8_d_ssd1305_128x32_noname+0x9c>)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff fe82 	bl	800251c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	7cda      	ldrb	r2, [r3, #19]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002824:	e00e      	b.n	8002844 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f82e 	bl	8002888 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_noname_init_seq);    
 800282c:	490a      	ldr	r1, [pc, #40]	; (8002858 <u8x8_d_ssd1305_128x32_noname+0xa0>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff fe74 	bl	800251c <u8x8_cad_SendSequence>
      break;
 8002834:	e006      	b.n	8002844 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1305_128x32_noname_display_info);
 8002836:	4909      	ldr	r1, [pc, #36]	; (800285c <u8x8_d_ssd1305_128x32_noname+0xa4>)
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f811 	bl	8002860 <u8x8_d_helper_display_setup_memory>
      break;
 800283e:	e001      	b.n	8002844 <u8x8_d_ssd1305_128x32_noname+0x8c>
    default:
      return 0;
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <u8x8_d_ssd1305_128x32_noname+0x8e>
  }
  return 1;
 8002844:	2301      	movs	r3, #1
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	080102b8 	.word	0x080102b8
 8002854:	080102c4 	.word	0x080102c4
 8002858:	080102e8 	.word	0x080102e8
 800285c:	080102d0 	.word	0x080102d0

08002860 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	7c9a      	ldrb	r2, [r3, #18]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695c      	ldr	r4, [r3, #20]
 8002894:	2300      	movs	r3, #0
 8002896:	2200      	movs	r2, #0
 8002898:	2128      	movs	r1, #40	; 0x28
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68dc      	ldr	r4, [r3, #12]
 80028a2:	2300      	movs	r3, #0
 80028a4:	2200      	movs	r2, #0
 80028a6:	2114      	movs	r1, #20
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80028ac:	2201      	movs	r2, #1
 80028ae:	214b      	movs	r1, #75	; 0x4b
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f886 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	791b      	ldrb	r3, [r3, #4]
 80028bc:	461a      	mov	r2, r3
 80028be:	2129      	movs	r1, #41	; 0x29
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f87e 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	214b      	movs	r1, #75	; 0x4b
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f879 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	791b      	ldrb	r3, [r3, #4]
 80028d6:	461a      	mov	r2, r3
 80028d8:	2129      	movs	r1, #41	; 0x29
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f871 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80028e0:	2201      	movs	r2, #1
 80028e2:	214b      	movs	r1, #75	; 0x4b
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f86c 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	795b      	ldrb	r3, [r3, #5]
 80028f0:	461a      	mov	r2, r3
 80028f2:	2129      	movs	r1, #41	; 0x29
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f864 	bl	80029c2 <u8x8_gpio_call>
}    
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}

08002902 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002902:	b590      	push	{r4, r7, lr}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	4608      	mov	r0, r1
 800290c:	4611      	mov	r1, r2
 800290e:	461a      	mov	r2, r3
 8002910:	4603      	mov	r3, r0
 8002912:	70fb      	strb	r3, [r7, #3]
 8002914:	460b      	mov	r3, r1
 8002916:	70bb      	strb	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002920:	78bb      	ldrb	r3, [r7, #2]
 8002922:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689c      	ldr	r4, [r3, #8]
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	2201      	movs	r2, #1
 8002936:	210f      	movs	r1, #15
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	47a0      	blx	r4
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}

08002946 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002946:	b590      	push	{r4, r7, lr}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689c      	ldr	r4, [r3, #8]
 8002952:	2300      	movs	r3, #0
 8002954:	2200      	movs	r2, #0
 8002956:	2109      	movs	r1, #9
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	47a0      	blx	r4
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}

08002964 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689c      	ldr	r4, [r3, #8]
 8002970:	2300      	movs	r3, #0
 8002972:	2200      	movs	r2, #0
 8002974:	210a      	movs	r1, #10
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}

08002982 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002982:	b590      	push	{r4, r7, lr}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689c      	ldr	r4, [r3, #8]
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	2300      	movs	r3, #0
 8002996:	210b      	movs	r1, #11
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	47a0      	blx	r4
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd90      	pop	{r4, r7, pc}

080029a4 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689c      	ldr	r4, [r3, #8]
 80029b0:	2300      	movs	r3, #0
 80029b2:	2200      	movs	r2, #0
 80029b4:	2110      	movs	r1, #16
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	47a0      	blx	r4
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd90      	pop	{r4, r7, pc}

080029c2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80029c2:	b590      	push	{r4, r7, lr}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	70fb      	strb	r3, [r7, #3]
 80029ce:	4613      	mov	r3, r2
 80029d0:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695c      	ldr	r4, [r3, #20]
 80029d6:	78ba      	ldrb	r2, [r7, #2]
 80029d8:	78f9      	ldrb	r1, [r7, #3]
 80029da:	2300      	movs	r3, #0
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	47a0      	blx	r4
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd90      	pop	{r4, r7, pc}

080029e8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	72fb      	strb	r3, [r7, #11]
 80029f6:	4613      	mov	r3, r2
 80029f8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a11      	ldr	r2, [pc, #68]	; (8002a60 <u8x8_SetupDefaults+0x58>)
 8002a1a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <u8x8_SetupDefaults+0x58>)
 8002a20:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <u8x8_SetupDefaults+0x58>)
 8002a26:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a0d      	ldr	r2, [pc, #52]	; (8002a60 <u8x8_SetupDefaults+0x58>)
 8002a2c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	22ff      	movs	r2, #255	; 0xff
 8002a50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	080029e9 	.word	0x080029e9

08002a64 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff ffc8 	bl	8002a08 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7ff ff58 	bl	8002946 <u8x8_SetupMemory>
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <synthesize_waves>:

uint16_t lookup_indices [12];

uint16_t DMAkeys;

inline void synthesize_waves(int index){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

    int32_t out = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]

    HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 8002aac:	2201      	movs	r2, #1
 8002aae:	2108      	movs	r1, #8
 8002ab0:	482a      	ldr	r0, [pc, #168]	; (8002b5c <synthesize_waves+0xbc>)
 8002ab2:	f003 fdc7 	bl	8006644 <HAL_GPIO_WritePin>
    for (int t = 0; t < 12; t++){
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	e038      	b.n	8002b2e <synthesize_waves+0x8e>
        lookup_indices[t] = (lookup_indices[t] + 4) % sample_counts[t];
 8002abc:	4a28      	ldr	r2, [pc, #160]	; (8002b60 <synthesize_waves+0xc0>)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4926      	ldr	r1, [pc, #152]	; (8002b64 <synthesize_waves+0xc4>)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ad0:	fbb2 f1f3 	udiv	r1, r2, r3
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	b299      	uxth	r1, r3
 8002adc:	4a20      	ldr	r2, [pc, #128]	; (8002b60 <synthesize_waves+0xc0>)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        bool key_pressed = ~DMAkeys & ( 1 << t);
 8002ae4:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <synthesize_waves+0xc8>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	43da      	mvns	r2, r3
 8002aea:	2101      	movs	r1, #1
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
        out += key_pressed ? lookup_tables[t][lookup_indices[t]] : 0;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <synthesize_waves+0x80>
 8002b04:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <synthesize_waves+0xcc>)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b0c:	4914      	ldr	r1, [pc, #80]	; (8002b60 <synthesize_waves+0xc0>)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	e000      	b.n	8002b22 <synthesize_waves+0x82>
 8002b20:	2200      	movs	r2, #0
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	4413      	add	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
    for (int t = 0; t < 12; t++){
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b0b      	cmp	r3, #11
 8002b32:	ddc3      	ble.n	8002abc <synthesize_waves+0x1c>
    }
    output_LUT[index] = ((uint16_t)(out >> 3)) + 2048;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	10db      	asrs	r3, r3, #3
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b3e:	b299      	uxth	r1, r3
 8002b40:	4a0b      	ldr	r2, [pc, #44]	; (8002b70 <synthesize_waves+0xd0>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2108      	movs	r1, #8
 8002b4c:	4803      	ldr	r0, [pc, #12]	; (8002b5c <synthesize_waves+0xbc>)
 8002b4e:	f003 fd79 	bl	8006644 <HAL_GPIO_WritePin>
}
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	48000400 	.word	0x48000400
 8002b60:	20002074 	.word	0x20002074
 8002b64:	080103bc 	.word	0x080103bc
 8002b68:	2000208c 	.word	0x2000208c
 8002b6c:	20000004 	.word	0x20000004
 8002b70:	20000670 	.word	0x20000670

08002b74 <HAL_DAC_ConvHalfCpltCallbackCh1>:


void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

    //serialPrintln("half");
    DMAkeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x34>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_DAC_ConvHalfCpltCallbackCh1+0x38>)
 8002b84:	801a      	strh	r2, [r3, #0]
    

    for (int i = 0; i < OUTPUT_SAMPLES/2; i++) {
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	e005      	b.n	8002b98 <HAL_DAC_ConvHalfCpltCallbackCh1+0x24>
        synthesize_waves(i);
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f7ff ff87 	bl	8002aa0 <synthesize_waves>
    for (int i = 0; i < OUTPUT_SAMPLES/2; i++) {
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3301      	adds	r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2ba7      	cmp	r3, #167	; 0xa7
 8002b9c:	ddf6      	ble.n	8002b8c <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>
    }
}
 8002b9e:	bf00      	nop
 8002ba0:	bf00      	nop
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	2000208c 	.word	0x2000208c

08002bb0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
    
    for (int i = OUTPUT_SAMPLES/2; i < OUTPUT_SAMPLES; i++) {
 8002bb8:	23a8      	movs	r3, #168	; 0xa8
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e005      	b.n	8002bca <HAL_DAC_ConvCpltCallbackCh1+0x1a>
        synthesize_waves(i);
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7ff ff6e 	bl	8002aa0 <synthesize_waves>
    for (int i = OUTPUT_SAMPLES/2; i < OUTPUT_SAMPLES; i++) {
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8002bd0:	ddf5      	ble.n	8002bbe <HAL_DAC_ConvCpltCallbackCh1+0xe>
    }
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	0000      	movs	r0, r0
	...

08002be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002be0:	b5b0      	push	{r4, r5, r7, lr}
 8002be2:	b08c      	sub	sp, #48	; 0x30
 8002be4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

        rotationSteps(dreal, dimag);
 8002be6:	49b0      	ldr	r1, [pc, #704]	; (8002ea8 <main+0x2c8>)
 8002be8:	48b0      	ldr	r0, [pc, #704]	; (8002eac <main+0x2cc>)
 8002bea:	f000 fe1d 	bl	8003828 <rotationSteps>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bee:	f001 fb30 	bl	8004252 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bf2:	f000 f999 	bl	8002f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bf6:	f000 fc13 	bl	8003420 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bfa:	f000 fbf3 	bl	80033e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002bfe:	f000 fbc1 	bl	8003384 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8002c02:	f000 fa57 	bl	80030b4 <MX_CAN1_Init>
  MX_I2C1_Init();
 8002c06:	f000 fabf 	bl	8003188 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002c0a:	f000 f9ef 	bl	8002fec <MX_ADC1_Init>
  MX_DAC1_Init();
 8002c0e:	f000 fa89 	bl	8003124 <MX_DAC1_Init>
  MX_TIM6_Init();
 8002c12:	f000 fb4b 	bl	80032ac <MX_TIM6_Init>
  MX_TIM7_Init();
 8002c16:	f000 fb7f 	bl	8003318 <MX_TIM7_Init>
  MX_TIM2_Init();
 8002c1a:	f000 faf9 	bl	8003210 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_Base_Start(&htim2);
 8002c1e:	48a4      	ldr	r0, [pc, #656]	; (8002eb0 <main+0x2d0>)
 8002c20:	f006 f904 	bl	8008e2c <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim7);
 8002c24:	48a3      	ldr	r0, [pc, #652]	; (8002eb4 <main+0x2d4>)
 8002c26:	f006 f901 	bl	8008e2c <HAL_TIM_Base_Start>

    HAL_TIM_Base_Start_IT(&htim6);
 8002c2a:	48a3      	ldr	r0, [pc, #652]	; (8002eb8 <main+0x2d8>)
 8002c2c:	f006 f94a 	bl	8008ec4 <HAL_TIM_Base_Start_IT>


    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)output_LUT, OUTPUT_SAMPLES, DAC_ALIGN_12B_R);
 8002c30:	2300      	movs	r3, #0
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	f240 1351 	movw	r3, #337	; 0x151
 8002c38:	4aa0      	ldr	r2, [pc, #640]	; (8002ebc <main+0x2dc>)
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	48a0      	ldr	r0, [pc, #640]	; (8002ec0 <main+0x2e0>)
 8002c3e:	f002 fe51 	bl	80058e4 <HAL_DAC_Start_DMA>
//    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t *)output_LUT, OUTPUT_SAMPLES, DAC_ALIGN_12B_R);
//    HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);

    setOutMuxBit(DRST_BIT, GPIO_PIN_RESET);
 8002c42:	2304      	movs	r3, #4
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 fca3 	bl	8003594 <setOutMuxBit>
    delayMicro(2);
 8002c4e:	2002      	movs	r0, #2
 8002c50:	f000 fc86 	bl	8003560 <delayMicro>
    setOutMuxBit(DRST_BIT, GPIO_PIN_SET);
 8002c54:	2304      	movs	r3, #4
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fc9a 	bl	8003594 <setOutMuxBit>
    u8g2_Setup_ssd1305_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c,
 8002c60:	4b98      	ldr	r3, [pc, #608]	; (8002ec4 <main+0x2e4>)
 8002c62:	4a99      	ldr	r2, [pc, #612]	; (8002ec8 <main+0x2e8>)
 8002c64:	4999      	ldr	r1, [pc, #612]	; (8002ecc <main+0x2ec>)
 8002c66:	489a      	ldr	r0, [pc, #616]	; (8002ed0 <main+0x2f0>)
 8002c68:	f7fe fa70 	bl	800114c <u8g2_Setup_ssd1305_i2c_128x32_noname_f>
                u8x8_gpio_and_delay);
    u8g2_InitDisplay(&u8g2);
 8002c6c:	4898      	ldr	r0, [pc, #608]	; (8002ed0 <main+0x2f0>)
 8002c6e:	f7ff fe79 	bl	8002964 <u8x8_InitDisplay>
    u8g2_ClearDisplay(&u8g2);
 8002c72:	4897      	ldr	r0, [pc, #604]	; (8002ed0 <main+0x2f0>)
 8002c74:	f7fe fa45 	bl	8001102 <u8g2_ClearDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4895      	ldr	r0, [pc, #596]	; (8002ed0 <main+0x2f0>)
 8002c7c:	f7ff fe81 	bl	8002982 <u8x8_SetPowerSave>
    setOutMuxBit(DEN_BIT, GPIO_PIN_SET);
 8002c80:	2303      	movs	r3, #3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fc84 	bl	8003594 <setOutMuxBit>

    serialPrintln("charIOT-Key-C");
 8002c8c:	4891      	ldr	r0, [pc, #580]	; (8002ed4 <main+0x2f4>)
 8002c8e:	f000 fc49 	bl	8003524 <serialPrintln>


    //Generate wave tables
    char buf [20];
    for (int t = 0; t < 12; t++) {
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
 8002c96:	e0ca      	b.n	8002e2e <main+0x24e>

        uint32_t samples =  sample_counts[t];
 8002c98:	4a8f      	ldr	r2, [pc, #572]	; (8002ed8 <main+0x2f8>)
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca0:	61fb      	str	r3, [r7, #28]

        sprintf(buf, "\n\n Lut: %i------", t);
 8002ca2:	1d3b      	adds	r3, r7, #4
 8002ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca6:	498d      	ldr	r1, [pc, #564]	; (8002edc <main+0x2fc>)
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f00a fd6f 	bl	800d78c <siprintf>
//			sprintf(buf, "%i %i ", i, lookup_tables[t][i]);
//			//serialPrintln(buf);
//		}

////      TRUMPET (SQUARE + SINE) WAVES - HMMMMMM
		int half_samples = samples / 2;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < samples; i++) {
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	623b      	str	r3, [r7, #32]
 8002cb8:	e0b1      	b.n	8002e1e <main+0x23e>
			lookup_tables[t][i] 	= (i <= half_samples) ? (2048 *(0.25*sin(2.0 * PI * (float)i / (0.25*(float) samples)) + 1.0))
 8002cba:	6a3a      	ldr	r2, [r7, #32]
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	dc51      	bgt.n	8002d66 <main+0x186>
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ccc:	ee17 0a90 	vmov	r0, s15
 8002cd0:	f7fd fc3a 	bl	8000548 <__aeabi_f2d>
 8002cd4:	a372      	add	r3, pc, #456	; (adr r3, 8002ea0 <main+0x2c0>)
 8002cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cda:	f7fd fc8d 	bl	80005f8 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4614      	mov	r4, r2
 8002ce4:	461d      	mov	r5, r3
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf0:	ee17 0a90 	vmov	r0, s15
 8002cf4:	f7fd fc28 	bl	8000548 <__aeabi_f2d>
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	4b78      	ldr	r3, [pc, #480]	; (8002ee0 <main+0x300>)
 8002cfe:	f7fd fc7b 	bl	80005f8 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4620      	mov	r0, r4
 8002d08:	4629      	mov	r1, r5
 8002d0a:	f7fd fd9f 	bl	800084c <__aeabi_ddiv>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	ec43 2b17 	vmov	d7, r2, r3
 8002d16:	eeb0 0a47 	vmov.f32	s0, s14
 8002d1a:	eef0 0a67 	vmov.f32	s1, s15
 8002d1e:	f00b f943 	bl	800dfa8 <sin>
 8002d22:	ec51 0b10 	vmov	r0, r1, d0
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ee0 <main+0x300>)
 8002d2c:	f7fd fc64 	bl	80005f8 <__aeabi_dmul>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	4b69      	ldr	r3, [pc, #420]	; (8002ee4 <main+0x304>)
 8002d3e:	f7fd faa5 	bl	800028c <__adddf3>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	4b66      	ldr	r3, [pc, #408]	; (8002ee8 <main+0x308>)
 8002d50:	f7fd fc52 	bl	80005f8 <__aeabi_dmul>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f7fd fefc 	bl	8000b58 <__aeabi_d2iz>
 8002d60:	4603      	mov	r3, r0
 8002d62:	b21b      	sxth	r3, r3
 8002d64:	e050      	b.n	8002e08 <main+0x228>
													      : (2048 *(0.25*sin(2.0 * PI * (float)i / (0.25*(float) samples)) - 1.0));
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d70:	ee17 0a90 	vmov	r0, s15
 8002d74:	f7fd fbe8 	bl	8000548 <__aeabi_f2d>
 8002d78:	a349      	add	r3, pc, #292	; (adr r3, 8002ea0 <main+0x2c0>)
 8002d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7e:	f7fd fc3b 	bl	80005f8 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4614      	mov	r4, r2
 8002d88:	461d      	mov	r5, r3
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d94:	ee17 0a90 	vmov	r0, s15
 8002d98:	f7fd fbd6 	bl	8000548 <__aeabi_f2d>
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	4b4f      	ldr	r3, [pc, #316]	; (8002ee0 <main+0x300>)
 8002da2:	f7fd fc29 	bl	80005f8 <__aeabi_dmul>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4620      	mov	r0, r4
 8002dac:	4629      	mov	r1, r5
 8002dae:	f7fd fd4d 	bl	800084c <__aeabi_ddiv>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	ec43 2b17 	vmov	d7, r2, r3
 8002dba:	eeb0 0a47 	vmov.f32	s0, s14
 8002dbe:	eef0 0a67 	vmov.f32	s1, s15
 8002dc2:	f00b f8f1 	bl	800dfa8 <sin>
 8002dc6:	ec51 0b10 	vmov	r0, r1, d0
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <main+0x300>)
 8002dd0:	f7fd fc12 	bl	80005f8 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	4b40      	ldr	r3, [pc, #256]	; (8002ee4 <main+0x304>)
 8002de2:	f7fd fa51 	bl	8000288 <__aeabi_dsub>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <main+0x308>)
 8002df4:	f7fd fc00 	bl	80005f8 <__aeabi_dmul>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
			lookup_tables[t][i] 	= (i <= half_samples) ? (2048 *(0.25*sin(2.0 * PI * (float)i / (0.25*(float) samples)) + 1.0))
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f7fd feaa 	bl	8000b58 <__aeabi_d2iz>
 8002e04:	4603      	mov	r3, r0
 8002e06:	b21b      	sxth	r3, r3
 8002e08:	4938      	ldr	r1, [pc, #224]	; (8002eec <main+0x30c>)
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	0052      	lsls	r2, r2, #1
 8002e14:	440a      	add	r2, r1
 8002e16:	8013      	strh	r3, [r2, #0]
		for (int i = 0; i < samples; i++) {
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	623b      	str	r3, [r7, #32]
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	f63f af49 	bhi.w	8002cba <main+0xda>
    for (int t = 0; t < 12; t++) {
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	2b0b      	cmp	r3, #11
 8002e32:	f77f af31 	ble.w	8002c98 <main+0xb8>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002e36:	f007 f92d 	bl	800a094 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of keysMutex */
  keysMutexHandle = osMutexNew(&keysMutex_attributes);
 8002e3a:	482d      	ldr	r0, [pc, #180]	; (8002ef0 <main+0x310>)
 8002e3c:	f007 fa21 	bl	800a282 <osMutexNew>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4a2c      	ldr	r2, [pc, #176]	; (8002ef4 <main+0x314>)
 8002e44:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
        /* add mutexes, ... */
        osMutexRelease(keysMutexHandle);
 8002e46:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <main+0x314>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f007 faea 	bl	800a424 <osMutexRelease>
        /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002e50:	4a29      	ldr	r2, [pc, #164]	; (8002ef8 <main+0x318>)
 8002e52:	2100      	movs	r1, #0
 8002e54:	4829      	ldr	r0, [pc, #164]	; (8002efc <main+0x31c>)
 8002e56:	f007 f967 	bl	800a128 <osThreadNew>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4a28      	ldr	r2, [pc, #160]	; (8002f00 <main+0x320>)
 8002e5e:	6013      	str	r3, [r2, #0]

  /* creation of scanKeys */
  scanKeysHandle = osThreadNew(scanKeysTask, NULL, &scanKeys_attributes);
 8002e60:	4a28      	ldr	r2, [pc, #160]	; (8002f04 <main+0x324>)
 8002e62:	2100      	movs	r1, #0
 8002e64:	4828      	ldr	r0, [pc, #160]	; (8002f08 <main+0x328>)
 8002e66:	f007 f95f 	bl	800a128 <osThreadNew>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <main+0x32c>)
 8002e6e:	6013      	str	r3, [r2, #0]

  /* creation of displayUpdate */
  displayUpdateHandle = osThreadNew(displayUpdateTask, NULL, &displayUpdate_attributes);
 8002e70:	4a27      	ldr	r2, [pc, #156]	; (8002f10 <main+0x330>)
 8002e72:	2100      	movs	r1, #0
 8002e74:	4827      	ldr	r0, [pc, #156]	; (8002f14 <main+0x334>)
 8002e76:	f007 f957 	bl	800a128 <osThreadNew>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4a26      	ldr	r2, [pc, #152]	; (8002f18 <main+0x338>)
 8002e7e:	6013      	str	r3, [r2, #0]

  /* creation of synthesize */
  synthesizeHandle = osThreadNew(synthesizeTask, NULL, &synthesize_attributes);
 8002e80:	4a26      	ldr	r2, [pc, #152]	; (8002f1c <main+0x33c>)
 8002e82:	2100      	movs	r1, #0
 8002e84:	4826      	ldr	r0, [pc, #152]	; (8002f20 <main+0x340>)
 8002e86:	f007 f94f 	bl	800a128 <osThreadNew>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4a25      	ldr	r2, [pc, #148]	; (8002f24 <main+0x344>)
 8002e8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
        /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002e90:	f007 f924 	bl	800a0dc <osKernelStart>
 8002e94:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3728      	adds	r7, #40	; 0x28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	54442eea 	.word	0x54442eea
 8002ea4:	401921fb 	.word	0x401921fb
 8002ea8:	20000640 	.word	0x20000640
 8002eac:	20000610 	.word	0x20000610
 8002eb0:	20000400 	.word	0x20000400
 8002eb4:	20000498 	.word	0x20000498
 8002eb8:	2000044c 	.word	0x2000044c
 8002ebc:	20000670 	.word	0x20000670
 8002ec0:	20000350 	.word	0x20000350
 8002ec4:	0800361d 	.word	0x0800361d
 8002ec8:	0800363d 	.word	0x0800363d
 8002ecc:	0801029c 	.word	0x0801029c
 8002ed0:	2000057c 	.word	0x2000057c
 8002ed4:	0800fdb8 	.word	0x0800fdb8
 8002ed8:	080103bc 	.word	0x080103bc
 8002edc:	0800fdc8 	.word	0x0800fdc8
 8002ee0:	3fd00000 	.word	0x3fd00000
 8002ee4:	3ff00000 	.word	0x3ff00000
 8002ee8:	40a00000 	.word	0x40a00000
 8002eec:	20000004 	.word	0x20000004
 8002ef0:	080103ac 	.word	0x080103ac
 8002ef4:	20000578 	.word	0x20000578
 8002ef8:	0801031c 	.word	0x0801031c
 8002efc:	08003935 	.word	0x08003935
 8002f00:	20000568 	.word	0x20000568
 8002f04:	08010340 	.word	0x08010340
 8002f08:	08003945 	.word	0x08003945
 8002f0c:	2000056c 	.word	0x2000056c
 8002f10:	08010364 	.word	0x08010364
 8002f14:	08003995 	.word	0x08003995
 8002f18:	20000570 	.word	0x20000570
 8002f1c:	08010388 	.word	0x08010388
 8002f20:	08003a25 	.word	0x08003a25
 8002f24:	20000574 	.word	0x20000574

08002f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b096      	sub	sp, #88	; 0x58
 8002f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f2e:	f107 0314 	add.w	r3, r7, #20
 8002f32:	2244      	movs	r2, #68	; 0x44
 8002f34:	2100      	movs	r1, #0
 8002f36:	4618      	mov	r0, r3
 8002f38:	f00a fb12 	bl	800d560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f3c:	463b      	mov	r3, r7
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	60da      	str	r2, [r3, #12]
 8002f48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002f4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f4e:	f004 fd5d 	bl	8007a0c <HAL_PWREx_ControlVoltageScaling>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002f58:	f000 fdb0 	bl	8003abc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f5c:	f004 fd38 	bl	80079d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <SystemClock_Config+0xc0>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <SystemClock_Config+0xc0>)
 8002f68:	f023 0318 	bic.w	r3, r3, #24
 8002f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002f70:	2314      	movs	r3, #20
 8002f72:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f74:	2301      	movs	r3, #1
 8002f76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f80:	2360      	movs	r3, #96	; 0x60
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f84:	2302      	movs	r3, #2
 8002f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002f90:	2328      	movs	r3, #40	; 0x28
 8002f92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f94:	2307      	movs	r3, #7
 8002f96:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f004 fd87 	bl	8007ab8 <HAL_RCC_OscConfig>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002fb0:	f000 fd84 	bl	8003abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002fc8:	463b      	mov	r3, r7
 8002fca:	2104      	movs	r1, #4
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f005 f987 	bl	80082e0 <HAL_RCC_ClockConfig>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002fd8:	f000 fd70 	bl	8003abc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002fdc:	f005 fdcc 	bl	8008b78 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002fe0:	bf00      	nop
 8002fe2:	3758      	adds	r7, #88	; 0x58
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000

08002fec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ff2:	463b      	mov	r3, r7
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
 8003000:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003002:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <MX_ADC1_Init+0xbc>)
 8003004:	4a29      	ldr	r2, [pc, #164]	; (80030ac <MX_ADC1_Init+0xc0>)
 8003006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003008:	4b27      	ldr	r3, [pc, #156]	; (80030a8 <MX_ADC1_Init+0xbc>)
 800300a:	2200      	movs	r2, #0
 800300c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800300e:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <MX_ADC1_Init+0xbc>)
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003014:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <MX_ADC1_Init+0xbc>)
 8003016:	2200      	movs	r2, #0
 8003018:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800301a:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <MX_ADC1_Init+0xbc>)
 800301c:	2200      	movs	r2, #0
 800301e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003020:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <MX_ADC1_Init+0xbc>)
 8003022:	2204      	movs	r2, #4
 8003024:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <MX_ADC1_Init+0xbc>)
 8003028:	2200      	movs	r2, #0
 800302a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800302c:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <MX_ADC1_Init+0xbc>)
 800302e:	2200      	movs	r2, #0
 8003030:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <MX_ADC1_Init+0xbc>)
 8003034:	2201      	movs	r2, #1
 8003036:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003038:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <MX_ADC1_Init+0xbc>)
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <MX_ADC1_Init+0xbc>)
 8003042:	2200      	movs	r2, #0
 8003044:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <MX_ADC1_Init+0xbc>)
 8003048:	2200      	movs	r2, #0
 800304a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800304c:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <MX_ADC1_Init+0xbc>)
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003054:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <MX_ADC1_Init+0xbc>)
 8003056:	2200      	movs	r2, #0
 8003058:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <MX_ADC1_Init+0xbc>)
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003062:	4811      	ldr	r0, [pc, #68]	; (80030a8 <MX_ADC1_Init+0xbc>)
 8003064:	f001 fade 	bl	8004624 <HAL_ADC_Init>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800306e:	f000 fd25 	bl	8003abc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <MX_ADC1_Init+0xc4>)
 8003074:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003076:	2306      	movs	r3, #6
 8003078:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800307e:	237f      	movs	r3, #127	; 0x7f
 8003080:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003082:	2304      	movs	r3, #4
 8003084:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800308a:	463b      	mov	r3, r7
 800308c:	4619      	mov	r1, r3
 800308e:	4806      	ldr	r0, [pc, #24]	; (80030a8 <MX_ADC1_Init+0xbc>)
 8003090:	f001 fc10 	bl	80048b4 <HAL_ADC_ConfigChannel>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800309a:	f000 fd0f 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800309e:	bf00      	nop
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200002c4 	.word	0x200002c4
 80030ac:	50040000 	.word	0x50040000
 80030b0:	14f00020 	.word	0x14f00020

080030b4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <MX_CAN1_Init+0x68>)
 80030ba:	4a19      	ldr	r2, [pc, #100]	; (8003120 <MX_CAN1_Init+0x6c>)
 80030bc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <MX_CAN1_Init+0x68>)
 80030c0:	2228      	movs	r2, #40	; 0x28
 80030c2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80030c4:	4b15      	ldr	r3, [pc, #84]	; (800311c <MX_CAN1_Init+0x68>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <MX_CAN1_Init+0x68>)
 80030cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030d0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80030d2:	4b12      	ldr	r3, [pc, #72]	; (800311c <MX_CAN1_Init+0x68>)
 80030d4:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80030d8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <MX_CAN1_Init+0x68>)
 80030dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030e0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <MX_CAN1_Init+0x68>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <MX_CAN1_Init+0x68>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <MX_CAN1_Init+0x68>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <MX_CAN1_Init+0x68>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <MX_CAN1_Init+0x68>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <MX_CAN1_Init+0x68>)
 8003102:	2201      	movs	r2, #1
 8003104:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003106:	4805      	ldr	r0, [pc, #20]	; (800311c <MX_CAN1_Init+0x68>)
 8003108:	f001 ffb4 	bl	8005074 <HAL_CAN_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8003112:	f000 fcd3 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000328 	.word	0x20000328
 8003120:	40006400 	.word	0x40006400

08003124 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	2224      	movs	r2, #36	; 0x24
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f00a fa15 	bl	800d560 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <MX_DAC1_Init+0x5c>)
 8003138:	4a12      	ldr	r2, [pc, #72]	; (8003184 <MX_DAC1_Init+0x60>)
 800313a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800313c:	4810      	ldr	r0, [pc, #64]	; (8003180 <MX_DAC1_Init+0x5c>)
 800313e:	f002 fbaf 	bl	80058a0 <HAL_DAC_Init>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003148:	f000 fcb8 	bl	8003abc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8003150:	2324      	movs	r3, #36	; 0x24
 8003152:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003160:	1d3b      	adds	r3, r7, #4
 8003162:	2200      	movs	r2, #0
 8003164:	4619      	mov	r1, r3
 8003166:	4806      	ldr	r0, [pc, #24]	; (8003180 <MX_DAC1_Init+0x5c>)
 8003168:	f002 fcf6 	bl	8005b58 <HAL_DAC_ConfigChannel>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8003172:	f000 fca3 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003176:	bf00      	nop
 8003178:	3728      	adds	r7, #40	; 0x28
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000350 	.word	0x20000350
 8003184:	40007400 	.word	0x40007400

08003188 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800318c:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <MX_I2C1_Init+0x7c>)
 800318e:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <MX_I2C1_Init+0x80>)
 8003190:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F33;
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <MX_I2C1_Init+0x7c>)
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <MX_I2C1_Init+0x84>)
 8003196:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <MX_I2C1_Init+0x7c>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800319e:	4b19      	ldr	r3, [pc, #100]	; (8003204 <MX_I2C1_Init+0x7c>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031a4:	4b17      	ldr	r3, [pc, #92]	; (8003204 <MX_I2C1_Init+0x7c>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80031aa:	4b16      	ldr	r3, [pc, #88]	; (8003204 <MX_I2C1_Init+0x7c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <MX_I2C1_Init+0x7c>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <MX_I2C1_Init+0x7c>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031bc:	4b11      	ldr	r3, [pc, #68]	; (8003204 <MX_I2C1_Init+0x7c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031c2:	4810      	ldr	r0, [pc, #64]	; (8003204 <MX_I2C1_Init+0x7c>)
 80031c4:	f003 fa56 	bl	8006674 <HAL_I2C_Init>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80031ce:	f000 fc75 	bl	8003abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80031d2:	2100      	movs	r1, #0
 80031d4:	480b      	ldr	r0, [pc, #44]	; (8003204 <MX_I2C1_Init+0x7c>)
 80031d6:	f004 fb43 	bl	8007860 <HAL_I2CEx_ConfigAnalogFilter>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80031e0:	f000 fc6c 	bl	8003abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80031e4:	2100      	movs	r1, #0
 80031e6:	4807      	ldr	r0, [pc, #28]	; (8003204 <MX_I2C1_Init+0x7c>)
 80031e8:	f004 fb85 	bl	80078f6 <HAL_I2CEx_ConfigDigitalFilter>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80031f2:	f000 fc63 	bl	8003abc <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80031f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80031fa:	f004 fbc9 	bl	8007990 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	200003ac 	.word	0x200003ac
 8003208:	40005400 	.word	0x40005400
 800320c:	00300f33 	.word	0x00300f33

08003210 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003216:	f107 0310 	add.w	r3, r7, #16
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	605a      	str	r2, [r3, #4]
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003224:	1d3b      	adds	r3, r7, #4
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]
 800322c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800322e:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <MX_TIM2_Init+0x98>)
 8003230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003234:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <MX_TIM2_Init+0x98>)
 8003238:	2200      	movs	r2, #0
 800323a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <MX_TIM2_Init+0x98>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8003242:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <MX_TIM2_Init+0x98>)
 8003244:	f240 7216 	movw	r2, #1814	; 0x716
 8003248:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800324a:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <MX_TIM2_Init+0x98>)
 800324c:	2200      	movs	r2, #0
 800324e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003250:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <MX_TIM2_Init+0x98>)
 8003252:	2200      	movs	r2, #0
 8003254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003256:	4814      	ldr	r0, [pc, #80]	; (80032a8 <MX_TIM2_Init+0x98>)
 8003258:	f005 fd90 	bl	8008d7c <HAL_TIM_Base_Init>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003262:	f000 fc2b 	bl	8003abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800326a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800326c:	f107 0310 	add.w	r3, r7, #16
 8003270:	4619      	mov	r1, r3
 8003272:	480d      	ldr	r0, [pc, #52]	; (80032a8 <MX_TIM2_Init+0x98>)
 8003274:	f005 ff99 	bl	80091aa <HAL_TIM_ConfigClockSource>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800327e:	f000 fc1d 	bl	8003abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003282:	2320      	movs	r3, #32
 8003284:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4806      	ldr	r0, [pc, #24]	; (80032a8 <MX_TIM2_Init+0x98>)
 8003290:	f006 f97a 	bl	8009588 <HAL_TIMEx_MasterConfigSynchronization>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800329a:	f000 fc0f 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800329e:	bf00      	nop
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000400 	.word	0x20000400

080032ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80032bc:	4b14      	ldr	r3, [pc, #80]	; (8003310 <MX_TIM6_Init+0x64>)
 80032be:	4a15      	ldr	r2, [pc, #84]	; (8003314 <MX_TIM6_Init+0x68>)
 80032c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <MX_TIM6_Init+0x64>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <MX_TIM6_Init+0x64>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3636-1;
 80032ce:	4b10      	ldr	r3, [pc, #64]	; (8003310 <MX_TIM6_Init+0x64>)
 80032d0:	f640 6233 	movw	r2, #3635	; 0xe33
 80032d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032d6:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <MX_TIM6_Init+0x64>)
 80032d8:	2200      	movs	r2, #0
 80032da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80032dc:	480c      	ldr	r0, [pc, #48]	; (8003310 <MX_TIM6_Init+0x64>)
 80032de:	f005 fd4d 	bl	8008d7c <HAL_TIM_Base_Init>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80032e8:	f000 fbe8 	bl	8003abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80032ec:	2320      	movs	r3, #32
 80032ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80032f4:	1d3b      	adds	r3, r7, #4
 80032f6:	4619      	mov	r1, r3
 80032f8:	4805      	ldr	r0, [pc, #20]	; (8003310 <MX_TIM6_Init+0x64>)
 80032fa:	f006 f945 	bl	8009588 <HAL_TIMEx_MasterConfigSynchronization>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003304:	f000 fbda 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	2000044c 	.word	0x2000044c
 8003314:	40001000 	.word	0x40001000

08003318 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003328:	4b14      	ldr	r3, [pc, #80]	; (800337c <MX_TIM7_Init+0x64>)
 800332a:	4a15      	ldr	r2, [pc, #84]	; (8003380 <MX_TIM7_Init+0x68>)
 800332c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80-1;
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <MX_TIM7_Init+0x64>)
 8003330:	224f      	movs	r2, #79	; 0x4f
 8003332:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <MX_TIM7_Init+0x64>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <MX_TIM7_Init+0x64>)
 800333c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003340:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <MX_TIM7_Init+0x64>)
 8003344:	2200      	movs	r2, #0
 8003346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003348:	480c      	ldr	r0, [pc, #48]	; (800337c <MX_TIM7_Init+0x64>)
 800334a:	f005 fd17 	bl	8008d7c <HAL_TIM_Base_Init>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003354:	f000 fbb2 	bl	8003abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003358:	2300      	movs	r3, #0
 800335a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	4619      	mov	r1, r3
 8003364:	4805      	ldr	r0, [pc, #20]	; (800337c <MX_TIM7_Init+0x64>)
 8003366:	f006 f90f 	bl	8009588 <HAL_TIMEx_MasterConfigSynchronization>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003370:	f000 fba4 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000498 	.word	0x20000498
 8003380:	40001400 	.word	0x40001400

08003384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003388:	4b14      	ldr	r3, [pc, #80]	; (80033dc <MX_USART2_UART_Init+0x58>)
 800338a:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <MX_USART2_UART_Init+0x5c>)
 800338c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800338e:	4b13      	ldr	r3, [pc, #76]	; (80033dc <MX_USART2_UART_Init+0x58>)
 8003390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003396:	4b11      	ldr	r3, [pc, #68]	; (80033dc <MX_USART2_UART_Init+0x58>)
 8003398:	2200      	movs	r2, #0
 800339a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <MX_USART2_UART_Init+0x58>)
 800339e:	2200      	movs	r2, #0
 80033a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033a2:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <MX_USART2_UART_Init+0x58>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <MX_USART2_UART_Init+0x58>)
 80033aa:	220c      	movs	r2, #12
 80033ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <MX_USART2_UART_Init+0x58>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b4:	4b09      	ldr	r3, [pc, #36]	; (80033dc <MX_USART2_UART_Init+0x58>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <MX_USART2_UART_Init+0x58>)
 80033bc:	2200      	movs	r2, #0
 80033be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <MX_USART2_UART_Init+0x58>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033c6:	4805      	ldr	r0, [pc, #20]	; (80033dc <MX_USART2_UART_Init+0x58>)
 80033c8:	f006 f962 	bl	8009690 <HAL_UART_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80033d2:	f000 fb73 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200004e4 	.word	0x200004e4
 80033e0:	40004400 	.word	0x40004400

080033e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <MX_DMA_Init+0x38>)
 80033ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ee:	4a0b      	ldr	r2, [pc, #44]	; (800341c <MX_DMA_Init+0x38>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6493      	str	r3, [r2, #72]	; 0x48
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <MX_DMA_Init+0x38>)
 80033f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	607b      	str	r3, [r7, #4]
 8003400:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003402:	2200      	movs	r2, #0
 8003404:	2105      	movs	r1, #5
 8003406:	200d      	movs	r0, #13
 8003408:	f002 fa20 	bl	800584c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800340c:	200d      	movs	r0, #13
 800340e:	f002 fa39 	bl	8005884 <HAL_NVIC_EnableIRQ>

}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000

08003420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003426:	f107 030c 	add.w	r3, r7, #12
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	60da      	str	r2, [r3, #12]
 8003434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003436:	4b2f      	ldr	r3, [pc, #188]	; (80034f4 <MX_GPIO_Init+0xd4>)
 8003438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343a:	4a2e      	ldr	r2, [pc, #184]	; (80034f4 <MX_GPIO_Init+0xd4>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003442:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <MX_GPIO_Init+0xd4>)
 8003444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <MX_GPIO_Init+0xd4>)
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	4a28      	ldr	r2, [pc, #160]	; (80034f4 <MX_GPIO_Init+0xd4>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800345a:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <MX_GPIO_Init+0xd4>)
 800345c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003466:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <MX_GPIO_Init+0xd4>)
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	4a22      	ldr	r2, [pc, #136]	; (80034f4 <MX_GPIO_Init+0xd4>)
 800346c:	f043 0302 	orr.w	r3, r3, #2
 8003470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <MX_GPIO_Init+0xd4>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 800347e:	2200      	movs	r2, #0
 8003480:	2140      	movs	r1, #64	; 0x40
 8003482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003486:	f003 f8dd 	bl	8006644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RA0_Pin|RA1_Pin|LED_BUILTIN_Pin|RA2_Pin
 800348a:	2200      	movs	r2, #0
 800348c:	213b      	movs	r1, #59	; 0x3b
 800348e:	481a      	ldr	r0, [pc, #104]	; (80034f8 <MX_GPIO_Init+0xd8>)
 8003490:	f003 f8d8 	bl	8006644 <HAL_GPIO_WritePin>
                          |OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C0_Pin C2_Pin C1_Pin C3_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C2_Pin|C1_Pin|C3_Pin;
 8003494:	f44f 7362 	mov.w	r3, #904	; 0x388
 8003498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a2:	f107 030c 	add.w	r3, r7, #12
 80034a6:	4619      	mov	r1, r3
 80034a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ac:	f002 ff48 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : REN_Pin */
  GPIO_InitStruct.Pin = REN_Pin;
 80034b0:	2340      	movs	r3, #64	; 0x40
 80034b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b4:	2301      	movs	r3, #1
 80034b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(REN_GPIO_Port, &GPIO_InitStruct);
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	4619      	mov	r1, r3
 80034c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ca:	f002 ff39 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pins : RA0_Pin RA1_Pin LED_BUILTIN_Pin RA2_Pin
                           OUT_Pin */
  GPIO_InitStruct.Pin = RA0_Pin|RA1_Pin|LED_BUILTIN_Pin|RA2_Pin
 80034ce:	233b      	movs	r3, #59	; 0x3b
 80034d0:	60fb      	str	r3, [r7, #12]
                          |OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d2:	2301      	movs	r3, #1
 80034d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034de:	f107 030c 	add.w	r3, r7, #12
 80034e2:	4619      	mov	r1, r3
 80034e4:	4804      	ldr	r0, [pc, #16]	; (80034f8 <MX_GPIO_Init+0xd8>)
 80034e6:	f002 ff2b 	bl	8006340 <HAL_GPIO_Init>

}
 80034ea:	bf00      	nop
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	48000400 	.word	0x48000400

080034fc <serialPrint>:

/* USER CODE BEGIN 4 */

void serialPrint(char val[]) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fc fe63 	bl	80001d0 <strlen>
 800350a:	4603      	mov	r3, r0
 800350c:	b29a      	uxth	r2, r3
 800350e:	230a      	movs	r3, #10
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4803      	ldr	r0, [pc, #12]	; (8003520 <serialPrint+0x24>)
 8003514:	f006 f90a 	bl	800972c <HAL_UART_Transmit>
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200004e4 	.word	0x200004e4

08003524 <serialPrintln>:

void serialPrintln(char val[]) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7fc fe4f 	bl	80001d0 <strlen>
 8003532:	4603      	mov	r3, r0
 8003534:	b29a      	uxth	r2, r3
 8003536:	230a      	movs	r3, #10
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4808      	ldr	r0, [pc, #32]	; (800355c <serialPrintln+0x38>)
 800353c:	f006 f8f6 	bl	800972c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003540:	f640 230d 	movw	r3, #2573	; 0xa0d
 8003544:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) newline, 2, 10);
 8003546:	f107 010c 	add.w	r1, r7, #12
 800354a:	230a      	movs	r3, #10
 800354c:	2202      	movs	r2, #2
 800354e:	4803      	ldr	r0, [pc, #12]	; (800355c <serialPrintln+0x38>)
 8003550:	f006 f8ec 	bl	800972c <HAL_UART_Transmit>

}
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	200004e4 	.word	0x200004e4

08003560 <delayMicro>:

void delayMicro(uint16_t us) {
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	80fb      	strh	r3, [r7, #6]

	htim7.Instance->CNT = 0;
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <delayMicro+0x30>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	625a      	str	r2, [r3, #36]	; 0x24
	while (htim7.Instance->CNT < us)
 8003572:	bf00      	nop
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <delayMicro+0x30>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	429a      	cmp	r2, r3
 800357e:	d3f9      	bcc.n	8003574 <delayMicro+0x14>
		;

}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000498 	.word	0x20000498

08003594 <setOutMuxBit>:

void setOutMuxBit(const uint8_t bitIdx, const bool value) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	460a      	mov	r2, r1
 800359e:	71fb      	strb	r3, [r7, #7]
 80035a0:	4613      	mov	r3, r2
 80035a2:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80035a4:	2200      	movs	r2, #0
 80035a6:	2140      	movs	r1, #64	; 0x40
 80035a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ac:	f003 f84a 	bl	8006644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, bitIdx & 0x01);
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	2101      	movs	r1, #1
 80035bc:	4816      	ldr	r0, [pc, #88]	; (8003618 <setOutMuxBit+0x84>)
 80035be:	f003 f841 	bl	8006644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, bitIdx & 0x02);
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	2102      	movs	r1, #2
 80035ce:	4812      	ldr	r0, [pc, #72]	; (8003618 <setOutMuxBit+0x84>)
 80035d0:	f003 f838 	bl	8006644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, bitIdx & 0x04);
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	2110      	movs	r1, #16
 80035e0:	480d      	ldr	r0, [pc, #52]	; (8003618 <setOutMuxBit+0x84>)
 80035e2:	f003 f82f 	bl	8006644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, value);
 80035e6:	79bb      	ldrb	r3, [r7, #6]
 80035e8:	461a      	mov	r2, r3
 80035ea:	2120      	movs	r1, #32
 80035ec:	480a      	ldr	r0, [pc, #40]	; (8003618 <setOutMuxBit+0x84>)
 80035ee:	f003 f829 	bl	8006644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 80035f2:	2201      	movs	r2, #1
 80035f4:	2140      	movs	r1, #64	; 0x40
 80035f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035fa:	f003 f823 	bl	8006644 <HAL_GPIO_WritePin>
	delayMicro(2);
 80035fe:	2002      	movs	r0, #2
 8003600:	f7ff ffae 	bl	8003560 <delayMicro>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003604:	2200      	movs	r2, #0
 8003606:	2140      	movs	r1, #64	; 0x40
 8003608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800360c:	f003 f81a 	bl	8006644 <HAL_GPIO_WritePin>

}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	48000400 	.word	0x48000400

0800361c <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	72fb      	strb	r3, [r7, #11]
 800362a:	4613      	mov	r3, r2
 800362c:	72bb      	strb	r3, [r7, #10]

	return 1;
 800362e:	2301      	movs	r3, #1

}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	72fb      	strb	r3, [r7, #11]
 800364a:	4613      	mov	r3, r2
 800364c:	72bb      	strb	r3, [r7, #10]

	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch (msg) {
 800364e:	7afb      	ldrb	r3, [r7, #11]
 8003650:	3b14      	subs	r3, #20
 8003652:	2b0c      	cmp	r3, #12
 8003654:	d847      	bhi.n	80036e6 <u8x8_byte_i2c+0xaa>
 8003656:	a201      	add	r2, pc, #4	; (adr r2, 800365c <u8x8_byte_i2c+0x20>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	080036eb 	.word	0x080036eb
 8003660:	080036e7 	.word	0x080036e7
 8003664:	080036e7 	.word	0x080036e7
 8003668:	08003691 	.word	0x08003691
 800366c:	080036c1 	.word	0x080036c1
 8003670:	080036c9 	.word	0x080036c9
 8003674:	080036e7 	.word	0x080036e7
 8003678:	080036e7 	.word	0x080036e7
 800367c:	080036e7 	.word	0x080036e7
 8003680:	080036e7 	.word	0x080036e7
 8003684:	080036e7 	.word	0x080036e7
 8003688:	080036e7 	.word	0x080036e7
 800368c:	080036eb 	.word	0x080036eb
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	617b      	str	r3, [r7, #20]
		while (arg_int > 0) {
 8003694:	e010      	b.n	80036b8 <u8x8_byte_i2c+0x7c>
			buffer[buf_idx++] = *data;
 8003696:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <u8x8_byte_i2c+0xbc>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	b2d1      	uxtb	r1, r2
 800369e:	4a16      	ldr	r2, [pc, #88]	; (80036f8 <u8x8_byte_i2c+0xbc>)
 80036a0:	7011      	strb	r1, [r2, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	7819      	ldrb	r1, [r3, #0]
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <u8x8_byte_i2c+0xc0>)
 80036aa:	5499      	strb	r1, [r3, r2]
			data++;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	3301      	adds	r3, #1
 80036b0:	617b      	str	r3, [r7, #20]
			arg_int--;
 80036b2:	7abb      	ldrb	r3, [r7, #10]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0) {
 80036b8:	7abb      	ldrb	r3, [r7, #10]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1eb      	bne.n	8003696 <u8x8_byte_i2c+0x5a>
		}
		break;
 80036be:	e015      	b.n	80036ec <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 80036c0:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <u8x8_byte_i2c+0xbc>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
		break;
 80036c6:	e011      	b.n	80036ec <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8),
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036ce:	b299      	uxth	r1, r3
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <u8x8_byte_i2c+0xbc>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f04f 32ff 	mov.w	r2, #4294967295
 80036da:	9200      	str	r2, [sp, #0]
 80036dc:	4a07      	ldr	r2, [pc, #28]	; (80036fc <u8x8_byte_i2c+0xc0>)
 80036de:	4808      	ldr	r0, [pc, #32]	; (8003700 <u8x8_byte_i2c+0xc4>)
 80036e0:	f003 f858 	bl	8006794 <HAL_I2C_Master_Transmit>
				(uint8_t*) buffer, buf_idx, HAL_MAX_DELAY);
		break;
 80036e4:	e002      	b.n	80036ec <u8x8_byte_i2c+0xb0>
	default:
		return 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e001      	b.n	80036ee <u8x8_byte_i2c+0xb2>
		break;
 80036ea:	bf00      	nop
	}

	return 1;
 80036ec:	2301      	movs	r3, #1

}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	2000208e 	.word	0x2000208e
 80036fc:	20002090 	.word	0x20002090
 8003700:	200003ac 	.word	0x200003ac

08003704 <setRow>:

void setRow(uint8_t rowIdx) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 800370e:	2200      	movs	r2, #0
 8003710:	2140      	movs	r1, #64	; 0x40
 8003712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003716:	f002 ff95 	bl	8006644 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, rowIdx & 0x01);
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	b2db      	uxtb	r3, r3
 8003722:	461a      	mov	r2, r3
 8003724:	2101      	movs	r1, #1
 8003726:	480f      	ldr	r0, [pc, #60]	; (8003764 <setRow+0x60>)
 8003728:	f002 ff8c 	bl	8006644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, rowIdx & 0x02);
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	2102      	movs	r1, #2
 8003738:	480a      	ldr	r0, [pc, #40]	; (8003764 <setRow+0x60>)
 800373a:	f002 ff83 	bl	8006644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, rowIdx & 0x04);
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	2110      	movs	r1, #16
 800374a:	4806      	ldr	r0, [pc, #24]	; (8003764 <setRow+0x60>)
 800374c:	f002 ff7a 	bl	8006644 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 8003750:	2201      	movs	r2, #1
 8003752:	2140      	movs	r1, #64	; 0x40
 8003754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003758:	f002 ff74 	bl	8006644 <HAL_GPIO_WritePin>

}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	48000400 	.word	0x48000400

08003768 <readCols>:

uint8_t readCols() {
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0

	uint8_t C0_val = HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin);
 800376e:	2108      	movs	r1, #8
 8003770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003774:	f002 ff4e 	bl	8006614 <HAL_GPIO_ReadPin>
 8003778:	4603      	mov	r3, r0
 800377a:	71fb      	strb	r3, [r7, #7]
	uint8_t C1_val = HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin);
 800377c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003784:	f002 ff46 	bl	8006614 <HAL_GPIO_ReadPin>
 8003788:	4603      	mov	r3, r0
 800378a:	71bb      	strb	r3, [r7, #6]
	uint8_t C2_val = HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin);
 800378c:	2180      	movs	r1, #128	; 0x80
 800378e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003792:	f002 ff3f 	bl	8006614 <HAL_GPIO_ReadPin>
 8003796:	4603      	mov	r3, r0
 8003798:	717b      	strb	r3, [r7, #5]
	uint8_t C3_val = HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin);
 800379a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800379e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a2:	f002 ff37 	bl	8006614 <HAL_GPIO_ReadPin>
 80037a6:	4603      	mov	r3, r0
 80037a8:	713b      	strb	r3, [r7, #4]

	return (C3_val << 3) | (C2_val << 2) | (C1_val << 1) | C0_val;
 80037aa:	793b      	ldrb	r3, [r7, #4]
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	b25a      	sxtb	r2, r3
 80037b0:	797b      	ldrb	r3, [r7, #5]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	b25b      	sxtb	r3, r3
 80037b6:	4313      	orrs	r3, r2
 80037b8:	b25a      	sxtb	r2, r3
 80037ba:	79bb      	ldrb	r3, [r7, #6]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	b25b      	sxtb	r3, r3
 80037c0:	4313      	orrs	r3, r2
 80037c2:	b25a      	sxtb	r2, r3
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	b2db      	uxtb	r3, r3

}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <readKeys>:

uint16_t readKeys() {
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0

	uint16_t keysRead = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	80fb      	strh	r3, [r7, #6]

	for (int i = 0; i <= 2; i++) {
 80037e0:	2300      	movs	r3, #0
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	e018      	b.n	8003818 <readKeys+0x42>

		setRow(i);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff ff8a 	bl	8003704 <setRow>
		delayMicro(5);
 80037f0:	2005      	movs	r0, #5
 80037f2:	f7ff feb5 	bl	8003560 <delayMicro>
		keysRead |= readCols() << (4 * i);
 80037f6:	f7ff ffb7 	bl	8003768 <readCols>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461a      	mov	r2, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	b21a      	sxth	r2, r3
 8003808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800380c:	4313      	orrs	r3, r2
 800380e:	b21b      	sxth	r3, r3
 8003810:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i <= 2; i++) {
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b02      	cmp	r3, #2
 800381c:	dde3      	ble.n	80037e6 <readKeys+0x10>

	}

	return keysRead;
 800381e:	88fb      	ldrh	r3, [r7, #6]

}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <rotationSteps>:

void rotationSteps(float *dreal, float *dimag) {
 8003828:	b5b0      	push	{r4, r5, r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]

	float phi;

	for (int i = 0; i < 12; i++) {
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e067      	b.n	8003908 <rotationSteps+0xe0>

		phi = 2 * M_PI * fA * pow(2, (i - 9) / 12.0) / fs;
 8003838:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <rotationSteps+0x100>)
 800383a:	4618      	mov	r0, r3
 800383c:	f7fc fe84 	bl	8000548 <__aeabi_f2d>
 8003840:	a335      	add	r3, pc, #212	; (adr r3, 8003918 <rotationSteps+0xf0>)
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	f7fc fed7 	bl	80005f8 <__aeabi_dmul>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4614      	mov	r4, r2
 8003850:	461d      	mov	r5, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3b09      	subs	r3, #9
 8003856:	4618      	mov	r0, r3
 8003858:	f7fc fe64 	bl	8000524 <__aeabi_i2d>
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	4b32      	ldr	r3, [pc, #200]	; (800392c <rotationSteps+0x104>)
 8003862:	f7fc fff3 	bl	800084c <__aeabi_ddiv>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	ec43 2b17 	vmov	d7, r2, r3
 800386e:	eeb0 1a47 	vmov.f32	s2, s14
 8003872:	eef0 1a67 	vmov.f32	s3, s15
 8003876:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8003920 <rotationSteps+0xf8>
 800387a:	f00a fbed 	bl	800e058 <pow>
 800387e:	ec53 2b10 	vmov	r2, r3, d0
 8003882:	4620      	mov	r0, r4
 8003884:	4629      	mov	r1, r5
 8003886:	f7fc feb7 	bl	80005f8 <__aeabi_dmul>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4614      	mov	r4, r2
 8003890:	461d      	mov	r5, r3
 8003892:	4b27      	ldr	r3, [pc, #156]	; (8003930 <rotationSteps+0x108>)
 8003894:	4618      	mov	r0, r3
 8003896:	f7fc fe57 	bl	8000548 <__aeabi_f2d>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4620      	mov	r0, r4
 80038a0:	4629      	mov	r1, r5
 80038a2:	f7fc ffd3 	bl	800084c <__aeabi_ddiv>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4610      	mov	r0, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	f7fd f97b 	bl	8000ba8 <__aeabi_d2f>
 80038b2:	4603      	mov	r3, r0
 80038b4:	60bb      	str	r3, [r7, #8]
		dreal[i] = cos(phi);
 80038b6:	68b8      	ldr	r0, [r7, #8]
 80038b8:	f7fc fe46 	bl	8000548 <__aeabi_f2d>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	ec43 2b10 	vmov	d0, r2, r3
 80038c4:	f00a fb1c 	bl	800df00 <cos>
 80038c8:	ec51 0b10 	vmov	r0, r1, d0
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	18d4      	adds	r4, r2, r3
 80038d4:	f7fd f968 	bl	8000ba8 <__aeabi_d2f>
 80038d8:	4603      	mov	r3, r0
 80038da:	6023      	str	r3, [r4, #0]
		dimag[i] = sin(phi);
 80038dc:	68b8      	ldr	r0, [r7, #8]
 80038de:	f7fc fe33 	bl	8000548 <__aeabi_f2d>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	ec43 2b10 	vmov	d0, r2, r3
 80038ea:	f00a fb5d 	bl	800dfa8 <sin>
 80038ee:	ec51 0b10 	vmov	r0, r1, d0
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	18d4      	adds	r4, r2, r3
 80038fa:	f7fd f955 	bl	8000ba8 <__aeabi_d2f>
 80038fe:	4603      	mov	r3, r0
 8003900:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 12; i++) {
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3301      	adds	r3, #1
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b0b      	cmp	r3, #11
 800390c:	dd94      	ble.n	8003838 <rotationSteps+0x10>

	}

}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bdb0      	pop	{r4, r5, r7, pc}
 8003918:	54442d18 	.word	0x54442d18
 800391c:	401921fb 	.word	0x401921fb
 8003920:	00000000 	.word	0x00000000
 8003924:	40000000 	.word	0x40000000
 8003928:	43dc0000 	.word	0x43dc0000
 800392c:	40280000 	.word	0x40280000
 8003930:	46abe000 	.word	0x46abe000

08003934 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800393c:	2001      	movs	r0, #1
 800393e:	f006 fc85 	bl	800a24c <osDelay>
 8003942:	e7fb      	b.n	800393c <StartDefaultTask+0x8>

08003944 <scanKeysTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_scanKeysTask */
void scanKeysTask(void *argument)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN scanKeysTask */

	const TickType_t xFrequency = 50 / portTICK_PERIOD_MS;
 800394c:	2332      	movs	r3, #50	; 0x32
 800394e:	617b      	str	r3, [r7, #20]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8003950:	f008 f914 	bl	800bb7c <xTaskGetTickCount>
 8003954:	4603      	mov	r3, r0
 8003956:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8003958:	f107 030c 	add.w	r3, r7, #12
 800395c:	6979      	ldr	r1, [r7, #20]
 800395e:	4618      	mov	r0, r3
 8003960:	f007 ff3e 	bl	800b7e0 <vTaskDelayUntil>

		uint16_t localKeys = readKeys();
 8003964:	f7ff ff37 	bl	80037d6 <readKeys>
 8003968:	4603      	mov	r3, r0
 800396a:	827b      	strh	r3, [r7, #18]

		osMutexAcquire(keysMutexHandle, osWaitForever);
 800396c:	4b07      	ldr	r3, [pc, #28]	; (800398c <scanKeysTask+0x48>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f04f 31ff 	mov.w	r1, #4294967295
 8003974:	4618      	mov	r0, r3
 8003976:	f006 fd0a 	bl	800a38e <osMutexAcquire>

		__atomic_store_n(&keys, localKeys, __ATOMIC_RELAXED);
 800397a:	4a05      	ldr	r2, [pc, #20]	; (8003990 <scanKeysTask+0x4c>)
 800397c:	8a7b      	ldrh	r3, [r7, #18]
 800397e:	8013      	strh	r3, [r2, #0]

		osMutexRelease(keysMutexHandle);
 8003980:	4b02      	ldr	r3, [pc, #8]	; (800398c <scanKeysTask+0x48>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f006 fd4d 	bl	800a424 <osMutexRelease>
	for (;;) {
 800398a:	e7e5      	b.n	8003958 <scanKeysTask+0x14>
 800398c:	20000578 	.word	0x20000578
 8003990:	20000000 	.word	0x20000000

08003994 <displayUpdateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_displayUpdateTask */
void displayUpdateTask(void *argument)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayUpdateTask */

    const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
 800399c:	2364      	movs	r3, #100	; 0x64
 800399e:	617b      	str	r3, [r7, #20]
    TickType_t xLastWakeTime = xTaskGetTickCount();
 80039a0:	f008 f8ec 	bl	800bb7c <xTaskGetTickCount>
 80039a4:	4603      	mov	r3, r0
 80039a6:	60fb      	str	r3, [r7, #12]

    /* Infinite loop */
    for (;;) {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80039a8:	f107 030c 	add.w	r3, r7, #12
 80039ac:	6979      	ldr	r1, [r7, #20]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f007 ff16 	bl	800b7e0 <vTaskDelayUntil>

        osMutexAcquire(keysMutexHandle, osWaitForever);
 80039b4:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <displayUpdateTask+0x78>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f04f 31ff 	mov.w	r1, #4294967295
 80039bc:	4618      	mov	r0, r3
 80039be:	f006 fce6 	bl	800a38e <osMutexAcquire>

        uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 80039c2:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <displayUpdateTask+0x7c>)
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	827b      	strh	r3, [r7, #18]

        osMutexRelease(keysMutexHandle);
 80039c8:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <displayUpdateTask+0x78>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f006 fd29 	bl	800a424 <osMutexRelease>

        u8g2_ClearBuffer(&u8g2);
 80039d2:	4810      	ldr	r0, [pc, #64]	; (8003a14 <displayUpdateTask+0x80>)
 80039d4:	f7fd faba 	bl	8000f4c <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
 80039d8:	490f      	ldr	r1, [pc, #60]	; (8003a18 <displayUpdateTask+0x84>)
 80039da:	480e      	ldr	r0, [pc, #56]	; (8003a14 <displayUpdateTask+0x80>)
 80039dc:	f7fe f966 	bl	8001cac <u8g2_SetFont>

        if (localKeys == 0x0FFF) {
 80039e0:	8a7b      	ldrh	r3, [r7, #18]
 80039e2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d106      	bne.n	80039f8 <displayUpdateTask+0x64>
                u8g2_DrawStr(&u8g2, 2, 20, "- ^_^ -");
 80039ea:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <displayUpdateTask+0x88>)
 80039ec:	2214      	movs	r2, #20
 80039ee:	2102      	movs	r1, #2
 80039f0:	4808      	ldr	r0, [pc, #32]	; (8003a14 <displayUpdateTask+0x80>)
 80039f2:	f7fe f8b9 	bl	8001b68 <u8g2_DrawStr>
 80039f6:	e005      	b.n	8003a04 <displayUpdateTask+0x70>
        } else {
                u8g2_DrawStr(&u8g2, 2, 20, "- ^0^ -");
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <displayUpdateTask+0x8c>)
 80039fa:	2214      	movs	r2, #20
 80039fc:	2102      	movs	r1, #2
 80039fe:	4805      	ldr	r0, [pc, #20]	; (8003a14 <displayUpdateTask+0x80>)
 8003a00:	f7fe f8b2 	bl	8001b68 <u8g2_DrawStr>
        }

        u8g2_SendBuffer(&u8g2);
 8003a04:	4803      	ldr	r0, [pc, #12]	; (8003a14 <displayUpdateTask+0x80>)
 8003a06:	f7fd fb14 	bl	8001032 <u8g2_SendBuffer>
    for (;;) {
 8003a0a:	e7cd      	b.n	80039a8 <displayUpdateTask+0x14>
 8003a0c:	20000578 	.word	0x20000578
 8003a10:	20000000 	.word	0x20000000
 8003a14:	2000057c 	.word	0x2000057c
 8003a18:	0800fe0c 	.word	0x0800fe0c
 8003a1c:	0800fddc 	.word	0x0800fddc
 8003a20:	0800fde4 	.word	0x0800fde4

08003a24 <synthesizeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_synthesizeTask */
void synthesizeTask(void *argument)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	; 0x30
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN synthesizeTask */
  /* Infinite loop */


    TickType_t xLastWakeTime = xTaskGetTickCount();
 8003a2c:	f008 f8a6 	bl	800bb7c <xTaskGetTickCount>
 8003a30:	4603      	mov	r3, r0
 8003a32:	623b      	str	r3, [r7, #32]
    const TickType_t xFrequency = 10000 / portTICK_PERIOD_MS;
 8003a34:	f242 7310 	movw	r3, #10000	; 0x2710
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28

    for(;;)
    {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8003a3a:	f107 0320 	add.w	r3, r7, #32
 8003a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a40:	4618      	mov	r0, r3
 8003a42:	f007 fecd 	bl	800b7e0 <vTaskDelayUntil>

        uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <synthesizeTask+0x64>)
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	84fb      	strh	r3, [r7, #38]	; 0x26

        for(int i = 0; i < OUTPUT_SAMPLES; i++){
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a50:	e012      	b.n	8003a78 <synthesizeTask+0x54>
            char buf [20];
            sprintf(buf, "%i ", output_LUT[i]);
 8003a52:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <synthesizeTask+0x68>)
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f107 030c 	add.w	r3, r7, #12
 8003a60:	490b      	ldr	r1, [pc, #44]	; (8003a90 <synthesizeTask+0x6c>)
 8003a62:	4618      	mov	r0, r3
 8003a64:	f009 fe92 	bl	800d78c <siprintf>
            serialPrint(buf);
 8003a68:	f107 030c 	add.w	r3, r7, #12
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fd45 	bl	80034fc <serialPrint>
        for(int i = 0; i < OUTPUT_SAMPLES; i++){
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	3301      	adds	r3, #1
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8003a7e:	dde8      	ble.n	8003a52 <synthesizeTask+0x2e>
        }
        serialPrintln("\n\n");
 8003a80:	4804      	ldr	r0, [pc, #16]	; (8003a94 <synthesizeTask+0x70>)
 8003a82:	f7ff fd4f 	bl	8003524 <serialPrintln>
    {
 8003a86:	e7d8      	b.n	8003a3a <synthesizeTask+0x16>
 8003a88:	20000000 	.word	0x20000000
 8003a8c:	20000670 	.word	0x20000670
 8003a90:	0800fdec 	.word	0x0800fdec
 8003a94:	0800fdf0 	.word	0x0800fdf0

08003a98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]

	}
        */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003aaa:	f000 fbeb 	bl	8004284 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40014400 	.word	0x40014400

08003abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac0:	b672      	cpsid	i
}
 8003ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003ac4:	e7fe      	b.n	8003ac4 <Error_Handler+0x8>
	...

08003ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_MspInit+0x4c>)
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad2:	4a10      	ldr	r2, [pc, #64]	; (8003b14 <HAL_MspInit+0x4c>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8003ada:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <HAL_MspInit+0x4c>)
 8003adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	607b      	str	r3, [r7, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_MspInit+0x4c>)
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aea:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <HAL_MspInit+0x4c>)
 8003aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af0:	6593      	str	r3, [r2, #88]	; 0x58
 8003af2:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <HAL_MspInit+0x4c>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003afe:	2200      	movs	r2, #0
 8003b00:	210f      	movs	r1, #15
 8003b02:	f06f 0001 	mvn.w	r0, #1
 8003b06:	f001 fea1 	bl	800584c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000

08003b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b09e      	sub	sp, #120	; 0x78
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b30:	f107 0310 	add.w	r3, r7, #16
 8003b34:	2254      	movs	r2, #84	; 0x54
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f009 fd11 	bl	800d560 <memset>
  if(hadc->Instance==ADC1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a25      	ldr	r2, [pc, #148]	; (8003bd8 <HAL_ADC_MspInit+0xc0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d143      	bne.n	8003bd0 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003b48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b4c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003b4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b52:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003b54:	2301      	movs	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003b60:	2307      	movs	r3, #7
 8003b62:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003b64:	2302      	movs	r3, #2
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003b68:	2302      	movs	r3, #2
 8003b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b72:	f107 0310 	add.w	r3, r7, #16
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 fe08 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003b82:	f7ff ff9b 	bl	8003abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <HAL_ADC_MspInit+0xc4>)
 8003b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8a:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <HAL_ADC_MspInit+0xc4>)
 8003b8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_ADC_MspInit+0xc4>)
 8003b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <HAL_ADC_MspInit+0xc4>)
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	4a0e      	ldr	r2, [pc, #56]	; (8003bdc <HAL_ADC_MspInit+0xc4>)
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003baa:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <HAL_ADC_MspInit+0xc4>)
 8003bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = JOYY_Pin|JOYX_Pin;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003bba:	230b      	movs	r3, #11
 8003bbc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bcc:	f002 fbb8 	bl	8006340 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003bd0:	bf00      	nop
 8003bd2:	3778      	adds	r7, #120	; 0x78
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	50040000 	.word	0x50040000
 8003bdc:	40021000 	.word	0x40021000

08003be0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
 8003bf6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a29      	ldr	r2, [pc, #164]	; (8003ca4 <HAL_CAN_MspInit+0xc4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d14b      	bne.n	8003c9a <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003c02:	4b29      	ldr	r3, [pc, #164]	; (8003ca8 <HAL_CAN_MspInit+0xc8>)
 8003c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c06:	4a28      	ldr	r2, [pc, #160]	; (8003ca8 <HAL_CAN_MspInit+0xc8>)
 8003c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c0e:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <HAL_CAN_MspInit+0xc8>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1a:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <HAL_CAN_MspInit+0xc8>)
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1e:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <HAL_CAN_MspInit+0xc8>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c26:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <HAL_CAN_MspInit+0xc8>)
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003c40:	2301      	movs	r3, #1
 8003c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003c44:	2309      	movs	r3, #9
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c48:	f107 0314 	add.w	r3, r7, #20
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c52:	f002 fb75 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003c64:	2301      	movs	r3, #1
 8003c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003c68:	2309      	movs	r3, #9
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4619      	mov	r1, r3
 8003c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c76:	f002 fb63 	bl	8006340 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2105      	movs	r1, #5
 8003c7e:	2013      	movs	r0, #19
 8003c80:	f001 fde4 	bl	800584c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003c84:	2013      	movs	r0, #19
 8003c86:	f001 fdfd 	bl	8005884 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2105      	movs	r1, #5
 8003c8e:	2014      	movs	r0, #20
 8003c90:	f001 fddc 	bl	800584c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003c94:	2014      	movs	r0, #20
 8003c96:	f001 fdf5 	bl	8005884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003c9a:	bf00      	nop
 8003c9c:	3728      	adds	r7, #40	; 0x28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40006400 	.word	0x40006400
 8003ca8:	40021000 	.word	0x40021000

08003cac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb4:	f107 0314 	add.w	r3, r7, #20
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a2f      	ldr	r2, [pc, #188]	; (8003d88 <HAL_DAC_MspInit+0xdc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d158      	bne.n	8003d80 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003cce:	4b2f      	ldr	r3, [pc, #188]	; (8003d8c <HAL_DAC_MspInit+0xe0>)
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd2:	4a2e      	ldr	r2, [pc, #184]	; (8003d8c <HAL_DAC_MspInit+0xe0>)
 8003cd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cda:	4b2c      	ldr	r3, [pc, #176]	; (8003d8c <HAL_DAC_MspInit+0xe0>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce6:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <HAL_DAC_MspInit+0xe0>)
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cea:	4a28      	ldr	r2, [pc, #160]	; (8003d8c <HAL_DAC_MspInit+0xe0>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cf2:	4b26      	ldr	r3, [pc, #152]	; (8003d8c <HAL_DAC_MspInit+0xe0>)
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = OUTR_Pin|OUTL_Pin;
 8003cfe:	2330      	movs	r3, #48	; 0x30
 8003d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d02:	2303      	movs	r3, #3
 8003d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0a:	f107 0314 	add.w	r3, r7, #20
 8003d0e:	4619      	mov	r1, r3
 8003d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d14:	f002 fb14 	bl	8006340 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8003d18:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <HAL_DAC_MspInit+0xe4>)
 8003d1a:	4a1e      	ldr	r2, [pc, #120]	; (8003d94 <HAL_DAC_MspInit+0xe8>)
 8003d1c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8003d1e:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <HAL_DAC_MspInit+0xe4>)
 8003d20:	2206      	movs	r2, #6
 8003d22:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d24:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <HAL_DAC_MspInit+0xe4>)
 8003d26:	2210      	movs	r2, #16
 8003d28:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d2a:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_DAC_MspInit+0xe4>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003d30:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <HAL_DAC_MspInit+0xe4>)
 8003d32:	2280      	movs	r2, #128	; 0x80
 8003d34:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d36:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <HAL_DAC_MspInit+0xe4>)
 8003d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d3c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d3e:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <HAL_DAC_MspInit+0xe4>)
 8003d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d44:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_DAC_MspInit+0xe4>)
 8003d48:	2220      	movs	r2, #32
 8003d4a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003d4c:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <HAL_DAC_MspInit+0xe4>)
 8003d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003d54:	480e      	ldr	r0, [pc, #56]	; (8003d90 <HAL_DAC_MspInit+0xe4>)
 8003d56:	f002 f8ad 	bl	8005eb4 <HAL_DMA_Init>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8003d60:	f7ff feac 	bl	8003abc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <HAL_DAC_MspInit+0xe4>)
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	4a09      	ldr	r2, [pc, #36]	; (8003d90 <HAL_DAC_MspInit+0xe4>)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003d70:	2200      	movs	r2, #0
 8003d72:	2105      	movs	r1, #5
 8003d74:	2036      	movs	r0, #54	; 0x36
 8003d76:	f001 fd69 	bl	800584c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d7a:	2036      	movs	r0, #54	; 0x36
 8003d7c:	f001 fd82 	bl	8005884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003d80:	bf00      	nop
 8003d82:	3728      	adds	r7, #40	; 0x28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40007400 	.word	0x40007400
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	20000364 	.word	0x20000364
 8003d94:	40020030 	.word	0x40020030

08003d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b09e      	sub	sp, #120	; 0x78
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	605a      	str	r2, [r3, #4]
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003db0:	f107 0310 	add.w	r3, r7, #16
 8003db4:	2254      	movs	r2, #84	; 0x54
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f009 fbd1 	bl	800d560 <memset>
  if(hi2c->Instance==I2C1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a26      	ldr	r2, [pc, #152]	; (8003e5c <HAL_I2C_MspInit+0xc4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d145      	bne.n	8003e54 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003dc8:	2340      	movs	r3, #64	; 0x40
 8003dca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dd0:	f107 0310 	add.w	r3, r7, #16
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f004 fcd9 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003de0:	f7ff fe6c 	bl	8003abc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de4:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <HAL_I2C_MspInit+0xc8>)
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <HAL_I2C_MspInit+0xc8>)
 8003dea:	f043 0302 	orr.w	r3, r3, #2
 8003dee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003df0:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_I2C_MspInit+0xc8>)
 8003df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dfc:	23c0      	movs	r3, #192	; 0xc0
 8003dfe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e00:	2312      	movs	r3, #18
 8003e02:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e14:	4619      	mov	r1, r3
 8003e16:	4813      	ldr	r0, [pc, #76]	; (8003e64 <HAL_I2C_MspInit+0xcc>)
 8003e18:	f002 fa92 	bl	8006340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e1c:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <HAL_I2C_MspInit+0xc8>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	4a0f      	ldr	r2, [pc, #60]	; (8003e60 <HAL_I2C_MspInit+0xc8>)
 8003e22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e26:	6593      	str	r3, [r2, #88]	; 0x58
 8003e28:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <HAL_I2C_MspInit+0xc8>)
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003e34:	2200      	movs	r2, #0
 8003e36:	2105      	movs	r1, #5
 8003e38:	201f      	movs	r0, #31
 8003e3a:	f001 fd07 	bl	800584c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003e3e:	201f      	movs	r0, #31
 8003e40:	f001 fd20 	bl	8005884 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8003e44:	2200      	movs	r2, #0
 8003e46:	2105      	movs	r1, #5
 8003e48:	2020      	movs	r0, #32
 8003e4a:	f001 fcff 	bl	800584c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003e4e:	2020      	movs	r0, #32
 8003e50:	f001 fd18 	bl	8005884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e54:	bf00      	nop
 8003e56:	3778      	adds	r7, #120	; 0x78
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40005400 	.word	0x40005400
 8003e60:	40021000 	.word	0x40021000
 8003e64:	48000400 	.word	0x48000400

08003e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d10c      	bne.n	8003e94 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6593      	str	r3, [r2, #88]	; 0x58
 8003e86:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003e92:	e02a      	b.n	8003eea <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a17      	ldr	r2, [pc, #92]	; (8003ef8 <HAL_TIM_Base_MspInit+0x90>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d114      	bne.n	8003ec8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e9e:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	4a14      	ldr	r2, [pc, #80]	; (8003ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8003ea4:	f043 0310 	orr.w	r3, r3, #16
 8003ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2105      	movs	r1, #5
 8003eba:	2036      	movs	r0, #54	; 0x36
 8003ebc:	f001 fcc6 	bl	800584c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ec0:	2036      	movs	r0, #54	; 0x36
 8003ec2:	f001 fcdf 	bl	8005884 <HAL_NVIC_EnableIRQ>
}
 8003ec6:	e010      	b.n	8003eea <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a0b      	ldr	r2, [pc, #44]	; (8003efc <HAL_TIM_Base_MspInit+0x94>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d10b      	bne.n	8003eea <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	4a07      	ldr	r2, [pc, #28]	; (8003ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8003ed8:	f043 0320 	orr.w	r3, r3, #32
 8003edc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_TIM_Base_MspInit+0x8c>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
}
 8003eea:	bf00      	nop
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40001000 	.word	0x40001000
 8003efc:	40001400 	.word	0x40001400

08003f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b09e      	sub	sp, #120	; 0x78
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f18:	f107 0310 	add.w	r3, r7, #16
 8003f1c:	2254      	movs	r2, #84	; 0x54
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f009 fb1d 	bl	800d560 <memset>
  if(huart->Instance==USART2)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a28      	ldr	r2, [pc, #160]	; (8003fcc <HAL_UART_MspInit+0xcc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d148      	bne.n	8003fc2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f30:	2302      	movs	r3, #2
 8003f32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003f34:	2300      	movs	r3, #0
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f38:	f107 0310 	add.w	r3, r7, #16
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f004 fc25 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f48:	f7ff fdb8 	bl	8003abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f4c:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_UART_MspInit+0xd0>)
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	4a1f      	ldr	r2, [pc, #124]	; (8003fd0 <HAL_UART_MspInit+0xd0>)
 8003f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f56:	6593      	str	r3, [r2, #88]	; 0x58
 8003f58:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <HAL_UART_MspInit+0xd0>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f64:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <HAL_UART_MspInit+0xd0>)
 8003f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f68:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_UART_MspInit+0xd0>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f70:	4b17      	ldr	r3, [pc, #92]	; (8003fd0 <HAL_UART_MspInit+0xd0>)
 8003f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f80:	2302      	movs	r3, #2
 8003f82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f8c:	2307      	movs	r3, #7
 8003f8e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003f94:	4619      	mov	r1, r3
 8003f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f9a:	f002 f9d1 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fac:	2303      	movs	r3, #3
 8003fae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fbe:	f002 f9bf 	bl	8006340 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fc2:	bf00      	nop
 8003fc4:	3778      	adds	r7, #120	; 0x78
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40004400 	.word	0x40004400
 8003fd0:	40021000 	.word	0x40021000

08003fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08c      	sub	sp, #48	; 0x30
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	; (800409c <HAL_InitTick+0xc8>)
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe6:	4a2d      	ldr	r2, [pc, #180]	; (800409c <HAL_InitTick+0xc8>)
 8003fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fec:	6613      	str	r3, [r2, #96]	; 0x60
 8003fee:	4b2b      	ldr	r3, [pc, #172]	; (800409c <HAL_InitTick+0xc8>)
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ffa:	f107 020c 	add.w	r2, r7, #12
 8003ffe:	f107 0310 	add.w	r3, r7, #16
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f004 fb2f 	bl	8008668 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800400a:	f004 fb17 	bl	800863c <HAL_RCC_GetPCLK2Freq>
 800400e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004012:	4a23      	ldr	r2, [pc, #140]	; (80040a0 <HAL_InitTick+0xcc>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	0c9b      	lsrs	r3, r3, #18
 800401a:	3b01      	subs	r3, #1
 800401c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 800401e:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <HAL_InitTick+0xd0>)
 8004020:	4a21      	ldr	r2, [pc, #132]	; (80040a8 <HAL_InitTick+0xd4>)
 8004022:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8004024:	4b1f      	ldr	r3, [pc, #124]	; (80040a4 <HAL_InitTick+0xd0>)
 8004026:	f240 32e7 	movw	r2, #999	; 0x3e7
 800402a:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800402c:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <HAL_InitTick+0xd0>)
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8004032:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <HAL_InitTick+0xd0>)
 8004034:	2200      	movs	r2, #0
 8004036:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004038:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <HAL_InitTick+0xd0>)
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800403e:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <HAL_InitTick+0xd0>)
 8004040:	2200      	movs	r2, #0
 8004042:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8004044:	4817      	ldr	r0, [pc, #92]	; (80040a4 <HAL_InitTick+0xd0>)
 8004046:	f004 fe99 	bl	8008d7c <HAL_TIM_Base_Init>
 800404a:	4603      	mov	r3, r0
 800404c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004054:	2b00      	cmp	r3, #0
 8004056:	d11b      	bne.n	8004090 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8004058:	4812      	ldr	r0, [pc, #72]	; (80040a4 <HAL_InitTick+0xd0>)
 800405a:	f004 ff33 	bl	8008ec4 <HAL_TIM_Base_Start_IT>
 800405e:	4603      	mov	r3, r0
 8004060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004064:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004068:	2b00      	cmp	r3, #0
 800406a:	d111      	bne.n	8004090 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800406c:	2019      	movs	r0, #25
 800406e:	f001 fc09 	bl	8005884 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b0f      	cmp	r3, #15
 8004076:	d808      	bhi.n	800408a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8004078:	2200      	movs	r2, #0
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	2019      	movs	r0, #25
 800407e:	f001 fbe5 	bl	800584c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004082:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <HAL_InitTick+0xd8>)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	e002      	b.n	8004090 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004094:	4618      	mov	r0, r3
 8004096:	3730      	adds	r7, #48	; 0x30
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000
 80040a0:	431bde83 	.word	0x431bde83
 80040a4:	200020b0 	.word	0x200020b0
 80040a8:	40014400 	.word	0x40014400
 80040ac:	20000038 	.word	0x20000038

080040b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040b4:	e7fe      	b.n	80040b4 <NMI_Handler+0x4>

080040b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ba:	e7fe      	b.n	80040ba <HardFault_Handler+0x4>

080040bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040c0:	e7fe      	b.n	80040c0 <MemManage_Handler+0x4>

080040c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040c6:	e7fe      	b.n	80040c6 <BusFault_Handler+0x4>

080040c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040cc:	e7fe      	b.n	80040cc <UsageFault_Handler+0x4>

080040ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80040e0:	4802      	ldr	r0, [pc, #8]	; (80040ec <DMA1_Channel3_IRQHandler+0x10>)
 80040e2:	f002 f840 	bl	8006166 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000364 	.word	0x20000364

080040f0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80040f4:	4802      	ldr	r0, [pc, #8]	; (8004100 <CAN1_TX_IRQHandler+0x10>)
 80040f6:	f001 f8b8 	bl	800526a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000328 	.word	0x20000328

08004104 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004108:	4802      	ldr	r0, [pc, #8]	; (8004114 <CAN1_RX0_IRQHandler+0x10>)
 800410a:	f001 f8ae 	bl	800526a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000328 	.word	0x20000328

08004118 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800411c:	4802      	ldr	r0, [pc, #8]	; (8004128 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800411e:	f004 ff25 	bl	8008f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200020b0 	.word	0x200020b0

0800412c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004130:	4802      	ldr	r0, [pc, #8]	; (800413c <I2C1_EV_IRQHandler+0x10>)
 8004132:	f002 fc23 	bl	800697c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	200003ac 	.word	0x200003ac

08004140 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004144:	4802      	ldr	r0, [pc, #8]	; (8004150 <I2C1_ER_IRQHandler+0x10>)
 8004146:	f002 fc33 	bl	80069b0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	200003ac 	.word	0x200003ac

08004154 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004158:	4803      	ldr	r0, [pc, #12]	; (8004168 <TIM6_DAC_IRQHandler+0x14>)
 800415a:	f004 ff07 	bl	8008f6c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800415e:	4803      	ldr	r0, [pc, #12]	; (800416c <TIM6_DAC_IRQHandler+0x18>)
 8004160:	f001 fc8c 	bl	8005a7c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004164:	bf00      	nop
 8004166:	bd80      	pop	{r7, pc}
 8004168:	2000044c 	.word	0x2000044c
 800416c:	20000350 	.word	0x20000350

08004170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004178:	4a14      	ldr	r2, [pc, #80]	; (80041cc <_sbrk+0x5c>)
 800417a:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <_sbrk+0x60>)
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004184:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <_sbrk+0x64>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d102      	bne.n	8004192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <_sbrk+0x64>)
 800418e:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <_sbrk+0x68>)
 8004190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004192:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <_sbrk+0x64>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	429a      	cmp	r2, r3
 800419e:	d207      	bcs.n	80041b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041a0:	f009 f9a4 	bl	800d4ec <__errno>
 80041a4:	4603      	mov	r3, r0
 80041a6:	220c      	movs	r2, #12
 80041a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295
 80041ae:	e009      	b.n	80041c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <_sbrk+0x64>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <_sbrk+0x64>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	4a05      	ldr	r2, [pc, #20]	; (80041d4 <_sbrk+0x64>)
 80041c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041c2:	68fb      	ldr	r3, [r7, #12]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20010000 	.word	0x20010000
 80041d0:	00000400 	.word	0x00000400
 80041d4:	200020fc 	.word	0x200020fc
 80041d8:	200037e0 	.word	0x200037e0

080041dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <SystemInit+0x20>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	4a05      	ldr	r2, [pc, #20]	; (80041fc <SystemInit+0x20>)
 80041e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	e000ed00 	.word	0xe000ed00

08004200 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004238 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004204:	f7ff ffea 	bl	80041dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004208:	480c      	ldr	r0, [pc, #48]	; (800423c <LoopForever+0x6>)
  ldr r1, =_edata
 800420a:	490d      	ldr	r1, [pc, #52]	; (8004240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <LoopForever+0xe>)
  movs r3, #0
 800420e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004210:	e002      	b.n	8004218 <LoopCopyDataInit>

08004212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004216:	3304      	adds	r3, #4

08004218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800421a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800421c:	d3f9      	bcc.n	8004212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004220:	4c0a      	ldr	r4, [pc, #40]	; (800424c <LoopForever+0x16>)
  movs r3, #0
 8004222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004224:	e001      	b.n	800422a <LoopFillZerobss>

08004226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004228:	3204      	adds	r2, #4

0800422a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800422a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800422c:	d3fb      	bcc.n	8004226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800422e:	f009 f963 	bl	800d4f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004232:	f7fe fcd5 	bl	8002be0 <main>

08004236 <LoopForever>:

LoopForever:
    b LoopForever
 8004236:	e7fe      	b.n	8004236 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004238:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800423c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004240:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8004244:	080106e0 	.word	0x080106e0
  ldr r2, =_sbss
 8004248:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800424c:	200037dc 	.word	0x200037dc

08004250 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004250:	e7fe      	b.n	8004250 <ADC1_IRQHandler>

08004252 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800425c:	2003      	movs	r0, #3
 800425e:	f001 faea 	bl	8005836 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004262:	200f      	movs	r0, #15
 8004264:	f7ff feb6 	bl	8003fd4 <HAL_InitTick>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	71fb      	strb	r3, [r7, #7]
 8004272:	e001      	b.n	8004278 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004274:	f7ff fc28 	bl	8003ac8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004278:	79fb      	ldrb	r3, [r7, #7]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HAL_IncTick+0x20>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_IncTick+0x24>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4413      	add	r3, r2
 8004294:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <HAL_IncTick+0x24>)
 8004296:	6013      	str	r3, [r2, #0]
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	2000003c 	.word	0x2000003c
 80042a8:	20002100 	.word	0x20002100

080042ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return uwTick;
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <HAL_GetTick+0x14>)
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	20002100 	.word	0x20002100

080042c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042cc:	f7ff ffee 	bl	80042ac <HAL_GetTick>
 80042d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d005      	beq.n	80042ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_Delay+0x44>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042ea:	bf00      	nop
 80042ec:	f7ff ffde 	bl	80042ac <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d8f7      	bhi.n	80042ec <HAL_Delay+0x28>
  {
  }
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	2000003c 	.word	0x2000003c

0800430c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	609a      	str	r2, [r3, #8]
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	609a      	str	r2, [r3, #8]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3360      	adds	r3, #96	; 0x60
 8004386:	461a      	mov	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <LL_ADC_SetOffset+0x44>)
 8004396:	4013      	ands	r3, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80043ac:	bf00      	nop
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	03fff000 	.word	0x03fff000

080043bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3360      	adds	r3, #96	; 0x60
 80043ca:	461a      	mov	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3360      	adds	r3, #96	; 0x60
 80043f8:	461a      	mov	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	431a      	orrs	r2, r3
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800441e:	b480      	push	{r7}
 8004420:	b087      	sub	sp, #28
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3330      	adds	r3, #48	; 0x30
 800442e:	461a      	mov	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	4413      	add	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	211f      	movs	r1, #31
 800444a:	fa01 f303 	lsl.w	r3, r1, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	401a      	ands	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	0e9b      	lsrs	r3, r3, #26
 8004456:	f003 011f 	and.w	r1, r3, #31
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	fa01 f303 	lsl.w	r3, r1, r3
 8004464:	431a      	orrs	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004476:	b480      	push	{r7}
 8004478:	b087      	sub	sp, #28
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3314      	adds	r3, #20
 8004486:	461a      	mov	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	0e5b      	lsrs	r3, r3, #25
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	4413      	add	r3, r2
 8004494:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	0d1b      	lsrs	r3, r3, #20
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	2107      	movs	r1, #7
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	43db      	mvns	r3, r3
 80044aa:	401a      	ands	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	0d1b      	lsrs	r3, r3, #20
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ba:	431a      	orrs	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e4:	43db      	mvns	r3, r3
 80044e6:	401a      	ands	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f003 0318 	and.w	r3, r3, #24
 80044ee:	4908      	ldr	r1, [pc, #32]	; (8004510 <LL_ADC_SetChannelSingleDiff+0x44>)
 80044f0:	40d9      	lsrs	r1, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	400b      	ands	r3, r1
 80044f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fa:	431a      	orrs	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004502:	bf00      	nop
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	0007ffff 	.word	0x0007ffff

08004514 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004524:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6093      	str	r3, [r2, #8]
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800454c:	d101      	bne.n	8004552 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004570:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004574:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004598:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800459c:	d101      	bne.n	80045a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <LL_ADC_IsEnabled+0x18>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <LL_ADC_IsEnabled+0x1a>
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d101      	bne.n	80045ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b08      	cmp	r3, #8
 800460e:	d101      	bne.n	8004614 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004630:	2300      	movs	r3, #0
 8004632:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e12c      	b.n	8004898 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff fa63 	bl	8003b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff67 	bl	8004538 <LL_ADC_IsDeepPowerDownEnabled>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d004      	beq.n	800467a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff ff4d 	bl	8004514 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff ff82 	bl	8004588 <LL_ADC_IsInternalRegulatorEnabled>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d115      	bne.n	80046b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff66 	bl	8004560 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004694:	4b82      	ldr	r3, [pc, #520]	; (80048a0 <HAL_ADC_Init+0x27c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	099b      	lsrs	r3, r3, #6
 800469a:	4a82      	ldr	r2, [pc, #520]	; (80048a4 <HAL_ADC_Init+0x280>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	099b      	lsrs	r3, r3, #6
 80046a2:	3301      	adds	r3, #1
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046a8:	e002      	b.n	80046b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f9      	bne.n	80046aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff ff64 	bl	8004588 <LL_ADC_IsInternalRegulatorEnabled>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10d      	bne.n	80046e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	f043 0210 	orr.w	r2, r3, #16
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff ff75 	bl	80045d6 <LL_ADC_REG_IsConversionOngoing>
 80046ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f040 80c5 	bne.w	8004886 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 80c1 	bne.w	8004886 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004708:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800470c:	f043 0202 	orr.w	r2, r3, #2
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff ff49 	bl	80045b0 <LL_ADC_IsEnabled>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10b      	bne.n	800473c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004724:	4860      	ldr	r0, [pc, #384]	; (80048a8 <HAL_ADC_Init+0x284>)
 8004726:	f7ff ff43 	bl	80045b0 <LL_ADC_IsEnabled>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d105      	bne.n	800473c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4619      	mov	r1, r3
 8004736:	485d      	ldr	r0, [pc, #372]	; (80048ac <HAL_ADC_Init+0x288>)
 8004738:	f7ff fde8 	bl	800430c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7e5b      	ldrb	r3, [r3, #25]
 8004740:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004746:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800474c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004752:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800475a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d106      	bne.n	8004778 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	3b01      	subs	r3, #1
 8004770:	045b      	lsls	r3, r3, #17
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4313      	orrs	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	2b00      	cmp	r3, #0
 800477e:	d009      	beq.n	8004794 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	4b45      	ldr	r3, [pc, #276]	; (80048b0 <HAL_ADC_Init+0x28c>)
 800479c:	4013      	ands	r3, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	69b9      	ldr	r1, [r7, #24]
 80047a4:	430b      	orrs	r3, r1
 80047a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff ff12 	bl	80045d6 <LL_ADC_REG_IsConversionOngoing>
 80047b2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff ff1f 	bl	80045fc <LL_ADC_INJ_IsConversionOngoing>
 80047be:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d13d      	bne.n	8004842 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d13a      	bne.n	8004842 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80047d0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047d8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047e8:	f023 0302 	bic.w	r3, r3, #2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	69b9      	ldr	r1, [r7, #24]
 80047f2:	430b      	orrs	r3, r1
 80047f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d118      	bne.n	8004832 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800480a:	f023 0304 	bic.w	r3, r3, #4
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800481c:	4311      	orrs	r1, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004822:	430a      	orrs	r2, r1
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	611a      	str	r2, [r3, #16]
 8004830:	e007      	b.n	8004842 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d10c      	bne.n	8004864 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	f023 010f 	bic.w	r1, r3, #15
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	1e5a      	subs	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
 8004862:	e007      	b.n	8004874 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 020f 	bic.w	r2, r2, #15
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	f023 0303 	bic.w	r3, r3, #3
 800487c:	f043 0201 	orr.w	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	655a      	str	r2, [r3, #84]	; 0x54
 8004884:	e007      	b.n	8004896 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488a:	f043 0210 	orr.w	r2, r3, #16
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004896:	7ffb      	ldrb	r3, [r7, #31]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3720      	adds	r7, #32
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000034 	.word	0x20000034
 80048a4:	053e2d63 	.word	0x053e2d63
 80048a8:	50040000 	.word	0x50040000
 80048ac:	50040300 	.word	0x50040300
 80048b0:	fff0c007 	.word	0xfff0c007

080048b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b0b6      	sub	sp, #216	; 0xd8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x22>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e3b9      	b.n	800504a <HAL_ADC_ConfigChannel+0x796>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fe77 	bl	80045d6 <LL_ADC_REG_IsConversionOngoing>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 839e 	bne.w	800502c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b05      	cmp	r3, #5
 80048f6:	d824      	bhi.n	8004942 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	3b02      	subs	r3, #2
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d81b      	bhi.n	800493a <HAL_ADC_ConfigChannel+0x86>
 8004902:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <HAL_ADC_ConfigChannel+0x54>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	08004919 	.word	0x08004919
 800490c:	08004921 	.word	0x08004921
 8004910:	08004929 	.word	0x08004929
 8004914:	08004931 	.word	0x08004931
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	220c      	movs	r2, #12
 800491c:	605a      	str	r2, [r3, #4]
          break;
 800491e:	e011      	b.n	8004944 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2212      	movs	r2, #18
 8004924:	605a      	str	r2, [r3, #4]
          break;
 8004926:	e00d      	b.n	8004944 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2218      	movs	r2, #24
 800492c:	605a      	str	r2, [r3, #4]
          break;
 800492e:	e009      	b.n	8004944 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004936:	605a      	str	r2, [r3, #4]
          break;
 8004938:	e004      	b.n	8004944 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2206      	movs	r2, #6
 800493e:	605a      	str	r2, [r3, #4]
          break;
 8004940:	e000      	b.n	8004944 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004942:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	6859      	ldr	r1, [r3, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	f7ff fd64 	bl	800441e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fe3b 	bl	80045d6 <LL_ADC_REG_IsConversionOngoing>
 8004960:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff fe47 	bl	80045fc <LL_ADC_INJ_IsConversionOngoing>
 800496e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004972:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004976:	2b00      	cmp	r3, #0
 8004978:	f040 81a6 	bne.w	8004cc8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800497c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004980:	2b00      	cmp	r3, #0
 8004982:	f040 81a1 	bne.w	8004cc8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6819      	ldr	r1, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	461a      	mov	r2, r3
 8004994:	f7ff fd6f 	bl	8004476 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	08db      	lsrs	r3, r3, #3
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d00a      	beq.n	80049d0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6919      	ldr	r1, [r3, #16]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049ca:	f7ff fcd3 	bl	8004374 <LL_ADC_SetOffset>
 80049ce:	e17b      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fcf0 	bl	80043bc <LL_ADC_GetOffsetChannel>
 80049dc:	4603      	mov	r3, r0
 80049de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x148>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2100      	movs	r1, #0
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fce5 	bl	80043bc <LL_ADC_GetOffsetChannel>
 80049f2:	4603      	mov	r3, r0
 80049f4:	0e9b      	lsrs	r3, r3, #26
 80049f6:	f003 021f 	and.w	r2, r3, #31
 80049fa:	e01e      	b.n	8004a3a <HAL_ADC_ConfigChannel+0x186>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fcda 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a12:	fa93 f3a3 	rbit	r3, r3
 8004a16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004a2a:	2320      	movs	r3, #32
 8004a2c:	e004      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004a2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d105      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x19e>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	0e9b      	lsrs	r3, r3, #26
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	e018      	b.n	8004a84 <HAL_ADC_ConfigChannel+0x1d0>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a5e:	fa93 f3a3 	rbit	r3, r3
 8004a62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004a6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004a76:	2320      	movs	r3, #32
 8004a78:	e004      	b.n	8004a84 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a7e:	fab3 f383 	clz	r3, r3
 8004a82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d106      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fca9 	bl	80043e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fc8d 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0x20e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fc82 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	0e9b      	lsrs	r3, r3, #26
 8004abc:	f003 021f 	and.w	r2, r3, #31
 8004ac0:	e01e      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x24c>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff fc77 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ad8:	fa93 f3a3 	rbit	r3, r3
 8004adc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004ae0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004ae8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004af0:	2320      	movs	r3, #32
 8004af2:	e004      	b.n	8004afe <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004af4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004af8:	fab3 f383 	clz	r3, r3
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d105      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x264>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	0e9b      	lsrs	r3, r3, #26
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	e018      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x296>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b24:	fa93 f3a3 	rbit	r3, r3
 8004b28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004b2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	e004      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b44:	fab3 f383 	clz	r3, r3
 8004b48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d106      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2200      	movs	r2, #0
 8004b54:	2101      	movs	r1, #1
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff fc46 	bl	80043e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2102      	movs	r1, #2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fc2a 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x2d4>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2102      	movs	r1, #2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff fc1f 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	0e9b      	lsrs	r3, r3, #26
 8004b82:	f003 021f 	and.w	r2, r3, #31
 8004b86:	e01e      	b.n	8004bc6 <HAL_ADC_ConfigChannel+0x312>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fc14 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b9e:	fa93 f3a3 	rbit	r3, r3
 8004ba2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004ba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004baa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004bae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004bb6:	2320      	movs	r3, #32
 8004bb8:	e004      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bbe:	fab3 f383 	clz	r3, r3
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d105      	bne.n	8004bde <HAL_ADC_ConfigChannel+0x32a>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	0e9b      	lsrs	r3, r3, #26
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	e016      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x358>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bea:	fa93 f3a3 	rbit	r3, r3
 8004bee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004bf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004bfe:	2320      	movs	r3, #32
 8004c00:	e004      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c06:	fab3 f383 	clz	r3, r3
 8004c0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d106      	bne.n	8004c1e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2102      	movs	r1, #2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff fbe5 	bl	80043e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2103      	movs	r1, #3
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fbc9 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10a      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x396>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2103      	movs	r1, #3
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fbbe 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004c40:	4603      	mov	r3, r0
 8004c42:	0e9b      	lsrs	r3, r3, #26
 8004c44:	f003 021f 	and.w	r2, r3, #31
 8004c48:	e017      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x3c6>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2103      	movs	r1, #3
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fbb3 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004c56:	4603      	mov	r3, r0
 8004c58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c5c:	fa93 f3a3 	rbit	r3, r3
 8004c60:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c64:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	e003      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c72:	fab3 f383 	clz	r3, r3
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d105      	bne.n	8004c92 <HAL_ADC_ConfigChannel+0x3de>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	0e9b      	lsrs	r3, r3, #26
 8004c8c:	f003 031f 	and.w	r3, r3, #31
 8004c90:	e011      	b.n	8004cb6 <HAL_ADC_ConfigChannel+0x402>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c9a:	fa93 f3a3 	rbit	r3, r3
 8004c9e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004ca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004caa:	2320      	movs	r3, #32
 8004cac:	e003      	b.n	8004cb6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb0:	fab3 f383 	clz	r3, r3
 8004cb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d106      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fb90 	bl	80043e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fc6f 	bl	80045b0 <LL_ADC_IsEnabled>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f040 813f 	bne.w	8004f58 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	6819      	ldr	r1, [r3, #0]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f7ff fbf0 	bl	80044cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	4a8e      	ldr	r2, [pc, #568]	; (8004f2c <HAL_ADC_ConfigChannel+0x678>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	f040 8130 	bne.w	8004f58 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x46c>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	0e9b      	lsrs	r3, r3, #26
 8004d0e:	3301      	adds	r3, #1
 8004d10:	f003 031f 	and.w	r3, r3, #31
 8004d14:	2b09      	cmp	r3, #9
 8004d16:	bf94      	ite	ls
 8004d18:	2301      	movls	r3, #1
 8004d1a:	2300      	movhi	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	e019      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x4a0>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d28:	fa93 f3a3 	rbit	r3, r3
 8004d2c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004d2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d30:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004d38:	2320      	movs	r3, #32
 8004d3a:	e003      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d3e:	fab3 f383 	clz	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	3301      	adds	r3, #1
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	2b09      	cmp	r3, #9
 8004d4c:	bf94      	ite	ls
 8004d4e:	2301      	movls	r3, #1
 8004d50:	2300      	movhi	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d079      	beq.n	8004e4c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d107      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x4c0>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	0e9b      	lsrs	r3, r3, #26
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	069b      	lsls	r3, r3, #26
 8004d6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d72:	e015      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x4ec>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d7c:	fa93 f3a3 	rbit	r3, r3
 8004d80:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d84:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004d8c:	2320      	movs	r3, #32
 8004d8e:	e003      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d92:	fab3 f383 	clz	r3, r3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	3301      	adds	r3, #1
 8004d9a:	069b      	lsls	r3, r3, #26
 8004d9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d109      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x50c>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	0e9b      	lsrs	r3, r3, #26
 8004db2:	3301      	adds	r3, #1
 8004db4:	f003 031f 	and.w	r3, r3, #31
 8004db8:	2101      	movs	r1, #1
 8004dba:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbe:	e017      	b.n	8004df0 <HAL_ADC_ConfigChannel+0x53c>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc8:	fa93 f3a3 	rbit	r3, r3
 8004dcc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004dd8:	2320      	movs	r3, #32
 8004dda:	e003      	b.n	8004de4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dde:	fab3 f383 	clz	r3, r3
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	3301      	adds	r3, #1
 8004de6:	f003 031f 	and.w	r3, r3, #31
 8004dea:	2101      	movs	r1, #1
 8004dec:	fa01 f303 	lsl.w	r3, r1, r3
 8004df0:	ea42 0103 	orr.w	r1, r2, r3
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10a      	bne.n	8004e16 <HAL_ADC_ConfigChannel+0x562>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	0e9b      	lsrs	r3, r3, #26
 8004e06:	3301      	adds	r3, #1
 8004e08:	f003 021f 	and.w	r2, r3, #31
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	4413      	add	r3, r2
 8004e12:	051b      	lsls	r3, r3, #20
 8004e14:	e018      	b.n	8004e48 <HAL_ADC_ConfigChannel+0x594>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	fa93 f3a3 	rbit	r3, r3
 8004e22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004e2e:	2320      	movs	r3, #32
 8004e30:	e003      	b.n	8004e3a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e34:	fab3 f383 	clz	r3, r3
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f003 021f 	and.w	r2, r3, #31
 8004e40:	4613      	mov	r3, r2
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	4413      	add	r3, r2
 8004e46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	e080      	b.n	8004f4e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d107      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x5b4>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	0e9b      	lsrs	r3, r3, #26
 8004e5e:	3301      	adds	r3, #1
 8004e60:	069b      	lsls	r3, r3, #26
 8004e62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e66:	e015      	b.n	8004e94 <HAL_ADC_ConfigChannel+0x5e0>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	fa93 f3a3 	rbit	r3, r3
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004e80:	2320      	movs	r3, #32
 8004e82:	e003      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e86:	fab3 f383 	clz	r3, r3
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	069b      	lsls	r3, r3, #26
 8004e90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d109      	bne.n	8004eb4 <HAL_ADC_ConfigChannel+0x600>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	0e9b      	lsrs	r3, r3, #26
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	2101      	movs	r1, #1
 8004eae:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb2:	e017      	b.n	8004ee4 <HAL_ADC_ConfigChannel+0x630>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	fa93 f3a3 	rbit	r3, r3
 8004ec0:	61fb      	str	r3, [r7, #28]
  return result;
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004ecc:	2320      	movs	r3, #32
 8004ece:	e003      	b.n	8004ed8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	fab3 f383 	clz	r3, r3
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	3301      	adds	r3, #1
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	2101      	movs	r1, #1
 8004ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee4:	ea42 0103 	orr.w	r1, r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10d      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x65c>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	0e9b      	lsrs	r3, r3, #26
 8004efa:	3301      	adds	r3, #1
 8004efc:	f003 021f 	and.w	r2, r3, #31
 8004f00:	4613      	mov	r3, r2
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	4413      	add	r3, r2
 8004f06:	3b1e      	subs	r3, #30
 8004f08:	051b      	lsls	r3, r3, #20
 8004f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	e01d      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x698>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	fa93 f3a3 	rbit	r3, r3
 8004f1c:	613b      	str	r3, [r7, #16]
  return result;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004f28:	2320      	movs	r3, #32
 8004f2a:	e005      	b.n	8004f38 <HAL_ADC_ConfigChannel+0x684>
 8004f2c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	fab3 f383 	clz	r3, r3
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	3301      	adds	r3, #1
 8004f3a:	f003 021f 	and.w	r2, r3, #31
 8004f3e:	4613      	mov	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4413      	add	r3, r2
 8004f44:	3b1e      	subs	r3, #30
 8004f46:	051b      	lsls	r3, r3, #20
 8004f48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	6892      	ldr	r2, [r2, #8]
 8004f52:	4619      	mov	r1, r3
 8004f54:	f7ff fa8f 	bl	8004476 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b3d      	ldr	r3, [pc, #244]	; (8005054 <HAL_ADC_ConfigChannel+0x7a0>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d06c      	beq.n	800503e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f64:	483c      	ldr	r0, [pc, #240]	; (8005058 <HAL_ADC_ConfigChannel+0x7a4>)
 8004f66:	f7ff f9f7 	bl	8004358 <LL_ADC_GetCommonPathInternalCh>
 8004f6a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a3a      	ldr	r2, [pc, #232]	; (800505c <HAL_ADC_ConfigChannel+0x7a8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d127      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d121      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a35      	ldr	r2, [pc, #212]	; (8005060 <HAL_ADC_ConfigChannel+0x7ac>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d157      	bne.n	800503e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f96:	4619      	mov	r1, r3
 8004f98:	482f      	ldr	r0, [pc, #188]	; (8005058 <HAL_ADC_ConfigChannel+0x7a4>)
 8004f9a:	f7ff f9ca 	bl	8004332 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f9e:	4b31      	ldr	r3, [pc, #196]	; (8005064 <HAL_ADC_ConfigChannel+0x7b0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	099b      	lsrs	r3, r3, #6
 8004fa4:	4a30      	ldr	r2, [pc, #192]	; (8005068 <HAL_ADC_ConfigChannel+0x7b4>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	099b      	lsrs	r3, r3, #6
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	4613      	mov	r3, r2
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004fb8:	e002      	b.n	8004fc0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f9      	bne.n	8004fba <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fc6:	e03a      	b.n	800503e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a27      	ldr	r2, [pc, #156]	; (800506c <HAL_ADC_ConfigChannel+0x7b8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d113      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x746>
 8004fd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10d      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1f      	ldr	r2, [pc, #124]	; (8005060 <HAL_ADC_ConfigChannel+0x7ac>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d12a      	bne.n	800503e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fe8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4819      	ldr	r0, [pc, #100]	; (8005058 <HAL_ADC_ConfigChannel+0x7a4>)
 8004ff4:	f7ff f99d 	bl	8004332 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ff8:	e021      	b.n	800503e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1c      	ldr	r2, [pc, #112]	; (8005070 <HAL_ADC_ConfigChannel+0x7bc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d11c      	bne.n	800503e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005004:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d116      	bne.n	800503e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a12      	ldr	r2, [pc, #72]	; (8005060 <HAL_ADC_ConfigChannel+0x7ac>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d111      	bne.n	800503e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800501a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800501e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005022:	4619      	mov	r1, r3
 8005024:	480c      	ldr	r0, [pc, #48]	; (8005058 <HAL_ADC_ConfigChannel+0x7a4>)
 8005026:	f7ff f984 	bl	8004332 <LL_ADC_SetCommonPathInternalCh>
 800502a:	e008      	b.n	800503e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005030:	f043 0220 	orr.w	r2, r3, #32
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005046:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800504a:	4618      	mov	r0, r3
 800504c:	37d8      	adds	r7, #216	; 0xd8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	80080000 	.word	0x80080000
 8005058:	50040300 	.word	0x50040300
 800505c:	c7520000 	.word	0xc7520000
 8005060:	50040000 	.word	0x50040000
 8005064:	20000034 	.word	0x20000034
 8005068:	053e2d63 	.word	0x053e2d63
 800506c:	cb840000 	.word	0xcb840000
 8005070:	80000001 	.word	0x80000001

08005074 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0ed      	b.n	8005262 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fe fda4 	bl	8003be0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050a8:	f7ff f900 	bl	80042ac <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80050ae:	e012      	b.n	80050d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050b0:	f7ff f8fc 	bl	80042ac <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b0a      	cmp	r3, #10
 80050bc:	d90b      	bls.n	80050d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2205      	movs	r2, #5
 80050ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e0c5      	b.n	8005262 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0e5      	beq.n	80050b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0202 	bic.w	r2, r2, #2
 80050f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050f4:	f7ff f8da 	bl	80042ac <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80050fa:	e012      	b.n	8005122 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050fc:	f7ff f8d6 	bl	80042ac <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b0a      	cmp	r3, #10
 8005108:	d90b      	bls.n	8005122 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2205      	movs	r2, #5
 800511a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e09f      	b.n	8005262 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	7e1b      	ldrb	r3, [r3, #24]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d108      	bne.n	800514a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	e007      	b.n	800515a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005158:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	7e5b      	ldrb	r3, [r3, #25]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d108      	bne.n	8005174 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e007      	b.n	8005184 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005182:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	7e9b      	ldrb	r3, [r3, #26]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d108      	bne.n	800519e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0220 	orr.w	r2, r2, #32
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e007      	b.n	80051ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0220 	bic.w	r2, r2, #32
 80051ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7edb      	ldrb	r3, [r3, #27]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d108      	bne.n	80051c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0210 	bic.w	r2, r2, #16
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e007      	b.n	80051d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0210 	orr.w	r2, r2, #16
 80051d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	7f1b      	ldrb	r3, [r3, #28]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d108      	bne.n	80051f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0208 	orr.w	r2, r2, #8
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e007      	b.n	8005202 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0208 	bic.w	r2, r2, #8
 8005200:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	7f5b      	ldrb	r3, [r3, #29]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d108      	bne.n	800521c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0204 	orr.w	r2, r2, #4
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e007      	b.n	800522c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0204 	bic.w	r2, r2, #4
 800522a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	ea42 0103 	orr.w	r1, r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	1e5a      	subs	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b08a      	sub	sp, #40	; 0x28
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d07c      	beq.n	80053aa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d023      	beq.n	8005302 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2201      	movs	r2, #1
 80052c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f983 	bl	80055d8 <HAL_CAN_TxMailbox0CompleteCallback>
 80052d2:	e016      	b.n	8005302 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
 80052e6:	e00c      	b.n	8005302 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d004      	beq.n	80052fc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
 80052fa:	e002      	b.n	8005302 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f989 	bl	8005614 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d024      	beq.n	8005356 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005314:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f963 	bl	80055ec <HAL_CAN_TxMailbox1CompleteCallback>
 8005326:	e016      	b.n	8005356 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
 800533a:	e00c      	b.n	8005356 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
 800534e:	e002      	b.n	8005356 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f969 	bl	8005628 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d024      	beq.n	80053aa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005368:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f943 	bl	8005600 <HAL_CAN_TxMailbox2CompleteCallback>
 800537a:	e016      	b.n	80053aa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d004      	beq.n	8005390 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
 800538e:	e00c      	b.n	80053aa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
 80053a2:	e002      	b.n	80053aa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f949 	bl	800563c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00c      	beq.n	80053ce <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d007      	beq.n	80053ce <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2210      	movs	r2, #16
 80053cc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d006      	beq.n	80053f0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2208      	movs	r2, #8
 80053e8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f93a 	bl	8005664 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f921 	bl	8005650 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00c      	beq.n	8005432 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005428:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2210      	movs	r2, #16
 8005430:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00b      	beq.n	8005454 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d006      	beq.n	8005454 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2208      	movs	r2, #8
 800544c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f91c 	bl	800568c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b00      	cmp	r3, #0
 800545c:	d009      	beq.n	8005472 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f903 	bl	8005678 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	d006      	beq.n	8005494 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2210      	movs	r2, #16
 800548c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f906 	bl	80056a0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d006      	beq.n	80054b6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2208      	movs	r2, #8
 80054ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f8ff 	bl	80056b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d07b      	beq.n	80055b8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d072      	beq.n	80055b0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	f043 0301 	orr.w	r3, r3, #1
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d008      	beq.n	8005502 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	f043 0302 	orr.w	r3, r3, #2
 8005500:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005508:	2b00      	cmp	r3, #0
 800550a:	d008      	beq.n	800551e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	f043 0304 	orr.w	r3, r3, #4
 800551c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005524:	2b00      	cmp	r3, #0
 8005526:	d043      	beq.n	80055b0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800552e:	2b00      	cmp	r3, #0
 8005530:	d03e      	beq.n	80055b0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005538:	2b60      	cmp	r3, #96	; 0x60
 800553a:	d02b      	beq.n	8005594 <HAL_CAN_IRQHandler+0x32a>
 800553c:	2b60      	cmp	r3, #96	; 0x60
 800553e:	d82e      	bhi.n	800559e <HAL_CAN_IRQHandler+0x334>
 8005540:	2b50      	cmp	r3, #80	; 0x50
 8005542:	d022      	beq.n	800558a <HAL_CAN_IRQHandler+0x320>
 8005544:	2b50      	cmp	r3, #80	; 0x50
 8005546:	d82a      	bhi.n	800559e <HAL_CAN_IRQHandler+0x334>
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d019      	beq.n	8005580 <HAL_CAN_IRQHandler+0x316>
 800554c:	2b40      	cmp	r3, #64	; 0x40
 800554e:	d826      	bhi.n	800559e <HAL_CAN_IRQHandler+0x334>
 8005550:	2b30      	cmp	r3, #48	; 0x30
 8005552:	d010      	beq.n	8005576 <HAL_CAN_IRQHandler+0x30c>
 8005554:	2b30      	cmp	r3, #48	; 0x30
 8005556:	d822      	bhi.n	800559e <HAL_CAN_IRQHandler+0x334>
 8005558:	2b10      	cmp	r3, #16
 800555a:	d002      	beq.n	8005562 <HAL_CAN_IRQHandler+0x2f8>
 800555c:	2b20      	cmp	r3, #32
 800555e:	d005      	beq.n	800556c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005560:	e01d      	b.n	800559e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	f043 0308 	orr.w	r3, r3, #8
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800556a:	e019      	b.n	80055a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	f043 0310 	orr.w	r3, r3, #16
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005574:	e014      	b.n	80055a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	f043 0320 	orr.w	r3, r3, #32
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800557e:	e00f      	b.n	80055a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005588:	e00a      	b.n	80055a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005592:	e005      	b.n	80055a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800559c:	e000      	b.n	80055a0 <HAL_CAN_IRQHandler+0x336>
            break;
 800559e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80055ae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2204      	movs	r2, #4
 80055b6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f87c 	bl	80056c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80055d0:	bf00      	nop
 80055d2:	3728      	adds	r7, #40	; 0x28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <__NVIC_SetPriorityGrouping+0x44>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056f8:	4013      	ands	r3, r2
 80056fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800570c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800570e:	4a04      	ldr	r2, [pc, #16]	; (8005720 <__NVIC_SetPriorityGrouping+0x44>)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	60d3      	str	r3, [r2, #12]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	e000ed00 	.word	0xe000ed00

08005724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005728:	4b04      	ldr	r3, [pc, #16]	; (800573c <__NVIC_GetPriorityGrouping+0x18>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	0a1b      	lsrs	r3, r3, #8
 800572e:	f003 0307 	and.w	r3, r3, #7
}
 8005732:	4618      	mov	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	e000ed00 	.word	0xe000ed00

08005740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800574a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574e:	2b00      	cmp	r3, #0
 8005750:	db0b      	blt.n	800576a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	f003 021f 	and.w	r2, r3, #31
 8005758:	4907      	ldr	r1, [pc, #28]	; (8005778 <__NVIC_EnableIRQ+0x38>)
 800575a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	2001      	movs	r0, #1
 8005762:	fa00 f202 	lsl.w	r2, r0, r2
 8005766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	e000e100 	.word	0xe000e100

0800577c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	6039      	str	r1, [r7, #0]
 8005786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578c:	2b00      	cmp	r3, #0
 800578e:	db0a      	blt.n	80057a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	b2da      	uxtb	r2, r3
 8005794:	490c      	ldr	r1, [pc, #48]	; (80057c8 <__NVIC_SetPriority+0x4c>)
 8005796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579a:	0112      	lsls	r2, r2, #4
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	440b      	add	r3, r1
 80057a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057a4:	e00a      	b.n	80057bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	4908      	ldr	r1, [pc, #32]	; (80057cc <__NVIC_SetPriority+0x50>)
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	3b04      	subs	r3, #4
 80057b4:	0112      	lsls	r2, r2, #4
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	440b      	add	r3, r1
 80057ba:	761a      	strb	r2, [r3, #24]
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	e000e100 	.word	0xe000e100
 80057cc:	e000ed00 	.word	0xe000ed00

080057d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b089      	sub	sp, #36	; 0x24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f1c3 0307 	rsb	r3, r3, #7
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	bf28      	it	cs
 80057ee:	2304      	movcs	r3, #4
 80057f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	3304      	adds	r3, #4
 80057f6:	2b06      	cmp	r3, #6
 80057f8:	d902      	bls.n	8005800 <NVIC_EncodePriority+0x30>
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3b03      	subs	r3, #3
 80057fe:	e000      	b.n	8005802 <NVIC_EncodePriority+0x32>
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005804:	f04f 32ff 	mov.w	r2, #4294967295
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	43da      	mvns	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	401a      	ands	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005818:	f04f 31ff 	mov.w	r1, #4294967295
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	fa01 f303 	lsl.w	r3, r1, r3
 8005822:	43d9      	mvns	r1, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005828:	4313      	orrs	r3, r2
         );
}
 800582a:	4618      	mov	r0, r3
 800582c:	3724      	adds	r7, #36	; 0x24
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff ff4c 	bl	80056dc <__NVIC_SetPriorityGrouping>
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	4603      	mov	r3, r0
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800585e:	f7ff ff61 	bl	8005724 <__NVIC_GetPriorityGrouping>
 8005862:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	6978      	ldr	r0, [r7, #20]
 800586a:	f7ff ffb1 	bl	80057d0 <NVIC_EncodePriority>
 800586e:	4602      	mov	r2, r0
 8005870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005874:	4611      	mov	r1, r2
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff ff80 	bl	800577c <__NVIC_SetPriority>
}
 800587c:	bf00      	nop
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	4603      	mov	r3, r0
 800588c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800588e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff ff54 	bl	8005740 <__NVIC_EnableIRQ>
}
 8005898:	bf00      	nop
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e014      	b.n	80058dc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	791b      	ldrb	r3, [r3, #4]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fe f9f2 	bl	8003cac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	795b      	ldrb	r3, [r3, #5]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_DAC_Start_DMA+0x1e>
 80058fe:	2302      	movs	r3, #2
 8005900:	e0ab      	b.n	8005a5a <HAL_DAC_Start_DMA+0x176>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2202      	movs	r2, #2
 800590c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d12f      	bne.n	8005974 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4a52      	ldr	r2, [pc, #328]	; (8005a64 <HAL_DAC_Start_DMA+0x180>)
 800591a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	4a51      	ldr	r2, [pc, #324]	; (8005a68 <HAL_DAC_Start_DMA+0x184>)
 8005922:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	4a50      	ldr	r2, [pc, #320]	; (8005a6c <HAL_DAC_Start_DMA+0x188>)
 800592a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800593a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	2b08      	cmp	r3, #8
 8005940:	d013      	beq.n	800596a <HAL_DAC_Start_DMA+0x86>
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d845      	bhi.n	80059d4 <HAL_DAC_Start_DMA+0xf0>
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_DAC_Start_DMA+0x72>
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	2b04      	cmp	r3, #4
 8005952:	d005      	beq.n	8005960 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8005954:	e03e      	b.n	80059d4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3308      	adds	r3, #8
 800595c:	613b      	str	r3, [r7, #16]
        break;
 800595e:	e03c      	b.n	80059da <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	613b      	str	r3, [r7, #16]
        break;
 8005968:	e037      	b.n	80059da <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3310      	adds	r3, #16
 8005970:	613b      	str	r3, [r7, #16]
        break;
 8005972:	e032      	b.n	80059da <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4a3d      	ldr	r2, [pc, #244]	; (8005a70 <HAL_DAC_Start_DMA+0x18c>)
 800597a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4a3c      	ldr	r2, [pc, #240]	; (8005a74 <HAL_DAC_Start_DMA+0x190>)
 8005982:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4a3b      	ldr	r2, [pc, #236]	; (8005a78 <HAL_DAC_Start_DMA+0x194>)
 800598a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800599a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d013      	beq.n	80059ca <HAL_DAC_Start_DMA+0xe6>
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d817      	bhi.n	80059d8 <HAL_DAC_Start_DMA+0xf4>
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_DAC_Start_DMA+0xd2>
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d005      	beq.n	80059c0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80059b4:	e010      	b.n	80059d8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3314      	adds	r3, #20
 80059bc:	613b      	str	r3, [r7, #16]
        break;
 80059be:	e00c      	b.n	80059da <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3318      	adds	r3, #24
 80059c6:	613b      	str	r3, [r7, #16]
        break;
 80059c8:	e007      	b.n	80059da <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	331c      	adds	r3, #28
 80059d0:	613b      	str	r3, [r7, #16]
        break;
 80059d2:	e002      	b.n	80059da <HAL_DAC_Start_DMA+0xf6>
        break;
 80059d4:	bf00      	nop
 80059d6:	e000      	b.n	80059da <HAL_DAC_Start_DMA+0xf6>
        break;
 80059d8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d111      	bne.n	8005a04 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6898      	ldr	r0, [r3, #8]
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	f000 fb13 	bl	8006024 <HAL_DMA_Start_IT>
 80059fe:	4603      	mov	r3, r0
 8005a00:	75fb      	strb	r3, [r7, #23]
 8005a02:	e010      	b.n	8005a26 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005a12:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68d8      	ldr	r0, [r3, #12]
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	f000 fb01 	bl	8006024 <HAL_DMA_Start_IT>
 8005a22:	4603      	mov	r3, r0
 8005a24:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10c      	bne.n	8005a4c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6819      	ldr	r1, [r3, #0]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f003 0310 	and.w	r3, r3, #16
 8005a3e:	2201      	movs	r2, #1
 8005a40:	409a      	lsls	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	e005      	b.n	8005a58 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f043 0204 	orr.w	r2, r3, #4
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	08005d8d 	.word	0x08005d8d
 8005a68:	08005daf 	.word	0x08005daf
 8005a6c:	08005dcb 	.word	0x08005dcb
 8005a70:	08005e49 	.word	0x08005e49
 8005a74:	08005e6b 	.word	0x08005e6b
 8005a78:	08005e87 	.word	0x08005e87

08005a7c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a92:	d120      	bne.n	8005ad6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa2:	d118      	bne.n	8005ad6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f043 0201 	orr.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005abe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ace:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f837 	bl	8005b44 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ae4:	d120      	bne.n	8005b28 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005af4:	d118      	bne.n	8005b28 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2204      	movs	r2, #4
 8005afa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f043 0202 	orr.w	r2, r3, #2
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005b10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005b20:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f986 	bl	8005e34 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8005b28:	bf00      	nop
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	795b      	ldrb	r3, [r3, #5]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_DAC_ConfigChannel+0x1c>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e107      	b.n	8005d84 <HAL_DAC_ConfigChannel+0x22c>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d174      	bne.n	8005c72 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005b88:	f7fe fb90 	bl	80042ac <HAL_GetTick>
 8005b8c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d134      	bne.n	8005bfe <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b94:	e011      	b.n	8005bba <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005b96:	f7fe fb89 	bl	80042ac <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d90a      	bls.n	8005bba <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f043 0208 	orr.w	r2, r3, #8
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e0e4      	b.n	8005d84 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e6      	bne.n	8005b96 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f7fe fb7b 	bl	80042c4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	6992      	ldr	r2, [r2, #24]
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
 8005bd8:	e01e      	b.n	8005c18 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005bda:	f7fe fb67 	bl	80042ac <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d90a      	bls.n	8005bfe <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f043 0208 	orr.w	r2, r3, #8
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e0c2      	b.n	8005d84 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	dbe8      	blt.n	8005bda <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8005c08:	2001      	movs	r0, #1
 8005c0a:	f7fe fb5b 	bl	80042c4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	6992      	ldr	r2, [r2, #24]
 8005c16:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005c28:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	ea02 0103 	and.w	r1, r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	69da      	ldr	r2, [r3, #28]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	409a      	lsls	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f003 0310 	and.w	r3, r3, #16
 8005c52:	21ff      	movs	r1, #255	; 0xff
 8005c54:	fa01 f303 	lsl.w	r3, r1, r3
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	ea02 0103 	and.w	r1, r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	6a1a      	ldr	r2, [r3, #32]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	409a      	lsls	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d11d      	bne.n	8005cb6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	221f      	movs	r2, #31
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	43db      	mvns	r3, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	4013      	ands	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f003 0310 	and.w	r3, r3, #16
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbc:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2207      	movs	r2, #7
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	43db      	mvns	r3, r3
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f003 0310 	and.w	r3, r3, #16
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6819      	ldr	r1, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f003 0310 	and.w	r3, r3, #16
 8005d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	43da      	mvns	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	400a      	ands	r2, r1
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	f640 72fc 	movw	r2, #4092	; 0xffc
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	43db      	mvns	r3, r3
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	4013      	ands	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f003 0310 	and.w	r3, r3, #16
 8005d66:	22c0      	movs	r2, #192	; 0xc0
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	43da      	mvns	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	400a      	ands	r2, r1
 8005d74:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3720      	adds	r7, #32
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7fc ff08 	bl	8002bb0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	711a      	strb	r2, [r3, #4]
}
 8005da6:	bf00      	nop
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f7fc fed9 	bl	8002b74 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f043 0204 	orr.w	r2, r3, #4
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff fea3 	bl	8005b30 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2201      	movs	r2, #1
 8005dee:	711a      	strb	r2, [r3, #4]
}
 8005df0:	bf00      	nop
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f7ff ffce 	bl	8005df8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	711a      	strb	r2, [r3, #4]
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff ffc7 	bl	8005e0c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f043 0204 	orr.w	r2, r3, #4
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff ffbd 	bl	8005e20 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	711a      	strb	r2, [r3, #4]
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e098      	b.n	8005ff8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	4b4d      	ldr	r3, [pc, #308]	; (8006004 <HAL_DMA_Init+0x150>)
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d80f      	bhi.n	8005ef2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	4b4b      	ldr	r3, [pc, #300]	; (8006008 <HAL_DMA_Init+0x154>)
 8005eda:	4413      	add	r3, r2
 8005edc:	4a4b      	ldr	r2, [pc, #300]	; (800600c <HAL_DMA_Init+0x158>)
 8005ede:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee2:	091b      	lsrs	r3, r3, #4
 8005ee4:	009a      	lsls	r2, r3, #2
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a48      	ldr	r2, [pc, #288]	; (8006010 <HAL_DMA_Init+0x15c>)
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40
 8005ef0:	e00e      	b.n	8005f10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	4b46      	ldr	r3, [pc, #280]	; (8006014 <HAL_DMA_Init+0x160>)
 8005efa:	4413      	add	r3, r2
 8005efc:	4a43      	ldr	r2, [pc, #268]	; (800600c <HAL_DMA_Init+0x158>)
 8005efe:	fba2 2303 	umull	r2, r3, r2, r3
 8005f02:	091b      	lsrs	r3, r3, #4
 8005f04:	009a      	lsls	r2, r3, #2
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a42      	ldr	r2, [pc, #264]	; (8006018 <HAL_DMA_Init+0x164>)
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f6a:	d039      	beq.n	8005fe0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	4a27      	ldr	r2, [pc, #156]	; (8006010 <HAL_DMA_Init+0x15c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d11a      	bne.n	8005fac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005f76:	4b29      	ldr	r3, [pc, #164]	; (800601c <HAL_DMA_Init+0x168>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	f003 031c 	and.w	r3, r3, #28
 8005f82:	210f      	movs	r1, #15
 8005f84:	fa01 f303 	lsl.w	r3, r1, r3
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	4924      	ldr	r1, [pc, #144]	; (800601c <HAL_DMA_Init+0x168>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005f90:	4b22      	ldr	r3, [pc, #136]	; (800601c <HAL_DMA_Init+0x168>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6859      	ldr	r1, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9c:	f003 031c 	and.w	r3, r3, #28
 8005fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa4:	491d      	ldr	r1, [pc, #116]	; (800601c <HAL_DMA_Init+0x168>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	600b      	str	r3, [r1, #0]
 8005faa:	e019      	b.n	8005fe0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005fac:	4b1c      	ldr	r3, [pc, #112]	; (8006020 <HAL_DMA_Init+0x16c>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb4:	f003 031c 	and.w	r3, r3, #28
 8005fb8:	210f      	movs	r1, #15
 8005fba:	fa01 f303 	lsl.w	r3, r1, r3
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	4917      	ldr	r1, [pc, #92]	; (8006020 <HAL_DMA_Init+0x16c>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005fc6:	4b16      	ldr	r3, [pc, #88]	; (8006020 <HAL_DMA_Init+0x16c>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6859      	ldr	r1, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd2:	f003 031c 	and.w	r3, r3, #28
 8005fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fda:	4911      	ldr	r1, [pc, #68]	; (8006020 <HAL_DMA_Init+0x16c>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	40020407 	.word	0x40020407
 8006008:	bffdfff8 	.word	0xbffdfff8
 800600c:	cccccccd 	.word	0xcccccccd
 8006010:	40020000 	.word	0x40020000
 8006014:	bffdfbf8 	.word	0xbffdfbf8
 8006018:	40020400 	.word	0x40020400
 800601c:	400200a8 	.word	0x400200a8
 8006020:	400204a8 	.word	0x400204a8

08006024 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_DMA_Start_IT+0x20>
 8006040:	2302      	movs	r3, #2
 8006042:	e04b      	b.n	80060dc <HAL_DMA_Start_IT+0xb8>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d13a      	bne.n	80060ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0201 	bic.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f92f 	bl	80062e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	2b00      	cmp	r3, #0
 8006088:	d008      	beq.n	800609c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 020e 	orr.w	r2, r2, #14
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e00f      	b.n	80060bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0204 	bic.w	r2, r2, #4
 80060aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 020a 	orr.w	r2, r2, #10
 80060ba:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e005      	b.n	80060da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80060d6:	2302      	movs	r3, #2
 80060d8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80060da:	7dfb      	ldrb	r3, [r7, #23]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d005      	beq.n	8006108 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2204      	movs	r2, #4
 8006100:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
 8006106:	e029      	b.n	800615c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 020e 	bic.w	r2, r2, #14
 8006116:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0201 	bic.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612c:	f003 021c 	and.w	r2, r3, #28
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	2101      	movs	r1, #1
 8006136:	fa01 f202 	lsl.w	r2, r1, r2
 800613a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	4798      	blx	r3
    }
  }
  return status;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006182:	f003 031c 	and.w	r3, r3, #28
 8006186:	2204      	movs	r2, #4
 8006188:	409a      	lsls	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4013      	ands	r3, r2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d026      	beq.n	80061e0 <HAL_DMA_IRQHandler+0x7a>
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d021      	beq.n	80061e0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d107      	bne.n	80061ba <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0204 	bic.w	r2, r2, #4
 80061b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061be:	f003 021c 	and.w	r2, r3, #28
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	2104      	movs	r1, #4
 80061c8:	fa01 f202 	lsl.w	r2, r1, r2
 80061cc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d071      	beq.n	80062ba <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80061de:	e06c      	b.n	80062ba <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e4:	f003 031c 	and.w	r3, r3, #28
 80061e8:	2202      	movs	r2, #2
 80061ea:	409a      	lsls	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d02e      	beq.n	8006252 <HAL_DMA_IRQHandler+0xec>
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d029      	beq.n	8006252 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10b      	bne.n	8006224 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 020a 	bic.w	r2, r2, #10
 800621a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006228:	f003 021c 	and.w	r2, r3, #28
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	2102      	movs	r1, #2
 8006232:	fa01 f202 	lsl.w	r2, r1, r2
 8006236:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d038      	beq.n	80062ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006250:	e033      	b.n	80062ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006256:	f003 031c 	and.w	r3, r3, #28
 800625a:	2208      	movs	r2, #8
 800625c:	409a      	lsls	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4013      	ands	r3, r2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d02a      	beq.n	80062bc <HAL_DMA_IRQHandler+0x156>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f003 0308 	and.w	r3, r3, #8
 800626c:	2b00      	cmp	r3, #0
 800626e:	d025      	beq.n	80062bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 020e 	bic.w	r2, r2, #14
 800627e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006284:	f003 021c 	and.w	r2, r3, #28
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	2101      	movs	r1, #1
 800628e:	fa01 f202 	lsl.w	r2, r1, r2
 8006292:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d004      	beq.n	80062bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
}
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80062d2:	b2db      	uxtb	r3, r3
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f2:	f003 021c 	and.w	r2, r3, #28
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	2101      	movs	r1, #1
 80062fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006300:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	2b10      	cmp	r3, #16
 8006310:	d108      	bne.n	8006324 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006322:	e007      	b.n	8006334 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	60da      	str	r2, [r3, #12]
}
 8006334:	bf00      	nop
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800634e:	e148      	b.n	80065e2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	2101      	movs	r1, #1
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	fa01 f303 	lsl.w	r3, r1, r3
 800635c:	4013      	ands	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 813a 	beq.w	80065dc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d005      	beq.n	8006380 <HAL_GPIO_Init+0x40>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d130      	bne.n	80063e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	2203      	movs	r2, #3
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	43db      	mvns	r3, r3
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4013      	ands	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063b6:	2201      	movs	r2, #1
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	43db      	mvns	r3, r3
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4013      	ands	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	091b      	lsrs	r3, r3, #4
 80063cc:	f003 0201 	and.w	r2, r3, #1
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d017      	beq.n	800641e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	2203      	movs	r2, #3
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	43db      	mvns	r3, r3
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4013      	ands	r3, r2
 8006404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d123      	bne.n	8006472 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	08da      	lsrs	r2, r3, #3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3208      	adds	r2, #8
 8006432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006436:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	220f      	movs	r2, #15
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	43db      	mvns	r3, r3
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	4013      	ands	r3, r2
 800644c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	08da      	lsrs	r2, r3, #3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3208      	adds	r2, #8
 800646c:	6939      	ldr	r1, [r7, #16]
 800646e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	2203      	movs	r2, #3
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	43db      	mvns	r3, r3
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4013      	ands	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f003 0203 	and.w	r2, r3, #3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	4313      	orrs	r3, r2
 800649e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8094 	beq.w	80065dc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064b4:	4b52      	ldr	r3, [pc, #328]	; (8006600 <HAL_GPIO_Init+0x2c0>)
 80064b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b8:	4a51      	ldr	r2, [pc, #324]	; (8006600 <HAL_GPIO_Init+0x2c0>)
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	6613      	str	r3, [r2, #96]	; 0x60
 80064c0:	4b4f      	ldr	r3, [pc, #316]	; (8006600 <HAL_GPIO_Init+0x2c0>)
 80064c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	60bb      	str	r3, [r7, #8]
 80064ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80064cc:	4a4d      	ldr	r2, [pc, #308]	; (8006604 <HAL_GPIO_Init+0x2c4>)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	089b      	lsrs	r3, r3, #2
 80064d2:	3302      	adds	r3, #2
 80064d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f003 0303 	and.w	r3, r3, #3
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	220f      	movs	r2, #15
 80064e4:	fa02 f303 	lsl.w	r3, r2, r3
 80064e8:	43db      	mvns	r3, r3
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4013      	ands	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80064f6:	d00d      	beq.n	8006514 <HAL_GPIO_Init+0x1d4>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a43      	ldr	r2, [pc, #268]	; (8006608 <HAL_GPIO_Init+0x2c8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <HAL_GPIO_Init+0x1d0>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a42      	ldr	r2, [pc, #264]	; (800660c <HAL_GPIO_Init+0x2cc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d101      	bne.n	800650c <HAL_GPIO_Init+0x1cc>
 8006508:	2302      	movs	r3, #2
 800650a:	e004      	b.n	8006516 <HAL_GPIO_Init+0x1d6>
 800650c:	2307      	movs	r3, #7
 800650e:	e002      	b.n	8006516 <HAL_GPIO_Init+0x1d6>
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <HAL_GPIO_Init+0x1d6>
 8006514:	2300      	movs	r3, #0
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	f002 0203 	and.w	r2, r2, #3
 800651c:	0092      	lsls	r2, r2, #2
 800651e:	4093      	lsls	r3, r2
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006526:	4937      	ldr	r1, [pc, #220]	; (8006604 <HAL_GPIO_Init+0x2c4>)
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	089b      	lsrs	r3, r3, #2
 800652c:	3302      	adds	r3, #2
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006534:	4b36      	ldr	r3, [pc, #216]	; (8006610 <HAL_GPIO_Init+0x2d0>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	43db      	mvns	r3, r3
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4013      	ands	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006558:	4a2d      	ldr	r2, [pc, #180]	; (8006610 <HAL_GPIO_Init+0x2d0>)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800655e:	4b2c      	ldr	r3, [pc, #176]	; (8006610 <HAL_GPIO_Init+0x2d0>)
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	43db      	mvns	r3, r3
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	4013      	ands	r3, r2
 800656c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006582:	4a23      	ldr	r2, [pc, #140]	; (8006610 <HAL_GPIO_Init+0x2d0>)
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006588:	4b21      	ldr	r3, [pc, #132]	; (8006610 <HAL_GPIO_Init+0x2d0>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	43db      	mvns	r3, r3
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4013      	ands	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80065ac:	4a18      	ldr	r2, [pc, #96]	; (8006610 <HAL_GPIO_Init+0x2d0>)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80065b2:	4b17      	ldr	r3, [pc, #92]	; (8006610 <HAL_GPIO_Init+0x2d0>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	43db      	mvns	r3, r3
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4013      	ands	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80065d6:	4a0e      	ldr	r2, [pc, #56]	; (8006610 <HAL_GPIO_Init+0x2d0>)
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	3301      	adds	r3, #1
 80065e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	fa22 f303 	lsr.w	r3, r2, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f47f aeaf 	bne.w	8006350 <HAL_GPIO_Init+0x10>
  }
}
 80065f2:	bf00      	nop
 80065f4:	bf00      	nop
 80065f6:	371c      	adds	r7, #28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	40021000 	.word	0x40021000
 8006604:	40010000 	.word	0x40010000
 8006608:	48000400 	.word	0x48000400
 800660c:	48000800 	.word	0x48000800
 8006610:	40010400 	.word	0x40010400

08006614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691a      	ldr	r2, [r3, #16]
 8006624:	887b      	ldrh	r3, [r7, #2]
 8006626:	4013      	ands	r3, r2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800662c:	2301      	movs	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
 8006630:	e001      	b.n	8006636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006632:	2300      	movs	r3, #0
 8006634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006636:	7bfb      	ldrb	r3, [r7, #15]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	807b      	strh	r3, [r7, #2]
 8006650:	4613      	mov	r3, r2
 8006652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006654:	787b      	ldrb	r3, [r7, #1]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800665a:	887a      	ldrh	r2, [r7, #2]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006660:	e002      	b.n	8006668 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006662:	887a      	ldrh	r2, [r7, #2]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e081      	b.n	800678a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fd fb7c 	bl	8003d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2224      	movs	r2, #36	; 0x24
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0201 	bic.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d107      	bne.n	80066ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066ea:	609a      	str	r2, [r3, #8]
 80066ec:	e006      	b.n	80066fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80066fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	2b02      	cmp	r3, #2
 8006702:	d104      	bne.n	800670e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800670c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800671c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006720:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006730:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	69d9      	ldr	r1, [r3, #28]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1a      	ldr	r2, [r3, #32]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0201 	orr.w	r2, r2, #1
 800676a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2220      	movs	r2, #32
 8006776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af02      	add	r7, sp, #8
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	607a      	str	r2, [r7, #4]
 800679e:	461a      	mov	r2, r3
 80067a0:	460b      	mov	r3, r1
 80067a2:	817b      	strh	r3, [r7, #10]
 80067a4:	4613      	mov	r3, r2
 80067a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	f040 80da 	bne.w	800696a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_I2C_Master_Transmit+0x30>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e0d3      	b.n	800696c <HAL_I2C_Master_Transmit+0x1d8>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067cc:	f7fd fd6e 	bl	80042ac <HAL_GetTick>
 80067d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	2319      	movs	r3, #25
 80067d8:	2201      	movs	r2, #1
 80067da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 fe05 	bl	80073ee <I2C_WaitOnFlagUntilTimeout>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e0be      	b.n	800696c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2221      	movs	r2, #33	; 0x21
 80067f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2210      	movs	r2, #16
 80067fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	893a      	ldrh	r2, [r7, #8]
 800680e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681a:	b29b      	uxth	r3, r3
 800681c:	2bff      	cmp	r3, #255	; 0xff
 800681e:	d90e      	bls.n	800683e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	22ff      	movs	r2, #255	; 0xff
 8006824:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682a:	b2da      	uxtb	r2, r3
 800682c:	8979      	ldrh	r1, [r7, #10]
 800682e:	4b51      	ldr	r3, [pc, #324]	; (8006974 <HAL_I2C_Master_Transmit+0x1e0>)
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 ff82 	bl	8007740 <I2C_TransferConfig>
 800683c:	e06c      	b.n	8006918 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684c:	b2da      	uxtb	r2, r3
 800684e:	8979      	ldrh	r1, [r7, #10]
 8006850:	4b48      	ldr	r3, [pc, #288]	; (8006974 <HAL_I2C_Master_Transmit+0x1e0>)
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 ff71 	bl	8007740 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800685e:	e05b      	b.n	8006918 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	6a39      	ldr	r1, [r7, #32]
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 fe02 	bl	800746e <I2C_WaitOnTXISFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e07b      	b.n	800696c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	781a      	ldrb	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688e:	b29b      	uxth	r3, r3
 8006890:	3b01      	subs	r3, #1
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689c:	3b01      	subs	r3, #1
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d034      	beq.n	8006918 <HAL_I2C_Master_Transmit+0x184>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d130      	bne.n	8006918 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	2200      	movs	r2, #0
 80068be:	2180      	movs	r1, #128	; 0x80
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fd94 	bl	80073ee <I2C_WaitOnFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e04d      	b.n	800696c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2bff      	cmp	r3, #255	; 0xff
 80068d8:	d90e      	bls.n	80068f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	22ff      	movs	r2, #255	; 0xff
 80068de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	8979      	ldrh	r1, [r7, #10]
 80068e8:	2300      	movs	r3, #0
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 ff25 	bl	8007740 <I2C_TransferConfig>
 80068f6:	e00f      	b.n	8006918 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006906:	b2da      	uxtb	r2, r3
 8006908:	8979      	ldrh	r1, [r7, #10]
 800690a:	2300      	movs	r3, #0
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 ff14 	bl	8007740 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d19e      	bne.n	8006860 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	6a39      	ldr	r1, [r7, #32]
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 fde1 	bl	80074ee <I2C_WaitOnSTOPFlagUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e01a      	b.n	800696c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2220      	movs	r2, #32
 800693c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6859      	ldr	r1, [r3, #4]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <HAL_I2C_Master_Transmit+0x1e4>)
 800694a:	400b      	ands	r3, r1
 800694c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2220      	movs	r2, #32
 8006952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	e000      	b.n	800696c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800696a:	2302      	movs	r3, #2
  }
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	80002000 	.word	0x80002000
 8006978:	fe00e800 	.word	0xfe00e800

0800697c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	68f9      	ldr	r1, [r7, #12]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
  }
}
 80069a8:	bf00      	nop
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	0a1b      	lsrs	r3, r3, #8
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d010      	beq.n	80069f6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	09db      	lsrs	r3, r3, #7
 80069d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00a      	beq.n	80069f6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e4:	f043 0201 	orr.w	r2, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069f4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	0a9b      	lsrs	r3, r3, #10
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d010      	beq.n	8006a24 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	09db      	lsrs	r3, r3, #7
 8006a06:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a12:	f043 0208 	orr.w	r2, r3, #8
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a22:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	0a5b      	lsrs	r3, r3, #9
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d010      	beq.n	8006a52 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	09db      	lsrs	r3, r3, #7
 8006a34:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a40:	f043 0202 	orr.w	r2, r3, #2
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a50:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f003 030b 	and.w	r3, r3, #11
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006a62:	68f9      	ldr	r1, [r7, #12]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fb89 	bl	800717c <I2C_ITError>
  }
}
 8006a6a:	bf00      	nop
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b083      	sub	sp, #12
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	70fb      	strb	r3, [r7, #3]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b086      	sub	sp, #24
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d101      	bne.n	8006b16 <I2C_Slave_ISR_IT+0x24>
 8006b12:	2302      	movs	r3, #2
 8006b14:	e0ec      	b.n	8006cf0 <I2C_Slave_ISR_IT+0x1fe>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	095b      	lsrs	r3, r3, #5
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d009      	beq.n	8006b3e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	095b      	lsrs	r3, r3, #5
 8006b2e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006b36:	6939      	ldr	r1, [r7, #16]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f9bf 	bl	8006ebc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	091b      	lsrs	r3, r3, #4
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d04d      	beq.n	8006be6 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	091b      	lsrs	r3, r3, #4
 8006b4e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d047      	beq.n	8006be6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d128      	bne.n	8006bb2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b28      	cmp	r3, #40	; 0x28
 8006b6a:	d108      	bne.n	8006b7e <I2C_Slave_ISR_IT+0x8c>
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b72:	d104      	bne.n	8006b7e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006b74:	6939      	ldr	r1, [r7, #16]
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 faaa 	bl	80070d0 <I2C_ITListenCplt>
 8006b7c:	e032      	b.n	8006be4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b29      	cmp	r3, #41	; 0x29
 8006b88:	d10e      	bne.n	8006ba8 <I2C_Slave_ISR_IT+0xb6>
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b90:	d00a      	beq.n	8006ba8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2210      	movs	r2, #16
 8006b98:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 fbe5 	bl	800736a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f92d 	bl	8006e00 <I2C_ITSlaveSeqCplt>
 8006ba6:	e01d      	b.n	8006be4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2210      	movs	r2, #16
 8006bae:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006bb0:	e096      	b.n	8006ce0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2210      	movs	r2, #16
 8006bb8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbe:	f043 0204 	orr.w	r2, r3, #4
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d004      	beq.n	8006bd6 <I2C_Slave_ISR_IT+0xe4>
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bd2:	f040 8085 	bne.w	8006ce0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bda:	4619      	mov	r1, r3
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 facd 	bl	800717c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006be2:	e07d      	b.n	8006ce0 <I2C_Slave_ISR_IT+0x1ee>
 8006be4:	e07c      	b.n	8006ce0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	089b      	lsrs	r3, r3, #2
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d030      	beq.n	8006c54 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	089b      	lsrs	r3, r3, #2
 8006bf6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d02a      	beq.n	8006c54 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d018      	beq.n	8006c3a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d14f      	bne.n	8006ce4 <I2C_Slave_ISR_IT+0x1f2>
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c4a:	d04b      	beq.n	8006ce4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f8d7 	bl	8006e00 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006c52:	e047      	b.n	8006ce4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	08db      	lsrs	r3, r3, #3
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	08db      	lsrs	r3, r3, #3
 8006c64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d004      	beq.n	8006c76 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006c6c:	6939      	ldr	r1, [r7, #16]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 f842 	bl	8006cf8 <I2C_ITAddrCplt>
 8006c74:	e037      	b.n	8006ce6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	085b      	lsrs	r3, r3, #1
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d031      	beq.n	8006ce6 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	085b      	lsrs	r3, r3, #1
 8006c86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d02b      	beq.n	8006ce6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d018      	beq.n	8006cca <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	781a      	ldrb	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cc8:	e00d      	b.n	8006ce6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cd0:	d002      	beq.n	8006cd8 <I2C_Slave_ISR_IT+0x1e6>
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d106      	bne.n	8006ce6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 f891 	bl	8006e00 <I2C_ITSlaveSeqCplt>
 8006cde:	e002      	b.n	8006ce6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8006ce0:	bf00      	nop
 8006ce2:	e000      	b.n	8006ce6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8006ce4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d0e:	2b28      	cmp	r3, #40	; 0x28
 8006d10:	d16a      	bne.n	8006de8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	0c1b      	lsrs	r3, r3, #16
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	0c1b      	lsrs	r3, r3, #16
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006d30:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d3e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006d4c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d138      	bne.n	8006dc8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006d56:	897b      	ldrh	r3, [r7, #10]
 8006d58:	09db      	lsrs	r3, r3, #7
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	89bb      	ldrh	r3, [r7, #12]
 8006d5e:	4053      	eors	r3, r2
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f003 0306 	and.w	r3, r3, #6
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d11c      	bne.n	8006da4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006d6a:	897b      	ldrh	r3, [r7, #10]
 8006d6c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d13b      	bne.n	8006df8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2208      	movs	r2, #8
 8006d8c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d96:	89ba      	ldrh	r2, [r7, #12]
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff fe7c 	bl	8006a9a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006da2:	e029      	b.n	8006df8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006da4:	893b      	ldrh	r3, [r7, #8]
 8006da6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006da8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fcf9 	bl	80077a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006dba:	89ba      	ldrh	r2, [r7, #12]
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff fe6a 	bl	8006a9a <HAL_I2C_AddrCallback>
}
 8006dc6:	e017      	b.n	8006df8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fce9 	bl	80077a4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006dda:	89ba      	ldrh	r2, [r7, #12]
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff fe5a 	bl	8006a9a <HAL_I2C_AddrCallback>
}
 8006de6:	e007      	b.n	8006df8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2208      	movs	r2, #8
 8006dee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006df8:	bf00      	nop
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	0b9b      	lsrs	r3, r3, #14
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d008      	beq.n	8006e36 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e00d      	b.n	8006e52 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	0bdb      	lsrs	r3, r3, #15
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e50:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b29      	cmp	r3, #41	; 0x29
 8006e5c:	d112      	bne.n	8006e84 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2228      	movs	r2, #40	; 0x28
 8006e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2221      	movs	r2, #33	; 0x21
 8006e6a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fc98 	bl	80077a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff fdf8 	bl	8006a72 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e82:	e017      	b.n	8006eb4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e8e:	d111      	bne.n	8006eb4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2228      	movs	r2, #40	; 0x28
 8006e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2222      	movs	r2, #34	; 0x22
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e9e:	2102      	movs	r1, #2
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fc7f 	bl	80077a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff fde9 	bl	8006a86 <HAL_I2C_SlaveRxCpltCallback>
}
 8006eb4:	bf00      	nop
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ed8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	2b21      	cmp	r3, #33	; 0x21
 8006ee6:	d002      	beq.n	8006eee <I2C_ITSlaveCplt+0x32>
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	2b29      	cmp	r3, #41	; 0x29
 8006eec:	d108      	bne.n	8006f00 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006eee:	f248 0101 	movw	r1, #32769	; 0x8001
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fc56 	bl	80077a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2221      	movs	r2, #33	; 0x21
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30
 8006efe:	e00d      	b.n	8006f1c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	2b22      	cmp	r3, #34	; 0x22
 8006f04:	d002      	beq.n	8006f0c <I2C_ITSlaveCplt+0x50>
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	2b2a      	cmp	r3, #42	; 0x2a
 8006f0a:	d107      	bne.n	8006f1c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006f0c:	f248 0102 	movw	r1, #32770	; 0x8002
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fc47 	bl	80077a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2222      	movs	r2, #34	; 0x22
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f2a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6859      	ldr	r1, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	4b64      	ldr	r3, [pc, #400]	; (80070c8 <I2C_ITSlaveCplt+0x20c>)
 8006f38:	400b      	ands	r3, r1
 8006f3a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fa14 	bl	800736a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	0b9b      	lsrs	r3, r3, #14
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d013      	beq.n	8006f76 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f5c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d020      	beq.n	8006fa8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f74:	e018      	b.n	8006fa8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	0bdb      	lsrs	r3, r3, #15
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d012      	beq.n	8006fa8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f90:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d006      	beq.n	8006fa8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	089b      	lsrs	r3, r3, #2
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d020      	beq.n	8006ff6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f023 0304 	bic.w	r3, r3, #4
 8006fba:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00c      	beq.n	8006ff6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d005      	beq.n	800700c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007004:	f043 0204 	orr.w	r2, r3, #4
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701e:	2b00      	cmp	r3, #0
 8007020:	d010      	beq.n	8007044 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f8a7 	bl	800717c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b28      	cmp	r3, #40	; 0x28
 8007038:	d141      	bne.n	80070be <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800703a:	6979      	ldr	r1, [r7, #20]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f847 	bl	80070d0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007042:	e03c      	b.n	80070be <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800704c:	d014      	beq.n	8007078 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff fed6 	bl	8006e00 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a1d      	ldr	r2, [pc, #116]	; (80070cc <I2C_ITSlaveCplt+0x210>)
 8007058:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff fd20 	bl	8006ab6 <HAL_I2C_ListenCpltCallback>
}
 8007076:	e022      	b.n	80070be <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b22      	cmp	r3, #34	; 0x22
 8007082:	d10e      	bne.n	80070a2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7ff fcf3 	bl	8006a86 <HAL_I2C_SlaveRxCpltCallback>
}
 80070a0:	e00d      	b.n	80070be <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff fcda 	bl	8006a72 <HAL_I2C_SlaveTxCpltCallback>
}
 80070be:	bf00      	nop
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	fe00e800 	.word	0xfe00e800
 80070cc:	ffff0000 	.word	0xffff0000

080070d0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a26      	ldr	r2, [pc, #152]	; (8007178 <I2C_ITListenCplt+0xa8>)
 80070de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	089b      	lsrs	r3, r3, #2
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d022      	beq.n	800714e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007124:	2b00      	cmp	r3, #0
 8007126:	d012      	beq.n	800714e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007146:	f043 0204 	orr.w	r2, r3, #4
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800714e:	f248 0103 	movw	r1, #32771	; 0x8003
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fb26 	bl	80077a4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2210      	movs	r2, #16
 800715e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff fca4 	bl	8006ab6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	ffff0000 	.word	0xffff0000

0800717c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800718c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a5d      	ldr	r2, [pc, #372]	; (8007310 <I2C_ITError+0x194>)
 800719a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	2b28      	cmp	r3, #40	; 0x28
 80071b2:	d005      	beq.n	80071c0 <I2C_ITError+0x44>
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	2b29      	cmp	r3, #41	; 0x29
 80071b8:	d002      	beq.n	80071c0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	2b2a      	cmp	r3, #42	; 0x2a
 80071be:	d10b      	bne.n	80071d8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80071c0:	2103      	movs	r1, #3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 faee 	bl	80077a4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2228      	movs	r2, #40	; 0x28
 80071cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a50      	ldr	r2, [pc, #320]	; (8007314 <I2C_ITError+0x198>)
 80071d4:	635a      	str	r2, [r3, #52]	; 0x34
 80071d6:	e011      	b.n	80071fc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80071d8:	f248 0103 	movw	r1, #32771	; 0x8003
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fae1 	bl	80077a4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b60      	cmp	r3, #96	; 0x60
 80071ec:	d003      	beq.n	80071f6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007200:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007206:	2b00      	cmp	r3, #0
 8007208:	d039      	beq.n	800727e <I2C_ITError+0x102>
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b11      	cmp	r3, #17
 800720e:	d002      	beq.n	8007216 <I2C_ITError+0x9a>
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b21      	cmp	r3, #33	; 0x21
 8007214:	d133      	bne.n	800727e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007224:	d107      	bne.n	8007236 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007234:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff f842 	bl	80062c4 <HAL_DMA_GetState>
 8007240:	4603      	mov	r3, r0
 8007242:	2b01      	cmp	r3, #1
 8007244:	d017      	beq.n	8007276 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	4a33      	ldr	r2, [pc, #204]	; (8007318 <I2C_ITError+0x19c>)
 800724c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe ff42 	bl	80060e4 <HAL_DMA_Abort_IT>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d04d      	beq.n	8007302 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007274:	e045      	b.n	8007302 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f850 	bl	800731c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800727c:	e041      	b.n	8007302 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007282:	2b00      	cmp	r3, #0
 8007284:	d039      	beq.n	80072fa <I2C_ITError+0x17e>
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b12      	cmp	r3, #18
 800728a:	d002      	beq.n	8007292 <I2C_ITError+0x116>
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2b22      	cmp	r3, #34	; 0x22
 8007290:	d133      	bne.n	80072fa <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800729c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a0:	d107      	bne.n	80072b2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7ff f804 	bl	80062c4 <HAL_DMA_GetState>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d017      	beq.n	80072f2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c6:	4a14      	ldr	r2, [pc, #80]	; (8007318 <I2C_ITError+0x19c>)
 80072c8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe ff04 	bl	80060e4 <HAL_DMA_Abort_IT>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d011      	beq.n	8007306 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072f0:	e009      	b.n	8007306 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f812 	bl	800731c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072f8:	e005      	b.n	8007306 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f80e 	bl	800731c <I2C_TreatErrorCallback>
  }
}
 8007300:	e002      	b.n	8007308 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007302:	bf00      	nop
 8007304:	e000      	b.n	8007308 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007306:	bf00      	nop
}
 8007308:	bf00      	nop
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	ffff0000 	.word	0xffff0000
 8007314:	08006af3 	.word	0x08006af3
 8007318:	080073b3 	.word	0x080073b3

0800731c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b60      	cmp	r3, #96	; 0x60
 800732e:	d10e      	bne.n	800734e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff fbc9 	bl	8006ade <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800734c:	e009      	b.n	8007362 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff fbb4 	bl	8006aca <HAL_I2C_ErrorCallback>
}
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b02      	cmp	r3, #2
 800737e:	d103      	bne.n	8007388 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2200      	movs	r2, #0
 8007386:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b01      	cmp	r3, #1
 8007394:	d007      	beq.n	80073a6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	699a      	ldr	r2, [r3, #24]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f042 0201 	orr.w	r2, r2, #1
 80073a4:	619a      	str	r2, [r3, #24]
  }
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073be:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	2200      	movs	r2, #0
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073dc:	2200      	movs	r2, #0
 80073de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f7ff ff9b 	bl	800731c <I2C_TreatErrorCallback>
}
 80073e6:	bf00      	nop
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	603b      	str	r3, [r7, #0]
 80073fa:	4613      	mov	r3, r2
 80073fc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073fe:	e022      	b.n	8007446 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d01e      	beq.n	8007446 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007408:	f7fc ff50 	bl	80042ac <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	429a      	cmp	r2, r3
 8007416:	d302      	bcc.n	800741e <I2C_WaitOnFlagUntilTimeout+0x30>
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d113      	bne.n	8007446 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007422:	f043 0220 	orr.w	r2, r3, #32
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e00f      	b.n	8007466 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	699a      	ldr	r2, [r3, #24]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4013      	ands	r3, r2
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	429a      	cmp	r2, r3
 8007454:	bf0c      	ite	eq
 8007456:	2301      	moveq	r3, #1
 8007458:	2300      	movne	r3, #0
 800745a:	b2db      	uxtb	r3, r3
 800745c:	461a      	mov	r2, r3
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	429a      	cmp	r2, r3
 8007462:	d0cd      	beq.n	8007400 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800747a:	e02c      	b.n	80074d6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 f871 	bl	8007568 <I2C_IsErrorOccurred>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e02a      	b.n	80074e6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007496:	d01e      	beq.n	80074d6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007498:	f7fc ff08 	bl	80042ac <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d302      	bcc.n	80074ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d113      	bne.n	80074d6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b2:	f043 0220 	orr.w	r2, r3, #32
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2220      	movs	r2, #32
 80074be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e007      	b.n	80074e6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d1cb      	bne.n	800747c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074fa:	e028      	b.n	800754e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 f831 	bl	8007568 <I2C_IsErrorOccurred>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e026      	b.n	800755e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007510:	f7fc fecc 	bl	80042ac <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	429a      	cmp	r2, r3
 800751e:	d302      	bcc.n	8007526 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d113      	bne.n	800754e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752a:	f043 0220 	orr.w	r2, r3, #32
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e007      	b.n	800755e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b20      	cmp	r3, #32
 800755a:	d1cf      	bne.n	80074fc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08a      	sub	sp, #40	; 0x28
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	f003 0310 	and.w	r3, r3, #16
 8007590:	2b00      	cmp	r3, #0
 8007592:	d075      	beq.n	8007680 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2210      	movs	r2, #16
 800759a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800759c:	e056      	b.n	800764c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a4:	d052      	beq.n	800764c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80075a6:	f7fc fe81 	bl	80042ac <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d302      	bcc.n	80075bc <I2C_IsErrorOccurred+0x54>
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d147      	bne.n	800764c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075de:	d12e      	bne.n	800763e <I2C_IsErrorOccurred+0xd6>
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075e6:	d02a      	beq.n	800763e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80075e8:	7cfb      	ldrb	r3, [r7, #19]
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	d027      	beq.n	800763e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80075fe:	f7fc fe55 	bl	80042ac <HAL_GetTick>
 8007602:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007604:	e01b      	b.n	800763e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007606:	f7fc fe51 	bl	80042ac <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	2b19      	cmp	r3, #25
 8007612:	d914      	bls.n	800763e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007618:	f043 0220 	orr.w	r2, r3, #32
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2220      	movs	r2, #32
 8007624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b20      	cmp	r3, #32
 800764a:	d1dc      	bne.n	8007606 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b20      	cmp	r3, #32
 8007658:	d003      	beq.n	8007662 <I2C_IsErrorOccurred+0xfa>
 800765a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800765e:	2b00      	cmp	r3, #0
 8007660:	d09d      	beq.n	800759e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007666:	2b00      	cmp	r3, #0
 8007668:	d103      	bne.n	8007672 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2220      	movs	r2, #32
 8007670:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	f043 0304 	orr.w	r3, r3, #4
 8007678:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	f043 0301 	orr.w	r3, r3, #1
 8007698:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	f043 0308 	orr.w	r3, r3, #8
 80076ba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00b      	beq.n	80076ee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	f043 0302 	orr.w	r3, r3, #2
 80076dc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80076ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01c      	beq.n	8007730 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f7ff fe37 	bl	800736a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6859      	ldr	r1, [r3, #4]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	4b0d      	ldr	r3, [pc, #52]	; (800773c <I2C_IsErrorOccurred+0x1d4>)
 8007708:	400b      	ands	r3, r1
 800770a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	431a      	orrs	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2220      	movs	r2, #32
 800771c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007734:	4618      	mov	r0, r3
 8007736:	3728      	adds	r7, #40	; 0x28
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	fe00e800 	.word	0xfe00e800

08007740 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	607b      	str	r3, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	817b      	strh	r3, [r7, #10]
 800774e:	4613      	mov	r3, r2
 8007750:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007752:	897b      	ldrh	r3, [r7, #10]
 8007754:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007758:	7a7b      	ldrb	r3, [r7, #9]
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007760:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	4313      	orrs	r3, r2
 800776a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800776e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	0d5b      	lsrs	r3, r3, #21
 800777a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800777e:	4b08      	ldr	r3, [pc, #32]	; (80077a0 <I2C_TransferConfig+0x60>)
 8007780:	430b      	orrs	r3, r1
 8007782:	43db      	mvns	r3, r3
 8007784:	ea02 0103 	and.w	r1, r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	430a      	orrs	r2, r1
 8007790:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007792:	bf00      	nop
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	03ff63ff 	.word	0x03ff63ff

080077a4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80077b4:	887b      	ldrh	r3, [r7, #2]
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00f      	beq.n	80077de <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80077c4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077d2:	2b28      	cmp	r3, #40	; 0x28
 80077d4:	d003      	beq.n	80077de <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80077dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80077de:	887b      	ldrh	r3, [r7, #2]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00f      	beq.n	8007808 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80077ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077fc:	2b28      	cmp	r3, #40	; 0x28
 80077fe:	d003      	beq.n	8007808 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007806:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007808:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800780c:	2b00      	cmp	r3, #0
 800780e:	da03      	bge.n	8007818 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007816:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007818:	887b      	ldrh	r3, [r7, #2]
 800781a:	2b10      	cmp	r3, #16
 800781c:	d103      	bne.n	8007826 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007824:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007826:	887b      	ldrh	r3, [r7, #2]
 8007828:	2b20      	cmp	r3, #32
 800782a:	d103      	bne.n	8007834 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f043 0320 	orr.w	r3, r3, #32
 8007832:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007834:	887b      	ldrh	r3, [r7, #2]
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	d103      	bne.n	8007842 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007840:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6819      	ldr	r1, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	43da      	mvns	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	400a      	ands	r2, r1
 8007852:	601a      	str	r2, [r3, #0]
}
 8007854:	bf00      	nop
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b20      	cmp	r3, #32
 8007874:	d138      	bne.n	80078e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007880:	2302      	movs	r3, #2
 8007882:	e032      	b.n	80078ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2224      	movs	r2, #36	; 0x24
 8007890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 0201 	bic.w	r2, r2, #1
 80078a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6819      	ldr	r1, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	e000      	b.n	80078ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80078e8:	2302      	movs	r3, #2
  }
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b20      	cmp	r3, #32
 800790a:	d139      	bne.n	8007980 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007912:	2b01      	cmp	r3, #1
 8007914:	d101      	bne.n	800791a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007916:	2302      	movs	r3, #2
 8007918:	e033      	b.n	8007982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2224      	movs	r2, #36	; 0x24
 8007926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0201 	bic.w	r2, r2, #1
 8007938:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007948:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4313      	orrs	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0201 	orr.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	e000      	b.n	8007982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007980:	2302      	movs	r3, #2
  }
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
	...

08007990 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007998:	4b0b      	ldr	r3, [pc, #44]	; (80079c8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800799a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799c:	4a0a      	ldr	r2, [pc, #40]	; (80079c8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800799e:	f043 0301 	orr.w	r3, r3, #1
 80079a2:	6613      	str	r3, [r2, #96]	; 0x60
 80079a4:	4b08      	ldr	r3, [pc, #32]	; (80079c8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80079a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80079b0:	4b06      	ldr	r3, [pc, #24]	; (80079cc <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	4905      	ldr	r1, [pc, #20]	; (80079cc <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	604b      	str	r3, [r1, #4]
}
 80079bc:	bf00      	nop
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	40021000 	.word	0x40021000
 80079cc:	40010000 	.word	0x40010000

080079d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a04      	ldr	r2, [pc, #16]	; (80079ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079de:	6013      	str	r3, [r2, #0]
}
 80079e0:	bf00      	nop
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40007000 	.word	0x40007000

080079f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80079f4:	4b04      	ldr	r3, [pc, #16]	; (8007a08 <HAL_PWREx_GetVoltageRange+0x18>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40007000 	.word	0x40007000

08007a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a1a:	d130      	bne.n	8007a7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a1c:	4b23      	ldr	r3, [pc, #140]	; (8007aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a28:	d038      	beq.n	8007a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a2a:	4b20      	ldr	r3, [pc, #128]	; (8007aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007a32:	4a1e      	ldr	r2, [pc, #120]	; (8007aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a3a:	4b1d      	ldr	r3, [pc, #116]	; (8007ab0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2232      	movs	r2, #50	; 0x32
 8007a40:	fb02 f303 	mul.w	r3, r2, r3
 8007a44:	4a1b      	ldr	r2, [pc, #108]	; (8007ab4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007a46:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4a:	0c9b      	lsrs	r3, r3, #18
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a50:	e002      	b.n	8007a58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a58:	4b14      	ldr	r3, [pc, #80]	; (8007aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a64:	d102      	bne.n	8007a6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1f2      	bne.n	8007a52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a6c:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a78:	d110      	bne.n	8007a9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e00f      	b.n	8007a9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a7e:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a8a:	d007      	beq.n	8007a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007a8c:	4b07      	ldr	r3, [pc, #28]	; (8007aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007a94:	4a05      	ldr	r2, [pc, #20]	; (8007aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40007000 	.word	0x40007000
 8007ab0:	20000034 	.word	0x20000034
 8007ab4:	431bde83 	.word	0x431bde83

08007ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b088      	sub	sp, #32
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d102      	bne.n	8007acc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	f000 bc02 	b.w	80082d0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007acc:	4b96      	ldr	r3, [pc, #600]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f003 030c 	and.w	r3, r3, #12
 8007ad4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ad6:	4b94      	ldr	r3, [pc, #592]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0310 	and.w	r3, r3, #16
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 80e4 	beq.w	8007cb6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d007      	beq.n	8007b04 <HAL_RCC_OscConfig+0x4c>
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	2b0c      	cmp	r3, #12
 8007af8:	f040 808b 	bne.w	8007c12 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	f040 8087 	bne.w	8007c12 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007b04:	4b88      	ldr	r3, [pc, #544]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0302 	and.w	r3, r3, #2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <HAL_RCC_OscConfig+0x64>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e3d9      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a1a      	ldr	r2, [r3, #32]
 8007b20:	4b81      	ldr	r3, [pc, #516]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d004      	beq.n	8007b36 <HAL_RCC_OscConfig+0x7e>
 8007b2c:	4b7e      	ldr	r3, [pc, #504]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b34:	e005      	b.n	8007b42 <HAL_RCC_OscConfig+0x8a>
 8007b36:	4b7c      	ldr	r3, [pc, #496]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b3c:	091b      	lsrs	r3, r3, #4
 8007b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d223      	bcs.n	8007b8e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fdbe 	bl	80086cc <RCC_SetFlashLatencyFromMSIRange>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e3ba      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b5a:	4b73      	ldr	r3, [pc, #460]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a72      	ldr	r2, [pc, #456]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007b60:	f043 0308 	orr.w	r3, r3, #8
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	4b70      	ldr	r3, [pc, #448]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	496d      	ldr	r1, [pc, #436]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b78:	4b6b      	ldr	r3, [pc, #428]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	4968      	ldr	r1, [pc, #416]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	604b      	str	r3, [r1, #4]
 8007b8c:	e025      	b.n	8007bda <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b8e:	4b66      	ldr	r3, [pc, #408]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a65      	ldr	r2, [pc, #404]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007b94:	f043 0308 	orr.w	r3, r3, #8
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	4b63      	ldr	r3, [pc, #396]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	4960      	ldr	r1, [pc, #384]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007bac:	4b5e      	ldr	r3, [pc, #376]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	021b      	lsls	r3, r3, #8
 8007bba:	495b      	ldr	r1, [pc, #364]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 fd7e 	bl	80086cc <RCC_SetFlashLatencyFromMSIRange>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e37a      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007bda:	f000 fc81 	bl	80084e0 <HAL_RCC_GetSysClockFreq>
 8007bde:	4602      	mov	r2, r0
 8007be0:	4b51      	ldr	r3, [pc, #324]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	091b      	lsrs	r3, r3, #4
 8007be6:	f003 030f 	and.w	r3, r3, #15
 8007bea:	4950      	ldr	r1, [pc, #320]	; (8007d2c <HAL_RCC_OscConfig+0x274>)
 8007bec:	5ccb      	ldrb	r3, [r1, r3]
 8007bee:	f003 031f 	and.w	r3, r3, #31
 8007bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf6:	4a4e      	ldr	r2, [pc, #312]	; (8007d30 <HAL_RCC_OscConfig+0x278>)
 8007bf8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007bfa:	4b4e      	ldr	r3, [pc, #312]	; (8007d34 <HAL_RCC_OscConfig+0x27c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fc f9e8 	bl	8003fd4 <HAL_InitTick>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d052      	beq.n	8007cb4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
 8007c10:	e35e      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d032      	beq.n	8007c80 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007c1a:	4b43      	ldr	r3, [pc, #268]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a42      	ldr	r2, [pc, #264]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007c20:	f043 0301 	orr.w	r3, r3, #1
 8007c24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007c26:	f7fc fb41 	bl	80042ac <HAL_GetTick>
 8007c2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c2c:	e008      	b.n	8007c40 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c2e:	f7fc fb3d 	bl	80042ac <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d901      	bls.n	8007c40 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e347      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c40:	4b39      	ldr	r3, [pc, #228]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d0f0      	beq.n	8007c2e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c4c:	4b36      	ldr	r3, [pc, #216]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a35      	ldr	r2, [pc, #212]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007c52:	f043 0308 	orr.w	r3, r3, #8
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	4b33      	ldr	r3, [pc, #204]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	4930      	ldr	r1, [pc, #192]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c6a:	4b2f      	ldr	r3, [pc, #188]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	021b      	lsls	r3, r3, #8
 8007c78:	492b      	ldr	r1, [pc, #172]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	604b      	str	r3, [r1, #4]
 8007c7e:	e01a      	b.n	8007cb6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007c80:	4b29      	ldr	r3, [pc, #164]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a28      	ldr	r2, [pc, #160]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007c8c:	f7fc fb0e 	bl	80042ac <HAL_GetTick>
 8007c90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007c92:	e008      	b.n	8007ca6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c94:	f7fc fb0a 	bl	80042ac <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d901      	bls.n	8007ca6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e314      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007ca6:	4b20      	ldr	r3, [pc, #128]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1f0      	bne.n	8007c94 <HAL_RCC_OscConfig+0x1dc>
 8007cb2:	e000      	b.n	8007cb6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007cb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d073      	beq.n	8007daa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d005      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x21c>
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	2b0c      	cmp	r3, #12
 8007ccc:	d10e      	bne.n	8007cec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b03      	cmp	r3, #3
 8007cd2:	d10b      	bne.n	8007cec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cd4:	4b14      	ldr	r3, [pc, #80]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d063      	beq.n	8007da8 <HAL_RCC_OscConfig+0x2f0>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d15f      	bne.n	8007da8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e2f1      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf4:	d106      	bne.n	8007d04 <HAL_RCC_OscConfig+0x24c>
 8007cf6:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a0b      	ldr	r2, [pc, #44]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	e025      	b.n	8007d50 <HAL_RCC_OscConfig+0x298>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d0c:	d114      	bne.n	8007d38 <HAL_RCC_OscConfig+0x280>
 8007d0e:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a05      	ldr	r2, [pc, #20]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	4b03      	ldr	r3, [pc, #12]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a02      	ldr	r2, [pc, #8]	; (8007d28 <HAL_RCC_OscConfig+0x270>)
 8007d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	e013      	b.n	8007d50 <HAL_RCC_OscConfig+0x298>
 8007d28:	40021000 	.word	0x40021000
 8007d2c:	080103ec 	.word	0x080103ec
 8007d30:	20000034 	.word	0x20000034
 8007d34:	20000038 	.word	0x20000038
 8007d38:	4ba0      	ldr	r3, [pc, #640]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a9f      	ldr	r2, [pc, #636]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	4b9d      	ldr	r3, [pc, #628]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a9c      	ldr	r2, [pc, #624]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d013      	beq.n	8007d80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d58:	f7fc faa8 	bl	80042ac <HAL_GetTick>
 8007d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d5e:	e008      	b.n	8007d72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d60:	f7fc faa4 	bl	80042ac <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b64      	cmp	r3, #100	; 0x64
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e2ae      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d72:	4b92      	ldr	r3, [pc, #584]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0f0      	beq.n	8007d60 <HAL_RCC_OscConfig+0x2a8>
 8007d7e:	e014      	b.n	8007daa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d80:	f7fc fa94 	bl	80042ac <HAL_GetTick>
 8007d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d86:	e008      	b.n	8007d9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d88:	f7fc fa90 	bl	80042ac <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	2b64      	cmp	r3, #100	; 0x64
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e29a      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d9a:	4b88      	ldr	r3, [pc, #544]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1f0      	bne.n	8007d88 <HAL_RCC_OscConfig+0x2d0>
 8007da6:	e000      	b.n	8007daa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d060      	beq.n	8007e78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d005      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x310>
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	2b0c      	cmp	r3, #12
 8007dc0:	d119      	bne.n	8007df6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d116      	bne.n	8007df6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dc8:	4b7c      	ldr	r3, [pc, #496]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <HAL_RCC_OscConfig+0x328>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e277      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007de0:	4b76      	ldr	r3, [pc, #472]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	061b      	lsls	r3, r3, #24
 8007dee:	4973      	ldr	r1, [pc, #460]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007df4:	e040      	b.n	8007e78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d023      	beq.n	8007e46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dfe:	4b6f      	ldr	r3, [pc, #444]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a6e      	ldr	r2, [pc, #440]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0a:	f7fc fa4f 	bl	80042ac <HAL_GetTick>
 8007e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e10:	e008      	b.n	8007e24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e12:	f7fc fa4b 	bl	80042ac <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d901      	bls.n	8007e24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e255      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e24:	4b65      	ldr	r3, [pc, #404]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0f0      	beq.n	8007e12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e30:	4b62      	ldr	r3, [pc, #392]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	061b      	lsls	r3, r3, #24
 8007e3e:	495f      	ldr	r1, [pc, #380]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	604b      	str	r3, [r1, #4]
 8007e44:	e018      	b.n	8007e78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e46:	4b5d      	ldr	r3, [pc, #372]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a5c      	ldr	r2, [pc, #368]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e52:	f7fc fa2b 	bl	80042ac <HAL_GetTick>
 8007e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e58:	e008      	b.n	8007e6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e5a:	f7fc fa27 	bl	80042ac <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e231      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e6c:	4b53      	ldr	r3, [pc, #332]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1f0      	bne.n	8007e5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0308 	and.w	r3, r3, #8
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d03c      	beq.n	8007efe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d01c      	beq.n	8007ec6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e8c:	4b4b      	ldr	r3, [pc, #300]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e92:	4a4a      	ldr	r2, [pc, #296]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007e94:	f043 0301 	orr.w	r3, r3, #1
 8007e98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e9c:	f7fc fa06 	bl	80042ac <HAL_GetTick>
 8007ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ea2:	e008      	b.n	8007eb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ea4:	f7fc fa02 	bl	80042ac <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d901      	bls.n	8007eb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e20c      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007eb6:	4b41      	ldr	r3, [pc, #260]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0ef      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x3ec>
 8007ec4:	e01b      	b.n	8007efe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ec6:	4b3d      	ldr	r3, [pc, #244]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ecc:	4a3b      	ldr	r2, [pc, #236]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007ece:	f023 0301 	bic.w	r3, r3, #1
 8007ed2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed6:	f7fc f9e9 	bl	80042ac <HAL_GetTick>
 8007eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007edc:	e008      	b.n	8007ef0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ede:	f7fc f9e5 	bl	80042ac <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d901      	bls.n	8007ef0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e1ef      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ef0:	4b32      	ldr	r3, [pc, #200]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1ef      	bne.n	8007ede <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 80a6 	beq.w	8008058 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007f10:	4b2a      	ldr	r3, [pc, #168]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10d      	bne.n	8007f38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f1c:	4b27      	ldr	r3, [pc, #156]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f20:	4a26      	ldr	r2, [pc, #152]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f26:	6593      	str	r3, [r2, #88]	; 0x58
 8007f28:	4b24      	ldr	r3, [pc, #144]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f30:	60bb      	str	r3, [r7, #8]
 8007f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f34:	2301      	movs	r3, #1
 8007f36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f38:	4b21      	ldr	r3, [pc, #132]	; (8007fc0 <HAL_RCC_OscConfig+0x508>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d118      	bne.n	8007f76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f44:	4b1e      	ldr	r3, [pc, #120]	; (8007fc0 <HAL_RCC_OscConfig+0x508>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a1d      	ldr	r2, [pc, #116]	; (8007fc0 <HAL_RCC_OscConfig+0x508>)
 8007f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f50:	f7fc f9ac 	bl	80042ac <HAL_GetTick>
 8007f54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f56:	e008      	b.n	8007f6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f58:	f7fc f9a8 	bl	80042ac <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e1b2      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f6a:	4b15      	ldr	r3, [pc, #84]	; (8007fc0 <HAL_RCC_OscConfig+0x508>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0f0      	beq.n	8007f58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d108      	bne.n	8007f90 <HAL_RCC_OscConfig+0x4d8>
 8007f7e:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f84:	4a0d      	ldr	r2, [pc, #52]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007f86:	f043 0301 	orr.w	r3, r3, #1
 8007f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f8e:	e029      	b.n	8007fe4 <HAL_RCC_OscConfig+0x52c>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	2b05      	cmp	r3, #5
 8007f96:	d115      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x50c>
 8007f98:	4b08      	ldr	r3, [pc, #32]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9e:	4a07      	ldr	r2, [pc, #28]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007fa0:	f043 0304 	orr.w	r3, r3, #4
 8007fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007fa8:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fae:	4a03      	ldr	r2, [pc, #12]	; (8007fbc <HAL_RCC_OscConfig+0x504>)
 8007fb0:	f043 0301 	orr.w	r3, r3, #1
 8007fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007fb8:	e014      	b.n	8007fe4 <HAL_RCC_OscConfig+0x52c>
 8007fba:	bf00      	nop
 8007fbc:	40021000 	.word	0x40021000
 8007fc0:	40007000 	.word	0x40007000
 8007fc4:	4b9a      	ldr	r3, [pc, #616]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fca:	4a99      	ldr	r2, [pc, #612]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 8007fcc:	f023 0301 	bic.w	r3, r3, #1
 8007fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007fd4:	4b96      	ldr	r3, [pc, #600]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 8007fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fda:	4a95      	ldr	r2, [pc, #596]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 8007fdc:	f023 0304 	bic.w	r3, r3, #4
 8007fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d016      	beq.n	800801a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fec:	f7fc f95e 	bl	80042ac <HAL_GetTick>
 8007ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ff2:	e00a      	b.n	800800a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ff4:	f7fc f95a 	bl	80042ac <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008002:	4293      	cmp	r3, r2
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e162      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800800a:	4b89      	ldr	r3, [pc, #548]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 800800c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d0ed      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x53c>
 8008018:	e015      	b.n	8008046 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800801a:	f7fc f947 	bl	80042ac <HAL_GetTick>
 800801e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008020:	e00a      	b.n	8008038 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008022:	f7fc f943 	bl	80042ac <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008030:	4293      	cmp	r3, r2
 8008032:	d901      	bls.n	8008038 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e14b      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008038:	4b7d      	ldr	r3, [pc, #500]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 800803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1ed      	bne.n	8008022 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008046:	7ffb      	ldrb	r3, [r7, #31]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d105      	bne.n	8008058 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800804c:	4b78      	ldr	r3, [pc, #480]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 800804e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008050:	4a77      	ldr	r2, [pc, #476]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 8008052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008056:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0320 	and.w	r3, r3, #32
 8008060:	2b00      	cmp	r3, #0
 8008062:	d03c      	beq.n	80080de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01c      	beq.n	80080a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800806c:	4b70      	ldr	r3, [pc, #448]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 800806e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008072:	4a6f      	ldr	r2, [pc, #444]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 8008074:	f043 0301 	orr.w	r3, r3, #1
 8008078:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800807c:	f7fc f916 	bl	80042ac <HAL_GetTick>
 8008080:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008082:	e008      	b.n	8008096 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008084:	f7fc f912 	bl	80042ac <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e11c      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008096:	4b66      	ldr	r3, [pc, #408]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 8008098:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0ef      	beq.n	8008084 <HAL_RCC_OscConfig+0x5cc>
 80080a4:	e01b      	b.n	80080de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80080a6:	4b62      	ldr	r3, [pc, #392]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 80080a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080ac:	4a60      	ldr	r2, [pc, #384]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 80080ae:	f023 0301 	bic.w	r3, r3, #1
 80080b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080b6:	f7fc f8f9 	bl	80042ac <HAL_GetTick>
 80080ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80080bc:	e008      	b.n	80080d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080be:	f7fc f8f5 	bl	80042ac <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d901      	bls.n	80080d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e0ff      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80080d0:	4b57      	ldr	r3, [pc, #348]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 80080d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1ef      	bne.n	80080be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 80f3 	beq.w	80082ce <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	f040 80c9 	bne.w	8008284 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80080f2:	4b4f      	ldr	r3, [pc, #316]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	f003 0203 	and.w	r2, r3, #3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008102:	429a      	cmp	r2, r3
 8008104:	d12c      	bne.n	8008160 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008110:	3b01      	subs	r3, #1
 8008112:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008114:	429a      	cmp	r2, r3
 8008116:	d123      	bne.n	8008160 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008122:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008124:	429a      	cmp	r2, r3
 8008126:	d11b      	bne.n	8008160 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008134:	429a      	cmp	r2, r3
 8008136:	d113      	bne.n	8008160 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008142:	085b      	lsrs	r3, r3, #1
 8008144:	3b01      	subs	r3, #1
 8008146:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008148:	429a      	cmp	r2, r3
 800814a:	d109      	bne.n	8008160 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	085b      	lsrs	r3, r3, #1
 8008158:	3b01      	subs	r3, #1
 800815a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800815c:	429a      	cmp	r2, r3
 800815e:	d06b      	beq.n	8008238 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	2b0c      	cmp	r3, #12
 8008164:	d062      	beq.n	800822c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008166:	4b32      	ldr	r3, [pc, #200]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e0ac      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008176:	4b2e      	ldr	r3, [pc, #184]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a2d      	ldr	r2, [pc, #180]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 800817c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008180:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008182:	f7fc f893 	bl	80042ac <HAL_GetTick>
 8008186:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008188:	e008      	b.n	800819c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800818a:	f7fc f88f 	bl	80042ac <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e099      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800819c:	4b24      	ldr	r3, [pc, #144]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1f0      	bne.n	800818a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081a8:	4b21      	ldr	r3, [pc, #132]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 80081aa:	68da      	ldr	r2, [r3, #12]
 80081ac:	4b21      	ldr	r3, [pc, #132]	; (8008234 <HAL_RCC_OscConfig+0x77c>)
 80081ae:	4013      	ands	r3, r2
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80081b8:	3a01      	subs	r2, #1
 80081ba:	0112      	lsls	r2, r2, #4
 80081bc:	4311      	orrs	r1, r2
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80081c2:	0212      	lsls	r2, r2, #8
 80081c4:	4311      	orrs	r1, r2
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80081ca:	0852      	lsrs	r2, r2, #1
 80081cc:	3a01      	subs	r2, #1
 80081ce:	0552      	lsls	r2, r2, #21
 80081d0:	4311      	orrs	r1, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80081d6:	0852      	lsrs	r2, r2, #1
 80081d8:	3a01      	subs	r2, #1
 80081da:	0652      	lsls	r2, r2, #25
 80081dc:	4311      	orrs	r1, r2
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081e2:	06d2      	lsls	r2, r2, #27
 80081e4:	430a      	orrs	r2, r1
 80081e6:	4912      	ldr	r1, [pc, #72]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80081ec:	4b10      	ldr	r3, [pc, #64]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a0f      	ldr	r2, [pc, #60]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 80081f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80081f8:	4b0d      	ldr	r3, [pc, #52]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	4a0c      	ldr	r2, [pc, #48]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 80081fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008202:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008204:	f7fc f852 	bl	80042ac <HAL_GetTick>
 8008208:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800820a:	e008      	b.n	800821e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800820c:	f7fc f84e 	bl	80042ac <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	2b02      	cmp	r3, #2
 8008218:	d901      	bls.n	800821e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e058      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800821e:	4b04      	ldr	r3, [pc, #16]	; (8008230 <HAL_RCC_OscConfig+0x778>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0f0      	beq.n	800820c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800822a:	e050      	b.n	80082ce <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e04f      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
 8008230:	40021000 	.word	0x40021000
 8008234:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008238:	4b27      	ldr	r3, [pc, #156]	; (80082d8 <HAL_RCC_OscConfig+0x820>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d144      	bne.n	80082ce <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008244:	4b24      	ldr	r3, [pc, #144]	; (80082d8 <HAL_RCC_OscConfig+0x820>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a23      	ldr	r2, [pc, #140]	; (80082d8 <HAL_RCC_OscConfig+0x820>)
 800824a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800824e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008250:	4b21      	ldr	r3, [pc, #132]	; (80082d8 <HAL_RCC_OscConfig+0x820>)
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	4a20      	ldr	r2, [pc, #128]	; (80082d8 <HAL_RCC_OscConfig+0x820>)
 8008256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800825a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800825c:	f7fc f826 	bl	80042ac <HAL_GetTick>
 8008260:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008262:	e008      	b.n	8008276 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008264:	f7fc f822 	bl	80042ac <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	2b02      	cmp	r3, #2
 8008270:	d901      	bls.n	8008276 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e02c      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008276:	4b18      	ldr	r3, [pc, #96]	; (80082d8 <HAL_RCC_OscConfig+0x820>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0f0      	beq.n	8008264 <HAL_RCC_OscConfig+0x7ac>
 8008282:	e024      	b.n	80082ce <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	2b0c      	cmp	r3, #12
 8008288:	d01f      	beq.n	80082ca <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800828a:	4b13      	ldr	r3, [pc, #76]	; (80082d8 <HAL_RCC_OscConfig+0x820>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a12      	ldr	r2, [pc, #72]	; (80082d8 <HAL_RCC_OscConfig+0x820>)
 8008290:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008296:	f7fc f809 	bl	80042ac <HAL_GetTick>
 800829a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800829c:	e008      	b.n	80082b0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800829e:	f7fc f805 	bl	80042ac <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e00f      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082b0:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <HAL_RCC_OscConfig+0x820>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1f0      	bne.n	800829e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80082bc:	4b06      	ldr	r3, [pc, #24]	; (80082d8 <HAL_RCC_OscConfig+0x820>)
 80082be:	68da      	ldr	r2, [r3, #12]
 80082c0:	4905      	ldr	r1, [pc, #20]	; (80082d8 <HAL_RCC_OscConfig+0x820>)
 80082c2:	4b06      	ldr	r3, [pc, #24]	; (80082dc <HAL_RCC_OscConfig+0x824>)
 80082c4:	4013      	ands	r3, r2
 80082c6:	60cb      	str	r3, [r1, #12]
 80082c8:	e001      	b.n	80082ce <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3720      	adds	r7, #32
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	40021000 	.word	0x40021000
 80082dc:	feeefffc 	.word	0xfeeefffc

080082e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e0e7      	b.n	80084c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082f4:	4b75      	ldr	r3, [pc, #468]	; (80084cc <HAL_RCC_ClockConfig+0x1ec>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d910      	bls.n	8008324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008302:	4b72      	ldr	r3, [pc, #456]	; (80084cc <HAL_RCC_ClockConfig+0x1ec>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f023 0207 	bic.w	r2, r3, #7
 800830a:	4970      	ldr	r1, [pc, #448]	; (80084cc <HAL_RCC_ClockConfig+0x1ec>)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	4313      	orrs	r3, r2
 8008310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008312:	4b6e      	ldr	r3, [pc, #440]	; (80084cc <HAL_RCC_ClockConfig+0x1ec>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	429a      	cmp	r2, r3
 800831e:	d001      	beq.n	8008324 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e0cf      	b.n	80084c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0302 	and.w	r3, r3, #2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d010      	beq.n	8008352 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	4b66      	ldr	r3, [pc, #408]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800833c:	429a      	cmp	r2, r3
 800833e:	d908      	bls.n	8008352 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008340:	4b63      	ldr	r3, [pc, #396]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	4960      	ldr	r1, [pc, #384]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 800834e:	4313      	orrs	r3, r2
 8008350:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d04c      	beq.n	80083f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2b03      	cmp	r3, #3
 8008364:	d107      	bne.n	8008376 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008366:	4b5a      	ldr	r3, [pc, #360]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d121      	bne.n	80083b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e0a6      	b.n	80084c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	2b02      	cmp	r3, #2
 800837c:	d107      	bne.n	800838e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800837e:	4b54      	ldr	r3, [pc, #336]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d115      	bne.n	80083b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e09a      	b.n	80084c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d107      	bne.n	80083a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008396:	4b4e      	ldr	r3, [pc, #312]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d109      	bne.n	80083b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e08e      	b.n	80084c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083a6:	4b4a      	ldr	r3, [pc, #296]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e086      	b.n	80084c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80083b6:	4b46      	ldr	r3, [pc, #280]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f023 0203 	bic.w	r2, r3, #3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	4943      	ldr	r1, [pc, #268]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083c8:	f7fb ff70 	bl	80042ac <HAL_GetTick>
 80083cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ce:	e00a      	b.n	80083e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083d0:	f7fb ff6c 	bl	80042ac <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	f241 3288 	movw	r2, #5000	; 0x1388
 80083de:	4293      	cmp	r3, r2
 80083e0:	d901      	bls.n	80083e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e06e      	b.n	80084c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083e6:	4b3a      	ldr	r3, [pc, #232]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f003 020c 	and.w	r2, r3, #12
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d1eb      	bne.n	80083d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d010      	beq.n	8008426 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689a      	ldr	r2, [r3, #8]
 8008408:	4b31      	ldr	r3, [pc, #196]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008410:	429a      	cmp	r2, r3
 8008412:	d208      	bcs.n	8008426 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008414:	4b2e      	ldr	r3, [pc, #184]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	492b      	ldr	r1, [pc, #172]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 8008422:	4313      	orrs	r3, r2
 8008424:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008426:	4b29      	ldr	r3, [pc, #164]	; (80084cc <HAL_RCC_ClockConfig+0x1ec>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0307 	and.w	r3, r3, #7
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d210      	bcs.n	8008456 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008434:	4b25      	ldr	r3, [pc, #148]	; (80084cc <HAL_RCC_ClockConfig+0x1ec>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f023 0207 	bic.w	r2, r3, #7
 800843c:	4923      	ldr	r1, [pc, #140]	; (80084cc <HAL_RCC_ClockConfig+0x1ec>)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	4313      	orrs	r3, r2
 8008442:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008444:	4b21      	ldr	r3, [pc, #132]	; (80084cc <HAL_RCC_ClockConfig+0x1ec>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	429a      	cmp	r2, r3
 8008450:	d001      	beq.n	8008456 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e036      	b.n	80084c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0304 	and.w	r3, r3, #4
 800845e:	2b00      	cmp	r3, #0
 8008460:	d008      	beq.n	8008474 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008462:	4b1b      	ldr	r3, [pc, #108]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	4918      	ldr	r1, [pc, #96]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 8008470:	4313      	orrs	r3, r2
 8008472:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	2b00      	cmp	r3, #0
 800847e:	d009      	beq.n	8008494 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008480:	4b13      	ldr	r3, [pc, #76]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	4910      	ldr	r1, [pc, #64]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 8008490:	4313      	orrs	r3, r2
 8008492:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008494:	f000 f824 	bl	80084e0 <HAL_RCC_GetSysClockFreq>
 8008498:	4602      	mov	r2, r0
 800849a:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <HAL_RCC_ClockConfig+0x1f0>)
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	091b      	lsrs	r3, r3, #4
 80084a0:	f003 030f 	and.w	r3, r3, #15
 80084a4:	490b      	ldr	r1, [pc, #44]	; (80084d4 <HAL_RCC_ClockConfig+0x1f4>)
 80084a6:	5ccb      	ldrb	r3, [r1, r3]
 80084a8:	f003 031f 	and.w	r3, r3, #31
 80084ac:	fa22 f303 	lsr.w	r3, r2, r3
 80084b0:	4a09      	ldr	r2, [pc, #36]	; (80084d8 <HAL_RCC_ClockConfig+0x1f8>)
 80084b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80084b4:	4b09      	ldr	r3, [pc, #36]	; (80084dc <HAL_RCC_ClockConfig+0x1fc>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fb fd8b 	bl	8003fd4 <HAL_InitTick>
 80084be:	4603      	mov	r3, r0
 80084c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80084c2:	7afb      	ldrb	r3, [r7, #11]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	40022000 	.word	0x40022000
 80084d0:	40021000 	.word	0x40021000
 80084d4:	080103ec 	.word	0x080103ec
 80084d8:	20000034 	.word	0x20000034
 80084dc:	20000038 	.word	0x20000038

080084e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b089      	sub	sp, #36	; 0x24
 80084e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	61fb      	str	r3, [r7, #28]
 80084ea:	2300      	movs	r3, #0
 80084ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084ee:	4b3e      	ldr	r3, [pc, #248]	; (80085e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f003 030c 	and.w	r3, r3, #12
 80084f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80084f8:	4b3b      	ldr	r3, [pc, #236]	; (80085e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d005      	beq.n	8008514 <HAL_RCC_GetSysClockFreq+0x34>
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2b0c      	cmp	r3, #12
 800850c:	d121      	bne.n	8008552 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d11e      	bne.n	8008552 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008514:	4b34      	ldr	r3, [pc, #208]	; (80085e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0308 	and.w	r3, r3, #8
 800851c:	2b00      	cmp	r3, #0
 800851e:	d107      	bne.n	8008530 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008520:	4b31      	ldr	r3, [pc, #196]	; (80085e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008526:	0a1b      	lsrs	r3, r3, #8
 8008528:	f003 030f 	and.w	r3, r3, #15
 800852c:	61fb      	str	r3, [r7, #28]
 800852e:	e005      	b.n	800853c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008530:	4b2d      	ldr	r3, [pc, #180]	; (80085e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	091b      	lsrs	r3, r3, #4
 8008536:	f003 030f 	and.w	r3, r3, #15
 800853a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800853c:	4a2b      	ldr	r2, [pc, #172]	; (80085ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008544:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10d      	bne.n	8008568 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008550:	e00a      	b.n	8008568 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	2b04      	cmp	r3, #4
 8008556:	d102      	bne.n	800855e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008558:	4b25      	ldr	r3, [pc, #148]	; (80085f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800855a:	61bb      	str	r3, [r7, #24]
 800855c:	e004      	b.n	8008568 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	2b08      	cmp	r3, #8
 8008562:	d101      	bne.n	8008568 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008564:	4b23      	ldr	r3, [pc, #140]	; (80085f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8008566:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	2b0c      	cmp	r3, #12
 800856c:	d134      	bne.n	80085d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800856e:	4b1e      	ldr	r3, [pc, #120]	; (80085e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d003      	beq.n	8008586 <HAL_RCC_GetSysClockFreq+0xa6>
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b03      	cmp	r3, #3
 8008582:	d003      	beq.n	800858c <HAL_RCC_GetSysClockFreq+0xac>
 8008584:	e005      	b.n	8008592 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008586:	4b1a      	ldr	r3, [pc, #104]	; (80085f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8008588:	617b      	str	r3, [r7, #20]
      break;
 800858a:	e005      	b.n	8008598 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800858c:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800858e:	617b      	str	r3, [r7, #20]
      break;
 8008590:	e002      	b.n	8008598 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	617b      	str	r3, [r7, #20]
      break;
 8008596:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008598:	4b13      	ldr	r3, [pc, #76]	; (80085e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	091b      	lsrs	r3, r3, #4
 800859e:	f003 0307 	and.w	r3, r3, #7
 80085a2:	3301      	adds	r3, #1
 80085a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80085a6:	4b10      	ldr	r3, [pc, #64]	; (80085e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	0a1b      	lsrs	r3, r3, #8
 80085ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	fb03 f202 	mul.w	r2, r3, r2
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80085be:	4b0a      	ldr	r3, [pc, #40]	; (80085e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	0e5b      	lsrs	r3, r3, #25
 80085c4:	f003 0303 	and.w	r3, r3, #3
 80085c8:	3301      	adds	r3, #1
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80085d8:	69bb      	ldr	r3, [r7, #24]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3724      	adds	r7, #36	; 0x24
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	40021000 	.word	0x40021000
 80085ec:	08010404 	.word	0x08010404
 80085f0:	00f42400 	.word	0x00f42400
 80085f4:	007a1200 	.word	0x007a1200

080085f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085fc:	4b03      	ldr	r3, [pc, #12]	; (800860c <HAL_RCC_GetHCLKFreq+0x14>)
 80085fe:	681b      	ldr	r3, [r3, #0]
}
 8008600:	4618      	mov	r0, r3
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20000034 	.word	0x20000034

08008610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008614:	f7ff fff0 	bl	80085f8 <HAL_RCC_GetHCLKFreq>
 8008618:	4602      	mov	r2, r0
 800861a:	4b06      	ldr	r3, [pc, #24]	; (8008634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	0a1b      	lsrs	r3, r3, #8
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	4904      	ldr	r1, [pc, #16]	; (8008638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008626:	5ccb      	ldrb	r3, [r1, r3]
 8008628:	f003 031f 	and.w	r3, r3, #31
 800862c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008630:	4618      	mov	r0, r3
 8008632:	bd80      	pop	{r7, pc}
 8008634:	40021000 	.word	0x40021000
 8008638:	080103fc 	.word	0x080103fc

0800863c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008640:	f7ff ffda 	bl	80085f8 <HAL_RCC_GetHCLKFreq>
 8008644:	4602      	mov	r2, r0
 8008646:	4b06      	ldr	r3, [pc, #24]	; (8008660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	0adb      	lsrs	r3, r3, #11
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	4904      	ldr	r1, [pc, #16]	; (8008664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008652:	5ccb      	ldrb	r3, [r1, r3]
 8008654:	f003 031f 	and.w	r3, r3, #31
 8008658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800865c:	4618      	mov	r0, r3
 800865e:	bd80      	pop	{r7, pc}
 8008660:	40021000 	.word	0x40021000
 8008664:	080103fc 	.word	0x080103fc

08008668 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	220f      	movs	r2, #15
 8008676:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008678:	4b12      	ldr	r3, [pc, #72]	; (80086c4 <HAL_RCC_GetClockConfig+0x5c>)
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f003 0203 	and.w	r2, r3, #3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008684:	4b0f      	ldr	r3, [pc, #60]	; (80086c4 <HAL_RCC_GetClockConfig+0x5c>)
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008690:	4b0c      	ldr	r3, [pc, #48]	; (80086c4 <HAL_RCC_GetClockConfig+0x5c>)
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800869c:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <HAL_RCC_GetClockConfig+0x5c>)
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	08db      	lsrs	r3, r3, #3
 80086a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80086aa:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <HAL_RCC_GetClockConfig+0x60>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0207 	and.w	r2, r3, #7
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	601a      	str	r2, [r3, #0]
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	40021000 	.word	0x40021000
 80086c8:	40022000 	.word	0x40022000

080086cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80086d4:	2300      	movs	r3, #0
 80086d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80086d8:	4b2a      	ldr	r3, [pc, #168]	; (8008784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80086e4:	f7ff f984 	bl	80079f0 <HAL_PWREx_GetVoltageRange>
 80086e8:	6178      	str	r0, [r7, #20]
 80086ea:	e014      	b.n	8008716 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80086ec:	4b25      	ldr	r3, [pc, #148]	; (8008784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f0:	4a24      	ldr	r2, [pc, #144]	; (8008784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086f6:	6593      	str	r3, [r2, #88]	; 0x58
 80086f8:	4b22      	ldr	r3, [pc, #136]	; (8008784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008704:	f7ff f974 	bl	80079f0 <HAL_PWREx_GetVoltageRange>
 8008708:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800870a:	4b1e      	ldr	r3, [pc, #120]	; (8008784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800870c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800870e:	4a1d      	ldr	r2, [pc, #116]	; (8008784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008714:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800871c:	d10b      	bne.n	8008736 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b80      	cmp	r3, #128	; 0x80
 8008722:	d919      	bls.n	8008758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2ba0      	cmp	r3, #160	; 0xa0
 8008728:	d902      	bls.n	8008730 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800872a:	2302      	movs	r3, #2
 800872c:	613b      	str	r3, [r7, #16]
 800872e:	e013      	b.n	8008758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008730:	2301      	movs	r3, #1
 8008732:	613b      	str	r3, [r7, #16]
 8008734:	e010      	b.n	8008758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b80      	cmp	r3, #128	; 0x80
 800873a:	d902      	bls.n	8008742 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800873c:	2303      	movs	r3, #3
 800873e:	613b      	str	r3, [r7, #16]
 8008740:	e00a      	b.n	8008758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b80      	cmp	r3, #128	; 0x80
 8008746:	d102      	bne.n	800874e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008748:	2302      	movs	r3, #2
 800874a:	613b      	str	r3, [r7, #16]
 800874c:	e004      	b.n	8008758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b70      	cmp	r3, #112	; 0x70
 8008752:	d101      	bne.n	8008758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008754:	2301      	movs	r3, #1
 8008756:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008758:	4b0b      	ldr	r3, [pc, #44]	; (8008788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f023 0207 	bic.w	r2, r3, #7
 8008760:	4909      	ldr	r1, [pc, #36]	; (8008788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	4313      	orrs	r3, r2
 8008766:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008768:	4b07      	ldr	r3, [pc, #28]	; (8008788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	429a      	cmp	r2, r3
 8008774:	d001      	beq.n	800877a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	40021000 	.word	0x40021000
 8008788:	40022000 	.word	0x40022000

0800878c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008794:	2300      	movs	r3, #0
 8008796:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008798:	2300      	movs	r3, #0
 800879a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d031      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80087b0:	d01a      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80087b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80087b6:	d814      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d009      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80087bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087c0:	d10f      	bne.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80087c2:	4b5d      	ldr	r3, [pc, #372]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	4a5c      	ldr	r2, [pc, #368]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80087c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80087ce:	e00c      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3304      	adds	r3, #4
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 f9de 	bl	8008b98 <RCCEx_PLLSAI1_Config>
 80087dc:	4603      	mov	r3, r0
 80087de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80087e0:	e003      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	74fb      	strb	r3, [r7, #19]
      break;
 80087e6:	e000      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80087e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087ea:	7cfb      	ldrb	r3, [r7, #19]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10b      	bne.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087f0:	4b51      	ldr	r3, [pc, #324]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80087f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fe:	494e      	ldr	r1, [pc, #312]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008800:	4313      	orrs	r3, r2
 8008802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008806:	e001      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008808:	7cfb      	ldrb	r3, [r7, #19]
 800880a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 809e 	beq.w	8008956 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800881a:	2300      	movs	r3, #0
 800881c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800881e:	4b46      	ldr	r3, [pc, #280]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800882a:	2301      	movs	r3, #1
 800882c:	e000      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800882e:	2300      	movs	r3, #0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00d      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008834:	4b40      	ldr	r3, [pc, #256]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008838:	4a3f      	ldr	r2, [pc, #252]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800883a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800883e:	6593      	str	r3, [r2, #88]	; 0x58
 8008840:	4b3d      	ldr	r3, [pc, #244]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008848:	60bb      	str	r3, [r7, #8]
 800884a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800884c:	2301      	movs	r3, #1
 800884e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008850:	4b3a      	ldr	r3, [pc, #232]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a39      	ldr	r2, [pc, #228]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800885a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800885c:	f7fb fd26 	bl	80042ac <HAL_GetTick>
 8008860:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008862:	e009      	b.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008864:	f7fb fd22 	bl	80042ac <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	2b02      	cmp	r3, #2
 8008870:	d902      	bls.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	74fb      	strb	r3, [r7, #19]
        break;
 8008876:	e005      	b.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008878:	4b30      	ldr	r3, [pc, #192]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0ef      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008884:	7cfb      	ldrb	r3, [r7, #19]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d15a      	bne.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800888a:	4b2b      	ldr	r3, [pc, #172]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800888c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008894:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01e      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d019      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80088a6:	4b24      	ldr	r3, [pc, #144]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80088b2:	4b21      	ldr	r3, [pc, #132]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b8:	4a1f      	ldr	r2, [pc, #124]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088c2:	4b1d      	ldr	r3, [pc, #116]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c8:	4a1b      	ldr	r2, [pc, #108]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088d2:	4a19      	ldr	r2, [pc, #100]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d016      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e4:	f7fb fce2 	bl	80042ac <HAL_GetTick>
 80088e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088ea:	e00b      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088ec:	f7fb fcde 	bl	80042ac <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d902      	bls.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	74fb      	strb	r3, [r7, #19]
            break;
 8008902:	e006      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008904:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0ec      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008912:	7cfb      	ldrb	r3, [r7, #19]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10b      	bne.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008918:	4b07      	ldr	r3, [pc, #28]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800891a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800891e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008926:	4904      	ldr	r1, [pc, #16]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008928:	4313      	orrs	r3, r2
 800892a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800892e:	e009      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008930:	7cfb      	ldrb	r3, [r7, #19]
 8008932:	74bb      	strb	r3, [r7, #18]
 8008934:	e006      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008936:	bf00      	nop
 8008938:	40021000 	.word	0x40021000
 800893c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008940:	7cfb      	ldrb	r3, [r7, #19]
 8008942:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008944:	7c7b      	ldrb	r3, [r7, #17]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d105      	bne.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800894a:	4b8a      	ldr	r3, [pc, #552]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800894c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800894e:	4a89      	ldr	r2, [pc, #548]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008954:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00a      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008962:	4b84      	ldr	r3, [pc, #528]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008968:	f023 0203 	bic.w	r2, r3, #3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a1b      	ldr	r3, [r3, #32]
 8008970:	4980      	ldr	r1, [pc, #512]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008972:	4313      	orrs	r3, r2
 8008974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 0302 	and.w	r3, r3, #2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00a      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008984:	4b7b      	ldr	r3, [pc, #492]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800898a:	f023 020c 	bic.w	r2, r3, #12
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	4978      	ldr	r1, [pc, #480]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008994:	4313      	orrs	r3, r2
 8008996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0320 	and.w	r3, r3, #32
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00a      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80089a6:	4b73      	ldr	r3, [pc, #460]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80089a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b4:	496f      	ldr	r1, [pc, #444]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00a      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089c8:	4b6a      	ldr	r3, [pc, #424]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80089ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d6:	4967      	ldr	r1, [pc, #412]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00a      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089ea:	4b62      	ldr	r3, [pc, #392]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80089ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	495e      	ldr	r1, [pc, #376]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00a      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a0c:	4b59      	ldr	r3, [pc, #356]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1a:	4956      	ldr	r1, [pc, #344]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00a      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a2e:	4b51      	ldr	r3, [pc, #324]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3c:	494d      	ldr	r1, [pc, #308]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d028      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a50:	4b48      	ldr	r3, [pc, #288]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	4945      	ldr	r1, [pc, #276]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a60:	4313      	orrs	r3, r2
 8008a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a6e:	d106      	bne.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a70:	4b40      	ldr	r3, [pc, #256]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	4a3f      	ldr	r2, [pc, #252]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a7a:	60d3      	str	r3, [r2, #12]
 8008a7c:	e011      	b.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a86:	d10c      	bne.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f882 	bl	8008b98 <RCCEx_PLLSAI1_Config>
 8008a94:	4603      	mov	r3, r0
 8008a96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008a98:	7cfb      	ldrb	r3, [r7, #19]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8008a9e:	7cfb      	ldrb	r3, [r7, #19]
 8008aa0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d028      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008aae:	4b31      	ldr	r3, [pc, #196]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abc:	492d      	ldr	r1, [pc, #180]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008acc:	d106      	bne.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ace:	4b29      	ldr	r3, [pc, #164]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	4a28      	ldr	r2, [pc, #160]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ad8:	60d3      	str	r3, [r2, #12]
 8008ada:	e011      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ae4:	d10c      	bne.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	2101      	movs	r1, #1
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f853 	bl	8008b98 <RCCEx_PLLSAI1_Config>
 8008af2:	4603      	mov	r3, r0
 8008af4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008af6:	7cfb      	ldrb	r3, [r7, #19]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8008afc:	7cfb      	ldrb	r3, [r7, #19]
 8008afe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01c      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b0c:	4b19      	ldr	r3, [pc, #100]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b1a:	4916      	ldr	r1, [pc, #88]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b2a:	d10c      	bne.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	2102      	movs	r1, #2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f830 	bl	8008b98 <RCCEx_PLLSAI1_Config>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008b3c:	7cfb      	ldrb	r3, [r7, #19]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8008b42:	7cfb      	ldrb	r3, [r7, #19]
 8008b44:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00a      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b52:	4b08      	ldr	r3, [pc, #32]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b58:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b60:	4904      	ldr	r1, [pc, #16]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008b68:	7cbb      	ldrb	r3, [r7, #18]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	40021000 	.word	0x40021000

08008b78 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008b7c:	4b05      	ldr	r3, [pc, #20]	; (8008b94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a04      	ldr	r2, [pc, #16]	; (8008b94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008b82:	f043 0304 	orr.w	r3, r3, #4
 8008b86:	6013      	str	r3, [r2, #0]
}
 8008b88:	bf00      	nop
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	40021000 	.word	0x40021000

08008b98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008ba6:	4b74      	ldr	r3, [pc, #464]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	f003 0303 	and.w	r3, r3, #3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d018      	beq.n	8008be4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008bb2:	4b71      	ldr	r3, [pc, #452]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	f003 0203 	and.w	r2, r3, #3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d10d      	bne.n	8008bde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
       ||
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008bca:	4b6b      	ldr	r3, [pc, #428]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	091b      	lsrs	r3, r3, #4
 8008bd0:	f003 0307 	and.w	r3, r3, #7
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
       ||
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d047      	beq.n	8008c6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	73fb      	strb	r3, [r7, #15]
 8008be2:	e044      	b.n	8008c6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d018      	beq.n	8008c1e <RCCEx_PLLSAI1_Config+0x86>
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d825      	bhi.n	8008c3c <RCCEx_PLLSAI1_Config+0xa4>
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d002      	beq.n	8008bfa <RCCEx_PLLSAI1_Config+0x62>
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d009      	beq.n	8008c0c <RCCEx_PLLSAI1_Config+0x74>
 8008bf8:	e020      	b.n	8008c3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008bfa:	4b5f      	ldr	r3, [pc, #380]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d11d      	bne.n	8008c42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c0a:	e01a      	b.n	8008c42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008c0c:	4b5a      	ldr	r3, [pc, #360]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d116      	bne.n	8008c46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c1c:	e013      	b.n	8008c46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008c1e:	4b56      	ldr	r3, [pc, #344]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10f      	bne.n	8008c4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008c2a:	4b53      	ldr	r3, [pc, #332]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d109      	bne.n	8008c4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c3a:	e006      	b.n	8008c4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c40:	e004      	b.n	8008c4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008c42:	bf00      	nop
 8008c44:	e002      	b.n	8008c4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008c46:	bf00      	nop
 8008c48:	e000      	b.n	8008c4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008c4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10d      	bne.n	8008c6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008c52:	4b49      	ldr	r3, [pc, #292]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6819      	ldr	r1, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	011b      	lsls	r3, r3, #4
 8008c66:	430b      	orrs	r3, r1
 8008c68:	4943      	ldr	r1, [pc, #268]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d17c      	bne.n	8008d6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008c74:	4b40      	ldr	r3, [pc, #256]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a3f      	ldr	r2, [pc, #252]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c80:	f7fb fb14 	bl	80042ac <HAL_GetTick>
 8008c84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008c86:	e009      	b.n	8008c9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c88:	f7fb fb10 	bl	80042ac <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d902      	bls.n	8008c9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	73fb      	strb	r3, [r7, #15]
        break;
 8008c9a:	e005      	b.n	8008ca8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008c9c:	4b36      	ldr	r3, [pc, #216]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1ef      	bne.n	8008c88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d15f      	bne.n	8008d6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d110      	bne.n	8008cd6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008cb4:	4b30      	ldr	r3, [pc, #192]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008cbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6892      	ldr	r2, [r2, #8]
 8008cc4:	0211      	lsls	r1, r2, #8
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	68d2      	ldr	r2, [r2, #12]
 8008cca:	06d2      	lsls	r2, r2, #27
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	492a      	ldr	r1, [pc, #168]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	610b      	str	r3, [r1, #16]
 8008cd4:	e027      	b.n	8008d26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d112      	bne.n	8008d02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008cdc:	4b26      	ldr	r3, [pc, #152]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008ce4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	6892      	ldr	r2, [r2, #8]
 8008cec:	0211      	lsls	r1, r2, #8
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	6912      	ldr	r2, [r2, #16]
 8008cf2:	0852      	lsrs	r2, r2, #1
 8008cf4:	3a01      	subs	r2, #1
 8008cf6:	0552      	lsls	r2, r2, #21
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	491f      	ldr	r1, [pc, #124]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	610b      	str	r3, [r1, #16]
 8008d00:	e011      	b.n	8008d26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d02:	4b1d      	ldr	r3, [pc, #116]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008d0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6892      	ldr	r2, [r2, #8]
 8008d12:	0211      	lsls	r1, r2, #8
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	6952      	ldr	r2, [r2, #20]
 8008d18:	0852      	lsrs	r2, r2, #1
 8008d1a:	3a01      	subs	r2, #1
 8008d1c:	0652      	lsls	r2, r2, #25
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	4915      	ldr	r1, [pc, #84]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008d26:	4b14      	ldr	r3, [pc, #80]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a13      	ldr	r2, [pc, #76]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d32:	f7fb fabb 	bl	80042ac <HAL_GetTick>
 8008d36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008d38:	e009      	b.n	8008d4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d3a:	f7fb fab7 	bl	80042ac <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d902      	bls.n	8008d4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	73fb      	strb	r3, [r7, #15]
          break;
 8008d4c:	e005      	b.n	8008d5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008d4e:	4b0a      	ldr	r3, [pc, #40]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0ef      	beq.n	8008d3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d106      	bne.n	8008d6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008d60:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d62:	691a      	ldr	r2, [r3, #16]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	4903      	ldr	r1, [pc, #12]	; (8008d78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	40021000 	.word	0x40021000

08008d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e049      	b.n	8008e22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d106      	bne.n	8008da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7fb f860 	bl	8003e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3304      	adds	r3, #4
 8008db8:	4619      	mov	r1, r3
 8008dba:	4610      	mov	r0, r2
 8008dbc:	f000 fae6 	bl	800938c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d001      	beq.n	8008e44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e033      	b.n	8008eac <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a19      	ldr	r2, [pc, #100]	; (8008eb8 <HAL_TIM_Base_Start+0x8c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d009      	beq.n	8008e6a <HAL_TIM_Base_Start+0x3e>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e5e:	d004      	beq.n	8008e6a <HAL_TIM_Base_Start+0x3e>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a15      	ldr	r2, [pc, #84]	; (8008ebc <HAL_TIM_Base_Start+0x90>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d115      	bne.n	8008e96 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689a      	ldr	r2, [r3, #8]
 8008e70:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <HAL_TIM_Base_Start+0x94>)
 8008e72:	4013      	ands	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2b06      	cmp	r3, #6
 8008e7a:	d015      	beq.n	8008ea8 <HAL_TIM_Base_Start+0x7c>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e82:	d011      	beq.n	8008ea8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f042 0201 	orr.w	r2, r2, #1
 8008e92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e94:	e008      	b.n	8008ea8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f042 0201 	orr.w	r2, r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	e000      	b.n	8008eaa <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	40012c00 	.word	0x40012c00
 8008ebc:	40014000 	.word	0x40014000
 8008ec0:	00010007 	.word	0x00010007

08008ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d001      	beq.n	8008edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e03b      	b.n	8008f54 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0201 	orr.w	r2, r2, #1
 8008ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a19      	ldr	r2, [pc, #100]	; (8008f60 <HAL_TIM_Base_Start_IT+0x9c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d009      	beq.n	8008f12 <HAL_TIM_Base_Start_IT+0x4e>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f06:	d004      	beq.n	8008f12 <HAL_TIM_Base_Start_IT+0x4e>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a15      	ldr	r2, [pc, #84]	; (8008f64 <HAL_TIM_Base_Start_IT+0xa0>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d115      	bne.n	8008f3e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689a      	ldr	r2, [r3, #8]
 8008f18:	4b13      	ldr	r3, [pc, #76]	; (8008f68 <HAL_TIM_Base_Start_IT+0xa4>)
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b06      	cmp	r3, #6
 8008f22:	d015      	beq.n	8008f50 <HAL_TIM_Base_Start_IT+0x8c>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2a:	d011      	beq.n	8008f50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f042 0201 	orr.w	r2, r2, #1
 8008f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f3c:	e008      	b.n	8008f50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f042 0201 	orr.w	r2, r2, #1
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	e000      	b.n	8008f52 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	40012c00 	.word	0x40012c00
 8008f64:	40014000 	.word	0x40014000
 8008f68:	00010007 	.word	0x00010007

08008f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	f003 0302 	and.w	r3, r3, #2
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d122      	bne.n	8008fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d11b      	bne.n	8008fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f06f 0202 	mvn.w	r2, #2
 8008f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	f003 0303 	and.w	r3, r3, #3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f9ce 	bl	8009350 <HAL_TIM_IC_CaptureCallback>
 8008fb4:	e005      	b.n	8008fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f9c0 	bl	800933c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f9d1 	bl	8009364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	f003 0304 	and.w	r3, r3, #4
 8008fd2:	2b04      	cmp	r3, #4
 8008fd4:	d122      	bne.n	800901c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	f003 0304 	and.w	r3, r3, #4
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	d11b      	bne.n	800901c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f06f 0204 	mvn.w	r2, #4
 8008fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f9a4 	bl	8009350 <HAL_TIM_IC_CaptureCallback>
 8009008:	e005      	b.n	8009016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f996 	bl	800933c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f9a7 	bl	8009364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	f003 0308 	and.w	r3, r3, #8
 8009026:	2b08      	cmp	r3, #8
 8009028:	d122      	bne.n	8009070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	f003 0308 	and.w	r3, r3, #8
 8009034:	2b08      	cmp	r3, #8
 8009036:	d11b      	bne.n	8009070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f06f 0208 	mvn.w	r2, #8
 8009040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2204      	movs	r2, #4
 8009046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	f003 0303 	and.w	r3, r3, #3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f97a 	bl	8009350 <HAL_TIM_IC_CaptureCallback>
 800905c:	e005      	b.n	800906a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f96c 	bl	800933c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f97d 	bl	8009364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	f003 0310 	and.w	r3, r3, #16
 800907a:	2b10      	cmp	r3, #16
 800907c:	d122      	bne.n	80090c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	f003 0310 	and.w	r3, r3, #16
 8009088:	2b10      	cmp	r3, #16
 800908a:	d11b      	bne.n	80090c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f06f 0210 	mvn.w	r2, #16
 8009094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2208      	movs	r2, #8
 800909a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f950 	bl	8009350 <HAL_TIM_IC_CaptureCallback>
 80090b0:	e005      	b.n	80090be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f942 	bl	800933c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f953 	bl	8009364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d10e      	bne.n	80090f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d107      	bne.n	80090f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f06f 0201 	mvn.w	r2, #1
 80090e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7fa fcd4 	bl	8003a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090fa:	2b80      	cmp	r3, #128	; 0x80
 80090fc:	d10e      	bne.n	800911c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009108:	2b80      	cmp	r3, #128	; 0x80
 800910a:	d107      	bne.n	800911c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 faa6 	bl	8009668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800912a:	d10e      	bne.n	800914a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009136:	2b80      	cmp	r3, #128	; 0x80
 8009138:	d107      	bne.n	800914a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fa99 	bl	800967c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009154:	2b40      	cmp	r3, #64	; 0x40
 8009156:	d10e      	bne.n	8009176 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009162:	2b40      	cmp	r3, #64	; 0x40
 8009164:	d107      	bne.n	8009176 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800916e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f901 	bl	8009378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	f003 0320 	and.w	r3, r3, #32
 8009180:	2b20      	cmp	r3, #32
 8009182:	d10e      	bne.n	80091a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	f003 0320 	and.w	r3, r3, #32
 800918e:	2b20      	cmp	r3, #32
 8009190:	d107      	bne.n	80091a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f06f 0220 	mvn.w	r2, #32
 800919a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fa59 	bl	8009654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091a2:	bf00      	nop
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d101      	bne.n	80091c6 <HAL_TIM_ConfigClockSource+0x1c>
 80091c2:	2302      	movs	r3, #2
 80091c4:	e0b6      	b.n	8009334 <HAL_TIM_ConfigClockSource+0x18a>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2202      	movs	r2, #2
 80091d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80091e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091f0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009202:	d03e      	beq.n	8009282 <HAL_TIM_ConfigClockSource+0xd8>
 8009204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009208:	f200 8087 	bhi.w	800931a <HAL_TIM_ConfigClockSource+0x170>
 800920c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009210:	f000 8086 	beq.w	8009320 <HAL_TIM_ConfigClockSource+0x176>
 8009214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009218:	d87f      	bhi.n	800931a <HAL_TIM_ConfigClockSource+0x170>
 800921a:	2b70      	cmp	r3, #112	; 0x70
 800921c:	d01a      	beq.n	8009254 <HAL_TIM_ConfigClockSource+0xaa>
 800921e:	2b70      	cmp	r3, #112	; 0x70
 8009220:	d87b      	bhi.n	800931a <HAL_TIM_ConfigClockSource+0x170>
 8009222:	2b60      	cmp	r3, #96	; 0x60
 8009224:	d050      	beq.n	80092c8 <HAL_TIM_ConfigClockSource+0x11e>
 8009226:	2b60      	cmp	r3, #96	; 0x60
 8009228:	d877      	bhi.n	800931a <HAL_TIM_ConfigClockSource+0x170>
 800922a:	2b50      	cmp	r3, #80	; 0x50
 800922c:	d03c      	beq.n	80092a8 <HAL_TIM_ConfigClockSource+0xfe>
 800922e:	2b50      	cmp	r3, #80	; 0x50
 8009230:	d873      	bhi.n	800931a <HAL_TIM_ConfigClockSource+0x170>
 8009232:	2b40      	cmp	r3, #64	; 0x40
 8009234:	d058      	beq.n	80092e8 <HAL_TIM_ConfigClockSource+0x13e>
 8009236:	2b40      	cmp	r3, #64	; 0x40
 8009238:	d86f      	bhi.n	800931a <HAL_TIM_ConfigClockSource+0x170>
 800923a:	2b30      	cmp	r3, #48	; 0x30
 800923c:	d064      	beq.n	8009308 <HAL_TIM_ConfigClockSource+0x15e>
 800923e:	2b30      	cmp	r3, #48	; 0x30
 8009240:	d86b      	bhi.n	800931a <HAL_TIM_ConfigClockSource+0x170>
 8009242:	2b20      	cmp	r3, #32
 8009244:	d060      	beq.n	8009308 <HAL_TIM_ConfigClockSource+0x15e>
 8009246:	2b20      	cmp	r3, #32
 8009248:	d867      	bhi.n	800931a <HAL_TIM_ConfigClockSource+0x170>
 800924a:	2b00      	cmp	r3, #0
 800924c:	d05c      	beq.n	8009308 <HAL_TIM_ConfigClockSource+0x15e>
 800924e:	2b10      	cmp	r3, #16
 8009250:	d05a      	beq.n	8009308 <HAL_TIM_ConfigClockSource+0x15e>
 8009252:	e062      	b.n	800931a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6818      	ldr	r0, [r3, #0]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	6899      	ldr	r1, [r3, #8]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	f000 f970 	bl	8009548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009276:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	609a      	str	r2, [r3, #8]
      break;
 8009280:	e04f      	b.n	8009322 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6818      	ldr	r0, [r3, #0]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	6899      	ldr	r1, [r3, #8]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	f000 f959 	bl	8009548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092a4:	609a      	str	r2, [r3, #8]
      break;
 80092a6:	e03c      	b.n	8009322 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6818      	ldr	r0, [r3, #0]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	6859      	ldr	r1, [r3, #4]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	461a      	mov	r2, r3
 80092b6:	f000 f8cd 	bl	8009454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2150      	movs	r1, #80	; 0x50
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 f926 	bl	8009512 <TIM_ITRx_SetConfig>
      break;
 80092c6:	e02c      	b.n	8009322 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6818      	ldr	r0, [r3, #0]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	6859      	ldr	r1, [r3, #4]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	461a      	mov	r2, r3
 80092d6:	f000 f8ec 	bl	80094b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2160      	movs	r1, #96	; 0x60
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 f916 	bl	8009512 <TIM_ITRx_SetConfig>
      break;
 80092e6:	e01c      	b.n	8009322 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6818      	ldr	r0, [r3, #0]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	6859      	ldr	r1, [r3, #4]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	461a      	mov	r2, r3
 80092f6:	f000 f8ad 	bl	8009454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2140      	movs	r1, #64	; 0x40
 8009300:	4618      	mov	r0, r3
 8009302:	f000 f906 	bl	8009512 <TIM_ITRx_SetConfig>
      break;
 8009306:	e00c      	b.n	8009322 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4619      	mov	r1, r3
 8009312:	4610      	mov	r0, r2
 8009314:	f000 f8fd 	bl	8009512 <TIM_ITRx_SetConfig>
      break;
 8009318:	e003      	b.n	8009322 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	73fb      	strb	r3, [r7, #15]
      break;
 800931e:	e000      	b.n	8009322 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009320:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009332:	7bfb      	ldrb	r3, [r7, #15]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a2a      	ldr	r2, [pc, #168]	; (8009448 <TIM_Base_SetConfig+0xbc>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d003      	beq.n	80093ac <TIM_Base_SetConfig+0x20>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093aa:	d108      	bne.n	80093be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a21      	ldr	r2, [pc, #132]	; (8009448 <TIM_Base_SetConfig+0xbc>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d00b      	beq.n	80093de <TIM_Base_SetConfig+0x52>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093cc:	d007      	beq.n	80093de <TIM_Base_SetConfig+0x52>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a1e      	ldr	r2, [pc, #120]	; (800944c <TIM_Base_SetConfig+0xc0>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d003      	beq.n	80093de <TIM_Base_SetConfig+0x52>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a1d      	ldr	r2, [pc, #116]	; (8009450 <TIM_Base_SetConfig+0xc4>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d108      	bne.n	80093f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	689a      	ldr	r2, [r3, #8]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a0c      	ldr	r2, [pc, #48]	; (8009448 <TIM_Base_SetConfig+0xbc>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d007      	beq.n	800942c <TIM_Base_SetConfig+0xa0>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a0b      	ldr	r2, [pc, #44]	; (800944c <TIM_Base_SetConfig+0xc0>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d003      	beq.n	800942c <TIM_Base_SetConfig+0xa0>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a0a      	ldr	r2, [pc, #40]	; (8009450 <TIM_Base_SetConfig+0xc4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d103      	bne.n	8009434 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	691a      	ldr	r2, [r3, #16]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	615a      	str	r2, [r3, #20]
}
 800943a:	bf00      	nop
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	40012c00 	.word	0x40012c00
 800944c:	40014000 	.word	0x40014000
 8009450:	40014400 	.word	0x40014400

08009454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6a1b      	ldr	r3, [r3, #32]
 8009464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	f023 0201 	bic.w	r2, r3, #1
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800947e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	011b      	lsls	r3, r3, #4
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	4313      	orrs	r3, r2
 8009488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f023 030a 	bic.w	r3, r3, #10
 8009490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	4313      	orrs	r3, r2
 8009498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	621a      	str	r2, [r3, #32]
}
 80094a6:	bf00      	nop
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b087      	sub	sp, #28
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	f023 0210 	bic.w	r2, r3, #16
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	031b      	lsls	r3, r3, #12
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	011b      	lsls	r3, r3, #4
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	693a      	ldr	r2, [r7, #16]
 8009504:	621a      	str	r2, [r3, #32]
}
 8009506:	bf00      	nop
 8009508:	371c      	adds	r7, #28
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009512:	b480      	push	{r7}
 8009514:	b085      	sub	sp, #20
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4313      	orrs	r3, r2
 8009530:	f043 0307 	orr.w	r3, r3, #7
 8009534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	609a      	str	r2, [r3, #8]
}
 800953c:	bf00      	nop
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
 8009554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	021a      	lsls	r2, r3, #8
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	431a      	orrs	r2, r3
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4313      	orrs	r3, r2
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	4313      	orrs	r3, r2
 8009574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	609a      	str	r2, [r3, #8]
}
 800957c:	bf00      	nop
 800957e:	371c      	adds	r7, #28
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009598:	2b01      	cmp	r3, #1
 800959a:	d101      	bne.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800959c:	2302      	movs	r3, #2
 800959e:	e04f      	b.n	8009640 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a21      	ldr	r2, [pc, #132]	; (800964c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d108      	bne.n	80095dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	4313      	orrs	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a14      	ldr	r2, [pc, #80]	; (800964c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d009      	beq.n	8009614 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009608:	d004      	beq.n	8009614 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a10      	ldr	r2, [pc, #64]	; (8009650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d10c      	bne.n	800962e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800961a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	4313      	orrs	r3, r2
 8009624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3714      	adds	r7, #20
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	40012c00 	.word	0x40012c00
 8009650:	40014000 	.word	0x40014000

08009654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e040      	b.n	8009724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d106      	bne.n	80096b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7fa fc24 	bl	8003f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2224      	movs	r2, #36	; 0x24
 80096bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 0201 	bic.w	r2, r2, #1
 80096cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f8c0 	bl	8009854 <UART_SetConfig>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d101      	bne.n	80096de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e022      	b.n	8009724 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fae0 	bl	8009cac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689a      	ldr	r2, [r3, #8]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800970a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f042 0201 	orr.w	r2, r2, #1
 800971a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fb67 	bl	8009df0 <UART_CheckIdleState>
 8009722:	4603      	mov	r3, r0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b08a      	sub	sp, #40	; 0x28
 8009730:	af02      	add	r7, sp, #8
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	4613      	mov	r3, r2
 800973a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009740:	2b20      	cmp	r3, #32
 8009742:	f040 8082 	bne.w	800984a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <HAL_UART_Transmit+0x26>
 800974c:	88fb      	ldrh	r3, [r7, #6]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e07a      	b.n	800984c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800975c:	2b01      	cmp	r3, #1
 800975e:	d101      	bne.n	8009764 <HAL_UART_Transmit+0x38>
 8009760:	2302      	movs	r3, #2
 8009762:	e073      	b.n	800984c <HAL_UART_Transmit+0x120>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2221      	movs	r2, #33	; 0x21
 8009778:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800977a:	f7fa fd97 	bl	80042ac <HAL_GetTick>
 800977e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	88fa      	ldrh	r2, [r7, #6]
 8009784:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	88fa      	ldrh	r2, [r7, #6]
 800978c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009798:	d108      	bne.n	80097ac <HAL_UART_Transmit+0x80>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d104      	bne.n	80097ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	61bb      	str	r3, [r7, #24]
 80097aa:	e003      	b.n	80097b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80097bc:	e02d      	b.n	800981a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	2200      	movs	r2, #0
 80097c6:	2180      	movs	r1, #128	; 0x80
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 fb5a 	bl	8009e82 <UART_WaitOnFlagUntilTimeout>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e039      	b.n	800984c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10b      	bne.n	80097f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	881a      	ldrh	r2, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097ea:	b292      	uxth	r2, r2
 80097ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	3302      	adds	r3, #2
 80097f2:	61bb      	str	r3, [r7, #24]
 80097f4:	e008      	b.n	8009808 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	781a      	ldrb	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	b292      	uxth	r2, r2
 8009800:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	3301      	adds	r3, #1
 8009806:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800980e:	b29b      	uxth	r3, r3
 8009810:	3b01      	subs	r3, #1
 8009812:	b29a      	uxth	r2, r3
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009820:	b29b      	uxth	r3, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1cb      	bne.n	80097be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2200      	movs	r2, #0
 800982e:	2140      	movs	r1, #64	; 0x40
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f000 fb26 	bl	8009e82 <UART_WaitOnFlagUntilTimeout>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800983c:	2303      	movs	r3, #3
 800983e:	e005      	b.n	800984c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2220      	movs	r2, #32
 8009844:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	e000      	b.n	800984c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800984a:	2302      	movs	r3, #2
  }
}
 800984c:	4618      	mov	r0, r3
 800984e:	3720      	adds	r7, #32
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009858:	b08a      	sub	sp, #40	; 0x28
 800985a:	af00      	add	r7, sp, #0
 800985c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	431a      	orrs	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	431a      	orrs	r2, r3
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	4313      	orrs	r3, r2
 800987a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	4bb4      	ldr	r3, [pc, #720]	; (8009b54 <UART_SetConfig+0x300>)
 8009884:	4013      	ands	r3, r2
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	6812      	ldr	r2, [r2, #0]
 800988a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800988c:	430b      	orrs	r3, r1
 800988e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	68da      	ldr	r2, [r3, #12]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4aa9      	ldr	r2, [pc, #676]	; (8009b58 <UART_SetConfig+0x304>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d004      	beq.n	80098c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098bc:	4313      	orrs	r3, r2
 80098be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d0:	430a      	orrs	r2, r1
 80098d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4aa0      	ldr	r2, [pc, #640]	; (8009b5c <UART_SetConfig+0x308>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d126      	bne.n	800992c <UART_SetConfig+0xd8>
 80098de:	4ba0      	ldr	r3, [pc, #640]	; (8009b60 <UART_SetConfig+0x30c>)
 80098e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e4:	f003 0303 	and.w	r3, r3, #3
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d81b      	bhi.n	8009924 <UART_SetConfig+0xd0>
 80098ec:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <UART_SetConfig+0xa0>)
 80098ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f2:	bf00      	nop
 80098f4:	08009905 	.word	0x08009905
 80098f8:	08009915 	.word	0x08009915
 80098fc:	0800990d 	.word	0x0800990d
 8009900:	0800991d 	.word	0x0800991d
 8009904:	2301      	movs	r3, #1
 8009906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800990a:	e080      	b.n	8009a0e <UART_SetConfig+0x1ba>
 800990c:	2302      	movs	r3, #2
 800990e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009912:	e07c      	b.n	8009a0e <UART_SetConfig+0x1ba>
 8009914:	2304      	movs	r3, #4
 8009916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800991a:	e078      	b.n	8009a0e <UART_SetConfig+0x1ba>
 800991c:	2308      	movs	r3, #8
 800991e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009922:	e074      	b.n	8009a0e <UART_SetConfig+0x1ba>
 8009924:	2310      	movs	r3, #16
 8009926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800992a:	e070      	b.n	8009a0e <UART_SetConfig+0x1ba>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a8c      	ldr	r2, [pc, #560]	; (8009b64 <UART_SetConfig+0x310>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d138      	bne.n	80099a8 <UART_SetConfig+0x154>
 8009936:	4b8a      	ldr	r3, [pc, #552]	; (8009b60 <UART_SetConfig+0x30c>)
 8009938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800993c:	f003 030c 	and.w	r3, r3, #12
 8009940:	2b0c      	cmp	r3, #12
 8009942:	d82d      	bhi.n	80099a0 <UART_SetConfig+0x14c>
 8009944:	a201      	add	r2, pc, #4	; (adr r2, 800994c <UART_SetConfig+0xf8>)
 8009946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994a:	bf00      	nop
 800994c:	08009981 	.word	0x08009981
 8009950:	080099a1 	.word	0x080099a1
 8009954:	080099a1 	.word	0x080099a1
 8009958:	080099a1 	.word	0x080099a1
 800995c:	08009991 	.word	0x08009991
 8009960:	080099a1 	.word	0x080099a1
 8009964:	080099a1 	.word	0x080099a1
 8009968:	080099a1 	.word	0x080099a1
 800996c:	08009989 	.word	0x08009989
 8009970:	080099a1 	.word	0x080099a1
 8009974:	080099a1 	.word	0x080099a1
 8009978:	080099a1 	.word	0x080099a1
 800997c:	08009999 	.word	0x08009999
 8009980:	2300      	movs	r3, #0
 8009982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009986:	e042      	b.n	8009a0e <UART_SetConfig+0x1ba>
 8009988:	2302      	movs	r3, #2
 800998a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800998e:	e03e      	b.n	8009a0e <UART_SetConfig+0x1ba>
 8009990:	2304      	movs	r3, #4
 8009992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009996:	e03a      	b.n	8009a0e <UART_SetConfig+0x1ba>
 8009998:	2308      	movs	r3, #8
 800999a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800999e:	e036      	b.n	8009a0e <UART_SetConfig+0x1ba>
 80099a0:	2310      	movs	r3, #16
 80099a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099a6:	e032      	b.n	8009a0e <UART_SetConfig+0x1ba>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a6a      	ldr	r2, [pc, #424]	; (8009b58 <UART_SetConfig+0x304>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d12a      	bne.n	8009a08 <UART_SetConfig+0x1b4>
 80099b2:	4b6b      	ldr	r3, [pc, #428]	; (8009b60 <UART_SetConfig+0x30c>)
 80099b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80099bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099c0:	d01a      	beq.n	80099f8 <UART_SetConfig+0x1a4>
 80099c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099c6:	d81b      	bhi.n	8009a00 <UART_SetConfig+0x1ac>
 80099c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099cc:	d00c      	beq.n	80099e8 <UART_SetConfig+0x194>
 80099ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099d2:	d815      	bhi.n	8009a00 <UART_SetConfig+0x1ac>
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <UART_SetConfig+0x18c>
 80099d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099dc:	d008      	beq.n	80099f0 <UART_SetConfig+0x19c>
 80099de:	e00f      	b.n	8009a00 <UART_SetConfig+0x1ac>
 80099e0:	2300      	movs	r3, #0
 80099e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099e6:	e012      	b.n	8009a0e <UART_SetConfig+0x1ba>
 80099e8:	2302      	movs	r3, #2
 80099ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099ee:	e00e      	b.n	8009a0e <UART_SetConfig+0x1ba>
 80099f0:	2304      	movs	r3, #4
 80099f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099f6:	e00a      	b.n	8009a0e <UART_SetConfig+0x1ba>
 80099f8:	2308      	movs	r3, #8
 80099fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099fe:	e006      	b.n	8009a0e <UART_SetConfig+0x1ba>
 8009a00:	2310      	movs	r3, #16
 8009a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a06:	e002      	b.n	8009a0e <UART_SetConfig+0x1ba>
 8009a08:	2310      	movs	r3, #16
 8009a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a51      	ldr	r2, [pc, #324]	; (8009b58 <UART_SetConfig+0x304>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d17a      	bne.n	8009b0e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a1c:	2b08      	cmp	r3, #8
 8009a1e:	d824      	bhi.n	8009a6a <UART_SetConfig+0x216>
 8009a20:	a201      	add	r2, pc, #4	; (adr r2, 8009a28 <UART_SetConfig+0x1d4>)
 8009a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a26:	bf00      	nop
 8009a28:	08009a4d 	.word	0x08009a4d
 8009a2c:	08009a6b 	.word	0x08009a6b
 8009a30:	08009a55 	.word	0x08009a55
 8009a34:	08009a6b 	.word	0x08009a6b
 8009a38:	08009a5b 	.word	0x08009a5b
 8009a3c:	08009a6b 	.word	0x08009a6b
 8009a40:	08009a6b 	.word	0x08009a6b
 8009a44:	08009a6b 	.word	0x08009a6b
 8009a48:	08009a63 	.word	0x08009a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a4c:	f7fe fde0 	bl	8008610 <HAL_RCC_GetPCLK1Freq>
 8009a50:	61f8      	str	r0, [r7, #28]
        break;
 8009a52:	e010      	b.n	8009a76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a54:	4b44      	ldr	r3, [pc, #272]	; (8009b68 <UART_SetConfig+0x314>)
 8009a56:	61fb      	str	r3, [r7, #28]
        break;
 8009a58:	e00d      	b.n	8009a76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a5a:	f7fe fd41 	bl	80084e0 <HAL_RCC_GetSysClockFreq>
 8009a5e:	61f8      	str	r0, [r7, #28]
        break;
 8009a60:	e009      	b.n	8009a76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a66:	61fb      	str	r3, [r7, #28]
        break;
 8009a68:	e005      	b.n	8009a76 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009a74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 8107 	beq.w	8009c8c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	4613      	mov	r3, r2
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	4413      	add	r3, r2
 8009a88:	69fa      	ldr	r2, [r7, #28]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d305      	bcc.n	8009a9a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009a94:	69fa      	ldr	r2, [r7, #28]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d903      	bls.n	8009aa2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009aa0:	e0f4      	b.n	8009c8c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	461c      	mov	r4, r3
 8009aa8:	4615      	mov	r5, r2
 8009aaa:	f04f 0200 	mov.w	r2, #0
 8009aae:	f04f 0300 	mov.w	r3, #0
 8009ab2:	022b      	lsls	r3, r5, #8
 8009ab4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009ab8:	0222      	lsls	r2, r4, #8
 8009aba:	68f9      	ldr	r1, [r7, #12]
 8009abc:	6849      	ldr	r1, [r1, #4]
 8009abe:	0849      	lsrs	r1, r1, #1
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	4688      	mov	r8, r1
 8009ac4:	4681      	mov	r9, r0
 8009ac6:	eb12 0a08 	adds.w	sl, r2, r8
 8009aca:	eb43 0b09 	adc.w	fp, r3, r9
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	603b      	str	r3, [r7, #0]
 8009ad6:	607a      	str	r2, [r7, #4]
 8009ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009adc:	4650      	mov	r0, sl
 8009ade:	4659      	mov	r1, fp
 8009ae0:	f7f7 f8b2 	bl	8000c48 <__aeabi_uldivmod>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4613      	mov	r3, r2
 8009aea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009af2:	d308      	bcc.n	8009b06 <UART_SetConfig+0x2b2>
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009afa:	d204      	bcs.n	8009b06 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	60da      	str	r2, [r3, #12]
 8009b04:	e0c2      	b.n	8009c8c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b0c:	e0be      	b.n	8009c8c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b16:	d16a      	bne.n	8009bee <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8009b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d834      	bhi.n	8009b8a <UART_SetConfig+0x336>
 8009b20:	a201      	add	r2, pc, #4	; (adr r2, 8009b28 <UART_SetConfig+0x2d4>)
 8009b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b26:	bf00      	nop
 8009b28:	08009b4d 	.word	0x08009b4d
 8009b2c:	08009b6d 	.word	0x08009b6d
 8009b30:	08009b75 	.word	0x08009b75
 8009b34:	08009b8b 	.word	0x08009b8b
 8009b38:	08009b7b 	.word	0x08009b7b
 8009b3c:	08009b8b 	.word	0x08009b8b
 8009b40:	08009b8b 	.word	0x08009b8b
 8009b44:	08009b8b 	.word	0x08009b8b
 8009b48:	08009b83 	.word	0x08009b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b4c:	f7fe fd60 	bl	8008610 <HAL_RCC_GetPCLK1Freq>
 8009b50:	61f8      	str	r0, [r7, #28]
        break;
 8009b52:	e020      	b.n	8009b96 <UART_SetConfig+0x342>
 8009b54:	efff69f3 	.word	0xefff69f3
 8009b58:	40008000 	.word	0x40008000
 8009b5c:	40013800 	.word	0x40013800
 8009b60:	40021000 	.word	0x40021000
 8009b64:	40004400 	.word	0x40004400
 8009b68:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b6c:	f7fe fd66 	bl	800863c <HAL_RCC_GetPCLK2Freq>
 8009b70:	61f8      	str	r0, [r7, #28]
        break;
 8009b72:	e010      	b.n	8009b96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b74:	4b4c      	ldr	r3, [pc, #304]	; (8009ca8 <UART_SetConfig+0x454>)
 8009b76:	61fb      	str	r3, [r7, #28]
        break;
 8009b78:	e00d      	b.n	8009b96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b7a:	f7fe fcb1 	bl	80084e0 <HAL_RCC_GetSysClockFreq>
 8009b7e:	61f8      	str	r0, [r7, #28]
        break;
 8009b80:	e009      	b.n	8009b96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b86:	61fb      	str	r3, [r7, #28]
        break;
 8009b88:	e005      	b.n	8009b96 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009b94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d077      	beq.n	8009c8c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	005a      	lsls	r2, r3, #1
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	085b      	lsrs	r3, r3, #1
 8009ba6:	441a      	add	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bb0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	2b0f      	cmp	r3, #15
 8009bb6:	d916      	bls.n	8009be6 <UART_SetConfig+0x392>
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bbe:	d212      	bcs.n	8009be6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	f023 030f 	bic.w	r3, r3, #15
 8009bc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	085b      	lsrs	r3, r3, #1
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	f003 0307 	and.w	r3, r3, #7
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	8afb      	ldrh	r3, [r7, #22]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	8afa      	ldrh	r2, [r7, #22]
 8009be2:	60da      	str	r2, [r3, #12]
 8009be4:	e052      	b.n	8009c8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009bec:	e04e      	b.n	8009c8c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bf2:	2b08      	cmp	r3, #8
 8009bf4:	d827      	bhi.n	8009c46 <UART_SetConfig+0x3f2>
 8009bf6:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <UART_SetConfig+0x3a8>)
 8009bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfc:	08009c21 	.word	0x08009c21
 8009c00:	08009c29 	.word	0x08009c29
 8009c04:	08009c31 	.word	0x08009c31
 8009c08:	08009c47 	.word	0x08009c47
 8009c0c:	08009c37 	.word	0x08009c37
 8009c10:	08009c47 	.word	0x08009c47
 8009c14:	08009c47 	.word	0x08009c47
 8009c18:	08009c47 	.word	0x08009c47
 8009c1c:	08009c3f 	.word	0x08009c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c20:	f7fe fcf6 	bl	8008610 <HAL_RCC_GetPCLK1Freq>
 8009c24:	61f8      	str	r0, [r7, #28]
        break;
 8009c26:	e014      	b.n	8009c52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c28:	f7fe fd08 	bl	800863c <HAL_RCC_GetPCLK2Freq>
 8009c2c:	61f8      	str	r0, [r7, #28]
        break;
 8009c2e:	e010      	b.n	8009c52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c30:	4b1d      	ldr	r3, [pc, #116]	; (8009ca8 <UART_SetConfig+0x454>)
 8009c32:	61fb      	str	r3, [r7, #28]
        break;
 8009c34:	e00d      	b.n	8009c52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c36:	f7fe fc53 	bl	80084e0 <HAL_RCC_GetSysClockFreq>
 8009c3a:	61f8      	str	r0, [r7, #28]
        break;
 8009c3c:	e009      	b.n	8009c52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c42:	61fb      	str	r3, [r7, #28]
        break;
 8009c44:	e005      	b.n	8009c52 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8009c46:	2300      	movs	r3, #0
 8009c48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009c50:	bf00      	nop
    }

    if (pclk != 0U)
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d019      	beq.n	8009c8c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	085a      	lsrs	r2, r3, #1
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	441a      	add	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	2b0f      	cmp	r3, #15
 8009c70:	d909      	bls.n	8009c86 <UART_SetConfig+0x432>
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c78:	d205      	bcs.n	8009c86 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	60da      	str	r2, [r3, #12]
 8009c84:	e002      	b.n	8009c8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009c98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3728      	adds	r7, #40	; 0x28
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ca6:	bf00      	nop
 8009ca8:	00f42400 	.word	0x00f42400

08009cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb8:	f003 0301 	and.w	r3, r3, #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00a      	beq.n	8009cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00a      	beq.n	8009cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	430a      	orrs	r2, r1
 8009cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00a      	beq.n	8009d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1e:	f003 0308 	and.w	r3, r3, #8
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00a      	beq.n	8009d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	430a      	orrs	r2, r1
 8009d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	f003 0310 	and.w	r3, r3, #16
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00a      	beq.n	8009d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d62:	f003 0320 	and.w	r3, r3, #32
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	430a      	orrs	r2, r1
 8009d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d01a      	beq.n	8009dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009daa:	d10a      	bne.n	8009dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	605a      	str	r2, [r3, #4]
  }
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af02      	add	r7, sp, #8
 8009df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e00:	f7fa fa54 	bl	80042ac <HAL_GetTick>
 8009e04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 0308 	and.w	r3, r3, #8
 8009e10:	2b08      	cmp	r3, #8
 8009e12:	d10e      	bne.n	8009e32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f82d 	bl	8009e82 <UART_WaitOnFlagUntilTimeout>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e023      	b.n	8009e7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0304 	and.w	r3, r3, #4
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	d10e      	bne.n	8009e5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f817 	bl	8009e82 <UART_WaitOnFlagUntilTimeout>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e00d      	b.n	8009e7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2220      	movs	r2, #32
 8009e62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2220      	movs	r2, #32
 8009e68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b09c      	sub	sp, #112	; 0x70
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	60b9      	str	r1, [r7, #8]
 8009e8c:	603b      	str	r3, [r7, #0]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e92:	e0a5      	b.n	8009fe0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9a:	f000 80a1 	beq.w	8009fe0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e9e:	f7fa fa05 	bl	80042ac <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d302      	bcc.n	8009eb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8009eae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d13e      	bne.n	8009f32 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ebc:	e853 3f00 	ldrex	r3, [r3]
 8009ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ec4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ec8:	667b      	str	r3, [r7, #100]	; 0x64
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ed4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ed8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009eda:	e841 2300 	strex	r3, r2, [r1]
 8009ede:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1e6      	bne.n	8009eb4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3308      	adds	r3, #8
 8009eec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef0:	e853 3f00 	ldrex	r3, [r3]
 8009ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef8:	f023 0301 	bic.w	r3, r3, #1
 8009efc:	663b      	str	r3, [r7, #96]	; 0x60
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3308      	adds	r3, #8
 8009f04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f06:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e5      	bne.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2220      	movs	r2, #32
 8009f1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2220      	movs	r2, #32
 8009f24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e067      	b.n	800a002 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0304 	and.w	r3, r3, #4
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d04f      	beq.n	8009fe0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f4e:	d147      	bne.n	8009fe0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f58:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f62:	e853 3f00 	ldrex	r3, [r3]
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	461a      	mov	r2, r3
 8009f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f78:	637b      	str	r3, [r7, #52]	; 0x34
 8009f7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f80:	e841 2300 	strex	r3, r2, [r1]
 8009f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e6      	bne.n	8009f5a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3308      	adds	r3, #8
 8009f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	e853 3f00 	ldrex	r3, [r3]
 8009f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	f023 0301 	bic.w	r3, r3, #1
 8009fa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3308      	adds	r3, #8
 8009faa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009fac:	623a      	str	r2, [r7, #32]
 8009fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb0:	69f9      	ldr	r1, [r7, #28]
 8009fb2:	6a3a      	ldr	r2, [r7, #32]
 8009fb4:	e841 2300 	strex	r3, r2, [r1]
 8009fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e5      	bne.n	8009f8c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2220      	movs	r2, #32
 8009fc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2220      	movs	r2, #32
 8009fca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2220      	movs	r2, #32
 8009fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	e010      	b.n	800a002 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	69da      	ldr	r2, [r3, #28]
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	4013      	ands	r3, r2
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	bf0c      	ite	eq
 8009ff0:	2301      	moveq	r3, #1
 8009ff2:	2300      	movne	r3, #0
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	79fb      	ldrb	r3, [r7, #7]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	f43f af4a 	beq.w	8009e94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3770      	adds	r7, #112	; 0x70
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <__NVIC_SetPriority>:
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	6039      	str	r1, [r7, #0]
 800a016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	db0a      	blt.n	800a036 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	b2da      	uxtb	r2, r3
 800a024:	490c      	ldr	r1, [pc, #48]	; (800a058 <__NVIC_SetPriority+0x4c>)
 800a026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a02a:	0112      	lsls	r2, r2, #4
 800a02c:	b2d2      	uxtb	r2, r2
 800a02e:	440b      	add	r3, r1
 800a030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a034:	e00a      	b.n	800a04c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	4908      	ldr	r1, [pc, #32]	; (800a05c <__NVIC_SetPriority+0x50>)
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	f003 030f 	and.w	r3, r3, #15
 800a042:	3b04      	subs	r3, #4
 800a044:	0112      	lsls	r2, r2, #4
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	440b      	add	r3, r1
 800a04a:	761a      	strb	r2, [r3, #24]
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	e000e100 	.word	0xe000e100
 800a05c:	e000ed00 	.word	0xe000ed00

0800a060 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a060:	b580      	push	{r7, lr}
 800a062:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a064:	4b05      	ldr	r3, [pc, #20]	; (800a07c <SysTick_Handler+0x1c>)
 800a066:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a068:	f002 f8d8 	bl	800c21c <xTaskGetSchedulerState>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d001      	beq.n	800a076 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a072:	f002 ffc1 	bl	800cff8 <xPortSysTickHandler>
  }
}
 800a076:	bf00      	nop
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	e000e010 	.word	0xe000e010

0800a080 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a080:	b580      	push	{r7, lr}
 800a082:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a084:	2100      	movs	r1, #0
 800a086:	f06f 0004 	mvn.w	r0, #4
 800a08a:	f7ff ffbf 	bl	800a00c <__NVIC_SetPriority>
#endif
}
 800a08e:	bf00      	nop
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a09a:	f3ef 8305 	mrs	r3, IPSR
 800a09e:	603b      	str	r3, [r7, #0]
  return(result);
 800a0a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a0a6:	f06f 0305 	mvn.w	r3, #5
 800a0aa:	607b      	str	r3, [r7, #4]
 800a0ac:	e00c      	b.n	800a0c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a0ae:	4b0a      	ldr	r3, [pc, #40]	; (800a0d8 <osKernelInitialize+0x44>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d105      	bne.n	800a0c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a0b6:	4b08      	ldr	r3, [pc, #32]	; (800a0d8 <osKernelInitialize+0x44>)
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	607b      	str	r3, [r7, #4]
 800a0c0:	e002      	b.n	800a0c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a0c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0c8:	687b      	ldr	r3, [r7, #4]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	370c      	adds	r7, #12
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	20002104 	.word	0x20002104

0800a0dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0e2:	f3ef 8305 	mrs	r3, IPSR
 800a0e6:	603b      	str	r3, [r7, #0]
  return(result);
 800a0e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d003      	beq.n	800a0f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a0ee:	f06f 0305 	mvn.w	r3, #5
 800a0f2:	607b      	str	r3, [r7, #4]
 800a0f4:	e010      	b.n	800a118 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a0f6:	4b0b      	ldr	r3, [pc, #44]	; (800a124 <osKernelStart+0x48>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d109      	bne.n	800a112 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a0fe:	f7ff ffbf 	bl	800a080 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a102:	4b08      	ldr	r3, [pc, #32]	; (800a124 <osKernelStart+0x48>)
 800a104:	2202      	movs	r2, #2
 800a106:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a108:	f001 fc1c 	bl	800b944 <vTaskStartScheduler>
      stat = osOK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	607b      	str	r3, [r7, #4]
 800a110:	e002      	b.n	800a118 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a112:	f04f 33ff 	mov.w	r3, #4294967295
 800a116:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a118:	687b      	ldr	r3, [r7, #4]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	20002104 	.word	0x20002104

0800a128 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08e      	sub	sp, #56	; 0x38
 800a12c:	af04      	add	r7, sp, #16
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a134:	2300      	movs	r3, #0
 800a136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a138:	f3ef 8305 	mrs	r3, IPSR
 800a13c:	617b      	str	r3, [r7, #20]
  return(result);
 800a13e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a140:	2b00      	cmp	r3, #0
 800a142:	d17e      	bne.n	800a242 <osThreadNew+0x11a>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d07b      	beq.n	800a242 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a14a:	2340      	movs	r3, #64	; 0x40
 800a14c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a14e:	2318      	movs	r3, #24
 800a150:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a152:	2300      	movs	r3, #0
 800a154:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a156:	f04f 33ff 	mov.w	r3, #4294967295
 800a15a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d045      	beq.n	800a1ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d002      	beq.n	800a170 <osThreadNew+0x48>
        name = attr->name;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d008      	beq.n	800a196 <osThreadNew+0x6e>
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	2b38      	cmp	r3, #56	; 0x38
 800a188:	d805      	bhi.n	800a196 <osThreadNew+0x6e>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f003 0301 	and.w	r3, r3, #1
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <osThreadNew+0x72>
        return (NULL);
 800a196:	2300      	movs	r3, #0
 800a198:	e054      	b.n	800a244 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d003      	beq.n	800a1aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	695b      	ldr	r3, [r3, #20]
 800a1a6:	089b      	lsrs	r3, r3, #2
 800a1a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00e      	beq.n	800a1d0 <osThreadNew+0xa8>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	2bbb      	cmp	r3, #187	; 0xbb
 800a1b8:	d90a      	bls.n	800a1d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d006      	beq.n	800a1d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	695b      	ldr	r3, [r3, #20]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <osThreadNew+0xa8>
        mem = 1;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	61bb      	str	r3, [r7, #24]
 800a1ce:	e010      	b.n	800a1f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10c      	bne.n	800a1f2 <osThreadNew+0xca>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d108      	bne.n	800a1f2 <osThreadNew+0xca>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d104      	bne.n	800a1f2 <osThreadNew+0xca>
          mem = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	61bb      	str	r3, [r7, #24]
 800a1ec:	e001      	b.n	800a1f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d110      	bne.n	800a21a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a200:	9202      	str	r2, [sp, #8]
 800a202:	9301      	str	r3, [sp, #4]
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	6a3a      	ldr	r2, [r7, #32]
 800a20c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f001 f92e 	bl	800b470 <xTaskCreateStatic>
 800a214:	4603      	mov	r3, r0
 800a216:	613b      	str	r3, [r7, #16]
 800a218:	e013      	b.n	800a242 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d110      	bne.n	800a242 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a220:	6a3b      	ldr	r3, [r7, #32]
 800a222:	b29a      	uxth	r2, r3
 800a224:	f107 0310 	add.w	r3, r7, #16
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f001 f979 	bl	800b52a <xTaskCreate>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d001      	beq.n	800a242 <osThreadNew+0x11a>
            hTask = NULL;
 800a23e:	2300      	movs	r3, #0
 800a240:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a242:	693b      	ldr	r3, [r7, #16]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3728      	adds	r7, #40	; 0x28
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a254:	f3ef 8305 	mrs	r3, IPSR
 800a258:	60bb      	str	r3, [r7, #8]
  return(result);
 800a25a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d003      	beq.n	800a268 <osDelay+0x1c>
    stat = osErrorISR;
 800a260:	f06f 0305 	mvn.w	r3, #5
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	e007      	b.n	800a278 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a268:	2300      	movs	r3, #0
 800a26a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d002      	beq.n	800a278 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 fb32 	bl	800b8dc <vTaskDelay>
    }
  }

  return (stat);
 800a278:	68fb      	ldr	r3, [r7, #12]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a282:	b580      	push	{r7, lr}
 800a284:	b088      	sub	sp, #32
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a28e:	f3ef 8305 	mrs	r3, IPSR
 800a292:	60bb      	str	r3, [r7, #8]
  return(result);
 800a294:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a296:	2b00      	cmp	r3, #0
 800a298:	d174      	bne.n	800a384 <osMutexNew+0x102>
    if (attr != NULL) {
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d003      	beq.n	800a2a8 <osMutexNew+0x26>
      type = attr->attr_bits;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	61bb      	str	r3, [r7, #24]
 800a2a6:	e001      	b.n	800a2ac <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	f003 0301 	and.w	r3, r3, #1
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d002      	beq.n	800a2bc <osMutexNew+0x3a>
      rmtx = 1U;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	617b      	str	r3, [r7, #20]
 800a2ba:	e001      	b.n	800a2c0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	f003 0308 	and.w	r3, r3, #8
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d15c      	bne.n	800a384 <osMutexNew+0x102>
      mem = -1;
 800a2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ce:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d015      	beq.n	800a302 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d006      	beq.n	800a2ec <osMutexNew+0x6a>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	2b4f      	cmp	r3, #79	; 0x4f
 800a2e4:	d902      	bls.n	800a2ec <osMutexNew+0x6a>
          mem = 1;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	613b      	str	r3, [r7, #16]
 800a2ea:	e00c      	b.n	800a306 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d108      	bne.n	800a306 <osMutexNew+0x84>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d104      	bne.n	800a306 <osMutexNew+0x84>
            mem = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	613b      	str	r3, [r7, #16]
 800a300:	e001      	b.n	800a306 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a302:	2300      	movs	r3, #0
 800a304:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d112      	bne.n	800a332 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d007      	beq.n	800a322 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	4619      	mov	r1, r3
 800a318:	2004      	movs	r0, #4
 800a31a:	f000 fb18 	bl	800a94e <xQueueCreateMutexStatic>
 800a31e:	61f8      	str	r0, [r7, #28]
 800a320:	e016      	b.n	800a350 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	4619      	mov	r1, r3
 800a328:	2001      	movs	r0, #1
 800a32a:	f000 fb10 	bl	800a94e <xQueueCreateMutexStatic>
 800a32e:	61f8      	str	r0, [r7, #28]
 800a330:	e00e      	b.n	800a350 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10b      	bne.n	800a350 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d004      	beq.n	800a348 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a33e:	2004      	movs	r0, #4
 800a340:	f000 faed 	bl	800a91e <xQueueCreateMutex>
 800a344:	61f8      	str	r0, [r7, #28]
 800a346:	e003      	b.n	800a350 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a348:	2001      	movs	r0, #1
 800a34a:	f000 fae8 	bl	800a91e <xQueueCreateMutex>
 800a34e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00c      	beq.n	800a370 <osMutexNew+0xee>
        if (attr != NULL) {
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d003      	beq.n	800a364 <osMutexNew+0xe2>
          name = attr->name;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	60fb      	str	r3, [r7, #12]
 800a362:	e001      	b.n	800a368 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a364:	2300      	movs	r3, #0
 800a366:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a368:	68f9      	ldr	r1, [r7, #12]
 800a36a:	69f8      	ldr	r0, [r7, #28]
 800a36c:	f001 f822 	bl	800b3b4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d006      	beq.n	800a384 <osMutexNew+0x102>
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d003      	beq.n	800a384 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	f043 0301 	orr.w	r3, r3, #1
 800a382:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a384:	69fb      	ldr	r3, [r7, #28]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3720      	adds	r7, #32
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a38e:	b580      	push	{r7, lr}
 800a390:	b086      	sub	sp, #24
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f023 0301 	bic.w	r3, r3, #1
 800a39e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3ac:	f3ef 8305 	mrs	r3, IPSR
 800a3b0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3b2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d003      	beq.n	800a3c0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a3b8:	f06f 0305 	mvn.w	r3, #5
 800a3bc:	617b      	str	r3, [r7, #20]
 800a3be:	e02c      	b.n	800a41a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d103      	bne.n	800a3ce <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a3c6:	f06f 0303 	mvn.w	r3, #3
 800a3ca:	617b      	str	r3, [r7, #20]
 800a3cc:	e025      	b.n	800a41a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d011      	beq.n	800a3f8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6938      	ldr	r0, [r7, #16]
 800a3d8:	f000 fb08 	bl	800a9ec <xQueueTakeMutexRecursive>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d01b      	beq.n	800a41a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d003      	beq.n	800a3f0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a3e8:	f06f 0301 	mvn.w	r3, #1
 800a3ec:	617b      	str	r3, [r7, #20]
 800a3ee:	e014      	b.n	800a41a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a3f0:	f06f 0302 	mvn.w	r3, #2
 800a3f4:	617b      	str	r3, [r7, #20]
 800a3f6:	e010      	b.n	800a41a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	6938      	ldr	r0, [r7, #16]
 800a3fc:	f000 fda6 	bl	800af4c <xQueueSemaphoreTake>
 800a400:	4603      	mov	r3, r0
 800a402:	2b01      	cmp	r3, #1
 800a404:	d009      	beq.n	800a41a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d003      	beq.n	800a414 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a40c:	f06f 0301 	mvn.w	r3, #1
 800a410:	617b      	str	r3, [r7, #20]
 800a412:	e002      	b.n	800a41a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a414:	f06f 0302 	mvn.w	r3, #2
 800a418:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a41a:	697b      	ldr	r3, [r7, #20]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f023 0301 	bic.w	r3, r3, #1
 800a432:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a440:	f3ef 8305 	mrs	r3, IPSR
 800a444:	60bb      	str	r3, [r7, #8]
  return(result);
 800a446:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d003      	beq.n	800a454 <osMutexRelease+0x30>
    stat = osErrorISR;
 800a44c:	f06f 0305 	mvn.w	r3, #5
 800a450:	617b      	str	r3, [r7, #20]
 800a452:	e01f      	b.n	800a494 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d103      	bne.n	800a462 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a45a:	f06f 0303 	mvn.w	r3, #3
 800a45e:	617b      	str	r3, [r7, #20]
 800a460:	e018      	b.n	800a494 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d009      	beq.n	800a47c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a468:	6938      	ldr	r0, [r7, #16]
 800a46a:	f000 fa8b 	bl	800a984 <xQueueGiveMutexRecursive>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b01      	cmp	r3, #1
 800a472:	d00f      	beq.n	800a494 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a474:	f06f 0302 	mvn.w	r3, #2
 800a478:	617b      	str	r3, [r7, #20]
 800a47a:	e00b      	b.n	800a494 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a47c:	2300      	movs	r3, #0
 800a47e:	2200      	movs	r2, #0
 800a480:	2100      	movs	r1, #0
 800a482:	6938      	ldr	r0, [r7, #16]
 800a484:	f000 fae8 	bl	800aa58 <xQueueGenericSend>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d002      	beq.n	800a494 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a48e:	f06f 0302 	mvn.w	r3, #2
 800a492:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a494:	697b      	ldr	r3, [r7, #20]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
	...

0800a4a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	4a07      	ldr	r2, [pc, #28]	; (800a4cc <vApplicationGetIdleTaskMemory+0x2c>)
 800a4b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	4a06      	ldr	r2, [pc, #24]	; (800a4d0 <vApplicationGetIdleTaskMemory+0x30>)
 800a4b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2240      	movs	r2, #64	; 0x40
 800a4bc:	601a      	str	r2, [r3, #0]
}
 800a4be:	bf00      	nop
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	20002108 	.word	0x20002108
 800a4d0:	200021c4 	.word	0x200021c4

0800a4d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4a07      	ldr	r2, [pc, #28]	; (800a500 <vApplicationGetTimerTaskMemory+0x2c>)
 800a4e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	4a06      	ldr	r2, [pc, #24]	; (800a504 <vApplicationGetTimerTaskMemory+0x30>)
 800a4ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2280      	movs	r2, #128	; 0x80
 800a4f0:	601a      	str	r2, [r3, #0]
}
 800a4f2:	bf00      	nop
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	200022c4 	.word	0x200022c4
 800a504:	20002380 	.word	0x20002380

0800a508 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f103 0208 	add.w	r2, r3, #8
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f04f 32ff 	mov.w	r2, #4294967295
 800a520:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f103 0208 	add.w	r2, r3, #8
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f103 0208 	add.w	r2, r3, #8
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a556:	bf00      	nop
 800a558:	370c      	adds	r7, #12
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a562:	b480      	push	{r7}
 800a564:	b085      	sub	sp, #20
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	689a      	ldr	r2, [r3, #8]
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	683a      	ldr	r2, [r7, #0]
 800a58c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	1c5a      	adds	r2, r3, #1
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	601a      	str	r2, [r3, #0]
}
 800a59e:	bf00      	nop
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c0:	d103      	bne.n	800a5ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	60fb      	str	r3, [r7, #12]
 800a5c8:	e00c      	b.n	800a5e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	3308      	adds	r3, #8
 800a5ce:	60fb      	str	r3, [r7, #12]
 800a5d0:	e002      	b.n	800a5d8 <vListInsert+0x2e>
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	60fb      	str	r3, [r7, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d2f6      	bcs.n	800a5d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	1c5a      	adds	r2, r3, #1
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	601a      	str	r2, [r3, #0]
}
 800a610:	bf00      	nop
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	6892      	ldr	r2, [r2, #8]
 800a632:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	6852      	ldr	r2, [r2, #4]
 800a63c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	429a      	cmp	r2, r3
 800a646:	d103      	bne.n	800a650 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	689a      	ldr	r2, [r3, #8]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	1e5a      	subs	r2, r3, #1
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10a      	bne.n	800a69a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a696:	bf00      	nop
 800a698:	e7fe      	b.n	800a698 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a69a:	f002 fc1b 	bl	800ced4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a6:	68f9      	ldr	r1, [r7, #12]
 800a6a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a6aa:	fb01 f303 	mul.w	r3, r1, r3
 800a6ae:	441a      	add	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	68f9      	ldr	r1, [r7, #12]
 800a6ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a6d0:	fb01 f303 	mul.w	r3, r1, r3
 800a6d4:	441a      	add	r2, r3
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	22ff      	movs	r2, #255	; 0xff
 800a6de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	22ff      	movs	r2, #255	; 0xff
 800a6e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d114      	bne.n	800a71a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d01a      	beq.n	800a72e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3310      	adds	r3, #16
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 fbbb 	bl	800be78 <xTaskRemoveFromEventList>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d012      	beq.n	800a72e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a708:	4b0c      	ldr	r3, [pc, #48]	; (800a73c <xQueueGenericReset+0xcc>)
 800a70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	e009      	b.n	800a72e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3310      	adds	r3, #16
 800a71e:	4618      	mov	r0, r3
 800a720:	f7ff fef2 	bl	800a508 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	3324      	adds	r3, #36	; 0x24
 800a728:	4618      	mov	r0, r3
 800a72a:	f7ff feed 	bl	800a508 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a72e:	f002 fc01 	bl	800cf34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a732:	2301      	movs	r3, #1
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	e000ed04 	.word	0xe000ed04

0800a740 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a740:	b580      	push	{r7, lr}
 800a742:	b08e      	sub	sp, #56	; 0x38
 800a744:	af02      	add	r7, sp, #8
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
 800a74c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10a      	bne.n	800a76a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a766:	bf00      	nop
 800a768:	e7fe      	b.n	800a768 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10a      	bne.n	800a786 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a782:	bf00      	nop
 800a784:	e7fe      	b.n	800a784 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <xQueueGenericCreateStatic+0x52>
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d001      	beq.n	800a796 <xQueueGenericCreateStatic+0x56>
 800a792:	2301      	movs	r3, #1
 800a794:	e000      	b.n	800a798 <xQueueGenericCreateStatic+0x58>
 800a796:	2300      	movs	r3, #0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10a      	bne.n	800a7b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	623b      	str	r3, [r7, #32]
}
 800a7ae:	bf00      	nop
 800a7b0:	e7fe      	b.n	800a7b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <xQueueGenericCreateStatic+0x7e>
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d101      	bne.n	800a7c2 <xQueueGenericCreateStatic+0x82>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e000      	b.n	800a7c4 <xQueueGenericCreateStatic+0x84>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10a      	bne.n	800a7de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	61fb      	str	r3, [r7, #28]
}
 800a7da:	bf00      	nop
 800a7dc:	e7fe      	b.n	800a7dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a7de:	2350      	movs	r3, #80	; 0x50
 800a7e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	2b50      	cmp	r3, #80	; 0x50
 800a7e6:	d00a      	beq.n	800a7fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	61bb      	str	r3, [r7, #24]
}
 800a7fa:	bf00      	nop
 800a7fc:	e7fe      	b.n	800a7fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a7fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00d      	beq.n	800a826 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80c:	2201      	movs	r2, #1
 800a80e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a812:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	4613      	mov	r3, r2
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	68b9      	ldr	r1, [r7, #8]
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 f83f 	bl	800a8a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a828:	4618      	mov	r0, r3
 800a82a:	3730      	adds	r7, #48	; 0x30
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a830:	b580      	push	{r7, lr}
 800a832:	b08a      	sub	sp, #40	; 0x28
 800a834:	af02      	add	r7, sp, #8
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	4613      	mov	r3, r2
 800a83c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10a      	bne.n	800a85a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a848:	f383 8811 	msr	BASEPRI, r3
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	613b      	str	r3, [r7, #16]
}
 800a856:	bf00      	nop
 800a858:	e7fe      	b.n	800a858 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	fb02 f303 	mul.w	r3, r2, r3
 800a862:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	3350      	adds	r3, #80	; 0x50
 800a868:	4618      	mov	r0, r3
 800a86a:	f002 fc55 	bl	800d118 <pvPortMalloc>
 800a86e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d011      	beq.n	800a89a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	3350      	adds	r3, #80	; 0x50
 800a87e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a888:	79fa      	ldrb	r2, [r7, #7]
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	4613      	mov	r3, r2
 800a890:	697a      	ldr	r2, [r7, #20]
 800a892:	68b9      	ldr	r1, [r7, #8]
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f000 f805 	bl	800a8a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a89a:	69bb      	ldr	r3, [r7, #24]
	}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3720      	adds	r7, #32
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d103      	bne.n	800a8c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	69ba      	ldr	r2, [r7, #24]
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	e002      	b.n	800a8c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	69b8      	ldr	r0, [r7, #24]
 800a8d6:	f7ff fecb 	bl	800a670 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	78fa      	ldrb	r2, [r7, #3]
 800a8de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a8e2:	bf00      	nop
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b082      	sub	sp, #8
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00e      	beq.n	800a916 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a90a:	2300      	movs	r3, #0
 800a90c:	2200      	movs	r2, #0
 800a90e:	2100      	movs	r1, #0
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f8a1 	bl	800aa58 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a916:	bf00      	nop
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b086      	sub	sp, #24
 800a922:	af00      	add	r7, sp, #0
 800a924:	4603      	mov	r3, r0
 800a926:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a928:	2301      	movs	r3, #1
 800a92a:	617b      	str	r3, [r7, #20]
 800a92c:	2300      	movs	r3, #0
 800a92e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a930:	79fb      	ldrb	r3, [r7, #7]
 800a932:	461a      	mov	r2, r3
 800a934:	6939      	ldr	r1, [r7, #16]
 800a936:	6978      	ldr	r0, [r7, #20]
 800a938:	f7ff ff7a 	bl	800a830 <xQueueGenericCreate>
 800a93c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f7ff ffd3 	bl	800a8ea <prvInitialiseMutex>

		return xNewQueue;
 800a944:	68fb      	ldr	r3, [r7, #12]
	}
 800a946:	4618      	mov	r0, r3
 800a948:	3718      	adds	r7, #24
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b088      	sub	sp, #32
 800a952:	af02      	add	r7, sp, #8
 800a954:	4603      	mov	r3, r0
 800a956:	6039      	str	r1, [r7, #0]
 800a958:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a95a:	2301      	movs	r3, #1
 800a95c:	617b      	str	r3, [r7, #20]
 800a95e:	2300      	movs	r3, #0
 800a960:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a962:	79fb      	ldrb	r3, [r7, #7]
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	2200      	movs	r2, #0
 800a96a:	6939      	ldr	r1, [r7, #16]
 800a96c:	6978      	ldr	r0, [r7, #20]
 800a96e:	f7ff fee7 	bl	800a740 <xQueueGenericCreateStatic>
 800a972:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f7ff ffb8 	bl	800a8ea <prvInitialiseMutex>

		return xNewQueue;
 800a97a:	68fb      	ldr	r3, [r7, #12]
	}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3718      	adds	r7, #24
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a984:	b590      	push	{r4, r7, lr}
 800a986:	b087      	sub	sp, #28
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10a      	bne.n	800a9ac <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	60fb      	str	r3, [r7, #12]
}
 800a9a8:	bf00      	nop
 800a9aa:	e7fe      	b.n	800a9aa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	689c      	ldr	r4, [r3, #8]
 800a9b0:	f001 fc24 	bl	800c1fc <xTaskGetCurrentTaskHandle>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	429c      	cmp	r4, r3
 800a9b8:	d111      	bne.n	800a9de <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	1e5a      	subs	r2, r3, #1
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d105      	bne.n	800a9d8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	6938      	ldr	r0, [r7, #16]
 800a9d4:	f000 f840 	bl	800aa58 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	617b      	str	r3, [r7, #20]
 800a9dc:	e001      	b.n	800a9e2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a9e2:	697b      	ldr	r3, [r7, #20]
	}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	371c      	adds	r7, #28
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd90      	pop	{r4, r7, pc}

0800a9ec <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a9ec:	b590      	push	{r4, r7, lr}
 800a9ee:	b087      	sub	sp, #28
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	60fb      	str	r3, [r7, #12]
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	689c      	ldr	r4, [r3, #8]
 800aa1a:	f001 fbef 	bl	800c1fc <xTaskGetCurrentTaskHandle>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	429c      	cmp	r4, r3
 800aa22:	d107      	bne.n	800aa34 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	1c5a      	adds	r2, r3, #1
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	617b      	str	r3, [r7, #20]
 800aa32:	e00c      	b.n	800aa4e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800aa34:	6839      	ldr	r1, [r7, #0]
 800aa36:	6938      	ldr	r0, [r7, #16]
 800aa38:	f000 fa88 	bl	800af4c <xQueueSemaphoreTake>
 800aa3c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d004      	beq.n	800aa4e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	1c5a      	adds	r2, r3, #1
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800aa4e:	697b      	ldr	r3, [r7, #20]
	}
 800aa50:	4618      	mov	r0, r3
 800aa52:	371c      	adds	r7, #28
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd90      	pop	{r4, r7, pc}

0800aa58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b08e      	sub	sp, #56	; 0x38
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa66:	2300      	movs	r3, #0
 800aa68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10a      	bne.n	800aa8a <xQueueGenericSend+0x32>
	__asm volatile
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa86:	bf00      	nop
 800aa88:	e7fe      	b.n	800aa88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d103      	bne.n	800aa98 <xQueueGenericSend+0x40>
 800aa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <xQueueGenericSend+0x44>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e000      	b.n	800aa9e <xQueueGenericSend+0x46>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10a      	bne.n	800aab8 <xQueueGenericSend+0x60>
	__asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aab4:	bf00      	nop
 800aab6:	e7fe      	b.n	800aab6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d103      	bne.n	800aac6 <xQueueGenericSend+0x6e>
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d101      	bne.n	800aaca <xQueueGenericSend+0x72>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e000      	b.n	800aacc <xQueueGenericSend+0x74>
 800aaca:	2300      	movs	r3, #0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10a      	bne.n	800aae6 <xQueueGenericSend+0x8e>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	623b      	str	r3, [r7, #32]
}
 800aae2:	bf00      	nop
 800aae4:	e7fe      	b.n	800aae4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aae6:	f001 fb99 	bl	800c21c <xTaskGetSchedulerState>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d102      	bne.n	800aaf6 <xQueueGenericSend+0x9e>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <xQueueGenericSend+0xa2>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e000      	b.n	800aafc <xQueueGenericSend+0xa4>
 800aafa:	2300      	movs	r3, #0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10a      	bne.n	800ab16 <xQueueGenericSend+0xbe>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	61fb      	str	r3, [r7, #28]
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab16:	f002 f9dd 	bl	800ced4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d302      	bcc.n	800ab2c <xQueueGenericSend+0xd4>
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d129      	bne.n	800ab80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab2c:	683a      	ldr	r2, [r7, #0]
 800ab2e:	68b9      	ldr	r1, [r7, #8]
 800ab30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab32:	f000 fb2f 	bl	800b194 <prvCopyDataToQueue>
 800ab36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d010      	beq.n	800ab62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab42:	3324      	adds	r3, #36	; 0x24
 800ab44:	4618      	mov	r0, r3
 800ab46:	f001 f997 	bl	800be78 <xTaskRemoveFromEventList>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d013      	beq.n	800ab78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab50:	4b3f      	ldr	r3, [pc, #252]	; (800ac50 <xQueueGenericSend+0x1f8>)
 800ab52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab56:	601a      	str	r2, [r3, #0]
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	e00a      	b.n	800ab78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d007      	beq.n	800ab78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab68:	4b39      	ldr	r3, [pc, #228]	; (800ac50 <xQueueGenericSend+0x1f8>)
 800ab6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab6e:	601a      	str	r2, [r3, #0]
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab78:	f002 f9dc 	bl	800cf34 <vPortExitCritical>
				return pdPASS;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e063      	b.n	800ac48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d103      	bne.n	800ab8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab86:	f002 f9d5 	bl	800cf34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	e05c      	b.n	800ac48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d106      	bne.n	800aba2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab94:	f107 0314 	add.w	r3, r7, #20
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f001 f9d1 	bl	800bf40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aba2:	f002 f9c7 	bl	800cf34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aba6:	f000 ff3d 	bl	800ba24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abaa:	f002 f993 	bl	800ced4 <vPortEnterCritical>
 800abae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abb4:	b25b      	sxtb	r3, r3
 800abb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abba:	d103      	bne.n	800abc4 <xQueueGenericSend+0x16c>
 800abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abca:	b25b      	sxtb	r3, r3
 800abcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd0:	d103      	bne.n	800abda <xQueueGenericSend+0x182>
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abda:	f002 f9ab 	bl	800cf34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abde:	1d3a      	adds	r2, r7, #4
 800abe0:	f107 0314 	add.w	r3, r7, #20
 800abe4:	4611      	mov	r1, r2
 800abe6:	4618      	mov	r0, r3
 800abe8:	f001 f9c0 	bl	800bf6c <xTaskCheckForTimeOut>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d124      	bne.n	800ac3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800abf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abf4:	f000 fbc6 	bl	800b384 <prvIsQueueFull>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d018      	beq.n	800ac30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	3310      	adds	r3, #16
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	4611      	mov	r1, r2
 800ac06:	4618      	mov	r0, r3
 800ac08:	f001 f8e6 	bl	800bdd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac0e:	f000 fb51 	bl	800b2b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac12:	f000 ff15 	bl	800ba40 <xTaskResumeAll>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f47f af7c 	bne.w	800ab16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ac1e:	4b0c      	ldr	r3, [pc, #48]	; (800ac50 <xQueueGenericSend+0x1f8>)
 800ac20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	e772      	b.n	800ab16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac32:	f000 fb3f 	bl	800b2b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac36:	f000 ff03 	bl	800ba40 <xTaskResumeAll>
 800ac3a:	e76c      	b.n	800ab16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac3e:	f000 fb39 	bl	800b2b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac42:	f000 fefd 	bl	800ba40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3738      	adds	r7, #56	; 0x38
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	e000ed04 	.word	0xe000ed04

0800ac54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b090      	sub	sp, #64	; 0x40
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
 800ac60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ac66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10a      	bne.n	800ac82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac7e:	bf00      	nop
 800ac80:	e7fe      	b.n	800ac80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d103      	bne.n	800ac90 <xQueueGenericSendFromISR+0x3c>
 800ac88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d101      	bne.n	800ac94 <xQueueGenericSendFromISR+0x40>
 800ac90:	2301      	movs	r3, #1
 800ac92:	e000      	b.n	800ac96 <xQueueGenericSendFromISR+0x42>
 800ac94:	2300      	movs	r3, #0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10a      	bne.n	800acb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ac9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800acac:	bf00      	nop
 800acae:	e7fe      	b.n	800acae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d103      	bne.n	800acbe <xQueueGenericSendFromISR+0x6a>
 800acb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d101      	bne.n	800acc2 <xQueueGenericSendFromISR+0x6e>
 800acbe:	2301      	movs	r3, #1
 800acc0:	e000      	b.n	800acc4 <xQueueGenericSendFromISR+0x70>
 800acc2:	2300      	movs	r3, #0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10a      	bne.n	800acde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800acc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	623b      	str	r3, [r7, #32]
}
 800acda:	bf00      	nop
 800acdc:	e7fe      	b.n	800acdc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acde:	f002 f9db 	bl	800d098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ace2:	f3ef 8211 	mrs	r2, BASEPRI
 800ace6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	61fa      	str	r2, [r7, #28]
 800acf8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800acfa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acfc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d302      	bcc.n	800ad10 <xQueueGenericSendFromISR+0xbc>
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d12f      	bne.n	800ad70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	68b9      	ldr	r1, [r7, #8]
 800ad24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad26:	f000 fa35 	bl	800b194 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ad2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad32:	d112      	bne.n	800ad5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d016      	beq.n	800ad6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3e:	3324      	adds	r3, #36	; 0x24
 800ad40:	4618      	mov	r0, r3
 800ad42:	f001 f899 	bl	800be78 <xTaskRemoveFromEventList>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00e      	beq.n	800ad6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00b      	beq.n	800ad6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2201      	movs	r2, #1
 800ad56:	601a      	str	r2, [r3, #0]
 800ad58:	e007      	b.n	800ad6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad5e:	3301      	adds	r3, #1
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	b25a      	sxtb	r2, r3
 800ad64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ad6e:	e001      	b.n	800ad74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad70:	2300      	movs	r3, #0
 800ad72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad76:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3740      	adds	r7, #64	; 0x40
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
	...

0800ad8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b08c      	sub	sp, #48	; 0x30
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10a      	bne.n	800adbc <xQueueReceive+0x30>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	623b      	str	r3, [r7, #32]
}
 800adb8:	bf00      	nop
 800adba:	e7fe      	b.n	800adba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d103      	bne.n	800adca <xQueueReceive+0x3e>
 800adc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d101      	bne.n	800adce <xQueueReceive+0x42>
 800adca:	2301      	movs	r3, #1
 800adcc:	e000      	b.n	800add0 <xQueueReceive+0x44>
 800adce:	2300      	movs	r3, #0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10a      	bne.n	800adea <xQueueReceive+0x5e>
	__asm volatile
 800add4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	61fb      	str	r3, [r7, #28]
}
 800ade6:	bf00      	nop
 800ade8:	e7fe      	b.n	800ade8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adea:	f001 fa17 	bl	800c21c <xTaskGetSchedulerState>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d102      	bne.n	800adfa <xQueueReceive+0x6e>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <xQueueReceive+0x72>
 800adfa:	2301      	movs	r3, #1
 800adfc:	e000      	b.n	800ae00 <xQueueReceive+0x74>
 800adfe:	2300      	movs	r3, #0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10a      	bne.n	800ae1a <xQueueReceive+0x8e>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	61bb      	str	r3, [r7, #24]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae1a:	f002 f85b 	bl	800ced4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d01f      	beq.n	800ae6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae2e:	f000 fa1b 	bl	800b268 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae34:	1e5a      	subs	r2, r3, #1
 800ae36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00f      	beq.n	800ae62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae44:	3310      	adds	r3, #16
 800ae46:	4618      	mov	r0, r3
 800ae48:	f001 f816 	bl	800be78 <xTaskRemoveFromEventList>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d007      	beq.n	800ae62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae52:	4b3d      	ldr	r3, [pc, #244]	; (800af48 <xQueueReceive+0x1bc>)
 800ae54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae58:	601a      	str	r2, [r3, #0]
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae62:	f002 f867 	bl	800cf34 <vPortExitCritical>
				return pdPASS;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e069      	b.n	800af3e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d103      	bne.n	800ae78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae70:	f002 f860 	bl	800cf34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae74:	2300      	movs	r3, #0
 800ae76:	e062      	b.n	800af3e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d106      	bne.n	800ae8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae7e:	f107 0310 	add.w	r3, r7, #16
 800ae82:	4618      	mov	r0, r3
 800ae84:	f001 f85c 	bl	800bf40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae8c:	f002 f852 	bl	800cf34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae90:	f000 fdc8 	bl	800ba24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae94:	f002 f81e 	bl	800ced4 <vPortEnterCritical>
 800ae98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae9e:	b25b      	sxtb	r3, r3
 800aea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea4:	d103      	bne.n	800aeae <xQueueReceive+0x122>
 800aea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeb4:	b25b      	sxtb	r3, r3
 800aeb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeba:	d103      	bne.n	800aec4 <xQueueReceive+0x138>
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aec4:	f002 f836 	bl	800cf34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aec8:	1d3a      	adds	r2, r7, #4
 800aeca:	f107 0310 	add.w	r3, r7, #16
 800aece:	4611      	mov	r1, r2
 800aed0:	4618      	mov	r0, r3
 800aed2:	f001 f84b 	bl	800bf6c <xTaskCheckForTimeOut>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d123      	bne.n	800af24 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aedc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aede:	f000 fa3b 	bl	800b358 <prvIsQueueEmpty>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d017      	beq.n	800af18 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	3324      	adds	r3, #36	; 0x24
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	4611      	mov	r1, r2
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 ff71 	bl	800bdd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aef8:	f000 f9dc 	bl	800b2b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aefc:	f000 fda0 	bl	800ba40 <xTaskResumeAll>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d189      	bne.n	800ae1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800af06:	4b10      	ldr	r3, [pc, #64]	; (800af48 <xQueueReceive+0x1bc>)
 800af08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	e780      	b.n	800ae1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800af18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af1a:	f000 f9cb 	bl	800b2b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af1e:	f000 fd8f 	bl	800ba40 <xTaskResumeAll>
 800af22:	e77a      	b.n	800ae1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800af24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af26:	f000 f9c5 	bl	800b2b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af2a:	f000 fd89 	bl	800ba40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af30:	f000 fa12 	bl	800b358 <prvIsQueueEmpty>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	f43f af6f 	beq.w	800ae1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3730      	adds	r7, #48	; 0x30
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	e000ed04 	.word	0xe000ed04

0800af4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b08e      	sub	sp, #56	; 0x38
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800af56:	2300      	movs	r3, #0
 800af58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800af5e:	2300      	movs	r3, #0
 800af60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af64:	2b00      	cmp	r3, #0
 800af66:	d10a      	bne.n	800af7e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800af68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	623b      	str	r3, [r7, #32]
}
 800af7a:	bf00      	nop
 800af7c:	e7fe      	b.n	800af7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00a      	beq.n	800af9c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	61fb      	str	r3, [r7, #28]
}
 800af98:	bf00      	nop
 800af9a:	e7fe      	b.n	800af9a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af9c:	f001 f93e 	bl	800c21c <xTaskGetSchedulerState>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d102      	bne.n	800afac <xQueueSemaphoreTake+0x60>
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d101      	bne.n	800afb0 <xQueueSemaphoreTake+0x64>
 800afac:	2301      	movs	r3, #1
 800afae:	e000      	b.n	800afb2 <xQueueSemaphoreTake+0x66>
 800afb0:	2300      	movs	r3, #0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10a      	bne.n	800afcc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	61bb      	str	r3, [r7, #24]
}
 800afc8:	bf00      	nop
 800afca:	e7fe      	b.n	800afca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afcc:	f001 ff82 	bl	800ced4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800afd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800afd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d024      	beq.n	800b026 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800afdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afde:	1e5a      	subs	r2, r3, #1
 800afe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d104      	bne.n	800aff6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800afec:	f001 fa8c 	bl	800c508 <pvTaskIncrementMutexHeldCount>
 800aff0:	4602      	mov	r2, r0
 800aff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00f      	beq.n	800b01e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800affe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b000:	3310      	adds	r3, #16
 800b002:	4618      	mov	r0, r3
 800b004:	f000 ff38 	bl	800be78 <xTaskRemoveFromEventList>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d007      	beq.n	800b01e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b00e:	4b54      	ldr	r3, [pc, #336]	; (800b160 <xQueueSemaphoreTake+0x214>)
 800b010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b014:	601a      	str	r2, [r3, #0]
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b01e:	f001 ff89 	bl	800cf34 <vPortExitCritical>
				return pdPASS;
 800b022:	2301      	movs	r3, #1
 800b024:	e097      	b.n	800b156 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d111      	bne.n	800b050 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00a      	beq.n	800b048 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	617b      	str	r3, [r7, #20]
}
 800b044:	bf00      	nop
 800b046:	e7fe      	b.n	800b046 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b048:	f001 ff74 	bl	800cf34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b04c:	2300      	movs	r3, #0
 800b04e:	e082      	b.n	800b156 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b052:	2b00      	cmp	r3, #0
 800b054:	d106      	bne.n	800b064 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b056:	f107 030c 	add.w	r3, r7, #12
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 ff70 	bl	800bf40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b060:	2301      	movs	r3, #1
 800b062:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b064:	f001 ff66 	bl	800cf34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b068:	f000 fcdc 	bl	800ba24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b06c:	f001 ff32 	bl	800ced4 <vPortEnterCritical>
 800b070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b076:	b25b      	sxtb	r3, r3
 800b078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b07c:	d103      	bne.n	800b086 <xQueueSemaphoreTake+0x13a>
 800b07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b080:	2200      	movs	r2, #0
 800b082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b08c:	b25b      	sxtb	r3, r3
 800b08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b092:	d103      	bne.n	800b09c <xQueueSemaphoreTake+0x150>
 800b094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b09c:	f001 ff4a 	bl	800cf34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0a0:	463a      	mov	r2, r7
 800b0a2:	f107 030c 	add.w	r3, r7, #12
 800b0a6:	4611      	mov	r1, r2
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f000 ff5f 	bl	800bf6c <xTaskCheckForTimeOut>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d132      	bne.n	800b11a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0b6:	f000 f94f 	bl	800b358 <prvIsQueueEmpty>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d026      	beq.n	800b10e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d109      	bne.n	800b0dc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b0c8:	f001 ff04 	bl	800ced4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f001 f8c1 	bl	800c258 <xTaskPriorityInherit>
 800b0d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b0d8:	f001 ff2c 	bl	800cf34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0de:	3324      	adds	r3, #36	; 0x24
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	4611      	mov	r1, r2
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f000 fe77 	bl	800bdd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b0ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0ec:	f000 f8e2 	bl	800b2b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b0f0:	f000 fca6 	bl	800ba40 <xTaskResumeAll>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f47f af68 	bne.w	800afcc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b0fc:	4b18      	ldr	r3, [pc, #96]	; (800b160 <xQueueSemaphoreTake+0x214>)
 800b0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	e75e      	b.n	800afcc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b10e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b110:	f000 f8d0 	bl	800b2b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b114:	f000 fc94 	bl	800ba40 <xTaskResumeAll>
 800b118:	e758      	b.n	800afcc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b11a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b11c:	f000 f8ca 	bl	800b2b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b120:	f000 fc8e 	bl	800ba40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b126:	f000 f917 	bl	800b358 <prvIsQueueEmpty>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f43f af4d 	beq.w	800afcc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00d      	beq.n	800b154 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b138:	f001 fecc 	bl	800ced4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b13c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b13e:	f000 f811 	bl	800b164 <prvGetDisinheritPriorityAfterTimeout>
 800b142:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b14a:	4618      	mov	r0, r3
 800b14c:	f001 f95a 	bl	800c404 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b150:	f001 fef0 	bl	800cf34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b154:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b156:	4618      	mov	r0, r3
 800b158:	3738      	adds	r7, #56	; 0x38
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	e000ed04 	.word	0xe000ed04

0800b164 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b170:	2b00      	cmp	r3, #0
 800b172:	d006      	beq.n	800b182 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b17e:	60fb      	str	r3, [r7, #12]
 800b180:	e001      	b.n	800b186 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b182:	2300      	movs	r3, #0
 800b184:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b186:	68fb      	ldr	r3, [r7, #12]
	}
 800b188:	4618      	mov	r0, r3
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10d      	bne.n	800b1ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d14d      	bne.n	800b256 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f001 f8b2 	bl	800c328 <xTaskPriorityDisinherit>
 800b1c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	609a      	str	r2, [r3, #8]
 800b1cc:	e043      	b.n	800b256 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d119      	bne.n	800b208 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6858      	ldr	r0, [r3, #4]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1dc:	461a      	mov	r2, r3
 800b1de:	68b9      	ldr	r1, [r7, #8]
 800b1e0:	f002 f9b0 	bl	800d544 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	685a      	ldr	r2, [r3, #4]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ec:	441a      	add	r2, r3
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	685a      	ldr	r2, [r3, #4]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d32b      	bcc.n	800b256 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	605a      	str	r2, [r3, #4]
 800b206:	e026      	b.n	800b256 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	68d8      	ldr	r0, [r3, #12]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b210:	461a      	mov	r2, r3
 800b212:	68b9      	ldr	r1, [r7, #8]
 800b214:	f002 f996 	bl	800d544 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	68da      	ldr	r2, [r3, #12]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b220:	425b      	negs	r3, r3
 800b222:	441a      	add	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	68da      	ldr	r2, [r3, #12]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	429a      	cmp	r2, r3
 800b232:	d207      	bcs.n	800b244 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	689a      	ldr	r2, [r3, #8]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23c:	425b      	negs	r3, r3
 800b23e:	441a      	add	r2, r3
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b02      	cmp	r3, #2
 800b248:	d105      	bne.n	800b256 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	3b01      	subs	r3, #1
 800b254:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	1c5a      	adds	r2, r3, #1
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b25e:	697b      	ldr	r3, [r7, #20]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b276:	2b00      	cmp	r3, #0
 800b278:	d018      	beq.n	800b2ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68da      	ldr	r2, [r3, #12]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b282:	441a      	add	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68da      	ldr	r2, [r3, #12]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	429a      	cmp	r2, r3
 800b292:	d303      	bcc.n	800b29c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	68d9      	ldr	r1, [r3, #12]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	6838      	ldr	r0, [r7, #0]
 800b2a8:	f002 f94c 	bl	800d544 <memcpy>
	}
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b2bc:	f001 fe0a 	bl	800ced4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2c8:	e011      	b.n	800b2ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d012      	beq.n	800b2f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3324      	adds	r3, #36	; 0x24
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f000 fdce 	bl	800be78 <xTaskRemoveFromEventList>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2e2:	f000 fea5 	bl	800c030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2e6:	7bfb      	ldrb	r3, [r7, #15]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	dce9      	bgt.n	800b2ca <prvUnlockQueue+0x16>
 800b2f6:	e000      	b.n	800b2fa <prvUnlockQueue+0x46>
					break;
 800b2f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	22ff      	movs	r2, #255	; 0xff
 800b2fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b302:	f001 fe17 	bl	800cf34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b306:	f001 fde5 	bl	800ced4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b310:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b312:	e011      	b.n	800b338 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d012      	beq.n	800b342 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3310      	adds	r3, #16
 800b320:	4618      	mov	r0, r3
 800b322:	f000 fda9 	bl	800be78 <xTaskRemoveFromEventList>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d001      	beq.n	800b330 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b32c:	f000 fe80 	bl	800c030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b330:	7bbb      	ldrb	r3, [r7, #14]
 800b332:	3b01      	subs	r3, #1
 800b334:	b2db      	uxtb	r3, r3
 800b336:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	dce9      	bgt.n	800b314 <prvUnlockQueue+0x60>
 800b340:	e000      	b.n	800b344 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b342:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	22ff      	movs	r2, #255	; 0xff
 800b348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b34c:	f001 fdf2 	bl	800cf34 <vPortExitCritical>
}
 800b350:	bf00      	nop
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b360:	f001 fdb8 	bl	800ced4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d102      	bne.n	800b372 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b36c:	2301      	movs	r3, #1
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	e001      	b.n	800b376 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b372:	2300      	movs	r3, #0
 800b374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b376:	f001 fddd 	bl	800cf34 <vPortExitCritical>

	return xReturn;
 800b37a:	68fb      	ldr	r3, [r7, #12]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b38c:	f001 fda2 	bl	800ced4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b398:	429a      	cmp	r2, r3
 800b39a:	d102      	bne.n	800b3a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b39c:	2301      	movs	r3, #1
 800b39e:	60fb      	str	r3, [r7, #12]
 800b3a0:	e001      	b.n	800b3a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3a6:	f001 fdc5 	bl	800cf34 <vPortExitCritical>

	return xReturn;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3be:	2300      	movs	r3, #0
 800b3c0:	60fb      	str	r3, [r7, #12]
 800b3c2:	e014      	b.n	800b3ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b3c4:	4a0f      	ldr	r2, [pc, #60]	; (800b404 <vQueueAddToRegistry+0x50>)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d10b      	bne.n	800b3e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b3d0:	490c      	ldr	r1, [pc, #48]	; (800b404 <vQueueAddToRegistry+0x50>)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b3da:	4a0a      	ldr	r2, [pc, #40]	; (800b404 <vQueueAddToRegistry+0x50>)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	4413      	add	r3, r2
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3e6:	e006      	b.n	800b3f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	60fb      	str	r3, [r7, #12]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b07      	cmp	r3, #7
 800b3f2:	d9e7      	bls.n	800b3c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3f4:	bf00      	nop
 800b3f6:	bf00      	nop
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	20002580 	.word	0x20002580

0800b408 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b418:	f001 fd5c 	bl	800ced4 <vPortEnterCritical>
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b422:	b25b      	sxtb	r3, r3
 800b424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b428:	d103      	bne.n	800b432 <vQueueWaitForMessageRestricted+0x2a>
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	2200      	movs	r2, #0
 800b42e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b438:	b25b      	sxtb	r3, r3
 800b43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43e:	d103      	bne.n	800b448 <vQueueWaitForMessageRestricted+0x40>
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b448:	f001 fd74 	bl	800cf34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b450:	2b00      	cmp	r3, #0
 800b452:	d106      	bne.n	800b462 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	3324      	adds	r3, #36	; 0x24
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	68b9      	ldr	r1, [r7, #8]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f000 fcdf 	bl	800be20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b462:	6978      	ldr	r0, [r7, #20]
 800b464:	f7ff ff26 	bl	800b2b4 <prvUnlockQueue>
	}
 800b468:	bf00      	nop
 800b46a:	3718      	adds	r7, #24
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b470:	b580      	push	{r7, lr}
 800b472:	b08e      	sub	sp, #56	; 0x38
 800b474:	af04      	add	r7, sp, #16
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
 800b47c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10a      	bne.n	800b49a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	623b      	str	r3, [r7, #32]
}
 800b496:	bf00      	nop
 800b498:	e7fe      	b.n	800b498 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10a      	bne.n	800b4b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	61fb      	str	r3, [r7, #28]
}
 800b4b2:	bf00      	nop
 800b4b4:	e7fe      	b.n	800b4b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b4b6:	23bc      	movs	r3, #188	; 0xbc
 800b4b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	2bbc      	cmp	r3, #188	; 0xbc
 800b4be:	d00a      	beq.n	800b4d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	61bb      	str	r3, [r7, #24]
}
 800b4d2:	bf00      	nop
 800b4d4:	e7fe      	b.n	800b4d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d01e      	beq.n	800b51c <xTaskCreateStatic+0xac>
 800b4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d01b      	beq.n	800b51c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f0:	2202      	movs	r2, #2
 800b4f2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	9303      	str	r3, [sp, #12]
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fc:	9302      	str	r3, [sp, #8]
 800b4fe:	f107 0314 	add.w	r3, r7, #20
 800b502:	9301      	str	r3, [sp, #4]
 800b504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	68b9      	ldr	r1, [r7, #8]
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f000 f850 	bl	800b5b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b516:	f000 f8f3 	bl	800b700 <prvAddNewTaskToReadyList>
 800b51a:	e001      	b.n	800b520 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b51c:	2300      	movs	r3, #0
 800b51e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b520:	697b      	ldr	r3, [r7, #20]
	}
 800b522:	4618      	mov	r0, r3
 800b524:	3728      	adds	r7, #40	; 0x28
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b08c      	sub	sp, #48	; 0x30
 800b52e:	af04      	add	r7, sp, #16
 800b530:	60f8      	str	r0, [r7, #12]
 800b532:	60b9      	str	r1, [r7, #8]
 800b534:	603b      	str	r3, [r7, #0]
 800b536:	4613      	mov	r3, r2
 800b538:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b53a:	88fb      	ldrh	r3, [r7, #6]
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4618      	mov	r0, r3
 800b540:	f001 fdea 	bl	800d118 <pvPortMalloc>
 800b544:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00e      	beq.n	800b56a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b54c:	20bc      	movs	r0, #188	; 0xbc
 800b54e:	f001 fde3 	bl	800d118 <pvPortMalloc>
 800b552:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d003      	beq.n	800b562 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	697a      	ldr	r2, [r7, #20]
 800b55e:	631a      	str	r2, [r3, #48]	; 0x30
 800b560:	e005      	b.n	800b56e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b562:	6978      	ldr	r0, [r7, #20]
 800b564:	f001 fea4 	bl	800d2b0 <vPortFree>
 800b568:	e001      	b.n	800b56e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b56a:	2300      	movs	r3, #0
 800b56c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d017      	beq.n	800b5a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	2200      	movs	r2, #0
 800b578:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b57c:	88fa      	ldrh	r2, [r7, #6]
 800b57e:	2300      	movs	r3, #0
 800b580:	9303      	str	r3, [sp, #12]
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	9302      	str	r3, [sp, #8]
 800b586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b588:	9301      	str	r3, [sp, #4]
 800b58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	68b9      	ldr	r1, [r7, #8]
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f000 f80e 	bl	800b5b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b598:	69f8      	ldr	r0, [r7, #28]
 800b59a:	f000 f8b1 	bl	800b700 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	61bb      	str	r3, [r7, #24]
 800b5a2:	e002      	b.n	800b5aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b5aa:	69bb      	ldr	r3, [r7, #24]
	}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3720      	adds	r7, #32
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b088      	sub	sp, #32
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
 800b5c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	21a5      	movs	r1, #165	; 0xa5
 800b5ce:	f001 ffc7 	bl	800d560 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	f023 0307 	bic.w	r3, r3, #7
 800b5ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	f003 0307 	and.w	r3, r3, #7
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00a      	beq.n	800b60c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fa:	f383 8811 	msr	BASEPRI, r3
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	f3bf 8f4f 	dsb	sy
 800b606:	617b      	str	r3, [r7, #20]
}
 800b608:	bf00      	nop
 800b60a:	e7fe      	b.n	800b60a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d01f      	beq.n	800b652 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b612:	2300      	movs	r3, #0
 800b614:	61fb      	str	r3, [r7, #28]
 800b616:	e012      	b.n	800b63e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	4413      	add	r3, r2
 800b61e:	7819      	ldrb	r1, [r3, #0]
 800b620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	4413      	add	r3, r2
 800b626:	3334      	adds	r3, #52	; 0x34
 800b628:	460a      	mov	r2, r1
 800b62a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	4413      	add	r3, r2
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d006      	beq.n	800b646 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	3301      	adds	r3, #1
 800b63c:	61fb      	str	r3, [r7, #28]
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	2b0f      	cmp	r3, #15
 800b642:	d9e9      	bls.n	800b618 <prvInitialiseNewTask+0x64>
 800b644:	e000      	b.n	800b648 <prvInitialiseNewTask+0x94>
			{
				break;
 800b646:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64a:	2200      	movs	r2, #0
 800b64c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b650:	e003      	b.n	800b65a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	2200      	movs	r2, #0
 800b656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65c:	2b37      	cmp	r3, #55	; 0x37
 800b65e:	d901      	bls.n	800b664 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b660:	2337      	movs	r3, #55	; 0x37
 800b662:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b668:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b66e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b672:	2200      	movs	r2, #0
 800b674:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	3304      	adds	r3, #4
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fe ff64 	bl	800a548 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b682:	3318      	adds	r3, #24
 800b684:	4618      	mov	r0, r3
 800b686:	f7fe ff5f 	bl	800a548 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b68e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b692:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b69e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	3354      	adds	r3, #84	; 0x54
 800b6b4:	2260      	movs	r2, #96	; 0x60
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f001 ff51 	bl	800d560 <memset>
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	4a0c      	ldr	r2, [pc, #48]	; (800b6f4 <prvInitialiseNewTask+0x140>)
 800b6c2:	659a      	str	r2, [r3, #88]	; 0x58
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c6:	4a0c      	ldr	r2, [pc, #48]	; (800b6f8 <prvInitialiseNewTask+0x144>)
 800b6c8:	65da      	str	r2, [r3, #92]	; 0x5c
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6cc:	4a0b      	ldr	r2, [pc, #44]	; (800b6fc <prvInitialiseNewTask+0x148>)
 800b6ce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6d0:	683a      	ldr	r2, [r7, #0]
 800b6d2:	68f9      	ldr	r1, [r7, #12]
 800b6d4:	69b8      	ldr	r0, [r7, #24]
 800b6d6:	f001 facd 	bl	800cc74 <pxPortInitialiseStack>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6ec:	bf00      	nop
 800b6ee:	3720      	adds	r7, #32
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	08010454 	.word	0x08010454
 800b6f8:	08010474 	.word	0x08010474
 800b6fc:	08010434 	.word	0x08010434

0800b700 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b708:	f001 fbe4 	bl	800ced4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b70c:	4b2d      	ldr	r3, [pc, #180]	; (800b7c4 <prvAddNewTaskToReadyList+0xc4>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3301      	adds	r3, #1
 800b712:	4a2c      	ldr	r2, [pc, #176]	; (800b7c4 <prvAddNewTaskToReadyList+0xc4>)
 800b714:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b716:	4b2c      	ldr	r3, [pc, #176]	; (800b7c8 <prvAddNewTaskToReadyList+0xc8>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d109      	bne.n	800b732 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b71e:	4a2a      	ldr	r2, [pc, #168]	; (800b7c8 <prvAddNewTaskToReadyList+0xc8>)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b724:	4b27      	ldr	r3, [pc, #156]	; (800b7c4 <prvAddNewTaskToReadyList+0xc4>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d110      	bne.n	800b74e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b72c:	f000 fca4 	bl	800c078 <prvInitialiseTaskLists>
 800b730:	e00d      	b.n	800b74e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b732:	4b26      	ldr	r3, [pc, #152]	; (800b7cc <prvAddNewTaskToReadyList+0xcc>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d109      	bne.n	800b74e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b73a:	4b23      	ldr	r3, [pc, #140]	; (800b7c8 <prvAddNewTaskToReadyList+0xc8>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b744:	429a      	cmp	r2, r3
 800b746:	d802      	bhi.n	800b74e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b748:	4a1f      	ldr	r2, [pc, #124]	; (800b7c8 <prvAddNewTaskToReadyList+0xc8>)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b74e:	4b20      	ldr	r3, [pc, #128]	; (800b7d0 <prvAddNewTaskToReadyList+0xd0>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3301      	adds	r3, #1
 800b754:	4a1e      	ldr	r2, [pc, #120]	; (800b7d0 <prvAddNewTaskToReadyList+0xd0>)
 800b756:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b758:	4b1d      	ldr	r3, [pc, #116]	; (800b7d0 <prvAddNewTaskToReadyList+0xd0>)
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b764:	4b1b      	ldr	r3, [pc, #108]	; (800b7d4 <prvAddNewTaskToReadyList+0xd4>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d903      	bls.n	800b774 <prvAddNewTaskToReadyList+0x74>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b770:	4a18      	ldr	r2, [pc, #96]	; (800b7d4 <prvAddNewTaskToReadyList+0xd4>)
 800b772:	6013      	str	r3, [r2, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b778:	4613      	mov	r3, r2
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	4413      	add	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4a15      	ldr	r2, [pc, #84]	; (800b7d8 <prvAddNewTaskToReadyList+0xd8>)
 800b782:	441a      	add	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	3304      	adds	r3, #4
 800b788:	4619      	mov	r1, r3
 800b78a:	4610      	mov	r0, r2
 800b78c:	f7fe fee9 	bl	800a562 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b790:	f001 fbd0 	bl	800cf34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b794:	4b0d      	ldr	r3, [pc, #52]	; (800b7cc <prvAddNewTaskToReadyList+0xcc>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00e      	beq.n	800b7ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b79c:	4b0a      	ldr	r3, [pc, #40]	; (800b7c8 <prvAddNewTaskToReadyList+0xc8>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d207      	bcs.n	800b7ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7aa:	4b0c      	ldr	r3, [pc, #48]	; (800b7dc <prvAddNewTaskToReadyList+0xdc>)
 800b7ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7b0:	601a      	str	r2, [r3, #0]
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7ba:	bf00      	nop
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	20002a94 	.word	0x20002a94
 800b7c8:	200025c0 	.word	0x200025c0
 800b7cc:	20002aa0 	.word	0x20002aa0
 800b7d0:	20002ab0 	.word	0x20002ab0
 800b7d4:	20002a9c 	.word	0x20002a9c
 800b7d8:	200025c4 	.word	0x200025c4
 800b7dc:	e000ed04 	.word	0xe000ed04

0800b7e0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b08a      	sub	sp, #40	; 0x28
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10a      	bne.n	800b80a <vTaskDelayUntil+0x2a>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	617b      	str	r3, [r7, #20]
}
 800b806:	bf00      	nop
 800b808:	e7fe      	b.n	800b808 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10a      	bne.n	800b826 <vTaskDelayUntil+0x46>
	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	613b      	str	r3, [r7, #16]
}
 800b822:	bf00      	nop
 800b824:	e7fe      	b.n	800b824 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b826:	4b2a      	ldr	r3, [pc, #168]	; (800b8d0 <vTaskDelayUntil+0xf0>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00a      	beq.n	800b844 <vTaskDelayUntil+0x64>
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	60fb      	str	r3, [r7, #12]
}
 800b840:	bf00      	nop
 800b842:	e7fe      	b.n	800b842 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b844:	f000 f8ee 	bl	800ba24 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b848:	4b22      	ldr	r3, [pc, #136]	; (800b8d4 <vTaskDelayUntil+0xf4>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	4413      	add	r3, r2
 800b856:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6a3a      	ldr	r2, [r7, #32]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d20b      	bcs.n	800b87a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	69fa      	ldr	r2, [r7, #28]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d211      	bcs.n	800b890 <vTaskDelayUntil+0xb0>
 800b86c:	69fa      	ldr	r2, [r7, #28]
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	429a      	cmp	r2, r3
 800b872:	d90d      	bls.n	800b890 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b874:	2301      	movs	r3, #1
 800b876:	627b      	str	r3, [r7, #36]	; 0x24
 800b878:	e00a      	b.n	800b890 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	69fa      	ldr	r2, [r7, #28]
 800b880:	429a      	cmp	r2, r3
 800b882:	d303      	bcc.n	800b88c <vTaskDelayUntil+0xac>
 800b884:	69fa      	ldr	r2, [r7, #28]
 800b886:	6a3b      	ldr	r3, [r7, #32]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d901      	bls.n	800b890 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b88c:	2301      	movs	r3, #1
 800b88e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	69fa      	ldr	r2, [r7, #28]
 800b894:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d006      	beq.n	800b8aa <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b89c:	69fa      	ldr	r2, [r7, #28]
 800b89e:	6a3b      	ldr	r3, [r7, #32]
 800b8a0:	1ad3      	subs	r3, r2, r3
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f000 fe43 	bl	800c530 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b8aa:	f000 f8c9 	bl	800ba40 <xTaskResumeAll>
 800b8ae:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d107      	bne.n	800b8c6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b8b6:	4b08      	ldr	r3, [pc, #32]	; (800b8d8 <vTaskDelayUntil+0xf8>)
 800b8b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8bc:	601a      	str	r2, [r3, #0]
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8c6:	bf00      	nop
 800b8c8:	3728      	adds	r7, #40	; 0x28
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	20002abc 	.word	0x20002abc
 800b8d4:	20002a98 	.word	0x20002a98
 800b8d8:	e000ed04 	.word	0xe000ed04

0800b8dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d017      	beq.n	800b91e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8ee:	4b13      	ldr	r3, [pc, #76]	; (800b93c <vTaskDelay+0x60>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00a      	beq.n	800b90c <vTaskDelay+0x30>
	__asm volatile
 800b8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fa:	f383 8811 	msr	BASEPRI, r3
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	f3bf 8f4f 	dsb	sy
 800b906:	60bb      	str	r3, [r7, #8]
}
 800b908:	bf00      	nop
 800b90a:	e7fe      	b.n	800b90a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b90c:	f000 f88a 	bl	800ba24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b910:	2100      	movs	r1, #0
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fe0c 	bl	800c530 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b918:	f000 f892 	bl	800ba40 <xTaskResumeAll>
 800b91c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d107      	bne.n	800b934 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b924:	4b06      	ldr	r3, [pc, #24]	; (800b940 <vTaskDelay+0x64>)
 800b926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b92a:	601a      	str	r2, [r3, #0]
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b934:	bf00      	nop
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	20002abc 	.word	0x20002abc
 800b940:	e000ed04 	.word	0xe000ed04

0800b944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08a      	sub	sp, #40	; 0x28
 800b948:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b94a:	2300      	movs	r3, #0
 800b94c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b94e:	2300      	movs	r3, #0
 800b950:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b952:	463a      	mov	r2, r7
 800b954:	1d39      	adds	r1, r7, #4
 800b956:	f107 0308 	add.w	r3, r7, #8
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fe fda0 	bl	800a4a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b960:	6839      	ldr	r1, [r7, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	9202      	str	r2, [sp, #8]
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	2300      	movs	r3, #0
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	2300      	movs	r3, #0
 800b970:	460a      	mov	r2, r1
 800b972:	4924      	ldr	r1, [pc, #144]	; (800ba04 <vTaskStartScheduler+0xc0>)
 800b974:	4824      	ldr	r0, [pc, #144]	; (800ba08 <vTaskStartScheduler+0xc4>)
 800b976:	f7ff fd7b 	bl	800b470 <xTaskCreateStatic>
 800b97a:	4603      	mov	r3, r0
 800b97c:	4a23      	ldr	r2, [pc, #140]	; (800ba0c <vTaskStartScheduler+0xc8>)
 800b97e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b980:	4b22      	ldr	r3, [pc, #136]	; (800ba0c <vTaskStartScheduler+0xc8>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b988:	2301      	movs	r3, #1
 800b98a:	617b      	str	r3, [r7, #20]
 800b98c:	e001      	b.n	800b992 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b98e:	2300      	movs	r3, #0
 800b990:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d102      	bne.n	800b99e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b998:	f000 fe1e 	bl	800c5d8 <xTimerCreateTimerTask>
 800b99c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d11b      	bne.n	800b9dc <vTaskStartScheduler+0x98>
	__asm volatile
 800b9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a8:	f383 8811 	msr	BASEPRI, r3
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	613b      	str	r3, [r7, #16]
}
 800b9b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b9b8:	4b15      	ldr	r3, [pc, #84]	; (800ba10 <vTaskStartScheduler+0xcc>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	3354      	adds	r3, #84	; 0x54
 800b9be:	4a15      	ldr	r2, [pc, #84]	; (800ba14 <vTaskStartScheduler+0xd0>)
 800b9c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b9c2:	4b15      	ldr	r3, [pc, #84]	; (800ba18 <vTaskStartScheduler+0xd4>)
 800b9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9ca:	4b14      	ldr	r3, [pc, #80]	; (800ba1c <vTaskStartScheduler+0xd8>)
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b9d0:	4b13      	ldr	r3, [pc, #76]	; (800ba20 <vTaskStartScheduler+0xdc>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b9d6:	f001 f9db 	bl	800cd90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b9da:	e00e      	b.n	800b9fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e2:	d10a      	bne.n	800b9fa <vTaskStartScheduler+0xb6>
	__asm volatile
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	60fb      	str	r3, [r7, #12]
}
 800b9f6:	bf00      	nop
 800b9f8:	e7fe      	b.n	800b9f8 <vTaskStartScheduler+0xb4>
}
 800b9fa:	bf00      	nop
 800b9fc:	3718      	adds	r7, #24
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	0800fdf4 	.word	0x0800fdf4
 800ba08:	0800c049 	.word	0x0800c049
 800ba0c:	20002ab8 	.word	0x20002ab8
 800ba10:	200025c0 	.word	0x200025c0
 800ba14:	20000044 	.word	0x20000044
 800ba18:	20002ab4 	.word	0x20002ab4
 800ba1c:	20002aa0 	.word	0x20002aa0
 800ba20:	20002a98 	.word	0x20002a98

0800ba24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba24:	b480      	push	{r7}
 800ba26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ba28:	4b04      	ldr	r3, [pc, #16]	; (800ba3c <vTaskSuspendAll+0x18>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	4a03      	ldr	r2, [pc, #12]	; (800ba3c <vTaskSuspendAll+0x18>)
 800ba30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ba32:	bf00      	nop
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr
 800ba3c:	20002abc 	.word	0x20002abc

0800ba40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba46:	2300      	movs	r3, #0
 800ba48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba4e:	4b42      	ldr	r3, [pc, #264]	; (800bb58 <xTaskResumeAll+0x118>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10a      	bne.n	800ba6c <xTaskResumeAll+0x2c>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	603b      	str	r3, [r7, #0]
}
 800ba68:	bf00      	nop
 800ba6a:	e7fe      	b.n	800ba6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba6c:	f001 fa32 	bl	800ced4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba70:	4b39      	ldr	r3, [pc, #228]	; (800bb58 <xTaskResumeAll+0x118>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	3b01      	subs	r3, #1
 800ba76:	4a38      	ldr	r2, [pc, #224]	; (800bb58 <xTaskResumeAll+0x118>)
 800ba78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba7a:	4b37      	ldr	r3, [pc, #220]	; (800bb58 <xTaskResumeAll+0x118>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d162      	bne.n	800bb48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba82:	4b36      	ldr	r3, [pc, #216]	; (800bb5c <xTaskResumeAll+0x11c>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d05e      	beq.n	800bb48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba8a:	e02f      	b.n	800baec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba8c:	4b34      	ldr	r3, [pc, #208]	; (800bb60 <xTaskResumeAll+0x120>)
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	3318      	adds	r3, #24
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fe fdbf 	bl	800a61c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	3304      	adds	r3, #4
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fe fdba 	bl	800a61c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baac:	4b2d      	ldr	r3, [pc, #180]	; (800bb64 <xTaskResumeAll+0x124>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d903      	bls.n	800babc <xTaskResumeAll+0x7c>
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab8:	4a2a      	ldr	r2, [pc, #168]	; (800bb64 <xTaskResumeAll+0x124>)
 800baba:	6013      	str	r3, [r2, #0]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac0:	4613      	mov	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4413      	add	r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4a27      	ldr	r2, [pc, #156]	; (800bb68 <xTaskResumeAll+0x128>)
 800baca:	441a      	add	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	3304      	adds	r3, #4
 800bad0:	4619      	mov	r1, r3
 800bad2:	4610      	mov	r0, r2
 800bad4:	f7fe fd45 	bl	800a562 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800badc:	4b23      	ldr	r3, [pc, #140]	; (800bb6c <xTaskResumeAll+0x12c>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d302      	bcc.n	800baec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bae6:	4b22      	ldr	r3, [pc, #136]	; (800bb70 <xTaskResumeAll+0x130>)
 800bae8:	2201      	movs	r2, #1
 800baea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800baec:	4b1c      	ldr	r3, [pc, #112]	; (800bb60 <xTaskResumeAll+0x120>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d1cb      	bne.n	800ba8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bafa:	f000 fb5f 	bl	800c1bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bafe:	4b1d      	ldr	r3, [pc, #116]	; (800bb74 <xTaskResumeAll+0x134>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d010      	beq.n	800bb2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb0a:	f000 f847 	bl	800bb9c <xTaskIncrementTick>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bb14:	4b16      	ldr	r3, [pc, #88]	; (800bb70 <xTaskResumeAll+0x130>)
 800bb16:	2201      	movs	r2, #1
 800bb18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1f1      	bne.n	800bb0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bb26:	4b13      	ldr	r3, [pc, #76]	; (800bb74 <xTaskResumeAll+0x134>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb2c:	4b10      	ldr	r3, [pc, #64]	; (800bb70 <xTaskResumeAll+0x130>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d009      	beq.n	800bb48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb34:	2301      	movs	r3, #1
 800bb36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb38:	4b0f      	ldr	r3, [pc, #60]	; (800bb78 <xTaskResumeAll+0x138>)
 800bb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb3e:	601a      	str	r2, [r3, #0]
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb48:	f001 f9f4 	bl	800cf34 <vPortExitCritical>

	return xAlreadyYielded;
 800bb4c:	68bb      	ldr	r3, [r7, #8]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20002abc 	.word	0x20002abc
 800bb5c:	20002a94 	.word	0x20002a94
 800bb60:	20002a54 	.word	0x20002a54
 800bb64:	20002a9c 	.word	0x20002a9c
 800bb68:	200025c4 	.word	0x200025c4
 800bb6c:	200025c0 	.word	0x200025c0
 800bb70:	20002aa8 	.word	0x20002aa8
 800bb74:	20002aa4 	.word	0x20002aa4
 800bb78:	e000ed04 	.word	0xe000ed04

0800bb7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb82:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <xTaskGetTickCount+0x1c>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb88:	687b      	ldr	r3, [r7, #4]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	20002a98 	.word	0x20002a98

0800bb9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bba2:	2300      	movs	r3, #0
 800bba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bba6:	4b4f      	ldr	r3, [pc, #316]	; (800bce4 <xTaskIncrementTick+0x148>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f040 808f 	bne.w	800bcce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bbb0:	4b4d      	ldr	r3, [pc, #308]	; (800bce8 <xTaskIncrementTick+0x14c>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bbb8:	4a4b      	ldr	r2, [pc, #300]	; (800bce8 <xTaskIncrementTick+0x14c>)
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d120      	bne.n	800bc06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbc4:	4b49      	ldr	r3, [pc, #292]	; (800bcec <xTaskIncrementTick+0x150>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00a      	beq.n	800bbe4 <xTaskIncrementTick+0x48>
	__asm volatile
 800bbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	603b      	str	r3, [r7, #0]
}
 800bbe0:	bf00      	nop
 800bbe2:	e7fe      	b.n	800bbe2 <xTaskIncrementTick+0x46>
 800bbe4:	4b41      	ldr	r3, [pc, #260]	; (800bcec <xTaskIncrementTick+0x150>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	60fb      	str	r3, [r7, #12]
 800bbea:	4b41      	ldr	r3, [pc, #260]	; (800bcf0 <xTaskIncrementTick+0x154>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a3f      	ldr	r2, [pc, #252]	; (800bcec <xTaskIncrementTick+0x150>)
 800bbf0:	6013      	str	r3, [r2, #0]
 800bbf2:	4a3f      	ldr	r2, [pc, #252]	; (800bcf0 <xTaskIncrementTick+0x154>)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6013      	str	r3, [r2, #0]
 800bbf8:	4b3e      	ldr	r3, [pc, #248]	; (800bcf4 <xTaskIncrementTick+0x158>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	4a3d      	ldr	r2, [pc, #244]	; (800bcf4 <xTaskIncrementTick+0x158>)
 800bc00:	6013      	str	r3, [r2, #0]
 800bc02:	f000 fadb 	bl	800c1bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc06:	4b3c      	ldr	r3, [pc, #240]	; (800bcf8 <xTaskIncrementTick+0x15c>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d349      	bcc.n	800bca4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc10:	4b36      	ldr	r3, [pc, #216]	; (800bcec <xTaskIncrementTick+0x150>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d104      	bne.n	800bc24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc1a:	4b37      	ldr	r3, [pc, #220]	; (800bcf8 <xTaskIncrementTick+0x15c>)
 800bc1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc20:	601a      	str	r2, [r3, #0]
					break;
 800bc22:	e03f      	b.n	800bca4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc24:	4b31      	ldr	r3, [pc, #196]	; (800bcec <xTaskIncrementTick+0x150>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc34:	693a      	ldr	r2, [r7, #16]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d203      	bcs.n	800bc44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc3c:	4a2e      	ldr	r2, [pc, #184]	; (800bcf8 <xTaskIncrementTick+0x15c>)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc42:	e02f      	b.n	800bca4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	3304      	adds	r3, #4
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fe fce7 	bl	800a61c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d004      	beq.n	800bc60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	3318      	adds	r3, #24
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe fcde 	bl	800a61c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc64:	4b25      	ldr	r3, [pc, #148]	; (800bcfc <xTaskIncrementTick+0x160>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d903      	bls.n	800bc74 <xTaskIncrementTick+0xd8>
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc70:	4a22      	ldr	r2, [pc, #136]	; (800bcfc <xTaskIncrementTick+0x160>)
 800bc72:	6013      	str	r3, [r2, #0]
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc78:	4613      	mov	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4413      	add	r3, r2
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4a1f      	ldr	r2, [pc, #124]	; (800bd00 <xTaskIncrementTick+0x164>)
 800bc82:	441a      	add	r2, r3
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	3304      	adds	r3, #4
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	f7fe fc69 	bl	800a562 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc94:	4b1b      	ldr	r3, [pc, #108]	; (800bd04 <xTaskIncrementTick+0x168>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d3b8      	bcc.n	800bc10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bca2:	e7b5      	b.n	800bc10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bca4:	4b17      	ldr	r3, [pc, #92]	; (800bd04 <xTaskIncrementTick+0x168>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcaa:	4915      	ldr	r1, [pc, #84]	; (800bd00 <xTaskIncrementTick+0x164>)
 800bcac:	4613      	mov	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	440b      	add	r3, r1
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d901      	bls.n	800bcc0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bcc0:	4b11      	ldr	r3, [pc, #68]	; (800bd08 <xTaskIncrementTick+0x16c>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d007      	beq.n	800bcd8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	617b      	str	r3, [r7, #20]
 800bccc:	e004      	b.n	800bcd8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bcce:	4b0f      	ldr	r3, [pc, #60]	; (800bd0c <xTaskIncrementTick+0x170>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	4a0d      	ldr	r2, [pc, #52]	; (800bd0c <xTaskIncrementTick+0x170>)
 800bcd6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bcd8:	697b      	ldr	r3, [r7, #20]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3718      	adds	r7, #24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	20002abc 	.word	0x20002abc
 800bce8:	20002a98 	.word	0x20002a98
 800bcec:	20002a4c 	.word	0x20002a4c
 800bcf0:	20002a50 	.word	0x20002a50
 800bcf4:	20002aac 	.word	0x20002aac
 800bcf8:	20002ab4 	.word	0x20002ab4
 800bcfc:	20002a9c 	.word	0x20002a9c
 800bd00:	200025c4 	.word	0x200025c4
 800bd04:	200025c0 	.word	0x200025c0
 800bd08:	20002aa8 	.word	0x20002aa8
 800bd0c:	20002aa4 	.word	0x20002aa4

0800bd10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd16:	4b2a      	ldr	r3, [pc, #168]	; (800bdc0 <vTaskSwitchContext+0xb0>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d003      	beq.n	800bd26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd1e:	4b29      	ldr	r3, [pc, #164]	; (800bdc4 <vTaskSwitchContext+0xb4>)
 800bd20:	2201      	movs	r2, #1
 800bd22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd24:	e046      	b.n	800bdb4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bd26:	4b27      	ldr	r3, [pc, #156]	; (800bdc4 <vTaskSwitchContext+0xb4>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd2c:	4b26      	ldr	r3, [pc, #152]	; (800bdc8 <vTaskSwitchContext+0xb8>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	60fb      	str	r3, [r7, #12]
 800bd32:	e010      	b.n	800bd56 <vTaskSwitchContext+0x46>
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10a      	bne.n	800bd50 <vTaskSwitchContext+0x40>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	607b      	str	r3, [r7, #4]
}
 800bd4c:	bf00      	nop
 800bd4e:	e7fe      	b.n	800bd4e <vTaskSwitchContext+0x3e>
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	3b01      	subs	r3, #1
 800bd54:	60fb      	str	r3, [r7, #12]
 800bd56:	491d      	ldr	r1, [pc, #116]	; (800bdcc <vTaskSwitchContext+0xbc>)
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	440b      	add	r3, r1
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d0e4      	beq.n	800bd34 <vTaskSwitchContext+0x24>
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4a15      	ldr	r2, [pc, #84]	; (800bdcc <vTaskSwitchContext+0xbc>)
 800bd76:	4413      	add	r3, r2
 800bd78:	60bb      	str	r3, [r7, #8]
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	685a      	ldr	r2, [r3, #4]
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	605a      	str	r2, [r3, #4]
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	685a      	ldr	r2, [r3, #4]
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	3308      	adds	r3, #8
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d104      	bne.n	800bd9a <vTaskSwitchContext+0x8a>
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	605a      	str	r2, [r3, #4]
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	4a0b      	ldr	r2, [pc, #44]	; (800bdd0 <vTaskSwitchContext+0xc0>)
 800bda2:	6013      	str	r3, [r2, #0]
 800bda4:	4a08      	ldr	r2, [pc, #32]	; (800bdc8 <vTaskSwitchContext+0xb8>)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bdaa:	4b09      	ldr	r3, [pc, #36]	; (800bdd0 <vTaskSwitchContext+0xc0>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3354      	adds	r3, #84	; 0x54
 800bdb0:	4a08      	ldr	r2, [pc, #32]	; (800bdd4 <vTaskSwitchContext+0xc4>)
 800bdb2:	6013      	str	r3, [r2, #0]
}
 800bdb4:	bf00      	nop
 800bdb6:	3714      	adds	r7, #20
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr
 800bdc0:	20002abc 	.word	0x20002abc
 800bdc4:	20002aa8 	.word	0x20002aa8
 800bdc8:	20002a9c 	.word	0x20002a9c
 800bdcc:	200025c4 	.word	0x200025c4
 800bdd0:	200025c0 	.word	0x200025c0
 800bdd4:	20000044 	.word	0x20000044

0800bdd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10a      	bne.n	800bdfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdec:	f383 8811 	msr	BASEPRI, r3
 800bdf0:	f3bf 8f6f 	isb	sy
 800bdf4:	f3bf 8f4f 	dsb	sy
 800bdf8:	60fb      	str	r3, [r7, #12]
}
 800bdfa:	bf00      	nop
 800bdfc:	e7fe      	b.n	800bdfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdfe:	4b07      	ldr	r3, [pc, #28]	; (800be1c <vTaskPlaceOnEventList+0x44>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	3318      	adds	r3, #24
 800be04:	4619      	mov	r1, r3
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f7fe fbcf 	bl	800a5aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be0c:	2101      	movs	r1, #1
 800be0e:	6838      	ldr	r0, [r7, #0]
 800be10:	f000 fb8e 	bl	800c530 <prvAddCurrentTaskToDelayedList>
}
 800be14:	bf00      	nop
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	200025c0 	.word	0x200025c0

0800be20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10a      	bne.n	800be48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	617b      	str	r3, [r7, #20]
}
 800be44:	bf00      	nop
 800be46:	e7fe      	b.n	800be46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be48:	4b0a      	ldr	r3, [pc, #40]	; (800be74 <vTaskPlaceOnEventListRestricted+0x54>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	3318      	adds	r3, #24
 800be4e:	4619      	mov	r1, r3
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f7fe fb86 	bl	800a562 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d002      	beq.n	800be62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800be5c:	f04f 33ff 	mov.w	r3, #4294967295
 800be60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be62:	6879      	ldr	r1, [r7, #4]
 800be64:	68b8      	ldr	r0, [r7, #8]
 800be66:	f000 fb63 	bl	800c530 <prvAddCurrentTaskToDelayedList>
	}
 800be6a:	bf00      	nop
 800be6c:	3718      	adds	r7, #24
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	200025c0 	.word	0x200025c0

0800be78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10a      	bne.n	800bea4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	60fb      	str	r3, [r7, #12]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	3318      	adds	r3, #24
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fe fbb7 	bl	800a61c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beae:	4b1e      	ldr	r3, [pc, #120]	; (800bf28 <xTaskRemoveFromEventList+0xb0>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d11d      	bne.n	800bef2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	3304      	adds	r3, #4
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fe fbae 	bl	800a61c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec4:	4b19      	ldr	r3, [pc, #100]	; (800bf2c <xTaskRemoveFromEventList+0xb4>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d903      	bls.n	800bed4 <xTaskRemoveFromEventList+0x5c>
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed0:	4a16      	ldr	r2, [pc, #88]	; (800bf2c <xTaskRemoveFromEventList+0xb4>)
 800bed2:	6013      	str	r3, [r2, #0]
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed8:	4613      	mov	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4a13      	ldr	r2, [pc, #76]	; (800bf30 <xTaskRemoveFromEventList+0xb8>)
 800bee2:	441a      	add	r2, r3
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	3304      	adds	r3, #4
 800bee8:	4619      	mov	r1, r3
 800beea:	4610      	mov	r0, r2
 800beec:	f7fe fb39 	bl	800a562 <vListInsertEnd>
 800bef0:	e005      	b.n	800befe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	3318      	adds	r3, #24
 800bef6:	4619      	mov	r1, r3
 800bef8:	480e      	ldr	r0, [pc, #56]	; (800bf34 <xTaskRemoveFromEventList+0xbc>)
 800befa:	f7fe fb32 	bl	800a562 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf02:	4b0d      	ldr	r3, [pc, #52]	; (800bf38 <xTaskRemoveFromEventList+0xc0>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d905      	bls.n	800bf18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf10:	4b0a      	ldr	r3, [pc, #40]	; (800bf3c <xTaskRemoveFromEventList+0xc4>)
 800bf12:	2201      	movs	r2, #1
 800bf14:	601a      	str	r2, [r3, #0]
 800bf16:	e001      	b.n	800bf1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf1c:	697b      	ldr	r3, [r7, #20]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3718      	adds	r7, #24
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20002abc 	.word	0x20002abc
 800bf2c:	20002a9c 	.word	0x20002a9c
 800bf30:	200025c4 	.word	0x200025c4
 800bf34:	20002a54 	.word	0x20002a54
 800bf38:	200025c0 	.word	0x200025c0
 800bf3c:	20002aa8 	.word	0x20002aa8

0800bf40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf48:	4b06      	ldr	r3, [pc, #24]	; (800bf64 <vTaskInternalSetTimeOutState+0x24>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf50:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <vTaskInternalSetTimeOutState+0x28>)
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	605a      	str	r2, [r3, #4]
}
 800bf58:	bf00      	nop
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr
 800bf64:	20002aac 	.word	0x20002aac
 800bf68:	20002a98 	.word	0x20002a98

0800bf6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b088      	sub	sp, #32
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10a      	bne.n	800bf92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	613b      	str	r3, [r7, #16]
}
 800bf8e:	bf00      	nop
 800bf90:	e7fe      	b.n	800bf90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10a      	bne.n	800bfae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	60fb      	str	r3, [r7, #12]
}
 800bfaa:	bf00      	nop
 800bfac:	e7fe      	b.n	800bfac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bfae:	f000 ff91 	bl	800ced4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bfb2:	4b1d      	ldr	r3, [pc, #116]	; (800c028 <xTaskCheckForTimeOut+0xbc>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	69ba      	ldr	r2, [r7, #24]
 800bfbe:	1ad3      	subs	r3, r2, r3
 800bfc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfca:	d102      	bne.n	800bfd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	61fb      	str	r3, [r7, #28]
 800bfd0:	e023      	b.n	800c01a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	4b15      	ldr	r3, [pc, #84]	; (800c02c <xTaskCheckForTimeOut+0xc0>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d007      	beq.n	800bfee <xTaskCheckForTimeOut+0x82>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	69ba      	ldr	r2, [r7, #24]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d302      	bcc.n	800bfee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	61fb      	str	r3, [r7, #28]
 800bfec:	e015      	b.n	800c01a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	697a      	ldr	r2, [r7, #20]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d20b      	bcs.n	800c010 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	1ad2      	subs	r2, r2, r3
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7ff ff9b 	bl	800bf40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c00a:	2300      	movs	r3, #0
 800c00c:	61fb      	str	r3, [r7, #28]
 800c00e:	e004      	b.n	800c01a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	2200      	movs	r2, #0
 800c014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c016:	2301      	movs	r3, #1
 800c018:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c01a:	f000 ff8b 	bl	800cf34 <vPortExitCritical>

	return xReturn;
 800c01e:	69fb      	ldr	r3, [r7, #28]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3720      	adds	r7, #32
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	20002a98 	.word	0x20002a98
 800c02c:	20002aac 	.word	0x20002aac

0800c030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c030:	b480      	push	{r7}
 800c032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c034:	4b03      	ldr	r3, [pc, #12]	; (800c044 <vTaskMissedYield+0x14>)
 800c036:	2201      	movs	r2, #1
 800c038:	601a      	str	r2, [r3, #0]
}
 800c03a:	bf00      	nop
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr
 800c044:	20002aa8 	.word	0x20002aa8

0800c048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c050:	f000 f852 	bl	800c0f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c054:	4b06      	ldr	r3, [pc, #24]	; (800c070 <prvIdleTask+0x28>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d9f9      	bls.n	800c050 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c05c:	4b05      	ldr	r3, [pc, #20]	; (800c074 <prvIdleTask+0x2c>)
 800c05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c062:	601a      	str	r2, [r3, #0]
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c06c:	e7f0      	b.n	800c050 <prvIdleTask+0x8>
 800c06e:	bf00      	nop
 800c070:	200025c4 	.word	0x200025c4
 800c074:	e000ed04 	.word	0xe000ed04

0800c078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c07e:	2300      	movs	r3, #0
 800c080:	607b      	str	r3, [r7, #4]
 800c082:	e00c      	b.n	800c09e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	4613      	mov	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	4a12      	ldr	r2, [pc, #72]	; (800c0d8 <prvInitialiseTaskLists+0x60>)
 800c090:	4413      	add	r3, r2
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fa38 	bl	800a508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	3301      	adds	r3, #1
 800c09c:	607b      	str	r3, [r7, #4]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2b37      	cmp	r3, #55	; 0x37
 800c0a2:	d9ef      	bls.n	800c084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c0a4:	480d      	ldr	r0, [pc, #52]	; (800c0dc <prvInitialiseTaskLists+0x64>)
 800c0a6:	f7fe fa2f 	bl	800a508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c0aa:	480d      	ldr	r0, [pc, #52]	; (800c0e0 <prvInitialiseTaskLists+0x68>)
 800c0ac:	f7fe fa2c 	bl	800a508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c0b0:	480c      	ldr	r0, [pc, #48]	; (800c0e4 <prvInitialiseTaskLists+0x6c>)
 800c0b2:	f7fe fa29 	bl	800a508 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c0b6:	480c      	ldr	r0, [pc, #48]	; (800c0e8 <prvInitialiseTaskLists+0x70>)
 800c0b8:	f7fe fa26 	bl	800a508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c0bc:	480b      	ldr	r0, [pc, #44]	; (800c0ec <prvInitialiseTaskLists+0x74>)
 800c0be:	f7fe fa23 	bl	800a508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c0c2:	4b0b      	ldr	r3, [pc, #44]	; (800c0f0 <prvInitialiseTaskLists+0x78>)
 800c0c4:	4a05      	ldr	r2, [pc, #20]	; (800c0dc <prvInitialiseTaskLists+0x64>)
 800c0c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c0c8:	4b0a      	ldr	r3, [pc, #40]	; (800c0f4 <prvInitialiseTaskLists+0x7c>)
 800c0ca:	4a05      	ldr	r2, [pc, #20]	; (800c0e0 <prvInitialiseTaskLists+0x68>)
 800c0cc:	601a      	str	r2, [r3, #0]
}
 800c0ce:	bf00      	nop
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	200025c4 	.word	0x200025c4
 800c0dc:	20002a24 	.word	0x20002a24
 800c0e0:	20002a38 	.word	0x20002a38
 800c0e4:	20002a54 	.word	0x20002a54
 800c0e8:	20002a68 	.word	0x20002a68
 800c0ec:	20002a80 	.word	0x20002a80
 800c0f0:	20002a4c 	.word	0x20002a4c
 800c0f4:	20002a50 	.word	0x20002a50

0800c0f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0fe:	e019      	b.n	800c134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c100:	f000 fee8 	bl	800ced4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c104:	4b10      	ldr	r3, [pc, #64]	; (800c148 <prvCheckTasksWaitingTermination+0x50>)
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	3304      	adds	r3, #4
 800c110:	4618      	mov	r0, r3
 800c112:	f7fe fa83 	bl	800a61c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c116:	4b0d      	ldr	r3, [pc, #52]	; (800c14c <prvCheckTasksWaitingTermination+0x54>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3b01      	subs	r3, #1
 800c11c:	4a0b      	ldr	r2, [pc, #44]	; (800c14c <prvCheckTasksWaitingTermination+0x54>)
 800c11e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c120:	4b0b      	ldr	r3, [pc, #44]	; (800c150 <prvCheckTasksWaitingTermination+0x58>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	3b01      	subs	r3, #1
 800c126:	4a0a      	ldr	r2, [pc, #40]	; (800c150 <prvCheckTasksWaitingTermination+0x58>)
 800c128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c12a:	f000 ff03 	bl	800cf34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f810 	bl	800c154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c134:	4b06      	ldr	r3, [pc, #24]	; (800c150 <prvCheckTasksWaitingTermination+0x58>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d1e1      	bne.n	800c100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c13c:	bf00      	nop
 800c13e:	bf00      	nop
 800c140:	3708      	adds	r7, #8
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	20002a68 	.word	0x20002a68
 800c14c:	20002a94 	.word	0x20002a94
 800c150:	20002a7c 	.word	0x20002a7c

0800c154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	3354      	adds	r3, #84	; 0x54
 800c160:	4618      	mov	r0, r3
 800c162:	f001 faa7 	bl	800d6b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d108      	bne.n	800c182 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c174:	4618      	mov	r0, r3
 800c176:	f001 f89b 	bl	800d2b0 <vPortFree>
				vPortFree( pxTCB );
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f001 f898 	bl	800d2b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c180:	e018      	b.n	800c1b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d103      	bne.n	800c194 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f001 f88f 	bl	800d2b0 <vPortFree>
	}
 800c192:	e00f      	b.n	800c1b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c19a:	2b02      	cmp	r3, #2
 800c19c:	d00a      	beq.n	800c1b4 <prvDeleteTCB+0x60>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	60fb      	str	r3, [r7, #12]
}
 800c1b0:	bf00      	nop
 800c1b2:	e7fe      	b.n	800c1b2 <prvDeleteTCB+0x5e>
	}
 800c1b4:	bf00      	nop
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1c2:	4b0c      	ldr	r3, [pc, #48]	; (800c1f4 <prvResetNextTaskUnblockTime+0x38>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d104      	bne.n	800c1d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c1cc:	4b0a      	ldr	r3, [pc, #40]	; (800c1f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c1d4:	e008      	b.n	800c1e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1d6:	4b07      	ldr	r3, [pc, #28]	; (800c1f4 <prvResetNextTaskUnblockTime+0x38>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	4a04      	ldr	r2, [pc, #16]	; (800c1f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c1e6:	6013      	str	r3, [r2, #0]
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	20002a4c 	.word	0x20002a4c
 800c1f8:	20002ab4 	.word	0x20002ab4

0800c1fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c202:	4b05      	ldr	r3, [pc, #20]	; (800c218 <xTaskGetCurrentTaskHandle+0x1c>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c208:	687b      	ldr	r3, [r7, #4]
	}
 800c20a:	4618      	mov	r0, r3
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	200025c0 	.word	0x200025c0

0800c21c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c222:	4b0b      	ldr	r3, [pc, #44]	; (800c250 <xTaskGetSchedulerState+0x34>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d102      	bne.n	800c230 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c22a:	2301      	movs	r3, #1
 800c22c:	607b      	str	r3, [r7, #4]
 800c22e:	e008      	b.n	800c242 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c230:	4b08      	ldr	r3, [pc, #32]	; (800c254 <xTaskGetSchedulerState+0x38>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d102      	bne.n	800c23e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c238:	2302      	movs	r3, #2
 800c23a:	607b      	str	r3, [r7, #4]
 800c23c:	e001      	b.n	800c242 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c23e:	2300      	movs	r3, #0
 800c240:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c242:	687b      	ldr	r3, [r7, #4]
	}
 800c244:	4618      	mov	r0, r3
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	20002aa0 	.word	0x20002aa0
 800c254:	20002abc 	.word	0x20002abc

0800c258 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c264:	2300      	movs	r3, #0
 800c266:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d051      	beq.n	800c312 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c272:	4b2a      	ldr	r3, [pc, #168]	; (800c31c <xTaskPriorityInherit+0xc4>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c278:	429a      	cmp	r2, r3
 800c27a:	d241      	bcs.n	800c300 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	2b00      	cmp	r3, #0
 800c282:	db06      	blt.n	800c292 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c284:	4b25      	ldr	r3, [pc, #148]	; (800c31c <xTaskPriorityInherit+0xc4>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	6959      	ldr	r1, [r3, #20]
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c29a:	4613      	mov	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4413      	add	r3, r2
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	4a1f      	ldr	r2, [pc, #124]	; (800c320 <xTaskPriorityInherit+0xc8>)
 800c2a4:	4413      	add	r3, r2
 800c2a6:	4299      	cmp	r1, r3
 800c2a8:	d122      	bne.n	800c2f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fe f9b4 	bl	800a61c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c2b4:	4b19      	ldr	r3, [pc, #100]	; (800c31c <xTaskPriorityInherit+0xc4>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c2:	4b18      	ldr	r3, [pc, #96]	; (800c324 <xTaskPriorityInherit+0xcc>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d903      	bls.n	800c2d2 <xTaskPriorityInherit+0x7a>
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ce:	4a15      	ldr	r2, [pc, #84]	; (800c324 <xTaskPriorityInherit+0xcc>)
 800c2d0:	6013      	str	r3, [r2, #0]
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	4a10      	ldr	r2, [pc, #64]	; (800c320 <xTaskPriorityInherit+0xc8>)
 800c2e0:	441a      	add	r2, r3
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	f7fe f93a 	bl	800a562 <vListInsertEnd>
 800c2ee:	e004      	b.n	800c2fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c2f0:	4b0a      	ldr	r3, [pc, #40]	; (800c31c <xTaskPriorityInherit+0xc4>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	60fb      	str	r3, [r7, #12]
 800c2fe:	e008      	b.n	800c312 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c304:	4b05      	ldr	r3, [pc, #20]	; (800c31c <xTaskPriorityInherit+0xc4>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d201      	bcs.n	800c312 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c30e:	2301      	movs	r3, #1
 800c310:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c312:	68fb      	ldr	r3, [r7, #12]
	}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	200025c0 	.word	0x200025c0
 800c320:	200025c4 	.word	0x200025c4
 800c324:	20002a9c 	.word	0x20002a9c

0800c328 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c334:	2300      	movs	r3, #0
 800c336:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d056      	beq.n	800c3ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c33e:	4b2e      	ldr	r3, [pc, #184]	; (800c3f8 <xTaskPriorityDisinherit+0xd0>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	429a      	cmp	r2, r3
 800c346:	d00a      	beq.n	800c35e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34c:	f383 8811 	msr	BASEPRI, r3
 800c350:	f3bf 8f6f 	isb	sy
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	60fb      	str	r3, [r7, #12]
}
 800c35a:	bf00      	nop
 800c35c:	e7fe      	b.n	800c35c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c362:	2b00      	cmp	r3, #0
 800c364:	d10a      	bne.n	800c37c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	60bb      	str	r3, [r7, #8]
}
 800c378:	bf00      	nop
 800c37a:	e7fe      	b.n	800c37a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c380:	1e5a      	subs	r2, r3, #1
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c38e:	429a      	cmp	r2, r3
 800c390:	d02c      	beq.n	800c3ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c396:	2b00      	cmp	r3, #0
 800c398:	d128      	bne.n	800c3ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	3304      	adds	r3, #4
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fe f93c 	bl	800a61c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3bc:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <xTaskPriorityDisinherit+0xd4>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d903      	bls.n	800c3cc <xTaskPriorityDisinherit+0xa4>
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c8:	4a0c      	ldr	r2, [pc, #48]	; (800c3fc <xTaskPriorityDisinherit+0xd4>)
 800c3ca:	6013      	str	r3, [r2, #0]
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	4413      	add	r3, r2
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	4a09      	ldr	r2, [pc, #36]	; (800c400 <xTaskPriorityDisinherit+0xd8>)
 800c3da:	441a      	add	r2, r3
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	4610      	mov	r0, r2
 800c3e4:	f7fe f8bd 	bl	800a562 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3ec:	697b      	ldr	r3, [r7, #20]
	}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3718      	adds	r7, #24
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	200025c0 	.word	0x200025c0
 800c3fc:	20002a9c 	.word	0x20002a9c
 800c400:	200025c4 	.word	0x200025c4

0800c404 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c404:	b580      	push	{r7, lr}
 800c406:	b088      	sub	sp, #32
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c412:	2301      	movs	r3, #1
 800c414:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d06a      	beq.n	800c4f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10a      	bne.n	800c43a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	60fb      	str	r3, [r7, #12]
}
 800c436:	bf00      	nop
 800c438:	e7fe      	b.n	800c438 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c43e:	683a      	ldr	r2, [r7, #0]
 800c440:	429a      	cmp	r2, r3
 800c442:	d902      	bls.n	800c44a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	61fb      	str	r3, [r7, #28]
 800c448:	e002      	b.n	800c450 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c44e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c454:	69fa      	ldr	r2, [r7, #28]
 800c456:	429a      	cmp	r2, r3
 800c458:	d04b      	beq.n	800c4f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c45a:	69bb      	ldr	r3, [r7, #24]
 800c45c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c45e:	697a      	ldr	r2, [r7, #20]
 800c460:	429a      	cmp	r2, r3
 800c462:	d146      	bne.n	800c4f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c464:	4b25      	ldr	r3, [pc, #148]	; (800c4fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	69ba      	ldr	r2, [r7, #24]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d10a      	bne.n	800c484 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	60bb      	str	r3, [r7, #8]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c488:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c48a:	69bb      	ldr	r3, [r7, #24]
 800c48c:	69fa      	ldr	r2, [r7, #28]
 800c48e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	699b      	ldr	r3, [r3, #24]
 800c494:	2b00      	cmp	r3, #0
 800c496:	db04      	blt.n	800c4a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	6959      	ldr	r1, [r3, #20]
 800c4a6:	693a      	ldr	r2, [r7, #16]
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4a13      	ldr	r2, [pc, #76]	; (800c500 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c4b2:	4413      	add	r3, r2
 800c4b4:	4299      	cmp	r1, r3
 800c4b6:	d11c      	bne.n	800c4f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fe f8ad 	bl	800a61c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c6:	4b0f      	ldr	r3, [pc, #60]	; (800c504 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d903      	bls.n	800c4d6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d2:	4a0c      	ldr	r2, [pc, #48]	; (800c504 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c4d4:	6013      	str	r3, [r2, #0]
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4da:	4613      	mov	r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4413      	add	r3, r2
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	4a07      	ldr	r2, [pc, #28]	; (800c500 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c4e4:	441a      	add	r2, r3
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	f7fe f838 	bl	800a562 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4f2:	bf00      	nop
 800c4f4:	3720      	adds	r7, #32
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	200025c0 	.word	0x200025c0
 800c500:	200025c4 	.word	0x200025c4
 800c504:	20002a9c 	.word	0x20002a9c

0800c508 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c508:	b480      	push	{r7}
 800c50a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c50c:	4b07      	ldr	r3, [pc, #28]	; (800c52c <pvTaskIncrementMutexHeldCount+0x24>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d004      	beq.n	800c51e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c514:	4b05      	ldr	r3, [pc, #20]	; (800c52c <pvTaskIncrementMutexHeldCount+0x24>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c51a:	3201      	adds	r2, #1
 800c51c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c51e:	4b03      	ldr	r3, [pc, #12]	; (800c52c <pvTaskIncrementMutexHeldCount+0x24>)
 800c520:	681b      	ldr	r3, [r3, #0]
	}
 800c522:	4618      	mov	r0, r3
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	200025c0 	.word	0x200025c0

0800c530 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c53a:	4b21      	ldr	r3, [pc, #132]	; (800c5c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c540:	4b20      	ldr	r3, [pc, #128]	; (800c5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	3304      	adds	r3, #4
 800c546:	4618      	mov	r0, r3
 800c548:	f7fe f868 	bl	800a61c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c552:	d10a      	bne.n	800c56a <prvAddCurrentTaskToDelayedList+0x3a>
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d007      	beq.n	800c56a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c55a:	4b1a      	ldr	r3, [pc, #104]	; (800c5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	3304      	adds	r3, #4
 800c560:	4619      	mov	r1, r3
 800c562:	4819      	ldr	r0, [pc, #100]	; (800c5c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c564:	f7fd fffd 	bl	800a562 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c568:	e026      	b.n	800c5b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4413      	add	r3, r2
 800c570:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c572:	4b14      	ldr	r3, [pc, #80]	; (800c5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	68ba      	ldr	r2, [r7, #8]
 800c578:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d209      	bcs.n	800c596 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c582:	4b12      	ldr	r3, [pc, #72]	; (800c5cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	4b0f      	ldr	r3, [pc, #60]	; (800c5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	3304      	adds	r3, #4
 800c58c:	4619      	mov	r1, r3
 800c58e:	4610      	mov	r0, r2
 800c590:	f7fe f80b 	bl	800a5aa <vListInsert>
}
 800c594:	e010      	b.n	800c5b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c596:	4b0e      	ldr	r3, [pc, #56]	; (800c5d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	4b0a      	ldr	r3, [pc, #40]	; (800c5c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	3304      	adds	r3, #4
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	4610      	mov	r0, r2
 800c5a4:	f7fe f801 	bl	800a5aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5a8:	4b0a      	ldr	r3, [pc, #40]	; (800c5d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d202      	bcs.n	800c5b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c5b2:	4a08      	ldr	r2, [pc, #32]	; (800c5d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	6013      	str	r3, [r2, #0]
}
 800c5b8:	bf00      	nop
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	20002a98 	.word	0x20002a98
 800c5c4:	200025c0 	.word	0x200025c0
 800c5c8:	20002a80 	.word	0x20002a80
 800c5cc:	20002a50 	.word	0x20002a50
 800c5d0:	20002a4c 	.word	0x20002a4c
 800c5d4:	20002ab4 	.word	0x20002ab4

0800c5d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b08a      	sub	sp, #40	; 0x28
 800c5dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c5e2:	f000 fb07 	bl	800cbf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c5e6:	4b1c      	ldr	r3, [pc, #112]	; (800c658 <xTimerCreateTimerTask+0x80>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d021      	beq.n	800c632 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c5f6:	1d3a      	adds	r2, r7, #4
 800c5f8:	f107 0108 	add.w	r1, r7, #8
 800c5fc:	f107 030c 	add.w	r3, r7, #12
 800c600:	4618      	mov	r0, r3
 800c602:	f7fd ff67 	bl	800a4d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	9202      	str	r2, [sp, #8]
 800c60e:	9301      	str	r3, [sp, #4]
 800c610:	2302      	movs	r3, #2
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	2300      	movs	r3, #0
 800c616:	460a      	mov	r2, r1
 800c618:	4910      	ldr	r1, [pc, #64]	; (800c65c <xTimerCreateTimerTask+0x84>)
 800c61a:	4811      	ldr	r0, [pc, #68]	; (800c660 <xTimerCreateTimerTask+0x88>)
 800c61c:	f7fe ff28 	bl	800b470 <xTaskCreateStatic>
 800c620:	4603      	mov	r3, r0
 800c622:	4a10      	ldr	r2, [pc, #64]	; (800c664 <xTimerCreateTimerTask+0x8c>)
 800c624:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c626:	4b0f      	ldr	r3, [pc, #60]	; (800c664 <xTimerCreateTimerTask+0x8c>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c62e:	2301      	movs	r3, #1
 800c630:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10a      	bne.n	800c64e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63c:	f383 8811 	msr	BASEPRI, r3
 800c640:	f3bf 8f6f 	isb	sy
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	613b      	str	r3, [r7, #16]
}
 800c64a:	bf00      	nop
 800c64c:	e7fe      	b.n	800c64c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c64e:	697b      	ldr	r3, [r7, #20]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3718      	adds	r7, #24
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	20002af0 	.word	0x20002af0
 800c65c:	0800fdfc 	.word	0x0800fdfc
 800c660:	0800c79d 	.word	0x0800c79d
 800c664:	20002af4 	.word	0x20002af4

0800c668 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b08a      	sub	sp, #40	; 0x28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
 800c674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c676:	2300      	movs	r3, #0
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10a      	bne.n	800c696 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	623b      	str	r3, [r7, #32]
}
 800c692:	bf00      	nop
 800c694:	e7fe      	b.n	800c694 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c696:	4b1a      	ldr	r3, [pc, #104]	; (800c700 <xTimerGenericCommand+0x98>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d02a      	beq.n	800c6f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	2b05      	cmp	r3, #5
 800c6ae:	dc18      	bgt.n	800c6e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c6b0:	f7ff fdb4 	bl	800c21c <xTaskGetSchedulerState>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b02      	cmp	r3, #2
 800c6b8:	d109      	bne.n	800c6ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c6ba:	4b11      	ldr	r3, [pc, #68]	; (800c700 <xTimerGenericCommand+0x98>)
 800c6bc:	6818      	ldr	r0, [r3, #0]
 800c6be:	f107 0110 	add.w	r1, r7, #16
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6c6:	f7fe f9c7 	bl	800aa58 <xQueueGenericSend>
 800c6ca:	6278      	str	r0, [r7, #36]	; 0x24
 800c6cc:	e012      	b.n	800c6f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c6ce:	4b0c      	ldr	r3, [pc, #48]	; (800c700 <xTimerGenericCommand+0x98>)
 800c6d0:	6818      	ldr	r0, [r3, #0]
 800c6d2:	f107 0110 	add.w	r1, r7, #16
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f7fe f9bd 	bl	800aa58 <xQueueGenericSend>
 800c6de:	6278      	str	r0, [r7, #36]	; 0x24
 800c6e0:	e008      	b.n	800c6f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c6e2:	4b07      	ldr	r3, [pc, #28]	; (800c700 <xTimerGenericCommand+0x98>)
 800c6e4:	6818      	ldr	r0, [r3, #0]
 800c6e6:	f107 0110 	add.w	r1, r7, #16
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	683a      	ldr	r2, [r7, #0]
 800c6ee:	f7fe fab1 	bl	800ac54 <xQueueGenericSendFromISR>
 800c6f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3728      	adds	r7, #40	; 0x28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	20002af0 	.word	0x20002af0

0800c704 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b088      	sub	sp, #32
 800c708:	af02      	add	r7, sp, #8
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c70e:	4b22      	ldr	r3, [pc, #136]	; (800c798 <prvProcessExpiredTimer+0x94>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	3304      	adds	r3, #4
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fd ff7d 	bl	800a61c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c728:	f003 0304 	and.w	r3, r3, #4
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d022      	beq.n	800c776 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	699a      	ldr	r2, [r3, #24]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	18d1      	adds	r1, r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	683a      	ldr	r2, [r7, #0]
 800c73c:	6978      	ldr	r0, [r7, #20]
 800c73e:	f000 f8d1 	bl	800c8e4 <prvInsertTimerInActiveList>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d01f      	beq.n	800c788 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c748:	2300      	movs	r3, #0
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	2300      	movs	r3, #0
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	2100      	movs	r1, #0
 800c752:	6978      	ldr	r0, [r7, #20]
 800c754:	f7ff ff88 	bl	800c668 <xTimerGenericCommand>
 800c758:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d113      	bne.n	800c788 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	60fb      	str	r3, [r7, #12]
}
 800c772:	bf00      	nop
 800c774:	e7fe      	b.n	800c774 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c77c:	f023 0301 	bic.w	r3, r3, #1
 800c780:	b2da      	uxtb	r2, r3
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	6a1b      	ldr	r3, [r3, #32]
 800c78c:	6978      	ldr	r0, [r7, #20]
 800c78e:	4798      	blx	r3
}
 800c790:	bf00      	nop
 800c792:	3718      	adds	r7, #24
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	20002ae8 	.word	0x20002ae8

0800c79c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7a4:	f107 0308 	add.w	r3, r7, #8
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 f857 	bl	800c85c <prvGetNextExpireTime>
 800c7ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f000 f803 	bl	800c7c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c7ba:	f000 f8d5 	bl	800c968 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7be:	e7f1      	b.n	800c7a4 <prvTimerTask+0x8>

0800c7c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c7ca:	f7ff f92b 	bl	800ba24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7ce:	f107 0308 	add.w	r3, r7, #8
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f000 f866 	bl	800c8a4 <prvSampleTimeNow>
 800c7d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d130      	bne.n	800c842 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10a      	bne.n	800c7fc <prvProcessTimerOrBlockTask+0x3c>
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d806      	bhi.n	800c7fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c7ee:	f7ff f927 	bl	800ba40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c7f2:	68f9      	ldr	r1, [r7, #12]
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f7ff ff85 	bl	800c704 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c7fa:	e024      	b.n	800c846 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d008      	beq.n	800c814 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c802:	4b13      	ldr	r3, [pc, #76]	; (800c850 <prvProcessTimerOrBlockTask+0x90>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d101      	bne.n	800c810 <prvProcessTimerOrBlockTask+0x50>
 800c80c:	2301      	movs	r3, #1
 800c80e:	e000      	b.n	800c812 <prvProcessTimerOrBlockTask+0x52>
 800c810:	2300      	movs	r3, #0
 800c812:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c814:	4b0f      	ldr	r3, [pc, #60]	; (800c854 <prvProcessTimerOrBlockTask+0x94>)
 800c816:	6818      	ldr	r0, [r3, #0]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	1ad3      	subs	r3, r2, r3
 800c81e:	683a      	ldr	r2, [r7, #0]
 800c820:	4619      	mov	r1, r3
 800c822:	f7fe fdf1 	bl	800b408 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c826:	f7ff f90b 	bl	800ba40 <xTaskResumeAll>
 800c82a:	4603      	mov	r3, r0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d10a      	bne.n	800c846 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c830:	4b09      	ldr	r3, [pc, #36]	; (800c858 <prvProcessTimerOrBlockTask+0x98>)
 800c832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c836:	601a      	str	r2, [r3, #0]
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	f3bf 8f6f 	isb	sy
}
 800c840:	e001      	b.n	800c846 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c842:	f7ff f8fd 	bl	800ba40 <xTaskResumeAll>
}
 800c846:	bf00      	nop
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	20002aec 	.word	0x20002aec
 800c854:	20002af0 	.word	0x20002af0
 800c858:	e000ed04 	.word	0xe000ed04

0800c85c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c864:	4b0e      	ldr	r3, [pc, #56]	; (800c8a0 <prvGetNextExpireTime+0x44>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d101      	bne.n	800c872 <prvGetNextExpireTime+0x16>
 800c86e:	2201      	movs	r2, #1
 800c870:	e000      	b.n	800c874 <prvGetNextExpireTime+0x18>
 800c872:	2200      	movs	r2, #0
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d105      	bne.n	800c88c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c880:	4b07      	ldr	r3, [pc, #28]	; (800c8a0 <prvGetNextExpireTime+0x44>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	60fb      	str	r3, [r7, #12]
 800c88a:	e001      	b.n	800c890 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c88c:	2300      	movs	r3, #0
 800c88e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c890:	68fb      	ldr	r3, [r7, #12]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3714      	adds	r7, #20
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop
 800c8a0:	20002ae8 	.word	0x20002ae8

0800c8a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c8ac:	f7ff f966 	bl	800bb7c <xTaskGetTickCount>
 800c8b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c8b2:	4b0b      	ldr	r3, [pc, #44]	; (800c8e0 <prvSampleTimeNow+0x3c>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d205      	bcs.n	800c8c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c8bc:	f000 f936 	bl	800cb2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	601a      	str	r2, [r3, #0]
 800c8c6:	e002      	b.n	800c8ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c8ce:	4a04      	ldr	r2, [pc, #16]	; (800c8e0 <prvSampleTimeNow+0x3c>)
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	20002af8 	.word	0x20002af8

0800c8e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	68fa      	ldr	r2, [r7, #12]
 800c900:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c902:	68ba      	ldr	r2, [r7, #8]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	429a      	cmp	r2, r3
 800c908:	d812      	bhi.n	800c930 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	1ad2      	subs	r2, r2, r3
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	699b      	ldr	r3, [r3, #24]
 800c914:	429a      	cmp	r2, r3
 800c916:	d302      	bcc.n	800c91e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c918:	2301      	movs	r3, #1
 800c91a:	617b      	str	r3, [r7, #20]
 800c91c:	e01b      	b.n	800c956 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c91e:	4b10      	ldr	r3, [pc, #64]	; (800c960 <prvInsertTimerInActiveList+0x7c>)
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	3304      	adds	r3, #4
 800c926:	4619      	mov	r1, r3
 800c928:	4610      	mov	r0, r2
 800c92a:	f7fd fe3e 	bl	800a5aa <vListInsert>
 800c92e:	e012      	b.n	800c956 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	429a      	cmp	r2, r3
 800c936:	d206      	bcs.n	800c946 <prvInsertTimerInActiveList+0x62>
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d302      	bcc.n	800c946 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c940:	2301      	movs	r3, #1
 800c942:	617b      	str	r3, [r7, #20]
 800c944:	e007      	b.n	800c956 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c946:	4b07      	ldr	r3, [pc, #28]	; (800c964 <prvInsertTimerInActiveList+0x80>)
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	3304      	adds	r3, #4
 800c94e:	4619      	mov	r1, r3
 800c950:	4610      	mov	r0, r2
 800c952:	f7fd fe2a 	bl	800a5aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c956:	697b      	ldr	r3, [r7, #20]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3718      	adds	r7, #24
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	20002aec 	.word	0x20002aec
 800c964:	20002ae8 	.word	0x20002ae8

0800c968 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b08e      	sub	sp, #56	; 0x38
 800c96c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c96e:	e0ca      	b.n	800cb06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	da18      	bge.n	800c9a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c976:	1d3b      	adds	r3, r7, #4
 800c978:	3304      	adds	r3, #4
 800c97a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10a      	bne.n	800c998 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c986:	f383 8811 	msr	BASEPRI, r3
 800c98a:	f3bf 8f6f 	isb	sy
 800c98e:	f3bf 8f4f 	dsb	sy
 800c992:	61fb      	str	r3, [r7, #28]
}
 800c994:	bf00      	nop
 800c996:	e7fe      	b.n	800c996 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c99e:	6850      	ldr	r0, [r2, #4]
 800c9a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9a2:	6892      	ldr	r2, [r2, #8]
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f2c0 80aa 	blt.w	800cb04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b6:	695b      	ldr	r3, [r3, #20]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d004      	beq.n	800c9c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9be:	3304      	adds	r3, #4
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fd fe2b 	bl	800a61c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9c6:	463b      	mov	r3, r7
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7ff ff6b 	bl	800c8a4 <prvSampleTimeNow>
 800c9ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2b09      	cmp	r3, #9
 800c9d4:	f200 8097 	bhi.w	800cb06 <prvProcessReceivedCommands+0x19e>
 800c9d8:	a201      	add	r2, pc, #4	; (adr r2, 800c9e0 <prvProcessReceivedCommands+0x78>)
 800c9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9de:	bf00      	nop
 800c9e0:	0800ca09 	.word	0x0800ca09
 800c9e4:	0800ca09 	.word	0x0800ca09
 800c9e8:	0800ca09 	.word	0x0800ca09
 800c9ec:	0800ca7d 	.word	0x0800ca7d
 800c9f0:	0800ca91 	.word	0x0800ca91
 800c9f4:	0800cadb 	.word	0x0800cadb
 800c9f8:	0800ca09 	.word	0x0800ca09
 800c9fc:	0800ca09 	.word	0x0800ca09
 800ca00:	0800ca7d 	.word	0x0800ca7d
 800ca04:	0800ca91 	.word	0x0800ca91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca0e:	f043 0301 	orr.w	r3, r3, #1
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1e:	699b      	ldr	r3, [r3, #24]
 800ca20:	18d1      	adds	r1, r2, r3
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca28:	f7ff ff5c 	bl	800c8e4 <prvInsertTimerInActiveList>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d069      	beq.n	800cb06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca40:	f003 0304 	and.w	r3, r3, #4
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d05e      	beq.n	800cb06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	441a      	add	r2, r3
 800ca50:	2300      	movs	r3, #0
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	2300      	movs	r3, #0
 800ca56:	2100      	movs	r1, #0
 800ca58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca5a:	f7ff fe05 	bl	800c668 <xTimerGenericCommand>
 800ca5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ca60:	6a3b      	ldr	r3, [r7, #32]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d14f      	bne.n	800cb06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ca66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	61bb      	str	r3, [r7, #24]
}
 800ca78:	bf00      	nop
 800ca7a:	e7fe      	b.n	800ca7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca82:	f023 0301 	bic.w	r3, r3, #1
 800ca86:	b2da      	uxtb	r2, r3
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ca8e:	e03a      	b.n	800cb06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca96:	f043 0301 	orr.w	r3, r3, #1
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800caa2:	68ba      	ldr	r2, [r7, #8]
 800caa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800caa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d10a      	bne.n	800cac6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab4:	f383 8811 	msr	BASEPRI, r3
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	617b      	str	r3, [r7, #20]
}
 800cac2:	bf00      	nop
 800cac4:	e7fe      	b.n	800cac4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac8:	699a      	ldr	r2, [r3, #24]
 800caca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cacc:	18d1      	adds	r1, r2, r3
 800cace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cad4:	f7ff ff06 	bl	800c8e4 <prvInsertTimerInActiveList>
					break;
 800cad8:	e015      	b.n	800cb06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cadc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cae0:	f003 0302 	and.w	r3, r3, #2
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d103      	bne.n	800caf0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caea:	f000 fbe1 	bl	800d2b0 <vPortFree>
 800caee:	e00a      	b.n	800cb06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800caf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800caf6:	f023 0301 	bic.w	r3, r3, #1
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cb02:	e000      	b.n	800cb06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cb04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb06:	4b08      	ldr	r3, [pc, #32]	; (800cb28 <prvProcessReceivedCommands+0x1c0>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	1d39      	adds	r1, r7, #4
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fe f93c 	bl	800ad8c <xQueueReceive>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f47f af2a 	bne.w	800c970 <prvProcessReceivedCommands+0x8>
	}
}
 800cb1c:	bf00      	nop
 800cb1e:	bf00      	nop
 800cb20:	3730      	adds	r7, #48	; 0x30
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	20002af0 	.word	0x20002af0

0800cb2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b088      	sub	sp, #32
 800cb30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb32:	e048      	b.n	800cbc6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb34:	4b2d      	ldr	r3, [pc, #180]	; (800cbec <prvSwitchTimerLists+0xc0>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb3e:	4b2b      	ldr	r3, [pc, #172]	; (800cbec <prvSwitchTimerLists+0xc0>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	68db      	ldr	r3, [r3, #12]
 800cb46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	3304      	adds	r3, #4
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7fd fd65 	bl	800a61c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6a1b      	ldr	r3, [r3, #32]
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb60:	f003 0304 	and.w	r3, r3, #4
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d02e      	beq.n	800cbc6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	699b      	ldr	r3, [r3, #24]
 800cb6c:	693a      	ldr	r2, [r7, #16]
 800cb6e:	4413      	add	r3, r2
 800cb70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d90e      	bls.n	800cb98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb86:	4b19      	ldr	r3, [pc, #100]	; (800cbec <prvSwitchTimerLists+0xc0>)
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	4619      	mov	r1, r3
 800cb90:	4610      	mov	r0, r2
 800cb92:	f7fd fd0a 	bl	800a5aa <vListInsert>
 800cb96:	e016      	b.n	800cbc6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb98:	2300      	movs	r3, #0
 800cb9a:	9300      	str	r3, [sp, #0]
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	693a      	ldr	r2, [r7, #16]
 800cba0:	2100      	movs	r1, #0
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f7ff fd60 	bl	800c668 <xTimerGenericCommand>
 800cba8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d10a      	bne.n	800cbc6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb4:	f383 8811 	msr	BASEPRI, r3
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	603b      	str	r3, [r7, #0]
}
 800cbc2:	bf00      	nop
 800cbc4:	e7fe      	b.n	800cbc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbc6:	4b09      	ldr	r3, [pc, #36]	; (800cbec <prvSwitchTimerLists+0xc0>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1b1      	bne.n	800cb34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cbd0:	4b06      	ldr	r3, [pc, #24]	; (800cbec <prvSwitchTimerLists+0xc0>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cbd6:	4b06      	ldr	r3, [pc, #24]	; (800cbf0 <prvSwitchTimerLists+0xc4>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a04      	ldr	r2, [pc, #16]	; (800cbec <prvSwitchTimerLists+0xc0>)
 800cbdc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cbde:	4a04      	ldr	r2, [pc, #16]	; (800cbf0 <prvSwitchTimerLists+0xc4>)
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	6013      	str	r3, [r2, #0]
}
 800cbe4:	bf00      	nop
 800cbe6:	3718      	adds	r7, #24
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	20002ae8 	.word	0x20002ae8
 800cbf0:	20002aec 	.word	0x20002aec

0800cbf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cbfa:	f000 f96b 	bl	800ced4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cbfe:	4b15      	ldr	r3, [pc, #84]	; (800cc54 <prvCheckForValidListAndQueue+0x60>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d120      	bne.n	800cc48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cc06:	4814      	ldr	r0, [pc, #80]	; (800cc58 <prvCheckForValidListAndQueue+0x64>)
 800cc08:	f7fd fc7e 	bl	800a508 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc0c:	4813      	ldr	r0, [pc, #76]	; (800cc5c <prvCheckForValidListAndQueue+0x68>)
 800cc0e:	f7fd fc7b 	bl	800a508 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc12:	4b13      	ldr	r3, [pc, #76]	; (800cc60 <prvCheckForValidListAndQueue+0x6c>)
 800cc14:	4a10      	ldr	r2, [pc, #64]	; (800cc58 <prvCheckForValidListAndQueue+0x64>)
 800cc16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cc18:	4b12      	ldr	r3, [pc, #72]	; (800cc64 <prvCheckForValidListAndQueue+0x70>)
 800cc1a:	4a10      	ldr	r2, [pc, #64]	; (800cc5c <prvCheckForValidListAndQueue+0x68>)
 800cc1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc1e:	2300      	movs	r3, #0
 800cc20:	9300      	str	r3, [sp, #0]
 800cc22:	4b11      	ldr	r3, [pc, #68]	; (800cc68 <prvCheckForValidListAndQueue+0x74>)
 800cc24:	4a11      	ldr	r2, [pc, #68]	; (800cc6c <prvCheckForValidListAndQueue+0x78>)
 800cc26:	2110      	movs	r1, #16
 800cc28:	200a      	movs	r0, #10
 800cc2a:	f7fd fd89 	bl	800a740 <xQueueGenericCreateStatic>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	4a08      	ldr	r2, [pc, #32]	; (800cc54 <prvCheckForValidListAndQueue+0x60>)
 800cc32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc34:	4b07      	ldr	r3, [pc, #28]	; (800cc54 <prvCheckForValidListAndQueue+0x60>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d005      	beq.n	800cc48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc3c:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <prvCheckForValidListAndQueue+0x60>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	490b      	ldr	r1, [pc, #44]	; (800cc70 <prvCheckForValidListAndQueue+0x7c>)
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7fe fbb6 	bl	800b3b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc48:	f000 f974 	bl	800cf34 <vPortExitCritical>
}
 800cc4c:	bf00      	nop
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	20002af0 	.word	0x20002af0
 800cc58:	20002ac0 	.word	0x20002ac0
 800cc5c:	20002ad4 	.word	0x20002ad4
 800cc60:	20002ae8 	.word	0x20002ae8
 800cc64:	20002aec 	.word	0x20002aec
 800cc68:	20002b9c 	.word	0x20002b9c
 800cc6c:	20002afc 	.word	0x20002afc
 800cc70:	0800fe04 	.word	0x0800fe04

0800cc74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc74:	b480      	push	{r7}
 800cc76:	b085      	sub	sp, #20
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	3b04      	subs	r3, #4
 800cc84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	3b04      	subs	r3, #4
 800cc92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	f023 0201 	bic.w	r2, r3, #1
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	3b04      	subs	r3, #4
 800cca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cca4:	4a0c      	ldr	r2, [pc, #48]	; (800ccd8 <pxPortInitialiseStack+0x64>)
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	3b14      	subs	r3, #20
 800ccae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	3b04      	subs	r3, #4
 800ccba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f06f 0202 	mvn.w	r2, #2
 800ccc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	3b20      	subs	r3, #32
 800ccc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ccca:	68fb      	ldr	r3, [r7, #12]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3714      	adds	r7, #20
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr
 800ccd8:	0800ccdd 	.word	0x0800ccdd

0800ccdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b085      	sub	sp, #20
 800cce0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cce6:	4b12      	ldr	r3, [pc, #72]	; (800cd30 <prvTaskExitError+0x54>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccee:	d00a      	beq.n	800cd06 <prvTaskExitError+0x2a>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	60fb      	str	r3, [r7, #12]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <prvTaskExitError+0x28>
	__asm volatile
 800cd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0a:	f383 8811 	msr	BASEPRI, r3
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	60bb      	str	r3, [r7, #8]
}
 800cd18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd1a:	bf00      	nop
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d0fc      	beq.n	800cd1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd22:	bf00      	nop
 800cd24:	bf00      	nop
 800cd26:	3714      	adds	r7, #20
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr
 800cd30:	20000040 	.word	0x20000040
	...

0800cd40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd40:	4b07      	ldr	r3, [pc, #28]	; (800cd60 <pxCurrentTCBConst2>)
 800cd42:	6819      	ldr	r1, [r3, #0]
 800cd44:	6808      	ldr	r0, [r1, #0]
 800cd46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4a:	f380 8809 	msr	PSP, r0
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f04f 0000 	mov.w	r0, #0
 800cd56:	f380 8811 	msr	BASEPRI, r0
 800cd5a:	4770      	bx	lr
 800cd5c:	f3af 8000 	nop.w

0800cd60 <pxCurrentTCBConst2>:
 800cd60:	200025c0 	.word	0x200025c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd64:	bf00      	nop
 800cd66:	bf00      	nop

0800cd68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd68:	4808      	ldr	r0, [pc, #32]	; (800cd8c <prvPortStartFirstTask+0x24>)
 800cd6a:	6800      	ldr	r0, [r0, #0]
 800cd6c:	6800      	ldr	r0, [r0, #0]
 800cd6e:	f380 8808 	msr	MSP, r0
 800cd72:	f04f 0000 	mov.w	r0, #0
 800cd76:	f380 8814 	msr	CONTROL, r0
 800cd7a:	b662      	cpsie	i
 800cd7c:	b661      	cpsie	f
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	f3bf 8f6f 	isb	sy
 800cd86:	df00      	svc	0
 800cd88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd8a:	bf00      	nop
 800cd8c:	e000ed08 	.word	0xe000ed08

0800cd90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b086      	sub	sp, #24
 800cd94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd96:	4b46      	ldr	r3, [pc, #280]	; (800ceb0 <xPortStartScheduler+0x120>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a46      	ldr	r2, [pc, #280]	; (800ceb4 <xPortStartScheduler+0x124>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d10a      	bne.n	800cdb6 <xPortStartScheduler+0x26>
	__asm volatile
 800cda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	613b      	str	r3, [r7, #16]
}
 800cdb2:	bf00      	nop
 800cdb4:	e7fe      	b.n	800cdb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cdb6:	4b3e      	ldr	r3, [pc, #248]	; (800ceb0 <xPortStartScheduler+0x120>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a3f      	ldr	r2, [pc, #252]	; (800ceb8 <xPortStartScheduler+0x128>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d10a      	bne.n	800cdd6 <xPortStartScheduler+0x46>
	__asm volatile
 800cdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc4:	f383 8811 	msr	BASEPRI, r3
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	60fb      	str	r3, [r7, #12]
}
 800cdd2:	bf00      	nop
 800cdd4:	e7fe      	b.n	800cdd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cdd6:	4b39      	ldr	r3, [pc, #228]	; (800cebc <xPortStartScheduler+0x12c>)
 800cdd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	22ff      	movs	r2, #255	; 0xff
 800cde6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cdf0:	78fb      	ldrb	r3, [r7, #3]
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	4b31      	ldr	r3, [pc, #196]	; (800cec0 <xPortStartScheduler+0x130>)
 800cdfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cdfe:	4b31      	ldr	r3, [pc, #196]	; (800cec4 <xPortStartScheduler+0x134>)
 800ce00:	2207      	movs	r2, #7
 800ce02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce04:	e009      	b.n	800ce1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ce06:	4b2f      	ldr	r3, [pc, #188]	; (800cec4 <xPortStartScheduler+0x134>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	4a2d      	ldr	r2, [pc, #180]	; (800cec4 <xPortStartScheduler+0x134>)
 800ce0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce10:	78fb      	ldrb	r3, [r7, #3]
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	005b      	lsls	r3, r3, #1
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce1a:	78fb      	ldrb	r3, [r7, #3]
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce22:	2b80      	cmp	r3, #128	; 0x80
 800ce24:	d0ef      	beq.n	800ce06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ce26:	4b27      	ldr	r3, [pc, #156]	; (800cec4 <xPortStartScheduler+0x134>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f1c3 0307 	rsb	r3, r3, #7
 800ce2e:	2b04      	cmp	r3, #4
 800ce30:	d00a      	beq.n	800ce48 <xPortStartScheduler+0xb8>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	60bb      	str	r3, [r7, #8]
}
 800ce44:	bf00      	nop
 800ce46:	e7fe      	b.n	800ce46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce48:	4b1e      	ldr	r3, [pc, #120]	; (800cec4 <xPortStartScheduler+0x134>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	021b      	lsls	r3, r3, #8
 800ce4e:	4a1d      	ldr	r2, [pc, #116]	; (800cec4 <xPortStartScheduler+0x134>)
 800ce50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce52:	4b1c      	ldr	r3, [pc, #112]	; (800cec4 <xPortStartScheduler+0x134>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce5a:	4a1a      	ldr	r2, [pc, #104]	; (800cec4 <xPortStartScheduler+0x134>)
 800ce5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce66:	4b18      	ldr	r3, [pc, #96]	; (800cec8 <xPortStartScheduler+0x138>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a17      	ldr	r2, [pc, #92]	; (800cec8 <xPortStartScheduler+0x138>)
 800ce6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce72:	4b15      	ldr	r3, [pc, #84]	; (800cec8 <xPortStartScheduler+0x138>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a14      	ldr	r2, [pc, #80]	; (800cec8 <xPortStartScheduler+0x138>)
 800ce78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce7e:	f000 f8dd 	bl	800d03c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce82:	4b12      	ldr	r3, [pc, #72]	; (800cecc <xPortStartScheduler+0x13c>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce88:	f000 f8fc 	bl	800d084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce8c:	4b10      	ldr	r3, [pc, #64]	; (800ced0 <xPortStartScheduler+0x140>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4a0f      	ldr	r2, [pc, #60]	; (800ced0 <xPortStartScheduler+0x140>)
 800ce92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ce96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce98:	f7ff ff66 	bl	800cd68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce9c:	f7fe ff38 	bl	800bd10 <vTaskSwitchContext>
	prvTaskExitError();
 800cea0:	f7ff ff1c 	bl	800ccdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3718      	adds	r7, #24
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	e000ed00 	.word	0xe000ed00
 800ceb4:	410fc271 	.word	0x410fc271
 800ceb8:	410fc270 	.word	0x410fc270
 800cebc:	e000e400 	.word	0xe000e400
 800cec0:	20002bec 	.word	0x20002bec
 800cec4:	20002bf0 	.word	0x20002bf0
 800cec8:	e000ed20 	.word	0xe000ed20
 800cecc:	20000040 	.word	0x20000040
 800ced0:	e000ef34 	.word	0xe000ef34

0800ced4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
	__asm volatile
 800ceda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cede:	f383 8811 	msr	BASEPRI, r3
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	607b      	str	r3, [r7, #4]
}
 800ceec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ceee:	4b0f      	ldr	r3, [pc, #60]	; (800cf2c <vPortEnterCritical+0x58>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	3301      	adds	r3, #1
 800cef4:	4a0d      	ldr	r2, [pc, #52]	; (800cf2c <vPortEnterCritical+0x58>)
 800cef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cef8:	4b0c      	ldr	r3, [pc, #48]	; (800cf2c <vPortEnterCritical+0x58>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d10f      	bne.n	800cf20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf00:	4b0b      	ldr	r3, [pc, #44]	; (800cf30 <vPortEnterCritical+0x5c>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00a      	beq.n	800cf20 <vPortEnterCritical+0x4c>
	__asm volatile
 800cf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	603b      	str	r3, [r7, #0]
}
 800cf1c:	bf00      	nop
 800cf1e:	e7fe      	b.n	800cf1e <vPortEnterCritical+0x4a>
	}
}
 800cf20:	bf00      	nop
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr
 800cf2c:	20000040 	.word	0x20000040
 800cf30:	e000ed04 	.word	0xe000ed04

0800cf34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf3a:	4b12      	ldr	r3, [pc, #72]	; (800cf84 <vPortExitCritical+0x50>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d10a      	bne.n	800cf58 <vPortExitCritical+0x24>
	__asm volatile
 800cf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	607b      	str	r3, [r7, #4]
}
 800cf54:	bf00      	nop
 800cf56:	e7fe      	b.n	800cf56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf58:	4b0a      	ldr	r3, [pc, #40]	; (800cf84 <vPortExitCritical+0x50>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	3b01      	subs	r3, #1
 800cf5e:	4a09      	ldr	r2, [pc, #36]	; (800cf84 <vPortExitCritical+0x50>)
 800cf60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf62:	4b08      	ldr	r3, [pc, #32]	; (800cf84 <vPortExitCritical+0x50>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d105      	bne.n	800cf76 <vPortExitCritical+0x42>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	f383 8811 	msr	BASEPRI, r3
}
 800cf74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf76:	bf00      	nop
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	20000040 	.word	0x20000040
	...

0800cf90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf90:	f3ef 8009 	mrs	r0, PSP
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	4b15      	ldr	r3, [pc, #84]	; (800cff0 <pxCurrentTCBConst>)
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	f01e 0f10 	tst.w	lr, #16
 800cfa0:	bf08      	it	eq
 800cfa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cfa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfaa:	6010      	str	r0, [r2, #0]
 800cfac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cfb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cfb4:	f380 8811 	msr	BASEPRI, r0
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	f3bf 8f6f 	isb	sy
 800cfc0:	f7fe fea6 	bl	800bd10 <vTaskSwitchContext>
 800cfc4:	f04f 0000 	mov.w	r0, #0
 800cfc8:	f380 8811 	msr	BASEPRI, r0
 800cfcc:	bc09      	pop	{r0, r3}
 800cfce:	6819      	ldr	r1, [r3, #0]
 800cfd0:	6808      	ldr	r0, [r1, #0]
 800cfd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd6:	f01e 0f10 	tst.w	lr, #16
 800cfda:	bf08      	it	eq
 800cfdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cfe0:	f380 8809 	msr	PSP, r0
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	f3af 8000 	nop.w

0800cff0 <pxCurrentTCBConst>:
 800cff0:	200025c0 	.word	0x200025c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cff4:	bf00      	nop
 800cff6:	bf00      	nop

0800cff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
	__asm volatile
 800cffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d002:	f383 8811 	msr	BASEPRI, r3
 800d006:	f3bf 8f6f 	isb	sy
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	607b      	str	r3, [r7, #4]
}
 800d010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d012:	f7fe fdc3 	bl	800bb9c <xTaskIncrementTick>
 800d016:	4603      	mov	r3, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d003      	beq.n	800d024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d01c:	4b06      	ldr	r3, [pc, #24]	; (800d038 <xPortSysTickHandler+0x40>)
 800d01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d022:	601a      	str	r2, [r3, #0]
 800d024:	2300      	movs	r3, #0
 800d026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	f383 8811 	msr	BASEPRI, r3
}
 800d02e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d030:	bf00      	nop
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	e000ed04 	.word	0xe000ed04

0800d03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d03c:	b480      	push	{r7}
 800d03e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d040:	4b0b      	ldr	r3, [pc, #44]	; (800d070 <vPortSetupTimerInterrupt+0x34>)
 800d042:	2200      	movs	r2, #0
 800d044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d046:	4b0b      	ldr	r3, [pc, #44]	; (800d074 <vPortSetupTimerInterrupt+0x38>)
 800d048:	2200      	movs	r2, #0
 800d04a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d04c:	4b0a      	ldr	r3, [pc, #40]	; (800d078 <vPortSetupTimerInterrupt+0x3c>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a0a      	ldr	r2, [pc, #40]	; (800d07c <vPortSetupTimerInterrupt+0x40>)
 800d052:	fba2 2303 	umull	r2, r3, r2, r3
 800d056:	099b      	lsrs	r3, r3, #6
 800d058:	4a09      	ldr	r2, [pc, #36]	; (800d080 <vPortSetupTimerInterrupt+0x44>)
 800d05a:	3b01      	subs	r3, #1
 800d05c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d05e:	4b04      	ldr	r3, [pc, #16]	; (800d070 <vPortSetupTimerInterrupt+0x34>)
 800d060:	2207      	movs	r2, #7
 800d062:	601a      	str	r2, [r3, #0]
}
 800d064:	bf00      	nop
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr
 800d06e:	bf00      	nop
 800d070:	e000e010 	.word	0xe000e010
 800d074:	e000e018 	.word	0xe000e018
 800d078:	20000034 	.word	0x20000034
 800d07c:	10624dd3 	.word	0x10624dd3
 800d080:	e000e014 	.word	0xe000e014

0800d084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d094 <vPortEnableVFP+0x10>
 800d088:	6801      	ldr	r1, [r0, #0]
 800d08a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d08e:	6001      	str	r1, [r0, #0]
 800d090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d092:	bf00      	nop
 800d094:	e000ed88 	.word	0xe000ed88

0800d098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d098:	b480      	push	{r7}
 800d09a:	b085      	sub	sp, #20
 800d09c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d09e:	f3ef 8305 	mrs	r3, IPSR
 800d0a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2b0f      	cmp	r3, #15
 800d0a8:	d914      	bls.n	800d0d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d0aa:	4a17      	ldr	r2, [pc, #92]	; (800d108 <vPortValidateInterruptPriority+0x70>)
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d0b4:	4b15      	ldr	r3, [pc, #84]	; (800d10c <vPortValidateInterruptPriority+0x74>)
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	7afa      	ldrb	r2, [r7, #11]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d20a      	bcs.n	800d0d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	607b      	str	r3, [r7, #4]
}
 800d0d0:	bf00      	nop
 800d0d2:	e7fe      	b.n	800d0d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d0d4:	4b0e      	ldr	r3, [pc, #56]	; (800d110 <vPortValidateInterruptPriority+0x78>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d0dc:	4b0d      	ldr	r3, [pc, #52]	; (800d114 <vPortValidateInterruptPriority+0x7c>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d90a      	bls.n	800d0fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e8:	f383 8811 	msr	BASEPRI, r3
 800d0ec:	f3bf 8f6f 	isb	sy
 800d0f0:	f3bf 8f4f 	dsb	sy
 800d0f4:	603b      	str	r3, [r7, #0]
}
 800d0f6:	bf00      	nop
 800d0f8:	e7fe      	b.n	800d0f8 <vPortValidateInterruptPriority+0x60>
	}
 800d0fa:	bf00      	nop
 800d0fc:	3714      	adds	r7, #20
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	e000e3f0 	.word	0xe000e3f0
 800d10c:	20002bec 	.word	0x20002bec
 800d110:	e000ed0c 	.word	0xe000ed0c
 800d114:	20002bf0 	.word	0x20002bf0

0800d118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08a      	sub	sp, #40	; 0x28
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d120:	2300      	movs	r3, #0
 800d122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d124:	f7fe fc7e 	bl	800ba24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d128:	4b5b      	ldr	r3, [pc, #364]	; (800d298 <pvPortMalloc+0x180>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d101      	bne.n	800d134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d130:	f000 f920 	bl	800d374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d134:	4b59      	ldr	r3, [pc, #356]	; (800d29c <pvPortMalloc+0x184>)
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	4013      	ands	r3, r2
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f040 8093 	bne.w	800d268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d01d      	beq.n	800d184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d148:	2208      	movs	r2, #8
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4413      	add	r3, r2
 800d14e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f003 0307 	and.w	r3, r3, #7
 800d156:	2b00      	cmp	r3, #0
 800d158:	d014      	beq.n	800d184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f023 0307 	bic.w	r3, r3, #7
 800d160:	3308      	adds	r3, #8
 800d162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f003 0307 	and.w	r3, r3, #7
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00a      	beq.n	800d184 <pvPortMalloc+0x6c>
	__asm volatile
 800d16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d172:	f383 8811 	msr	BASEPRI, r3
 800d176:	f3bf 8f6f 	isb	sy
 800d17a:	f3bf 8f4f 	dsb	sy
 800d17e:	617b      	str	r3, [r7, #20]
}
 800d180:	bf00      	nop
 800d182:	e7fe      	b.n	800d182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d06e      	beq.n	800d268 <pvPortMalloc+0x150>
 800d18a:	4b45      	ldr	r3, [pc, #276]	; (800d2a0 <pvPortMalloc+0x188>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	429a      	cmp	r2, r3
 800d192:	d869      	bhi.n	800d268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d194:	4b43      	ldr	r3, [pc, #268]	; (800d2a4 <pvPortMalloc+0x18c>)
 800d196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d198:	4b42      	ldr	r3, [pc, #264]	; (800d2a4 <pvPortMalloc+0x18c>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d19e:	e004      	b.n	800d1aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d903      	bls.n	800d1bc <pvPortMalloc+0xa4>
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1f1      	bne.n	800d1a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d1bc:	4b36      	ldr	r3, [pc, #216]	; (800d298 <pvPortMalloc+0x180>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d050      	beq.n	800d268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d1c6:	6a3b      	ldr	r3, [r7, #32]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2208      	movs	r2, #8
 800d1cc:	4413      	add	r3, r2
 800d1ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	6a3b      	ldr	r3, [r7, #32]
 800d1d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1da:	685a      	ldr	r2, [r3, #4]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	1ad2      	subs	r2, r2, r3
 800d1e0:	2308      	movs	r3, #8
 800d1e2:	005b      	lsls	r3, r3, #1
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d91f      	bls.n	800d228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	f003 0307 	and.w	r3, r3, #7
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00a      	beq.n	800d210 <pvPortMalloc+0xf8>
	__asm volatile
 800d1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	613b      	str	r3, [r7, #16]
}
 800d20c:	bf00      	nop
 800d20e:	e7fe      	b.n	800d20e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d212:	685a      	ldr	r2, [r3, #4]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	1ad2      	subs	r2, r2, r3
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d222:	69b8      	ldr	r0, [r7, #24]
 800d224:	f000 f908 	bl	800d438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d228:	4b1d      	ldr	r3, [pc, #116]	; (800d2a0 <pvPortMalloc+0x188>)
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	1ad3      	subs	r3, r2, r3
 800d232:	4a1b      	ldr	r2, [pc, #108]	; (800d2a0 <pvPortMalloc+0x188>)
 800d234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d236:	4b1a      	ldr	r3, [pc, #104]	; (800d2a0 <pvPortMalloc+0x188>)
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	4b1b      	ldr	r3, [pc, #108]	; (800d2a8 <pvPortMalloc+0x190>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	429a      	cmp	r2, r3
 800d240:	d203      	bcs.n	800d24a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d242:	4b17      	ldr	r3, [pc, #92]	; (800d2a0 <pvPortMalloc+0x188>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4a18      	ldr	r2, [pc, #96]	; (800d2a8 <pvPortMalloc+0x190>)
 800d248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24c:	685a      	ldr	r2, [r3, #4]
 800d24e:	4b13      	ldr	r3, [pc, #76]	; (800d29c <pvPortMalloc+0x184>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	431a      	orrs	r2, r3
 800d254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	2200      	movs	r2, #0
 800d25c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d25e:	4b13      	ldr	r3, [pc, #76]	; (800d2ac <pvPortMalloc+0x194>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	3301      	adds	r3, #1
 800d264:	4a11      	ldr	r2, [pc, #68]	; (800d2ac <pvPortMalloc+0x194>)
 800d266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d268:	f7fe fbea 	bl	800ba40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	f003 0307 	and.w	r3, r3, #7
 800d272:	2b00      	cmp	r3, #0
 800d274:	d00a      	beq.n	800d28c <pvPortMalloc+0x174>
	__asm volatile
 800d276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	60fb      	str	r3, [r7, #12]
}
 800d288:	bf00      	nop
 800d28a:	e7fe      	b.n	800d28a <pvPortMalloc+0x172>
	return pvReturn;
 800d28c:	69fb      	ldr	r3, [r7, #28]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3728      	adds	r7, #40	; 0x28
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	200037b4 	.word	0x200037b4
 800d29c:	200037c8 	.word	0x200037c8
 800d2a0:	200037b8 	.word	0x200037b8
 800d2a4:	200037ac 	.word	0x200037ac
 800d2a8:	200037bc 	.word	0x200037bc
 800d2ac:	200037c0 	.word	0x200037c0

0800d2b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d04d      	beq.n	800d35e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d2c2:	2308      	movs	r3, #8
 800d2c4:	425b      	negs	r3, r3
 800d2c6:	697a      	ldr	r2, [r7, #20]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	685a      	ldr	r2, [r3, #4]
 800d2d4:	4b24      	ldr	r3, [pc, #144]	; (800d368 <vPortFree+0xb8>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4013      	ands	r3, r2
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d10a      	bne.n	800d2f4 <vPortFree+0x44>
	__asm volatile
 800d2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e2:	f383 8811 	msr	BASEPRI, r3
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	60fb      	str	r3, [r7, #12]
}
 800d2f0:	bf00      	nop
 800d2f2:	e7fe      	b.n	800d2f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d00a      	beq.n	800d312 <vPortFree+0x62>
	__asm volatile
 800d2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d300:	f383 8811 	msr	BASEPRI, r3
 800d304:	f3bf 8f6f 	isb	sy
 800d308:	f3bf 8f4f 	dsb	sy
 800d30c:	60bb      	str	r3, [r7, #8]
}
 800d30e:	bf00      	nop
 800d310:	e7fe      	b.n	800d310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	685a      	ldr	r2, [r3, #4]
 800d316:	4b14      	ldr	r3, [pc, #80]	; (800d368 <vPortFree+0xb8>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4013      	ands	r3, r2
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d01e      	beq.n	800d35e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d11a      	bne.n	800d35e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	685a      	ldr	r2, [r3, #4]
 800d32c:	4b0e      	ldr	r3, [pc, #56]	; (800d368 <vPortFree+0xb8>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	43db      	mvns	r3, r3
 800d332:	401a      	ands	r2, r3
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d338:	f7fe fb74 	bl	800ba24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	685a      	ldr	r2, [r3, #4]
 800d340:	4b0a      	ldr	r3, [pc, #40]	; (800d36c <vPortFree+0xbc>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4413      	add	r3, r2
 800d346:	4a09      	ldr	r2, [pc, #36]	; (800d36c <vPortFree+0xbc>)
 800d348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d34a:	6938      	ldr	r0, [r7, #16]
 800d34c:	f000 f874 	bl	800d438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d350:	4b07      	ldr	r3, [pc, #28]	; (800d370 <vPortFree+0xc0>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	3301      	adds	r3, #1
 800d356:	4a06      	ldr	r2, [pc, #24]	; (800d370 <vPortFree+0xc0>)
 800d358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d35a:	f7fe fb71 	bl	800ba40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d35e:	bf00      	nop
 800d360:	3718      	adds	r7, #24
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	200037c8 	.word	0x200037c8
 800d36c:	200037b8 	.word	0x200037b8
 800d370:	200037c4 	.word	0x200037c4

0800d374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d374:	b480      	push	{r7}
 800d376:	b085      	sub	sp, #20
 800d378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d37a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d37e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d380:	4b27      	ldr	r3, [pc, #156]	; (800d420 <prvHeapInit+0xac>)
 800d382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f003 0307 	and.w	r3, r3, #7
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00c      	beq.n	800d3a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3307      	adds	r3, #7
 800d392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f023 0307 	bic.w	r3, r3, #7
 800d39a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d39c:	68ba      	ldr	r2, [r7, #8]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	1ad3      	subs	r3, r2, r3
 800d3a2:	4a1f      	ldr	r2, [pc, #124]	; (800d420 <prvHeapInit+0xac>)
 800d3a4:	4413      	add	r3, r2
 800d3a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d3ac:	4a1d      	ldr	r2, [pc, #116]	; (800d424 <prvHeapInit+0xb0>)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d3b2:	4b1c      	ldr	r3, [pc, #112]	; (800d424 <prvHeapInit+0xb0>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	68ba      	ldr	r2, [r7, #8]
 800d3bc:	4413      	add	r3, r2
 800d3be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d3c0:	2208      	movs	r2, #8
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	1a9b      	subs	r3, r3, r2
 800d3c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f023 0307 	bic.w	r3, r3, #7
 800d3ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	4a15      	ldr	r2, [pc, #84]	; (800d428 <prvHeapInit+0xb4>)
 800d3d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d3d6:	4b14      	ldr	r3, [pc, #80]	; (800d428 <prvHeapInit+0xb4>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d3de:	4b12      	ldr	r3, [pc, #72]	; (800d428 <prvHeapInit+0xb4>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	1ad2      	subs	r2, r2, r3
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d3f4:	4b0c      	ldr	r3, [pc, #48]	; (800d428 <prvHeapInit+0xb4>)
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	4a0a      	ldr	r2, [pc, #40]	; (800d42c <prvHeapInit+0xb8>)
 800d402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	4a09      	ldr	r2, [pc, #36]	; (800d430 <prvHeapInit+0xbc>)
 800d40a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d40c:	4b09      	ldr	r3, [pc, #36]	; (800d434 <prvHeapInit+0xc0>)
 800d40e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d412:	601a      	str	r2, [r3, #0]
}
 800d414:	bf00      	nop
 800d416:	3714      	adds	r7, #20
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr
 800d420:	20002bf4 	.word	0x20002bf4
 800d424:	200037ac 	.word	0x200037ac
 800d428:	200037b4 	.word	0x200037b4
 800d42c:	200037bc 	.word	0x200037bc
 800d430:	200037b8 	.word	0x200037b8
 800d434:	200037c8 	.word	0x200037c8

0800d438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d438:	b480      	push	{r7}
 800d43a:	b085      	sub	sp, #20
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d440:	4b28      	ldr	r3, [pc, #160]	; (800d4e4 <prvInsertBlockIntoFreeList+0xac>)
 800d442:	60fb      	str	r3, [r7, #12]
 800d444:	e002      	b.n	800d44c <prvInsertBlockIntoFreeList+0x14>
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	429a      	cmp	r2, r3
 800d454:	d8f7      	bhi.n	800d446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	68ba      	ldr	r2, [r7, #8]
 800d460:	4413      	add	r3, r2
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	429a      	cmp	r2, r3
 800d466:	d108      	bne.n	800d47a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	685a      	ldr	r2, [r3, #4]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	441a      	add	r2, r3
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	68ba      	ldr	r2, [r7, #8]
 800d484:	441a      	add	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d118      	bne.n	800d4c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	4b15      	ldr	r3, [pc, #84]	; (800d4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	429a      	cmp	r2, r3
 800d498:	d00d      	beq.n	800d4b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	685a      	ldr	r2, [r3, #4]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	441a      	add	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	601a      	str	r2, [r3, #0]
 800d4b4:	e008      	b.n	800d4c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d4b6:	4b0c      	ldr	r3, [pc, #48]	; (800d4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	e003      	b.n	800d4c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d002      	beq.n	800d4d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4d6:	bf00      	nop
 800d4d8:	3714      	adds	r7, #20
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop
 800d4e4:	200037ac 	.word	0x200037ac
 800d4e8:	200037b4 	.word	0x200037b4

0800d4ec <__errno>:
 800d4ec:	4b01      	ldr	r3, [pc, #4]	; (800d4f4 <__errno+0x8>)
 800d4ee:	6818      	ldr	r0, [r3, #0]
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	20000044 	.word	0x20000044

0800d4f8 <__libc_init_array>:
 800d4f8:	b570      	push	{r4, r5, r6, lr}
 800d4fa:	4d0d      	ldr	r5, [pc, #52]	; (800d530 <__libc_init_array+0x38>)
 800d4fc:	4c0d      	ldr	r4, [pc, #52]	; (800d534 <__libc_init_array+0x3c>)
 800d4fe:	1b64      	subs	r4, r4, r5
 800d500:	10a4      	asrs	r4, r4, #2
 800d502:	2600      	movs	r6, #0
 800d504:	42a6      	cmp	r6, r4
 800d506:	d109      	bne.n	800d51c <__libc_init_array+0x24>
 800d508:	4d0b      	ldr	r5, [pc, #44]	; (800d538 <__libc_init_array+0x40>)
 800d50a:	4c0c      	ldr	r4, [pc, #48]	; (800d53c <__libc_init_array+0x44>)
 800d50c:	f002 fc26 	bl	800fd5c <_init>
 800d510:	1b64      	subs	r4, r4, r5
 800d512:	10a4      	asrs	r4, r4, #2
 800d514:	2600      	movs	r6, #0
 800d516:	42a6      	cmp	r6, r4
 800d518:	d105      	bne.n	800d526 <__libc_init_array+0x2e>
 800d51a:	bd70      	pop	{r4, r5, r6, pc}
 800d51c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d520:	4798      	blx	r3
 800d522:	3601      	adds	r6, #1
 800d524:	e7ee      	b.n	800d504 <__libc_init_array+0xc>
 800d526:	f855 3b04 	ldr.w	r3, [r5], #4
 800d52a:	4798      	blx	r3
 800d52c:	3601      	adds	r6, #1
 800d52e:	e7f2      	b.n	800d516 <__libc_init_array+0x1e>
 800d530:	080106d8 	.word	0x080106d8
 800d534:	080106d8 	.word	0x080106d8
 800d538:	080106d8 	.word	0x080106d8
 800d53c:	080106dc 	.word	0x080106dc

0800d540 <__retarget_lock_acquire_recursive>:
 800d540:	4770      	bx	lr

0800d542 <__retarget_lock_release_recursive>:
 800d542:	4770      	bx	lr

0800d544 <memcpy>:
 800d544:	440a      	add	r2, r1
 800d546:	4291      	cmp	r1, r2
 800d548:	f100 33ff 	add.w	r3, r0, #4294967295
 800d54c:	d100      	bne.n	800d550 <memcpy+0xc>
 800d54e:	4770      	bx	lr
 800d550:	b510      	push	{r4, lr}
 800d552:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d55a:	4291      	cmp	r1, r2
 800d55c:	d1f9      	bne.n	800d552 <memcpy+0xe>
 800d55e:	bd10      	pop	{r4, pc}

0800d560 <memset>:
 800d560:	4402      	add	r2, r0
 800d562:	4603      	mov	r3, r0
 800d564:	4293      	cmp	r3, r2
 800d566:	d100      	bne.n	800d56a <memset+0xa>
 800d568:	4770      	bx	lr
 800d56a:	f803 1b01 	strb.w	r1, [r3], #1
 800d56e:	e7f9      	b.n	800d564 <memset+0x4>

0800d570 <sbrk_aligned>:
 800d570:	b570      	push	{r4, r5, r6, lr}
 800d572:	4e0e      	ldr	r6, [pc, #56]	; (800d5ac <sbrk_aligned+0x3c>)
 800d574:	460c      	mov	r4, r1
 800d576:	6831      	ldr	r1, [r6, #0]
 800d578:	4605      	mov	r5, r0
 800d57a:	b911      	cbnz	r1, 800d582 <sbrk_aligned+0x12>
 800d57c:	f000 f8f6 	bl	800d76c <_sbrk_r>
 800d580:	6030      	str	r0, [r6, #0]
 800d582:	4621      	mov	r1, r4
 800d584:	4628      	mov	r0, r5
 800d586:	f000 f8f1 	bl	800d76c <_sbrk_r>
 800d58a:	1c43      	adds	r3, r0, #1
 800d58c:	d00a      	beq.n	800d5a4 <sbrk_aligned+0x34>
 800d58e:	1cc4      	adds	r4, r0, #3
 800d590:	f024 0403 	bic.w	r4, r4, #3
 800d594:	42a0      	cmp	r0, r4
 800d596:	d007      	beq.n	800d5a8 <sbrk_aligned+0x38>
 800d598:	1a21      	subs	r1, r4, r0
 800d59a:	4628      	mov	r0, r5
 800d59c:	f000 f8e6 	bl	800d76c <_sbrk_r>
 800d5a0:	3001      	adds	r0, #1
 800d5a2:	d101      	bne.n	800d5a8 <sbrk_aligned+0x38>
 800d5a4:	f04f 34ff 	mov.w	r4, #4294967295
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	bd70      	pop	{r4, r5, r6, pc}
 800d5ac:	200037d4 	.word	0x200037d4

0800d5b0 <_malloc_r>:
 800d5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b4:	1ccd      	adds	r5, r1, #3
 800d5b6:	f025 0503 	bic.w	r5, r5, #3
 800d5ba:	3508      	adds	r5, #8
 800d5bc:	2d0c      	cmp	r5, #12
 800d5be:	bf38      	it	cc
 800d5c0:	250c      	movcc	r5, #12
 800d5c2:	2d00      	cmp	r5, #0
 800d5c4:	4607      	mov	r7, r0
 800d5c6:	db01      	blt.n	800d5cc <_malloc_r+0x1c>
 800d5c8:	42a9      	cmp	r1, r5
 800d5ca:	d905      	bls.n	800d5d8 <_malloc_r+0x28>
 800d5cc:	230c      	movs	r3, #12
 800d5ce:	603b      	str	r3, [r7, #0]
 800d5d0:	2600      	movs	r6, #0
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d8:	4e2e      	ldr	r6, [pc, #184]	; (800d694 <_malloc_r+0xe4>)
 800d5da:	f000 f8f7 	bl	800d7cc <__malloc_lock>
 800d5de:	6833      	ldr	r3, [r6, #0]
 800d5e0:	461c      	mov	r4, r3
 800d5e2:	bb34      	cbnz	r4, 800d632 <_malloc_r+0x82>
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	f7ff ffc2 	bl	800d570 <sbrk_aligned>
 800d5ec:	1c43      	adds	r3, r0, #1
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	d14d      	bne.n	800d68e <_malloc_r+0xde>
 800d5f2:	6834      	ldr	r4, [r6, #0]
 800d5f4:	4626      	mov	r6, r4
 800d5f6:	2e00      	cmp	r6, #0
 800d5f8:	d140      	bne.n	800d67c <_malloc_r+0xcc>
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	4631      	mov	r1, r6
 800d5fe:	4638      	mov	r0, r7
 800d600:	eb04 0803 	add.w	r8, r4, r3
 800d604:	f000 f8b2 	bl	800d76c <_sbrk_r>
 800d608:	4580      	cmp	r8, r0
 800d60a:	d13a      	bne.n	800d682 <_malloc_r+0xd2>
 800d60c:	6821      	ldr	r1, [r4, #0]
 800d60e:	3503      	adds	r5, #3
 800d610:	1a6d      	subs	r5, r5, r1
 800d612:	f025 0503 	bic.w	r5, r5, #3
 800d616:	3508      	adds	r5, #8
 800d618:	2d0c      	cmp	r5, #12
 800d61a:	bf38      	it	cc
 800d61c:	250c      	movcc	r5, #12
 800d61e:	4629      	mov	r1, r5
 800d620:	4638      	mov	r0, r7
 800d622:	f7ff ffa5 	bl	800d570 <sbrk_aligned>
 800d626:	3001      	adds	r0, #1
 800d628:	d02b      	beq.n	800d682 <_malloc_r+0xd2>
 800d62a:	6823      	ldr	r3, [r4, #0]
 800d62c:	442b      	add	r3, r5
 800d62e:	6023      	str	r3, [r4, #0]
 800d630:	e00e      	b.n	800d650 <_malloc_r+0xa0>
 800d632:	6822      	ldr	r2, [r4, #0]
 800d634:	1b52      	subs	r2, r2, r5
 800d636:	d41e      	bmi.n	800d676 <_malloc_r+0xc6>
 800d638:	2a0b      	cmp	r2, #11
 800d63a:	d916      	bls.n	800d66a <_malloc_r+0xba>
 800d63c:	1961      	adds	r1, r4, r5
 800d63e:	42a3      	cmp	r3, r4
 800d640:	6025      	str	r5, [r4, #0]
 800d642:	bf18      	it	ne
 800d644:	6059      	strne	r1, [r3, #4]
 800d646:	6863      	ldr	r3, [r4, #4]
 800d648:	bf08      	it	eq
 800d64a:	6031      	streq	r1, [r6, #0]
 800d64c:	5162      	str	r2, [r4, r5]
 800d64e:	604b      	str	r3, [r1, #4]
 800d650:	4638      	mov	r0, r7
 800d652:	f104 060b 	add.w	r6, r4, #11
 800d656:	f000 f8bf 	bl	800d7d8 <__malloc_unlock>
 800d65a:	f026 0607 	bic.w	r6, r6, #7
 800d65e:	1d23      	adds	r3, r4, #4
 800d660:	1af2      	subs	r2, r6, r3
 800d662:	d0b6      	beq.n	800d5d2 <_malloc_r+0x22>
 800d664:	1b9b      	subs	r3, r3, r6
 800d666:	50a3      	str	r3, [r4, r2]
 800d668:	e7b3      	b.n	800d5d2 <_malloc_r+0x22>
 800d66a:	6862      	ldr	r2, [r4, #4]
 800d66c:	42a3      	cmp	r3, r4
 800d66e:	bf0c      	ite	eq
 800d670:	6032      	streq	r2, [r6, #0]
 800d672:	605a      	strne	r2, [r3, #4]
 800d674:	e7ec      	b.n	800d650 <_malloc_r+0xa0>
 800d676:	4623      	mov	r3, r4
 800d678:	6864      	ldr	r4, [r4, #4]
 800d67a:	e7b2      	b.n	800d5e2 <_malloc_r+0x32>
 800d67c:	4634      	mov	r4, r6
 800d67e:	6876      	ldr	r6, [r6, #4]
 800d680:	e7b9      	b.n	800d5f6 <_malloc_r+0x46>
 800d682:	230c      	movs	r3, #12
 800d684:	603b      	str	r3, [r7, #0]
 800d686:	4638      	mov	r0, r7
 800d688:	f000 f8a6 	bl	800d7d8 <__malloc_unlock>
 800d68c:	e7a1      	b.n	800d5d2 <_malloc_r+0x22>
 800d68e:	6025      	str	r5, [r4, #0]
 800d690:	e7de      	b.n	800d650 <_malloc_r+0xa0>
 800d692:	bf00      	nop
 800d694:	200037d0 	.word	0x200037d0

0800d698 <cleanup_glue>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	460c      	mov	r4, r1
 800d69c:	6809      	ldr	r1, [r1, #0]
 800d69e:	4605      	mov	r5, r0
 800d6a0:	b109      	cbz	r1, 800d6a6 <cleanup_glue+0xe>
 800d6a2:	f7ff fff9 	bl	800d698 <cleanup_glue>
 800d6a6:	4621      	mov	r1, r4
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6ae:	f000 b899 	b.w	800d7e4 <_free_r>
	...

0800d6b4 <_reclaim_reent>:
 800d6b4:	4b2c      	ldr	r3, [pc, #176]	; (800d768 <_reclaim_reent+0xb4>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4283      	cmp	r3, r0
 800d6ba:	b570      	push	{r4, r5, r6, lr}
 800d6bc:	4604      	mov	r4, r0
 800d6be:	d051      	beq.n	800d764 <_reclaim_reent+0xb0>
 800d6c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d6c2:	b143      	cbz	r3, 800d6d6 <_reclaim_reent+0x22>
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d14a      	bne.n	800d760 <_reclaim_reent+0xac>
 800d6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6cc:	6819      	ldr	r1, [r3, #0]
 800d6ce:	b111      	cbz	r1, 800d6d6 <_reclaim_reent+0x22>
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f000 f887 	bl	800d7e4 <_free_r>
 800d6d6:	6961      	ldr	r1, [r4, #20]
 800d6d8:	b111      	cbz	r1, 800d6e0 <_reclaim_reent+0x2c>
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f000 f882 	bl	800d7e4 <_free_r>
 800d6e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d6e2:	b111      	cbz	r1, 800d6ea <_reclaim_reent+0x36>
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f000 f87d 	bl	800d7e4 <_free_r>
 800d6ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d6ec:	b111      	cbz	r1, 800d6f4 <_reclaim_reent+0x40>
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f000 f878 	bl	800d7e4 <_free_r>
 800d6f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d6f6:	b111      	cbz	r1, 800d6fe <_reclaim_reent+0x4a>
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f000 f873 	bl	800d7e4 <_free_r>
 800d6fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d700:	b111      	cbz	r1, 800d708 <_reclaim_reent+0x54>
 800d702:	4620      	mov	r0, r4
 800d704:	f000 f86e 	bl	800d7e4 <_free_r>
 800d708:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d70a:	b111      	cbz	r1, 800d712 <_reclaim_reent+0x5e>
 800d70c:	4620      	mov	r0, r4
 800d70e:	f000 f869 	bl	800d7e4 <_free_r>
 800d712:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d714:	b111      	cbz	r1, 800d71c <_reclaim_reent+0x68>
 800d716:	4620      	mov	r0, r4
 800d718:	f000 f864 	bl	800d7e4 <_free_r>
 800d71c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d71e:	b111      	cbz	r1, 800d726 <_reclaim_reent+0x72>
 800d720:	4620      	mov	r0, r4
 800d722:	f000 f85f 	bl	800d7e4 <_free_r>
 800d726:	69a3      	ldr	r3, [r4, #24]
 800d728:	b1e3      	cbz	r3, 800d764 <_reclaim_reent+0xb0>
 800d72a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d72c:	4620      	mov	r0, r4
 800d72e:	4798      	blx	r3
 800d730:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d732:	b1b9      	cbz	r1, 800d764 <_reclaim_reent+0xb0>
 800d734:	4620      	mov	r0, r4
 800d736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d73a:	f7ff bfad 	b.w	800d698 <cleanup_glue>
 800d73e:	5949      	ldr	r1, [r1, r5]
 800d740:	b941      	cbnz	r1, 800d754 <_reclaim_reent+0xa0>
 800d742:	3504      	adds	r5, #4
 800d744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d746:	2d80      	cmp	r5, #128	; 0x80
 800d748:	68d9      	ldr	r1, [r3, #12]
 800d74a:	d1f8      	bne.n	800d73e <_reclaim_reent+0x8a>
 800d74c:	4620      	mov	r0, r4
 800d74e:	f000 f849 	bl	800d7e4 <_free_r>
 800d752:	e7ba      	b.n	800d6ca <_reclaim_reent+0x16>
 800d754:	680e      	ldr	r6, [r1, #0]
 800d756:	4620      	mov	r0, r4
 800d758:	f000 f844 	bl	800d7e4 <_free_r>
 800d75c:	4631      	mov	r1, r6
 800d75e:	e7ef      	b.n	800d740 <_reclaim_reent+0x8c>
 800d760:	2500      	movs	r5, #0
 800d762:	e7ef      	b.n	800d744 <_reclaim_reent+0x90>
 800d764:	bd70      	pop	{r4, r5, r6, pc}
 800d766:	bf00      	nop
 800d768:	20000044 	.word	0x20000044

0800d76c <_sbrk_r>:
 800d76c:	b538      	push	{r3, r4, r5, lr}
 800d76e:	4d06      	ldr	r5, [pc, #24]	; (800d788 <_sbrk_r+0x1c>)
 800d770:	2300      	movs	r3, #0
 800d772:	4604      	mov	r4, r0
 800d774:	4608      	mov	r0, r1
 800d776:	602b      	str	r3, [r5, #0]
 800d778:	f7f6 fcfa 	bl	8004170 <_sbrk>
 800d77c:	1c43      	adds	r3, r0, #1
 800d77e:	d102      	bne.n	800d786 <_sbrk_r+0x1a>
 800d780:	682b      	ldr	r3, [r5, #0]
 800d782:	b103      	cbz	r3, 800d786 <_sbrk_r+0x1a>
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	bd38      	pop	{r3, r4, r5, pc}
 800d788:	200037d8 	.word	0x200037d8

0800d78c <siprintf>:
 800d78c:	b40e      	push	{r1, r2, r3}
 800d78e:	b500      	push	{lr}
 800d790:	b09c      	sub	sp, #112	; 0x70
 800d792:	ab1d      	add	r3, sp, #116	; 0x74
 800d794:	9002      	str	r0, [sp, #8]
 800d796:	9006      	str	r0, [sp, #24]
 800d798:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d79c:	4809      	ldr	r0, [pc, #36]	; (800d7c4 <siprintf+0x38>)
 800d79e:	9107      	str	r1, [sp, #28]
 800d7a0:	9104      	str	r1, [sp, #16]
 800d7a2:	4909      	ldr	r1, [pc, #36]	; (800d7c8 <siprintf+0x3c>)
 800d7a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7a8:	9105      	str	r1, [sp, #20]
 800d7aa:	6800      	ldr	r0, [r0, #0]
 800d7ac:	9301      	str	r3, [sp, #4]
 800d7ae:	a902      	add	r1, sp, #8
 800d7b0:	f000 f8c0 	bl	800d934 <_svfiprintf_r>
 800d7b4:	9b02      	ldr	r3, [sp, #8]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	701a      	strb	r2, [r3, #0]
 800d7ba:	b01c      	add	sp, #112	; 0x70
 800d7bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7c0:	b003      	add	sp, #12
 800d7c2:	4770      	bx	lr
 800d7c4:	20000044 	.word	0x20000044
 800d7c8:	ffff0208 	.word	0xffff0208

0800d7cc <__malloc_lock>:
 800d7cc:	4801      	ldr	r0, [pc, #4]	; (800d7d4 <__malloc_lock+0x8>)
 800d7ce:	f7ff beb7 	b.w	800d540 <__retarget_lock_acquire_recursive>
 800d7d2:	bf00      	nop
 800d7d4:	200037cc 	.word	0x200037cc

0800d7d8 <__malloc_unlock>:
 800d7d8:	4801      	ldr	r0, [pc, #4]	; (800d7e0 <__malloc_unlock+0x8>)
 800d7da:	f7ff beb2 	b.w	800d542 <__retarget_lock_release_recursive>
 800d7de:	bf00      	nop
 800d7e0:	200037cc 	.word	0x200037cc

0800d7e4 <_free_r>:
 800d7e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7e6:	2900      	cmp	r1, #0
 800d7e8:	d044      	beq.n	800d874 <_free_r+0x90>
 800d7ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7ee:	9001      	str	r0, [sp, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f1a1 0404 	sub.w	r4, r1, #4
 800d7f6:	bfb8      	it	lt
 800d7f8:	18e4      	addlt	r4, r4, r3
 800d7fa:	f7ff ffe7 	bl	800d7cc <__malloc_lock>
 800d7fe:	4a1e      	ldr	r2, [pc, #120]	; (800d878 <_free_r+0x94>)
 800d800:	9801      	ldr	r0, [sp, #4]
 800d802:	6813      	ldr	r3, [r2, #0]
 800d804:	b933      	cbnz	r3, 800d814 <_free_r+0x30>
 800d806:	6063      	str	r3, [r4, #4]
 800d808:	6014      	str	r4, [r2, #0]
 800d80a:	b003      	add	sp, #12
 800d80c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d810:	f7ff bfe2 	b.w	800d7d8 <__malloc_unlock>
 800d814:	42a3      	cmp	r3, r4
 800d816:	d908      	bls.n	800d82a <_free_r+0x46>
 800d818:	6825      	ldr	r5, [r4, #0]
 800d81a:	1961      	adds	r1, r4, r5
 800d81c:	428b      	cmp	r3, r1
 800d81e:	bf01      	itttt	eq
 800d820:	6819      	ldreq	r1, [r3, #0]
 800d822:	685b      	ldreq	r3, [r3, #4]
 800d824:	1949      	addeq	r1, r1, r5
 800d826:	6021      	streq	r1, [r4, #0]
 800d828:	e7ed      	b.n	800d806 <_free_r+0x22>
 800d82a:	461a      	mov	r2, r3
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	b10b      	cbz	r3, 800d834 <_free_r+0x50>
 800d830:	42a3      	cmp	r3, r4
 800d832:	d9fa      	bls.n	800d82a <_free_r+0x46>
 800d834:	6811      	ldr	r1, [r2, #0]
 800d836:	1855      	adds	r5, r2, r1
 800d838:	42a5      	cmp	r5, r4
 800d83a:	d10b      	bne.n	800d854 <_free_r+0x70>
 800d83c:	6824      	ldr	r4, [r4, #0]
 800d83e:	4421      	add	r1, r4
 800d840:	1854      	adds	r4, r2, r1
 800d842:	42a3      	cmp	r3, r4
 800d844:	6011      	str	r1, [r2, #0]
 800d846:	d1e0      	bne.n	800d80a <_free_r+0x26>
 800d848:	681c      	ldr	r4, [r3, #0]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	6053      	str	r3, [r2, #4]
 800d84e:	4421      	add	r1, r4
 800d850:	6011      	str	r1, [r2, #0]
 800d852:	e7da      	b.n	800d80a <_free_r+0x26>
 800d854:	d902      	bls.n	800d85c <_free_r+0x78>
 800d856:	230c      	movs	r3, #12
 800d858:	6003      	str	r3, [r0, #0]
 800d85a:	e7d6      	b.n	800d80a <_free_r+0x26>
 800d85c:	6825      	ldr	r5, [r4, #0]
 800d85e:	1961      	adds	r1, r4, r5
 800d860:	428b      	cmp	r3, r1
 800d862:	bf04      	itt	eq
 800d864:	6819      	ldreq	r1, [r3, #0]
 800d866:	685b      	ldreq	r3, [r3, #4]
 800d868:	6063      	str	r3, [r4, #4]
 800d86a:	bf04      	itt	eq
 800d86c:	1949      	addeq	r1, r1, r5
 800d86e:	6021      	streq	r1, [r4, #0]
 800d870:	6054      	str	r4, [r2, #4]
 800d872:	e7ca      	b.n	800d80a <_free_r+0x26>
 800d874:	b003      	add	sp, #12
 800d876:	bd30      	pop	{r4, r5, pc}
 800d878:	200037d0 	.word	0x200037d0

0800d87c <__ssputs_r>:
 800d87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d880:	688e      	ldr	r6, [r1, #8]
 800d882:	429e      	cmp	r6, r3
 800d884:	4682      	mov	sl, r0
 800d886:	460c      	mov	r4, r1
 800d888:	4690      	mov	r8, r2
 800d88a:	461f      	mov	r7, r3
 800d88c:	d838      	bhi.n	800d900 <__ssputs_r+0x84>
 800d88e:	898a      	ldrh	r2, [r1, #12]
 800d890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d894:	d032      	beq.n	800d8fc <__ssputs_r+0x80>
 800d896:	6825      	ldr	r5, [r4, #0]
 800d898:	6909      	ldr	r1, [r1, #16]
 800d89a:	eba5 0901 	sub.w	r9, r5, r1
 800d89e:	6965      	ldr	r5, [r4, #20]
 800d8a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	444b      	add	r3, r9
 800d8ac:	106d      	asrs	r5, r5, #1
 800d8ae:	429d      	cmp	r5, r3
 800d8b0:	bf38      	it	cc
 800d8b2:	461d      	movcc	r5, r3
 800d8b4:	0553      	lsls	r3, r2, #21
 800d8b6:	d531      	bpl.n	800d91c <__ssputs_r+0xa0>
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	f7ff fe79 	bl	800d5b0 <_malloc_r>
 800d8be:	4606      	mov	r6, r0
 800d8c0:	b950      	cbnz	r0, 800d8d8 <__ssputs_r+0x5c>
 800d8c2:	230c      	movs	r3, #12
 800d8c4:	f8ca 3000 	str.w	r3, [sl]
 800d8c8:	89a3      	ldrh	r3, [r4, #12]
 800d8ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8ce:	81a3      	strh	r3, [r4, #12]
 800d8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d8:	6921      	ldr	r1, [r4, #16]
 800d8da:	464a      	mov	r2, r9
 800d8dc:	f7ff fe32 	bl	800d544 <memcpy>
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8ea:	81a3      	strh	r3, [r4, #12]
 800d8ec:	6126      	str	r6, [r4, #16]
 800d8ee:	6165      	str	r5, [r4, #20]
 800d8f0:	444e      	add	r6, r9
 800d8f2:	eba5 0509 	sub.w	r5, r5, r9
 800d8f6:	6026      	str	r6, [r4, #0]
 800d8f8:	60a5      	str	r5, [r4, #8]
 800d8fa:	463e      	mov	r6, r7
 800d8fc:	42be      	cmp	r6, r7
 800d8fe:	d900      	bls.n	800d902 <__ssputs_r+0x86>
 800d900:	463e      	mov	r6, r7
 800d902:	6820      	ldr	r0, [r4, #0]
 800d904:	4632      	mov	r2, r6
 800d906:	4641      	mov	r1, r8
 800d908:	f000 faa8 	bl	800de5c <memmove>
 800d90c:	68a3      	ldr	r3, [r4, #8]
 800d90e:	1b9b      	subs	r3, r3, r6
 800d910:	60a3      	str	r3, [r4, #8]
 800d912:	6823      	ldr	r3, [r4, #0]
 800d914:	4433      	add	r3, r6
 800d916:	6023      	str	r3, [r4, #0]
 800d918:	2000      	movs	r0, #0
 800d91a:	e7db      	b.n	800d8d4 <__ssputs_r+0x58>
 800d91c:	462a      	mov	r2, r5
 800d91e:	f000 fab7 	bl	800de90 <_realloc_r>
 800d922:	4606      	mov	r6, r0
 800d924:	2800      	cmp	r0, #0
 800d926:	d1e1      	bne.n	800d8ec <__ssputs_r+0x70>
 800d928:	6921      	ldr	r1, [r4, #16]
 800d92a:	4650      	mov	r0, sl
 800d92c:	f7ff ff5a 	bl	800d7e4 <_free_r>
 800d930:	e7c7      	b.n	800d8c2 <__ssputs_r+0x46>
	...

0800d934 <_svfiprintf_r>:
 800d934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d938:	4698      	mov	r8, r3
 800d93a:	898b      	ldrh	r3, [r1, #12]
 800d93c:	061b      	lsls	r3, r3, #24
 800d93e:	b09d      	sub	sp, #116	; 0x74
 800d940:	4607      	mov	r7, r0
 800d942:	460d      	mov	r5, r1
 800d944:	4614      	mov	r4, r2
 800d946:	d50e      	bpl.n	800d966 <_svfiprintf_r+0x32>
 800d948:	690b      	ldr	r3, [r1, #16]
 800d94a:	b963      	cbnz	r3, 800d966 <_svfiprintf_r+0x32>
 800d94c:	2140      	movs	r1, #64	; 0x40
 800d94e:	f7ff fe2f 	bl	800d5b0 <_malloc_r>
 800d952:	6028      	str	r0, [r5, #0]
 800d954:	6128      	str	r0, [r5, #16]
 800d956:	b920      	cbnz	r0, 800d962 <_svfiprintf_r+0x2e>
 800d958:	230c      	movs	r3, #12
 800d95a:	603b      	str	r3, [r7, #0]
 800d95c:	f04f 30ff 	mov.w	r0, #4294967295
 800d960:	e0d1      	b.n	800db06 <_svfiprintf_r+0x1d2>
 800d962:	2340      	movs	r3, #64	; 0x40
 800d964:	616b      	str	r3, [r5, #20]
 800d966:	2300      	movs	r3, #0
 800d968:	9309      	str	r3, [sp, #36]	; 0x24
 800d96a:	2320      	movs	r3, #32
 800d96c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d970:	f8cd 800c 	str.w	r8, [sp, #12]
 800d974:	2330      	movs	r3, #48	; 0x30
 800d976:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800db20 <_svfiprintf_r+0x1ec>
 800d97a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d97e:	f04f 0901 	mov.w	r9, #1
 800d982:	4623      	mov	r3, r4
 800d984:	469a      	mov	sl, r3
 800d986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d98a:	b10a      	cbz	r2, 800d990 <_svfiprintf_r+0x5c>
 800d98c:	2a25      	cmp	r2, #37	; 0x25
 800d98e:	d1f9      	bne.n	800d984 <_svfiprintf_r+0x50>
 800d990:	ebba 0b04 	subs.w	fp, sl, r4
 800d994:	d00b      	beq.n	800d9ae <_svfiprintf_r+0x7a>
 800d996:	465b      	mov	r3, fp
 800d998:	4622      	mov	r2, r4
 800d99a:	4629      	mov	r1, r5
 800d99c:	4638      	mov	r0, r7
 800d99e:	f7ff ff6d 	bl	800d87c <__ssputs_r>
 800d9a2:	3001      	adds	r0, #1
 800d9a4:	f000 80aa 	beq.w	800dafc <_svfiprintf_r+0x1c8>
 800d9a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9aa:	445a      	add	r2, fp
 800d9ac:	9209      	str	r2, [sp, #36]	; 0x24
 800d9ae:	f89a 3000 	ldrb.w	r3, [sl]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	f000 80a2 	beq.w	800dafc <_svfiprintf_r+0x1c8>
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d9be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9c2:	f10a 0a01 	add.w	sl, sl, #1
 800d9c6:	9304      	str	r3, [sp, #16]
 800d9c8:	9307      	str	r3, [sp, #28]
 800d9ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9ce:	931a      	str	r3, [sp, #104]	; 0x68
 800d9d0:	4654      	mov	r4, sl
 800d9d2:	2205      	movs	r2, #5
 800d9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9d8:	4851      	ldr	r0, [pc, #324]	; (800db20 <_svfiprintf_r+0x1ec>)
 800d9da:	f7f2 fc01 	bl	80001e0 <memchr>
 800d9de:	9a04      	ldr	r2, [sp, #16]
 800d9e0:	b9d8      	cbnz	r0, 800da1a <_svfiprintf_r+0xe6>
 800d9e2:	06d0      	lsls	r0, r2, #27
 800d9e4:	bf44      	itt	mi
 800d9e6:	2320      	movmi	r3, #32
 800d9e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9ec:	0711      	lsls	r1, r2, #28
 800d9ee:	bf44      	itt	mi
 800d9f0:	232b      	movmi	r3, #43	; 0x2b
 800d9f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9f6:	f89a 3000 	ldrb.w	r3, [sl]
 800d9fa:	2b2a      	cmp	r3, #42	; 0x2a
 800d9fc:	d015      	beq.n	800da2a <_svfiprintf_r+0xf6>
 800d9fe:	9a07      	ldr	r2, [sp, #28]
 800da00:	4654      	mov	r4, sl
 800da02:	2000      	movs	r0, #0
 800da04:	f04f 0c0a 	mov.w	ip, #10
 800da08:	4621      	mov	r1, r4
 800da0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da0e:	3b30      	subs	r3, #48	; 0x30
 800da10:	2b09      	cmp	r3, #9
 800da12:	d94e      	bls.n	800dab2 <_svfiprintf_r+0x17e>
 800da14:	b1b0      	cbz	r0, 800da44 <_svfiprintf_r+0x110>
 800da16:	9207      	str	r2, [sp, #28]
 800da18:	e014      	b.n	800da44 <_svfiprintf_r+0x110>
 800da1a:	eba0 0308 	sub.w	r3, r0, r8
 800da1e:	fa09 f303 	lsl.w	r3, r9, r3
 800da22:	4313      	orrs	r3, r2
 800da24:	9304      	str	r3, [sp, #16]
 800da26:	46a2      	mov	sl, r4
 800da28:	e7d2      	b.n	800d9d0 <_svfiprintf_r+0x9c>
 800da2a:	9b03      	ldr	r3, [sp, #12]
 800da2c:	1d19      	adds	r1, r3, #4
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	9103      	str	r1, [sp, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	bfbb      	ittet	lt
 800da36:	425b      	neglt	r3, r3
 800da38:	f042 0202 	orrlt.w	r2, r2, #2
 800da3c:	9307      	strge	r3, [sp, #28]
 800da3e:	9307      	strlt	r3, [sp, #28]
 800da40:	bfb8      	it	lt
 800da42:	9204      	strlt	r2, [sp, #16]
 800da44:	7823      	ldrb	r3, [r4, #0]
 800da46:	2b2e      	cmp	r3, #46	; 0x2e
 800da48:	d10c      	bne.n	800da64 <_svfiprintf_r+0x130>
 800da4a:	7863      	ldrb	r3, [r4, #1]
 800da4c:	2b2a      	cmp	r3, #42	; 0x2a
 800da4e:	d135      	bne.n	800dabc <_svfiprintf_r+0x188>
 800da50:	9b03      	ldr	r3, [sp, #12]
 800da52:	1d1a      	adds	r2, r3, #4
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	9203      	str	r2, [sp, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	bfb8      	it	lt
 800da5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800da60:	3402      	adds	r4, #2
 800da62:	9305      	str	r3, [sp, #20]
 800da64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db30 <_svfiprintf_r+0x1fc>
 800da68:	7821      	ldrb	r1, [r4, #0]
 800da6a:	2203      	movs	r2, #3
 800da6c:	4650      	mov	r0, sl
 800da6e:	f7f2 fbb7 	bl	80001e0 <memchr>
 800da72:	b140      	cbz	r0, 800da86 <_svfiprintf_r+0x152>
 800da74:	2340      	movs	r3, #64	; 0x40
 800da76:	eba0 000a 	sub.w	r0, r0, sl
 800da7a:	fa03 f000 	lsl.w	r0, r3, r0
 800da7e:	9b04      	ldr	r3, [sp, #16]
 800da80:	4303      	orrs	r3, r0
 800da82:	3401      	adds	r4, #1
 800da84:	9304      	str	r3, [sp, #16]
 800da86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da8a:	4826      	ldr	r0, [pc, #152]	; (800db24 <_svfiprintf_r+0x1f0>)
 800da8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da90:	2206      	movs	r2, #6
 800da92:	f7f2 fba5 	bl	80001e0 <memchr>
 800da96:	2800      	cmp	r0, #0
 800da98:	d038      	beq.n	800db0c <_svfiprintf_r+0x1d8>
 800da9a:	4b23      	ldr	r3, [pc, #140]	; (800db28 <_svfiprintf_r+0x1f4>)
 800da9c:	bb1b      	cbnz	r3, 800dae6 <_svfiprintf_r+0x1b2>
 800da9e:	9b03      	ldr	r3, [sp, #12]
 800daa0:	3307      	adds	r3, #7
 800daa2:	f023 0307 	bic.w	r3, r3, #7
 800daa6:	3308      	adds	r3, #8
 800daa8:	9303      	str	r3, [sp, #12]
 800daaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daac:	4433      	add	r3, r6
 800daae:	9309      	str	r3, [sp, #36]	; 0x24
 800dab0:	e767      	b.n	800d982 <_svfiprintf_r+0x4e>
 800dab2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dab6:	460c      	mov	r4, r1
 800dab8:	2001      	movs	r0, #1
 800daba:	e7a5      	b.n	800da08 <_svfiprintf_r+0xd4>
 800dabc:	2300      	movs	r3, #0
 800dabe:	3401      	adds	r4, #1
 800dac0:	9305      	str	r3, [sp, #20]
 800dac2:	4619      	mov	r1, r3
 800dac4:	f04f 0c0a 	mov.w	ip, #10
 800dac8:	4620      	mov	r0, r4
 800daca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dace:	3a30      	subs	r2, #48	; 0x30
 800dad0:	2a09      	cmp	r2, #9
 800dad2:	d903      	bls.n	800dadc <_svfiprintf_r+0x1a8>
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d0c5      	beq.n	800da64 <_svfiprintf_r+0x130>
 800dad8:	9105      	str	r1, [sp, #20]
 800dada:	e7c3      	b.n	800da64 <_svfiprintf_r+0x130>
 800dadc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dae0:	4604      	mov	r4, r0
 800dae2:	2301      	movs	r3, #1
 800dae4:	e7f0      	b.n	800dac8 <_svfiprintf_r+0x194>
 800dae6:	ab03      	add	r3, sp, #12
 800dae8:	9300      	str	r3, [sp, #0]
 800daea:	462a      	mov	r2, r5
 800daec:	4b0f      	ldr	r3, [pc, #60]	; (800db2c <_svfiprintf_r+0x1f8>)
 800daee:	a904      	add	r1, sp, #16
 800daf0:	4638      	mov	r0, r7
 800daf2:	f3af 8000 	nop.w
 800daf6:	1c42      	adds	r2, r0, #1
 800daf8:	4606      	mov	r6, r0
 800dafa:	d1d6      	bne.n	800daaa <_svfiprintf_r+0x176>
 800dafc:	89ab      	ldrh	r3, [r5, #12]
 800dafe:	065b      	lsls	r3, r3, #25
 800db00:	f53f af2c 	bmi.w	800d95c <_svfiprintf_r+0x28>
 800db04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db06:	b01d      	add	sp, #116	; 0x74
 800db08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db0c:	ab03      	add	r3, sp, #12
 800db0e:	9300      	str	r3, [sp, #0]
 800db10:	462a      	mov	r2, r5
 800db12:	4b06      	ldr	r3, [pc, #24]	; (800db2c <_svfiprintf_r+0x1f8>)
 800db14:	a904      	add	r1, sp, #16
 800db16:	4638      	mov	r0, r7
 800db18:	f000 f87a 	bl	800dc10 <_printf_i>
 800db1c:	e7eb      	b.n	800daf6 <_svfiprintf_r+0x1c2>
 800db1e:	bf00      	nop
 800db20:	08010494 	.word	0x08010494
 800db24:	0801049e 	.word	0x0801049e
 800db28:	00000000 	.word	0x00000000
 800db2c:	0800d87d 	.word	0x0800d87d
 800db30:	0801049a 	.word	0x0801049a

0800db34 <_printf_common>:
 800db34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db38:	4616      	mov	r6, r2
 800db3a:	4699      	mov	r9, r3
 800db3c:	688a      	ldr	r2, [r1, #8]
 800db3e:	690b      	ldr	r3, [r1, #16]
 800db40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db44:	4293      	cmp	r3, r2
 800db46:	bfb8      	it	lt
 800db48:	4613      	movlt	r3, r2
 800db4a:	6033      	str	r3, [r6, #0]
 800db4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db50:	4607      	mov	r7, r0
 800db52:	460c      	mov	r4, r1
 800db54:	b10a      	cbz	r2, 800db5a <_printf_common+0x26>
 800db56:	3301      	adds	r3, #1
 800db58:	6033      	str	r3, [r6, #0]
 800db5a:	6823      	ldr	r3, [r4, #0]
 800db5c:	0699      	lsls	r1, r3, #26
 800db5e:	bf42      	ittt	mi
 800db60:	6833      	ldrmi	r3, [r6, #0]
 800db62:	3302      	addmi	r3, #2
 800db64:	6033      	strmi	r3, [r6, #0]
 800db66:	6825      	ldr	r5, [r4, #0]
 800db68:	f015 0506 	ands.w	r5, r5, #6
 800db6c:	d106      	bne.n	800db7c <_printf_common+0x48>
 800db6e:	f104 0a19 	add.w	sl, r4, #25
 800db72:	68e3      	ldr	r3, [r4, #12]
 800db74:	6832      	ldr	r2, [r6, #0]
 800db76:	1a9b      	subs	r3, r3, r2
 800db78:	42ab      	cmp	r3, r5
 800db7a:	dc26      	bgt.n	800dbca <_printf_common+0x96>
 800db7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800db80:	1e13      	subs	r3, r2, #0
 800db82:	6822      	ldr	r2, [r4, #0]
 800db84:	bf18      	it	ne
 800db86:	2301      	movne	r3, #1
 800db88:	0692      	lsls	r2, r2, #26
 800db8a:	d42b      	bmi.n	800dbe4 <_printf_common+0xb0>
 800db8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db90:	4649      	mov	r1, r9
 800db92:	4638      	mov	r0, r7
 800db94:	47c0      	blx	r8
 800db96:	3001      	adds	r0, #1
 800db98:	d01e      	beq.n	800dbd8 <_printf_common+0xa4>
 800db9a:	6823      	ldr	r3, [r4, #0]
 800db9c:	68e5      	ldr	r5, [r4, #12]
 800db9e:	6832      	ldr	r2, [r6, #0]
 800dba0:	f003 0306 	and.w	r3, r3, #6
 800dba4:	2b04      	cmp	r3, #4
 800dba6:	bf08      	it	eq
 800dba8:	1aad      	subeq	r5, r5, r2
 800dbaa:	68a3      	ldr	r3, [r4, #8]
 800dbac:	6922      	ldr	r2, [r4, #16]
 800dbae:	bf0c      	ite	eq
 800dbb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbb4:	2500      	movne	r5, #0
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	bfc4      	itt	gt
 800dbba:	1a9b      	subgt	r3, r3, r2
 800dbbc:	18ed      	addgt	r5, r5, r3
 800dbbe:	2600      	movs	r6, #0
 800dbc0:	341a      	adds	r4, #26
 800dbc2:	42b5      	cmp	r5, r6
 800dbc4:	d11a      	bne.n	800dbfc <_printf_common+0xc8>
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	e008      	b.n	800dbdc <_printf_common+0xa8>
 800dbca:	2301      	movs	r3, #1
 800dbcc:	4652      	mov	r2, sl
 800dbce:	4649      	mov	r1, r9
 800dbd0:	4638      	mov	r0, r7
 800dbd2:	47c0      	blx	r8
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	d103      	bne.n	800dbe0 <_printf_common+0xac>
 800dbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe0:	3501      	adds	r5, #1
 800dbe2:	e7c6      	b.n	800db72 <_printf_common+0x3e>
 800dbe4:	18e1      	adds	r1, r4, r3
 800dbe6:	1c5a      	adds	r2, r3, #1
 800dbe8:	2030      	movs	r0, #48	; 0x30
 800dbea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dbee:	4422      	add	r2, r4
 800dbf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dbf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dbf8:	3302      	adds	r3, #2
 800dbfa:	e7c7      	b.n	800db8c <_printf_common+0x58>
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	4622      	mov	r2, r4
 800dc00:	4649      	mov	r1, r9
 800dc02:	4638      	mov	r0, r7
 800dc04:	47c0      	blx	r8
 800dc06:	3001      	adds	r0, #1
 800dc08:	d0e6      	beq.n	800dbd8 <_printf_common+0xa4>
 800dc0a:	3601      	adds	r6, #1
 800dc0c:	e7d9      	b.n	800dbc2 <_printf_common+0x8e>
	...

0800dc10 <_printf_i>:
 800dc10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc14:	7e0f      	ldrb	r7, [r1, #24]
 800dc16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc18:	2f78      	cmp	r7, #120	; 0x78
 800dc1a:	4691      	mov	r9, r2
 800dc1c:	4680      	mov	r8, r0
 800dc1e:	460c      	mov	r4, r1
 800dc20:	469a      	mov	sl, r3
 800dc22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dc26:	d807      	bhi.n	800dc38 <_printf_i+0x28>
 800dc28:	2f62      	cmp	r7, #98	; 0x62
 800dc2a:	d80a      	bhi.n	800dc42 <_printf_i+0x32>
 800dc2c:	2f00      	cmp	r7, #0
 800dc2e:	f000 80d8 	beq.w	800dde2 <_printf_i+0x1d2>
 800dc32:	2f58      	cmp	r7, #88	; 0x58
 800dc34:	f000 80a3 	beq.w	800dd7e <_printf_i+0x16e>
 800dc38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dc40:	e03a      	b.n	800dcb8 <_printf_i+0xa8>
 800dc42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dc46:	2b15      	cmp	r3, #21
 800dc48:	d8f6      	bhi.n	800dc38 <_printf_i+0x28>
 800dc4a:	a101      	add	r1, pc, #4	; (adr r1, 800dc50 <_printf_i+0x40>)
 800dc4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc50:	0800dca9 	.word	0x0800dca9
 800dc54:	0800dcbd 	.word	0x0800dcbd
 800dc58:	0800dc39 	.word	0x0800dc39
 800dc5c:	0800dc39 	.word	0x0800dc39
 800dc60:	0800dc39 	.word	0x0800dc39
 800dc64:	0800dc39 	.word	0x0800dc39
 800dc68:	0800dcbd 	.word	0x0800dcbd
 800dc6c:	0800dc39 	.word	0x0800dc39
 800dc70:	0800dc39 	.word	0x0800dc39
 800dc74:	0800dc39 	.word	0x0800dc39
 800dc78:	0800dc39 	.word	0x0800dc39
 800dc7c:	0800ddc9 	.word	0x0800ddc9
 800dc80:	0800dced 	.word	0x0800dced
 800dc84:	0800ddab 	.word	0x0800ddab
 800dc88:	0800dc39 	.word	0x0800dc39
 800dc8c:	0800dc39 	.word	0x0800dc39
 800dc90:	0800ddeb 	.word	0x0800ddeb
 800dc94:	0800dc39 	.word	0x0800dc39
 800dc98:	0800dced 	.word	0x0800dced
 800dc9c:	0800dc39 	.word	0x0800dc39
 800dca0:	0800dc39 	.word	0x0800dc39
 800dca4:	0800ddb3 	.word	0x0800ddb3
 800dca8:	682b      	ldr	r3, [r5, #0]
 800dcaa:	1d1a      	adds	r2, r3, #4
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	602a      	str	r2, [r5, #0]
 800dcb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e0a3      	b.n	800de04 <_printf_i+0x1f4>
 800dcbc:	6820      	ldr	r0, [r4, #0]
 800dcbe:	6829      	ldr	r1, [r5, #0]
 800dcc0:	0606      	lsls	r6, r0, #24
 800dcc2:	f101 0304 	add.w	r3, r1, #4
 800dcc6:	d50a      	bpl.n	800dcde <_printf_i+0xce>
 800dcc8:	680e      	ldr	r6, [r1, #0]
 800dcca:	602b      	str	r3, [r5, #0]
 800dccc:	2e00      	cmp	r6, #0
 800dcce:	da03      	bge.n	800dcd8 <_printf_i+0xc8>
 800dcd0:	232d      	movs	r3, #45	; 0x2d
 800dcd2:	4276      	negs	r6, r6
 800dcd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcd8:	485e      	ldr	r0, [pc, #376]	; (800de54 <_printf_i+0x244>)
 800dcda:	230a      	movs	r3, #10
 800dcdc:	e019      	b.n	800dd12 <_printf_i+0x102>
 800dcde:	680e      	ldr	r6, [r1, #0]
 800dce0:	602b      	str	r3, [r5, #0]
 800dce2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dce6:	bf18      	it	ne
 800dce8:	b236      	sxthne	r6, r6
 800dcea:	e7ef      	b.n	800dccc <_printf_i+0xbc>
 800dcec:	682b      	ldr	r3, [r5, #0]
 800dcee:	6820      	ldr	r0, [r4, #0]
 800dcf0:	1d19      	adds	r1, r3, #4
 800dcf2:	6029      	str	r1, [r5, #0]
 800dcf4:	0601      	lsls	r1, r0, #24
 800dcf6:	d501      	bpl.n	800dcfc <_printf_i+0xec>
 800dcf8:	681e      	ldr	r6, [r3, #0]
 800dcfa:	e002      	b.n	800dd02 <_printf_i+0xf2>
 800dcfc:	0646      	lsls	r6, r0, #25
 800dcfe:	d5fb      	bpl.n	800dcf8 <_printf_i+0xe8>
 800dd00:	881e      	ldrh	r6, [r3, #0]
 800dd02:	4854      	ldr	r0, [pc, #336]	; (800de54 <_printf_i+0x244>)
 800dd04:	2f6f      	cmp	r7, #111	; 0x6f
 800dd06:	bf0c      	ite	eq
 800dd08:	2308      	moveq	r3, #8
 800dd0a:	230a      	movne	r3, #10
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd12:	6865      	ldr	r5, [r4, #4]
 800dd14:	60a5      	str	r5, [r4, #8]
 800dd16:	2d00      	cmp	r5, #0
 800dd18:	bfa2      	ittt	ge
 800dd1a:	6821      	ldrge	r1, [r4, #0]
 800dd1c:	f021 0104 	bicge.w	r1, r1, #4
 800dd20:	6021      	strge	r1, [r4, #0]
 800dd22:	b90e      	cbnz	r6, 800dd28 <_printf_i+0x118>
 800dd24:	2d00      	cmp	r5, #0
 800dd26:	d04d      	beq.n	800ddc4 <_printf_i+0x1b4>
 800dd28:	4615      	mov	r5, r2
 800dd2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800dd2e:	fb03 6711 	mls	r7, r3, r1, r6
 800dd32:	5dc7      	ldrb	r7, [r0, r7]
 800dd34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dd38:	4637      	mov	r7, r6
 800dd3a:	42bb      	cmp	r3, r7
 800dd3c:	460e      	mov	r6, r1
 800dd3e:	d9f4      	bls.n	800dd2a <_printf_i+0x11a>
 800dd40:	2b08      	cmp	r3, #8
 800dd42:	d10b      	bne.n	800dd5c <_printf_i+0x14c>
 800dd44:	6823      	ldr	r3, [r4, #0]
 800dd46:	07de      	lsls	r6, r3, #31
 800dd48:	d508      	bpl.n	800dd5c <_printf_i+0x14c>
 800dd4a:	6923      	ldr	r3, [r4, #16]
 800dd4c:	6861      	ldr	r1, [r4, #4]
 800dd4e:	4299      	cmp	r1, r3
 800dd50:	bfde      	ittt	le
 800dd52:	2330      	movle	r3, #48	; 0x30
 800dd54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dd5c:	1b52      	subs	r2, r2, r5
 800dd5e:	6122      	str	r2, [r4, #16]
 800dd60:	f8cd a000 	str.w	sl, [sp]
 800dd64:	464b      	mov	r3, r9
 800dd66:	aa03      	add	r2, sp, #12
 800dd68:	4621      	mov	r1, r4
 800dd6a:	4640      	mov	r0, r8
 800dd6c:	f7ff fee2 	bl	800db34 <_printf_common>
 800dd70:	3001      	adds	r0, #1
 800dd72:	d14c      	bne.n	800de0e <_printf_i+0x1fe>
 800dd74:	f04f 30ff 	mov.w	r0, #4294967295
 800dd78:	b004      	add	sp, #16
 800dd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd7e:	4835      	ldr	r0, [pc, #212]	; (800de54 <_printf_i+0x244>)
 800dd80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dd84:	6829      	ldr	r1, [r5, #0]
 800dd86:	6823      	ldr	r3, [r4, #0]
 800dd88:	f851 6b04 	ldr.w	r6, [r1], #4
 800dd8c:	6029      	str	r1, [r5, #0]
 800dd8e:	061d      	lsls	r5, r3, #24
 800dd90:	d514      	bpl.n	800ddbc <_printf_i+0x1ac>
 800dd92:	07df      	lsls	r7, r3, #31
 800dd94:	bf44      	itt	mi
 800dd96:	f043 0320 	orrmi.w	r3, r3, #32
 800dd9a:	6023      	strmi	r3, [r4, #0]
 800dd9c:	b91e      	cbnz	r6, 800dda6 <_printf_i+0x196>
 800dd9e:	6823      	ldr	r3, [r4, #0]
 800dda0:	f023 0320 	bic.w	r3, r3, #32
 800dda4:	6023      	str	r3, [r4, #0]
 800dda6:	2310      	movs	r3, #16
 800dda8:	e7b0      	b.n	800dd0c <_printf_i+0xfc>
 800ddaa:	6823      	ldr	r3, [r4, #0]
 800ddac:	f043 0320 	orr.w	r3, r3, #32
 800ddb0:	6023      	str	r3, [r4, #0]
 800ddb2:	2378      	movs	r3, #120	; 0x78
 800ddb4:	4828      	ldr	r0, [pc, #160]	; (800de58 <_printf_i+0x248>)
 800ddb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ddba:	e7e3      	b.n	800dd84 <_printf_i+0x174>
 800ddbc:	0659      	lsls	r1, r3, #25
 800ddbe:	bf48      	it	mi
 800ddc0:	b2b6      	uxthmi	r6, r6
 800ddc2:	e7e6      	b.n	800dd92 <_printf_i+0x182>
 800ddc4:	4615      	mov	r5, r2
 800ddc6:	e7bb      	b.n	800dd40 <_printf_i+0x130>
 800ddc8:	682b      	ldr	r3, [r5, #0]
 800ddca:	6826      	ldr	r6, [r4, #0]
 800ddcc:	6961      	ldr	r1, [r4, #20]
 800ddce:	1d18      	adds	r0, r3, #4
 800ddd0:	6028      	str	r0, [r5, #0]
 800ddd2:	0635      	lsls	r5, r6, #24
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	d501      	bpl.n	800dddc <_printf_i+0x1cc>
 800ddd8:	6019      	str	r1, [r3, #0]
 800ddda:	e002      	b.n	800dde2 <_printf_i+0x1d2>
 800dddc:	0670      	lsls	r0, r6, #25
 800ddde:	d5fb      	bpl.n	800ddd8 <_printf_i+0x1c8>
 800dde0:	8019      	strh	r1, [r3, #0]
 800dde2:	2300      	movs	r3, #0
 800dde4:	6123      	str	r3, [r4, #16]
 800dde6:	4615      	mov	r5, r2
 800dde8:	e7ba      	b.n	800dd60 <_printf_i+0x150>
 800ddea:	682b      	ldr	r3, [r5, #0]
 800ddec:	1d1a      	adds	r2, r3, #4
 800ddee:	602a      	str	r2, [r5, #0]
 800ddf0:	681d      	ldr	r5, [r3, #0]
 800ddf2:	6862      	ldr	r2, [r4, #4]
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	f7f2 f9f2 	bl	80001e0 <memchr>
 800ddfc:	b108      	cbz	r0, 800de02 <_printf_i+0x1f2>
 800ddfe:	1b40      	subs	r0, r0, r5
 800de00:	6060      	str	r0, [r4, #4]
 800de02:	6863      	ldr	r3, [r4, #4]
 800de04:	6123      	str	r3, [r4, #16]
 800de06:	2300      	movs	r3, #0
 800de08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de0c:	e7a8      	b.n	800dd60 <_printf_i+0x150>
 800de0e:	6923      	ldr	r3, [r4, #16]
 800de10:	462a      	mov	r2, r5
 800de12:	4649      	mov	r1, r9
 800de14:	4640      	mov	r0, r8
 800de16:	47d0      	blx	sl
 800de18:	3001      	adds	r0, #1
 800de1a:	d0ab      	beq.n	800dd74 <_printf_i+0x164>
 800de1c:	6823      	ldr	r3, [r4, #0]
 800de1e:	079b      	lsls	r3, r3, #30
 800de20:	d413      	bmi.n	800de4a <_printf_i+0x23a>
 800de22:	68e0      	ldr	r0, [r4, #12]
 800de24:	9b03      	ldr	r3, [sp, #12]
 800de26:	4298      	cmp	r0, r3
 800de28:	bfb8      	it	lt
 800de2a:	4618      	movlt	r0, r3
 800de2c:	e7a4      	b.n	800dd78 <_printf_i+0x168>
 800de2e:	2301      	movs	r3, #1
 800de30:	4632      	mov	r2, r6
 800de32:	4649      	mov	r1, r9
 800de34:	4640      	mov	r0, r8
 800de36:	47d0      	blx	sl
 800de38:	3001      	adds	r0, #1
 800de3a:	d09b      	beq.n	800dd74 <_printf_i+0x164>
 800de3c:	3501      	adds	r5, #1
 800de3e:	68e3      	ldr	r3, [r4, #12]
 800de40:	9903      	ldr	r1, [sp, #12]
 800de42:	1a5b      	subs	r3, r3, r1
 800de44:	42ab      	cmp	r3, r5
 800de46:	dcf2      	bgt.n	800de2e <_printf_i+0x21e>
 800de48:	e7eb      	b.n	800de22 <_printf_i+0x212>
 800de4a:	2500      	movs	r5, #0
 800de4c:	f104 0619 	add.w	r6, r4, #25
 800de50:	e7f5      	b.n	800de3e <_printf_i+0x22e>
 800de52:	bf00      	nop
 800de54:	080104a5 	.word	0x080104a5
 800de58:	080104b6 	.word	0x080104b6

0800de5c <memmove>:
 800de5c:	4288      	cmp	r0, r1
 800de5e:	b510      	push	{r4, lr}
 800de60:	eb01 0402 	add.w	r4, r1, r2
 800de64:	d902      	bls.n	800de6c <memmove+0x10>
 800de66:	4284      	cmp	r4, r0
 800de68:	4623      	mov	r3, r4
 800de6a:	d807      	bhi.n	800de7c <memmove+0x20>
 800de6c:	1e43      	subs	r3, r0, #1
 800de6e:	42a1      	cmp	r1, r4
 800de70:	d008      	beq.n	800de84 <memmove+0x28>
 800de72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de7a:	e7f8      	b.n	800de6e <memmove+0x12>
 800de7c:	4402      	add	r2, r0
 800de7e:	4601      	mov	r1, r0
 800de80:	428a      	cmp	r2, r1
 800de82:	d100      	bne.n	800de86 <memmove+0x2a>
 800de84:	bd10      	pop	{r4, pc}
 800de86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de8e:	e7f7      	b.n	800de80 <memmove+0x24>

0800de90 <_realloc_r>:
 800de90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de94:	4680      	mov	r8, r0
 800de96:	4614      	mov	r4, r2
 800de98:	460e      	mov	r6, r1
 800de9a:	b921      	cbnz	r1, 800dea6 <_realloc_r+0x16>
 800de9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dea0:	4611      	mov	r1, r2
 800dea2:	f7ff bb85 	b.w	800d5b0 <_malloc_r>
 800dea6:	b92a      	cbnz	r2, 800deb4 <_realloc_r+0x24>
 800dea8:	f7ff fc9c 	bl	800d7e4 <_free_r>
 800deac:	4625      	mov	r5, r4
 800deae:	4628      	mov	r0, r5
 800deb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb4:	f000 f81b 	bl	800deee <_malloc_usable_size_r>
 800deb8:	4284      	cmp	r4, r0
 800deba:	4607      	mov	r7, r0
 800debc:	d802      	bhi.n	800dec4 <_realloc_r+0x34>
 800debe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dec2:	d812      	bhi.n	800deea <_realloc_r+0x5a>
 800dec4:	4621      	mov	r1, r4
 800dec6:	4640      	mov	r0, r8
 800dec8:	f7ff fb72 	bl	800d5b0 <_malloc_r>
 800decc:	4605      	mov	r5, r0
 800dece:	2800      	cmp	r0, #0
 800ded0:	d0ed      	beq.n	800deae <_realloc_r+0x1e>
 800ded2:	42bc      	cmp	r4, r7
 800ded4:	4622      	mov	r2, r4
 800ded6:	4631      	mov	r1, r6
 800ded8:	bf28      	it	cs
 800deda:	463a      	movcs	r2, r7
 800dedc:	f7ff fb32 	bl	800d544 <memcpy>
 800dee0:	4631      	mov	r1, r6
 800dee2:	4640      	mov	r0, r8
 800dee4:	f7ff fc7e 	bl	800d7e4 <_free_r>
 800dee8:	e7e1      	b.n	800deae <_realloc_r+0x1e>
 800deea:	4635      	mov	r5, r6
 800deec:	e7df      	b.n	800deae <_realloc_r+0x1e>

0800deee <_malloc_usable_size_r>:
 800deee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800def2:	1f18      	subs	r0, r3, #4
 800def4:	2b00      	cmp	r3, #0
 800def6:	bfbc      	itt	lt
 800def8:	580b      	ldrlt	r3, [r1, r0]
 800defa:	18c0      	addlt	r0, r0, r3
 800defc:	4770      	bx	lr
	...

0800df00 <cos>:
 800df00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df02:	ec53 2b10 	vmov	r2, r3, d0
 800df06:	4826      	ldr	r0, [pc, #152]	; (800dfa0 <cos+0xa0>)
 800df08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800df0c:	4281      	cmp	r1, r0
 800df0e:	dc06      	bgt.n	800df1e <cos+0x1e>
 800df10:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800df98 <cos+0x98>
 800df14:	b005      	add	sp, #20
 800df16:	f85d eb04 	ldr.w	lr, [sp], #4
 800df1a:	f001 b8fd 	b.w	800f118 <__kernel_cos>
 800df1e:	4821      	ldr	r0, [pc, #132]	; (800dfa4 <cos+0xa4>)
 800df20:	4281      	cmp	r1, r0
 800df22:	dd09      	ble.n	800df38 <cos+0x38>
 800df24:	ee10 0a10 	vmov	r0, s0
 800df28:	4619      	mov	r1, r3
 800df2a:	f7f2 f9ad 	bl	8000288 <__aeabi_dsub>
 800df2e:	ec41 0b10 	vmov	d0, r0, r1
 800df32:	b005      	add	sp, #20
 800df34:	f85d fb04 	ldr.w	pc, [sp], #4
 800df38:	4668      	mov	r0, sp
 800df3a:	f000 fe2d 	bl	800eb98 <__ieee754_rem_pio2>
 800df3e:	f000 0003 	and.w	r0, r0, #3
 800df42:	2801      	cmp	r0, #1
 800df44:	d00b      	beq.n	800df5e <cos+0x5e>
 800df46:	2802      	cmp	r0, #2
 800df48:	d016      	beq.n	800df78 <cos+0x78>
 800df4a:	b9e0      	cbnz	r0, 800df86 <cos+0x86>
 800df4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df50:	ed9d 0b00 	vldr	d0, [sp]
 800df54:	f001 f8e0 	bl	800f118 <__kernel_cos>
 800df58:	ec51 0b10 	vmov	r0, r1, d0
 800df5c:	e7e7      	b.n	800df2e <cos+0x2e>
 800df5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df62:	ed9d 0b00 	vldr	d0, [sp]
 800df66:	f001 fcef 	bl	800f948 <__kernel_sin>
 800df6a:	ec53 2b10 	vmov	r2, r3, d0
 800df6e:	ee10 0a10 	vmov	r0, s0
 800df72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800df76:	e7da      	b.n	800df2e <cos+0x2e>
 800df78:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df7c:	ed9d 0b00 	vldr	d0, [sp]
 800df80:	f001 f8ca 	bl	800f118 <__kernel_cos>
 800df84:	e7f1      	b.n	800df6a <cos+0x6a>
 800df86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df8a:	ed9d 0b00 	vldr	d0, [sp]
 800df8e:	2001      	movs	r0, #1
 800df90:	f001 fcda 	bl	800f948 <__kernel_sin>
 800df94:	e7e0      	b.n	800df58 <cos+0x58>
 800df96:	bf00      	nop
	...
 800dfa0:	3fe921fb 	.word	0x3fe921fb
 800dfa4:	7fefffff 	.word	0x7fefffff

0800dfa8 <sin>:
 800dfa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfaa:	ec53 2b10 	vmov	r2, r3, d0
 800dfae:	4828      	ldr	r0, [pc, #160]	; (800e050 <sin+0xa8>)
 800dfb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dfb4:	4281      	cmp	r1, r0
 800dfb6:	dc07      	bgt.n	800dfc8 <sin+0x20>
 800dfb8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e048 <sin+0xa0>
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	b005      	add	sp, #20
 800dfc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfc4:	f001 bcc0 	b.w	800f948 <__kernel_sin>
 800dfc8:	4822      	ldr	r0, [pc, #136]	; (800e054 <sin+0xac>)
 800dfca:	4281      	cmp	r1, r0
 800dfcc:	dd09      	ble.n	800dfe2 <sin+0x3a>
 800dfce:	ee10 0a10 	vmov	r0, s0
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	f7f2 f958 	bl	8000288 <__aeabi_dsub>
 800dfd8:	ec41 0b10 	vmov	d0, r0, r1
 800dfdc:	b005      	add	sp, #20
 800dfde:	f85d fb04 	ldr.w	pc, [sp], #4
 800dfe2:	4668      	mov	r0, sp
 800dfe4:	f000 fdd8 	bl	800eb98 <__ieee754_rem_pio2>
 800dfe8:	f000 0003 	and.w	r0, r0, #3
 800dfec:	2801      	cmp	r0, #1
 800dfee:	d00c      	beq.n	800e00a <sin+0x62>
 800dff0:	2802      	cmp	r0, #2
 800dff2:	d011      	beq.n	800e018 <sin+0x70>
 800dff4:	b9f0      	cbnz	r0, 800e034 <sin+0x8c>
 800dff6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dffa:	ed9d 0b00 	vldr	d0, [sp]
 800dffe:	2001      	movs	r0, #1
 800e000:	f001 fca2 	bl	800f948 <__kernel_sin>
 800e004:	ec51 0b10 	vmov	r0, r1, d0
 800e008:	e7e6      	b.n	800dfd8 <sin+0x30>
 800e00a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e00e:	ed9d 0b00 	vldr	d0, [sp]
 800e012:	f001 f881 	bl	800f118 <__kernel_cos>
 800e016:	e7f5      	b.n	800e004 <sin+0x5c>
 800e018:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e01c:	ed9d 0b00 	vldr	d0, [sp]
 800e020:	2001      	movs	r0, #1
 800e022:	f001 fc91 	bl	800f948 <__kernel_sin>
 800e026:	ec53 2b10 	vmov	r2, r3, d0
 800e02a:	ee10 0a10 	vmov	r0, s0
 800e02e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e032:	e7d1      	b.n	800dfd8 <sin+0x30>
 800e034:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e038:	ed9d 0b00 	vldr	d0, [sp]
 800e03c:	f001 f86c 	bl	800f118 <__kernel_cos>
 800e040:	e7f1      	b.n	800e026 <sin+0x7e>
 800e042:	bf00      	nop
 800e044:	f3af 8000 	nop.w
	...
 800e050:	3fe921fb 	.word	0x3fe921fb
 800e054:	7fefffff 	.word	0x7fefffff

0800e058 <pow>:
 800e058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e05a:	ed2d 8b02 	vpush	{d8}
 800e05e:	eeb0 8a40 	vmov.f32	s16, s0
 800e062:	eef0 8a60 	vmov.f32	s17, s1
 800e066:	ec55 4b11 	vmov	r4, r5, d1
 800e06a:	f000 f865 	bl	800e138 <__ieee754_pow>
 800e06e:	4622      	mov	r2, r4
 800e070:	462b      	mov	r3, r5
 800e072:	4620      	mov	r0, r4
 800e074:	4629      	mov	r1, r5
 800e076:	ec57 6b10 	vmov	r6, r7, d0
 800e07a:	f7f2 fd57 	bl	8000b2c <__aeabi_dcmpun>
 800e07e:	2800      	cmp	r0, #0
 800e080:	d13b      	bne.n	800e0fa <pow+0xa2>
 800e082:	ec51 0b18 	vmov	r0, r1, d8
 800e086:	2200      	movs	r2, #0
 800e088:	2300      	movs	r3, #0
 800e08a:	f7f2 fd1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e08e:	b1b8      	cbz	r0, 800e0c0 <pow+0x68>
 800e090:	2200      	movs	r2, #0
 800e092:	2300      	movs	r3, #0
 800e094:	4620      	mov	r0, r4
 800e096:	4629      	mov	r1, r5
 800e098:	f7f2 fd16 	bl	8000ac8 <__aeabi_dcmpeq>
 800e09c:	2800      	cmp	r0, #0
 800e09e:	d146      	bne.n	800e12e <pow+0xd6>
 800e0a0:	ec45 4b10 	vmov	d0, r4, r5
 800e0a4:	f001 fd47 	bl	800fb36 <finite>
 800e0a8:	b338      	cbz	r0, 800e0fa <pow+0xa2>
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	f7f2 fd13 	bl	8000adc <__aeabi_dcmplt>
 800e0b6:	b300      	cbz	r0, 800e0fa <pow+0xa2>
 800e0b8:	f7ff fa18 	bl	800d4ec <__errno>
 800e0bc:	2322      	movs	r3, #34	; 0x22
 800e0be:	e01b      	b.n	800e0f8 <pow+0xa0>
 800e0c0:	ec47 6b10 	vmov	d0, r6, r7
 800e0c4:	f001 fd37 	bl	800fb36 <finite>
 800e0c8:	b9e0      	cbnz	r0, 800e104 <pow+0xac>
 800e0ca:	eeb0 0a48 	vmov.f32	s0, s16
 800e0ce:	eef0 0a68 	vmov.f32	s1, s17
 800e0d2:	f001 fd30 	bl	800fb36 <finite>
 800e0d6:	b1a8      	cbz	r0, 800e104 <pow+0xac>
 800e0d8:	ec45 4b10 	vmov	d0, r4, r5
 800e0dc:	f001 fd2b 	bl	800fb36 <finite>
 800e0e0:	b180      	cbz	r0, 800e104 <pow+0xac>
 800e0e2:	4632      	mov	r2, r6
 800e0e4:	463b      	mov	r3, r7
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	4639      	mov	r1, r7
 800e0ea:	f7f2 fd1f 	bl	8000b2c <__aeabi_dcmpun>
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	d0e2      	beq.n	800e0b8 <pow+0x60>
 800e0f2:	f7ff f9fb 	bl	800d4ec <__errno>
 800e0f6:	2321      	movs	r3, #33	; 0x21
 800e0f8:	6003      	str	r3, [r0, #0]
 800e0fa:	ecbd 8b02 	vpop	{d8}
 800e0fe:	ec47 6b10 	vmov	d0, r6, r7
 800e102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e104:	2200      	movs	r2, #0
 800e106:	2300      	movs	r3, #0
 800e108:	4630      	mov	r0, r6
 800e10a:	4639      	mov	r1, r7
 800e10c:	f7f2 fcdc 	bl	8000ac8 <__aeabi_dcmpeq>
 800e110:	2800      	cmp	r0, #0
 800e112:	d0f2      	beq.n	800e0fa <pow+0xa2>
 800e114:	eeb0 0a48 	vmov.f32	s0, s16
 800e118:	eef0 0a68 	vmov.f32	s1, s17
 800e11c:	f001 fd0b 	bl	800fb36 <finite>
 800e120:	2800      	cmp	r0, #0
 800e122:	d0ea      	beq.n	800e0fa <pow+0xa2>
 800e124:	ec45 4b10 	vmov	d0, r4, r5
 800e128:	f001 fd05 	bl	800fb36 <finite>
 800e12c:	e7c3      	b.n	800e0b6 <pow+0x5e>
 800e12e:	4f01      	ldr	r7, [pc, #4]	; (800e134 <pow+0xdc>)
 800e130:	2600      	movs	r6, #0
 800e132:	e7e2      	b.n	800e0fa <pow+0xa2>
 800e134:	3ff00000 	.word	0x3ff00000

0800e138 <__ieee754_pow>:
 800e138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e13c:	ed2d 8b06 	vpush	{d8-d10}
 800e140:	b089      	sub	sp, #36	; 0x24
 800e142:	ed8d 1b00 	vstr	d1, [sp]
 800e146:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e14a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e14e:	ea58 0102 	orrs.w	r1, r8, r2
 800e152:	ec57 6b10 	vmov	r6, r7, d0
 800e156:	d115      	bne.n	800e184 <__ieee754_pow+0x4c>
 800e158:	19b3      	adds	r3, r6, r6
 800e15a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e15e:	4152      	adcs	r2, r2
 800e160:	4299      	cmp	r1, r3
 800e162:	4b89      	ldr	r3, [pc, #548]	; (800e388 <__ieee754_pow+0x250>)
 800e164:	4193      	sbcs	r3, r2
 800e166:	f080 84d2 	bcs.w	800eb0e <__ieee754_pow+0x9d6>
 800e16a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e16e:	4630      	mov	r0, r6
 800e170:	4639      	mov	r1, r7
 800e172:	f7f2 f88b 	bl	800028c <__adddf3>
 800e176:	ec41 0b10 	vmov	d0, r0, r1
 800e17a:	b009      	add	sp, #36	; 0x24
 800e17c:	ecbd 8b06 	vpop	{d8-d10}
 800e180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e184:	4b81      	ldr	r3, [pc, #516]	; (800e38c <__ieee754_pow+0x254>)
 800e186:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e18a:	429c      	cmp	r4, r3
 800e18c:	ee10 aa10 	vmov	sl, s0
 800e190:	463d      	mov	r5, r7
 800e192:	dc06      	bgt.n	800e1a2 <__ieee754_pow+0x6a>
 800e194:	d101      	bne.n	800e19a <__ieee754_pow+0x62>
 800e196:	2e00      	cmp	r6, #0
 800e198:	d1e7      	bne.n	800e16a <__ieee754_pow+0x32>
 800e19a:	4598      	cmp	r8, r3
 800e19c:	dc01      	bgt.n	800e1a2 <__ieee754_pow+0x6a>
 800e19e:	d10f      	bne.n	800e1c0 <__ieee754_pow+0x88>
 800e1a0:	b172      	cbz	r2, 800e1c0 <__ieee754_pow+0x88>
 800e1a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e1a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e1aa:	ea55 050a 	orrs.w	r5, r5, sl
 800e1ae:	d1dc      	bne.n	800e16a <__ieee754_pow+0x32>
 800e1b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e1b4:	18db      	adds	r3, r3, r3
 800e1b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e1ba:	4152      	adcs	r2, r2
 800e1bc:	429d      	cmp	r5, r3
 800e1be:	e7d0      	b.n	800e162 <__ieee754_pow+0x2a>
 800e1c0:	2d00      	cmp	r5, #0
 800e1c2:	da3b      	bge.n	800e23c <__ieee754_pow+0x104>
 800e1c4:	4b72      	ldr	r3, [pc, #456]	; (800e390 <__ieee754_pow+0x258>)
 800e1c6:	4598      	cmp	r8, r3
 800e1c8:	dc51      	bgt.n	800e26e <__ieee754_pow+0x136>
 800e1ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e1ce:	4598      	cmp	r8, r3
 800e1d0:	f340 84ac 	ble.w	800eb2c <__ieee754_pow+0x9f4>
 800e1d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e1d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e1dc:	2b14      	cmp	r3, #20
 800e1de:	dd0f      	ble.n	800e200 <__ieee754_pow+0xc8>
 800e1e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e1e4:	fa22 f103 	lsr.w	r1, r2, r3
 800e1e8:	fa01 f303 	lsl.w	r3, r1, r3
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	f040 849d 	bne.w	800eb2c <__ieee754_pow+0x9f4>
 800e1f2:	f001 0101 	and.w	r1, r1, #1
 800e1f6:	f1c1 0302 	rsb	r3, r1, #2
 800e1fa:	9304      	str	r3, [sp, #16]
 800e1fc:	b182      	cbz	r2, 800e220 <__ieee754_pow+0xe8>
 800e1fe:	e05f      	b.n	800e2c0 <__ieee754_pow+0x188>
 800e200:	2a00      	cmp	r2, #0
 800e202:	d15b      	bne.n	800e2bc <__ieee754_pow+0x184>
 800e204:	f1c3 0314 	rsb	r3, r3, #20
 800e208:	fa48 f103 	asr.w	r1, r8, r3
 800e20c:	fa01 f303 	lsl.w	r3, r1, r3
 800e210:	4543      	cmp	r3, r8
 800e212:	f040 8488 	bne.w	800eb26 <__ieee754_pow+0x9ee>
 800e216:	f001 0101 	and.w	r1, r1, #1
 800e21a:	f1c1 0302 	rsb	r3, r1, #2
 800e21e:	9304      	str	r3, [sp, #16]
 800e220:	4b5c      	ldr	r3, [pc, #368]	; (800e394 <__ieee754_pow+0x25c>)
 800e222:	4598      	cmp	r8, r3
 800e224:	d132      	bne.n	800e28c <__ieee754_pow+0x154>
 800e226:	f1b9 0f00 	cmp.w	r9, #0
 800e22a:	f280 8478 	bge.w	800eb1e <__ieee754_pow+0x9e6>
 800e22e:	4959      	ldr	r1, [pc, #356]	; (800e394 <__ieee754_pow+0x25c>)
 800e230:	4632      	mov	r2, r6
 800e232:	463b      	mov	r3, r7
 800e234:	2000      	movs	r0, #0
 800e236:	f7f2 fb09 	bl	800084c <__aeabi_ddiv>
 800e23a:	e79c      	b.n	800e176 <__ieee754_pow+0x3e>
 800e23c:	2300      	movs	r3, #0
 800e23e:	9304      	str	r3, [sp, #16]
 800e240:	2a00      	cmp	r2, #0
 800e242:	d13d      	bne.n	800e2c0 <__ieee754_pow+0x188>
 800e244:	4b51      	ldr	r3, [pc, #324]	; (800e38c <__ieee754_pow+0x254>)
 800e246:	4598      	cmp	r8, r3
 800e248:	d1ea      	bne.n	800e220 <__ieee754_pow+0xe8>
 800e24a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e24e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e252:	ea53 030a 	orrs.w	r3, r3, sl
 800e256:	f000 845a 	beq.w	800eb0e <__ieee754_pow+0x9d6>
 800e25a:	4b4f      	ldr	r3, [pc, #316]	; (800e398 <__ieee754_pow+0x260>)
 800e25c:	429c      	cmp	r4, r3
 800e25e:	dd08      	ble.n	800e272 <__ieee754_pow+0x13a>
 800e260:	f1b9 0f00 	cmp.w	r9, #0
 800e264:	f2c0 8457 	blt.w	800eb16 <__ieee754_pow+0x9de>
 800e268:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e26c:	e783      	b.n	800e176 <__ieee754_pow+0x3e>
 800e26e:	2302      	movs	r3, #2
 800e270:	e7e5      	b.n	800e23e <__ieee754_pow+0x106>
 800e272:	f1b9 0f00 	cmp.w	r9, #0
 800e276:	f04f 0000 	mov.w	r0, #0
 800e27a:	f04f 0100 	mov.w	r1, #0
 800e27e:	f6bf af7a 	bge.w	800e176 <__ieee754_pow+0x3e>
 800e282:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e286:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e28a:	e774      	b.n	800e176 <__ieee754_pow+0x3e>
 800e28c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e290:	d106      	bne.n	800e2a0 <__ieee754_pow+0x168>
 800e292:	4632      	mov	r2, r6
 800e294:	463b      	mov	r3, r7
 800e296:	4630      	mov	r0, r6
 800e298:	4639      	mov	r1, r7
 800e29a:	f7f2 f9ad 	bl	80005f8 <__aeabi_dmul>
 800e29e:	e76a      	b.n	800e176 <__ieee754_pow+0x3e>
 800e2a0:	4b3e      	ldr	r3, [pc, #248]	; (800e39c <__ieee754_pow+0x264>)
 800e2a2:	4599      	cmp	r9, r3
 800e2a4:	d10c      	bne.n	800e2c0 <__ieee754_pow+0x188>
 800e2a6:	2d00      	cmp	r5, #0
 800e2a8:	db0a      	blt.n	800e2c0 <__ieee754_pow+0x188>
 800e2aa:	ec47 6b10 	vmov	d0, r6, r7
 800e2ae:	b009      	add	sp, #36	; 0x24
 800e2b0:	ecbd 8b06 	vpop	{d8-d10}
 800e2b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b8:	f000 be7a 	b.w	800efb0 <__ieee754_sqrt>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	9304      	str	r3, [sp, #16]
 800e2c0:	ec47 6b10 	vmov	d0, r6, r7
 800e2c4:	f001 fc2e 	bl	800fb24 <fabs>
 800e2c8:	ec51 0b10 	vmov	r0, r1, d0
 800e2cc:	f1ba 0f00 	cmp.w	sl, #0
 800e2d0:	d129      	bne.n	800e326 <__ieee754_pow+0x1ee>
 800e2d2:	b124      	cbz	r4, 800e2de <__ieee754_pow+0x1a6>
 800e2d4:	4b2f      	ldr	r3, [pc, #188]	; (800e394 <__ieee754_pow+0x25c>)
 800e2d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d123      	bne.n	800e326 <__ieee754_pow+0x1ee>
 800e2de:	f1b9 0f00 	cmp.w	r9, #0
 800e2e2:	da05      	bge.n	800e2f0 <__ieee754_pow+0x1b8>
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	492a      	ldr	r1, [pc, #168]	; (800e394 <__ieee754_pow+0x25c>)
 800e2ec:	f7f2 faae 	bl	800084c <__aeabi_ddiv>
 800e2f0:	2d00      	cmp	r5, #0
 800e2f2:	f6bf af40 	bge.w	800e176 <__ieee754_pow+0x3e>
 800e2f6:	9b04      	ldr	r3, [sp, #16]
 800e2f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e2fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e300:	4323      	orrs	r3, r4
 800e302:	d108      	bne.n	800e316 <__ieee754_pow+0x1de>
 800e304:	4602      	mov	r2, r0
 800e306:	460b      	mov	r3, r1
 800e308:	4610      	mov	r0, r2
 800e30a:	4619      	mov	r1, r3
 800e30c:	f7f1 ffbc 	bl	8000288 <__aeabi_dsub>
 800e310:	4602      	mov	r2, r0
 800e312:	460b      	mov	r3, r1
 800e314:	e78f      	b.n	800e236 <__ieee754_pow+0xfe>
 800e316:	9b04      	ldr	r3, [sp, #16]
 800e318:	2b01      	cmp	r3, #1
 800e31a:	f47f af2c 	bne.w	800e176 <__ieee754_pow+0x3e>
 800e31e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e322:	4619      	mov	r1, r3
 800e324:	e727      	b.n	800e176 <__ieee754_pow+0x3e>
 800e326:	0feb      	lsrs	r3, r5, #31
 800e328:	3b01      	subs	r3, #1
 800e32a:	9306      	str	r3, [sp, #24]
 800e32c:	9a06      	ldr	r2, [sp, #24]
 800e32e:	9b04      	ldr	r3, [sp, #16]
 800e330:	4313      	orrs	r3, r2
 800e332:	d102      	bne.n	800e33a <__ieee754_pow+0x202>
 800e334:	4632      	mov	r2, r6
 800e336:	463b      	mov	r3, r7
 800e338:	e7e6      	b.n	800e308 <__ieee754_pow+0x1d0>
 800e33a:	4b19      	ldr	r3, [pc, #100]	; (800e3a0 <__ieee754_pow+0x268>)
 800e33c:	4598      	cmp	r8, r3
 800e33e:	f340 80fb 	ble.w	800e538 <__ieee754_pow+0x400>
 800e342:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e346:	4598      	cmp	r8, r3
 800e348:	4b13      	ldr	r3, [pc, #76]	; (800e398 <__ieee754_pow+0x260>)
 800e34a:	dd0c      	ble.n	800e366 <__ieee754_pow+0x22e>
 800e34c:	429c      	cmp	r4, r3
 800e34e:	dc0f      	bgt.n	800e370 <__ieee754_pow+0x238>
 800e350:	f1b9 0f00 	cmp.w	r9, #0
 800e354:	da0f      	bge.n	800e376 <__ieee754_pow+0x23e>
 800e356:	2000      	movs	r0, #0
 800e358:	b009      	add	sp, #36	; 0x24
 800e35a:	ecbd 8b06 	vpop	{d8-d10}
 800e35e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e362:	f001 bbd6 	b.w	800fb12 <__math_oflow>
 800e366:	429c      	cmp	r4, r3
 800e368:	dbf2      	blt.n	800e350 <__ieee754_pow+0x218>
 800e36a:	4b0a      	ldr	r3, [pc, #40]	; (800e394 <__ieee754_pow+0x25c>)
 800e36c:	429c      	cmp	r4, r3
 800e36e:	dd19      	ble.n	800e3a4 <__ieee754_pow+0x26c>
 800e370:	f1b9 0f00 	cmp.w	r9, #0
 800e374:	dcef      	bgt.n	800e356 <__ieee754_pow+0x21e>
 800e376:	2000      	movs	r0, #0
 800e378:	b009      	add	sp, #36	; 0x24
 800e37a:	ecbd 8b06 	vpop	{d8-d10}
 800e37e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e382:	f001 bbbd 	b.w	800fb00 <__math_uflow>
 800e386:	bf00      	nop
 800e388:	fff00000 	.word	0xfff00000
 800e38c:	7ff00000 	.word	0x7ff00000
 800e390:	433fffff 	.word	0x433fffff
 800e394:	3ff00000 	.word	0x3ff00000
 800e398:	3fefffff 	.word	0x3fefffff
 800e39c:	3fe00000 	.word	0x3fe00000
 800e3a0:	41e00000 	.word	0x41e00000
 800e3a4:	4b60      	ldr	r3, [pc, #384]	; (800e528 <__ieee754_pow+0x3f0>)
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f7f1 ff6e 	bl	8000288 <__aeabi_dsub>
 800e3ac:	a354      	add	r3, pc, #336	; (adr r3, 800e500 <__ieee754_pow+0x3c8>)
 800e3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b2:	4604      	mov	r4, r0
 800e3b4:	460d      	mov	r5, r1
 800e3b6:	f7f2 f91f 	bl	80005f8 <__aeabi_dmul>
 800e3ba:	a353      	add	r3, pc, #332	; (adr r3, 800e508 <__ieee754_pow+0x3d0>)
 800e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	460f      	mov	r7, r1
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	f7f2 f916 	bl	80005f8 <__aeabi_dmul>
 800e3cc:	4b57      	ldr	r3, [pc, #348]	; (800e52c <__ieee754_pow+0x3f4>)
 800e3ce:	4682      	mov	sl, r0
 800e3d0:	468b      	mov	fp, r1
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	4629      	mov	r1, r5
 800e3d8:	f7f2 f90e 	bl	80005f8 <__aeabi_dmul>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	460b      	mov	r3, r1
 800e3e0:	a14b      	add	r1, pc, #300	; (adr r1, 800e510 <__ieee754_pow+0x3d8>)
 800e3e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3e6:	f7f1 ff4f 	bl	8000288 <__aeabi_dsub>
 800e3ea:	4622      	mov	r2, r4
 800e3ec:	462b      	mov	r3, r5
 800e3ee:	f7f2 f903 	bl	80005f8 <__aeabi_dmul>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	494d      	ldr	r1, [pc, #308]	; (800e530 <__ieee754_pow+0x3f8>)
 800e3fa:	f7f1 ff45 	bl	8000288 <__aeabi_dsub>
 800e3fe:	4622      	mov	r2, r4
 800e400:	4680      	mov	r8, r0
 800e402:	4689      	mov	r9, r1
 800e404:	462b      	mov	r3, r5
 800e406:	4620      	mov	r0, r4
 800e408:	4629      	mov	r1, r5
 800e40a:	f7f2 f8f5 	bl	80005f8 <__aeabi_dmul>
 800e40e:	4602      	mov	r2, r0
 800e410:	460b      	mov	r3, r1
 800e412:	4640      	mov	r0, r8
 800e414:	4649      	mov	r1, r9
 800e416:	f7f2 f8ef 	bl	80005f8 <__aeabi_dmul>
 800e41a:	a33f      	add	r3, pc, #252	; (adr r3, 800e518 <__ieee754_pow+0x3e0>)
 800e41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e420:	f7f2 f8ea 	bl	80005f8 <__aeabi_dmul>
 800e424:	4602      	mov	r2, r0
 800e426:	460b      	mov	r3, r1
 800e428:	4650      	mov	r0, sl
 800e42a:	4659      	mov	r1, fp
 800e42c:	f7f1 ff2c 	bl	8000288 <__aeabi_dsub>
 800e430:	4602      	mov	r2, r0
 800e432:	460b      	mov	r3, r1
 800e434:	4680      	mov	r8, r0
 800e436:	4689      	mov	r9, r1
 800e438:	4630      	mov	r0, r6
 800e43a:	4639      	mov	r1, r7
 800e43c:	f7f1 ff26 	bl	800028c <__adddf3>
 800e440:	2000      	movs	r0, #0
 800e442:	4632      	mov	r2, r6
 800e444:	463b      	mov	r3, r7
 800e446:	4604      	mov	r4, r0
 800e448:	460d      	mov	r5, r1
 800e44a:	f7f1 ff1d 	bl	8000288 <__aeabi_dsub>
 800e44e:	4602      	mov	r2, r0
 800e450:	460b      	mov	r3, r1
 800e452:	4640      	mov	r0, r8
 800e454:	4649      	mov	r1, r9
 800e456:	f7f1 ff17 	bl	8000288 <__aeabi_dsub>
 800e45a:	9b04      	ldr	r3, [sp, #16]
 800e45c:	9a06      	ldr	r2, [sp, #24]
 800e45e:	3b01      	subs	r3, #1
 800e460:	4313      	orrs	r3, r2
 800e462:	4682      	mov	sl, r0
 800e464:	468b      	mov	fp, r1
 800e466:	f040 81e7 	bne.w	800e838 <__ieee754_pow+0x700>
 800e46a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e520 <__ieee754_pow+0x3e8>
 800e46e:	eeb0 8a47 	vmov.f32	s16, s14
 800e472:	eef0 8a67 	vmov.f32	s17, s15
 800e476:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e47a:	2600      	movs	r6, #0
 800e47c:	4632      	mov	r2, r6
 800e47e:	463b      	mov	r3, r7
 800e480:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e484:	f7f1 ff00 	bl	8000288 <__aeabi_dsub>
 800e488:	4622      	mov	r2, r4
 800e48a:	462b      	mov	r3, r5
 800e48c:	f7f2 f8b4 	bl	80005f8 <__aeabi_dmul>
 800e490:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e494:	4680      	mov	r8, r0
 800e496:	4689      	mov	r9, r1
 800e498:	4650      	mov	r0, sl
 800e49a:	4659      	mov	r1, fp
 800e49c:	f7f2 f8ac 	bl	80005f8 <__aeabi_dmul>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	4640      	mov	r0, r8
 800e4a6:	4649      	mov	r1, r9
 800e4a8:	f7f1 fef0 	bl	800028c <__adddf3>
 800e4ac:	4632      	mov	r2, r6
 800e4ae:	463b      	mov	r3, r7
 800e4b0:	4680      	mov	r8, r0
 800e4b2:	4689      	mov	r9, r1
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	4629      	mov	r1, r5
 800e4b8:	f7f2 f89e 	bl	80005f8 <__aeabi_dmul>
 800e4bc:	460b      	mov	r3, r1
 800e4be:	4604      	mov	r4, r0
 800e4c0:	460d      	mov	r5, r1
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	4649      	mov	r1, r9
 800e4c6:	4640      	mov	r0, r8
 800e4c8:	f7f1 fee0 	bl	800028c <__adddf3>
 800e4cc:	4b19      	ldr	r3, [pc, #100]	; (800e534 <__ieee754_pow+0x3fc>)
 800e4ce:	4299      	cmp	r1, r3
 800e4d0:	ec45 4b19 	vmov	d9, r4, r5
 800e4d4:	4606      	mov	r6, r0
 800e4d6:	460f      	mov	r7, r1
 800e4d8:	468b      	mov	fp, r1
 800e4da:	f340 82f1 	ble.w	800eac0 <__ieee754_pow+0x988>
 800e4de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e4e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e4e6:	4303      	orrs	r3, r0
 800e4e8:	f000 81e4 	beq.w	800e8b4 <__ieee754_pow+0x77c>
 800e4ec:	ec51 0b18 	vmov	r0, r1, d8
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	f7f2 faf2 	bl	8000adc <__aeabi_dcmplt>
 800e4f8:	3800      	subs	r0, #0
 800e4fa:	bf18      	it	ne
 800e4fc:	2001      	movne	r0, #1
 800e4fe:	e72b      	b.n	800e358 <__ieee754_pow+0x220>
 800e500:	60000000 	.word	0x60000000
 800e504:	3ff71547 	.word	0x3ff71547
 800e508:	f85ddf44 	.word	0xf85ddf44
 800e50c:	3e54ae0b 	.word	0x3e54ae0b
 800e510:	55555555 	.word	0x55555555
 800e514:	3fd55555 	.word	0x3fd55555
 800e518:	652b82fe 	.word	0x652b82fe
 800e51c:	3ff71547 	.word	0x3ff71547
 800e520:	00000000 	.word	0x00000000
 800e524:	bff00000 	.word	0xbff00000
 800e528:	3ff00000 	.word	0x3ff00000
 800e52c:	3fd00000 	.word	0x3fd00000
 800e530:	3fe00000 	.word	0x3fe00000
 800e534:	408fffff 	.word	0x408fffff
 800e538:	4bd5      	ldr	r3, [pc, #852]	; (800e890 <__ieee754_pow+0x758>)
 800e53a:	402b      	ands	r3, r5
 800e53c:	2200      	movs	r2, #0
 800e53e:	b92b      	cbnz	r3, 800e54c <__ieee754_pow+0x414>
 800e540:	4bd4      	ldr	r3, [pc, #848]	; (800e894 <__ieee754_pow+0x75c>)
 800e542:	f7f2 f859 	bl	80005f8 <__aeabi_dmul>
 800e546:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e54a:	460c      	mov	r4, r1
 800e54c:	1523      	asrs	r3, r4, #20
 800e54e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e552:	4413      	add	r3, r2
 800e554:	9305      	str	r3, [sp, #20]
 800e556:	4bd0      	ldr	r3, [pc, #832]	; (800e898 <__ieee754_pow+0x760>)
 800e558:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e55c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e560:	429c      	cmp	r4, r3
 800e562:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e566:	dd08      	ble.n	800e57a <__ieee754_pow+0x442>
 800e568:	4bcc      	ldr	r3, [pc, #816]	; (800e89c <__ieee754_pow+0x764>)
 800e56a:	429c      	cmp	r4, r3
 800e56c:	f340 8162 	ble.w	800e834 <__ieee754_pow+0x6fc>
 800e570:	9b05      	ldr	r3, [sp, #20]
 800e572:	3301      	adds	r3, #1
 800e574:	9305      	str	r3, [sp, #20]
 800e576:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e57a:	2400      	movs	r4, #0
 800e57c:	00e3      	lsls	r3, r4, #3
 800e57e:	9307      	str	r3, [sp, #28]
 800e580:	4bc7      	ldr	r3, [pc, #796]	; (800e8a0 <__ieee754_pow+0x768>)
 800e582:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e586:	ed93 7b00 	vldr	d7, [r3]
 800e58a:	4629      	mov	r1, r5
 800e58c:	ec53 2b17 	vmov	r2, r3, d7
 800e590:	eeb0 9a47 	vmov.f32	s18, s14
 800e594:	eef0 9a67 	vmov.f32	s19, s15
 800e598:	4682      	mov	sl, r0
 800e59a:	f7f1 fe75 	bl	8000288 <__aeabi_dsub>
 800e59e:	4652      	mov	r2, sl
 800e5a0:	4606      	mov	r6, r0
 800e5a2:	460f      	mov	r7, r1
 800e5a4:	462b      	mov	r3, r5
 800e5a6:	ec51 0b19 	vmov	r0, r1, d9
 800e5aa:	f7f1 fe6f 	bl	800028c <__adddf3>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	49bb      	ldr	r1, [pc, #748]	; (800e8a4 <__ieee754_pow+0x76c>)
 800e5b6:	f7f2 f949 	bl	800084c <__aeabi_ddiv>
 800e5ba:	ec41 0b1a 	vmov	d10, r0, r1
 800e5be:	4602      	mov	r2, r0
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	4639      	mov	r1, r7
 800e5c6:	f7f2 f817 	bl	80005f8 <__aeabi_dmul>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5d0:	9302      	str	r3, [sp, #8]
 800e5d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e5d6:	46ab      	mov	fp, r5
 800e5d8:	106d      	asrs	r5, r5, #1
 800e5da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e5de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e5e2:	ec41 0b18 	vmov	d8, r0, r1
 800e5e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	4640      	mov	r0, r8
 800e5ee:	4649      	mov	r1, r9
 800e5f0:	4614      	mov	r4, r2
 800e5f2:	461d      	mov	r5, r3
 800e5f4:	f7f2 f800 	bl	80005f8 <__aeabi_dmul>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	4639      	mov	r1, r7
 800e600:	f7f1 fe42 	bl	8000288 <__aeabi_dsub>
 800e604:	ec53 2b19 	vmov	r2, r3, d9
 800e608:	4606      	mov	r6, r0
 800e60a:	460f      	mov	r7, r1
 800e60c:	4620      	mov	r0, r4
 800e60e:	4629      	mov	r1, r5
 800e610:	f7f1 fe3a 	bl	8000288 <__aeabi_dsub>
 800e614:	4602      	mov	r2, r0
 800e616:	460b      	mov	r3, r1
 800e618:	4650      	mov	r0, sl
 800e61a:	4659      	mov	r1, fp
 800e61c:	f7f1 fe34 	bl	8000288 <__aeabi_dsub>
 800e620:	4642      	mov	r2, r8
 800e622:	464b      	mov	r3, r9
 800e624:	f7f1 ffe8 	bl	80005f8 <__aeabi_dmul>
 800e628:	4602      	mov	r2, r0
 800e62a:	460b      	mov	r3, r1
 800e62c:	4630      	mov	r0, r6
 800e62e:	4639      	mov	r1, r7
 800e630:	f7f1 fe2a 	bl	8000288 <__aeabi_dsub>
 800e634:	ec53 2b1a 	vmov	r2, r3, d10
 800e638:	f7f1 ffde 	bl	80005f8 <__aeabi_dmul>
 800e63c:	ec53 2b18 	vmov	r2, r3, d8
 800e640:	ec41 0b19 	vmov	d9, r0, r1
 800e644:	ec51 0b18 	vmov	r0, r1, d8
 800e648:	f7f1 ffd6 	bl	80005f8 <__aeabi_dmul>
 800e64c:	a37c      	add	r3, pc, #496	; (adr r3, 800e840 <__ieee754_pow+0x708>)
 800e64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e652:	4604      	mov	r4, r0
 800e654:	460d      	mov	r5, r1
 800e656:	f7f1 ffcf 	bl	80005f8 <__aeabi_dmul>
 800e65a:	a37b      	add	r3, pc, #492	; (adr r3, 800e848 <__ieee754_pow+0x710>)
 800e65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e660:	f7f1 fe14 	bl	800028c <__adddf3>
 800e664:	4622      	mov	r2, r4
 800e666:	462b      	mov	r3, r5
 800e668:	f7f1 ffc6 	bl	80005f8 <__aeabi_dmul>
 800e66c:	a378      	add	r3, pc, #480	; (adr r3, 800e850 <__ieee754_pow+0x718>)
 800e66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e672:	f7f1 fe0b 	bl	800028c <__adddf3>
 800e676:	4622      	mov	r2, r4
 800e678:	462b      	mov	r3, r5
 800e67a:	f7f1 ffbd 	bl	80005f8 <__aeabi_dmul>
 800e67e:	a376      	add	r3, pc, #472	; (adr r3, 800e858 <__ieee754_pow+0x720>)
 800e680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e684:	f7f1 fe02 	bl	800028c <__adddf3>
 800e688:	4622      	mov	r2, r4
 800e68a:	462b      	mov	r3, r5
 800e68c:	f7f1 ffb4 	bl	80005f8 <__aeabi_dmul>
 800e690:	a373      	add	r3, pc, #460	; (adr r3, 800e860 <__ieee754_pow+0x728>)
 800e692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e696:	f7f1 fdf9 	bl	800028c <__adddf3>
 800e69a:	4622      	mov	r2, r4
 800e69c:	462b      	mov	r3, r5
 800e69e:	f7f1 ffab 	bl	80005f8 <__aeabi_dmul>
 800e6a2:	a371      	add	r3, pc, #452	; (adr r3, 800e868 <__ieee754_pow+0x730>)
 800e6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a8:	f7f1 fdf0 	bl	800028c <__adddf3>
 800e6ac:	4622      	mov	r2, r4
 800e6ae:	4606      	mov	r6, r0
 800e6b0:	460f      	mov	r7, r1
 800e6b2:	462b      	mov	r3, r5
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	4629      	mov	r1, r5
 800e6b8:	f7f1 ff9e 	bl	80005f8 <__aeabi_dmul>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	460b      	mov	r3, r1
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	4639      	mov	r1, r7
 800e6c4:	f7f1 ff98 	bl	80005f8 <__aeabi_dmul>
 800e6c8:	4642      	mov	r2, r8
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	460d      	mov	r5, r1
 800e6ce:	464b      	mov	r3, r9
 800e6d0:	ec51 0b18 	vmov	r0, r1, d8
 800e6d4:	f7f1 fdda 	bl	800028c <__adddf3>
 800e6d8:	ec53 2b19 	vmov	r2, r3, d9
 800e6dc:	f7f1 ff8c 	bl	80005f8 <__aeabi_dmul>
 800e6e0:	4622      	mov	r2, r4
 800e6e2:	462b      	mov	r3, r5
 800e6e4:	f7f1 fdd2 	bl	800028c <__adddf3>
 800e6e8:	4642      	mov	r2, r8
 800e6ea:	4682      	mov	sl, r0
 800e6ec:	468b      	mov	fp, r1
 800e6ee:	464b      	mov	r3, r9
 800e6f0:	4640      	mov	r0, r8
 800e6f2:	4649      	mov	r1, r9
 800e6f4:	f7f1 ff80 	bl	80005f8 <__aeabi_dmul>
 800e6f8:	4b6b      	ldr	r3, [pc, #428]	; (800e8a8 <__ieee754_pow+0x770>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	4606      	mov	r6, r0
 800e6fe:	460f      	mov	r7, r1
 800e700:	f7f1 fdc4 	bl	800028c <__adddf3>
 800e704:	4652      	mov	r2, sl
 800e706:	465b      	mov	r3, fp
 800e708:	f7f1 fdc0 	bl	800028c <__adddf3>
 800e70c:	2000      	movs	r0, #0
 800e70e:	4604      	mov	r4, r0
 800e710:	460d      	mov	r5, r1
 800e712:	4602      	mov	r2, r0
 800e714:	460b      	mov	r3, r1
 800e716:	4640      	mov	r0, r8
 800e718:	4649      	mov	r1, r9
 800e71a:	f7f1 ff6d 	bl	80005f8 <__aeabi_dmul>
 800e71e:	4b62      	ldr	r3, [pc, #392]	; (800e8a8 <__ieee754_pow+0x770>)
 800e720:	4680      	mov	r8, r0
 800e722:	4689      	mov	r9, r1
 800e724:	2200      	movs	r2, #0
 800e726:	4620      	mov	r0, r4
 800e728:	4629      	mov	r1, r5
 800e72a:	f7f1 fdad 	bl	8000288 <__aeabi_dsub>
 800e72e:	4632      	mov	r2, r6
 800e730:	463b      	mov	r3, r7
 800e732:	f7f1 fda9 	bl	8000288 <__aeabi_dsub>
 800e736:	4602      	mov	r2, r0
 800e738:	460b      	mov	r3, r1
 800e73a:	4650      	mov	r0, sl
 800e73c:	4659      	mov	r1, fp
 800e73e:	f7f1 fda3 	bl	8000288 <__aeabi_dsub>
 800e742:	ec53 2b18 	vmov	r2, r3, d8
 800e746:	f7f1 ff57 	bl	80005f8 <__aeabi_dmul>
 800e74a:	4622      	mov	r2, r4
 800e74c:	4606      	mov	r6, r0
 800e74e:	460f      	mov	r7, r1
 800e750:	462b      	mov	r3, r5
 800e752:	ec51 0b19 	vmov	r0, r1, d9
 800e756:	f7f1 ff4f 	bl	80005f8 <__aeabi_dmul>
 800e75a:	4602      	mov	r2, r0
 800e75c:	460b      	mov	r3, r1
 800e75e:	4630      	mov	r0, r6
 800e760:	4639      	mov	r1, r7
 800e762:	f7f1 fd93 	bl	800028c <__adddf3>
 800e766:	4606      	mov	r6, r0
 800e768:	460f      	mov	r7, r1
 800e76a:	4602      	mov	r2, r0
 800e76c:	460b      	mov	r3, r1
 800e76e:	4640      	mov	r0, r8
 800e770:	4649      	mov	r1, r9
 800e772:	f7f1 fd8b 	bl	800028c <__adddf3>
 800e776:	a33e      	add	r3, pc, #248	; (adr r3, 800e870 <__ieee754_pow+0x738>)
 800e778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77c:	2000      	movs	r0, #0
 800e77e:	4604      	mov	r4, r0
 800e780:	460d      	mov	r5, r1
 800e782:	f7f1 ff39 	bl	80005f8 <__aeabi_dmul>
 800e786:	4642      	mov	r2, r8
 800e788:	ec41 0b18 	vmov	d8, r0, r1
 800e78c:	464b      	mov	r3, r9
 800e78e:	4620      	mov	r0, r4
 800e790:	4629      	mov	r1, r5
 800e792:	f7f1 fd79 	bl	8000288 <__aeabi_dsub>
 800e796:	4602      	mov	r2, r0
 800e798:	460b      	mov	r3, r1
 800e79a:	4630      	mov	r0, r6
 800e79c:	4639      	mov	r1, r7
 800e79e:	f7f1 fd73 	bl	8000288 <__aeabi_dsub>
 800e7a2:	a335      	add	r3, pc, #212	; (adr r3, 800e878 <__ieee754_pow+0x740>)
 800e7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a8:	f7f1 ff26 	bl	80005f8 <__aeabi_dmul>
 800e7ac:	a334      	add	r3, pc, #208	; (adr r3, 800e880 <__ieee754_pow+0x748>)
 800e7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b2:	4606      	mov	r6, r0
 800e7b4:	460f      	mov	r7, r1
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	f7f1 ff1d 	bl	80005f8 <__aeabi_dmul>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	4639      	mov	r1, r7
 800e7c6:	f7f1 fd61 	bl	800028c <__adddf3>
 800e7ca:	9a07      	ldr	r2, [sp, #28]
 800e7cc:	4b37      	ldr	r3, [pc, #220]	; (800e8ac <__ieee754_pow+0x774>)
 800e7ce:	4413      	add	r3, r2
 800e7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d4:	f7f1 fd5a 	bl	800028c <__adddf3>
 800e7d8:	4682      	mov	sl, r0
 800e7da:	9805      	ldr	r0, [sp, #20]
 800e7dc:	468b      	mov	fp, r1
 800e7de:	f7f1 fea1 	bl	8000524 <__aeabi_i2d>
 800e7e2:	9a07      	ldr	r2, [sp, #28]
 800e7e4:	4b32      	ldr	r3, [pc, #200]	; (800e8b0 <__ieee754_pow+0x778>)
 800e7e6:	4413      	add	r3, r2
 800e7e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e7ec:	4606      	mov	r6, r0
 800e7ee:	460f      	mov	r7, r1
 800e7f0:	4652      	mov	r2, sl
 800e7f2:	465b      	mov	r3, fp
 800e7f4:	ec51 0b18 	vmov	r0, r1, d8
 800e7f8:	f7f1 fd48 	bl	800028c <__adddf3>
 800e7fc:	4642      	mov	r2, r8
 800e7fe:	464b      	mov	r3, r9
 800e800:	f7f1 fd44 	bl	800028c <__adddf3>
 800e804:	4632      	mov	r2, r6
 800e806:	463b      	mov	r3, r7
 800e808:	f7f1 fd40 	bl	800028c <__adddf3>
 800e80c:	2000      	movs	r0, #0
 800e80e:	4632      	mov	r2, r6
 800e810:	463b      	mov	r3, r7
 800e812:	4604      	mov	r4, r0
 800e814:	460d      	mov	r5, r1
 800e816:	f7f1 fd37 	bl	8000288 <__aeabi_dsub>
 800e81a:	4642      	mov	r2, r8
 800e81c:	464b      	mov	r3, r9
 800e81e:	f7f1 fd33 	bl	8000288 <__aeabi_dsub>
 800e822:	ec53 2b18 	vmov	r2, r3, d8
 800e826:	f7f1 fd2f 	bl	8000288 <__aeabi_dsub>
 800e82a:	4602      	mov	r2, r0
 800e82c:	460b      	mov	r3, r1
 800e82e:	4650      	mov	r0, sl
 800e830:	4659      	mov	r1, fp
 800e832:	e610      	b.n	800e456 <__ieee754_pow+0x31e>
 800e834:	2401      	movs	r4, #1
 800e836:	e6a1      	b.n	800e57c <__ieee754_pow+0x444>
 800e838:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e888 <__ieee754_pow+0x750>
 800e83c:	e617      	b.n	800e46e <__ieee754_pow+0x336>
 800e83e:	bf00      	nop
 800e840:	4a454eef 	.word	0x4a454eef
 800e844:	3fca7e28 	.word	0x3fca7e28
 800e848:	93c9db65 	.word	0x93c9db65
 800e84c:	3fcd864a 	.word	0x3fcd864a
 800e850:	a91d4101 	.word	0xa91d4101
 800e854:	3fd17460 	.word	0x3fd17460
 800e858:	518f264d 	.word	0x518f264d
 800e85c:	3fd55555 	.word	0x3fd55555
 800e860:	db6fabff 	.word	0xdb6fabff
 800e864:	3fdb6db6 	.word	0x3fdb6db6
 800e868:	33333303 	.word	0x33333303
 800e86c:	3fe33333 	.word	0x3fe33333
 800e870:	e0000000 	.word	0xe0000000
 800e874:	3feec709 	.word	0x3feec709
 800e878:	dc3a03fd 	.word	0xdc3a03fd
 800e87c:	3feec709 	.word	0x3feec709
 800e880:	145b01f5 	.word	0x145b01f5
 800e884:	be3e2fe0 	.word	0xbe3e2fe0
 800e888:	00000000 	.word	0x00000000
 800e88c:	3ff00000 	.word	0x3ff00000
 800e890:	7ff00000 	.word	0x7ff00000
 800e894:	43400000 	.word	0x43400000
 800e898:	0003988e 	.word	0x0003988e
 800e89c:	000bb679 	.word	0x000bb679
 800e8a0:	080104c8 	.word	0x080104c8
 800e8a4:	3ff00000 	.word	0x3ff00000
 800e8a8:	40080000 	.word	0x40080000
 800e8ac:	080104e8 	.word	0x080104e8
 800e8b0:	080104d8 	.word	0x080104d8
 800e8b4:	a3b5      	add	r3, pc, #724	; (adr r3, 800eb8c <__ieee754_pow+0xa54>)
 800e8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ba:	4640      	mov	r0, r8
 800e8bc:	4649      	mov	r1, r9
 800e8be:	f7f1 fce5 	bl	800028c <__adddf3>
 800e8c2:	4622      	mov	r2, r4
 800e8c4:	ec41 0b1a 	vmov	d10, r0, r1
 800e8c8:	462b      	mov	r3, r5
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	4639      	mov	r1, r7
 800e8ce:	f7f1 fcdb 	bl	8000288 <__aeabi_dsub>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	ec51 0b1a 	vmov	r0, r1, d10
 800e8da:	f7f2 f91d 	bl	8000b18 <__aeabi_dcmpgt>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	f47f ae04 	bne.w	800e4ec <__ieee754_pow+0x3b4>
 800e8e4:	4aa4      	ldr	r2, [pc, #656]	; (800eb78 <__ieee754_pow+0xa40>)
 800e8e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	f340 8108 	ble.w	800eb00 <__ieee754_pow+0x9c8>
 800e8f0:	151b      	asrs	r3, r3, #20
 800e8f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e8f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e8fa:	fa4a f303 	asr.w	r3, sl, r3
 800e8fe:	445b      	add	r3, fp
 800e900:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e904:	4e9d      	ldr	r6, [pc, #628]	; (800eb7c <__ieee754_pow+0xa44>)
 800e906:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e90a:	4116      	asrs	r6, r2
 800e90c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e910:	2000      	movs	r0, #0
 800e912:	ea23 0106 	bic.w	r1, r3, r6
 800e916:	f1c2 0214 	rsb	r2, r2, #20
 800e91a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e91e:	fa4a fa02 	asr.w	sl, sl, r2
 800e922:	f1bb 0f00 	cmp.w	fp, #0
 800e926:	4602      	mov	r2, r0
 800e928:	460b      	mov	r3, r1
 800e92a:	4620      	mov	r0, r4
 800e92c:	4629      	mov	r1, r5
 800e92e:	bfb8      	it	lt
 800e930:	f1ca 0a00 	rsblt	sl, sl, #0
 800e934:	f7f1 fca8 	bl	8000288 <__aeabi_dsub>
 800e938:	ec41 0b19 	vmov	d9, r0, r1
 800e93c:	4642      	mov	r2, r8
 800e93e:	464b      	mov	r3, r9
 800e940:	ec51 0b19 	vmov	r0, r1, d9
 800e944:	f7f1 fca2 	bl	800028c <__adddf3>
 800e948:	a37b      	add	r3, pc, #492	; (adr r3, 800eb38 <__ieee754_pow+0xa00>)
 800e94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94e:	2000      	movs	r0, #0
 800e950:	4604      	mov	r4, r0
 800e952:	460d      	mov	r5, r1
 800e954:	f7f1 fe50 	bl	80005f8 <__aeabi_dmul>
 800e958:	ec53 2b19 	vmov	r2, r3, d9
 800e95c:	4606      	mov	r6, r0
 800e95e:	460f      	mov	r7, r1
 800e960:	4620      	mov	r0, r4
 800e962:	4629      	mov	r1, r5
 800e964:	f7f1 fc90 	bl	8000288 <__aeabi_dsub>
 800e968:	4602      	mov	r2, r0
 800e96a:	460b      	mov	r3, r1
 800e96c:	4640      	mov	r0, r8
 800e96e:	4649      	mov	r1, r9
 800e970:	f7f1 fc8a 	bl	8000288 <__aeabi_dsub>
 800e974:	a372      	add	r3, pc, #456	; (adr r3, 800eb40 <__ieee754_pow+0xa08>)
 800e976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97a:	f7f1 fe3d 	bl	80005f8 <__aeabi_dmul>
 800e97e:	a372      	add	r3, pc, #456	; (adr r3, 800eb48 <__ieee754_pow+0xa10>)
 800e980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e984:	4680      	mov	r8, r0
 800e986:	4689      	mov	r9, r1
 800e988:	4620      	mov	r0, r4
 800e98a:	4629      	mov	r1, r5
 800e98c:	f7f1 fe34 	bl	80005f8 <__aeabi_dmul>
 800e990:	4602      	mov	r2, r0
 800e992:	460b      	mov	r3, r1
 800e994:	4640      	mov	r0, r8
 800e996:	4649      	mov	r1, r9
 800e998:	f7f1 fc78 	bl	800028c <__adddf3>
 800e99c:	4604      	mov	r4, r0
 800e99e:	460d      	mov	r5, r1
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	4639      	mov	r1, r7
 800e9a8:	f7f1 fc70 	bl	800028c <__adddf3>
 800e9ac:	4632      	mov	r2, r6
 800e9ae:	463b      	mov	r3, r7
 800e9b0:	4680      	mov	r8, r0
 800e9b2:	4689      	mov	r9, r1
 800e9b4:	f7f1 fc68 	bl	8000288 <__aeabi_dsub>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	4620      	mov	r0, r4
 800e9be:	4629      	mov	r1, r5
 800e9c0:	f7f1 fc62 	bl	8000288 <__aeabi_dsub>
 800e9c4:	4642      	mov	r2, r8
 800e9c6:	4606      	mov	r6, r0
 800e9c8:	460f      	mov	r7, r1
 800e9ca:	464b      	mov	r3, r9
 800e9cc:	4640      	mov	r0, r8
 800e9ce:	4649      	mov	r1, r9
 800e9d0:	f7f1 fe12 	bl	80005f8 <__aeabi_dmul>
 800e9d4:	a35e      	add	r3, pc, #376	; (adr r3, 800eb50 <__ieee754_pow+0xa18>)
 800e9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9da:	4604      	mov	r4, r0
 800e9dc:	460d      	mov	r5, r1
 800e9de:	f7f1 fe0b 	bl	80005f8 <__aeabi_dmul>
 800e9e2:	a35d      	add	r3, pc, #372	; (adr r3, 800eb58 <__ieee754_pow+0xa20>)
 800e9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e8:	f7f1 fc4e 	bl	8000288 <__aeabi_dsub>
 800e9ec:	4622      	mov	r2, r4
 800e9ee:	462b      	mov	r3, r5
 800e9f0:	f7f1 fe02 	bl	80005f8 <__aeabi_dmul>
 800e9f4:	a35a      	add	r3, pc, #360	; (adr r3, 800eb60 <__ieee754_pow+0xa28>)
 800e9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fa:	f7f1 fc47 	bl	800028c <__adddf3>
 800e9fe:	4622      	mov	r2, r4
 800ea00:	462b      	mov	r3, r5
 800ea02:	f7f1 fdf9 	bl	80005f8 <__aeabi_dmul>
 800ea06:	a358      	add	r3, pc, #352	; (adr r3, 800eb68 <__ieee754_pow+0xa30>)
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	f7f1 fc3c 	bl	8000288 <__aeabi_dsub>
 800ea10:	4622      	mov	r2, r4
 800ea12:	462b      	mov	r3, r5
 800ea14:	f7f1 fdf0 	bl	80005f8 <__aeabi_dmul>
 800ea18:	a355      	add	r3, pc, #340	; (adr r3, 800eb70 <__ieee754_pow+0xa38>)
 800ea1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1e:	f7f1 fc35 	bl	800028c <__adddf3>
 800ea22:	4622      	mov	r2, r4
 800ea24:	462b      	mov	r3, r5
 800ea26:	f7f1 fde7 	bl	80005f8 <__aeabi_dmul>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	4640      	mov	r0, r8
 800ea30:	4649      	mov	r1, r9
 800ea32:	f7f1 fc29 	bl	8000288 <__aeabi_dsub>
 800ea36:	4604      	mov	r4, r0
 800ea38:	460d      	mov	r5, r1
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	4640      	mov	r0, r8
 800ea40:	4649      	mov	r1, r9
 800ea42:	f7f1 fdd9 	bl	80005f8 <__aeabi_dmul>
 800ea46:	2200      	movs	r2, #0
 800ea48:	ec41 0b19 	vmov	d9, r0, r1
 800ea4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ea50:	4620      	mov	r0, r4
 800ea52:	4629      	mov	r1, r5
 800ea54:	f7f1 fc18 	bl	8000288 <__aeabi_dsub>
 800ea58:	4602      	mov	r2, r0
 800ea5a:	460b      	mov	r3, r1
 800ea5c:	ec51 0b19 	vmov	r0, r1, d9
 800ea60:	f7f1 fef4 	bl	800084c <__aeabi_ddiv>
 800ea64:	4632      	mov	r2, r6
 800ea66:	4604      	mov	r4, r0
 800ea68:	460d      	mov	r5, r1
 800ea6a:	463b      	mov	r3, r7
 800ea6c:	4640      	mov	r0, r8
 800ea6e:	4649      	mov	r1, r9
 800ea70:	f7f1 fdc2 	bl	80005f8 <__aeabi_dmul>
 800ea74:	4632      	mov	r2, r6
 800ea76:	463b      	mov	r3, r7
 800ea78:	f7f1 fc08 	bl	800028c <__adddf3>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	4620      	mov	r0, r4
 800ea82:	4629      	mov	r1, r5
 800ea84:	f7f1 fc00 	bl	8000288 <__aeabi_dsub>
 800ea88:	4642      	mov	r2, r8
 800ea8a:	464b      	mov	r3, r9
 800ea8c:	f7f1 fbfc 	bl	8000288 <__aeabi_dsub>
 800ea90:	460b      	mov	r3, r1
 800ea92:	4602      	mov	r2, r0
 800ea94:	493a      	ldr	r1, [pc, #232]	; (800eb80 <__ieee754_pow+0xa48>)
 800ea96:	2000      	movs	r0, #0
 800ea98:	f7f1 fbf6 	bl	8000288 <__aeabi_dsub>
 800ea9c:	ec41 0b10 	vmov	d0, r0, r1
 800eaa0:	ee10 3a90 	vmov	r3, s1
 800eaa4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800eaa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eaac:	da2b      	bge.n	800eb06 <__ieee754_pow+0x9ce>
 800eaae:	4650      	mov	r0, sl
 800eab0:	f001 f8ce 	bl	800fc50 <scalbn>
 800eab4:	ec51 0b10 	vmov	r0, r1, d0
 800eab8:	ec53 2b18 	vmov	r2, r3, d8
 800eabc:	f7ff bbed 	b.w	800e29a <__ieee754_pow+0x162>
 800eac0:	4b30      	ldr	r3, [pc, #192]	; (800eb84 <__ieee754_pow+0xa4c>)
 800eac2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800eac6:	429e      	cmp	r6, r3
 800eac8:	f77f af0c 	ble.w	800e8e4 <__ieee754_pow+0x7ac>
 800eacc:	4b2e      	ldr	r3, [pc, #184]	; (800eb88 <__ieee754_pow+0xa50>)
 800eace:	440b      	add	r3, r1
 800ead0:	4303      	orrs	r3, r0
 800ead2:	d009      	beq.n	800eae8 <__ieee754_pow+0x9b0>
 800ead4:	ec51 0b18 	vmov	r0, r1, d8
 800ead8:	2200      	movs	r2, #0
 800eada:	2300      	movs	r3, #0
 800eadc:	f7f1 fffe 	bl	8000adc <__aeabi_dcmplt>
 800eae0:	3800      	subs	r0, #0
 800eae2:	bf18      	it	ne
 800eae4:	2001      	movne	r0, #1
 800eae6:	e447      	b.n	800e378 <__ieee754_pow+0x240>
 800eae8:	4622      	mov	r2, r4
 800eaea:	462b      	mov	r3, r5
 800eaec:	f7f1 fbcc 	bl	8000288 <__aeabi_dsub>
 800eaf0:	4642      	mov	r2, r8
 800eaf2:	464b      	mov	r3, r9
 800eaf4:	f7f2 f806 	bl	8000b04 <__aeabi_dcmpge>
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	f43f aef3 	beq.w	800e8e4 <__ieee754_pow+0x7ac>
 800eafe:	e7e9      	b.n	800ead4 <__ieee754_pow+0x99c>
 800eb00:	f04f 0a00 	mov.w	sl, #0
 800eb04:	e71a      	b.n	800e93c <__ieee754_pow+0x804>
 800eb06:	ec51 0b10 	vmov	r0, r1, d0
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	e7d4      	b.n	800eab8 <__ieee754_pow+0x980>
 800eb0e:	491c      	ldr	r1, [pc, #112]	; (800eb80 <__ieee754_pow+0xa48>)
 800eb10:	2000      	movs	r0, #0
 800eb12:	f7ff bb30 	b.w	800e176 <__ieee754_pow+0x3e>
 800eb16:	2000      	movs	r0, #0
 800eb18:	2100      	movs	r1, #0
 800eb1a:	f7ff bb2c 	b.w	800e176 <__ieee754_pow+0x3e>
 800eb1e:	4630      	mov	r0, r6
 800eb20:	4639      	mov	r1, r7
 800eb22:	f7ff bb28 	b.w	800e176 <__ieee754_pow+0x3e>
 800eb26:	9204      	str	r2, [sp, #16]
 800eb28:	f7ff bb7a 	b.w	800e220 <__ieee754_pow+0xe8>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	f7ff bb64 	b.w	800e1fa <__ieee754_pow+0xc2>
 800eb32:	bf00      	nop
 800eb34:	f3af 8000 	nop.w
 800eb38:	00000000 	.word	0x00000000
 800eb3c:	3fe62e43 	.word	0x3fe62e43
 800eb40:	fefa39ef 	.word	0xfefa39ef
 800eb44:	3fe62e42 	.word	0x3fe62e42
 800eb48:	0ca86c39 	.word	0x0ca86c39
 800eb4c:	be205c61 	.word	0xbe205c61
 800eb50:	72bea4d0 	.word	0x72bea4d0
 800eb54:	3e663769 	.word	0x3e663769
 800eb58:	c5d26bf1 	.word	0xc5d26bf1
 800eb5c:	3ebbbd41 	.word	0x3ebbbd41
 800eb60:	af25de2c 	.word	0xaf25de2c
 800eb64:	3f11566a 	.word	0x3f11566a
 800eb68:	16bebd93 	.word	0x16bebd93
 800eb6c:	3f66c16c 	.word	0x3f66c16c
 800eb70:	5555553e 	.word	0x5555553e
 800eb74:	3fc55555 	.word	0x3fc55555
 800eb78:	3fe00000 	.word	0x3fe00000
 800eb7c:	000fffff 	.word	0x000fffff
 800eb80:	3ff00000 	.word	0x3ff00000
 800eb84:	4090cbff 	.word	0x4090cbff
 800eb88:	3f6f3400 	.word	0x3f6f3400
 800eb8c:	652b82fe 	.word	0x652b82fe
 800eb90:	3c971547 	.word	0x3c971547
 800eb94:	00000000 	.word	0x00000000

0800eb98 <__ieee754_rem_pio2>:
 800eb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb9c:	ed2d 8b02 	vpush	{d8}
 800eba0:	ec55 4b10 	vmov	r4, r5, d0
 800eba4:	4bca      	ldr	r3, [pc, #808]	; (800eed0 <__ieee754_rem_pio2+0x338>)
 800eba6:	b08b      	sub	sp, #44	; 0x2c
 800eba8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ebac:	4598      	cmp	r8, r3
 800ebae:	4682      	mov	sl, r0
 800ebb0:	9502      	str	r5, [sp, #8]
 800ebb2:	dc08      	bgt.n	800ebc6 <__ieee754_rem_pio2+0x2e>
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	ed80 0b00 	vstr	d0, [r0]
 800ebbc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ebc0:	f04f 0b00 	mov.w	fp, #0
 800ebc4:	e028      	b.n	800ec18 <__ieee754_rem_pio2+0x80>
 800ebc6:	4bc3      	ldr	r3, [pc, #780]	; (800eed4 <__ieee754_rem_pio2+0x33c>)
 800ebc8:	4598      	cmp	r8, r3
 800ebca:	dc78      	bgt.n	800ecbe <__ieee754_rem_pio2+0x126>
 800ebcc:	9b02      	ldr	r3, [sp, #8]
 800ebce:	4ec2      	ldr	r6, [pc, #776]	; (800eed8 <__ieee754_rem_pio2+0x340>)
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	ee10 0a10 	vmov	r0, s0
 800ebd6:	a3b0      	add	r3, pc, #704	; (adr r3, 800ee98 <__ieee754_rem_pio2+0x300>)
 800ebd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebdc:	4629      	mov	r1, r5
 800ebde:	dd39      	ble.n	800ec54 <__ieee754_rem_pio2+0xbc>
 800ebe0:	f7f1 fb52 	bl	8000288 <__aeabi_dsub>
 800ebe4:	45b0      	cmp	r8, r6
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	460d      	mov	r5, r1
 800ebea:	d01b      	beq.n	800ec24 <__ieee754_rem_pio2+0x8c>
 800ebec:	a3ac      	add	r3, pc, #688	; (adr r3, 800eea0 <__ieee754_rem_pio2+0x308>)
 800ebee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf2:	f7f1 fb49 	bl	8000288 <__aeabi_dsub>
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	e9ca 2300 	strd	r2, r3, [sl]
 800ebfe:	4620      	mov	r0, r4
 800ec00:	4629      	mov	r1, r5
 800ec02:	f7f1 fb41 	bl	8000288 <__aeabi_dsub>
 800ec06:	a3a6      	add	r3, pc, #664	; (adr r3, 800eea0 <__ieee754_rem_pio2+0x308>)
 800ec08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0c:	f7f1 fb3c 	bl	8000288 <__aeabi_dsub>
 800ec10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec14:	f04f 0b01 	mov.w	fp, #1
 800ec18:	4658      	mov	r0, fp
 800ec1a:	b00b      	add	sp, #44	; 0x2c
 800ec1c:	ecbd 8b02 	vpop	{d8}
 800ec20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec24:	a3a0      	add	r3, pc, #640	; (adr r3, 800eea8 <__ieee754_rem_pio2+0x310>)
 800ec26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2a:	f7f1 fb2d 	bl	8000288 <__aeabi_dsub>
 800ec2e:	a3a0      	add	r3, pc, #640	; (adr r3, 800eeb0 <__ieee754_rem_pio2+0x318>)
 800ec30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec34:	4604      	mov	r4, r0
 800ec36:	460d      	mov	r5, r1
 800ec38:	f7f1 fb26 	bl	8000288 <__aeabi_dsub>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	460b      	mov	r3, r1
 800ec40:	e9ca 2300 	strd	r2, r3, [sl]
 800ec44:	4620      	mov	r0, r4
 800ec46:	4629      	mov	r1, r5
 800ec48:	f7f1 fb1e 	bl	8000288 <__aeabi_dsub>
 800ec4c:	a398      	add	r3, pc, #608	; (adr r3, 800eeb0 <__ieee754_rem_pio2+0x318>)
 800ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec52:	e7db      	b.n	800ec0c <__ieee754_rem_pio2+0x74>
 800ec54:	f7f1 fb1a 	bl	800028c <__adddf3>
 800ec58:	45b0      	cmp	r8, r6
 800ec5a:	4604      	mov	r4, r0
 800ec5c:	460d      	mov	r5, r1
 800ec5e:	d016      	beq.n	800ec8e <__ieee754_rem_pio2+0xf6>
 800ec60:	a38f      	add	r3, pc, #572	; (adr r3, 800eea0 <__ieee754_rem_pio2+0x308>)
 800ec62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec66:	f7f1 fb11 	bl	800028c <__adddf3>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	e9ca 2300 	strd	r2, r3, [sl]
 800ec72:	4620      	mov	r0, r4
 800ec74:	4629      	mov	r1, r5
 800ec76:	f7f1 fb07 	bl	8000288 <__aeabi_dsub>
 800ec7a:	a389      	add	r3, pc, #548	; (adr r3, 800eea0 <__ieee754_rem_pio2+0x308>)
 800ec7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec80:	f7f1 fb04 	bl	800028c <__adddf3>
 800ec84:	f04f 3bff 	mov.w	fp, #4294967295
 800ec88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec8c:	e7c4      	b.n	800ec18 <__ieee754_rem_pio2+0x80>
 800ec8e:	a386      	add	r3, pc, #536	; (adr r3, 800eea8 <__ieee754_rem_pio2+0x310>)
 800ec90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec94:	f7f1 fafa 	bl	800028c <__adddf3>
 800ec98:	a385      	add	r3, pc, #532	; (adr r3, 800eeb0 <__ieee754_rem_pio2+0x318>)
 800ec9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9e:	4604      	mov	r4, r0
 800eca0:	460d      	mov	r5, r1
 800eca2:	f7f1 faf3 	bl	800028c <__adddf3>
 800eca6:	4602      	mov	r2, r0
 800eca8:	460b      	mov	r3, r1
 800ecaa:	e9ca 2300 	strd	r2, r3, [sl]
 800ecae:	4620      	mov	r0, r4
 800ecb0:	4629      	mov	r1, r5
 800ecb2:	f7f1 fae9 	bl	8000288 <__aeabi_dsub>
 800ecb6:	a37e      	add	r3, pc, #504	; (adr r3, 800eeb0 <__ieee754_rem_pio2+0x318>)
 800ecb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecbc:	e7e0      	b.n	800ec80 <__ieee754_rem_pio2+0xe8>
 800ecbe:	4b87      	ldr	r3, [pc, #540]	; (800eedc <__ieee754_rem_pio2+0x344>)
 800ecc0:	4598      	cmp	r8, r3
 800ecc2:	f300 80d9 	bgt.w	800ee78 <__ieee754_rem_pio2+0x2e0>
 800ecc6:	f000 ff2d 	bl	800fb24 <fabs>
 800ecca:	ec55 4b10 	vmov	r4, r5, d0
 800ecce:	ee10 0a10 	vmov	r0, s0
 800ecd2:	a379      	add	r3, pc, #484	; (adr r3, 800eeb8 <__ieee754_rem_pio2+0x320>)
 800ecd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd8:	4629      	mov	r1, r5
 800ecda:	f7f1 fc8d 	bl	80005f8 <__aeabi_dmul>
 800ecde:	4b80      	ldr	r3, [pc, #512]	; (800eee0 <__ieee754_rem_pio2+0x348>)
 800ece0:	2200      	movs	r2, #0
 800ece2:	f7f1 fad3 	bl	800028c <__adddf3>
 800ece6:	f7f1 ff37 	bl	8000b58 <__aeabi_d2iz>
 800ecea:	4683      	mov	fp, r0
 800ecec:	f7f1 fc1a 	bl	8000524 <__aeabi_i2d>
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	ec43 2b18 	vmov	d8, r2, r3
 800ecf8:	a367      	add	r3, pc, #412	; (adr r3, 800ee98 <__ieee754_rem_pio2+0x300>)
 800ecfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfe:	f7f1 fc7b 	bl	80005f8 <__aeabi_dmul>
 800ed02:	4602      	mov	r2, r0
 800ed04:	460b      	mov	r3, r1
 800ed06:	4620      	mov	r0, r4
 800ed08:	4629      	mov	r1, r5
 800ed0a:	f7f1 fabd 	bl	8000288 <__aeabi_dsub>
 800ed0e:	a364      	add	r3, pc, #400	; (adr r3, 800eea0 <__ieee754_rem_pio2+0x308>)
 800ed10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed14:	4606      	mov	r6, r0
 800ed16:	460f      	mov	r7, r1
 800ed18:	ec51 0b18 	vmov	r0, r1, d8
 800ed1c:	f7f1 fc6c 	bl	80005f8 <__aeabi_dmul>
 800ed20:	f1bb 0f1f 	cmp.w	fp, #31
 800ed24:	4604      	mov	r4, r0
 800ed26:	460d      	mov	r5, r1
 800ed28:	dc0d      	bgt.n	800ed46 <__ieee754_rem_pio2+0x1ae>
 800ed2a:	4b6e      	ldr	r3, [pc, #440]	; (800eee4 <__ieee754_rem_pio2+0x34c>)
 800ed2c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ed30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed34:	4543      	cmp	r3, r8
 800ed36:	d006      	beq.n	800ed46 <__ieee754_rem_pio2+0x1ae>
 800ed38:	4622      	mov	r2, r4
 800ed3a:	462b      	mov	r3, r5
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	4639      	mov	r1, r7
 800ed40:	f7f1 faa2 	bl	8000288 <__aeabi_dsub>
 800ed44:	e00f      	b.n	800ed66 <__ieee754_rem_pio2+0x1ce>
 800ed46:	462b      	mov	r3, r5
 800ed48:	4622      	mov	r2, r4
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	4639      	mov	r1, r7
 800ed4e:	f7f1 fa9b 	bl	8000288 <__aeabi_dsub>
 800ed52:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ed56:	9303      	str	r3, [sp, #12]
 800ed58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed5c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ed60:	f1b8 0f10 	cmp.w	r8, #16
 800ed64:	dc02      	bgt.n	800ed6c <__ieee754_rem_pio2+0x1d4>
 800ed66:	e9ca 0100 	strd	r0, r1, [sl]
 800ed6a:	e039      	b.n	800ede0 <__ieee754_rem_pio2+0x248>
 800ed6c:	a34e      	add	r3, pc, #312	; (adr r3, 800eea8 <__ieee754_rem_pio2+0x310>)
 800ed6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed72:	ec51 0b18 	vmov	r0, r1, d8
 800ed76:	f7f1 fc3f 	bl	80005f8 <__aeabi_dmul>
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	460d      	mov	r5, r1
 800ed7e:	4602      	mov	r2, r0
 800ed80:	460b      	mov	r3, r1
 800ed82:	4630      	mov	r0, r6
 800ed84:	4639      	mov	r1, r7
 800ed86:	f7f1 fa7f 	bl	8000288 <__aeabi_dsub>
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	4680      	mov	r8, r0
 800ed90:	4689      	mov	r9, r1
 800ed92:	4630      	mov	r0, r6
 800ed94:	4639      	mov	r1, r7
 800ed96:	f7f1 fa77 	bl	8000288 <__aeabi_dsub>
 800ed9a:	4622      	mov	r2, r4
 800ed9c:	462b      	mov	r3, r5
 800ed9e:	f7f1 fa73 	bl	8000288 <__aeabi_dsub>
 800eda2:	a343      	add	r3, pc, #268	; (adr r3, 800eeb0 <__ieee754_rem_pio2+0x318>)
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	4604      	mov	r4, r0
 800edaa:	460d      	mov	r5, r1
 800edac:	ec51 0b18 	vmov	r0, r1, d8
 800edb0:	f7f1 fc22 	bl	80005f8 <__aeabi_dmul>
 800edb4:	4622      	mov	r2, r4
 800edb6:	462b      	mov	r3, r5
 800edb8:	f7f1 fa66 	bl	8000288 <__aeabi_dsub>
 800edbc:	4602      	mov	r2, r0
 800edbe:	460b      	mov	r3, r1
 800edc0:	4604      	mov	r4, r0
 800edc2:	460d      	mov	r5, r1
 800edc4:	4640      	mov	r0, r8
 800edc6:	4649      	mov	r1, r9
 800edc8:	f7f1 fa5e 	bl	8000288 <__aeabi_dsub>
 800edcc:	9a03      	ldr	r2, [sp, #12]
 800edce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800edd2:	1ad3      	subs	r3, r2, r3
 800edd4:	2b31      	cmp	r3, #49	; 0x31
 800edd6:	dc24      	bgt.n	800ee22 <__ieee754_rem_pio2+0x28a>
 800edd8:	e9ca 0100 	strd	r0, r1, [sl]
 800eddc:	4646      	mov	r6, r8
 800edde:	464f      	mov	r7, r9
 800ede0:	e9da 8900 	ldrd	r8, r9, [sl]
 800ede4:	4630      	mov	r0, r6
 800ede6:	4642      	mov	r2, r8
 800ede8:	464b      	mov	r3, r9
 800edea:	4639      	mov	r1, r7
 800edec:	f7f1 fa4c 	bl	8000288 <__aeabi_dsub>
 800edf0:	462b      	mov	r3, r5
 800edf2:	4622      	mov	r2, r4
 800edf4:	f7f1 fa48 	bl	8000288 <__aeabi_dsub>
 800edf8:	9b02      	ldr	r3, [sp, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee00:	f6bf af0a 	bge.w	800ec18 <__ieee754_rem_pio2+0x80>
 800ee04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ee08:	f8ca 3004 	str.w	r3, [sl, #4]
 800ee0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee10:	f8ca 8000 	str.w	r8, [sl]
 800ee14:	f8ca 0008 	str.w	r0, [sl, #8]
 800ee18:	f8ca 300c 	str.w	r3, [sl, #12]
 800ee1c:	f1cb 0b00 	rsb	fp, fp, #0
 800ee20:	e6fa      	b.n	800ec18 <__ieee754_rem_pio2+0x80>
 800ee22:	a327      	add	r3, pc, #156	; (adr r3, 800eec0 <__ieee754_rem_pio2+0x328>)
 800ee24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee28:	ec51 0b18 	vmov	r0, r1, d8
 800ee2c:	f7f1 fbe4 	bl	80005f8 <__aeabi_dmul>
 800ee30:	4604      	mov	r4, r0
 800ee32:	460d      	mov	r5, r1
 800ee34:	4602      	mov	r2, r0
 800ee36:	460b      	mov	r3, r1
 800ee38:	4640      	mov	r0, r8
 800ee3a:	4649      	mov	r1, r9
 800ee3c:	f7f1 fa24 	bl	8000288 <__aeabi_dsub>
 800ee40:	4602      	mov	r2, r0
 800ee42:	460b      	mov	r3, r1
 800ee44:	4606      	mov	r6, r0
 800ee46:	460f      	mov	r7, r1
 800ee48:	4640      	mov	r0, r8
 800ee4a:	4649      	mov	r1, r9
 800ee4c:	f7f1 fa1c 	bl	8000288 <__aeabi_dsub>
 800ee50:	4622      	mov	r2, r4
 800ee52:	462b      	mov	r3, r5
 800ee54:	f7f1 fa18 	bl	8000288 <__aeabi_dsub>
 800ee58:	a31b      	add	r3, pc, #108	; (adr r3, 800eec8 <__ieee754_rem_pio2+0x330>)
 800ee5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5e:	4604      	mov	r4, r0
 800ee60:	460d      	mov	r5, r1
 800ee62:	ec51 0b18 	vmov	r0, r1, d8
 800ee66:	f7f1 fbc7 	bl	80005f8 <__aeabi_dmul>
 800ee6a:	4622      	mov	r2, r4
 800ee6c:	462b      	mov	r3, r5
 800ee6e:	f7f1 fa0b 	bl	8000288 <__aeabi_dsub>
 800ee72:	4604      	mov	r4, r0
 800ee74:	460d      	mov	r5, r1
 800ee76:	e75f      	b.n	800ed38 <__ieee754_rem_pio2+0x1a0>
 800ee78:	4b1b      	ldr	r3, [pc, #108]	; (800eee8 <__ieee754_rem_pio2+0x350>)
 800ee7a:	4598      	cmp	r8, r3
 800ee7c:	dd36      	ble.n	800eeec <__ieee754_rem_pio2+0x354>
 800ee7e:	ee10 2a10 	vmov	r2, s0
 800ee82:	462b      	mov	r3, r5
 800ee84:	4620      	mov	r0, r4
 800ee86:	4629      	mov	r1, r5
 800ee88:	f7f1 f9fe 	bl	8000288 <__aeabi_dsub>
 800ee8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee90:	e9ca 0100 	strd	r0, r1, [sl]
 800ee94:	e694      	b.n	800ebc0 <__ieee754_rem_pio2+0x28>
 800ee96:	bf00      	nop
 800ee98:	54400000 	.word	0x54400000
 800ee9c:	3ff921fb 	.word	0x3ff921fb
 800eea0:	1a626331 	.word	0x1a626331
 800eea4:	3dd0b461 	.word	0x3dd0b461
 800eea8:	1a600000 	.word	0x1a600000
 800eeac:	3dd0b461 	.word	0x3dd0b461
 800eeb0:	2e037073 	.word	0x2e037073
 800eeb4:	3ba3198a 	.word	0x3ba3198a
 800eeb8:	6dc9c883 	.word	0x6dc9c883
 800eebc:	3fe45f30 	.word	0x3fe45f30
 800eec0:	2e000000 	.word	0x2e000000
 800eec4:	3ba3198a 	.word	0x3ba3198a
 800eec8:	252049c1 	.word	0x252049c1
 800eecc:	397b839a 	.word	0x397b839a
 800eed0:	3fe921fb 	.word	0x3fe921fb
 800eed4:	4002d97b 	.word	0x4002d97b
 800eed8:	3ff921fb 	.word	0x3ff921fb
 800eedc:	413921fb 	.word	0x413921fb
 800eee0:	3fe00000 	.word	0x3fe00000
 800eee4:	080104f8 	.word	0x080104f8
 800eee8:	7fefffff 	.word	0x7fefffff
 800eeec:	ea4f 5428 	mov.w	r4, r8, asr #20
 800eef0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800eef4:	ee10 0a10 	vmov	r0, s0
 800eef8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800eefc:	ee10 6a10 	vmov	r6, s0
 800ef00:	460f      	mov	r7, r1
 800ef02:	f7f1 fe29 	bl	8000b58 <__aeabi_d2iz>
 800ef06:	f7f1 fb0d 	bl	8000524 <__aeabi_i2d>
 800ef0a:	4602      	mov	r2, r0
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	4630      	mov	r0, r6
 800ef10:	4639      	mov	r1, r7
 800ef12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef16:	f7f1 f9b7 	bl	8000288 <__aeabi_dsub>
 800ef1a:	4b23      	ldr	r3, [pc, #140]	; (800efa8 <__ieee754_rem_pio2+0x410>)
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f7f1 fb6b 	bl	80005f8 <__aeabi_dmul>
 800ef22:	460f      	mov	r7, r1
 800ef24:	4606      	mov	r6, r0
 800ef26:	f7f1 fe17 	bl	8000b58 <__aeabi_d2iz>
 800ef2a:	f7f1 fafb 	bl	8000524 <__aeabi_i2d>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	460b      	mov	r3, r1
 800ef32:	4630      	mov	r0, r6
 800ef34:	4639      	mov	r1, r7
 800ef36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ef3a:	f7f1 f9a5 	bl	8000288 <__aeabi_dsub>
 800ef3e:	4b1a      	ldr	r3, [pc, #104]	; (800efa8 <__ieee754_rem_pio2+0x410>)
 800ef40:	2200      	movs	r2, #0
 800ef42:	f7f1 fb59 	bl	80005f8 <__aeabi_dmul>
 800ef46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ef4a:	ad04      	add	r5, sp, #16
 800ef4c:	f04f 0803 	mov.w	r8, #3
 800ef50:	46a9      	mov	r9, r5
 800ef52:	2600      	movs	r6, #0
 800ef54:	2700      	movs	r7, #0
 800ef56:	4632      	mov	r2, r6
 800ef58:	463b      	mov	r3, r7
 800ef5a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ef5e:	46c3      	mov	fp, r8
 800ef60:	3d08      	subs	r5, #8
 800ef62:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef66:	f7f1 fdaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d1f3      	bne.n	800ef56 <__ieee754_rem_pio2+0x3be>
 800ef6e:	4b0f      	ldr	r3, [pc, #60]	; (800efac <__ieee754_rem_pio2+0x414>)
 800ef70:	9301      	str	r3, [sp, #4]
 800ef72:	2302      	movs	r3, #2
 800ef74:	9300      	str	r3, [sp, #0]
 800ef76:	4622      	mov	r2, r4
 800ef78:	465b      	mov	r3, fp
 800ef7a:	4651      	mov	r1, sl
 800ef7c:	4648      	mov	r0, r9
 800ef7e:	f000 f993 	bl	800f2a8 <__kernel_rem_pio2>
 800ef82:	9b02      	ldr	r3, [sp, #8]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	4683      	mov	fp, r0
 800ef88:	f6bf ae46 	bge.w	800ec18 <__ieee754_rem_pio2+0x80>
 800ef8c:	e9da 2100 	ldrd	r2, r1, [sl]
 800ef90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef94:	e9ca 2300 	strd	r2, r3, [sl]
 800ef98:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ef9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efa0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800efa4:	e73a      	b.n	800ee1c <__ieee754_rem_pio2+0x284>
 800efa6:	bf00      	nop
 800efa8:	41700000 	.word	0x41700000
 800efac:	08010578 	.word	0x08010578

0800efb0 <__ieee754_sqrt>:
 800efb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb4:	ec55 4b10 	vmov	r4, r5, d0
 800efb8:	4e55      	ldr	r6, [pc, #340]	; (800f110 <__ieee754_sqrt+0x160>)
 800efba:	43ae      	bics	r6, r5
 800efbc:	ee10 0a10 	vmov	r0, s0
 800efc0:	ee10 3a10 	vmov	r3, s0
 800efc4:	462a      	mov	r2, r5
 800efc6:	4629      	mov	r1, r5
 800efc8:	d110      	bne.n	800efec <__ieee754_sqrt+0x3c>
 800efca:	ee10 2a10 	vmov	r2, s0
 800efce:	462b      	mov	r3, r5
 800efd0:	f7f1 fb12 	bl	80005f8 <__aeabi_dmul>
 800efd4:	4602      	mov	r2, r0
 800efd6:	460b      	mov	r3, r1
 800efd8:	4620      	mov	r0, r4
 800efda:	4629      	mov	r1, r5
 800efdc:	f7f1 f956 	bl	800028c <__adddf3>
 800efe0:	4604      	mov	r4, r0
 800efe2:	460d      	mov	r5, r1
 800efe4:	ec45 4b10 	vmov	d0, r4, r5
 800efe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efec:	2d00      	cmp	r5, #0
 800efee:	dc10      	bgt.n	800f012 <__ieee754_sqrt+0x62>
 800eff0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800eff4:	4330      	orrs	r0, r6
 800eff6:	d0f5      	beq.n	800efe4 <__ieee754_sqrt+0x34>
 800eff8:	b15d      	cbz	r5, 800f012 <__ieee754_sqrt+0x62>
 800effa:	ee10 2a10 	vmov	r2, s0
 800effe:	462b      	mov	r3, r5
 800f000:	ee10 0a10 	vmov	r0, s0
 800f004:	f7f1 f940 	bl	8000288 <__aeabi_dsub>
 800f008:	4602      	mov	r2, r0
 800f00a:	460b      	mov	r3, r1
 800f00c:	f7f1 fc1e 	bl	800084c <__aeabi_ddiv>
 800f010:	e7e6      	b.n	800efe0 <__ieee754_sqrt+0x30>
 800f012:	1512      	asrs	r2, r2, #20
 800f014:	d074      	beq.n	800f100 <__ieee754_sqrt+0x150>
 800f016:	07d4      	lsls	r4, r2, #31
 800f018:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f01c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f020:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f024:	bf5e      	ittt	pl
 800f026:	0fda      	lsrpl	r2, r3, #31
 800f028:	005b      	lslpl	r3, r3, #1
 800f02a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f02e:	2400      	movs	r4, #0
 800f030:	0fda      	lsrs	r2, r3, #31
 800f032:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f036:	107f      	asrs	r7, r7, #1
 800f038:	005b      	lsls	r3, r3, #1
 800f03a:	2516      	movs	r5, #22
 800f03c:	4620      	mov	r0, r4
 800f03e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f042:	1886      	adds	r6, r0, r2
 800f044:	428e      	cmp	r6, r1
 800f046:	bfde      	ittt	le
 800f048:	1b89      	suble	r1, r1, r6
 800f04a:	18b0      	addle	r0, r6, r2
 800f04c:	18a4      	addle	r4, r4, r2
 800f04e:	0049      	lsls	r1, r1, #1
 800f050:	3d01      	subs	r5, #1
 800f052:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f056:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f05a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f05e:	d1f0      	bne.n	800f042 <__ieee754_sqrt+0x92>
 800f060:	462a      	mov	r2, r5
 800f062:	f04f 0e20 	mov.w	lr, #32
 800f066:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f06a:	4281      	cmp	r1, r0
 800f06c:	eb06 0c05 	add.w	ip, r6, r5
 800f070:	dc02      	bgt.n	800f078 <__ieee754_sqrt+0xc8>
 800f072:	d113      	bne.n	800f09c <__ieee754_sqrt+0xec>
 800f074:	459c      	cmp	ip, r3
 800f076:	d811      	bhi.n	800f09c <__ieee754_sqrt+0xec>
 800f078:	f1bc 0f00 	cmp.w	ip, #0
 800f07c:	eb0c 0506 	add.w	r5, ip, r6
 800f080:	da43      	bge.n	800f10a <__ieee754_sqrt+0x15a>
 800f082:	2d00      	cmp	r5, #0
 800f084:	db41      	blt.n	800f10a <__ieee754_sqrt+0x15a>
 800f086:	f100 0801 	add.w	r8, r0, #1
 800f08a:	1a09      	subs	r1, r1, r0
 800f08c:	459c      	cmp	ip, r3
 800f08e:	bf88      	it	hi
 800f090:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f094:	eba3 030c 	sub.w	r3, r3, ip
 800f098:	4432      	add	r2, r6
 800f09a:	4640      	mov	r0, r8
 800f09c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f0a0:	f1be 0e01 	subs.w	lr, lr, #1
 800f0a4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f0a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f0ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f0b0:	d1db      	bne.n	800f06a <__ieee754_sqrt+0xba>
 800f0b2:	430b      	orrs	r3, r1
 800f0b4:	d006      	beq.n	800f0c4 <__ieee754_sqrt+0x114>
 800f0b6:	1c50      	adds	r0, r2, #1
 800f0b8:	bf13      	iteet	ne
 800f0ba:	3201      	addne	r2, #1
 800f0bc:	3401      	addeq	r4, #1
 800f0be:	4672      	moveq	r2, lr
 800f0c0:	f022 0201 	bicne.w	r2, r2, #1
 800f0c4:	1063      	asrs	r3, r4, #1
 800f0c6:	0852      	lsrs	r2, r2, #1
 800f0c8:	07e1      	lsls	r1, r4, #31
 800f0ca:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f0ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f0d2:	bf48      	it	mi
 800f0d4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f0d8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f0dc:	4614      	mov	r4, r2
 800f0de:	e781      	b.n	800efe4 <__ieee754_sqrt+0x34>
 800f0e0:	0ad9      	lsrs	r1, r3, #11
 800f0e2:	3815      	subs	r0, #21
 800f0e4:	055b      	lsls	r3, r3, #21
 800f0e6:	2900      	cmp	r1, #0
 800f0e8:	d0fa      	beq.n	800f0e0 <__ieee754_sqrt+0x130>
 800f0ea:	02cd      	lsls	r5, r1, #11
 800f0ec:	d50a      	bpl.n	800f104 <__ieee754_sqrt+0x154>
 800f0ee:	f1c2 0420 	rsb	r4, r2, #32
 800f0f2:	fa23 f404 	lsr.w	r4, r3, r4
 800f0f6:	1e55      	subs	r5, r2, #1
 800f0f8:	4093      	lsls	r3, r2
 800f0fa:	4321      	orrs	r1, r4
 800f0fc:	1b42      	subs	r2, r0, r5
 800f0fe:	e78a      	b.n	800f016 <__ieee754_sqrt+0x66>
 800f100:	4610      	mov	r0, r2
 800f102:	e7f0      	b.n	800f0e6 <__ieee754_sqrt+0x136>
 800f104:	0049      	lsls	r1, r1, #1
 800f106:	3201      	adds	r2, #1
 800f108:	e7ef      	b.n	800f0ea <__ieee754_sqrt+0x13a>
 800f10a:	4680      	mov	r8, r0
 800f10c:	e7bd      	b.n	800f08a <__ieee754_sqrt+0xda>
 800f10e:	bf00      	nop
 800f110:	7ff00000 	.word	0x7ff00000
 800f114:	00000000 	.word	0x00000000

0800f118 <__kernel_cos>:
 800f118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11c:	ec57 6b10 	vmov	r6, r7, d0
 800f120:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f124:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f128:	ed8d 1b00 	vstr	d1, [sp]
 800f12c:	da07      	bge.n	800f13e <__kernel_cos+0x26>
 800f12e:	ee10 0a10 	vmov	r0, s0
 800f132:	4639      	mov	r1, r7
 800f134:	f7f1 fd10 	bl	8000b58 <__aeabi_d2iz>
 800f138:	2800      	cmp	r0, #0
 800f13a:	f000 8088 	beq.w	800f24e <__kernel_cos+0x136>
 800f13e:	4632      	mov	r2, r6
 800f140:	463b      	mov	r3, r7
 800f142:	4630      	mov	r0, r6
 800f144:	4639      	mov	r1, r7
 800f146:	f7f1 fa57 	bl	80005f8 <__aeabi_dmul>
 800f14a:	4b51      	ldr	r3, [pc, #324]	; (800f290 <__kernel_cos+0x178>)
 800f14c:	2200      	movs	r2, #0
 800f14e:	4604      	mov	r4, r0
 800f150:	460d      	mov	r5, r1
 800f152:	f7f1 fa51 	bl	80005f8 <__aeabi_dmul>
 800f156:	a340      	add	r3, pc, #256	; (adr r3, 800f258 <__kernel_cos+0x140>)
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	4682      	mov	sl, r0
 800f15e:	468b      	mov	fp, r1
 800f160:	4620      	mov	r0, r4
 800f162:	4629      	mov	r1, r5
 800f164:	f7f1 fa48 	bl	80005f8 <__aeabi_dmul>
 800f168:	a33d      	add	r3, pc, #244	; (adr r3, 800f260 <__kernel_cos+0x148>)
 800f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16e:	f7f1 f88d 	bl	800028c <__adddf3>
 800f172:	4622      	mov	r2, r4
 800f174:	462b      	mov	r3, r5
 800f176:	f7f1 fa3f 	bl	80005f8 <__aeabi_dmul>
 800f17a:	a33b      	add	r3, pc, #236	; (adr r3, 800f268 <__kernel_cos+0x150>)
 800f17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f180:	f7f1 f882 	bl	8000288 <__aeabi_dsub>
 800f184:	4622      	mov	r2, r4
 800f186:	462b      	mov	r3, r5
 800f188:	f7f1 fa36 	bl	80005f8 <__aeabi_dmul>
 800f18c:	a338      	add	r3, pc, #224	; (adr r3, 800f270 <__kernel_cos+0x158>)
 800f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f192:	f7f1 f87b 	bl	800028c <__adddf3>
 800f196:	4622      	mov	r2, r4
 800f198:	462b      	mov	r3, r5
 800f19a:	f7f1 fa2d 	bl	80005f8 <__aeabi_dmul>
 800f19e:	a336      	add	r3, pc, #216	; (adr r3, 800f278 <__kernel_cos+0x160>)
 800f1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a4:	f7f1 f870 	bl	8000288 <__aeabi_dsub>
 800f1a8:	4622      	mov	r2, r4
 800f1aa:	462b      	mov	r3, r5
 800f1ac:	f7f1 fa24 	bl	80005f8 <__aeabi_dmul>
 800f1b0:	a333      	add	r3, pc, #204	; (adr r3, 800f280 <__kernel_cos+0x168>)
 800f1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b6:	f7f1 f869 	bl	800028c <__adddf3>
 800f1ba:	4622      	mov	r2, r4
 800f1bc:	462b      	mov	r3, r5
 800f1be:	f7f1 fa1b 	bl	80005f8 <__aeabi_dmul>
 800f1c2:	4622      	mov	r2, r4
 800f1c4:	462b      	mov	r3, r5
 800f1c6:	f7f1 fa17 	bl	80005f8 <__aeabi_dmul>
 800f1ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	460d      	mov	r5, r1
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	4639      	mov	r1, r7
 800f1d6:	f7f1 fa0f 	bl	80005f8 <__aeabi_dmul>
 800f1da:	460b      	mov	r3, r1
 800f1dc:	4602      	mov	r2, r0
 800f1de:	4629      	mov	r1, r5
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	f7f1 f851 	bl	8000288 <__aeabi_dsub>
 800f1e6:	4b2b      	ldr	r3, [pc, #172]	; (800f294 <__kernel_cos+0x17c>)
 800f1e8:	4598      	cmp	r8, r3
 800f1ea:	4606      	mov	r6, r0
 800f1ec:	460f      	mov	r7, r1
 800f1ee:	dc10      	bgt.n	800f212 <__kernel_cos+0xfa>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	4650      	mov	r0, sl
 800f1f6:	4659      	mov	r1, fp
 800f1f8:	f7f1 f846 	bl	8000288 <__aeabi_dsub>
 800f1fc:	460b      	mov	r3, r1
 800f1fe:	4926      	ldr	r1, [pc, #152]	; (800f298 <__kernel_cos+0x180>)
 800f200:	4602      	mov	r2, r0
 800f202:	2000      	movs	r0, #0
 800f204:	f7f1 f840 	bl	8000288 <__aeabi_dsub>
 800f208:	ec41 0b10 	vmov	d0, r0, r1
 800f20c:	b003      	add	sp, #12
 800f20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f212:	4b22      	ldr	r3, [pc, #136]	; (800f29c <__kernel_cos+0x184>)
 800f214:	4920      	ldr	r1, [pc, #128]	; (800f298 <__kernel_cos+0x180>)
 800f216:	4598      	cmp	r8, r3
 800f218:	bfcc      	ite	gt
 800f21a:	4d21      	ldrgt	r5, [pc, #132]	; (800f2a0 <__kernel_cos+0x188>)
 800f21c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f220:	2400      	movs	r4, #0
 800f222:	4622      	mov	r2, r4
 800f224:	462b      	mov	r3, r5
 800f226:	2000      	movs	r0, #0
 800f228:	f7f1 f82e 	bl	8000288 <__aeabi_dsub>
 800f22c:	4622      	mov	r2, r4
 800f22e:	4680      	mov	r8, r0
 800f230:	4689      	mov	r9, r1
 800f232:	462b      	mov	r3, r5
 800f234:	4650      	mov	r0, sl
 800f236:	4659      	mov	r1, fp
 800f238:	f7f1 f826 	bl	8000288 <__aeabi_dsub>
 800f23c:	4632      	mov	r2, r6
 800f23e:	463b      	mov	r3, r7
 800f240:	f7f1 f822 	bl	8000288 <__aeabi_dsub>
 800f244:	4602      	mov	r2, r0
 800f246:	460b      	mov	r3, r1
 800f248:	4640      	mov	r0, r8
 800f24a:	4649      	mov	r1, r9
 800f24c:	e7da      	b.n	800f204 <__kernel_cos+0xec>
 800f24e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f288 <__kernel_cos+0x170>
 800f252:	e7db      	b.n	800f20c <__kernel_cos+0xf4>
 800f254:	f3af 8000 	nop.w
 800f258:	be8838d4 	.word	0xbe8838d4
 800f25c:	bda8fae9 	.word	0xbda8fae9
 800f260:	bdb4b1c4 	.word	0xbdb4b1c4
 800f264:	3e21ee9e 	.word	0x3e21ee9e
 800f268:	809c52ad 	.word	0x809c52ad
 800f26c:	3e927e4f 	.word	0x3e927e4f
 800f270:	19cb1590 	.word	0x19cb1590
 800f274:	3efa01a0 	.word	0x3efa01a0
 800f278:	16c15177 	.word	0x16c15177
 800f27c:	3f56c16c 	.word	0x3f56c16c
 800f280:	5555554c 	.word	0x5555554c
 800f284:	3fa55555 	.word	0x3fa55555
 800f288:	00000000 	.word	0x00000000
 800f28c:	3ff00000 	.word	0x3ff00000
 800f290:	3fe00000 	.word	0x3fe00000
 800f294:	3fd33332 	.word	0x3fd33332
 800f298:	3ff00000 	.word	0x3ff00000
 800f29c:	3fe90000 	.word	0x3fe90000
 800f2a0:	3fd20000 	.word	0x3fd20000
 800f2a4:	00000000 	.word	0x00000000

0800f2a8 <__kernel_rem_pio2>:
 800f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ac:	ed2d 8b02 	vpush	{d8}
 800f2b0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f2b4:	f112 0f14 	cmn.w	r2, #20
 800f2b8:	9308      	str	r3, [sp, #32]
 800f2ba:	9101      	str	r1, [sp, #4]
 800f2bc:	4bc4      	ldr	r3, [pc, #784]	; (800f5d0 <__kernel_rem_pio2+0x328>)
 800f2be:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f2c0:	900b      	str	r0, [sp, #44]	; 0x2c
 800f2c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f2c6:	9302      	str	r3, [sp, #8]
 800f2c8:	9b08      	ldr	r3, [sp, #32]
 800f2ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800f2ce:	bfa8      	it	ge
 800f2d0:	1ed4      	subge	r4, r2, #3
 800f2d2:	9306      	str	r3, [sp, #24]
 800f2d4:	bfb2      	itee	lt
 800f2d6:	2400      	movlt	r4, #0
 800f2d8:	2318      	movge	r3, #24
 800f2da:	fb94 f4f3 	sdivge	r4, r4, r3
 800f2de:	f06f 0317 	mvn.w	r3, #23
 800f2e2:	fb04 3303 	mla	r3, r4, r3, r3
 800f2e6:	eb03 0a02 	add.w	sl, r3, r2
 800f2ea:	9b02      	ldr	r3, [sp, #8]
 800f2ec:	9a06      	ldr	r2, [sp, #24]
 800f2ee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800f5c0 <__kernel_rem_pio2+0x318>
 800f2f2:	eb03 0802 	add.w	r8, r3, r2
 800f2f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f2f8:	1aa7      	subs	r7, r4, r2
 800f2fa:	ae22      	add	r6, sp, #136	; 0x88
 800f2fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f300:	2500      	movs	r5, #0
 800f302:	4545      	cmp	r5, r8
 800f304:	dd13      	ble.n	800f32e <__kernel_rem_pio2+0x86>
 800f306:	9b08      	ldr	r3, [sp, #32]
 800f308:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800f5c0 <__kernel_rem_pio2+0x318>
 800f30c:	aa22      	add	r2, sp, #136	; 0x88
 800f30e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f312:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f316:	f04f 0800 	mov.w	r8, #0
 800f31a:	9b02      	ldr	r3, [sp, #8]
 800f31c:	4598      	cmp	r8, r3
 800f31e:	dc2f      	bgt.n	800f380 <__kernel_rem_pio2+0xd8>
 800f320:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f324:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f328:	462f      	mov	r7, r5
 800f32a:	2600      	movs	r6, #0
 800f32c:	e01b      	b.n	800f366 <__kernel_rem_pio2+0xbe>
 800f32e:	42ef      	cmn	r7, r5
 800f330:	d407      	bmi.n	800f342 <__kernel_rem_pio2+0x9a>
 800f332:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f336:	f7f1 f8f5 	bl	8000524 <__aeabi_i2d>
 800f33a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f33e:	3501      	adds	r5, #1
 800f340:	e7df      	b.n	800f302 <__kernel_rem_pio2+0x5a>
 800f342:	ec51 0b18 	vmov	r0, r1, d8
 800f346:	e7f8      	b.n	800f33a <__kernel_rem_pio2+0x92>
 800f348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f34c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f350:	f7f1 f952 	bl	80005f8 <__aeabi_dmul>
 800f354:	4602      	mov	r2, r0
 800f356:	460b      	mov	r3, r1
 800f358:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f35c:	f7f0 ff96 	bl	800028c <__adddf3>
 800f360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f364:	3601      	adds	r6, #1
 800f366:	9b06      	ldr	r3, [sp, #24]
 800f368:	429e      	cmp	r6, r3
 800f36a:	f1a7 0708 	sub.w	r7, r7, #8
 800f36e:	ddeb      	ble.n	800f348 <__kernel_rem_pio2+0xa0>
 800f370:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f374:	f108 0801 	add.w	r8, r8, #1
 800f378:	ecab 7b02 	vstmia	fp!, {d7}
 800f37c:	3508      	adds	r5, #8
 800f37e:	e7cc      	b.n	800f31a <__kernel_rem_pio2+0x72>
 800f380:	9b02      	ldr	r3, [sp, #8]
 800f382:	aa0e      	add	r2, sp, #56	; 0x38
 800f384:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f388:	930d      	str	r3, [sp, #52]	; 0x34
 800f38a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f38c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f390:	9c02      	ldr	r4, [sp, #8]
 800f392:	930c      	str	r3, [sp, #48]	; 0x30
 800f394:	00e3      	lsls	r3, r4, #3
 800f396:	930a      	str	r3, [sp, #40]	; 0x28
 800f398:	ab9a      	add	r3, sp, #616	; 0x268
 800f39a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f39e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f3a2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f3a6:	ab72      	add	r3, sp, #456	; 0x1c8
 800f3a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f3ac:	46c3      	mov	fp, r8
 800f3ae:	46a1      	mov	r9, r4
 800f3b0:	f1b9 0f00 	cmp.w	r9, #0
 800f3b4:	f1a5 0508 	sub.w	r5, r5, #8
 800f3b8:	dc77      	bgt.n	800f4aa <__kernel_rem_pio2+0x202>
 800f3ba:	ec47 6b10 	vmov	d0, r6, r7
 800f3be:	4650      	mov	r0, sl
 800f3c0:	f000 fc46 	bl	800fc50 <scalbn>
 800f3c4:	ec57 6b10 	vmov	r6, r7, d0
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f3ce:	ee10 0a10 	vmov	r0, s0
 800f3d2:	4639      	mov	r1, r7
 800f3d4:	f7f1 f910 	bl	80005f8 <__aeabi_dmul>
 800f3d8:	ec41 0b10 	vmov	d0, r0, r1
 800f3dc:	f000 fbb8 	bl	800fb50 <floor>
 800f3e0:	4b7c      	ldr	r3, [pc, #496]	; (800f5d4 <__kernel_rem_pio2+0x32c>)
 800f3e2:	ec51 0b10 	vmov	r0, r1, d0
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	f7f1 f906 	bl	80005f8 <__aeabi_dmul>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	4639      	mov	r1, r7
 800f3f4:	f7f0 ff48 	bl	8000288 <__aeabi_dsub>
 800f3f8:	460f      	mov	r7, r1
 800f3fa:	4606      	mov	r6, r0
 800f3fc:	f7f1 fbac 	bl	8000b58 <__aeabi_d2iz>
 800f400:	9004      	str	r0, [sp, #16]
 800f402:	f7f1 f88f 	bl	8000524 <__aeabi_i2d>
 800f406:	4602      	mov	r2, r0
 800f408:	460b      	mov	r3, r1
 800f40a:	4630      	mov	r0, r6
 800f40c:	4639      	mov	r1, r7
 800f40e:	f7f0 ff3b 	bl	8000288 <__aeabi_dsub>
 800f412:	f1ba 0f00 	cmp.w	sl, #0
 800f416:	4606      	mov	r6, r0
 800f418:	460f      	mov	r7, r1
 800f41a:	dd6d      	ble.n	800f4f8 <__kernel_rem_pio2+0x250>
 800f41c:	1e62      	subs	r2, r4, #1
 800f41e:	ab0e      	add	r3, sp, #56	; 0x38
 800f420:	9d04      	ldr	r5, [sp, #16]
 800f422:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f426:	f1ca 0118 	rsb	r1, sl, #24
 800f42a:	fa40 f301 	asr.w	r3, r0, r1
 800f42e:	441d      	add	r5, r3
 800f430:	408b      	lsls	r3, r1
 800f432:	1ac0      	subs	r0, r0, r3
 800f434:	ab0e      	add	r3, sp, #56	; 0x38
 800f436:	9504      	str	r5, [sp, #16]
 800f438:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f43c:	f1ca 0317 	rsb	r3, sl, #23
 800f440:	fa40 fb03 	asr.w	fp, r0, r3
 800f444:	f1bb 0f00 	cmp.w	fp, #0
 800f448:	dd65      	ble.n	800f516 <__kernel_rem_pio2+0x26e>
 800f44a:	9b04      	ldr	r3, [sp, #16]
 800f44c:	2200      	movs	r2, #0
 800f44e:	3301      	adds	r3, #1
 800f450:	9304      	str	r3, [sp, #16]
 800f452:	4615      	mov	r5, r2
 800f454:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f458:	4294      	cmp	r4, r2
 800f45a:	f300 809c 	bgt.w	800f596 <__kernel_rem_pio2+0x2ee>
 800f45e:	f1ba 0f00 	cmp.w	sl, #0
 800f462:	dd07      	ble.n	800f474 <__kernel_rem_pio2+0x1cc>
 800f464:	f1ba 0f01 	cmp.w	sl, #1
 800f468:	f000 80c0 	beq.w	800f5ec <__kernel_rem_pio2+0x344>
 800f46c:	f1ba 0f02 	cmp.w	sl, #2
 800f470:	f000 80c6 	beq.w	800f600 <__kernel_rem_pio2+0x358>
 800f474:	f1bb 0f02 	cmp.w	fp, #2
 800f478:	d14d      	bne.n	800f516 <__kernel_rem_pio2+0x26e>
 800f47a:	4632      	mov	r2, r6
 800f47c:	463b      	mov	r3, r7
 800f47e:	4956      	ldr	r1, [pc, #344]	; (800f5d8 <__kernel_rem_pio2+0x330>)
 800f480:	2000      	movs	r0, #0
 800f482:	f7f0 ff01 	bl	8000288 <__aeabi_dsub>
 800f486:	4606      	mov	r6, r0
 800f488:	460f      	mov	r7, r1
 800f48a:	2d00      	cmp	r5, #0
 800f48c:	d043      	beq.n	800f516 <__kernel_rem_pio2+0x26e>
 800f48e:	4650      	mov	r0, sl
 800f490:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f5c8 <__kernel_rem_pio2+0x320>
 800f494:	f000 fbdc 	bl	800fc50 <scalbn>
 800f498:	4630      	mov	r0, r6
 800f49a:	4639      	mov	r1, r7
 800f49c:	ec53 2b10 	vmov	r2, r3, d0
 800f4a0:	f7f0 fef2 	bl	8000288 <__aeabi_dsub>
 800f4a4:	4606      	mov	r6, r0
 800f4a6:	460f      	mov	r7, r1
 800f4a8:	e035      	b.n	800f516 <__kernel_rem_pio2+0x26e>
 800f4aa:	4b4c      	ldr	r3, [pc, #304]	; (800f5dc <__kernel_rem_pio2+0x334>)
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	4630      	mov	r0, r6
 800f4b0:	4639      	mov	r1, r7
 800f4b2:	f7f1 f8a1 	bl	80005f8 <__aeabi_dmul>
 800f4b6:	f7f1 fb4f 	bl	8000b58 <__aeabi_d2iz>
 800f4ba:	f7f1 f833 	bl	8000524 <__aeabi_i2d>
 800f4be:	4602      	mov	r2, r0
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	ec43 2b18 	vmov	d8, r2, r3
 800f4c6:	4b46      	ldr	r3, [pc, #280]	; (800f5e0 <__kernel_rem_pio2+0x338>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	f7f1 f895 	bl	80005f8 <__aeabi_dmul>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	4639      	mov	r1, r7
 800f4d6:	f7f0 fed7 	bl	8000288 <__aeabi_dsub>
 800f4da:	f7f1 fb3d 	bl	8000b58 <__aeabi_d2iz>
 800f4de:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f4e2:	f84b 0b04 	str.w	r0, [fp], #4
 800f4e6:	ec51 0b18 	vmov	r0, r1, d8
 800f4ea:	f7f0 fecf 	bl	800028c <__adddf3>
 800f4ee:	f109 39ff 	add.w	r9, r9, #4294967295
 800f4f2:	4606      	mov	r6, r0
 800f4f4:	460f      	mov	r7, r1
 800f4f6:	e75b      	b.n	800f3b0 <__kernel_rem_pio2+0x108>
 800f4f8:	d106      	bne.n	800f508 <__kernel_rem_pio2+0x260>
 800f4fa:	1e63      	subs	r3, r4, #1
 800f4fc:	aa0e      	add	r2, sp, #56	; 0x38
 800f4fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f502:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f506:	e79d      	b.n	800f444 <__kernel_rem_pio2+0x19c>
 800f508:	4b36      	ldr	r3, [pc, #216]	; (800f5e4 <__kernel_rem_pio2+0x33c>)
 800f50a:	2200      	movs	r2, #0
 800f50c:	f7f1 fafa 	bl	8000b04 <__aeabi_dcmpge>
 800f510:	2800      	cmp	r0, #0
 800f512:	d13d      	bne.n	800f590 <__kernel_rem_pio2+0x2e8>
 800f514:	4683      	mov	fp, r0
 800f516:	2200      	movs	r2, #0
 800f518:	2300      	movs	r3, #0
 800f51a:	4630      	mov	r0, r6
 800f51c:	4639      	mov	r1, r7
 800f51e:	f7f1 fad3 	bl	8000ac8 <__aeabi_dcmpeq>
 800f522:	2800      	cmp	r0, #0
 800f524:	f000 80c0 	beq.w	800f6a8 <__kernel_rem_pio2+0x400>
 800f528:	1e65      	subs	r5, r4, #1
 800f52a:	462b      	mov	r3, r5
 800f52c:	2200      	movs	r2, #0
 800f52e:	9902      	ldr	r1, [sp, #8]
 800f530:	428b      	cmp	r3, r1
 800f532:	da6c      	bge.n	800f60e <__kernel_rem_pio2+0x366>
 800f534:	2a00      	cmp	r2, #0
 800f536:	f000 8089 	beq.w	800f64c <__kernel_rem_pio2+0x3a4>
 800f53a:	ab0e      	add	r3, sp, #56	; 0x38
 800f53c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f540:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f544:	2b00      	cmp	r3, #0
 800f546:	f000 80ad 	beq.w	800f6a4 <__kernel_rem_pio2+0x3fc>
 800f54a:	4650      	mov	r0, sl
 800f54c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800f5c8 <__kernel_rem_pio2+0x320>
 800f550:	f000 fb7e 	bl	800fc50 <scalbn>
 800f554:	ab9a      	add	r3, sp, #616	; 0x268
 800f556:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f55a:	ec57 6b10 	vmov	r6, r7, d0
 800f55e:	00ec      	lsls	r4, r5, #3
 800f560:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f564:	46aa      	mov	sl, r5
 800f566:	f1ba 0f00 	cmp.w	sl, #0
 800f56a:	f280 80d6 	bge.w	800f71a <__kernel_rem_pio2+0x472>
 800f56e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800f5c0 <__kernel_rem_pio2+0x318>
 800f572:	462e      	mov	r6, r5
 800f574:	2e00      	cmp	r6, #0
 800f576:	f2c0 8104 	blt.w	800f782 <__kernel_rem_pio2+0x4da>
 800f57a:	ab72      	add	r3, sp, #456	; 0x1c8
 800f57c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f580:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f5e8 <__kernel_rem_pio2+0x340>
 800f584:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f588:	f04f 0800 	mov.w	r8, #0
 800f58c:	1baf      	subs	r7, r5, r6
 800f58e:	e0ea      	b.n	800f766 <__kernel_rem_pio2+0x4be>
 800f590:	f04f 0b02 	mov.w	fp, #2
 800f594:	e759      	b.n	800f44a <__kernel_rem_pio2+0x1a2>
 800f596:	f8d8 3000 	ldr.w	r3, [r8]
 800f59a:	b955      	cbnz	r5, 800f5b2 <__kernel_rem_pio2+0x30a>
 800f59c:	b123      	cbz	r3, 800f5a8 <__kernel_rem_pio2+0x300>
 800f59e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f5a2:	f8c8 3000 	str.w	r3, [r8]
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	3201      	adds	r2, #1
 800f5aa:	f108 0804 	add.w	r8, r8, #4
 800f5ae:	461d      	mov	r5, r3
 800f5b0:	e752      	b.n	800f458 <__kernel_rem_pio2+0x1b0>
 800f5b2:	1acb      	subs	r3, r1, r3
 800f5b4:	f8c8 3000 	str.w	r3, [r8]
 800f5b8:	462b      	mov	r3, r5
 800f5ba:	e7f5      	b.n	800f5a8 <__kernel_rem_pio2+0x300>
 800f5bc:	f3af 8000 	nop.w
	...
 800f5cc:	3ff00000 	.word	0x3ff00000
 800f5d0:	080106c0 	.word	0x080106c0
 800f5d4:	40200000 	.word	0x40200000
 800f5d8:	3ff00000 	.word	0x3ff00000
 800f5dc:	3e700000 	.word	0x3e700000
 800f5e0:	41700000 	.word	0x41700000
 800f5e4:	3fe00000 	.word	0x3fe00000
 800f5e8:	08010680 	.word	0x08010680
 800f5ec:	1e62      	subs	r2, r4, #1
 800f5ee:	ab0e      	add	r3, sp, #56	; 0x38
 800f5f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f5f8:	a90e      	add	r1, sp, #56	; 0x38
 800f5fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f5fe:	e739      	b.n	800f474 <__kernel_rem_pio2+0x1cc>
 800f600:	1e62      	subs	r2, r4, #1
 800f602:	ab0e      	add	r3, sp, #56	; 0x38
 800f604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f608:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f60c:	e7f4      	b.n	800f5f8 <__kernel_rem_pio2+0x350>
 800f60e:	a90e      	add	r1, sp, #56	; 0x38
 800f610:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f614:	3b01      	subs	r3, #1
 800f616:	430a      	orrs	r2, r1
 800f618:	e789      	b.n	800f52e <__kernel_rem_pio2+0x286>
 800f61a:	3301      	adds	r3, #1
 800f61c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f620:	2900      	cmp	r1, #0
 800f622:	d0fa      	beq.n	800f61a <__kernel_rem_pio2+0x372>
 800f624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f626:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f62a:	446a      	add	r2, sp
 800f62c:	3a98      	subs	r2, #152	; 0x98
 800f62e:	920a      	str	r2, [sp, #40]	; 0x28
 800f630:	9a08      	ldr	r2, [sp, #32]
 800f632:	18e3      	adds	r3, r4, r3
 800f634:	18a5      	adds	r5, r4, r2
 800f636:	aa22      	add	r2, sp, #136	; 0x88
 800f638:	f104 0801 	add.w	r8, r4, #1
 800f63c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f640:	9304      	str	r3, [sp, #16]
 800f642:	9b04      	ldr	r3, [sp, #16]
 800f644:	4543      	cmp	r3, r8
 800f646:	da04      	bge.n	800f652 <__kernel_rem_pio2+0x3aa>
 800f648:	461c      	mov	r4, r3
 800f64a:	e6a3      	b.n	800f394 <__kernel_rem_pio2+0xec>
 800f64c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f64e:	2301      	movs	r3, #1
 800f650:	e7e4      	b.n	800f61c <__kernel_rem_pio2+0x374>
 800f652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f654:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f658:	f7f0 ff64 	bl	8000524 <__aeabi_i2d>
 800f65c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f662:	46ab      	mov	fp, r5
 800f664:	461c      	mov	r4, r3
 800f666:	f04f 0900 	mov.w	r9, #0
 800f66a:	2600      	movs	r6, #0
 800f66c:	2700      	movs	r7, #0
 800f66e:	9b06      	ldr	r3, [sp, #24]
 800f670:	4599      	cmp	r9, r3
 800f672:	dd06      	ble.n	800f682 <__kernel_rem_pio2+0x3da>
 800f674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f676:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f67a:	f108 0801 	add.w	r8, r8, #1
 800f67e:	930a      	str	r3, [sp, #40]	; 0x28
 800f680:	e7df      	b.n	800f642 <__kernel_rem_pio2+0x39a>
 800f682:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f686:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f68a:	f7f0 ffb5 	bl	80005f8 <__aeabi_dmul>
 800f68e:	4602      	mov	r2, r0
 800f690:	460b      	mov	r3, r1
 800f692:	4630      	mov	r0, r6
 800f694:	4639      	mov	r1, r7
 800f696:	f7f0 fdf9 	bl	800028c <__adddf3>
 800f69a:	f109 0901 	add.w	r9, r9, #1
 800f69e:	4606      	mov	r6, r0
 800f6a0:	460f      	mov	r7, r1
 800f6a2:	e7e4      	b.n	800f66e <__kernel_rem_pio2+0x3c6>
 800f6a4:	3d01      	subs	r5, #1
 800f6a6:	e748      	b.n	800f53a <__kernel_rem_pio2+0x292>
 800f6a8:	ec47 6b10 	vmov	d0, r6, r7
 800f6ac:	f1ca 0000 	rsb	r0, sl, #0
 800f6b0:	f000 face 	bl	800fc50 <scalbn>
 800f6b4:	ec57 6b10 	vmov	r6, r7, d0
 800f6b8:	4ba0      	ldr	r3, [pc, #640]	; (800f93c <__kernel_rem_pio2+0x694>)
 800f6ba:	ee10 0a10 	vmov	r0, s0
 800f6be:	2200      	movs	r2, #0
 800f6c0:	4639      	mov	r1, r7
 800f6c2:	f7f1 fa1f 	bl	8000b04 <__aeabi_dcmpge>
 800f6c6:	b1f8      	cbz	r0, 800f708 <__kernel_rem_pio2+0x460>
 800f6c8:	4b9d      	ldr	r3, [pc, #628]	; (800f940 <__kernel_rem_pio2+0x698>)
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	4630      	mov	r0, r6
 800f6ce:	4639      	mov	r1, r7
 800f6d0:	f7f0 ff92 	bl	80005f8 <__aeabi_dmul>
 800f6d4:	f7f1 fa40 	bl	8000b58 <__aeabi_d2iz>
 800f6d8:	4680      	mov	r8, r0
 800f6da:	f7f0 ff23 	bl	8000524 <__aeabi_i2d>
 800f6de:	4b97      	ldr	r3, [pc, #604]	; (800f93c <__kernel_rem_pio2+0x694>)
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	f7f0 ff89 	bl	80005f8 <__aeabi_dmul>
 800f6e6:	460b      	mov	r3, r1
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	4639      	mov	r1, r7
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	f7f0 fdcb 	bl	8000288 <__aeabi_dsub>
 800f6f2:	f7f1 fa31 	bl	8000b58 <__aeabi_d2iz>
 800f6f6:	1c65      	adds	r5, r4, #1
 800f6f8:	ab0e      	add	r3, sp, #56	; 0x38
 800f6fa:	f10a 0a18 	add.w	sl, sl, #24
 800f6fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f702:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f706:	e720      	b.n	800f54a <__kernel_rem_pio2+0x2a2>
 800f708:	4630      	mov	r0, r6
 800f70a:	4639      	mov	r1, r7
 800f70c:	f7f1 fa24 	bl	8000b58 <__aeabi_d2iz>
 800f710:	ab0e      	add	r3, sp, #56	; 0x38
 800f712:	4625      	mov	r5, r4
 800f714:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f718:	e717      	b.n	800f54a <__kernel_rem_pio2+0x2a2>
 800f71a:	ab0e      	add	r3, sp, #56	; 0x38
 800f71c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f720:	f7f0 ff00 	bl	8000524 <__aeabi_i2d>
 800f724:	4632      	mov	r2, r6
 800f726:	463b      	mov	r3, r7
 800f728:	f7f0 ff66 	bl	80005f8 <__aeabi_dmul>
 800f72c:	4b84      	ldr	r3, [pc, #528]	; (800f940 <__kernel_rem_pio2+0x698>)
 800f72e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f732:	2200      	movs	r2, #0
 800f734:	4630      	mov	r0, r6
 800f736:	4639      	mov	r1, r7
 800f738:	f7f0 ff5e 	bl	80005f8 <__aeabi_dmul>
 800f73c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f740:	4606      	mov	r6, r0
 800f742:	460f      	mov	r7, r1
 800f744:	e70f      	b.n	800f566 <__kernel_rem_pio2+0x2be>
 800f746:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f74a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f74e:	f7f0 ff53 	bl	80005f8 <__aeabi_dmul>
 800f752:	4602      	mov	r2, r0
 800f754:	460b      	mov	r3, r1
 800f756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f75a:	f7f0 fd97 	bl	800028c <__adddf3>
 800f75e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f762:	f108 0801 	add.w	r8, r8, #1
 800f766:	9b02      	ldr	r3, [sp, #8]
 800f768:	4598      	cmp	r8, r3
 800f76a:	dc01      	bgt.n	800f770 <__kernel_rem_pio2+0x4c8>
 800f76c:	45b8      	cmp	r8, r7
 800f76e:	ddea      	ble.n	800f746 <__kernel_rem_pio2+0x49e>
 800f770:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f774:	ab4a      	add	r3, sp, #296	; 0x128
 800f776:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f77a:	ed87 7b00 	vstr	d7, [r7]
 800f77e:	3e01      	subs	r6, #1
 800f780:	e6f8      	b.n	800f574 <__kernel_rem_pio2+0x2cc>
 800f782:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f784:	2b02      	cmp	r3, #2
 800f786:	dc0b      	bgt.n	800f7a0 <__kernel_rem_pio2+0x4f8>
 800f788:	2b00      	cmp	r3, #0
 800f78a:	dc35      	bgt.n	800f7f8 <__kernel_rem_pio2+0x550>
 800f78c:	d059      	beq.n	800f842 <__kernel_rem_pio2+0x59a>
 800f78e:	9b04      	ldr	r3, [sp, #16]
 800f790:	f003 0007 	and.w	r0, r3, #7
 800f794:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f798:	ecbd 8b02 	vpop	{d8}
 800f79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f7a2:	2b03      	cmp	r3, #3
 800f7a4:	d1f3      	bne.n	800f78e <__kernel_rem_pio2+0x4e6>
 800f7a6:	ab4a      	add	r3, sp, #296	; 0x128
 800f7a8:	4423      	add	r3, r4
 800f7aa:	9306      	str	r3, [sp, #24]
 800f7ac:	461c      	mov	r4, r3
 800f7ae:	469a      	mov	sl, r3
 800f7b0:	9502      	str	r5, [sp, #8]
 800f7b2:	9b02      	ldr	r3, [sp, #8]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	f1aa 0a08 	sub.w	sl, sl, #8
 800f7ba:	dc6b      	bgt.n	800f894 <__kernel_rem_pio2+0x5ec>
 800f7bc:	46aa      	mov	sl, r5
 800f7be:	f1ba 0f01 	cmp.w	sl, #1
 800f7c2:	f1a4 0408 	sub.w	r4, r4, #8
 800f7c6:	f300 8085 	bgt.w	800f8d4 <__kernel_rem_pio2+0x62c>
 800f7ca:	9c06      	ldr	r4, [sp, #24]
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	3408      	adds	r4, #8
 800f7d0:	2100      	movs	r1, #0
 800f7d2:	2d01      	cmp	r5, #1
 800f7d4:	f300 809d 	bgt.w	800f912 <__kernel_rem_pio2+0x66a>
 800f7d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f7dc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f7e0:	f1bb 0f00 	cmp.w	fp, #0
 800f7e4:	f040 809b 	bne.w	800f91e <__kernel_rem_pio2+0x676>
 800f7e8:	9b01      	ldr	r3, [sp, #4]
 800f7ea:	e9c3 5600 	strd	r5, r6, [r3]
 800f7ee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f7f2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f7f6:	e7ca      	b.n	800f78e <__kernel_rem_pio2+0x4e6>
 800f7f8:	3408      	adds	r4, #8
 800f7fa:	ab4a      	add	r3, sp, #296	; 0x128
 800f7fc:	441c      	add	r4, r3
 800f7fe:	462e      	mov	r6, r5
 800f800:	2000      	movs	r0, #0
 800f802:	2100      	movs	r1, #0
 800f804:	2e00      	cmp	r6, #0
 800f806:	da36      	bge.n	800f876 <__kernel_rem_pio2+0x5ce>
 800f808:	f1bb 0f00 	cmp.w	fp, #0
 800f80c:	d039      	beq.n	800f882 <__kernel_rem_pio2+0x5da>
 800f80e:	4602      	mov	r2, r0
 800f810:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f814:	9c01      	ldr	r4, [sp, #4]
 800f816:	e9c4 2300 	strd	r2, r3, [r4]
 800f81a:	4602      	mov	r2, r0
 800f81c:	460b      	mov	r3, r1
 800f81e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f822:	f7f0 fd31 	bl	8000288 <__aeabi_dsub>
 800f826:	ae4c      	add	r6, sp, #304	; 0x130
 800f828:	2401      	movs	r4, #1
 800f82a:	42a5      	cmp	r5, r4
 800f82c:	da2c      	bge.n	800f888 <__kernel_rem_pio2+0x5e0>
 800f82e:	f1bb 0f00 	cmp.w	fp, #0
 800f832:	d002      	beq.n	800f83a <__kernel_rem_pio2+0x592>
 800f834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f838:	4619      	mov	r1, r3
 800f83a:	9b01      	ldr	r3, [sp, #4]
 800f83c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f840:	e7a5      	b.n	800f78e <__kernel_rem_pio2+0x4e6>
 800f842:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f846:	eb0d 0403 	add.w	r4, sp, r3
 800f84a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f84e:	2000      	movs	r0, #0
 800f850:	2100      	movs	r1, #0
 800f852:	2d00      	cmp	r5, #0
 800f854:	da09      	bge.n	800f86a <__kernel_rem_pio2+0x5c2>
 800f856:	f1bb 0f00 	cmp.w	fp, #0
 800f85a:	d002      	beq.n	800f862 <__kernel_rem_pio2+0x5ba>
 800f85c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f860:	4619      	mov	r1, r3
 800f862:	9b01      	ldr	r3, [sp, #4]
 800f864:	e9c3 0100 	strd	r0, r1, [r3]
 800f868:	e791      	b.n	800f78e <__kernel_rem_pio2+0x4e6>
 800f86a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f86e:	f7f0 fd0d 	bl	800028c <__adddf3>
 800f872:	3d01      	subs	r5, #1
 800f874:	e7ed      	b.n	800f852 <__kernel_rem_pio2+0x5aa>
 800f876:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f87a:	f7f0 fd07 	bl	800028c <__adddf3>
 800f87e:	3e01      	subs	r6, #1
 800f880:	e7c0      	b.n	800f804 <__kernel_rem_pio2+0x55c>
 800f882:	4602      	mov	r2, r0
 800f884:	460b      	mov	r3, r1
 800f886:	e7c5      	b.n	800f814 <__kernel_rem_pio2+0x56c>
 800f888:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f88c:	f7f0 fcfe 	bl	800028c <__adddf3>
 800f890:	3401      	adds	r4, #1
 800f892:	e7ca      	b.n	800f82a <__kernel_rem_pio2+0x582>
 800f894:	e9da 8900 	ldrd	r8, r9, [sl]
 800f898:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f89c:	9b02      	ldr	r3, [sp, #8]
 800f89e:	3b01      	subs	r3, #1
 800f8a0:	9302      	str	r3, [sp, #8]
 800f8a2:	4632      	mov	r2, r6
 800f8a4:	463b      	mov	r3, r7
 800f8a6:	4640      	mov	r0, r8
 800f8a8:	4649      	mov	r1, r9
 800f8aa:	f7f0 fcef 	bl	800028c <__adddf3>
 800f8ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	4640      	mov	r0, r8
 800f8b8:	4649      	mov	r1, r9
 800f8ba:	f7f0 fce5 	bl	8000288 <__aeabi_dsub>
 800f8be:	4632      	mov	r2, r6
 800f8c0:	463b      	mov	r3, r7
 800f8c2:	f7f0 fce3 	bl	800028c <__adddf3>
 800f8c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f8ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f8ce:	ed8a 7b00 	vstr	d7, [sl]
 800f8d2:	e76e      	b.n	800f7b2 <__kernel_rem_pio2+0x50a>
 800f8d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f8d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f8dc:	4640      	mov	r0, r8
 800f8de:	4632      	mov	r2, r6
 800f8e0:	463b      	mov	r3, r7
 800f8e2:	4649      	mov	r1, r9
 800f8e4:	f7f0 fcd2 	bl	800028c <__adddf3>
 800f8e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	4640      	mov	r0, r8
 800f8f2:	4649      	mov	r1, r9
 800f8f4:	f7f0 fcc8 	bl	8000288 <__aeabi_dsub>
 800f8f8:	4632      	mov	r2, r6
 800f8fa:	463b      	mov	r3, r7
 800f8fc:	f7f0 fcc6 	bl	800028c <__adddf3>
 800f900:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f904:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f908:	ed84 7b00 	vstr	d7, [r4]
 800f90c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f910:	e755      	b.n	800f7be <__kernel_rem_pio2+0x516>
 800f912:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f916:	f7f0 fcb9 	bl	800028c <__adddf3>
 800f91a:	3d01      	subs	r5, #1
 800f91c:	e759      	b.n	800f7d2 <__kernel_rem_pio2+0x52a>
 800f91e:	9b01      	ldr	r3, [sp, #4]
 800f920:	9a01      	ldr	r2, [sp, #4]
 800f922:	601d      	str	r5, [r3, #0]
 800f924:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f928:	605c      	str	r4, [r3, #4]
 800f92a:	609f      	str	r7, [r3, #8]
 800f92c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f930:	60d3      	str	r3, [r2, #12]
 800f932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f936:	6110      	str	r0, [r2, #16]
 800f938:	6153      	str	r3, [r2, #20]
 800f93a:	e728      	b.n	800f78e <__kernel_rem_pio2+0x4e6>
 800f93c:	41700000 	.word	0x41700000
 800f940:	3e700000 	.word	0x3e700000
 800f944:	00000000 	.word	0x00000000

0800f948 <__kernel_sin>:
 800f948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94c:	ed2d 8b04 	vpush	{d8-d9}
 800f950:	eeb0 8a41 	vmov.f32	s16, s2
 800f954:	eef0 8a61 	vmov.f32	s17, s3
 800f958:	ec55 4b10 	vmov	r4, r5, d0
 800f95c:	b083      	sub	sp, #12
 800f95e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f962:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f966:	9001      	str	r0, [sp, #4]
 800f968:	da06      	bge.n	800f978 <__kernel_sin+0x30>
 800f96a:	ee10 0a10 	vmov	r0, s0
 800f96e:	4629      	mov	r1, r5
 800f970:	f7f1 f8f2 	bl	8000b58 <__aeabi_d2iz>
 800f974:	2800      	cmp	r0, #0
 800f976:	d051      	beq.n	800fa1c <__kernel_sin+0xd4>
 800f978:	4622      	mov	r2, r4
 800f97a:	462b      	mov	r3, r5
 800f97c:	4620      	mov	r0, r4
 800f97e:	4629      	mov	r1, r5
 800f980:	f7f0 fe3a 	bl	80005f8 <__aeabi_dmul>
 800f984:	4682      	mov	sl, r0
 800f986:	468b      	mov	fp, r1
 800f988:	4602      	mov	r2, r0
 800f98a:	460b      	mov	r3, r1
 800f98c:	4620      	mov	r0, r4
 800f98e:	4629      	mov	r1, r5
 800f990:	f7f0 fe32 	bl	80005f8 <__aeabi_dmul>
 800f994:	a341      	add	r3, pc, #260	; (adr r3, 800fa9c <__kernel_sin+0x154>)
 800f996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99a:	4680      	mov	r8, r0
 800f99c:	4689      	mov	r9, r1
 800f99e:	4650      	mov	r0, sl
 800f9a0:	4659      	mov	r1, fp
 800f9a2:	f7f0 fe29 	bl	80005f8 <__aeabi_dmul>
 800f9a6:	a33f      	add	r3, pc, #252	; (adr r3, 800faa4 <__kernel_sin+0x15c>)
 800f9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ac:	f7f0 fc6c 	bl	8000288 <__aeabi_dsub>
 800f9b0:	4652      	mov	r2, sl
 800f9b2:	465b      	mov	r3, fp
 800f9b4:	f7f0 fe20 	bl	80005f8 <__aeabi_dmul>
 800f9b8:	a33c      	add	r3, pc, #240	; (adr r3, 800faac <__kernel_sin+0x164>)
 800f9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9be:	f7f0 fc65 	bl	800028c <__adddf3>
 800f9c2:	4652      	mov	r2, sl
 800f9c4:	465b      	mov	r3, fp
 800f9c6:	f7f0 fe17 	bl	80005f8 <__aeabi_dmul>
 800f9ca:	a33a      	add	r3, pc, #232	; (adr r3, 800fab4 <__kernel_sin+0x16c>)
 800f9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d0:	f7f0 fc5a 	bl	8000288 <__aeabi_dsub>
 800f9d4:	4652      	mov	r2, sl
 800f9d6:	465b      	mov	r3, fp
 800f9d8:	f7f0 fe0e 	bl	80005f8 <__aeabi_dmul>
 800f9dc:	a337      	add	r3, pc, #220	; (adr r3, 800fabc <__kernel_sin+0x174>)
 800f9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e2:	f7f0 fc53 	bl	800028c <__adddf3>
 800f9e6:	9b01      	ldr	r3, [sp, #4]
 800f9e8:	4606      	mov	r6, r0
 800f9ea:	460f      	mov	r7, r1
 800f9ec:	b9eb      	cbnz	r3, 800fa2a <__kernel_sin+0xe2>
 800f9ee:	4602      	mov	r2, r0
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	4650      	mov	r0, sl
 800f9f4:	4659      	mov	r1, fp
 800f9f6:	f7f0 fdff 	bl	80005f8 <__aeabi_dmul>
 800f9fa:	a325      	add	r3, pc, #148	; (adr r3, 800fa90 <__kernel_sin+0x148>)
 800f9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa00:	f7f0 fc42 	bl	8000288 <__aeabi_dsub>
 800fa04:	4642      	mov	r2, r8
 800fa06:	464b      	mov	r3, r9
 800fa08:	f7f0 fdf6 	bl	80005f8 <__aeabi_dmul>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	460b      	mov	r3, r1
 800fa10:	4620      	mov	r0, r4
 800fa12:	4629      	mov	r1, r5
 800fa14:	f7f0 fc3a 	bl	800028c <__adddf3>
 800fa18:	4604      	mov	r4, r0
 800fa1a:	460d      	mov	r5, r1
 800fa1c:	ec45 4b10 	vmov	d0, r4, r5
 800fa20:	b003      	add	sp, #12
 800fa22:	ecbd 8b04 	vpop	{d8-d9}
 800fa26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa2a:	4b1b      	ldr	r3, [pc, #108]	; (800fa98 <__kernel_sin+0x150>)
 800fa2c:	ec51 0b18 	vmov	r0, r1, d8
 800fa30:	2200      	movs	r2, #0
 800fa32:	f7f0 fde1 	bl	80005f8 <__aeabi_dmul>
 800fa36:	4632      	mov	r2, r6
 800fa38:	ec41 0b19 	vmov	d9, r0, r1
 800fa3c:	463b      	mov	r3, r7
 800fa3e:	4640      	mov	r0, r8
 800fa40:	4649      	mov	r1, r9
 800fa42:	f7f0 fdd9 	bl	80005f8 <__aeabi_dmul>
 800fa46:	4602      	mov	r2, r0
 800fa48:	460b      	mov	r3, r1
 800fa4a:	ec51 0b19 	vmov	r0, r1, d9
 800fa4e:	f7f0 fc1b 	bl	8000288 <__aeabi_dsub>
 800fa52:	4652      	mov	r2, sl
 800fa54:	465b      	mov	r3, fp
 800fa56:	f7f0 fdcf 	bl	80005f8 <__aeabi_dmul>
 800fa5a:	ec53 2b18 	vmov	r2, r3, d8
 800fa5e:	f7f0 fc13 	bl	8000288 <__aeabi_dsub>
 800fa62:	a30b      	add	r3, pc, #44	; (adr r3, 800fa90 <__kernel_sin+0x148>)
 800fa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa68:	4606      	mov	r6, r0
 800fa6a:	460f      	mov	r7, r1
 800fa6c:	4640      	mov	r0, r8
 800fa6e:	4649      	mov	r1, r9
 800fa70:	f7f0 fdc2 	bl	80005f8 <__aeabi_dmul>
 800fa74:	4602      	mov	r2, r0
 800fa76:	460b      	mov	r3, r1
 800fa78:	4630      	mov	r0, r6
 800fa7a:	4639      	mov	r1, r7
 800fa7c:	f7f0 fc06 	bl	800028c <__adddf3>
 800fa80:	4602      	mov	r2, r0
 800fa82:	460b      	mov	r3, r1
 800fa84:	4620      	mov	r0, r4
 800fa86:	4629      	mov	r1, r5
 800fa88:	f7f0 fbfe 	bl	8000288 <__aeabi_dsub>
 800fa8c:	e7c4      	b.n	800fa18 <__kernel_sin+0xd0>
 800fa8e:	bf00      	nop
 800fa90:	55555549 	.word	0x55555549
 800fa94:	3fc55555 	.word	0x3fc55555
 800fa98:	3fe00000 	.word	0x3fe00000
 800fa9c:	5acfd57c 	.word	0x5acfd57c
 800faa0:	3de5d93a 	.word	0x3de5d93a
 800faa4:	8a2b9ceb 	.word	0x8a2b9ceb
 800faa8:	3e5ae5e6 	.word	0x3e5ae5e6
 800faac:	57b1fe7d 	.word	0x57b1fe7d
 800fab0:	3ec71de3 	.word	0x3ec71de3
 800fab4:	19c161d5 	.word	0x19c161d5
 800fab8:	3f2a01a0 	.word	0x3f2a01a0
 800fabc:	1110f8a6 	.word	0x1110f8a6
 800fac0:	3f811111 	.word	0x3f811111

0800fac4 <with_errno>:
 800fac4:	b570      	push	{r4, r5, r6, lr}
 800fac6:	4604      	mov	r4, r0
 800fac8:	460d      	mov	r5, r1
 800faca:	4616      	mov	r6, r2
 800facc:	f7fd fd0e 	bl	800d4ec <__errno>
 800fad0:	4629      	mov	r1, r5
 800fad2:	6006      	str	r6, [r0, #0]
 800fad4:	4620      	mov	r0, r4
 800fad6:	bd70      	pop	{r4, r5, r6, pc}

0800fad8 <xflow>:
 800fad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fada:	4614      	mov	r4, r2
 800fadc:	461d      	mov	r5, r3
 800fade:	b108      	cbz	r0, 800fae4 <xflow+0xc>
 800fae0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fae4:	e9cd 2300 	strd	r2, r3, [sp]
 800fae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800faec:	4620      	mov	r0, r4
 800faee:	4629      	mov	r1, r5
 800faf0:	f7f0 fd82 	bl	80005f8 <__aeabi_dmul>
 800faf4:	2222      	movs	r2, #34	; 0x22
 800faf6:	b003      	add	sp, #12
 800faf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fafc:	f7ff bfe2 	b.w	800fac4 <with_errno>

0800fb00 <__math_uflow>:
 800fb00:	b508      	push	{r3, lr}
 800fb02:	2200      	movs	r2, #0
 800fb04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fb08:	f7ff ffe6 	bl	800fad8 <xflow>
 800fb0c:	ec41 0b10 	vmov	d0, r0, r1
 800fb10:	bd08      	pop	{r3, pc}

0800fb12 <__math_oflow>:
 800fb12:	b508      	push	{r3, lr}
 800fb14:	2200      	movs	r2, #0
 800fb16:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800fb1a:	f7ff ffdd 	bl	800fad8 <xflow>
 800fb1e:	ec41 0b10 	vmov	d0, r0, r1
 800fb22:	bd08      	pop	{r3, pc}

0800fb24 <fabs>:
 800fb24:	ec51 0b10 	vmov	r0, r1, d0
 800fb28:	ee10 2a10 	vmov	r2, s0
 800fb2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fb30:	ec43 2b10 	vmov	d0, r2, r3
 800fb34:	4770      	bx	lr

0800fb36 <finite>:
 800fb36:	b082      	sub	sp, #8
 800fb38:	ed8d 0b00 	vstr	d0, [sp]
 800fb3c:	9801      	ldr	r0, [sp, #4]
 800fb3e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800fb42:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fb46:	0fc0      	lsrs	r0, r0, #31
 800fb48:	b002      	add	sp, #8
 800fb4a:	4770      	bx	lr
 800fb4c:	0000      	movs	r0, r0
	...

0800fb50 <floor>:
 800fb50:	ec51 0b10 	vmov	r0, r1, d0
 800fb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800fb5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800fb60:	2e13      	cmp	r6, #19
 800fb62:	ee10 5a10 	vmov	r5, s0
 800fb66:	ee10 8a10 	vmov	r8, s0
 800fb6a:	460c      	mov	r4, r1
 800fb6c:	dc32      	bgt.n	800fbd4 <floor+0x84>
 800fb6e:	2e00      	cmp	r6, #0
 800fb70:	da14      	bge.n	800fb9c <floor+0x4c>
 800fb72:	a333      	add	r3, pc, #204	; (adr r3, 800fc40 <floor+0xf0>)
 800fb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb78:	f7f0 fb88 	bl	800028c <__adddf3>
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	2300      	movs	r3, #0
 800fb80:	f7f0 ffca 	bl	8000b18 <__aeabi_dcmpgt>
 800fb84:	b138      	cbz	r0, 800fb96 <floor+0x46>
 800fb86:	2c00      	cmp	r4, #0
 800fb88:	da57      	bge.n	800fc3a <floor+0xea>
 800fb8a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fb8e:	431d      	orrs	r5, r3
 800fb90:	d001      	beq.n	800fb96 <floor+0x46>
 800fb92:	4c2d      	ldr	r4, [pc, #180]	; (800fc48 <floor+0xf8>)
 800fb94:	2500      	movs	r5, #0
 800fb96:	4621      	mov	r1, r4
 800fb98:	4628      	mov	r0, r5
 800fb9a:	e025      	b.n	800fbe8 <floor+0x98>
 800fb9c:	4f2b      	ldr	r7, [pc, #172]	; (800fc4c <floor+0xfc>)
 800fb9e:	4137      	asrs	r7, r6
 800fba0:	ea01 0307 	and.w	r3, r1, r7
 800fba4:	4303      	orrs	r3, r0
 800fba6:	d01f      	beq.n	800fbe8 <floor+0x98>
 800fba8:	a325      	add	r3, pc, #148	; (adr r3, 800fc40 <floor+0xf0>)
 800fbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbae:	f7f0 fb6d 	bl	800028c <__adddf3>
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	f7f0 ffaf 	bl	8000b18 <__aeabi_dcmpgt>
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	d0eb      	beq.n	800fb96 <floor+0x46>
 800fbbe:	2c00      	cmp	r4, #0
 800fbc0:	bfbe      	ittt	lt
 800fbc2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fbc6:	fa43 f606 	asrlt.w	r6, r3, r6
 800fbca:	19a4      	addlt	r4, r4, r6
 800fbcc:	ea24 0407 	bic.w	r4, r4, r7
 800fbd0:	2500      	movs	r5, #0
 800fbd2:	e7e0      	b.n	800fb96 <floor+0x46>
 800fbd4:	2e33      	cmp	r6, #51	; 0x33
 800fbd6:	dd0b      	ble.n	800fbf0 <floor+0xa0>
 800fbd8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fbdc:	d104      	bne.n	800fbe8 <floor+0x98>
 800fbde:	ee10 2a10 	vmov	r2, s0
 800fbe2:	460b      	mov	r3, r1
 800fbe4:	f7f0 fb52 	bl	800028c <__adddf3>
 800fbe8:	ec41 0b10 	vmov	d0, r0, r1
 800fbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbf0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800fbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800fbf8:	fa23 f707 	lsr.w	r7, r3, r7
 800fbfc:	4207      	tst	r7, r0
 800fbfe:	d0f3      	beq.n	800fbe8 <floor+0x98>
 800fc00:	a30f      	add	r3, pc, #60	; (adr r3, 800fc40 <floor+0xf0>)
 800fc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc06:	f7f0 fb41 	bl	800028c <__adddf3>
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	f7f0 ff83 	bl	8000b18 <__aeabi_dcmpgt>
 800fc12:	2800      	cmp	r0, #0
 800fc14:	d0bf      	beq.n	800fb96 <floor+0x46>
 800fc16:	2c00      	cmp	r4, #0
 800fc18:	da02      	bge.n	800fc20 <floor+0xd0>
 800fc1a:	2e14      	cmp	r6, #20
 800fc1c:	d103      	bne.n	800fc26 <floor+0xd6>
 800fc1e:	3401      	adds	r4, #1
 800fc20:	ea25 0507 	bic.w	r5, r5, r7
 800fc24:	e7b7      	b.n	800fb96 <floor+0x46>
 800fc26:	2301      	movs	r3, #1
 800fc28:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fc2c:	fa03 f606 	lsl.w	r6, r3, r6
 800fc30:	4435      	add	r5, r6
 800fc32:	4545      	cmp	r5, r8
 800fc34:	bf38      	it	cc
 800fc36:	18e4      	addcc	r4, r4, r3
 800fc38:	e7f2      	b.n	800fc20 <floor+0xd0>
 800fc3a:	2500      	movs	r5, #0
 800fc3c:	462c      	mov	r4, r5
 800fc3e:	e7aa      	b.n	800fb96 <floor+0x46>
 800fc40:	8800759c 	.word	0x8800759c
 800fc44:	7e37e43c 	.word	0x7e37e43c
 800fc48:	bff00000 	.word	0xbff00000
 800fc4c:	000fffff 	.word	0x000fffff

0800fc50 <scalbn>:
 800fc50:	b570      	push	{r4, r5, r6, lr}
 800fc52:	ec55 4b10 	vmov	r4, r5, d0
 800fc56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fc5a:	4606      	mov	r6, r0
 800fc5c:	462b      	mov	r3, r5
 800fc5e:	b99a      	cbnz	r2, 800fc88 <scalbn+0x38>
 800fc60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fc64:	4323      	orrs	r3, r4
 800fc66:	d036      	beq.n	800fcd6 <scalbn+0x86>
 800fc68:	4b39      	ldr	r3, [pc, #228]	; (800fd50 <scalbn+0x100>)
 800fc6a:	4629      	mov	r1, r5
 800fc6c:	ee10 0a10 	vmov	r0, s0
 800fc70:	2200      	movs	r2, #0
 800fc72:	f7f0 fcc1 	bl	80005f8 <__aeabi_dmul>
 800fc76:	4b37      	ldr	r3, [pc, #220]	; (800fd54 <scalbn+0x104>)
 800fc78:	429e      	cmp	r6, r3
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	460d      	mov	r5, r1
 800fc7e:	da10      	bge.n	800fca2 <scalbn+0x52>
 800fc80:	a32b      	add	r3, pc, #172	; (adr r3, 800fd30 <scalbn+0xe0>)
 800fc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc86:	e03a      	b.n	800fcfe <scalbn+0xae>
 800fc88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fc8c:	428a      	cmp	r2, r1
 800fc8e:	d10c      	bne.n	800fcaa <scalbn+0x5a>
 800fc90:	ee10 2a10 	vmov	r2, s0
 800fc94:	4620      	mov	r0, r4
 800fc96:	4629      	mov	r1, r5
 800fc98:	f7f0 faf8 	bl	800028c <__adddf3>
 800fc9c:	4604      	mov	r4, r0
 800fc9e:	460d      	mov	r5, r1
 800fca0:	e019      	b.n	800fcd6 <scalbn+0x86>
 800fca2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fca6:	460b      	mov	r3, r1
 800fca8:	3a36      	subs	r2, #54	; 0x36
 800fcaa:	4432      	add	r2, r6
 800fcac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fcb0:	428a      	cmp	r2, r1
 800fcb2:	dd08      	ble.n	800fcc6 <scalbn+0x76>
 800fcb4:	2d00      	cmp	r5, #0
 800fcb6:	a120      	add	r1, pc, #128	; (adr r1, 800fd38 <scalbn+0xe8>)
 800fcb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcbc:	da1c      	bge.n	800fcf8 <scalbn+0xa8>
 800fcbe:	a120      	add	r1, pc, #128	; (adr r1, 800fd40 <scalbn+0xf0>)
 800fcc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcc4:	e018      	b.n	800fcf8 <scalbn+0xa8>
 800fcc6:	2a00      	cmp	r2, #0
 800fcc8:	dd08      	ble.n	800fcdc <scalbn+0x8c>
 800fcca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fcce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fcd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fcd6:	ec45 4b10 	vmov	d0, r4, r5
 800fcda:	bd70      	pop	{r4, r5, r6, pc}
 800fcdc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fce0:	da19      	bge.n	800fd16 <scalbn+0xc6>
 800fce2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fce6:	429e      	cmp	r6, r3
 800fce8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fcec:	dd0a      	ble.n	800fd04 <scalbn+0xb4>
 800fcee:	a112      	add	r1, pc, #72	; (adr r1, 800fd38 <scalbn+0xe8>)
 800fcf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d1e2      	bne.n	800fcbe <scalbn+0x6e>
 800fcf8:	a30f      	add	r3, pc, #60	; (adr r3, 800fd38 <scalbn+0xe8>)
 800fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfe:	f7f0 fc7b 	bl	80005f8 <__aeabi_dmul>
 800fd02:	e7cb      	b.n	800fc9c <scalbn+0x4c>
 800fd04:	a10a      	add	r1, pc, #40	; (adr r1, 800fd30 <scalbn+0xe0>)
 800fd06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d0b8      	beq.n	800fc80 <scalbn+0x30>
 800fd0e:	a10e      	add	r1, pc, #56	; (adr r1, 800fd48 <scalbn+0xf8>)
 800fd10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd14:	e7b4      	b.n	800fc80 <scalbn+0x30>
 800fd16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd1a:	3236      	adds	r2, #54	; 0x36
 800fd1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fd20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fd24:	4620      	mov	r0, r4
 800fd26:	4b0c      	ldr	r3, [pc, #48]	; (800fd58 <scalbn+0x108>)
 800fd28:	2200      	movs	r2, #0
 800fd2a:	e7e8      	b.n	800fcfe <scalbn+0xae>
 800fd2c:	f3af 8000 	nop.w
 800fd30:	c2f8f359 	.word	0xc2f8f359
 800fd34:	01a56e1f 	.word	0x01a56e1f
 800fd38:	8800759c 	.word	0x8800759c
 800fd3c:	7e37e43c 	.word	0x7e37e43c
 800fd40:	8800759c 	.word	0x8800759c
 800fd44:	fe37e43c 	.word	0xfe37e43c
 800fd48:	c2f8f359 	.word	0xc2f8f359
 800fd4c:	81a56e1f 	.word	0x81a56e1f
 800fd50:	43500000 	.word	0x43500000
 800fd54:	ffff3cb0 	.word	0xffff3cb0
 800fd58:	3c900000 	.word	0x3c900000

0800fd5c <_init>:
 800fd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd5e:	bf00      	nop
 800fd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd62:	bc08      	pop	{r3}
 800fd64:	469e      	mov	lr, r3
 800fd66:	4770      	bx	lr

0800fd68 <_fini>:
 800fd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd6a:	bf00      	nop
 800fd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd6e:	bc08      	pop	{r3}
 800fd70:	469e      	mov	lr, r3
 800fd72:	4770      	bx	lr
