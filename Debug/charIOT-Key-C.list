
charIOT-Key-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  0800f128  0800f128  0001f128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa58  0800fa58  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa58  0800fa58  0001fa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa60  0800fa60  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa60  0800fa60  0001fa60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa64  0800fa64  0001fa64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800fa68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002100  200000b0  0800fb18  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021b0  0800fb18  000221b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00068a23  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006104  00000000  00000000  00088b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000047f0  00000000  00000000  0008ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004548  00000000  00000000  000933f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005fc5  00000000  00000000  00097940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032842  00000000  00000000  0009d905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105685  00000000  00000000  000d0147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d57cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014744  00000000  00000000  001d581c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f10c 	.word	0x0800f10c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800f10c 	.word	0x0800f10c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	7c1b      	ldrb	r3, [r3, #16]
 8000f5a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	fb02 f303 	mul.w	r3, r2, r3
 8000f6a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f00b fcc8 	bl	800c910 <memset>
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
 8000f94:	4613      	mov	r3, r2
 8000f96:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	7c1b      	ldrb	r3, [r3, #16]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	89ba      	ldrh	r2, [r7, #12]
 8000fb0:	fb12 f303 	smulbb	r3, r2, r3
 8000fb4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000fb6:	89bb      	ldrh	r3, [r7, #12]
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000fbc:	89bb      	ldrh	r3, [r7, #12]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000fc4:	7bf9      	ldrb	r1, [r7, #15]
 8000fc6:	78ba      	ldrb	r2, [r7, #2]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	2100      	movs	r1, #0
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f001 fc96 	bl	8002902 <u8x8_DrawTile>
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ff0:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ff8:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	7c5b      	ldrb	r3, [r3, #17]
 8001000:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001002:	7bba      	ldrb	r2, [r7, #14]
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	4619      	mov	r1, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ffbd 	bl	8000f88 <u8g2_send_tile_row>
    src_row++;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	3301      	adds	r3, #1
 8001018:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	7b7b      	ldrb	r3, [r7, #13]
 800101e:	429a      	cmp	r2, r3
 8001020:	d203      	bcs.n	800102a <u8g2_send_buffer+0x4c>
 8001022:	7bba      	ldrb	r2, [r7, #14]
 8001024:	7b3b      	ldrb	r3, [r7, #12]
 8001026:	429a      	cmp	r2, r3
 8001028:	d3eb      	bcc.n	8001002 <u8g2_send_buffer+0x24>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffcf 	bl	8000fde <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f001 fcaf 	bl	80029a4 <u8x8_RefreshDisplay>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	460b      	mov	r3, r1
 8001058:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4798      	blx	r3
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff5b 	bl	8000f4c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001096:	2100      	movs	r1, #0
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffd8 	bl	800104e <u8g2_SetBufferCurrTileRow>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff95 	bl	8000fde <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010ba:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	4413      	add	r3, r2
 80010c6:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	7c5b      	ldrb	r3, [r3, #17]
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d304      	bcc.n	80010de <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f001 fc65 	bl	80029a4 <u8x8_RefreshDisplay>
    return 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	e00d      	b.n	80010fa <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff2f 	bl	8000f4c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	4619      	mov	r1, r3
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffab 	bl	800104e <u8g2_SetBufferCurrTileRow>
  return 1;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffb7 	bl	800107e <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ffc8 	bl	80010a6 <u8g2_NextPage>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f9      	bne.n	8001110 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800111c:	2100      	movs	r1, #0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff95 	bl	800104e <u8g2_SetBufferCurrTileRow>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2204      	movs	r2, #4
 8001138:	701a      	strb	r2, [r3, #0]
  return buf;
 800113a:	4b03      	ldr	r3, [pc, #12]	; (8001148 <u8g2_m_16_4_f+0x1c>)
  #endif
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200000cc 	.word	0x200000cc

0800114c <u8g2_Setup_ssd1305_i2c_128x32_noname_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1305 f */
void u8g2_Setup_ssd1305_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af02      	add	r7, sp, #8
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1305_128x32_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x44>)
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x48>)
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f001 fc7d 	bl	8002a64 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 800116a:	f107 0313 	add.w	r3, r7, #19
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ffdc 	bl	800112c <u8g2_m_16_4_f>
 8001174:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001176:	7cfa      	ldrb	r2, [r7, #19]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x4c>)
 800117e:	6979      	ldr	r1, [r7, #20]
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f000 ffc4 	bl	800210e <u8g2_SetupBuffer>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	080025f9 	.word	0x080025f9
 8001194:	080027b9 	.word	0x080027b9
 8001198:	08001f91 	.word	0x08001f91

0800119c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	781b      	ldrb	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	81fb      	strh	r3, [r7, #14]
    font++;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3301      	adds	r3, #1
 80011de:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80011e0:	89fb      	ldrh	r3, [r7, #14]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	4413      	add	r3, r2
 80011f0:	81fb      	strh	r3, [r7, #14]
    return pos;
 80011f2:	89fb      	ldrh	r3, [r7, #14]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800120a:	2100      	movs	r1, #0
 800120c:	6838      	ldr	r0, [r7, #0]
 800120e:	f7ff ffc5 	bl	800119c <u8g2_font_get_byte>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800121a:	2101      	movs	r1, #1
 800121c:	6838      	ldr	r0, [r7, #0]
 800121e:	f7ff ffbd 	bl	800119c <u8g2_font_get_byte>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800122a:	2102      	movs	r1, #2
 800122c:	6838      	ldr	r0, [r7, #0]
 800122e:	f7ff ffb5 	bl	800119c <u8g2_font_get_byte>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800123a:	2103      	movs	r1, #3
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	f7ff ffad 	bl	800119c <u8g2_font_get_byte>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800124a:	2104      	movs	r1, #4
 800124c:	6838      	ldr	r0, [r7, #0]
 800124e:	f7ff ffa5 	bl	800119c <u8g2_font_get_byte>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800125a:	2105      	movs	r1, #5
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f7ff ff9d 	bl	800119c <u8g2_font_get_byte>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800126a:	2106      	movs	r1, #6
 800126c:	6838      	ldr	r0, [r7, #0]
 800126e:	f7ff ff95 	bl	800119c <u8g2_font_get_byte>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800127a:	2107      	movs	r1, #7
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f7ff ff8d 	bl	800119c <u8g2_font_get_byte>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800128a:	2108      	movs	r1, #8
 800128c:	6838      	ldr	r0, [r7, #0]
 800128e:	f7ff ff85 	bl	800119c <u8g2_font_get_byte>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800129a:	2109      	movs	r1, #9
 800129c:	6838      	ldr	r0, [r7, #0]
 800129e:	f7ff ff7d 	bl	800119c <u8g2_font_get_byte>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b25a      	sxtb	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80012aa:	210a      	movs	r1, #10
 80012ac:	6838      	ldr	r0, [r7, #0]
 80012ae:	f7ff ff75 	bl	800119c <u8g2_font_get_byte>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b25a      	sxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80012ba:	210b      	movs	r1, #11
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	f7ff ff6d 	bl	800119c <u8g2_font_get_byte>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b25a      	sxtb	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80012ca:	210c      	movs	r1, #12
 80012cc:	6838      	ldr	r0, [r7, #0]
 80012ce:	f7ff ff65 	bl	800119c <u8g2_font_get_byte>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b25a      	sxtb	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80012da:	210d      	movs	r1, #13
 80012dc:	6838      	ldr	r0, [r7, #0]
 80012de:	f7ff ff5d 	bl	800119c <u8g2_font_get_byte>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b25a      	sxtb	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80012ea:	210e      	movs	r1, #14
 80012ec:	6838      	ldr	r0, [r7, #0]
 80012ee:	f7ff ff55 	bl	800119c <u8g2_font_get_byte>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b25a      	sxtb	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80012fa:	210f      	movs	r1, #15
 80012fc:	6838      	ldr	r0, [r7, #0]
 80012fe:	f7ff ff4d 	bl	800119c <u8g2_font_get_byte>
 8001302:	4603      	mov	r3, r0
 8001304:	b25a      	sxtb	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800130a:	2110      	movs	r1, #16
 800130c:	6838      	ldr	r0, [r7, #0]
 800130e:	f7ff ff45 	bl	800119c <u8g2_font_get_byte>
 8001312:	4603      	mov	r3, r0
 8001314:	b25a      	sxtb	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800131a:	2111      	movs	r1, #17
 800131c:	6838      	ldr	r0, [r7, #0]
 800131e:	f7ff ff4f 	bl	80011c0 <u8g2_font_get_word>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800132a:	2113      	movs	r1, #19
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f7ff ff47 	bl	80011c0 <u8g2_font_get_word>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800133a:	2115      	movs	r1, #21
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f7ff ff3f 	bl	80011c0 <u8g2_font_get_word>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	82da      	strh	r2, [r3, #22]
#endif
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001352:	b480      	push	{r7}
 8001354:	b085      	sub	sp, #20
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7b1b      	ldrb	r3, [r3, #12]
 8001362:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	fa42 f303 	asr.w	r3, r2, r3
 8001374:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001376:	7b7b      	ldrb	r3, [r7, #13]
 8001378:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800137a:	7bba      	ldrb	r2, [r7, #14]
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	4413      	add	r3, r2
 8001380:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	2b07      	cmp	r3, #7
 8001386:	d91a      	bls.n	80013be <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001388:	2308      	movs	r3, #8
 800138a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800138c:	7b3a      	ldrb	r2, [r7, #12]
 800138e:	7b7b      	ldrb	r3, [r7, #13]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	b25a      	sxtb	r2, r3
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	3b08      	subs	r3, #8
 80013bc:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	4013      	ands	r3, r2
 80013d2:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7bba      	ldrb	r2, [r7, #14]
 80013d8:	731a      	strb	r2, [r3, #12]
  return val;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	4619      	mov	r1, r3
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ffaa 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	3b01      	subs	r3, #1
 800140a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800140c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	73fb      	strb	r3, [r7, #15]
  return v;
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800142e:	b490      	push	{r4, r7}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	4604      	mov	r4, r0
 8001436:	4608      	mov	r0, r1
 8001438:	4611      	mov	r1, r2
 800143a:	461a      	mov	r2, r3
 800143c:	4623      	mov	r3, r4
 800143e:	80fb      	strh	r3, [r7, #6]
 8001440:	4603      	mov	r3, r0
 8001442:	717b      	strb	r3, [r7, #5]
 8001444:	460b      	mov	r3, r1
 8001446:	713b      	strb	r3, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d014      	beq.n	800147c <u8g2_add_vector_y+0x4e>
 8001452:	2b02      	cmp	r3, #2
 8001454:	dc19      	bgt.n	800148a <u8g2_add_vector_y+0x5c>
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <u8g2_add_vector_y+0x32>
 800145a:	2b01      	cmp	r3, #1
 800145c:	d007      	beq.n	800146e <u8g2_add_vector_y+0x40>
 800145e:	e014      	b.n	800148a <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001460:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001464:	b29a      	uxth	r2, r3
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4413      	add	r3, r2
 800146a:	80fb      	strh	r3, [r7, #6]
      break;
 800146c:	e014      	b.n	8001498 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800146e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001472:	b29a      	uxth	r2, r3
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4413      	add	r3, r2
 8001478:	80fb      	strh	r3, [r7, #6]
      break;
 800147a:	e00d      	b.n	8001498 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800147c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001480:	b29b      	uxth	r3, r3
 8001482:	88fa      	ldrh	r2, [r7, #6]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	80fb      	strh	r3, [r7, #6]
      break;
 8001488:	e006      	b.n	8001498 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800148a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800148e:	b29b      	uxth	r3, r3
 8001490:	88fa      	ldrh	r2, [r7, #6]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	80fb      	strh	r3, [r7, #6]
      break;      
 8001496:	bf00      	nop
  }
  return dy;
 8001498:	88fb      	ldrh	r3, [r7, #6]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc90      	pop	{r4, r7}
 80014a2:	4770      	bx	lr

080014a4 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80014a4:	b490      	push	{r4, r7}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	4603      	mov	r3, r0
 80014b8:	717b      	strb	r3, [r7, #5]
 80014ba:	460b      	mov	r3, r1
 80014bc:	713b      	strb	r3, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d014      	beq.n	80014f2 <u8g2_add_vector_x+0x4e>
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	dc19      	bgt.n	8001500 <u8g2_add_vector_x+0x5c>
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <u8g2_add_vector_x+0x32>
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d007      	beq.n	80014e4 <u8g2_add_vector_x+0x40>
 80014d4:	e014      	b.n	8001500 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80014d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	4413      	add	r3, r2
 80014e0:	80fb      	strh	r3, [r7, #6]
      break;
 80014e2:	e014      	b.n	800150e <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80014e4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	88fa      	ldrh	r2, [r7, #6]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	80fb      	strh	r3, [r7, #6]
      break;
 80014f0:	e00d      	b.n	800150e <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80014f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	88fa      	ldrh	r2, [r7, #6]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	80fb      	strh	r3, [r7, #6]
      break;
 80014fe:	e006      	b.n	800150e <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001500:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001504:	b29a      	uxth	r2, r3
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	4413      	add	r3, r2
 800150a:	80fb      	strh	r3, [r7, #6]
      break;      
 800150c:	bf00      	nop
  }
  return dx;
 800150e:	88fb      	ldrh	r3, [r7, #6]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bc90      	pop	{r4, r7}
 8001518:	4770      	bx	lr

0800151a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b088      	sub	sp, #32
 800151e:	af02      	add	r7, sp, #8
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	70fb      	strb	r3, [r7, #3]
 8001526:	4613      	mov	r3, r2
 8001528:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3360      	adds	r3, #96	; 0x60
 800152e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800153a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001542:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800154a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	7d7b      	ldrb	r3, [r7, #21]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001558:	7dfa      	ldrb	r2, [r7, #23]
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	429a      	cmp	r2, r3
 800155e:	d201      	bcs.n	8001564 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	889b      	ldrh	r3, [r3, #4]
 8001568:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	88db      	ldrh	r3, [r3, #6]
 800156e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001570:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001574:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	7c1b      	ldrb	r3, [r3, #16]
 800157c:	89b8      	ldrh	r0, [r7, #12]
 800157e:	f7ff ff91 	bl	80014a4 <u8g2_add_vector_x>
 8001582:	4603      	mov	r3, r0
 8001584:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001586:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800158a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	7c1b      	ldrb	r3, [r3, #16]
 8001592:	8978      	ldrh	r0, [r7, #10]
 8001594:	f7ff ff4b 	bl	800142e <u8g2_add_vector_y>
 8001598:	4603      	mov	r3, r0
 800159a:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800159c:	78bb      	ldrb	r3, [r7, #2]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d010      	beq.n	80015c4 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	7b9a      	ldrb	r2, [r3, #14]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80015ac:	7dbb      	ldrb	r3, [r7, #22]
 80015ae:	b298      	uxth	r0, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	7c1b      	ldrb	r3, [r3, #16]
 80015b4:	897a      	ldrh	r2, [r7, #10]
 80015b6:	89b9      	ldrh	r1, [r7, #12]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4603      	mov	r3, r0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fbfe 	bl	8001dbe <u8g2_DrawHVLine>
 80015c2:	e013      	b.n	80015ec <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	7b5b      	ldrb	r3, [r3, #13]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10f      	bne.n	80015ec <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	7bda      	ldrb	r2, [r3, #15]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80015d6:	7dbb      	ldrb	r3, [r7, #22]
 80015d8:	b298      	uxth	r0, r3
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	7c1b      	ldrb	r3, [r3, #16]
 80015de:	897a      	ldrh	r2, [r7, #10]
 80015e0:	89b9      	ldrh	r1, [r7, #12]
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	4603      	mov	r3, r0
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fbe9 	bl	8001dbe <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80015ec:	7dfa      	ldrb	r2, [r7, #23]
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d309      	bcc.n	8001608 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80015f4:	7dfa      	ldrb	r2, [r7, #23]
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	757b      	strb	r3, [r7, #21]
    ly++;
 8001600:	7d3b      	ldrb	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001606:	e79d      	b.n	8001544 <u8g2_font_decode_len+0x2a>
      break;
 8001608:	bf00      	nop
  }
  lx += cnt;
 800160a:	7d7a      	ldrb	r2, [r7, #21]
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	4413      	add	r3, r2
 8001610:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001612:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800161a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	725a      	strb	r2, [r3, #9]
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3360      	adds	r3, #96	; 0x60
 8001638:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800164c:	4619      	mov	r1, r3
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff fe7f 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 8001654:	4603      	mov	r3, r0
 8001656:	b25a      	sxtb	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001662:	4619      	mov	r1, r3
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff fe74 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 800166a:	4603      	mov	r3, r0
 800166c:	b25a      	sxtb	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	7b9b      	ldrb	r3, [r3, #14]
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	73da      	strb	r2, [r3, #15]
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af02      	add	r7, sp, #8
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3360      	adds	r3, #96	; 0x60
 80016a6:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80016a8:	6839      	ldr	r1, [r7, #0]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffbd 	bl	800162a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80016b6:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80016be:	4619      	mov	r1, r3
 80016c0:	6978      	ldr	r0, [r7, #20]
 80016c2:	f7ff fe91 	bl	80013e8 <u8g2_font_decode_get_signed_bits>
 80016c6:	4603      	mov	r3, r0
 80016c8:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80016d0:	4619      	mov	r1, r3
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7ff fe88 	bl	80013e8 <u8g2_font_decode_get_signed_bits>
 80016d8:	4603      	mov	r3, r0
 80016da:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80016e2:	4619      	mov	r1, r3
 80016e4:	6978      	ldr	r0, [r7, #20]
 80016e6:	f7ff fe7f 	bl	80013e8 <u8g2_font_decode_get_signed_bits>
 80016ea:	4603      	mov	r3, r0
 80016ec:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f340 80d7 	ble.w	80018a8 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	8898      	ldrh	r0, [r3, #4]
 80016fe:	7cfa      	ldrb	r2, [r7, #19]
 8001700:	7c7b      	ldrb	r3, [r7, #17]
 8001702:	4413      	add	r3, r2
 8001704:	b2db      	uxtb	r3, r3
 8001706:	425b      	negs	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	b25a      	sxtb	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	7c1b      	ldrb	r3, [r3, #16]
 8001710:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001714:	f7ff fec6 	bl	80014a4 <u8g2_add_vector_x>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	88d8      	ldrh	r0, [r3, #6]
 8001724:	7cfa      	ldrb	r2, [r7, #19]
 8001726:	7c7b      	ldrb	r3, [r7, #17]
 8001728:	4413      	add	r3, r2
 800172a:	b2db      	uxtb	r3, r3
 800172c:	425b      	negs	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	b25a      	sxtb	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	7c1b      	ldrb	r3, [r3, #16]
 8001736:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800173a:	f7ff fe78 	bl	800142e <u8g2_add_vector_y>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	889b      	ldrh	r3, [r3, #4]
 800174a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	88db      	ldrh	r3, [r3, #6]
 8001750:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001752:	8bfb      	ldrh	r3, [r7, #30]
 8001754:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001756:	8b7b      	ldrh	r3, [r7, #26]
 8001758:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	7c1b      	ldrb	r3, [r3, #16]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d85a      	bhi.n	8001818 <u8g2_font_decode_glyph+0x180>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <u8g2_font_decode_glyph+0xd0>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	08001779 	.word	0x08001779
 800176c:	08001795 	.word	0x08001795
 8001770:	080017bd 	.word	0x080017bd
 8001774:	080017f1 	.word	0x080017f1
      {
	case 0:
	    x1 += decode->glyph_width;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800177e:	b29a      	uxth	r2, r3
 8001780:	8bbb      	ldrh	r3, [r7, #28]
 8001782:	4413      	add	r3, r2
 8001784:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001786:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800178a:	b29a      	uxth	r2, r3
 800178c:	8b3b      	ldrh	r3, [r7, #24]
 800178e:	4413      	add	r3, r2
 8001790:	833b      	strh	r3, [r7, #24]
	    break;
 8001792:	e041      	b.n	8001818 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001794:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001798:	b29b      	uxth	r3, r3
 800179a:	8bfa      	ldrh	r2, [r7, #30]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80017a0:	8bfb      	ldrh	r3, [r7, #30]
 80017a2:	3301      	adds	r3, #1
 80017a4:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80017a6:	8bbb      	ldrh	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	8b3b      	ldrh	r3, [r7, #24]
 80017b6:	4413      	add	r3, r2
 80017b8:	833b      	strh	r3, [r7, #24]
	    break;
 80017ba:	e02d      	b.n	8001818 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	8bfa      	ldrh	r2, [r7, #30]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80017ca:	8bfb      	ldrh	r3, [r7, #30]
 80017cc:	3301      	adds	r3, #1
 80017ce:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80017d0:	8bbb      	ldrh	r3, [r7, #28]
 80017d2:	3301      	adds	r3, #1
 80017d4:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80017d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	8b7a      	ldrh	r2, [r7, #26]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80017e2:	8b7b      	ldrh	r3, [r7, #26]
 80017e4:	3301      	adds	r3, #1
 80017e6:	837b      	strh	r3, [r7, #26]
	    y1++;
 80017e8:	8b3b      	ldrh	r3, [r7, #24]
 80017ea:	3301      	adds	r3, #1
 80017ec:	833b      	strh	r3, [r7, #24]
	    break;	  
 80017ee:	e013      	b.n	8001818 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80017f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	8bbb      	ldrh	r3, [r7, #28]
 80017f8:	4413      	add	r3, r2
 80017fa:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001802:	b29b      	uxth	r3, r3
 8001804:	8b7a      	ldrh	r2, [r7, #26]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800180a:	8b7b      	ldrh	r3, [r7, #26]
 800180c:	3301      	adds	r3, #1
 800180e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001810:	8b3b      	ldrh	r3, [r7, #24]
 8001812:	3301      	adds	r3, #1
 8001814:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001816:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001818:	8bb8      	ldrh	r0, [r7, #28]
 800181a:	8b7a      	ldrh	r2, [r7, #26]
 800181c:	8bf9      	ldrh	r1, [r7, #30]
 800181e:	8b3b      	ldrh	r3, [r7, #24]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	4603      	mov	r3, r0
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 fb88 	bl	8001f3a <u8g2_IsIntersection>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <u8g2_font_decode_glyph+0x19e>
	return d;
 8001830:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001834:	e03a      	b.n	80018ac <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2200      	movs	r2, #0
 800183a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2200      	movs	r2, #0
 8001840:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001848:	4619      	mov	r1, r3
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff fd81 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800185a:	4619      	mov	r1, r3
 800185c:	6978      	ldr	r0, [r7, #20]
 800185e:	f7ff fd78 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 8001862:	4603      	mov	r3, r0
 8001864:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	2200      	movs	r2, #0
 800186a:	4619      	mov	r1, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fe54 	bl	800151a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001872:	7bbb      	ldrb	r3, [r7, #14]
 8001874:	2201      	movs	r2, #1
 8001876:	4619      	mov	r1, r3
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fe4e 	bl	800151a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800187e:	2101      	movs	r1, #1
 8001880:	6978      	ldr	r0, [r7, #20]
 8001882:	f7ff fd66 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ec      	bne.n	8001866 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001892:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001896:	429a      	cmp	r2, r3
 8001898:	dd00      	ble.n	800189c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800189a:	e7d2      	b.n	8001842 <u8g2_font_decode_glyph+0x1aa>
	break;
 800189c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	7b9a      	ldrb	r2, [r3, #14]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 80018a8:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c4:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3317      	adds	r3, #23
 80018ca:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80018cc:	887b      	ldrh	r3, [r7, #2]
 80018ce:	2bff      	cmp	r3, #255	; 0xff
 80018d0:	d82a      	bhi.n	8001928 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	2b60      	cmp	r3, #96	; 0x60
 80018d6:	d907      	bls.n	80018e8 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80018de:	461a      	mov	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	4413      	add	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e009      	b.n	80018fc <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	2b40      	cmp	r3, #64	; 0x40
 80018ec:	d906      	bls.n	80018fc <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80018f4:	461a      	mov	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d04e      	beq.n	80019a4 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	887a      	ldrh	r2, [r7, #2]
 800190e:	429a      	cmp	r2, r3
 8001910:	d102      	bne.n	8001918 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3302      	adds	r3, #2
 8001916:	e049      	b.n	80019ac <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	4413      	add	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001926:	e7e9      	b.n	80018fc <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800192e:	461a      	mov	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	4413      	add	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800193a:	2100      	movs	r1, #0
 800193c:	6938      	ldr	r0, [r7, #16]
 800193e:	f7ff fc3f 	bl	80011c0 <u8g2_font_get_word>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	4413      	add	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800194c:	2102      	movs	r1, #2
 800194e:	6938      	ldr	r0, [r7, #16]
 8001950:	f7ff fc36 	bl	80011c0 <u8g2_font_get_word>
 8001954:	4603      	mov	r3, r0
 8001956:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	3304      	adds	r3, #4
 800195c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800195e:	89fa      	ldrh	r2, [r7, #14]
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	429a      	cmp	r2, r3
 8001964:	d3e9      	bcc.n	800193a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800196c:	89fb      	ldrh	r3, [r7, #14]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b29a      	uxth	r2, r3
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	4313      	orrs	r3, r2
 800197e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001980:	89fb      	ldrh	r3, [r7, #14]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d010      	beq.n	80019a8 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001986:	89fa      	ldrh	r2, [r7, #14]
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	429a      	cmp	r2, r3
 800198c:	d102      	bne.n	8001994 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3303      	adds	r3, #3
 8001992:	e00b      	b.n	80019ac <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3302      	adds	r3, #2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	4413      	add	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80019a2:	e7e0      	b.n	8001966 <u8g2_font_get_glyph_data+0xb2>
	break;
 80019a4:	bf00      	nop
 80019a6:	e000      	b.n	80019aa <u8g2_font_get_glyph_data+0xf6>
	break;
 80019a8:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	817b      	strh	r3, [r7, #10]
 80019c6:	460b      	mov	r3, r1
 80019c8:	813b      	strh	r3, [r7, #8]
 80019ca:	4613      	mov	r3, r2
 80019cc:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	897a      	ldrh	r2, [r7, #10]
 80019d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	893a      	ldrh	r2, [r7, #8]
 80019de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4619      	mov	r1, r3
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7ff ff64 	bl	80018b4 <u8g2_font_get_glyph_data>
 80019ec:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80019f4:	6939      	ldr	r1, [r7, #16]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fe4e 	bl	8001698 <u8g2_font_decode_glyph>
 80019fc:	4603      	mov	r3, r0
 80019fe:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001a00:	8afb      	ldrh	r3, [r7, #22]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	4608      	mov	r0, r1
 8001a16:	4611      	mov	r1, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	817b      	strh	r3, [r7, #10]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	813b      	strh	r3, [r7, #8]
 8001a22:	4613      	mov	r3, r2
 8001a24:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d833      	bhi.n	8001a98 <u8g2_DrawGlyph+0x8c>
 8001a30:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <u8g2_DrawGlyph+0x2c>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a49 	.word	0x08001a49
 8001a3c:	08001a5d 	.word	0x08001a5d
 8001a40:	08001a71 	.word	0x08001a71
 8001a44:	08001a85 	.word	0x08001a85
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	4798      	blx	r3
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	893b      	ldrh	r3, [r7, #8]
 8001a56:	4413      	add	r3, r2
 8001a58:	813b      	strh	r3, [r7, #8]
      break;
 8001a5a:	e01d      	b.n	8001a98 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	4798      	blx	r3
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	897b      	ldrh	r3, [r7, #10]
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	817b      	strh	r3, [r7, #10]
      break;
 8001a6e:	e013      	b.n	8001a98 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	4798      	blx	r3
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	893b      	ldrh	r3, [r7, #8]
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	813b      	strh	r3, [r7, #8]
      break;
 8001a82:	e009      	b.n	8001a98 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	4798      	blx	r3
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	897b      	ldrh	r3, [r7, #10]
 8001a92:	4413      	add	r3, r2
 8001a94:	817b      	strh	r3, [r7, #10]
      break;
 8001a96:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	893a      	ldrh	r2, [r7, #8]
 8001a9c:	8979      	ldrh	r1, [r7, #10]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7ff ff88 	bl	80019b4 <u8g2_font_draw_glyph>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop

08001ab0 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	817b      	strh	r3, [r7, #10]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 fc6a 	bl	800239c <u8x8_utf8_init>
  sum = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	7812      	ldrb	r2, [r2, #0]
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	4798      	blx	r3
 8001ada:	4603      	mov	r3, r0
 8001adc:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001ade:	8abb      	ldrh	r3, [r7, #20]
 8001ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d038      	beq.n	8001b5a <u8g2_draw_string+0xaa>
      break;
    str++;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3301      	adds	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001aee:	8abb      	ldrh	r3, [r7, #20]
 8001af0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d0e9      	beq.n	8001acc <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001af8:	8abb      	ldrh	r3, [r7, #20]
 8001afa:	893a      	ldrh	r2, [r7, #8]
 8001afc:	8979      	ldrh	r1, [r7, #10]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f7ff ff84 	bl	8001a0c <u8g2_DrawGlyph>
 8001b04:	4603      	mov	r3, r0
 8001b06:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d81e      	bhi.n	8001b50 <u8g2_draw_string+0xa0>
 8001b12:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <u8g2_draw_string+0x68>)
 8001b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001b33 	.word	0x08001b33
 8001b20:	08001b3d 	.word	0x08001b3d
 8001b24:	08001b47 	.word	0x08001b47
      {
	case 0:
	  x += delta;
 8001b28:	897a      	ldrh	r2, [r7, #10]
 8001b2a:	8a7b      	ldrh	r3, [r7, #18]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	817b      	strh	r3, [r7, #10]
	  break;
 8001b30:	e00e      	b.n	8001b50 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001b32:	893a      	ldrh	r2, [r7, #8]
 8001b34:	8a7b      	ldrh	r3, [r7, #18]
 8001b36:	4413      	add	r3, r2
 8001b38:	813b      	strh	r3, [r7, #8]
	  break;
 8001b3a:	e009      	b.n	8001b50 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001b3c:	897a      	ldrh	r2, [r7, #10]
 8001b3e:	8a7b      	ldrh	r3, [r7, #18]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	817b      	strh	r3, [r7, #10]
	  break;
 8001b44:	e004      	b.n	8001b50 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001b46:	893a      	ldrh	r2, [r7, #8]
 8001b48:	8a7b      	ldrh	r3, [r7, #18]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	813b      	strh	r3, [r7, #8]
	  break;
 8001b4e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001b50:	8afa      	ldrh	r2, [r7, #22]
 8001b52:	8a7b      	ldrh	r3, [r7, #18]
 8001b54:	4413      	add	r3, r2
 8001b56:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001b58:	e7b8      	b.n	8001acc <u8g2_draw_string+0x1c>
      break;
 8001b5a:	bf00      	nop
    }
  }
  return sum;
 8001b5c:	8afb      	ldrh	r3, [r7, #22]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop

08001b68 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	817b      	strh	r3, [r7, #10]
 8001b76:	4613      	mov	r3, r2
 8001b78:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <u8g2_DrawStr+0x30>)
 8001b7e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001b80:	893a      	ldrh	r2, [r7, #8]
 8001b82:	8979      	ldrh	r1, [r7, #10]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7ff ff92 	bl	8001ab0 <u8g2_draw_string>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	080023b9 	.word	0x080023b9

08001b9c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d05d      	beq.n	8001c68 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d04d      	beq.n	8001c6a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d11c      	bne.n	8001c12 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8001be4:	429a      	cmp	r2, r3
 8001be6:	da05      	bge.n	8001bf4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dd32      	ble.n	8001c6a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001c10:	e02b      	b.n	8001c6a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001c20:	4619      	mov	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001c28:	440b      	add	r3, r1
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	da0d      	bge.n	8001c4a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	b25a      	sxtb	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dd07      	ble.n	8001c6a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001c66:	e000      	b.n	8001c6a <u8g2_UpdateRefHeight+0xce>
    return;
 8001c68:	bf00      	nop
  }  
}
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <u8g2_SetFontPosBaseline+0x1c>)
 8001c98:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	08001c75 	.word	0x08001c75

08001cac <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d00b      	beq.n	8001cd8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3374      	adds	r3, #116	; 0x74
 8001cca:	6839      	ldr	r1, [r7, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fa97 	bl	8001200 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ff62 	bl	8001b9c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	4611      	mov	r1, r2
 8001cec:	461a      	mov	r2, r3
 8001cee:	460b      	mov	r3, r1
 8001cf0:	80fb      	strh	r3, [r7, #6]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001cfc:	8afb      	ldrh	r3, [r7, #22]
 8001cfe:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	881a      	ldrh	r2, [r3, #0]
 8001d04:	8abb      	ldrh	r3, [r7, #20]
 8001d06:	4413      	add	r3, r2
 8001d08:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001d0a:	8afa      	ldrh	r2, [r7, #22]
 8001d0c:	8abb      	ldrh	r3, [r7, #20]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d90b      	bls.n	8001d2a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001d12:	8afa      	ldrh	r2, [r7, #22]
 8001d14:	88bb      	ldrh	r3, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d205      	bcs.n	8001d26 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001d1a:	88bb      	ldrh	r3, [r7, #4]
 8001d1c:	82bb      	strh	r3, [r7, #20]
      b--;
 8001d1e:	8abb      	ldrh	r3, [r7, #20]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	82bb      	strh	r3, [r7, #20]
 8001d24:	e001      	b.n	8001d2a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001d2a:	8afa      	ldrh	r2, [r7, #22]
 8001d2c:	88bb      	ldrh	r3, [r7, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d301      	bcc.n	8001d36 <u8g2_clip_intersection2+0x56>
    return 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e01c      	b.n	8001d70 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001d36:	8aba      	ldrh	r2, [r7, #20]
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d801      	bhi.n	8001d42 <u8g2_clip_intersection2+0x62>
    return 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e016      	b.n	8001d70 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001d42:	8afa      	ldrh	r2, [r7, #22]
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d201      	bcs.n	8001d4e <u8g2_clip_intersection2+0x6e>
    a = c;
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8001d4e:	8aba      	ldrh	r2, [r7, #20]
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d901      	bls.n	8001d5a <u8g2_clip_intersection2+0x7a>
    b = d;
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8afa      	ldrh	r2, [r7, #22]
 8001d5e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001d60:	8aba      	ldrh	r2, [r7, #20]
 8001d62:	8afb      	ldrh	r3, [r7, #22]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	8aba      	ldrh	r2, [r7, #20]
 8001d6c:	801a      	strh	r2, [r3, #0]
  return 1;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	817b      	strh	r3, [r7, #10]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	813b      	strh	r3, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d9a:	893a      	ldrh	r2, [r7, #8]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001da4:	88f8      	ldrh	r0, [r7, #6]
 8001da6:	893a      	ldrh	r2, [r7, #8]
 8001da8:	8979      	ldrh	r1, [r7, #10]
 8001daa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	4603      	mov	r3, r0
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	47a0      	blx	r4
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}

08001dbe <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001dbe:	b590      	push	{r4, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	af02      	add	r7, sp, #8
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	4608      	mov	r0, r1
 8001dc8:	4611      	mov	r1, r2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4603      	mov	r3, r0
 8001dce:	817b      	strh	r3, [r7, #10]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	813b      	strh	r3, [r7, #8]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d075      	beq.n	8001ece <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d072      	beq.n	8001ece <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d91a      	bls.n	8001e24 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8001dee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d109      	bne.n	8001e0a <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8001df6:	897a      	ldrh	r2, [r7, #10]
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	817b      	strh	r3, [r7, #10]
	  x++;
 8001e00:	897b      	ldrh	r3, [r7, #10]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	817b      	strh	r3, [r7, #10]
 8001e08:	e00c      	b.n	8001e24 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001e0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d108      	bne.n	8001e24 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8001e12:	893a      	ldrh	r2, [r7, #8]
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	813b      	strh	r3, [r7, #8]
	  y++;
 8001e1c:	893b      	ldrh	r3, [r7, #8]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001e24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001e30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d11a      	bne.n	8001e6e <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001e3e:	893b      	ldrh	r3, [r7, #8]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d83b      	bhi.n	8001ebc <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8001e4a:	893b      	ldrh	r3, [r7, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d937      	bls.n	8001ec0 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001e5c:	1db9      	adds	r1, r7, #6
 8001e5e:	f107 000a 	add.w	r0, r7, #10
 8001e62:	f7ff ff3d 	bl	8001ce0 <u8g2_clip_intersection2>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d11a      	bne.n	8001ea2 <u8g2_DrawHVLine+0xe4>
	  return;
 8001e6c:	e02f      	b.n	8001ece <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001e74:	897b      	ldrh	r3, [r7, #10]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d824      	bhi.n	8001ec4 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001e80:	897b      	ldrh	r3, [r7, #10]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d920      	bls.n	8001ec8 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001e92:	1db9      	adds	r1, r7, #6
 8001e94:	f107 0008 	add.w	r0, r7, #8
 8001e98:	f7ff ff22 	bl	8001ce0 <u8g2_clip_intersection2>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d014      	beq.n	8001ecc <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	689c      	ldr	r4, [r3, #8]
 8001ea8:	8979      	ldrh	r1, [r7, #10]
 8001eaa:	893a      	ldrh	r2, [r7, #8]
 8001eac:	88f8      	ldrh	r0, [r7, #6]
 8001eae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	47a0      	blx	r4
 8001eba:	e008      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ebc:	bf00      	nop
 8001ebe:	e006      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ec0:	bf00      	nop
 8001ec2:	e004      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ec4:	bf00      	nop
 8001ec6:	e002      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ec8:	bf00      	nop
 8001eca:	e000      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ecc:	bf00      	nop
    }
}
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd90      	pop	{r4, r7, pc}

08001ed4 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001ed4:	b490      	push	{r4, r7}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4604      	mov	r4, r0
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	80fb      	strh	r3, [r7, #6]
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	80bb      	strh	r3, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	807b      	strh	r3, [r7, #2]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	88bb      	ldrh	r3, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d20d      	bcs.n	8001f16 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001efa:	883a      	ldrh	r2, [r7, #0]
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d901      	bls.n	8001f06 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e014      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	883b      	ldrh	r3, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d901      	bls.n	8001f12 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00e      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e00c      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001f16:	883a      	ldrh	r2, [r7, #0]
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d907      	bls.n	8001f2e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	883b      	ldrh	r3, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d901      	bls.n	8001f2a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e002      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001f2e:	2300      	movs	r3, #0
    }
  }
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc90      	pop	{r4, r7}
 8001f38:	4770      	bx	lr

08001f3a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	4608      	mov	r0, r1
 8001f44:	4611      	mov	r1, r2
 8001f46:	461a      	mov	r2, r3
 8001f48:	4603      	mov	r3, r0
 8001f4a:	817b      	strh	r3, [r7, #10]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	813b      	strh	r3, [r7, #8]
 8001f50:	4613      	mov	r3, r2
 8001f52:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8001f60:	8b3b      	ldrh	r3, [r7, #24]
 8001f62:	893a      	ldrh	r2, [r7, #8]
 8001f64:	f7ff ffb6 	bl	8001ed4 <u8g2_is_intersection_decision_tree>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <u8g2_IsIntersection+0x38>
    return 0; 
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e00a      	b.n	8001f88 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	897a      	ldrh	r2, [r7, #10]
 8001f82:	f7ff ffa7 	bl	8001ed4 <u8g2_is_intersection_decision_tree>
 8001f86:	4603      	mov	r3, r0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	817b      	strh	r3, [r7, #10]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	813b      	strh	r3, [r7, #8]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001faa:	893b      	ldrh	r3, [r7, #8]
 8001fac:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001fae:	7efb      	ldrb	r3, [r7, #27]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001fba:	7e3a      	ldrb	r2, [r7, #24]
 8001fbc:	7efb      	ldrb	r3, [r7, #27]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d801      	bhi.n	8001fda <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001fd6:	7e3b      	ldrb	r3, [r7, #24]
 8001fd8:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d001      	beq.n	8001fe8 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001fe4:	7e3b      	ldrb	r3, [r7, #24]
 8001fe6:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001fe8:	893b      	ldrh	r3, [r7, #8]
 8001fea:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001fec:	8afb      	ldrh	r3, [r7, #22]
 8001fee:	f023 0307 	bic.w	r3, r3, #7
 8001ff2:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	7c1b      	ldrb	r3, [r3, #16]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	8afa      	ldrh	r2, [r7, #22]
 8001ffe:	fb12 f303 	smulbb	r3, r2, r3
 8002002:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002008:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800200a:	8afb      	ldrh	r3, [r7, #22]
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	4413      	add	r3, r2
 8002010:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002012:	897b      	ldrh	r3, [r7, #10]
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	4413      	add	r3, r2
 8002018:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800201a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	d117      	bne.n	8002052 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	7ebb      	ldrb	r3, [r7, #26]
 8002028:	4313      	orrs	r3, r2
 800202a:	b2da      	uxtb	r2, r3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	7e7b      	ldrb	r3, [r7, #25]
 8002036:	4053      	eors	r3, r2
 8002038:	b2da      	uxtb	r2, r3
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	701a      	strb	r2, [r3, #0]
	ptr++;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
	len--;
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	3b01      	subs	r3, #1
 8002048:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e8      	bne.n	8002022 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002050:	e038      	b.n	80020c4 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	7ebb      	ldrb	r3, [r7, #26]
 8002058:	4313      	orrs	r3, r2
 800205a:	b2da      	uxtb	r2, r3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	781a      	ldrb	r2, [r3, #0]
 8002064:	7e7b      	ldrb	r3, [r7, #25]
 8002066:	4053      	eors	r3, r2
 8002068:	b2da      	uxtb	r2, r3
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800206e:	7efb      	ldrb	r3, [r7, #27]
 8002070:	3301      	adds	r3, #1
 8002072:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002074:	7efb      	ldrb	r3, [r7, #27]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	76fb      	strb	r3, [r7, #27]
      len--;
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	3b01      	subs	r3, #1
 8002080:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002082:	7efb      	ldrb	r3, [r7, #27]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d114      	bne.n	80020b2 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800208c:	461a      	mov	r2, r3
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	4413      	add	r3, r2
 8002092:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800209a:	2b01      	cmp	r3, #1
 800209c:	d801      	bhi.n	80020a2 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800209e:	2301      	movs	r3, #1
 80020a0:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d008      	beq.n	80020be <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	767b      	strb	r3, [r7, #25]
 80020b0:	e005      	b.n	80020be <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80020b2:	7ebb      	ldrb	r3, [r7, #26]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80020b8:	7e7b      	ldrb	r3, [r7, #25]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1c6      	bne.n	8002052 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80020c4:	bf00      	nop
 80020c6:	3724      	adds	r7, #36	; 0x24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	4613      	mov	r3, r2
 800211c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	79fa      	ldrb	r2, [r7, #7]
 8002134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f7ff ffa9 	bl	80020d0 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff fd84 	bl	8001c8c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021a8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80021aa:	89fb      	ldrh	r3, [r7, #14]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	89fa      	ldrh	r2, [r7, #14]
 80021b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	7c1b      	ldrb	r3, [r3, #16]
 80021ba:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80021bc:	89fb      	ldrh	r3, [r7, #14]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	89fa      	ldrh	r2, [r7, #14]
 80021c6:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021ce:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80021d0:	89fb      	ldrh	r3, [r7, #14]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	89fa      	ldrh	r2, [r7, #14]
 80021da:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021e2:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80021e4:	89fb      	ldrh	r3, [r7, #14]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80021ec:	4413      	add	r3, r2
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	7c52      	ldrb	r2, [r2, #17]
 80021f2:	4293      	cmp	r3, r2
 80021f4:	dd08      	ble.n	8002208 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	7c5b      	ldrb	r3, [r3, #17]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002202:	b29b      	uxth	r3, r3
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002208:	89fb      	ldrh	r3, [r7, #14]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800222a:	89fb      	ldrh	r3, [r7, #14]
 800222c:	4413      	add	r3, r2
 800222e:	b29a      	uxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	8a9a      	ldrh	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	8ada      	ldrh	r2, [r3, #22]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af02      	add	r7, sp, #8
 800225c:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	4603      	mov	r3, r0
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff fe5d 	bl	8001f3a <u8g2_IsIntersection>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d104      	bne.n	8002290 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800228e:	e03b      	b.n	8002308 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d205      	bcs.n	80022b4 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d905      	bls.n	80022d0 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80022dc:	429a      	cmp	r2, r3
 80022de:	d205      	bcs.n	80022ec <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d905      	bls.n	8002308 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff3b 	bl	8002194 <u8g2_update_dimension_common>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ff7b 	bl	8002256 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	4603      	mov	r3, r0
 8002378:	817b      	strh	r3, [r7, #10]
 800237a:	460b      	mov	r3, r1
 800237c:	813b      	strh	r3, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002382:	88f8      	ldrh	r0, [r7, #6]
 8002384:	893a      	ldrh	r2, [r7, #8]
 8002386:	8979      	ldrh	r1, [r7, #10]
 8002388:	7e3b      	ldrb	r3, [r7, #24]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	4603      	mov	r3, r0
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff fcf4 	bl	8001d7c <u8g2_draw_hv_line_2dir>
}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <u8x8_ascii_next+0x18>
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	2b0a      	cmp	r3, #10
 80023ce:	d102      	bne.n	80023d6 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80023d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d4:	e001      	b.n	80023da <u8x8_ascii_next+0x22>
  return b;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	b29b      	uxth	r3, r3
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80023e6:	b590      	push	{r4, r7, lr}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	460b      	mov	r3, r1
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	691c      	ldr	r4, [r3, #16]
 80023f8:	7afa      	ldrb	r2, [r7, #11]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2117      	movs	r1, #23
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	47a0      	blx	r4
 8002402:	4603      	mov	r3, r0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}

0800240c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002418:	1cfb      	adds	r3, r7, #3
 800241a:	461a      	mov	r2, r3
 800241c:	2101      	movs	r1, #1
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ffe1 	bl	80023e6 <u8x8_byte_SendBytes>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800242e:	b590      	push	{r4, r7, lr}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691c      	ldr	r4, [r3, #16]
 800243a:	2300      	movs	r3, #0
 800243c:	2200      	movs	r2, #0
 800243e:	2118      	movs	r1, #24
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	47a0      	blx	r4
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bd90      	pop	{r4, r7, pc}

0800244e <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800244e:	b590      	push	{r4, r7, lr}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691c      	ldr	r4, [r3, #16]
 800245a:	2300      	movs	r3, #0
 800245c:	2200      	movs	r2, #0
 800245e:	2119      	movs	r1, #25
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	47a0      	blx	r4
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}

0800246e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800246e:	b590      	push	{r4, r7, lr}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68dc      	ldr	r4, [r3, #12]
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	2300      	movs	r3, #0
 8002482:	2115      	movs	r1, #21
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	47a0      	blx	r4
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bd90      	pop	{r4, r7, pc}

08002492 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002492:	b590      	push	{r4, r7, lr}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68dc      	ldr	r4, [r3, #12]
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	2300      	movs	r3, #0
 80024a6:	2116      	movs	r1, #22
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	47a0      	blx	r4
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd90      	pop	{r4, r7, pc}

080024b6 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80024b6:	b590      	push	{r4, r7, lr}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	460b      	mov	r3, r1
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68dc      	ldr	r4, [r3, #12]
 80024c8:	7afa      	ldrb	r2, [r7, #11]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2117      	movs	r1, #23
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	47a0      	blx	r4
 80024d2:	4603      	mov	r3, r0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd90      	pop	{r4, r7, pc}

080024dc <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68dc      	ldr	r4, [r3, #12]
 80024e8:	2300      	movs	r3, #0
 80024ea:	2200      	movs	r2, #0
 80024ec:	2118      	movs	r1, #24
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	47a0      	blx	r4
 80024f2:	4603      	mov	r3, r0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd90      	pop	{r4, r7, pc}

080024fc <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68dc      	ldr	r4, [r3, #12]
 8002508:	2300      	movs	r3, #0
 800250a:	2200      	movs	r2, #0
 800250c:	2119      	movs	r1, #25
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	47a0      	blx	r4
 8002512:	4603      	mov	r3, r0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bd90      	pop	{r4, r7, pc}

0800251c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	73fb      	strb	r3, [r7, #15]
    data++;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2bfe      	cmp	r3, #254	; 0xfe
 8002536:	d031      	beq.n	800259c <u8x8_cad_SendSequence+0x80>
 8002538:	2bfe      	cmp	r3, #254	; 0xfe
 800253a:	dc3d      	bgt.n	80025b8 <u8x8_cad_SendSequence+0x9c>
 800253c:	2b19      	cmp	r3, #25
 800253e:	dc3b      	bgt.n	80025b8 <u8x8_cad_SendSequence+0x9c>
 8002540:	2b18      	cmp	r3, #24
 8002542:	da23      	bge.n	800258c <u8x8_cad_SendSequence+0x70>
 8002544:	2b16      	cmp	r3, #22
 8002546:	dc02      	bgt.n	800254e <u8x8_cad_SendSequence+0x32>
 8002548:	2b15      	cmp	r3, #21
 800254a:	da03      	bge.n	8002554 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800254c:	e034      	b.n	80025b8 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800254e:	2b17      	cmp	r3, #23
 8002550:	d00e      	beq.n	8002570 <u8x8_cad_SendSequence+0x54>
	return;
 8002552:	e031      	b.n	80025b8 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68dc      	ldr	r4, [r3, #12]
 800255e:	7bba      	ldrb	r2, [r7, #14]
 8002560:	7bf9      	ldrb	r1, [r7, #15]
 8002562:	2300      	movs	r3, #0
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	47a0      	blx	r4
	  data++;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	3301      	adds	r3, #1
 800256c:	603b      	str	r3, [r7, #0]
	  break;
 800256e:	e022      	b.n	80025b6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002576:	f107 030e 	add.w	r3, r7, #14
 800257a:	461a      	mov	r2, r3
 800257c:	2101      	movs	r1, #1
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ff99 	bl	80024b6 <u8x8_cad_SendData>
	  data++;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	603b      	str	r3, [r7, #0]
	  break;
 800258a:	e014      	b.n	80025b6 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68dc      	ldr	r4, [r3, #12]
 8002590:	7bf9      	ldrb	r1, [r7, #15]
 8002592:	2300      	movs	r3, #0
 8002594:	2200      	movs	r2, #0
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	47a0      	blx	r4
	  break;
 800259a:	e00c      	b.n	80025b6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80025a2:	7bbb      	ldrb	r3, [r7, #14]
 80025a4:	461a      	mov	r2, r3
 80025a6:	2129      	movs	r1, #41	; 0x29
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fa0a 	bl	80029c2 <u8x8_gpio_call>
	  data++;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	603b      	str	r3, [r7, #0]
	  break;
 80025b4:	bf00      	nop
    cmd = *data;
 80025b6:	e7b6      	b.n	8002526 <u8x8_cad_SendSequence+0xa>
	return;
 80025b8:	bf00      	nop
    }
  }
}
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}

080025c0 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	460b      	mov	r3, r1
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7ff ff2d 	bl	800242e <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80025d4:	2140      	movs	r1, #64	; 0x40
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f7ff ff18 	bl	800240c <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	691c      	ldr	r4, [r3, #16]
 80025e0:	7afa      	ldrb	r2, [r7, #11]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2117      	movs	r1, #23
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7ff ff2f 	bl	800244e <u8x8_byte_EndTransfer>
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd90      	pop	{r4, r7, pc}

080025f8 <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	72fb      	strb	r3, [r7, #11]
 8002606:	4613      	mov	r3, r2
 8002608:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	3b14      	subs	r3, #20
 800260e:	2b05      	cmp	r3, #5
 8002610:	d848      	bhi.n	80026a4 <u8x8_cad_ssd13xx_i2c+0xac>
 8002612:	a201      	add	r2, pc, #4	; (adr r2, 8002618 <u8x8_cad_ssd13xx_i2c+0x20>)
 8002614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002618:	08002681 	.word	0x08002681
 800261c:	08002631 	.word	0x08002631
 8002620:	08002631 	.word	0x08002631
 8002624:	08002651 	.word	0x08002651
 8002628:	080026a9 	.word	0x080026a9
 800262c:	080026a9 	.word	0x080026a9
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7ff fefc 	bl	800242e <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 8002636:	2100      	movs	r1, #0
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff fee7 	bl	800240c <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800263e:	7abb      	ldrb	r3, [r7, #10]
 8002640:	4619      	mov	r1, r3
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff fee2 	bl	800240c <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f7ff ff00 	bl	800244e <u8x8_byte_EndTransfer>
      break;
 800264e:	e02c      	b.n	80026aa <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002654:	e00a      	b.n	800266c <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	2118      	movs	r1, #24
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff ffb0 	bl	80025c0 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002660:	7abb      	ldrb	r3, [r7, #10]
 8002662:	3b18      	subs	r3, #24
 8002664:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3318      	adds	r3, #24
 800266a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800266c:	7abb      	ldrb	r3, [r7, #10]
 800266e:	2b18      	cmp	r3, #24
 8002670:	d8f1      	bhi.n	8002656 <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002672:	7abb      	ldrb	r3, [r7, #10]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4619      	mov	r1, r3
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff ffa1 	bl	80025c0 <u8x8_i2c_data_transfer>
      break;
 800267e:	e014      	b.n	80026aa <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002686:	2bff      	cmp	r3, #255	; 0xff
 8002688:	d103      	bne.n	8002692 <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2278      	movs	r2, #120	; 0x78
 800268e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	691c      	ldr	r4, [r3, #16]
 8002696:	7aba      	ldrb	r2, [r7, #10]
 8002698:	7af9      	ldrb	r1, [r7, #11]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	47a0      	blx	r4
 80026a0:	4603      	mov	r3, r0
 80026a2:	e003      	b.n	80026ac <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e001      	b.n	80026ac <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 80026a8:	bf00      	nop
  }
  return 1;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd90      	pop	{r4, r7, pc}

080026b4 <u8x8_d_ssd1305_generic>:
};



static uint8_t u8x8_d_ssd1305_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	72fb      	strb	r3, [r7, #11]
 80026c2:	4613      	mov	r3, r2
 80026c4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d006      	beq.n	80026da <u8x8_d_ssd1305_generic+0x26>
 80026cc:	2b0f      	cmp	r3, #15
 80026ce:	dc67      	bgt.n	80027a0 <u8x8_d_ssd1305_generic+0xec>
 80026d0:	2b0b      	cmp	r3, #11
 80026d2:	d048      	beq.n	8002766 <u8x8_d_ssd1305_generic+0xb2>
 80026d4:	2b0e      	cmp	r3, #14
 80026d6:	d053      	beq.n	8002780 <u8x8_d_ssd1305_generic+0xcc>
 80026d8:	e062      	b.n	80027a0 <u8x8_d_ssd1305_generic+0xec>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7ff fefe 	bl	80024dc <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	795b      	ldrb	r3, [r3, #5]
 80026e4:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	4413      	add	r3, r2
 80026f6:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff feb7 	bl	800246e <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f043 0310 	orr.w	r3, r3, #16
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff fead 	bl	800246e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	b2db      	uxtb	r3, r3
 800271c:	4619      	mov	r1, r3
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f7ff feb7 	bl	8002492 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	799b      	ldrb	r3, [r3, #6]
 8002728:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff feae 	bl	8002492 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	791b      	ldrb	r3, [r3, #4]
 800273a:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002742:	7dbb      	ldrb	r3, [r7, #22]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4619      	mov	r1, r3
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff feb2 	bl	80024b6 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002752:	7abb      	ldrb	r3, [r7, #10]
 8002754:	3b01      	subs	r3, #1
 8002756:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002758:	7abb      	ldrb	r3, [r7, #10]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1eb      	bne.n	8002736 <u8x8_d_ssd1305_generic+0x82>
      
      u8x8_cad_EndTransfer(u8x8);
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7ff fecc 	bl	80024fc <u8x8_cad_EndTransfer>
      break;
 8002764:	e01e      	b.n	80027a4 <u8x8_d_ssd1305_generic+0xf0>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002766:	7abb      	ldrb	r3, [r7, #10]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <u8x8_d_ssd1305_generic+0xc2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave0_seq);
 800276c:	4910      	ldr	r1, [pc, #64]	; (80027b0 <u8x8_d_ssd1305_generic+0xfc>)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff fed4 	bl	800251c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
      break;
 8002774:	e016      	b.n	80027a4 <u8x8_d_ssd1305_generic+0xf0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
 8002776:	490f      	ldr	r1, [pc, #60]	; (80027b4 <u8x8_d_ssd1305_generic+0x100>)
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff fecf 	bl	800251c <u8x8_cad_SendSequence>
      break;
 800277e:	e011      	b.n	80027a4 <u8x8_d_ssd1305_generic+0xf0>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f7ff feab 	bl	80024dc <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002786:	2181      	movs	r1, #129	; 0x81
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff fe70 	bl	800246e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1305 has range from 0 to 255 */
 800278e:	7abb      	ldrb	r3, [r7, #10]
 8002790:	4619      	mov	r1, r3
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f7ff fe7d 	bl	8002492 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff feaf 	bl	80024fc <u8x8_cad_EndTransfer>
      break;
 800279e:	e001      	b.n	80027a4 <u8x8_d_ssd1305_generic+0xf0>
#endif
    default:
      return 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e000      	b.n	80027a6 <u8x8_d_ssd1305_generic+0xf2>
  }
  return 1;
 80027a4:	2301      	movs	r3, #1
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	0800f644 	.word	0x0800f644
 80027b4:	0800f64c 	.word	0x0800f64c

080027b8 <u8x8_d_ssd1305_128x32_noname>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1305_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	72fb      	strb	r3, [r7, #11]
 80027c6:	4613      	mov	r3, r2
 80027c8:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1305_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80027ca:	7aba      	ldrb	r2, [r7, #10]
 80027cc:	7af9      	ldrb	r1, [r7, #11]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff ff6f 	bl	80026b4 <u8x8_d_ssd1305_generic>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <u8x8_d_ssd1305_128x32_noname+0x28>
    return 1;
 80027dc:	2301      	movs	r3, #1
 80027de:	e032      	b.n	8002846 <u8x8_d_ssd1305_128x32_noname+0x8e>
  
  switch(msg)
 80027e0:	7afb      	ldrb	r3, [r7, #11]
 80027e2:	2b0d      	cmp	r3, #13
 80027e4:	d006      	beq.n	80027f4 <u8x8_d_ssd1305_128x32_noname+0x3c>
 80027e6:	2b0d      	cmp	r3, #13
 80027e8:	dc2a      	bgt.n	8002840 <u8x8_d_ssd1305_128x32_noname+0x88>
 80027ea:	2b09      	cmp	r3, #9
 80027ec:	d023      	beq.n	8002836 <u8x8_d_ssd1305_128x32_noname+0x7e>
 80027ee:	2b0a      	cmp	r3, #10
 80027f0:	d019      	beq.n	8002826 <u8x8_d_ssd1305_128x32_noname+0x6e>
 80027f2:	e025      	b.n	8002840 <u8x8_d_ssd1305_128x32_noname+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80027f4:	7abb      	ldrb	r3, [r7, #10]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10a      	bne.n	8002810 <u8x8_d_ssd1305_128x32_noname+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip0_seq);
 80027fa:	4915      	ldr	r1, [pc, #84]	; (8002850 <u8x8_d_ssd1305_128x32_noname+0x98>)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f7ff fe8d 	bl	800251c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	7c9a      	ldrb	r2, [r3, #18]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800280e:	e019      	b.n	8002844 <u8x8_d_ssd1305_128x32_noname+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
 8002810:	4910      	ldr	r1, [pc, #64]	; (8002854 <u8x8_d_ssd1305_128x32_noname+0x9c>)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff fe82 	bl	800251c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	7cda      	ldrb	r2, [r3, #19]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002824:	e00e      	b.n	8002844 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f82e 	bl	8002888 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_noname_init_seq);    
 800282c:	490a      	ldr	r1, [pc, #40]	; (8002858 <u8x8_d_ssd1305_128x32_noname+0xa0>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff fe74 	bl	800251c <u8x8_cad_SendSequence>
      break;
 8002834:	e006      	b.n	8002844 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1305_128x32_noname_display_info);
 8002836:	4909      	ldr	r1, [pc, #36]	; (800285c <u8x8_d_ssd1305_128x32_noname+0xa4>)
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f811 	bl	8002860 <u8x8_d_helper_display_setup_memory>
      break;
 800283e:	e001      	b.n	8002844 <u8x8_d_ssd1305_128x32_noname+0x8c>
    default:
      return 0;
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <u8x8_d_ssd1305_128x32_noname+0x8e>
  }
  return 1;
 8002844:	2301      	movs	r3, #1
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	0800f654 	.word	0x0800f654
 8002854:	0800f660 	.word	0x0800f660
 8002858:	0800f684 	.word	0x0800f684
 800285c:	0800f66c 	.word	0x0800f66c

08002860 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	7c9a      	ldrb	r2, [r3, #18]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695c      	ldr	r4, [r3, #20]
 8002894:	2300      	movs	r3, #0
 8002896:	2200      	movs	r2, #0
 8002898:	2128      	movs	r1, #40	; 0x28
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68dc      	ldr	r4, [r3, #12]
 80028a2:	2300      	movs	r3, #0
 80028a4:	2200      	movs	r2, #0
 80028a6:	2114      	movs	r1, #20
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80028ac:	2201      	movs	r2, #1
 80028ae:	214b      	movs	r1, #75	; 0x4b
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f886 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	791b      	ldrb	r3, [r3, #4]
 80028bc:	461a      	mov	r2, r3
 80028be:	2129      	movs	r1, #41	; 0x29
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f87e 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	214b      	movs	r1, #75	; 0x4b
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f879 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	791b      	ldrb	r3, [r3, #4]
 80028d6:	461a      	mov	r2, r3
 80028d8:	2129      	movs	r1, #41	; 0x29
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f871 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80028e0:	2201      	movs	r2, #1
 80028e2:	214b      	movs	r1, #75	; 0x4b
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f86c 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	795b      	ldrb	r3, [r3, #5]
 80028f0:	461a      	mov	r2, r3
 80028f2:	2129      	movs	r1, #41	; 0x29
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f864 	bl	80029c2 <u8x8_gpio_call>
}    
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}

08002902 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002902:	b590      	push	{r4, r7, lr}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	4608      	mov	r0, r1
 800290c:	4611      	mov	r1, r2
 800290e:	461a      	mov	r2, r3
 8002910:	4603      	mov	r3, r0
 8002912:	70fb      	strb	r3, [r7, #3]
 8002914:	460b      	mov	r3, r1
 8002916:	70bb      	strb	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002920:	78bb      	ldrb	r3, [r7, #2]
 8002922:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689c      	ldr	r4, [r3, #8]
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	2201      	movs	r2, #1
 8002936:	210f      	movs	r1, #15
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	47a0      	blx	r4
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}

08002946 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002946:	b590      	push	{r4, r7, lr}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689c      	ldr	r4, [r3, #8]
 8002952:	2300      	movs	r3, #0
 8002954:	2200      	movs	r2, #0
 8002956:	2109      	movs	r1, #9
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	47a0      	blx	r4
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}

08002964 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689c      	ldr	r4, [r3, #8]
 8002970:	2300      	movs	r3, #0
 8002972:	2200      	movs	r2, #0
 8002974:	210a      	movs	r1, #10
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}

08002982 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002982:	b590      	push	{r4, r7, lr}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689c      	ldr	r4, [r3, #8]
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	2300      	movs	r3, #0
 8002996:	210b      	movs	r1, #11
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	47a0      	blx	r4
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd90      	pop	{r4, r7, pc}

080029a4 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689c      	ldr	r4, [r3, #8]
 80029b0:	2300      	movs	r3, #0
 80029b2:	2200      	movs	r2, #0
 80029b4:	2110      	movs	r1, #16
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	47a0      	blx	r4
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd90      	pop	{r4, r7, pc}

080029c2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80029c2:	b590      	push	{r4, r7, lr}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	70fb      	strb	r3, [r7, #3]
 80029ce:	4613      	mov	r3, r2
 80029d0:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695c      	ldr	r4, [r3, #20]
 80029d6:	78ba      	ldrb	r2, [r7, #2]
 80029d8:	78f9      	ldrb	r1, [r7, #3]
 80029da:	2300      	movs	r3, #0
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	47a0      	blx	r4
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd90      	pop	{r4, r7, pc}

080029e8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	72fb      	strb	r3, [r7, #11]
 80029f6:	4613      	mov	r3, r2
 80029f8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a11      	ldr	r2, [pc, #68]	; (8002a60 <u8x8_SetupDefaults+0x58>)
 8002a1a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <u8x8_SetupDefaults+0x58>)
 8002a20:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <u8x8_SetupDefaults+0x58>)
 8002a26:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a0d      	ldr	r2, [pc, #52]	; (8002a60 <u8x8_SetupDefaults+0x58>)
 8002a2c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	22ff      	movs	r2, #255	; 0xff
 8002a50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	080029e9 	.word	0x080029e9

08002a64 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff ffc8 	bl	8002a08 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7ff ff58 	bl	8002946 <u8x8_SetupMemory>
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	rotationSteps(dreal, dimag);
 8002aa4:	494a      	ldr	r1, [pc, #296]	; (8002bd0 <main+0x130>)
 8002aa6:	484b      	ldr	r0, [pc, #300]	; (8002bd4 <main+0x134>)
 8002aa8:	f000 fd5e 	bl	8003568 <rotationSteps>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aac:	f001 fabb 	bl	8004026 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ab0:	f000 f8c4 	bl	8002c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ab4:	f000 fadc 	bl	8003070 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002ab8:	f000 faaa 	bl	8003010 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8002abc:	f000 f984 	bl	8002dc8 <MX_CAN1_Init>
  MX_I2C1_Init();
 8002ac0:	f000 f9f6 	bl	8002eb0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002ac4:	f000 f91c 	bl	8002d00 <MX_ADC1_Init>
  MX_DAC1_Init();
 8002ac8:	f000 f9b6 	bl	8002e38 <MX_DAC1_Init>
  MX_TIM6_Init();
 8002acc:	f000 fa34 	bl	8002f38 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002ad0:	f000 fa68 	bl	8002fa4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim7);
 8002ad4:	4840      	ldr	r0, [pc, #256]	; (8002bd8 <main+0x138>)
 8002ad6:	f005 fb37 	bl	8008148 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 8002ada:	4840      	ldr	r0, [pc, #256]	; (8002bdc <main+0x13c>)
 8002adc:	f005 fb80 	bl	80081e0 <HAL_TIM_Base_Start_IT>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	483f      	ldr	r0, [pc, #252]	; (8002be0 <main+0x140>)
 8002ae4:	f003 f934 	bl	8005d50 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8002ae8:	2110      	movs	r1, #16
 8002aea:	483d      	ldr	r0, [pc, #244]	; (8002be0 <main+0x140>)
 8002aec:	f003 f930 	bl	8005d50 <HAL_DAC_Start>

	setOutMuxBit(DRST_BIT, GPIO_PIN_RESET);
 8002af0:	2304      	movs	r3, #4
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fbea 	bl	80032d0 <setOutMuxBit>
	delayMicro(2);
 8002afc:	2002      	movs	r0, #2
 8002afe:	f000 fb43 	bl	8003188 <delayMicro>
	setOutMuxBit(DRST_BIT, GPIO_PIN_SET);
 8002b02:	2304      	movs	r3, #4
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2101      	movs	r1, #1
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fbe1 	bl	80032d0 <setOutMuxBit>
	u8g2_Setup_ssd1305_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c,
 8002b0e:	4b35      	ldr	r3, [pc, #212]	; (8002be4 <main+0x144>)
 8002b10:	4a35      	ldr	r2, [pc, #212]	; (8002be8 <main+0x148>)
 8002b12:	4936      	ldr	r1, [pc, #216]	; (8002bec <main+0x14c>)
 8002b14:	4836      	ldr	r0, [pc, #216]	; (8002bf0 <main+0x150>)
 8002b16:	f7fe fb19 	bl	800114c <u8g2_Setup_ssd1305_i2c_128x32_noname_f>
			u8x8_gpio_and_delay);
	u8g2_InitDisplay(&u8g2);
 8002b1a:	4835      	ldr	r0, [pc, #212]	; (8002bf0 <main+0x150>)
 8002b1c:	f7ff ff22 	bl	8002964 <u8x8_InitDisplay>
	u8g2_ClearDisplay(&u8g2);
 8002b20:	4833      	ldr	r0, [pc, #204]	; (8002bf0 <main+0x150>)
 8002b22:	f7fe faee 	bl	8001102 <u8g2_ClearDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8002b26:	2100      	movs	r1, #0
 8002b28:	4831      	ldr	r0, [pc, #196]	; (8002bf0 <main+0x150>)
 8002b2a:	f7ff ff2a 	bl	8002982 <u8x8_SetPowerSave>
	setOutMuxBit(DEN_BIT, GPIO_PIN_SET);
 8002b2e:	2303      	movs	r3, #3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2101      	movs	r1, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fbcb 	bl	80032d0 <setOutMuxBit>

	setCANFilter(0x123, 0x7ff, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002b40:	f240 1023 	movw	r0, #291	; 0x123
 8002b44:	f000 fb3a 	bl	80031bc <setCANFilter>
	HAL_CAN_Start(&hcan1);
 8002b48:	482a      	ldr	r0, [pc, #168]	; (8002bf4 <main+0x154>)
 8002b4a:	f002 fb42 	bl	80051d2 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002b4e:	2102      	movs	r1, #2
 8002b50:	4828      	ldr	r0, [pc, #160]	; (8002bf4 <main+0x154>)
 8002b52:	f002 fdc1 	bl	80056d8 <HAL_CAN_ActivateNotification>
//	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);

	serialPrintln("charIOT-Key-C");
 8002b56:	4828      	ldr	r0, [pc, #160]	; (8002bf8 <main+0x158>)
 8002b58:	f000 faf8 	bl	800314c <serialPrintln>
//	}

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002b5c:	f006 fac6 	bl	80090ec <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of keysMutex */
  keysMutexHandle = osMutexNew(&keysMutex_attributes);
 8002b60:	4826      	ldr	r0, [pc, #152]	; (8002bfc <main+0x15c>)
 8002b62:	f006 fbba 	bl	80092da <osMutexNew>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <main+0x160>)
 8002b6a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	osMutexRelease(keysMutexHandle);
 8002b6c:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <main+0x160>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f006 fc83 	bl	800947c <osMutexRelease>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of msgInQ */
  msgInQHandle = osMessageQueueNew (36, sizeof(CAN_MSG_t), &msgInQ_attributes);
 8002b76:	4a23      	ldr	r2, [pc, #140]	; (8002c04 <main+0x164>)
 8002b78:	210c      	movs	r1, #12
 8002b7a:	2024      	movs	r0, #36	; 0x24
 8002b7c:	f006 fcbb 	bl	80094f6 <osMessageQueueNew>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4a21      	ldr	r2, [pc, #132]	; (8002c08 <main+0x168>)
 8002b84:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002b86:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <main+0x16c>)
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4821      	ldr	r0, [pc, #132]	; (8002c10 <main+0x170>)
 8002b8c:	f006 faf8 	bl	8009180 <osThreadNew>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4a20      	ldr	r2, [pc, #128]	; (8002c14 <main+0x174>)
 8002b94:	6013      	str	r3, [r2, #0]

  /* creation of scanKeys */
  scanKeysHandle = osThreadNew(scanKeysTask, NULL, &scanKeys_attributes);
 8002b96:	4a20      	ldr	r2, [pc, #128]	; (8002c18 <main+0x178>)
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4820      	ldr	r0, [pc, #128]	; (8002c1c <main+0x17c>)
 8002b9c:	f006 faf0 	bl	8009180 <osThreadNew>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4a1f      	ldr	r2, [pc, #124]	; (8002c20 <main+0x180>)
 8002ba4:	6013      	str	r3, [r2, #0]

  /* creation of displayUpdate */
  displayUpdateHandle = osThreadNew(displayUpdateTask, NULL, &displayUpdate_attributes);
 8002ba6:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <main+0x184>)
 8002ba8:	2100      	movs	r1, #0
 8002baa:	481f      	ldr	r0, [pc, #124]	; (8002c28 <main+0x188>)
 8002bac:	f006 fae8 	bl	8009180 <osThreadNew>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4a1e      	ldr	r2, [pc, #120]	; (8002c2c <main+0x18c>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* creation of decodeTask */
  decodeTaskHandle = osThreadNew(decode, NULL, &decodeTask_attributes);
 8002bb6:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <main+0x190>)
 8002bb8:	2100      	movs	r1, #0
 8002bba:	481e      	ldr	r0, [pc, #120]	; (8002c34 <main+0x194>)
 8002bbc:	f006 fae0 	bl	8009180 <osThreadNew>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <main+0x198>)
 8002bc4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002bc6:	f006 fab5 	bl	8009134 <osKernelStart>
 8002bca:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200005b8 	.word	0x200005b8
 8002bd4:	20000588 	.word	0x20000588
 8002bd8:	2000040c 	.word	0x2000040c
 8002bdc:	200003c0 	.word	0x200003c0
 8002be0:	20000358 	.word	0x20000358
 8002be4:	08003359 	.word	0x08003359
 8002be8:	08003379 	.word	0x08003379
 8002bec:	0800f638 	.word	0x0800f638
 8002bf0:	200004f4 	.word	0x200004f4
 8002bf4:	20000330 	.word	0x20000330
 8002bf8:	0800f170 	.word	0x0800f170
 8002bfc:	0800f760 	.word	0x0800f760
 8002c00:	200004f0 	.word	0x200004f0
 8002c04:	0800f748 	.word	0x0800f748
 8002c08:	200004ec 	.word	0x200004ec
 8002c0c:	0800f6b8 	.word	0x0800f6b8
 8002c10:	080036e9 	.word	0x080036e9
 8002c14:	200004dc 	.word	0x200004dc
 8002c18:	0800f6dc 	.word	0x0800f6dc
 8002c1c:	080036f9 	.word	0x080036f9
 8002c20:	200004e0 	.word	0x200004e0
 8002c24:	0800f700 	.word	0x0800f700
 8002c28:	08003759 	.word	0x08003759
 8002c2c:	200004e4 	.word	0x200004e4
 8002c30:	0800f724 	.word	0x0800f724
 8002c34:	080037a1 	.word	0x080037a1
 8002c38:	200004e8 	.word	0x200004e8

08002c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b096      	sub	sp, #88	; 0x58
 8002c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c42:	f107 0314 	add.w	r3, r7, #20
 8002c46:	2244      	movs	r2, #68	; 0x44
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f009 fe60 	bl	800c910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c50:	463b      	mov	r3, r7
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
 8002c5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c62:	f004 f861 	bl	8006d28 <HAL_PWREx_ControlVoltageScaling>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002c6c:	f000 fe80 	bl	8003970 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002c70:	f004 f83c 	bl	8006cec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <SystemClock_Config+0xc0>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	4a20      	ldr	r2, [pc, #128]	; (8002cfc <SystemClock_Config+0xc0>)
 8002c7c:	f023 0318 	bic.w	r3, r3, #24
 8002c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002c84:	2314      	movs	r3, #20
 8002c86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002c94:	2360      	movs	r3, #96	; 0x60
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002ca4:	2328      	movs	r3, #40	; 0x28
 8002ca6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002ca8:	2307      	movs	r3, #7
 8002caa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002cac:	2302      	movs	r3, #2
 8002cae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f004 f88b 	bl	8006dd4 <HAL_RCC_OscConfig>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002cc4:	f000 fe54 	bl	8003970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cc8:	230f      	movs	r3, #15
 8002cca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002cdc:	463b      	mov	r3, r7
 8002cde:	2104      	movs	r1, #4
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f004 fc8b 	bl	80075fc <HAL_RCC_ClockConfig>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002cec:	f000 fe40 	bl	8003970 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002cf0:	f005 f8d0 	bl	8007e94 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002cf4:	bf00      	nop
 8002cf6:	3758      	adds	r7, #88	; 0x58
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000

08002d00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d06:	463b      	mov	r3, r7
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
 8002d14:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002d16:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d18:	4a29      	ldr	r2, [pc, #164]	; (8002dc0 <MX_ADC1_Init+0xc0>)
 8002d1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002d1c:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d22:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d2e:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d34:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d36:	2204      	movs	r2, #4
 8002d38:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d40:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d68:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d76:	4811      	ldr	r0, [pc, #68]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002d78:	f001 fb3e 	bl	80043f8 <HAL_ADC_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002d82:	f000 fdf5 	bl	8003970 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002d86:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <MX_ADC1_Init+0xc4>)
 8002d88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d8a:	2306      	movs	r3, #6
 8002d8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d92:	237f      	movs	r3, #127	; 0x7f
 8002d94:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d96:	2304      	movs	r3, #4
 8002d98:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d9e:	463b      	mov	r3, r7
 8002da0:	4619      	mov	r1, r3
 8002da2:	4806      	ldr	r0, [pc, #24]	; (8002dbc <MX_ADC1_Init+0xbc>)
 8002da4:	f001 fc70 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002dae:	f000 fddf 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002db2:	bf00      	nop
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200002cc 	.word	0x200002cc
 8002dc0:	50040000 	.word	0x50040000
 8002dc4:	14f00020 	.word	0x14f00020

08002dc8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <MX_CAN1_Init+0x68>)
 8002dce:	4a19      	ldr	r2, [pc, #100]	; (8002e34 <MX_CAN1_Init+0x6c>)
 8002dd0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <MX_CAN1_Init+0x68>)
 8002dd4:	2228      	movs	r2, #40	; 0x28
 8002dd6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <MX_CAN1_Init+0x68>)
 8002dda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dde:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <MX_CAN1_Init+0x68>)
 8002de2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002de6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <MX_CAN1_Init+0x68>)
 8002dea:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002dee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <MX_CAN1_Init+0x68>)
 8002df2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002df6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <MX_CAN1_Init+0x68>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <MX_CAN1_Init+0x68>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <MX_CAN1_Init+0x68>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <MX_CAN1_Init+0x68>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002e10:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <MX_CAN1_Init+0x68>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <MX_CAN1_Init+0x68>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002e1c:	4804      	ldr	r0, [pc, #16]	; (8002e30 <MX_CAN1_Init+0x68>)
 8002e1e:	f002 f813 	bl	8004e48 <HAL_CAN_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8002e28:	f000 fda2 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000330 	.word	0x20000330
 8002e34:	40006400 	.word	0x40006400

08002e38 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	2224      	movs	r2, #36	; 0x24
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f009 fd63 	bl	800c910 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <MX_DAC1_Init+0x70>)
 8002e4c:	4a17      	ldr	r2, [pc, #92]	; (8002eac <MX_DAC1_Init+0x74>)
 8002e4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002e50:	4815      	ldr	r0, [pc, #84]	; (8002ea8 <MX_DAC1_Init+0x70>)
 8002e52:	f002 ff5b 	bl	8005d0c <HAL_DAC_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002e5c:	f000 fd88 	bl	8003970 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002e64:	2304      	movs	r3, #4
 8002e66:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	2200      	movs	r2, #0
 8002e78:	4619      	mov	r1, r3
 8002e7a:	480b      	ldr	r0, [pc, #44]	; (8002ea8 <MX_DAC1_Init+0x70>)
 8002e7c:	f003 f83e 	bl	8005efc <HAL_DAC_ConfigChannel>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002e86:	f000 fd73 	bl	8003970 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4805      	ldr	r0, [pc, #20]	; (8002ea8 <MX_DAC1_Init+0x70>)
 8002e92:	f003 f833 	bl	8005efc <HAL_DAC_ConfigChannel>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8002e9c:	f000 fd68 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002ea0:	bf00      	nop
 8002ea2:	3728      	adds	r7, #40	; 0x28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000358 	.word	0x20000358
 8002eac:	40007400 	.word	0x40007400

08002eb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <MX_I2C1_Init+0x7c>)
 8002eb6:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <MX_I2C1_Init+0x80>)
 8002eb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F33;
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <MX_I2C1_Init+0x7c>)
 8002ebc:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <MX_I2C1_Init+0x84>)
 8002ebe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <MX_I2C1_Init+0x7c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ec6:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <MX_I2C1_Init+0x7c>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ecc:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <MX_I2C1_Init+0x7c>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ed2:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <MX_I2C1_Init+0x7c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <MX_I2C1_Init+0x7c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <MX_I2C1_Init+0x7c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ee4:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <MX_I2C1_Init+0x7c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002eea:	4810      	ldr	r0, [pc, #64]	; (8002f2c <MX_I2C1_Init+0x7c>)
 8002eec:	f003 fac4 	bl	8006478 <HAL_I2C_Init>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ef6:	f000 fd3b 	bl	8003970 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002efa:	2100      	movs	r1, #0
 8002efc:	480b      	ldr	r0, [pc, #44]	; (8002f2c <MX_I2C1_Init+0x7c>)
 8002efe:	f003 fe3d 	bl	8006b7c <HAL_I2CEx_ConfigAnalogFilter>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002f08:	f000 fd32 	bl	8003970 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4807      	ldr	r0, [pc, #28]	; (8002f2c <MX_I2C1_Init+0x7c>)
 8002f10:	f003 fe7f 	bl	8006c12 <HAL_I2CEx_ConfigDigitalFilter>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002f1a:	f000 fd29 	bl	8003970 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002f1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002f22:	f003 fec3 	bl	8006cac <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	2000036c 	.word	0x2000036c
 8002f30:	40005400 	.word	0x40005400
 8002f34:	00300f33 	.word	0x00300f33

08002f38 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002f48:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <MX_TIM6_Init+0x64>)
 8002f4a:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <MX_TIM6_Init+0x68>)
 8002f4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002f4e:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <MX_TIM6_Init+0x64>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <MX_TIM6_Init+0x64>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3636-1;
 8002f5a:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <MX_TIM6_Init+0x64>)
 8002f5c:	f640 6233 	movw	r2, #3635	; 0xe33
 8002f60:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f62:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <MX_TIM6_Init+0x64>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f68:	480c      	ldr	r0, [pc, #48]	; (8002f9c <MX_TIM6_Init+0x64>)
 8002f6a:	f005 f895 	bl	8008098 <HAL_TIM_Base_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002f74:	f000 fcfc 	bl	8003970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	4619      	mov	r1, r3
 8002f84:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_TIM6_Init+0x64>)
 8002f86:	f005 fb2b 	bl	80085e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002f90:	f000 fcee 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	200003c0 	.word	0x200003c0
 8002fa0:	40001000 	.word	0x40001000

08002fa4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002faa:	1d3b      	adds	r3, r7, #4
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002fb4:	4b14      	ldr	r3, [pc, #80]	; (8003008 <MX_TIM7_Init+0x64>)
 8002fb6:	4a15      	ldr	r2, [pc, #84]	; (800300c <MX_TIM7_Init+0x68>)
 8002fb8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80-1;
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <MX_TIM7_Init+0x64>)
 8002fbc:	224f      	movs	r2, #79	; 0x4f
 8002fbe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <MX_TIM7_Init+0x64>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <MX_TIM7_Init+0x64>)
 8002fc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fcc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <MX_TIM7_Init+0x64>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002fd4:	480c      	ldr	r0, [pc, #48]	; (8003008 <MX_TIM7_Init+0x64>)
 8002fd6:	f005 f85f 	bl	8008098 <HAL_TIM_Base_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002fe0:	f000 fcc6 	bl	8003970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4805      	ldr	r0, [pc, #20]	; (8003008 <MX_TIM7_Init+0x64>)
 8002ff2:	f005 faf5 	bl	80085e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002ffc:	f000 fcb8 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	2000040c 	.word	0x2000040c
 800300c:	40001400 	.word	0x40001400

08003010 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003014:	4b14      	ldr	r3, [pc, #80]	; (8003068 <MX_USART2_UART_Init+0x58>)
 8003016:	4a15      	ldr	r2, [pc, #84]	; (800306c <MX_USART2_UART_Init+0x5c>)
 8003018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800301a:	4b13      	ldr	r3, [pc, #76]	; (8003068 <MX_USART2_UART_Init+0x58>)
 800301c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003022:	4b11      	ldr	r3, [pc, #68]	; (8003068 <MX_USART2_UART_Init+0x58>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003028:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <MX_USART2_UART_Init+0x58>)
 800302a:	2200      	movs	r2, #0
 800302c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <MX_USART2_UART_Init+0x58>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <MX_USART2_UART_Init+0x58>)
 8003036:	220c      	movs	r2, #12
 8003038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <MX_USART2_UART_Init+0x58>)
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <MX_USART2_UART_Init+0x58>)
 8003042:	2200      	movs	r2, #0
 8003044:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <MX_USART2_UART_Init+0x58>)
 8003048:	2200      	movs	r2, #0
 800304a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <MX_USART2_UART_Init+0x58>)
 800304e:	2200      	movs	r2, #0
 8003050:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003052:	4805      	ldr	r0, [pc, #20]	; (8003068 <MX_USART2_UART_Init+0x58>)
 8003054:	f005 fb48 	bl	80086e8 <HAL_UART_Init>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800305e:	f000 fc87 	bl	8003970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000458 	.word	0x20000458
 800306c:	40004400 	.word	0x40004400

08003070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	60da      	str	r2, [r3, #12]
 8003084:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003086:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <MX_GPIO_Init+0xd4>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308a:	4a2e      	ldr	r2, [pc, #184]	; (8003144 <MX_GPIO_Init+0xd4>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003092:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <MX_GPIO_Init+0xd4>)
 8003094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800309e:	4b29      	ldr	r3, [pc, #164]	; (8003144 <MX_GPIO_Init+0xd4>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a2:	4a28      	ldr	r2, [pc, #160]	; (8003144 <MX_GPIO_Init+0xd4>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030aa:	4b26      	ldr	r3, [pc, #152]	; (8003144 <MX_GPIO_Init+0xd4>)
 80030ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	4b23      	ldr	r3, [pc, #140]	; (8003144 <MX_GPIO_Init+0xd4>)
 80030b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ba:	4a22      	ldr	r2, [pc, #136]	; (8003144 <MX_GPIO_Init+0xd4>)
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <MX_GPIO_Init+0xd4>)
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2140      	movs	r1, #64	; 0x40
 80030d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d6:	f003 f9b7 	bl	8006448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RA0_Pin|RA1_Pin|LED_BUILTIN_Pin|RA2_Pin
 80030da:	2200      	movs	r2, #0
 80030dc:	213b      	movs	r1, #59	; 0x3b
 80030de:	481a      	ldr	r0, [pc, #104]	; (8003148 <MX_GPIO_Init+0xd8>)
 80030e0:	f003 f9b2 	bl	8006448 <HAL_GPIO_WritePin>
                          |OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C0_Pin C2_Pin C1_Pin C3_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C2_Pin|C1_Pin|C3_Pin;
 80030e4:	f44f 7362 	mov.w	r3, #904	; 0x388
 80030e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f2:	f107 030c 	add.w	r3, r7, #12
 80030f6:	4619      	mov	r1, r3
 80030f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030fc:	f003 f822 	bl	8006144 <HAL_GPIO_Init>

  /*Configure GPIO pin : REN_Pin */
  GPIO_InitStruct.Pin = REN_Pin;
 8003100:	2340      	movs	r3, #64	; 0x40
 8003102:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003104:	2301      	movs	r3, #1
 8003106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310c:	2300      	movs	r3, #0
 800310e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(REN_GPIO_Port, &GPIO_InitStruct);
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	4619      	mov	r1, r3
 8003116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800311a:	f003 f813 	bl	8006144 <HAL_GPIO_Init>

  /*Configure GPIO pins : RA0_Pin RA1_Pin LED_BUILTIN_Pin RA2_Pin
                           OUT_Pin */
  GPIO_InitStruct.Pin = RA0_Pin|RA1_Pin|LED_BUILTIN_Pin|RA2_Pin
 800311e:	233b      	movs	r3, #59	; 0x3b
 8003120:	60fb      	str	r3, [r7, #12]
                          |OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003122:	2301      	movs	r3, #1
 8003124:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	2300      	movs	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	4619      	mov	r1, r3
 8003134:	4804      	ldr	r0, [pc, #16]	; (8003148 <MX_GPIO_Init+0xd8>)
 8003136:	f003 f805 	bl	8006144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800313a:	bf00      	nop
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
 8003148:	48000400 	.word	0x48000400

0800314c <serialPrintln>:

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);

}

void serialPrintln(char val[]) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7fd f83b 	bl	80001d0 <strlen>
 800315a:	4603      	mov	r3, r0
 800315c:	b29a      	uxth	r2, r3
 800315e:	230a      	movs	r3, #10
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4808      	ldr	r0, [pc, #32]	; (8003184 <serialPrintln+0x38>)
 8003164:	f005 fb0e 	bl	8008784 <HAL_UART_Transmit>
	char rn[2] = "\r\n";
 8003168:	f640 230d 	movw	r3, #2573	; 0xa0d
 800316c:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) rn, 2, 10);
 800316e:	f107 010c 	add.w	r1, r7, #12
 8003172:	230a      	movs	r3, #10
 8003174:	2202      	movs	r2, #2
 8003176:	4803      	ldr	r0, [pc, #12]	; (8003184 <serialPrintln+0x38>)
 8003178:	f005 fb04 	bl	8008784 <HAL_UART_Transmit>

}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000458 	.word	0x20000458

08003188 <delayMicro>:

void delayMicro(uint16_t us) {
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	80fb      	strh	r3, [r7, #6]

	htim7.Instance->CNT = 0;
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <delayMicro+0x30>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2200      	movs	r2, #0
 8003198:	625a      	str	r2, [r3, #36]	; 0x24
	while (htim7.Instance->CNT < us)
 800319a:	bf00      	nop
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <delayMicro+0x30>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d3f9      	bcc.n	800319c <delayMicro+0x14>
		;

}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	2000040c 	.word	0x2000040c

080031bc <setCANFilter>:

uint32_t setCANFilter(uint32_t filterID, uint32_t maskID, uint32_t filterBank) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08e      	sub	sp, #56	; 0x38
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]

	CAN_FilterTypeDef filterInfo = { 0 };
 80031c8:	f107 0310 	add.w	r3, r7, #16
 80031cc:	2228      	movs	r2, #40	; 0x28
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f009 fb9d 	bl	800c910 <memset>

	filterInfo.FilterIdHigh = (filterID << 5) & 0xffe0;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	015b      	lsls	r3, r3, #5
 80031da:	b29b      	uxth	r3, r3
 80031dc:	613b      	str	r3, [r7, #16]
	filterInfo.FilterIdLow = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
	filterInfo.FilterMaskIdHigh = (maskID << 5) & 0xffe0;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	015b      	lsls	r3, r3, #5
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	61bb      	str	r3, [r7, #24]
	filterInfo.FilterMaskIdLow = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
	filterInfo.FilterFIFOAssignment = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	623b      	str	r3, [r7, #32]
	filterInfo.FilterBank = filterBank & 0xf;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
	filterInfo.FilterMode = CAN_FILTERMODE_IDMASK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
	filterInfo.FilterScale = CAN_FILTERSCALE_32BIT;
 80031fe:	2301      	movs	r3, #1
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterInfo.FilterActivation = CAN_FILTER_ENABLE;
 8003202:	2301      	movs	r3, #1
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
	filterInfo.SlaveStartFilterBank = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	637b      	str	r3, [r7, #52]	; 0x34

	return (uint32_t) HAL_CAN_ConfigFilter(&hcan1, &filterInfo);
 800320a:	f107 0310 	add.w	r3, r7, #16
 800320e:	4619      	mov	r1, r3
 8003210:	4803      	ldr	r0, [pc, #12]	; (8003220 <setCANFilter+0x64>)
 8003212:	f001 ff14 	bl	800503e <HAL_CAN_ConfigFilter>
 8003216:	4603      	mov	r3, r0

}
 8003218:	4618      	mov	r0, r3
 800321a:	3738      	adds	r7, #56	; 0x38
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20000330 	.word	0x20000330

08003224 <CAN_TX>:

uint32_t CAN_TX(uint32_t ID, uint8_t data[8]) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]

	serialPrintln("TX start");
 800322e:	4816      	ldr	r0, [pc, #88]	; (8003288 <CAN_TX+0x64>)
 8003230:	f7ff ff8c 	bl	800314c <serialPrintln>

	CAN_TxHeaderTypeDef txHeader = { 0 };
 8003234:	f107 0308 	add.w	r3, r7, #8
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
 8003244:	615a      	str	r2, [r3, #20]

	txHeader.StdId = ID & 0x7ff;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800324c:	60bb      	str	r3, [r7, #8]
	txHeader.ExtId = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
	txHeader.IDE = CAN_ID_STD;
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
	txHeader.RTR = CAN_RTR_DATA;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
	txHeader.DLC = 8;
 800325a:	2308      	movs	r3, #8
 800325c:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 800325e:	2300      	movs	r3, #0
 8003260:	773b      	strb	r3, [r7, #28]

	while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1))
 8003262:	bf00      	nop
 8003264:	4809      	ldr	r0, [pc, #36]	; (800328c <CAN_TX+0x68>)
 8003266:	f002 f8c8 	bl	80053fa <HAL_CAN_GetTxMailboxesFreeLevel>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f9      	beq.n	8003264 <CAN_TX+0x40>
		;

	return (uint32_t) HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, NULL);
 8003270:	f107 0108 	add.w	r1, r7, #8
 8003274:	2300      	movs	r3, #0
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	4804      	ldr	r0, [pc, #16]	; (800328c <CAN_TX+0x68>)
 800327a:	f001 ffee 	bl	800525a <HAL_CAN_AddTxMessage>
 800327e:	4603      	mov	r3, r0

}
 8003280:	4618      	mov	r0, r3
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	0800f180 	.word	0x0800f180
 800328c:	20000330 	.word	0x20000330

08003290 <CAN_RX>:

	return HAL_CAN_GetRxFifoFillLevel(&hcan1, 0);

}

uint32_t CAN_RX(uint32_t *ID, uint8_t data[8]) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	; 0x28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef rxHeader;

	while (!HAL_CAN_GetRxFifoFillLevel(&hcan1, 0))
 800329a:	bf00      	nop
 800329c:	2100      	movs	r1, #0
 800329e:	480b      	ldr	r0, [pc, #44]	; (80032cc <CAN_RX+0x3c>)
 80032a0:	f002 f9f2 	bl	8005688 <HAL_CAN_GetRxFifoFillLevel>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f8      	beq.n	800329c <CAN_RX+0xc>
		;

	uint32_t result = (uint32_t) HAL_CAN_GetRxMessage(&hcan1, 0, &rxHeader,
 80032aa:	f107 0208 	add.w	r2, r7, #8
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2100      	movs	r1, #0
 80032b2:	4806      	ldr	r0, [pc, #24]	; (80032cc <CAN_RX+0x3c>)
 80032b4:	f002 f8d6 	bl	8005464 <HAL_CAN_GetRxMessage>
 80032b8:	4603      	mov	r3, r0
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
			data);

	*ID = rxHeader.StdId;
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]

	return result;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3728      	adds	r7, #40	; 0x28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000330 	.word	0x20000330

080032d0 <setOutMuxBit>:

void setOutMuxBit(const uint8_t bitIdx, const bool value) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	460a      	mov	r2, r1
 80032da:	71fb      	strb	r3, [r7, #7]
 80032dc:	4613      	mov	r3, r2
 80032de:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80032e0:	2200      	movs	r2, #0
 80032e2:	2140      	movs	r1, #64	; 0x40
 80032e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032e8:	f003 f8ae 	bl	8006448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, bitIdx & 0x01);
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	2101      	movs	r1, #1
 80032f8:	4816      	ldr	r0, [pc, #88]	; (8003354 <setOutMuxBit+0x84>)
 80032fa:	f003 f8a5 	bl	8006448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, bitIdx & 0x02);
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	2102      	movs	r1, #2
 800330a:	4812      	ldr	r0, [pc, #72]	; (8003354 <setOutMuxBit+0x84>)
 800330c:	f003 f89c 	bl	8006448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, bitIdx & 0x04);
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	2110      	movs	r1, #16
 800331c:	480d      	ldr	r0, [pc, #52]	; (8003354 <setOutMuxBit+0x84>)
 800331e:	f003 f893 	bl	8006448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, value);
 8003322:	79bb      	ldrb	r3, [r7, #6]
 8003324:	461a      	mov	r2, r3
 8003326:	2120      	movs	r1, #32
 8003328:	480a      	ldr	r0, [pc, #40]	; (8003354 <setOutMuxBit+0x84>)
 800332a:	f003 f88d 	bl	8006448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 800332e:	2201      	movs	r2, #1
 8003330:	2140      	movs	r1, #64	; 0x40
 8003332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003336:	f003 f887 	bl	8006448 <HAL_GPIO_WritePin>
	delayMicro(2);
 800333a:	2002      	movs	r0, #2
 800333c:	f7ff ff24 	bl	8003188 <delayMicro>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003340:	2200      	movs	r2, #0
 8003342:	2140      	movs	r1, #64	; 0x40
 8003344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003348:	f003 f87e 	bl	8006448 <HAL_GPIO_WritePin>

}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	48000400 	.word	0x48000400

08003358 <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	72fb      	strb	r3, [r7, #11]
 8003366:	4613      	mov	r3, r2
 8003368:	72bb      	strb	r3, [r7, #10]

	return 1;
 800336a:	2301      	movs	r3, #1

}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	460b      	mov	r3, r1
 8003384:	72fb      	strb	r3, [r7, #11]
 8003386:	4613      	mov	r3, r2
 8003388:	72bb      	strb	r3, [r7, #10]

	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch (msg) {
 800338a:	7afb      	ldrb	r3, [r7, #11]
 800338c:	3b14      	subs	r3, #20
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d847      	bhi.n	8003422 <u8x8_byte_i2c+0xaa>
 8003392:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <u8x8_byte_i2c+0x20>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	08003427 	.word	0x08003427
 800339c:	08003423 	.word	0x08003423
 80033a0:	08003423 	.word	0x08003423
 80033a4:	080033cd 	.word	0x080033cd
 80033a8:	080033fd 	.word	0x080033fd
 80033ac:	08003405 	.word	0x08003405
 80033b0:	08003423 	.word	0x08003423
 80033b4:	08003423 	.word	0x08003423
 80033b8:	08003423 	.word	0x08003423
 80033bc:	08003423 	.word	0x08003423
 80033c0:	08003423 	.word	0x08003423
 80033c4:	08003423 	.word	0x08003423
 80033c8:	08003427 	.word	0x08003427
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	617b      	str	r3, [r7, #20]
		while (arg_int > 0) {
 80033d0:	e010      	b.n	80033f4 <u8x8_byte_i2c+0x7c>
			buffer[buf_idx++] = *data;
 80033d2:	4b18      	ldr	r3, [pc, #96]	; (8003434 <u8x8_byte_i2c+0xbc>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	b2d1      	uxtb	r1, r2
 80033da:	4a16      	ldr	r2, [pc, #88]	; (8003434 <u8x8_byte_i2c+0xbc>)
 80033dc:	7011      	strb	r1, [r2, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	7819      	ldrb	r1, [r3, #0]
 80033e4:	4b14      	ldr	r3, [pc, #80]	; (8003438 <u8x8_byte_i2c+0xc0>)
 80033e6:	5499      	strb	r1, [r3, r2]
			data++;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	3301      	adds	r3, #1
 80033ec:	617b      	str	r3, [r7, #20]
			arg_int--;
 80033ee:	7abb      	ldrb	r3, [r7, #10]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0) {
 80033f4:	7abb      	ldrb	r3, [r7, #10]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1eb      	bne.n	80033d2 <u8x8_byte_i2c+0x5a>
		}
		break;
 80033fa:	e015      	b.n	8003428 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 80033fc:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <u8x8_byte_i2c+0xbc>)
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
		break;
 8003402:	e011      	b.n	8003428 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8),
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800340a:	b299      	uxth	r1, r3
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <u8x8_byte_i2c+0xbc>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	f04f 32ff 	mov.w	r2, #4294967295
 8003416:	9200      	str	r2, [sp, #0]
 8003418:	4a07      	ldr	r2, [pc, #28]	; (8003438 <u8x8_byte_i2c+0xc0>)
 800341a:	4808      	ldr	r0, [pc, #32]	; (800343c <u8x8_byte_i2c+0xc4>)
 800341c:	f003 f8bc 	bl	8006598 <HAL_I2C_Master_Transmit>
				(uint8_t*) buffer, buf_idx, HAL_MAX_DELAY);
		break;
 8003420:	e002      	b.n	8003428 <u8x8_byte_i2c+0xb0>
	default:
		return 0;
 8003422:	2300      	movs	r3, #0
 8003424:	e001      	b.n	800342a <u8x8_byte_i2c+0xb2>
		break;
 8003426:	bf00      	nop
	}

	return 1;
 8003428:	2301      	movs	r3, #1

}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	200005e8 	.word	0x200005e8
 8003438:	200005ec 	.word	0x200005ec
 800343c:	2000036c 	.word	0x2000036c

08003440 <setRow>:

void setRow(uint8_t rowIdx) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 800344a:	2200      	movs	r2, #0
 800344c:	2140      	movs	r1, #64	; 0x40
 800344e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003452:	f002 fff9 	bl	8006448 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, rowIdx & 0x01);
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	2101      	movs	r1, #1
 8003462:	480f      	ldr	r0, [pc, #60]	; (80034a0 <setRow+0x60>)
 8003464:	f002 fff0 	bl	8006448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, rowIdx & 0x02);
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	2102      	movs	r1, #2
 8003474:	480a      	ldr	r0, [pc, #40]	; (80034a0 <setRow+0x60>)
 8003476:	f002 ffe7 	bl	8006448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, rowIdx & 0x04);
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	2110      	movs	r1, #16
 8003486:	4806      	ldr	r0, [pc, #24]	; (80034a0 <setRow+0x60>)
 8003488:	f002 ffde 	bl	8006448 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 800348c:	2201      	movs	r2, #1
 800348e:	2140      	movs	r1, #64	; 0x40
 8003490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003494:	f002 ffd8 	bl	8006448 <HAL_GPIO_WritePin>

}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	48000400 	.word	0x48000400

080034a4 <readCols>:

uint8_t readCols() {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0

	uint8_t C0_val = HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin);
 80034aa:	2108      	movs	r1, #8
 80034ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034b0:	f002 ffb2 	bl	8006418 <HAL_GPIO_ReadPin>
 80034b4:	4603      	mov	r3, r0
 80034b6:	71fb      	strb	r3, [r7, #7]
	uint8_t C1_val = HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin);
 80034b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c0:	f002 ffaa 	bl	8006418 <HAL_GPIO_ReadPin>
 80034c4:	4603      	mov	r3, r0
 80034c6:	71bb      	strb	r3, [r7, #6]
	uint8_t C2_val = HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin);
 80034c8:	2180      	movs	r1, #128	; 0x80
 80034ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ce:	f002 ffa3 	bl	8006418 <HAL_GPIO_ReadPin>
 80034d2:	4603      	mov	r3, r0
 80034d4:	717b      	strb	r3, [r7, #5]
	uint8_t C3_val = HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin);
 80034d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034de:	f002 ff9b 	bl	8006418 <HAL_GPIO_ReadPin>
 80034e2:	4603      	mov	r3, r0
 80034e4:	713b      	strb	r3, [r7, #4]

	return (C3_val << 3) | (C2_val << 2) | (C1_val << 1) | C0_val;
 80034e6:	793b      	ldrb	r3, [r7, #4]
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	b25a      	sxtb	r2, r3
 80034ec:	797b      	ldrb	r3, [r7, #5]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	4313      	orrs	r3, r2
 80034f4:	b25a      	sxtb	r2, r3
 80034f6:	79bb      	ldrb	r3, [r7, #6]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	b25b      	sxtb	r3, r3
 80034fc:	4313      	orrs	r3, r2
 80034fe:	b25a      	sxtb	r2, r3
 8003500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003504:	4313      	orrs	r3, r2
 8003506:	b25b      	sxtb	r3, r3
 8003508:	b2db      	uxtb	r3, r3

}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <readKeys>:

uint16_t readKeys() {
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0

	uint16_t keysRead = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	80fb      	strh	r3, [r7, #6]

	for (int i = 0; i <= 2; i++) {
 800351c:	2300      	movs	r3, #0
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	e018      	b.n	8003554 <readKeys+0x42>

		setRow(i);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff8a 	bl	8003440 <setRow>
		delayMicro(5);
 800352c:	2005      	movs	r0, #5
 800352e:	f7ff fe2b 	bl	8003188 <delayMicro>
		keysRead |= readCols() << (4 * i);
 8003532:	f7ff ffb7 	bl	80034a4 <readCols>
 8003536:	4603      	mov	r3, r0
 8003538:	461a      	mov	r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	b21a      	sxth	r2, r3
 8003544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003548:	4313      	orrs	r3, r2
 800354a:	b21b      	sxth	r3, r3
 800354c:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i <= 2; i++) {
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b02      	cmp	r3, #2
 8003558:	dde3      	ble.n	8003522 <readKeys+0x10>

	}

	return keysRead;
 800355a:	88fb      	ldrh	r3, [r7, #6]

}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	0000      	movs	r0, r0
	...

08003568 <rotationSteps>:

void rotationSteps(float *dreal, float *dimag) {
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]

	float phi;

	for (int i = 0; i < 12; i++) {
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e067      	b.n	8003648 <rotationSteps+0xe0>

		phi = 2 * M_PI * fA * pow(2, (i - 9) / 12.0) / fs;
 8003578:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <rotationSteps+0x100>)
 800357a:	4618      	mov	r0, r3
 800357c:	f7fc ffe4 	bl	8000548 <__aeabi_f2d>
 8003580:	a335      	add	r3, pc, #212	; (adr r3, 8003658 <rotationSteps+0xf0>)
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	f7fd f837 	bl	80005f8 <__aeabi_dmul>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4614      	mov	r4, r2
 8003590:	461d      	mov	r5, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3b09      	subs	r3, #9
 8003596:	4618      	mov	r0, r3
 8003598:	f7fc ffc4 	bl	8000524 <__aeabi_i2d>
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	4b32      	ldr	r3, [pc, #200]	; (800366c <rotationSteps+0x104>)
 80035a2:	f7fd f953 	bl	800084c <__aeabi_ddiv>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	ec43 2b17 	vmov	d7, r2, r3
 80035ae:	eeb0 1a47 	vmov.f32	s2, s14
 80035b2:	eef0 1a67 	vmov.f32	s3, s15
 80035b6:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8003660 <rotationSteps+0xf8>
 80035ba:	f009 ff25 	bl	800d408 <pow>
 80035be:	ec53 2b10 	vmov	r2, r3, d0
 80035c2:	4620      	mov	r0, r4
 80035c4:	4629      	mov	r1, r5
 80035c6:	f7fd f817 	bl	80005f8 <__aeabi_dmul>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4614      	mov	r4, r2
 80035d0:	461d      	mov	r5, r3
 80035d2:	4b27      	ldr	r3, [pc, #156]	; (8003670 <rotationSteps+0x108>)
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ffb7 	bl	8000548 <__aeabi_f2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4620      	mov	r0, r4
 80035e0:	4629      	mov	r1, r5
 80035e2:	f7fd f933 	bl	800084c <__aeabi_ddiv>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd fadb 	bl	8000ba8 <__aeabi_d2f>
 80035f2:	4603      	mov	r3, r0
 80035f4:	60bb      	str	r3, [r7, #8]
		dreal[i] = cos(phi);
 80035f6:	68b8      	ldr	r0, [r7, #8]
 80035f8:	f7fc ffa6 	bl	8000548 <__aeabi_f2d>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	ec43 2b10 	vmov	d0, r2, r3
 8003604:	f009 fe54 	bl	800d2b0 <cos>
 8003608:	ec51 0b10 	vmov	r0, r1, d0
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	18d4      	adds	r4, r2, r3
 8003614:	f7fd fac8 	bl	8000ba8 <__aeabi_d2f>
 8003618:	4603      	mov	r3, r0
 800361a:	6023      	str	r3, [r4, #0]
		dimag[i] = sin(phi);
 800361c:	68b8      	ldr	r0, [r7, #8]
 800361e:	f7fc ff93 	bl	8000548 <__aeabi_f2d>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	ec43 2b10 	vmov	d0, r2, r3
 800362a:	f009 fe95 	bl	800d358 <sin>
 800362e:	ec51 0b10 	vmov	r0, r1, d0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	18d4      	adds	r4, r2, r3
 800363a:	f7fd fab5 	bl	8000ba8 <__aeabi_d2f>
 800363e:	4603      	mov	r3, r0
 8003640:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 12; i++) {
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3301      	adds	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b0b      	cmp	r3, #11
 800364c:	dd94      	ble.n	8003578 <rotationSteps+0x10>

	}

}
 800364e:	bf00      	nop
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bdb0      	pop	{r4, r5, r7, pc}
 8003658:	54442d18 	.word	0x54442d18
 800365c:	401921fb 	.word	0x401921fb
 8003660:	00000000 	.word	0x00000000
 8003664:	40000000 	.word	0x40000000
 8003668:	43dc0000 	.word	0x43dc0000
 800366c:	40280000 	.word	0x40280000
 8003670:	46abe000 	.word	0x46abe000

08003674 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

	CAN_MSG_t RX;
	CAN_RX(&RX.ID, RX.Message);
 800367c:	f107 020c 	add.w	r2, r7, #12
 8003680:	f107 030c 	add.w	r3, r7, #12
 8003684:	3308      	adds	r3, #8
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fe01 	bl	8003290 <CAN_RX>
	osMessageQueuePut(msgInQHandle, &RX.Message, 0, 0);
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	f107 010c 	add.w	r1, r7, #12
 8003696:	2300      	movs	r3, #0
 8003698:	2200      	movs	r2, #0
 800369a:	f005 ff9f 	bl	80095dc <osMessageQueuePut>
//	u8g2_ClearBuffer(&u8g2);
//	u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
//	u8g2_DrawStr(&u8g2, 2, 20, (char*) RX_Message.buf);
//	u8g2_SendBuffer(&u8g2);

}
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200004ec 	.word	0x200004ec

080036ac <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80036f0:	2001      	movs	r0, #1
 80036f2:	f005 fdd7 	bl	80092a4 <osDelay>
 80036f6:	e7fb      	b.n	80036f0 <StartDefaultTask+0x8>

080036f8 <scanKeysTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_scanKeysTask */
void scanKeysTask(void *argument)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN scanKeysTask */

	const TickType_t xFrequency = 50 / portTICK_PERIOD_MS;
 8003700:	2332      	movs	r3, #50	; 0x32
 8003702:	617b      	str	r3, [r7, #20]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8003704:	f007 fc16 	bl	800af34 <xTaskGetTickCount>
 8003708:	4603      	mov	r3, r0
 800370a:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	6979      	ldr	r1, [r7, #20]
 8003712:	4618      	mov	r0, r3
 8003714:	f007 fa40 	bl	800ab98 <vTaskDelayUntil>

		uint16_t localKeys = readKeys();
 8003718:	f7ff fefb 	bl	8003512 <readKeys>
 800371c:	4603      	mov	r3, r0
 800371e:	827b      	strh	r3, [r7, #18]

		osMutexAcquire(keysMutexHandle, osWaitForever);
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <scanKeysTask+0x54>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f04f 31ff 	mov.w	r1, #4294967295
 8003728:	4618      	mov	r0, r3
 800372a:	f005 fe5c 	bl	80093e6 <osMutexAcquire>

		__atomic_store_n(&keys, localKeys, __ATOMIC_RELAXED);
 800372e:	4a08      	ldr	r2, [pc, #32]	; (8003750 <scanKeysTask+0x58>)
 8003730:	8a7b      	ldrh	r3, [r7, #18]
 8003732:	8013      	strh	r3, [r2, #0]

		osMutexRelease(keysMutexHandle);
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <scanKeysTask+0x54>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f005 fe9f 	bl	800947c <osMutexRelease>

		CAN_TX(0x123, TX_Message);
 800373e:	4905      	ldr	r1, [pc, #20]	; (8003754 <scanKeysTask+0x5c>)
 8003740:	f240 1023 	movw	r0, #291	; 0x123
 8003744:	f7ff fd6e 	bl	8003224 <CAN_TX>
	for (;;) {
 8003748:	e7e0      	b.n	800370c <scanKeysTask+0x14>
 800374a:	bf00      	nop
 800374c:	200004f0 	.word	0x200004f0
 8003750:	20000000 	.word	0x20000000
 8003754:	20000004 	.word	0x20000004

08003758 <displayUpdateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_displayUpdateTask */
void displayUpdateTask(void *argument)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayUpdateTask */

	const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
 8003760:	2364      	movs	r3, #100	; 0x64
 8003762:	617b      	str	r3, [r7, #20]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8003764:	f007 fbe6 	bl	800af34 <xTaskGetTickCount>
 8003768:	4603      	mov	r3, r0
 800376a:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	6979      	ldr	r1, [r7, #20]
 8003772:	4618      	mov	r0, r3
 8003774:	f007 fa10 	bl	800ab98 <vTaskDelayUntil>

		osMutexAcquire(keysMutexHandle, osWaitForever);
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <displayUpdateTask+0x40>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f04f 31ff 	mov.w	r1, #4294967295
 8003780:	4618      	mov	r0, r3
 8003782:	f005 fe30 	bl	80093e6 <osMutexAcquire>

		uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <displayUpdateTask+0x44>)
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	827b      	strh	r3, [r7, #18]

		osMutexRelease(keysMutexHandle);
 800378c:	4b02      	ldr	r3, [pc, #8]	; (8003798 <displayUpdateTask+0x40>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f005 fe73 	bl	800947c <osMutexRelease>
	for (;;) {
 8003796:	e7e9      	b.n	800376c <displayUpdateTask+0x14>
 8003798:	200004f0 	.word	0x200004f0
 800379c:	20000000 	.word	0x20000000

080037a0 <decode>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_decode */
void decode(void *argument)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

//		uint8_t RX_Message[8];

		CAN_MSG_t RX;

		osMessageQueueGet(msgInQHandle, &RX, NULL, osWaitForever);
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <decode+0x5c>)
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	f107 010c 	add.w	r1, r7, #12
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	2200      	movs	r2, #0
 80037b6:	f005 ff71 	bl	800969c <osMessageQueueGet>

		char hexID[3];

		sprintf(hexID, "%lX", RX.ID);
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	f107 0308 	add.w	r3, r7, #8
 80037c0:	490f      	ldr	r1, [pc, #60]	; (8003800 <decode+0x60>)
 80037c2:	4618      	mov	r0, r3
 80037c4:	f009 f9ba 	bl	800cb3c <siprintf>

		u8g2_ClearBuffer(&u8g2);
 80037c8:	480e      	ldr	r0, [pc, #56]	; (8003804 <decode+0x64>)
 80037ca:	f7fd fbbf 	bl	8000f4c <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
 80037ce:	490e      	ldr	r1, [pc, #56]	; (8003808 <decode+0x68>)
 80037d0:	480c      	ldr	r0, [pc, #48]	; (8003804 <decode+0x64>)
 80037d2:	f7fe fa6b 	bl	8001cac <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 2, 10, hexID);
 80037d6:	f107 0308 	add.w	r3, r7, #8
 80037da:	220a      	movs	r2, #10
 80037dc:	2102      	movs	r1, #2
 80037de:	4809      	ldr	r0, [pc, #36]	; (8003804 <decode+0x64>)
 80037e0:	f7fe f9c2 	bl	8001b68 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 2, 20, (char*) RX.Message);
 80037e4:	f107 030c 	add.w	r3, r7, #12
 80037e8:	2214      	movs	r2, #20
 80037ea:	2102      	movs	r1, #2
 80037ec:	4805      	ldr	r0, [pc, #20]	; (8003804 <decode+0x64>)
 80037ee:	f7fe f9bb 	bl	8001b68 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 80037f2:	4804      	ldr	r0, [pc, #16]	; (8003804 <decode+0x64>)
 80037f4:	f7fd fc1d 	bl	8001032 <u8g2_SendBuffer>
	for (;;) {
 80037f8:	e7d6      	b.n	80037a8 <decode+0x8>
 80037fa:	bf00      	nop
 80037fc:	200004ec 	.word	0x200004ec
 8003800:	0800f18c 	.word	0x0800f18c
 8003804:	200004f4 	.word	0x200004f4
 8003808:	0800f1a8 	.word	0x0800f1a8

0800380c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim == &htim6) {
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a4d      	ldr	r2, [pc, #308]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003818:	4293      	cmp	r3, r2
 800381a:	f040 808c 	bne.w	8003936 <HAL_TIM_PeriodElapsedCallback+0x12a>
		static float imag[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

		float real2;
		float imag2;

		float Vadd = 0;
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]

		uint16_t localKeys;

		localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 8003824:	4b4a      	ldr	r3, [pc, #296]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	837b      	strh	r3, [r7, #26]

		for (int i = 0; i < 12; i++) {
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e062      	b.n	80038f6 <HAL_TIM_PeriodElapsedCallback+0xea>

			if (!(localKeys & 1)) {
 8003830:	8b7b      	ldrh	r3, [r7, #26]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d157      	bne.n	80038ea <HAL_TIM_PeriodElapsedCallback+0xde>

				real2 = dreal[i] * real[i] - dimag[i] * imag[i];
 800383a:	4a46      	ldr	r2, [pc, #280]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	ed93 7a00 	vldr	s14, [r3]
 8003846:	4a44      	ldr	r2, [pc, #272]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	edd3 7a00 	vldr	s15, [r3]
 8003852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003856:	4a41      	ldr	r2, [pc, #260]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	edd3 6a00 	vldr	s13, [r3]
 8003862:	4a3f      	ldr	r2, [pc, #252]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003876:	edc7 7a03 	vstr	s15, [r7, #12]
				imag2 = dimag[i] * real[i] + dreal[i] * imag[i];
 800387a:	4a38      	ldr	r2, [pc, #224]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	ed93 7a00 	vldr	s14, [r3]
 8003886:	4a34      	ldr	r2, [pc, #208]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	edd3 7a00 	vldr	s15, [r3]
 8003892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003896:	4a2f      	ldr	r2, [pc, #188]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	edd3 6a00 	vldr	s13, [r3]
 80038a2:	4a2f      	ldr	r2, [pc, #188]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	edd3 7a00 	vldr	s15, [r3]
 80038ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b6:	edc7 7a02 	vstr	s15, [r7, #8]

				real[i] = real2;
 80038ba:	4a27      	ldr	r2, [pc, #156]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	601a      	str	r2, [r3, #0]
				imag[i] = imag2;
 80038c6:	4a26      	ldr	r2, [pc, #152]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	601a      	str	r2, [r3, #0]

				Vadd += real[i];
 80038d2:	4a21      	ldr	r2, [pc, #132]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	edd3 7a00 	vldr	s15, [r3]
 80038de:	ed97 7a07 	vldr	s14, [r7, #28]
 80038e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e6:	edc7 7a07 	vstr	s15, [r7, #28]

			}

			localKeys >>= 1;
 80038ea:	8b7b      	ldrh	r3, [r7, #26]
 80038ec:	085b      	lsrs	r3, r3, #1
 80038ee:	837b      	strh	r3, [r7, #26]
		for (int i = 0; i < 12; i++) {
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3301      	adds	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b0b      	cmp	r3, #11
 80038fa:	dd99      	ble.n	8003830 <HAL_TIM_PeriodElapsedCallback+0x24>

		}

		// int16_t Vout = (int16_t) 1024 * Vadd / 12.0;
		int16_t Vout = (int16_t) 2000 * Vadd;
 80038fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003900:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003964 <HAL_TIM_PeriodElapsedCallback+0x158>
 8003904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800390c:	ee17 3a90 	vmov	r3, s15
 8003910:	827b      	strh	r3, [r7, #18]

		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, Vout + 2048);
 8003912:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391a:	2200      	movs	r2, #0
 800391c:	2100      	movs	r1, #0
 800391e:	4812      	ldr	r0, [pc, #72]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003920:	f002 fabd 	bl	8005e9e <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, Vout + 2048);
 8003924:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392c:	2200      	movs	r2, #0
 800392e:	2110      	movs	r1, #16
 8003930:	480d      	ldr	r0, [pc, #52]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003932:	f002 fab4 	bl	8005e9e <HAL_DAC_SetValue>
//				GPIO_PIN_RESET);

	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a0c      	ldr	r2, [pc, #48]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x160>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_TIM_PeriodElapsedCallback+0x138>
    HAL_IncTick();
 8003940:	f000 fb8a 	bl	8004058 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003944:	bf00      	nop
 8003946:	3720      	adds	r7, #32
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	200003c0 	.word	0x200003c0
 8003950:	20000000 	.word	0x20000000
 8003954:	20000588 	.word	0x20000588
 8003958:	2000000c 	.word	0x2000000c
 800395c:	200005b8 	.word	0x200005b8
 8003960:	2000060c 	.word	0x2000060c
 8003964:	44fa0000 	.word	0x44fa0000
 8003968:	20000358 	.word	0x20000358
 800396c:	40014400 	.word	0x40014400

08003970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003974:	b672      	cpsid	i
}
 8003976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003978:	e7fe      	b.n	8003978 <Error_Handler+0x8>
	...

0800397c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003982:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <HAL_MspInit+0x4c>)
 8003984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003986:	4a10      	ldr	r2, [pc, #64]	; (80039c8 <HAL_MspInit+0x4c>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	6613      	str	r3, [r2, #96]	; 0x60
 800398e:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <HAL_MspInit+0x4c>)
 8003990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_MspInit+0x4c>)
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <HAL_MspInit+0x4c>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6593      	str	r3, [r2, #88]	; 0x58
 80039a6:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <HAL_MspInit+0x4c>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039b2:	2200      	movs	r2, #0
 80039b4:	210f      	movs	r1, #15
 80039b6:	f06f 0001 	mvn.w	r0, #1
 80039ba:	f002 f97d 	bl	8005cb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000

080039cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b09e      	sub	sp, #120	; 0x78
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039e4:	f107 0310 	add.w	r3, r7, #16
 80039e8:	2254      	movs	r2, #84	; 0x54
 80039ea:	2100      	movs	r1, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	f008 ff8f 	bl	800c910 <memset>
  if(hadc->Instance==ADC1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a25      	ldr	r2, [pc, #148]	; (8003a8c <HAL_ADC_MspInit+0xc0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d143      	bne.n	8003a84 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80039fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a00:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003a02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a06:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003a10:	2310      	movs	r3, #16
 8003a12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003a14:	2307      	movs	r3, #7
 8003a16:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a26:	f107 0310 	add.w	r3, r7, #16
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 f83c 	bl	8007aa8 <HAL_RCCEx_PeriphCLKConfig>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003a36:	f7ff ff9b 	bl	8003970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_ADC_MspInit+0xc4>)
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3e:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <HAL_ADC_MspInit+0xc4>)
 8003a40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_ADC_MspInit+0xc4>)
 8003a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <HAL_ADC_MspInit+0xc4>)
 8003a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a56:	4a0e      	ldr	r2, [pc, #56]	; (8003a90 <HAL_ADC_MspInit+0xc4>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_ADC_MspInit+0xc4>)
 8003a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = JOYY_Pin|JOYX_Pin;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003a6e:	230b      	movs	r3, #11
 8003a70:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a80:	f002 fb60 	bl	8006144 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a84:	bf00      	nop
 8003a86:	3778      	adds	r7, #120	; 0x78
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	50040000 	.word	0x50040000
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08a      	sub	sp, #40	; 0x28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a29      	ldr	r2, [pc, #164]	; (8003b58 <HAL_CAN_MspInit+0xc4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d14b      	bne.n	8003b4e <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003ab6:	4b29      	ldr	r3, [pc, #164]	; (8003b5c <HAL_CAN_MspInit+0xc8>)
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <HAL_CAN_MspInit+0xc8>)
 8003abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac2:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <HAL_CAN_MspInit+0xc8>)
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ace:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <HAL_CAN_MspInit+0xc8>)
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <HAL_CAN_MspInit+0xc8>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <HAL_CAN_MspInit+0xc8>)
 8003adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003ae6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	2302      	movs	r3, #2
 8003aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003af0:	2301      	movs	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003af4:	2301      	movs	r3, #1
 8003af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003af8:	2309      	movs	r3, #9
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	4619      	mov	r1, r3
 8003b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b06:	f002 fb1d 	bl	8006144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b10:	2302      	movs	r3, #2
 8003b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003b1c:	2309      	movs	r3, #9
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	4619      	mov	r1, r3
 8003b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b2a:	f002 fb0b 	bl	8006144 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2106      	movs	r1, #6
 8003b32:	2013      	movs	r0, #19
 8003b34:	f002 f8c0 	bl	8005cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003b38:	2013      	movs	r0, #19
 8003b3a:	f002 f8d9 	bl	8005cf0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2106      	movs	r1, #6
 8003b42:	2014      	movs	r0, #20
 8003b44:	f002 f8b8 	bl	8005cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003b48:	2014      	movs	r0, #20
 8003b4a:	f002 f8d1 	bl	8005cf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003b4e:	bf00      	nop
 8003b50:	3728      	adds	r7, #40	; 0x28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40006400 	.word	0x40006400
 8003b5c:	40021000 	.word	0x40021000

08003b60 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	; 0x28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <HAL_DAC_MspInit+0x84>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d12c      	bne.n	8003bdc <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003b82:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_DAC_MspInit+0x88>)
 8003b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b86:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_DAC_MspInit+0x88>)
 8003b88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b8e:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <HAL_DAC_MspInit+0x88>)
 8003b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <HAL_DAC_MspInit+0x88>)
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <HAL_DAC_MspInit+0x88>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <HAL_DAC_MspInit+0x88>)
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = OUTR_Pin|OUTL_Pin;
 8003bb2:	2330      	movs	r3, #48	; 0x30
 8003bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bbe:	f107 0314 	add.w	r3, r7, #20
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bc8:	f002 fabc 	bl	8006144 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2105      	movs	r1, #5
 8003bd0:	2036      	movs	r0, #54	; 0x36
 8003bd2:	f002 f871 	bl	8005cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003bd6:	2036      	movs	r0, #54	; 0x36
 8003bd8:	f002 f88a 	bl	8005cf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003bdc:	bf00      	nop
 8003bde:	3728      	adds	r7, #40	; 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40007400 	.word	0x40007400
 8003be8:	40021000 	.word	0x40021000

08003bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b09e      	sub	sp, #120	; 0x78
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c04:	f107 0310 	add.w	r3, r7, #16
 8003c08:	2254      	movs	r2, #84	; 0x54
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f008 fe7f 	bl	800c910 <memset>
  if(hi2c->Instance==I2C1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1e      	ldr	r2, [pc, #120]	; (8003c90 <HAL_I2C_MspInit+0xa4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d135      	bne.n	8003c88 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c1c:	2340      	movs	r3, #64	; 0x40
 8003c1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c20:	2300      	movs	r3, #0
 8003c22:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c24:	f107 0310 	add.w	r3, r7, #16
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f003 ff3d 	bl	8007aa8 <HAL_RCCEx_PeriphCLKConfig>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003c34:	f7ff fe9c 	bl	8003970 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c38:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <HAL_I2C_MspInit+0xa8>)
 8003c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3c:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <HAL_I2C_MspInit+0xa8>)
 8003c3e:	f043 0302 	orr.w	r3, r3, #2
 8003c42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c44:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <HAL_I2C_MspInit+0xa8>)
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c50:	23c0      	movs	r3, #192	; 0xc0
 8003c52:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c54:	2312      	movs	r3, #18
 8003c56:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c60:	2304      	movs	r3, #4
 8003c62:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c68:	4619      	mov	r1, r3
 8003c6a:	480b      	ldr	r0, [pc, #44]	; (8003c98 <HAL_I2C_MspInit+0xac>)
 8003c6c:	f002 fa6a 	bl	8006144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <HAL_I2C_MspInit+0xa8>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <HAL_I2C_MspInit+0xa8>)
 8003c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_I2C_MspInit+0xa8>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003c88:	bf00      	nop
 8003c8a:	3778      	adds	r7, #120	; 0x78
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40005400 	.word	0x40005400
 8003c94:	40021000 	.word	0x40021000
 8003c98:	48000400 	.word	0x48000400

08003c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <HAL_TIM_Base_MspInit+0x68>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d114      	bne.n	8003cd8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003cae:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <HAL_TIM_Base_MspInit+0x6c>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb2:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <HAL_TIM_Base_MspInit+0x6c>)
 8003cb4:	f043 0310 	orr.w	r3, r3, #16
 8003cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cba:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <HAL_TIM_Base_MspInit+0x6c>)
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2105      	movs	r1, #5
 8003cca:	2036      	movs	r0, #54	; 0x36
 8003ccc:	f001 fff4 	bl	8005cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003cd0:	2036      	movs	r0, #54	; 0x36
 8003cd2:	f002 f80d 	bl	8005cf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003cd6:	e010      	b.n	8003cfa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0b      	ldr	r2, [pc, #44]	; (8003d0c <HAL_TIM_Base_MspInit+0x70>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10b      	bne.n	8003cfa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ce2:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <HAL_TIM_Base_MspInit+0x6c>)
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce6:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <HAL_TIM_Base_MspInit+0x6c>)
 8003ce8:	f043 0320 	orr.w	r3, r3, #32
 8003cec:	6593      	str	r3, [r2, #88]	; 0x58
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_TIM_Base_MspInit+0x6c>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40001000 	.word	0x40001000
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40001400 	.word	0x40001400

08003d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b09e      	sub	sp, #120	; 0x78
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d28:	f107 0310 	add.w	r3, r7, #16
 8003d2c:	2254      	movs	r2, #84	; 0x54
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f008 fded 	bl	800c910 <memset>
  if(huart->Instance==USART2)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a28      	ldr	r2, [pc, #160]	; (8003ddc <HAL_UART_MspInit+0xcc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d148      	bne.n	8003dd2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d40:	2302      	movs	r3, #2
 8003d42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003d44:	2300      	movs	r3, #0
 8003d46:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d48:	f107 0310 	add.w	r3, r7, #16
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f003 feab 	bl	8007aa8 <HAL_RCCEx_PeriphCLKConfig>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003d58:	f7ff fe0a 	bl	8003970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d5c:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <HAL_UART_MspInit+0xd0>)
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <HAL_UART_MspInit+0xd0>)
 8003d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d66:	6593      	str	r3, [r2, #88]	; 0x58
 8003d68:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <HAL_UART_MspInit+0xd0>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d74:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <HAL_UART_MspInit+0xd0>)
 8003d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d78:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <HAL_UART_MspInit+0xd0>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d80:	4b17      	ldr	r3, [pc, #92]	; (8003de0 <HAL_UART_MspInit+0xd0>)
 8003d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d90:	2302      	movs	r3, #2
 8003d92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d9c:	2307      	movs	r3, #7
 8003d9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003da4:	4619      	mov	r1, r3
 8003da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003daa:	f002 f9cb 	bl	8006144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db4:	2302      	movs	r3, #2
 8003db6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dce:	f002 f9b9 	bl	8006144 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003dd2:	bf00      	nop
 8003dd4:	3778      	adds	r7, #120	; 0x78
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40004400 	.word	0x40004400
 8003de0:	40021000 	.word	0x40021000

08003de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	; 0x30
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8003df2:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <HAL_InitTick+0xc8>)
 8003df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df6:	4a2d      	ldr	r2, [pc, #180]	; (8003eac <HAL_InitTick+0xc8>)
 8003df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dfc:	6613      	str	r3, [r2, #96]	; 0x60
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <HAL_InitTick+0xc8>)
 8003e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e0a:	f107 020c 	add.w	r2, r7, #12
 8003e0e:	f107 0310 	add.w	r3, r7, #16
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f003 fdb5 	bl	8007984 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003e1a:	f003 fd9d 	bl	8007958 <HAL_RCC_GetPCLK2Freq>
 8003e1e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e22:	4a23      	ldr	r2, [pc, #140]	; (8003eb0 <HAL_InitTick+0xcc>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	0c9b      	lsrs	r3, r3, #18
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8003e2e:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <HAL_InitTick+0xd0>)
 8003e30:	4a21      	ldr	r2, [pc, #132]	; (8003eb8 <HAL_InitTick+0xd4>)
 8003e32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8003e34:	4b1f      	ldr	r3, [pc, #124]	; (8003eb4 <HAL_InitTick+0xd0>)
 8003e36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e3a:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <HAL_InitTick+0xd0>)
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8003e42:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <HAL_InitTick+0xd0>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e48:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <HAL_InitTick+0xd0>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e4e:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <HAL_InitTick+0xd0>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8003e54:	4817      	ldr	r0, [pc, #92]	; (8003eb4 <HAL_InitTick+0xd0>)
 8003e56:	f004 f91f 	bl	8008098 <HAL_TIM_Base_Init>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003e60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d11b      	bne.n	8003ea0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8003e68:	4812      	ldr	r0, [pc, #72]	; (8003eb4 <HAL_InitTick+0xd0>)
 8003e6a:	f004 f9b9 	bl	80081e0 <HAL_TIM_Base_Start_IT>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003e74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d111      	bne.n	8003ea0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003e7c:	2019      	movs	r0, #25
 8003e7e:	f001 ff37 	bl	8005cf0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b0f      	cmp	r3, #15
 8003e86:	d808      	bhi.n	8003e9a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	2019      	movs	r0, #25
 8003e8e:	f001 ff13 	bl	8005cb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e92:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <HAL_InitTick+0xd8>)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	e002      	b.n	8003ea0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003ea0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3730      	adds	r7, #48	; 0x30
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	431bde83 	.word	0x431bde83
 8003eb4:	2000063c 	.word	0x2000063c
 8003eb8:	40014400 	.word	0x40014400
 8003ebc:	20000040 	.word	0x20000040

08003ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ec4:	e7fe      	b.n	8003ec4 <NMI_Handler+0x4>

08003ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eca:	e7fe      	b.n	8003eca <HardFault_Handler+0x4>

08003ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ed0:	e7fe      	b.n	8003ed0 <MemManage_Handler+0x4>

08003ed2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ed6:	e7fe      	b.n	8003ed6 <BusFault_Handler+0x4>

08003ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003edc:	e7fe      	b.n	8003edc <UsageFault_Handler+0x4>

08003ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ef0:	4802      	ldr	r0, [pc, #8]	; (8003efc <CAN1_TX_IRQHandler+0x10>)
 8003ef2:	f001 fc17 	bl	8005724 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000330 	.word	0x20000330

08003f00 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003f04:	4802      	ldr	r0, [pc, #8]	; (8003f10 <CAN1_RX0_IRQHandler+0x10>)
 8003f06:	f001 fc0d 	bl	8005724 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000330 	.word	0x20000330

08003f14 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003f18:	4802      	ldr	r0, [pc, #8]	; (8003f24 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003f1a:	f004 f9b5 	bl	8008288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	2000063c 	.word	0x2000063c

08003f28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003f2c:	4803      	ldr	r0, [pc, #12]	; (8003f3c <TIM6_DAC_IRQHandler+0x14>)
 8003f2e:	f004 f9ab 	bl	8008288 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003f32:	4803      	ldr	r0, [pc, #12]	; (8003f40 <TIM6_DAC_IRQHandler+0x18>)
 8003f34:	f001 ff59 	bl	8005dea <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f38:	bf00      	nop
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	200003c0 	.word	0x200003c0
 8003f40:	20000358 	.word	0x20000358

08003f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f4c:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <_sbrk+0x5c>)
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <_sbrk+0x60>)
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <_sbrk+0x64>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d102      	bne.n	8003f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <_sbrk+0x64>)
 8003f62:	4a12      	ldr	r2, [pc, #72]	; (8003fac <_sbrk+0x68>)
 8003f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <_sbrk+0x64>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d207      	bcs.n	8003f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f74:	f008 fc92 	bl	800c89c <__errno>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	220c      	movs	r2, #12
 8003f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f82:	e009      	b.n	8003f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f84:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <_sbrk+0x64>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f8a:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <_sbrk+0x64>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4413      	add	r3, r2
 8003f92:	4a05      	ldr	r2, [pc, #20]	; (8003fa8 <_sbrk+0x64>)
 8003f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f96:	68fb      	ldr	r3, [r7, #12]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20010000 	.word	0x20010000
 8003fa4:	00000400 	.word	0x00000400
 8003fa8:	20000688 	.word	0x20000688
 8003fac:	200021b0 	.word	0x200021b0

08003fb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <SystemInit+0x20>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	4a05      	ldr	r2, [pc, #20]	; (8003fd0 <SystemInit+0x20>)
 8003fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003fc4:	bf00      	nop
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	e000ed00 	.word	0xe000ed00

08003fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800400c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003fd8:	f7ff ffea 	bl	8003fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fdc:	480c      	ldr	r0, [pc, #48]	; (8004010 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fde:	490d      	ldr	r1, [pc, #52]	; (8004014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fe0:	4a0d      	ldr	r2, [pc, #52]	; (8004018 <LoopForever+0xe>)
  movs r3, #0
 8003fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe4:	e002      	b.n	8003fec <LoopCopyDataInit>

08003fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fea:	3304      	adds	r3, #4

08003fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff0:	d3f9      	bcc.n	8003fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	; (800401c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ff4:	4c0a      	ldr	r4, [pc, #40]	; (8004020 <LoopForever+0x16>)
  movs r3, #0
 8003ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ff8:	e001      	b.n	8003ffe <LoopFillZerobss>

08003ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ffc:	3204      	adds	r2, #4

08003ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004000:	d3fb      	bcc.n	8003ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004002:	f008 fc51 	bl	800c8a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004006:	f7fe fd4b 	bl	8002aa0 <main>

0800400a <LoopForever>:

LoopForever:
    b LoopForever
 800400a:	e7fe      	b.n	800400a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800400c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004014:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8004018:	0800fa68 	.word	0x0800fa68
  ldr r2, =_sbss
 800401c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8004020:	200021b0 	.word	0x200021b0

08004024 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004024:	e7fe      	b.n	8004024 <ADC1_IRQHandler>

08004026 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004030:	2003      	movs	r0, #3
 8004032:	f001 fe36 	bl	8005ca2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004036:	200f      	movs	r0, #15
 8004038:	f7ff fed4 	bl	8003de4 <HAL_InitTick>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	71fb      	strb	r3, [r7, #7]
 8004046:	e001      	b.n	800404c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004048:	f7ff fc98 	bl	800397c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800404c:	79fb      	ldrb	r3, [r7, #7]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_IncTick+0x20>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	4b06      	ldr	r3, [pc, #24]	; (800407c <HAL_IncTick+0x24>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4413      	add	r3, r2
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <HAL_IncTick+0x24>)
 800406a:	6013      	str	r3, [r2, #0]
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000044 	.word	0x20000044
 800407c:	2000068c 	.word	0x2000068c

08004080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return uwTick;
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <HAL_GetTick+0x14>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	2000068c 	.word	0x2000068c

08004098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040a0:	f7ff ffee 	bl	8004080 <HAL_GetTick>
 80040a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d005      	beq.n	80040be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <HAL_Delay+0x44>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040be:	bf00      	nop
 80040c0:	f7ff ffde 	bl	8004080 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d8f7      	bhi.n	80040c0 <HAL_Delay+0x28>
  {
  }
}
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000044 	.word	0x20000044

080040e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	609a      	str	r2, [r3, #8]
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3360      	adds	r3, #96	; 0x60
 800415a:	461a      	mov	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b08      	ldr	r3, [pc, #32]	; (800418c <LL_ADC_SetOffset+0x44>)
 800416a:	4013      	ands	r3, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	4313      	orrs	r3, r2
 8004178:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	03fff000 	.word	0x03fff000

08004190 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3360      	adds	r3, #96	; 0x60
 800419e:	461a      	mov	r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3360      	adds	r3, #96	; 0x60
 80041cc:	461a      	mov	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b087      	sub	sp, #28
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3330      	adds	r3, #48	; 0x30
 8004202:	461a      	mov	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	4413      	add	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	211f      	movs	r1, #31
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	401a      	ands	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0e9b      	lsrs	r3, r3, #26
 800422a:	f003 011f 	and.w	r1, r3, #31
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	431a      	orrs	r2, r3
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800424a:	b480      	push	{r7}
 800424c:	b087      	sub	sp, #28
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3314      	adds	r3, #20
 800425a:	461a      	mov	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	0e5b      	lsrs	r3, r3, #25
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	4413      	add	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0d1b      	lsrs	r3, r3, #20
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2107      	movs	r1, #7
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	401a      	ands	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	0d1b      	lsrs	r3, r3, #20
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	431a      	orrs	r2, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004294:	bf00      	nop
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b8:	43db      	mvns	r3, r3
 80042ba:	401a      	ands	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f003 0318 	and.w	r3, r3, #24
 80042c2:	4908      	ldr	r1, [pc, #32]	; (80042e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80042c4:	40d9      	lsrs	r1, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	400b      	ands	r3, r1
 80042ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ce:	431a      	orrs	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	0007ffff 	.word	0x0007ffff

080042e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80042f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6093      	str	r3, [r2, #8]
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800431c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004320:	d101      	bne.n	8004326 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004344:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004348:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004370:	d101      	bne.n	8004376 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <LL_ADC_IsEnabled+0x18>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <LL_ADC_IsEnabled+0x1a>
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d101      	bne.n	80043c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d101      	bne.n	80043e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
	...

080043f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004404:	2300      	movs	r3, #0
 8004406:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e12c      	b.n	800466c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	2b00      	cmp	r3, #0
 800441e:	d109      	bne.n	8004434 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff fad3 	bl	80039cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff67 	bl	800430c <LL_ADC_IsDeepPowerDownEnabled>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d004      	beq.n	800444e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff ff4d 	bl	80042e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff ff82 	bl	800435c <LL_ADC_IsInternalRegulatorEnabled>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d115      	bne.n	800448a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff ff66 	bl	8004334 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004468:	4b82      	ldr	r3, [pc, #520]	; (8004674 <HAL_ADC_Init+0x27c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	099b      	lsrs	r3, r3, #6
 800446e:	4a82      	ldr	r2, [pc, #520]	; (8004678 <HAL_ADC_Init+0x280>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	099b      	lsrs	r3, r3, #6
 8004476:	3301      	adds	r3, #1
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800447c:	e002      	b.n	8004484 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	3b01      	subs	r3, #1
 8004482:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f9      	bne.n	800447e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff ff64 	bl	800435c <LL_ADC_IsInternalRegulatorEnabled>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10d      	bne.n	80044b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	f043 0210 	orr.w	r2, r3, #16
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff ff75 	bl	80043aa <LL_ADC_REG_IsConversionOngoing>
 80044c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 80c5 	bne.w	800465a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f040 80c1 	bne.w	800465a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044e0:	f043 0202 	orr.w	r2, r3, #2
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff49 	bl	8004384 <LL_ADC_IsEnabled>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10b      	bne.n	8004510 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044f8:	4860      	ldr	r0, [pc, #384]	; (800467c <HAL_ADC_Init+0x284>)
 80044fa:	f7ff ff43 	bl	8004384 <LL_ADC_IsEnabled>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d105      	bne.n	8004510 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4619      	mov	r1, r3
 800450a:	485d      	ldr	r0, [pc, #372]	; (8004680 <HAL_ADC_Init+0x288>)
 800450c:	f7ff fde8 	bl	80040e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	7e5b      	ldrb	r3, [r3, #25]
 8004514:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800451a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004520:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004526:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800452e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004530:	4313      	orrs	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d106      	bne.n	800454c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	3b01      	subs	r3, #1
 8004544:	045b      	lsls	r3, r3, #17
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4313      	orrs	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	4b45      	ldr	r3, [pc, #276]	; (8004684 <HAL_ADC_Init+0x28c>)
 8004570:	4013      	ands	r3, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	69b9      	ldr	r1, [r7, #24]
 8004578:	430b      	orrs	r3, r1
 800457a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff ff12 	bl	80043aa <LL_ADC_REG_IsConversionOngoing>
 8004586:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff ff1f 	bl	80043d0 <LL_ADC_INJ_IsConversionOngoing>
 8004592:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d13d      	bne.n	8004616 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d13a      	bne.n	8004616 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045a4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045ac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045bc:	f023 0302 	bic.w	r3, r3, #2
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	69b9      	ldr	r1, [r7, #24]
 80045c6:	430b      	orrs	r3, r1
 80045c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d118      	bne.n	8004606 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045de:	f023 0304 	bic.w	r3, r3, #4
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045ea:	4311      	orrs	r1, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80045f0:	4311      	orrs	r1, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045f6:	430a      	orrs	r2, r1
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	611a      	str	r2, [r3, #16]
 8004604:	e007      	b.n	8004616 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0201 	bic.w	r2, r2, #1
 8004614:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d10c      	bne.n	8004638 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	f023 010f 	bic.w	r1, r3, #15
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	1e5a      	subs	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
 8004636:	e007      	b.n	8004648 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 020f 	bic.w	r2, r2, #15
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464c:	f023 0303 	bic.w	r3, r3, #3
 8004650:	f043 0201 	orr.w	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	655a      	str	r2, [r3, #84]	; 0x54
 8004658:	e007      	b.n	800466a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465e:	f043 0210 	orr.w	r2, r3, #16
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800466a:	7ffb      	ldrb	r3, [r7, #31]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3720      	adds	r7, #32
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	2000003c 	.word	0x2000003c
 8004678:	053e2d63 	.word	0x053e2d63
 800467c:	50040000 	.word	0x50040000
 8004680:	50040300 	.word	0x50040300
 8004684:	fff0c007 	.word	0xfff0c007

08004688 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b0b6      	sub	sp, #216	; 0xd8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x22>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e3b9      	b.n	8004e1e <HAL_ADC_ConfigChannel+0x796>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fe77 	bl	80043aa <LL_ADC_REG_IsConversionOngoing>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f040 839e 	bne.w	8004e00 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b05      	cmp	r3, #5
 80046ca:	d824      	bhi.n	8004716 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	3b02      	subs	r3, #2
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d81b      	bhi.n	800470e <HAL_ADC_ConfigChannel+0x86>
 80046d6:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <HAL_ADC_ConfigChannel+0x54>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	080046ed 	.word	0x080046ed
 80046e0:	080046f5 	.word	0x080046f5
 80046e4:	080046fd 	.word	0x080046fd
 80046e8:	08004705 	.word	0x08004705
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	220c      	movs	r2, #12
 80046f0:	605a      	str	r2, [r3, #4]
          break;
 80046f2:	e011      	b.n	8004718 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2212      	movs	r2, #18
 80046f8:	605a      	str	r2, [r3, #4]
          break;
 80046fa:	e00d      	b.n	8004718 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2218      	movs	r2, #24
 8004700:	605a      	str	r2, [r3, #4]
          break;
 8004702:	e009      	b.n	8004718 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800470a:	605a      	str	r2, [r3, #4]
          break;
 800470c:	e004      	b.n	8004718 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2206      	movs	r2, #6
 8004712:	605a      	str	r2, [r3, #4]
          break;
 8004714:	e000      	b.n	8004718 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004716:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	f7ff fd64 	bl	80041f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff fe3b 	bl	80043aa <LL_ADC_REG_IsConversionOngoing>
 8004734:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fe47 	bl	80043d0 <LL_ADC_INJ_IsConversionOngoing>
 8004742:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004746:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800474a:	2b00      	cmp	r3, #0
 800474c:	f040 81a6 	bne.w	8004a9c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004750:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004754:	2b00      	cmp	r3, #0
 8004756:	f040 81a1 	bne.w	8004a9c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6819      	ldr	r1, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	461a      	mov	r2, r3
 8004768:	f7ff fd6f 	bl	800424a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	695a      	ldr	r2, [r3, #20]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	08db      	lsrs	r3, r3, #3
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b04      	cmp	r3, #4
 800478c:	d00a      	beq.n	80047a4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6919      	ldr	r1, [r3, #16]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800479e:	f7ff fcd3 	bl	8004148 <LL_ADC_SetOffset>
 80047a2:	e17b      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fcf0 	bl	8004190 <LL_ADC_GetOffsetChannel>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10a      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x148>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2100      	movs	r1, #0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff fce5 	bl	8004190 <LL_ADC_GetOffsetChannel>
 80047c6:	4603      	mov	r3, r0
 80047c8:	0e9b      	lsrs	r3, r3, #26
 80047ca:	f003 021f 	and.w	r2, r3, #31
 80047ce:	e01e      	b.n	800480e <HAL_ADC_ConfigChannel+0x186>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fcda 	bl	8004190 <LL_ADC_GetOffsetChannel>
 80047dc:	4603      	mov	r3, r0
 80047de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047e6:	fa93 f3a3 	rbit	r3, r3
 80047ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80047f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80047fe:	2320      	movs	r3, #32
 8004800:	e004      	b.n	800480c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004802:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004806:	fab3 f383 	clz	r3, r3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004816:	2b00      	cmp	r3, #0
 8004818:	d105      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x19e>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	0e9b      	lsrs	r3, r3, #26
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	e018      	b.n	8004858 <HAL_ADC_ConfigChannel+0x1d0>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004832:	fa93 f3a3 	rbit	r3, r3
 8004836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800483a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800483e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004842:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800484a:	2320      	movs	r3, #32
 800484c:	e004      	b.n	8004858 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800484e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004852:	fab3 f383 	clz	r3, r3
 8004856:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004858:	429a      	cmp	r2, r3
 800485a:	d106      	bne.n	800486a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2200      	movs	r2, #0
 8004862:	2100      	movs	r1, #0
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff fca9 	bl	80041bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2101      	movs	r1, #1
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fc8d 	bl	8004190 <LL_ADC_GetOffsetChannel>
 8004876:	4603      	mov	r3, r0
 8004878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <HAL_ADC_ConfigChannel+0x20e>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2101      	movs	r1, #1
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fc82 	bl	8004190 <LL_ADC_GetOffsetChannel>
 800488c:	4603      	mov	r3, r0
 800488e:	0e9b      	lsrs	r3, r3, #26
 8004890:	f003 021f 	and.w	r2, r3, #31
 8004894:	e01e      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x24c>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2101      	movs	r1, #1
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fc77 	bl	8004190 <LL_ADC_GetOffsetChannel>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048ac:	fa93 f3a3 	rbit	r3, r3
 80048b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80048b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80048bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80048c4:	2320      	movs	r3, #32
 80048c6:	e004      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80048c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048cc:	fab3 f383 	clz	r3, r3
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d105      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x264>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	0e9b      	lsrs	r3, r3, #26
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	e018      	b.n	800491e <HAL_ADC_ConfigChannel+0x296>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048f8:	fa93 f3a3 	rbit	r3, r3
 80048fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004900:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004910:	2320      	movs	r3, #32
 8004912:	e004      	b.n	800491e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004918:	fab3 f383 	clz	r3, r3
 800491c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800491e:	429a      	cmp	r2, r3
 8004920:	d106      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2200      	movs	r2, #0
 8004928:	2101      	movs	r1, #1
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff fc46 	bl	80041bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2102      	movs	r1, #2
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fc2a 	bl	8004190 <LL_ADC_GetOffsetChannel>
 800493c:	4603      	mov	r3, r0
 800493e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <HAL_ADC_ConfigChannel+0x2d4>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2102      	movs	r1, #2
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff fc1f 	bl	8004190 <LL_ADC_GetOffsetChannel>
 8004952:	4603      	mov	r3, r0
 8004954:	0e9b      	lsrs	r3, r3, #26
 8004956:	f003 021f 	and.w	r2, r3, #31
 800495a:	e01e      	b.n	800499a <HAL_ADC_ConfigChannel+0x312>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2102      	movs	r1, #2
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fc14 	bl	8004190 <LL_ADC_GetOffsetChannel>
 8004968:	4603      	mov	r3, r0
 800496a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800497a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800497e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004982:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800498a:	2320      	movs	r3, #32
 800498c:	e004      	b.n	8004998 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800498e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004992:	fab3 f383 	clz	r3, r3
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d105      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x32a>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	0e9b      	lsrs	r3, r3, #26
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	e016      	b.n	80049e0 <HAL_ADC_ConfigChannel+0x358>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049be:	fa93 f3a3 	rbit	r3, r3
 80049c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80049c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80049ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80049d2:	2320      	movs	r3, #32
 80049d4:	e004      	b.n	80049e0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80049d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049da:	fab3 f383 	clz	r3, r3
 80049de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d106      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2200      	movs	r2, #0
 80049ea:	2102      	movs	r1, #2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fbe5 	bl	80041bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2103      	movs	r1, #3
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff fbc9 	bl	8004190 <LL_ADC_GetOffsetChannel>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x396>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2103      	movs	r1, #3
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fbbe 	bl	8004190 <LL_ADC_GetOffsetChannel>
 8004a14:	4603      	mov	r3, r0
 8004a16:	0e9b      	lsrs	r3, r3, #26
 8004a18:	f003 021f 	and.w	r2, r3, #31
 8004a1c:	e017      	b.n	8004a4e <HAL_ADC_ConfigChannel+0x3c6>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2103      	movs	r1, #3
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fbb3 	bl	8004190 <LL_ADC_GetOffsetChannel>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a30:	fa93 f3a3 	rbit	r3, r3
 8004a34:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a38:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004a40:	2320      	movs	r3, #32
 8004a42:	e003      	b.n	8004a4c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a46:	fab3 f383 	clz	r3, r3
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d105      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x3de>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	0e9b      	lsrs	r3, r3, #26
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	e011      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x402>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a6e:	fa93 f3a3 	rbit	r3, r3
 8004a72:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a76:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004a7e:	2320      	movs	r3, #32
 8004a80:	e003      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a84:	fab3 f383 	clz	r3, r3
 8004a88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d106      	bne.n	8004a9c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2200      	movs	r2, #0
 8004a94:	2103      	movs	r1, #3
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff fb90 	bl	80041bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff fc6f 	bl	8004384 <LL_ADC_IsEnabled>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f040 813f 	bne.w	8004d2c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f7ff fbf0 	bl	80042a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4a8e      	ldr	r2, [pc, #568]	; (8004d00 <HAL_ADC_ConfigChannel+0x678>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	f040 8130 	bne.w	8004d2c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10b      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x46c>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	0e9b      	lsrs	r3, r3, #26
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	2b09      	cmp	r3, #9
 8004aea:	bf94      	ite	ls
 8004aec:	2301      	movls	r3, #1
 8004aee:	2300      	movhi	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	e019      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x4a0>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004afc:	fa93 f3a3 	rbit	r3, r3
 8004b00:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b04:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004b0c:	2320      	movs	r3, #32
 8004b0e:	e003      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	3301      	adds	r3, #1
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	2b09      	cmp	r3, #9
 8004b20:	bf94      	ite	ls
 8004b22:	2301      	movls	r3, #1
 8004b24:	2300      	movhi	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d079      	beq.n	8004c20 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d107      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x4c0>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	0e9b      	lsrs	r3, r3, #26
 8004b3e:	3301      	adds	r3, #1
 8004b40:	069b      	lsls	r3, r3, #26
 8004b42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b46:	e015      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x4ec>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b50:	fa93 f3a3 	rbit	r3, r3
 8004b54:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b58:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004b60:	2320      	movs	r3, #32
 8004b62:	e003      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b66:	fab3 f383 	clz	r3, r3
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	069b      	lsls	r3, r3, #26
 8004b70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x50c>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	0e9b      	lsrs	r3, r3, #26
 8004b86:	3301      	adds	r3, #1
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b92:	e017      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x53c>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9c:	fa93 f3a3 	rbit	r3, r3
 8004ba0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004bac:	2320      	movs	r3, #32
 8004bae:	e003      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb2:	fab3 f383 	clz	r3, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	3301      	adds	r3, #1
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc4:	ea42 0103 	orr.w	r1, r2, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x562>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	0e9b      	lsrs	r3, r3, #26
 8004bda:	3301      	adds	r3, #1
 8004bdc:	f003 021f 	and.w	r2, r3, #31
 8004be0:	4613      	mov	r3, r2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	4413      	add	r3, r2
 8004be6:	051b      	lsls	r3, r3, #20
 8004be8:	e018      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x594>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	fa93 f3a3 	rbit	r3, r3
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004c02:	2320      	movs	r3, #32
 8004c04:	e003      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c08:	fab3 f383 	clz	r3, r3
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f003 021f 	and.w	r2, r3, #31
 8004c14:	4613      	mov	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	e080      	b.n	8004d22 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d107      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x5b4>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	0e9b      	lsrs	r3, r3, #26
 8004c32:	3301      	adds	r3, #1
 8004c34:	069b      	lsls	r3, r3, #26
 8004c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c3a:	e015      	b.n	8004c68 <HAL_ADC_ConfigChannel+0x5e0>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004c54:	2320      	movs	r3, #32
 8004c56:	e003      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5a:	fab3 f383 	clz	r3, r3
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	3301      	adds	r3, #1
 8004c62:	069b      	lsls	r3, r3, #26
 8004c64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x600>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	0e9b      	lsrs	r3, r3, #26
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	f003 031f 	and.w	r3, r3, #31
 8004c80:	2101      	movs	r1, #1
 8004c82:	fa01 f303 	lsl.w	r3, r1, r3
 8004c86:	e017      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x630>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	fa93 f3a3 	rbit	r3, r3
 8004c94:	61fb      	str	r3, [r7, #28]
  return result;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004ca0:	2320      	movs	r3, #32
 8004ca2:	e003      	b.n	8004cac <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	fab3 f383 	clz	r3, r3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	3301      	adds	r3, #1
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb8:	ea42 0103 	orr.w	r1, r2, r3
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10d      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x65c>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	0e9b      	lsrs	r3, r3, #26
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f003 021f 	and.w	r2, r3, #31
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4413      	add	r3, r2
 8004cda:	3b1e      	subs	r3, #30
 8004cdc:	051b      	lsls	r3, r3, #20
 8004cde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ce2:	e01d      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x698>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	fa93 f3a3 	rbit	r3, r3
 8004cf0:	613b      	str	r3, [r7, #16]
  return result;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d103      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004cfc:	2320      	movs	r3, #32
 8004cfe:	e005      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x684>
 8004d00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	fab3 f383 	clz	r3, r3
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	f003 021f 	and.w	r2, r3, #31
 8004d12:	4613      	mov	r3, r2
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	4413      	add	r3, r2
 8004d18:	3b1e      	subs	r3, #30
 8004d1a:	051b      	lsls	r3, r3, #20
 8004d1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d20:	430b      	orrs	r3, r1
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	6892      	ldr	r2, [r2, #8]
 8004d26:	4619      	mov	r1, r3
 8004d28:	f7ff fa8f 	bl	800424a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4b3d      	ldr	r3, [pc, #244]	; (8004e28 <HAL_ADC_ConfigChannel+0x7a0>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d06c      	beq.n	8004e12 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d38:	483c      	ldr	r0, [pc, #240]	; (8004e2c <HAL_ADC_ConfigChannel+0x7a4>)
 8004d3a:	f7ff f9f7 	bl	800412c <LL_ADC_GetCommonPathInternalCh>
 8004d3e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a3a      	ldr	r2, [pc, #232]	; (8004e30 <HAL_ADC_ConfigChannel+0x7a8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d127      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d121      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a35      	ldr	r2, [pc, #212]	; (8004e34 <HAL_ADC_ConfigChannel+0x7ac>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d157      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	482f      	ldr	r0, [pc, #188]	; (8004e2c <HAL_ADC_ConfigChannel+0x7a4>)
 8004d6e:	f7ff f9ca 	bl	8004106 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d72:	4b31      	ldr	r3, [pc, #196]	; (8004e38 <HAL_ADC_ConfigChannel+0x7b0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	099b      	lsrs	r3, r3, #6
 8004d78:	4a30      	ldr	r2, [pc, #192]	; (8004e3c <HAL_ADC_ConfigChannel+0x7b4>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	099b      	lsrs	r3, r3, #6
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	4613      	mov	r3, r2
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d8c:	e002      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f9      	bne.n	8004d8e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d9a:	e03a      	b.n	8004e12 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a27      	ldr	r2, [pc, #156]	; (8004e40 <HAL_ADC_ConfigChannel+0x7b8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d113      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x746>
 8004da6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1f      	ldr	r2, [pc, #124]	; (8004e34 <HAL_ADC_ConfigChannel+0x7ac>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d12a      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004dc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4819      	ldr	r0, [pc, #100]	; (8004e2c <HAL_ADC_ConfigChannel+0x7a4>)
 8004dc8:	f7ff f99d 	bl	8004106 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dcc:	e021      	b.n	8004e12 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1c      	ldr	r2, [pc, #112]	; (8004e44 <HAL_ADC_ConfigChannel+0x7bc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d11c      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d116      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a12      	ldr	r2, [pc, #72]	; (8004e34 <HAL_ADC_ConfigChannel+0x7ac>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d111      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004df2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004df6:	4619      	mov	r1, r3
 8004df8:	480c      	ldr	r0, [pc, #48]	; (8004e2c <HAL_ADC_ConfigChannel+0x7a4>)
 8004dfa:	f7ff f984 	bl	8004106 <LL_ADC_SetCommonPathInternalCh>
 8004dfe:	e008      	b.n	8004e12 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e04:	f043 0220 	orr.w	r2, r3, #32
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e1a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	37d8      	adds	r7, #216	; 0xd8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	80080000 	.word	0x80080000
 8004e2c:	50040300 	.word	0x50040300
 8004e30:	c7520000 	.word	0xc7520000
 8004e34:	50040000 	.word	0x50040000
 8004e38:	2000003c 	.word	0x2000003c
 8004e3c:	053e2d63 	.word	0x053e2d63
 8004e40:	cb840000 	.word	0xcb840000
 8004e44:	80000001 	.word	0x80000001

08004e48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0ed      	b.n	8005036 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d102      	bne.n	8004e6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fe fe14 	bl	8003a94 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e7c:	f7ff f900 	bl	8004080 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e82:	e012      	b.n	8004eaa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e84:	f7ff f8fc 	bl	8004080 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b0a      	cmp	r3, #10
 8004e90:	d90b      	bls.n	8004eaa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2205      	movs	r2, #5
 8004ea2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e0c5      	b.n	8005036 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0e5      	beq.n	8004e84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0202 	bic.w	r2, r2, #2
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ec8:	f7ff f8da 	bl	8004080 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ece:	e012      	b.n	8004ef6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ed0:	f7ff f8d6 	bl	8004080 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b0a      	cmp	r3, #10
 8004edc:	d90b      	bls.n	8004ef6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2205      	movs	r2, #5
 8004eee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e09f      	b.n	8005036 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e5      	bne.n	8004ed0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	7e1b      	ldrb	r3, [r3, #24]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d108      	bne.n	8004f1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e007      	b.n	8004f2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	7e5b      	ldrb	r3, [r3, #25]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d108      	bne.n	8004f48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	e007      	b.n	8004f58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	7e9b      	ldrb	r3, [r3, #26]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d108      	bne.n	8004f72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0220 	orr.w	r2, r2, #32
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e007      	b.n	8004f82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0220 	bic.w	r2, r2, #32
 8004f80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	7edb      	ldrb	r3, [r3, #27]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d108      	bne.n	8004f9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0210 	bic.w	r2, r2, #16
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e007      	b.n	8004fac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0210 	orr.w	r2, r2, #16
 8004faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	7f1b      	ldrb	r3, [r3, #28]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d108      	bne.n	8004fc6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0208 	orr.w	r2, r2, #8
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	e007      	b.n	8004fd6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0208 	bic.w	r2, r2, #8
 8004fd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7f5b      	ldrb	r3, [r3, #29]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d108      	bne.n	8004ff0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0204 	orr.w	r2, r2, #4
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e007      	b.n	8005000 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0204 	bic.w	r2, r2, #4
 8004ffe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	ea42 0103 	orr.w	r1, r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	1e5a      	subs	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800503e:	b480      	push	{r7}
 8005040:	b087      	sub	sp, #28
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005054:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005056:	7cfb      	ldrb	r3, [r7, #19]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d003      	beq.n	8005064 <HAL_CAN_ConfigFilter+0x26>
 800505c:	7cfb      	ldrb	r3, [r7, #19]
 800505e:	2b02      	cmp	r3, #2
 8005060:	f040 80aa 	bne.w	80051b8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800506a:	f043 0201 	orr.w	r2, r3, #1
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	2201      	movs	r2, #1
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	43db      	mvns	r3, r3
 800508e:	401a      	ands	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d123      	bne.n	80050e6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	43db      	mvns	r3, r3
 80050a8:	401a      	ands	r2, r3
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80050c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	3248      	adds	r2, #72	; 0x48
 80050c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050dc:	6979      	ldr	r1, [r7, #20]
 80050de:	3348      	adds	r3, #72	; 0x48
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	440b      	add	r3, r1
 80050e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d122      	bne.n	8005134 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800510e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	3248      	adds	r2, #72	; 0x48
 8005114:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005128:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800512a:	6979      	ldr	r1, [r7, #20]
 800512c:	3348      	adds	r3, #72	; 0x48
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	440b      	add	r3, r1
 8005132:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d109      	bne.n	8005150 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	43db      	mvns	r3, r3
 8005146:	401a      	ands	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800514e:	e007      	b.n	8005160 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	431a      	orrs	r2, r3
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d109      	bne.n	800517c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	43db      	mvns	r3, r3
 8005172:	401a      	ands	r2, r3
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800517a:	e007      	b.n	800518c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	431a      	orrs	r2, r3
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d107      	bne.n	80051a4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	431a      	orrs	r2, r3
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	e006      	b.n	80051c6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
  }
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d12e      	bne.n	8005244 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051fe:	f7fe ff3f 	bl	8004080 <HAL_GetTick>
 8005202:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005204:	e012      	b.n	800522c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005206:	f7fe ff3b 	bl	8004080 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b0a      	cmp	r3, #10
 8005212:	d90b      	bls.n	800522c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2205      	movs	r2, #5
 8005224:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e012      	b.n	8005252 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	e006      	b.n	8005252 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800525a:	b480      	push	{r7}
 800525c:	b089      	sub	sp, #36	; 0x24
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800526e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005278:	7ffb      	ldrb	r3, [r7, #31]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d003      	beq.n	8005286 <HAL_CAN_AddTxMessage+0x2c>
 800527e:	7ffb      	ldrb	r3, [r7, #31]
 8005280:	2b02      	cmp	r3, #2
 8005282:	f040 80ad 	bne.w	80053e0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10a      	bne.n	80052a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005296:	2b00      	cmp	r3, #0
 8005298:	d105      	bne.n	80052a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8095 	beq.w	80053d0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	0e1b      	lsrs	r3, r3, #24
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80052b0:	2201      	movs	r2, #1
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	409a      	lsls	r2, r3
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10d      	bne.n	80052de <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80052cc:	68f9      	ldr	r1, [r7, #12]
 80052ce:	6809      	ldr	r1, [r1, #0]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	3318      	adds	r3, #24
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	440b      	add	r3, r1
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e00f      	b.n	80052fe <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052ee:	68f9      	ldr	r1, [r7, #12]
 80052f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80052f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	3318      	adds	r3, #24
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	440b      	add	r3, r1
 80052fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6819      	ldr	r1, [r3, #0]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	3318      	adds	r3, #24
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	440b      	add	r3, r1
 800530e:	3304      	adds	r3, #4
 8005310:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	7d1b      	ldrb	r3, [r3, #20]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d111      	bne.n	800533e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	3318      	adds	r3, #24
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	4413      	add	r3, r2
 8005326:	3304      	adds	r3, #4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	6811      	ldr	r1, [r2, #0]
 800532e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	3318      	adds	r3, #24
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	440b      	add	r3, r1
 800533a:	3304      	adds	r3, #4
 800533c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3307      	adds	r3, #7
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	061a      	lsls	r2, r3, #24
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3306      	adds	r3, #6
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	041b      	lsls	r3, r3, #16
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3305      	adds	r3, #5
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	4313      	orrs	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	3204      	adds	r2, #4
 800535e:	7812      	ldrb	r2, [r2, #0]
 8005360:	4610      	mov	r0, r2
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	6811      	ldr	r1, [r2, #0]
 8005366:	ea43 0200 	orr.w	r2, r3, r0
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	440b      	add	r3, r1
 8005370:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005374:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3303      	adds	r3, #3
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	061a      	lsls	r2, r3, #24
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3302      	adds	r3, #2
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	041b      	lsls	r3, r3, #16
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3301      	adds	r3, #1
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	4313      	orrs	r3, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	7812      	ldrb	r2, [r2, #0]
 8005396:	4610      	mov	r0, r2
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	6811      	ldr	r1, [r2, #0]
 800539c:	ea43 0200 	orr.w	r2, r3, r0
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	440b      	add	r3, r1
 80053a6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80053aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	3318      	adds	r3, #24
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	4413      	add	r3, r2
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	6811      	ldr	r1, [r2, #0]
 80053be:	f043 0201 	orr.w	r2, r3, #1
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	3318      	adds	r3, #24
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	440b      	add	r3, r1
 80053ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e00e      	b.n	80053ee <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e006      	b.n	80053ee <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
  }
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3724      	adds	r7, #36	; 0x24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800540c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800540e:	7afb      	ldrb	r3, [r7, #11]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d002      	beq.n	800541a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005414:	7afb      	ldrb	r3, [r7, #11]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d11d      	bne.n	8005456 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3301      	adds	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3301      	adds	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3301      	adds	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005456:	68fb      	ldr	r3, [r7, #12]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005478:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800547a:	7dfb      	ldrb	r3, [r7, #23]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d003      	beq.n	8005488 <HAL_CAN_GetRxMessage+0x24>
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	2b02      	cmp	r3, #2
 8005484:	f040 80f3 	bne.w	800566e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10e      	bne.n	80054ac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d116      	bne.n	80054ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0e7      	b.n	800567c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d107      	bne.n	80054ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e0d8      	b.n	800567c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	331b      	adds	r3, #27
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	4413      	add	r3, r2
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0204 	and.w	r2, r3, #4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10c      	bne.n	8005502 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	331b      	adds	r3, #27
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	4413      	add	r3, r2
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	0d5b      	lsrs	r3, r3, #21
 80054f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	e00b      	b.n	800551a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	331b      	adds	r3, #27
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	4413      	add	r3, r2
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	08db      	lsrs	r3, r3, #3
 8005512:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	331b      	adds	r3, #27
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	4413      	add	r3, r2
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0202 	and.w	r2, r3, #2
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	331b      	adds	r3, #27
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	4413      	add	r3, r2
 800553c:	3304      	adds	r3, #4
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 020f 	and.w	r2, r3, #15
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	331b      	adds	r3, #27
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	4413      	add	r3, r2
 8005554:	3304      	adds	r3, #4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	0a1b      	lsrs	r3, r3, #8
 800555a:	b2da      	uxtb	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	331b      	adds	r3, #27
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	4413      	add	r3, r2
 800556c:	3304      	adds	r3, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	0c1b      	lsrs	r3, r3, #16
 8005572:	b29a      	uxth	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	4413      	add	r3, r2
 8005582:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	b2da      	uxtb	r2, r3
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	4413      	add	r3, r2
 8005598:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	0a1a      	lsrs	r2, r3, #8
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	3301      	adds	r3, #1
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	0c1a      	lsrs	r2, r3, #16
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3302      	adds	r3, #2
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	0e1a      	lsrs	r2, r3, #24
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	3303      	adds	r3, #3
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	3304      	adds	r3, #4
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	0a1a      	lsrs	r2, r3, #8
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	3305      	adds	r3, #5
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	4413      	add	r3, r2
 8005618:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	0c1a      	lsrs	r2, r3, #16
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	3306      	adds	r3, #6
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	4413      	add	r3, r2
 8005632:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	0e1a      	lsrs	r2, r3, #24
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	3307      	adds	r3, #7
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d108      	bne.n	800565a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0220 	orr.w	r2, r2, #32
 8005656:	60da      	str	r2, [r3, #12]
 8005658:	e007      	b.n	800566a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0220 	orr.w	r2, r2, #32
 8005668:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	e006      	b.n	800567c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
  }
}
 800567c:	4618      	mov	r0, r3
 800567e:	371c      	adds	r7, #28
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800569c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800569e:	7afb      	ldrb	r3, [r7, #11]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d002      	beq.n	80056aa <HAL_CAN_GetRxFifoFillLevel+0x22>
 80056a4:	7afb      	ldrb	r3, [r7, #11]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d10f      	bne.n	80056ca <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	e005      	b.n	80056ca <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80056ca:	68fb      	ldr	r3, [r7, #12]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056e8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d002      	beq.n	80056f6 <HAL_CAN_ActivateNotification+0x1e>
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d109      	bne.n	800570a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6959      	ldr	r1, [r3, #20]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	e006      	b.n	8005718 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
  }
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08a      	sub	sp, #40	; 0x28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800572c:	2300      	movs	r3, #0
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d07c      	beq.n	8005864 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d023      	beq.n	80057bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2201      	movs	r2, #1
 800577a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fd ff90 	bl	80036ac <HAL_CAN_TxMailbox0CompleteCallback>
 800578c:	e016      	b.n	80057bc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d004      	beq.n	80057a2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
 80057a0:	e00c      	b.n	80057bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d004      	beq.n	80057b6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
 80057b4:	e002      	b.n	80057bc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f96b 	bl	8005a92 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d024      	beq.n	8005810 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fd ff70 	bl	80036c0 <HAL_CAN_TxMailbox1CompleteCallback>
 80057e0:	e016      	b.n	8005810 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d004      	beq.n	80057f6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24
 80057f4:	e00c      	b.n	8005810 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d004      	beq.n	800580a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
 8005808:	e002      	b.n	8005810 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f94b 	bl	8005aa6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d024      	beq.n	8005864 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005822:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fd ff50 	bl	80036d4 <HAL_CAN_TxMailbox2CompleteCallback>
 8005834:	e016      	b.n	8005864 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d004      	beq.n	800584a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
 8005848:	e00c      	b.n	8005864 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d004      	beq.n	800585e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
 800585c:	e002      	b.n	8005864 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f92b 	bl	8005aba <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00c      	beq.n	8005888 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	d007      	beq.n	8005888 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800587e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2210      	movs	r2, #16
 8005886:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00b      	beq.n	80058aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d006      	beq.n	80058aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2208      	movs	r2, #8
 80058a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f912 	bl	8005ace <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fd fed6 	bl	8003674 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00c      	beq.n	80058ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d007      	beq.n	80058ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2210      	movs	r2, #16
 80058ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00b      	beq.n	800590e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d006      	beq.n	800590e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2208      	movs	r2, #8
 8005906:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f8f4 	bl	8005af6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f8db 	bl	8005ae2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b00      	cmp	r3, #0
 800593e:	d006      	beq.n	800594e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2210      	movs	r2, #16
 8005946:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f8de 	bl	8005b0a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00b      	beq.n	8005970 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d006      	beq.n	8005970 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2208      	movs	r2, #8
 8005968:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8d7 	bl	8005b1e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d07b      	beq.n	8005a72 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d072      	beq.n	8005a6a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598a:	2b00      	cmp	r3, #0
 800598c:	d008      	beq.n	80059a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d008      	beq.n	80059bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	f043 0302 	orr.w	r3, r3, #2
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d008      	beq.n	80059d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	f043 0304 	orr.w	r3, r3, #4
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d043      	beq.n	8005a6a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d03e      	beq.n	8005a6a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059f2:	2b60      	cmp	r3, #96	; 0x60
 80059f4:	d02b      	beq.n	8005a4e <HAL_CAN_IRQHandler+0x32a>
 80059f6:	2b60      	cmp	r3, #96	; 0x60
 80059f8:	d82e      	bhi.n	8005a58 <HAL_CAN_IRQHandler+0x334>
 80059fa:	2b50      	cmp	r3, #80	; 0x50
 80059fc:	d022      	beq.n	8005a44 <HAL_CAN_IRQHandler+0x320>
 80059fe:	2b50      	cmp	r3, #80	; 0x50
 8005a00:	d82a      	bhi.n	8005a58 <HAL_CAN_IRQHandler+0x334>
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d019      	beq.n	8005a3a <HAL_CAN_IRQHandler+0x316>
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d826      	bhi.n	8005a58 <HAL_CAN_IRQHandler+0x334>
 8005a0a:	2b30      	cmp	r3, #48	; 0x30
 8005a0c:	d010      	beq.n	8005a30 <HAL_CAN_IRQHandler+0x30c>
 8005a0e:	2b30      	cmp	r3, #48	; 0x30
 8005a10:	d822      	bhi.n	8005a58 <HAL_CAN_IRQHandler+0x334>
 8005a12:	2b10      	cmp	r3, #16
 8005a14:	d002      	beq.n	8005a1c <HAL_CAN_IRQHandler+0x2f8>
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d005      	beq.n	8005a26 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005a1a:	e01d      	b.n	8005a58 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	f043 0308 	orr.w	r3, r3, #8
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a24:	e019      	b.n	8005a5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	f043 0310 	orr.w	r3, r3, #16
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a2e:	e014      	b.n	8005a5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	f043 0320 	orr.w	r3, r3, #32
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a38:	e00f      	b.n	8005a5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a42:	e00a      	b.n	8005a5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a4c:	e005      	b.n	8005a5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005a56:	e000      	b.n	8005a5a <HAL_CAN_IRQHandler+0x336>
            break;
 8005a58:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	699a      	ldr	r2, [r3, #24]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005a68:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2204      	movs	r2, #4
 8005a70:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d008      	beq.n	8005a8a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f854 	bl	8005b32 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005a8a:	bf00      	nop
 8005a8c:	3728      	adds	r7, #40	; 0x28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b58:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <__NVIC_SetPriorityGrouping+0x44>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b64:	4013      	ands	r3, r2
 8005b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b7a:	4a04      	ldr	r2, [pc, #16]	; (8005b8c <__NVIC_SetPriorityGrouping+0x44>)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	60d3      	str	r3, [r2, #12]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	e000ed00 	.word	0xe000ed00

08005b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b94:	4b04      	ldr	r3, [pc, #16]	; (8005ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	0a1b      	lsrs	r3, r3, #8
 8005b9a:	f003 0307 	and.w	r3, r3, #7
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	e000ed00 	.word	0xe000ed00

08005bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	db0b      	blt.n	8005bd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	f003 021f 	and.w	r2, r3, #31
 8005bc4:	4907      	ldr	r1, [pc, #28]	; (8005be4 <__NVIC_EnableIRQ+0x38>)
 8005bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	2001      	movs	r0, #1
 8005bce:	fa00 f202 	lsl.w	r2, r0, r2
 8005bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	e000e100 	.word	0xe000e100

08005be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	6039      	str	r1, [r7, #0]
 8005bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	db0a      	blt.n	8005c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	490c      	ldr	r1, [pc, #48]	; (8005c34 <__NVIC_SetPriority+0x4c>)
 8005c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c06:	0112      	lsls	r2, r2, #4
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c10:	e00a      	b.n	8005c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	4908      	ldr	r1, [pc, #32]	; (8005c38 <__NVIC_SetPriority+0x50>)
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	3b04      	subs	r3, #4
 8005c20:	0112      	lsls	r2, r2, #4
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	440b      	add	r3, r1
 8005c26:	761a      	strb	r2, [r3, #24]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	e000e100 	.word	0xe000e100
 8005c38:	e000ed00 	.word	0xe000ed00

08005c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b089      	sub	sp, #36	; 0x24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f1c3 0307 	rsb	r3, r3, #7
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	bf28      	it	cs
 8005c5a:	2304      	movcs	r3, #4
 8005c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3304      	adds	r3, #4
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d902      	bls.n	8005c6c <NVIC_EncodePriority+0x30>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3b03      	subs	r3, #3
 8005c6a:	e000      	b.n	8005c6e <NVIC_EncodePriority+0x32>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c70:	f04f 32ff 	mov.w	r2, #4294967295
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	43da      	mvns	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	401a      	ands	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c84:	f04f 31ff 	mov.w	r1, #4294967295
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8e:	43d9      	mvns	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c94:	4313      	orrs	r3, r2
         );
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3724      	adds	r7, #36	; 0x24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff ff4c 	bl	8005b48 <__NVIC_SetPriorityGrouping>
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cca:	f7ff ff61 	bl	8005b90 <__NVIC_GetPriorityGrouping>
 8005cce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	6978      	ldr	r0, [r7, #20]
 8005cd6:	f7ff ffb1 	bl	8005c3c <NVIC_EncodePriority>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff ff80 	bl	8005be8 <__NVIC_SetPriority>
}
 8005ce8:	bf00      	nop
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff ff54 	bl	8005bac <__NVIC_EnableIRQ>
}
 8005d04:	bf00      	nop
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e014      	b.n	8005d48 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	791b      	ldrb	r3, [r3, #4]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fd ff16 	bl	8003b60 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	795b      	ldrb	r3, [r3, #5]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_DAC_Start+0x16>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e03b      	b.n	8005dde <HAL_DAC_Start+0x8e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6819      	ldr	r1, [r3, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2201      	movs	r2, #1
 8005d80:	409a      	lsls	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10f      	bne.n	8005db0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d118      	bne.n	8005dd0 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	605a      	str	r2, [r3, #4]
 8005dae:	e00f      	b.n	8005dd0 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005dba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dbe:	d107      	bne.n	8005dd0 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0202 	orr.w	r2, r2, #2
 8005dce:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e00:	d120      	bne.n	8005e44 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e10:	d118      	bne.n	8005e44 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2204      	movs	r2, #4
 8005e16:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f043 0201 	orr.w	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e3c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f852 	bl	8005ee8 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e52:	d120      	bne.n	8005e96 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e62:	d118      	bne.n	8005e96 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2204      	movs	r2, #4
 8005e68:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f043 0202 	orr.w	r2, r3, #2
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005e7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005e8e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f94d 	bl	8006130 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b087      	sub	sp, #28
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d105      	bne.n	8005ec8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	e004      	b.n	8005ed2 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4413      	add	r3, r2
 8005ece:	3314      	adds	r3, #20
 8005ed0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	795b      	ldrb	r3, [r3, #5]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_DAC_ConfigChannel+0x1c>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e107      	b.n	8006128 <HAL_DAC_ConfigChannel+0x22c>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2202      	movs	r2, #2
 8005f22:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d174      	bne.n	8006016 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005f2c:	f7fe f8a8 	bl	8004080 <HAL_GetTick>
 8005f30:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d134      	bne.n	8005fa2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f38:	e011      	b.n	8005f5e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005f3a:	f7fe f8a1 	bl	8004080 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d90a      	bls.n	8005f5e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f043 0208 	orr.w	r2, r3, #8
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2203      	movs	r2, #3
 8005f58:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e0e4      	b.n	8006128 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e6      	bne.n	8005f3a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	f7fe f893 	bl	8004098 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	6992      	ldr	r2, [r2, #24]
 8005f7a:	641a      	str	r2, [r3, #64]	; 0x40
 8005f7c:	e01e      	b.n	8005fbc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005f7e:	f7fe f87f 	bl	8004080 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d90a      	bls.n	8005fa2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f043 0208 	orr.w	r2, r3, #8
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e0c2      	b.n	8006128 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dbe8      	blt.n	8005f7e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8005fac:	2001      	movs	r0, #1
 8005fae:	f7fe f873 	bl	8004098 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	6992      	ldr	r2, [r2, #24]
 8005fba:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	ea02 0103 	and.w	r1, r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	69da      	ldr	r2, [r3, #28]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f003 0310 	and.w	r3, r3, #16
 8005ff6:	21ff      	movs	r1, #255	; 0xff
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	43db      	mvns	r3, r3
 8005ffe:	ea02 0103 	and.w	r1, r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6a1a      	ldr	r2, [r3, #32]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	409a      	lsls	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d11d      	bne.n	800605a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	221f      	movs	r2, #31
 800602e:	fa02 f303 	lsl.w	r3, r2, r3
 8006032:	43db      	mvns	r3, r3
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	4013      	ands	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	4313      	orrs	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006060:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2207      	movs	r2, #7
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	43db      	mvns	r3, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4013      	ands	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	431a      	orrs	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	4313      	orrs	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6819      	ldr	r1, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	43da      	mvns	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	400a      	ands	r2, r1
 80060be:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f003 0310 	and.w	r3, r3, #16
 80060ce:	f640 72fc 	movw	r2, #4092	; 0xffc
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	43db      	mvns	r3, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4013      	ands	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f003 0310 	and.w	r3, r3, #16
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6819      	ldr	r1, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	22c0      	movs	r2, #192	; 0xc0
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	43da      	mvns	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	400a      	ands	r2, r1
 8006118:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3720      	adds	r7, #32
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006152:	e148      	b.n	80063e6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	2101      	movs	r1, #1
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	fa01 f303 	lsl.w	r3, r1, r3
 8006160:	4013      	ands	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 813a 	beq.w	80063e0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f003 0303 	and.w	r3, r3, #3
 8006174:	2b01      	cmp	r3, #1
 8006176:	d005      	beq.n	8006184 <HAL_GPIO_Init+0x40>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f003 0303 	and.w	r3, r3, #3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d130      	bne.n	80061e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	2203      	movs	r2, #3
 8006190:	fa02 f303 	lsl.w	r3, r2, r3
 8006194:	43db      	mvns	r3, r3
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4013      	ands	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061ba:	2201      	movs	r2, #1
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	43db      	mvns	r3, r3
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4013      	ands	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	091b      	lsrs	r3, r3, #4
 80061d0:	f003 0201 	and.w	r2, r3, #1
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d017      	beq.n	8006222 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	2203      	movs	r2, #3
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	43db      	mvns	r3, r3
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4013      	ands	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d123      	bne.n	8006276 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	08da      	lsrs	r2, r3, #3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3208      	adds	r2, #8
 8006236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	220f      	movs	r2, #15
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	43db      	mvns	r3, r3
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4013      	ands	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	fa02 f303 	lsl.w	r3, r2, r3
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	08da      	lsrs	r2, r3, #3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3208      	adds	r2, #8
 8006270:	6939      	ldr	r1, [r7, #16]
 8006272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	2203      	movs	r2, #3
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	43db      	mvns	r3, r3
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4013      	ands	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f003 0203 	and.w	r2, r3, #3
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 8094 	beq.w	80063e0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062b8:	4b52      	ldr	r3, [pc, #328]	; (8006404 <HAL_GPIO_Init+0x2c0>)
 80062ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062bc:	4a51      	ldr	r2, [pc, #324]	; (8006404 <HAL_GPIO_Init+0x2c0>)
 80062be:	f043 0301 	orr.w	r3, r3, #1
 80062c2:	6613      	str	r3, [r2, #96]	; 0x60
 80062c4:	4b4f      	ldr	r3, [pc, #316]	; (8006404 <HAL_GPIO_Init+0x2c0>)
 80062c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80062d0:	4a4d      	ldr	r2, [pc, #308]	; (8006408 <HAL_GPIO_Init+0x2c4>)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	089b      	lsrs	r3, r3, #2
 80062d6:	3302      	adds	r3, #2
 80062d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f003 0303 	and.w	r3, r3, #3
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	220f      	movs	r2, #15
 80062e8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ec:	43db      	mvns	r3, r3
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4013      	ands	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80062fa:	d00d      	beq.n	8006318 <HAL_GPIO_Init+0x1d4>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a43      	ldr	r2, [pc, #268]	; (800640c <HAL_GPIO_Init+0x2c8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d007      	beq.n	8006314 <HAL_GPIO_Init+0x1d0>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a42      	ldr	r2, [pc, #264]	; (8006410 <HAL_GPIO_Init+0x2cc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d101      	bne.n	8006310 <HAL_GPIO_Init+0x1cc>
 800630c:	2302      	movs	r3, #2
 800630e:	e004      	b.n	800631a <HAL_GPIO_Init+0x1d6>
 8006310:	2307      	movs	r3, #7
 8006312:	e002      	b.n	800631a <HAL_GPIO_Init+0x1d6>
 8006314:	2301      	movs	r3, #1
 8006316:	e000      	b.n	800631a <HAL_GPIO_Init+0x1d6>
 8006318:	2300      	movs	r3, #0
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	f002 0203 	and.w	r2, r2, #3
 8006320:	0092      	lsls	r2, r2, #2
 8006322:	4093      	lsls	r3, r2
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800632a:	4937      	ldr	r1, [pc, #220]	; (8006408 <HAL_GPIO_Init+0x2c4>)
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	089b      	lsrs	r3, r3, #2
 8006330:	3302      	adds	r3, #2
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006338:	4b36      	ldr	r3, [pc, #216]	; (8006414 <HAL_GPIO_Init+0x2d0>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	43db      	mvns	r3, r3
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4013      	ands	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800635c:	4a2d      	ldr	r2, [pc, #180]	; (8006414 <HAL_GPIO_Init+0x2d0>)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006362:	4b2c      	ldr	r3, [pc, #176]	; (8006414 <HAL_GPIO_Init+0x2d0>)
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	43db      	mvns	r3, r3
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4013      	ands	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006386:	4a23      	ldr	r2, [pc, #140]	; (8006414 <HAL_GPIO_Init+0x2d0>)
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800638c:	4b21      	ldr	r3, [pc, #132]	; (8006414 <HAL_GPIO_Init+0x2d0>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	43db      	mvns	r3, r3
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4013      	ands	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80063b0:	4a18      	ldr	r2, [pc, #96]	; (8006414 <HAL_GPIO_Init+0x2d0>)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80063b6:	4b17      	ldr	r3, [pc, #92]	; (8006414 <HAL_GPIO_Init+0x2d0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	43db      	mvns	r3, r3
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4013      	ands	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80063da:	4a0e      	ldr	r2, [pc, #56]	; (8006414 <HAL_GPIO_Init+0x2d0>)
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	3301      	adds	r3, #1
 80063e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	fa22 f303 	lsr.w	r3, r2, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f47f aeaf 	bne.w	8006154 <HAL_GPIO_Init+0x10>
  }
}
 80063f6:	bf00      	nop
 80063f8:	bf00      	nop
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	40021000 	.word	0x40021000
 8006408:	40010000 	.word	0x40010000
 800640c:	48000400 	.word	0x48000400
 8006410:	48000800 	.word	0x48000800
 8006414:	40010400 	.word	0x40010400

08006418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	887b      	ldrh	r3, [r7, #2]
 800642a:	4013      	ands	r3, r2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
 8006434:	e001      	b.n	800643a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006436:	2300      	movs	r3, #0
 8006438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	807b      	strh	r3, [r7, #2]
 8006454:	4613      	mov	r3, r2
 8006456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006458:	787b      	ldrb	r3, [r7, #1]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800645e:	887a      	ldrh	r2, [r7, #2]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006464:	e002      	b.n	800646c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006466:	887a      	ldrh	r2, [r7, #2]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e081      	b.n	800658e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7fd fba4 	bl	8003bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2224      	movs	r2, #36	; 0x24
 80064a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0201 	bic.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d107      	bne.n	80064f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ee:	609a      	str	r2, [r3, #8]
 80064f0:	e006      	b.n	8006500 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d104      	bne.n	8006512 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006510:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6812      	ldr	r2, [r2, #0]
 800651c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006524:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006534:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	69d9      	ldr	r1, [r3, #28]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a1a      	ldr	r2, [r3, #32]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af02      	add	r7, sp, #8
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	607a      	str	r2, [r7, #4]
 80065a2:	461a      	mov	r2, r3
 80065a4:	460b      	mov	r3, r1
 80065a6:	817b      	strh	r3, [r7, #10]
 80065a8:	4613      	mov	r3, r2
 80065aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	f040 80da 	bne.w	800676e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_I2C_Master_Transmit+0x30>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e0d3      	b.n	8006770 <HAL_I2C_Master_Transmit+0x1d8>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065d0:	f7fd fd56 	bl	8004080 <HAL_GetTick>
 80065d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	2319      	movs	r3, #25
 80065dc:	2201      	movs	r2, #1
 80065de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f8f0 	bl	80067c8 <I2C_WaitOnFlagUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e0be      	b.n	8006770 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2221      	movs	r2, #33	; 0x21
 80065f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2210      	movs	r2, #16
 80065fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	893a      	ldrh	r2, [r7, #8]
 8006612:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661e:	b29b      	uxth	r3, r3
 8006620:	2bff      	cmp	r3, #255	; 0xff
 8006622:	d90e      	bls.n	8006642 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	22ff      	movs	r2, #255	; 0xff
 8006628:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662e:	b2da      	uxtb	r2, r3
 8006630:	8979      	ldrh	r1, [r7, #10]
 8006632:	4b51      	ldr	r3, [pc, #324]	; (8006778 <HAL_I2C_Master_Transmit+0x1e0>)
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 fa6c 	bl	8006b18 <I2C_TransferConfig>
 8006640:	e06c      	b.n	800671c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006646:	b29a      	uxth	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006650:	b2da      	uxtb	r2, r3
 8006652:	8979      	ldrh	r1, [r7, #10]
 8006654:	4b48      	ldr	r3, [pc, #288]	; (8006778 <HAL_I2C_Master_Transmit+0x1e0>)
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fa5b 	bl	8006b18 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006662:	e05b      	b.n	800671c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	6a39      	ldr	r1, [r7, #32]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 f8ed 	bl	8006848 <I2C_WaitOnTXISFlagUntilTimeout>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e07b      	b.n	8006770 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	781a      	ldrb	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d034      	beq.n	800671c <HAL_I2C_Master_Transmit+0x184>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d130      	bne.n	800671c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	2200      	movs	r2, #0
 80066c2:	2180      	movs	r1, #128	; 0x80
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 f87f 	bl	80067c8 <I2C_WaitOnFlagUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e04d      	b.n	8006770 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2bff      	cmp	r3, #255	; 0xff
 80066dc:	d90e      	bls.n	80066fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	22ff      	movs	r2, #255	; 0xff
 80066e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	8979      	ldrh	r1, [r7, #10]
 80066ec:	2300      	movs	r3, #0
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 fa0f 	bl	8006b18 <I2C_TransferConfig>
 80066fa:	e00f      	b.n	800671c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670a:	b2da      	uxtb	r2, r3
 800670c:	8979      	ldrh	r1, [r7, #10]
 800670e:	2300      	movs	r3, #0
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f9fe 	bl	8006b18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006720:	b29b      	uxth	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d19e      	bne.n	8006664 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	6a39      	ldr	r1, [r7, #32]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f8cc 	bl	80068c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e01a      	b.n	8006770 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2220      	movs	r2, #32
 8006740:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6859      	ldr	r1, [r3, #4]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <HAL_I2C_Master_Transmit+0x1e4>)
 800674e:	400b      	ands	r3, r1
 8006750:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	e000      	b.n	8006770 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800676e:	2302      	movs	r3, #2
  }
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	80002000 	.word	0x80002000
 800677c:	fe00e800 	.word	0xfe00e800

08006780 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b02      	cmp	r3, #2
 8006794:	d103      	bne.n	800679e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2200      	movs	r2, #0
 800679c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d007      	beq.n	80067bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0201 	orr.w	r2, r2, #1
 80067ba:	619a      	str	r2, [r3, #24]
  }
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	4613      	mov	r3, r2
 80067d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067d8:	e022      	b.n	8006820 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d01e      	beq.n	8006820 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e2:	f7fd fc4d 	bl	8004080 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d302      	bcc.n	80067f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d113      	bne.n	8006820 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fc:	f043 0220 	orr.w	r2, r3, #32
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e00f      	b.n	8006840 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	4013      	ands	r3, r2
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	429a      	cmp	r2, r3
 800682e:	bf0c      	ite	eq
 8006830:	2301      	moveq	r3, #1
 8006832:	2300      	movne	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	461a      	mov	r2, r3
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	429a      	cmp	r2, r3
 800683c:	d0cd      	beq.n	80067da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006854:	e02c      	b.n	80068b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 f870 	bl	8006940 <I2C_IsErrorOccurred>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e02a      	b.n	80068c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006870:	d01e      	beq.n	80068b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006872:	f7fd fc05 	bl	8004080 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	429a      	cmp	r2, r3
 8006880:	d302      	bcc.n	8006888 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d113      	bne.n	80068b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688c:	f043 0220 	orr.w	r2, r3, #32
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2220      	movs	r2, #32
 8006898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e007      	b.n	80068c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d1cb      	bne.n	8006856 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068d4:	e028      	b.n	8006928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f830 	bl	8006940 <I2C_IsErrorOccurred>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e026      	b.n	8006938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ea:	f7fd fbc9 	bl	8004080 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d302      	bcc.n	8006900 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d113      	bne.n	8006928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006904:	f043 0220 	orr.w	r2, r3, #32
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e007      	b.n	8006938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b20      	cmp	r3, #32
 8006934:	d1cf      	bne.n	80068d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08a      	sub	sp, #40	; 0x28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b00      	cmp	r3, #0
 800696a:	d075      	beq.n	8006a58 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2210      	movs	r2, #16
 8006972:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006974:	e056      	b.n	8006a24 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697c:	d052      	beq.n	8006a24 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800697e:	f7fd fb7f 	bl	8004080 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <I2C_IsErrorOccurred+0x54>
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d147      	bne.n	8006a24 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800699e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b6:	d12e      	bne.n	8006a16 <I2C_IsErrorOccurred+0xd6>
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069be:	d02a      	beq.n	8006a16 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80069c0:	7cfb      	ldrb	r3, [r7, #19]
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	d027      	beq.n	8006a16 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069d6:	f7fd fb53 	bl	8004080 <HAL_GetTick>
 80069da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069dc:	e01b      	b.n	8006a16 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069de:	f7fd fb4f 	bl	8004080 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	2b19      	cmp	r3, #25
 80069ea:	d914      	bls.n	8006a16 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f0:	f043 0220 	orr.w	r2, r3, #32
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d1dc      	bne.n	80069de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d003      	beq.n	8006a3a <I2C_IsErrorOccurred+0xfa>
 8006a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d09d      	beq.n	8006976 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d103      	bne.n	8006a4a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2220      	movs	r2, #32
 8006a48:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	f043 0304 	orr.w	r3, r3, #4
 8006a50:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	f043 0301 	orr.w	r3, r3, #1
 8006a70:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00b      	beq.n	8006aa4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	f043 0308 	orr.w	r3, r3, #8
 8006a92:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00b      	beq.n	8006ac6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	f043 0302 	orr.w	r3, r3, #2
 8006ab4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006abe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d01c      	beq.n	8006b08 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f7ff fe56 	bl	8006780 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6859      	ldr	r1, [r3, #4]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <I2C_IsErrorOccurred+0x1d4>)
 8006ae0:	400b      	ands	r3, r1
 8006ae2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	431a      	orrs	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3728      	adds	r7, #40	; 0x28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	fe00e800 	.word	0xfe00e800

08006b18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	607b      	str	r3, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	817b      	strh	r3, [r7, #10]
 8006b26:	4613      	mov	r3, r2
 8006b28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b2a:	897b      	ldrh	r3, [r7, #10]
 8006b2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b30:	7a7b      	ldrb	r3, [r7, #9]
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	0d5b      	lsrs	r3, r3, #21
 8006b52:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b56:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <I2C_TransferConfig+0x60>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	ea02 0103 	and.w	r1, r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b6a:	bf00      	nop
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	03ff63ff 	.word	0x03ff63ff

08006b7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d138      	bne.n	8006c04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e032      	b.n	8006c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2224      	movs	r2, #36	; 0x24
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0201 	bic.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6819      	ldr	r1, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e000      	b.n	8006c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c04:	2302      	movs	r3, #2
  }
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b085      	sub	sp, #20
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d139      	bne.n	8006c9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e033      	b.n	8006c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2224      	movs	r2, #36	; 0x24
 8006c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e000      	b.n	8006c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
  }
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
	...

08006cac <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ce4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb8:	4a0a      	ldr	r2, [pc, #40]	; (8006ce4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006cba:	f043 0301 	orr.w	r3, r3, #1
 8006cbe:	6613      	str	r3, [r2, #96]	; 0x60
 8006cc0:	4b08      	ldr	r3, [pc, #32]	; (8006ce4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	4905      	ldr	r1, [pc, #20]	; (8006ce8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	604b      	str	r3, [r1, #4]
}
 8006cd8:	bf00      	nop
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	40021000 	.word	0x40021000
 8006ce8:	40010000 	.word	0x40010000

08006cec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cf0:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a04      	ldr	r2, [pc, #16]	; (8006d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cfa:	6013      	str	r3, [r2, #0]
}
 8006cfc:	bf00      	nop
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40007000 	.word	0x40007000

08006d0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006d10:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <HAL_PWREx_GetVoltageRange+0x18>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	40007000 	.word	0x40007000

08006d28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d36:	d130      	bne.n	8006d9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d38:	4b23      	ldr	r3, [pc, #140]	; (8006dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d44:	d038      	beq.n	8006db8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d46:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d4e:	4a1e      	ldr	r2, [pc, #120]	; (8006dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d56:	4b1d      	ldr	r3, [pc, #116]	; (8006dcc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2232      	movs	r2, #50	; 0x32
 8006d5c:	fb02 f303 	mul.w	r3, r2, r3
 8006d60:	4a1b      	ldr	r2, [pc, #108]	; (8006dd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	0c9b      	lsrs	r3, r3, #18
 8006d68:	3301      	adds	r3, #1
 8006d6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d6c:	e002      	b.n	8006d74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d74:	4b14      	ldr	r3, [pc, #80]	; (8006dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d80:	d102      	bne.n	8006d88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1f2      	bne.n	8006d6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d88:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d94:	d110      	bne.n	8006db8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e00f      	b.n	8006dba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da6:	d007      	beq.n	8006db8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006da8:	4b07      	ldr	r3, [pc, #28]	; (8006dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006db0:	4a05      	ldr	r2, [pc, #20]	; (8006dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006db6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	40007000 	.word	0x40007000
 8006dcc:	2000003c 	.word	0x2000003c
 8006dd0:	431bde83 	.word	0x431bde83

08006dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d102      	bne.n	8006de8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f000 bc02 	b.w	80075ec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006de8:	4b96      	ldr	r3, [pc, #600]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 030c 	and.w	r3, r3, #12
 8006df0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006df2:	4b94      	ldr	r3, [pc, #592]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 80e4 	beq.w	8006fd2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d007      	beq.n	8006e20 <HAL_RCC_OscConfig+0x4c>
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	2b0c      	cmp	r3, #12
 8006e14:	f040 808b 	bne.w	8006f2e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	f040 8087 	bne.w	8006f2e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e20:	4b88      	ldr	r3, [pc, #544]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <HAL_RCC_OscConfig+0x64>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e3d9      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a1a      	ldr	r2, [r3, #32]
 8006e3c:	4b81      	ldr	r3, [pc, #516]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <HAL_RCC_OscConfig+0x7e>
 8006e48:	4b7e      	ldr	r3, [pc, #504]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e50:	e005      	b.n	8006e5e <HAL_RCC_OscConfig+0x8a>
 8006e52:	4b7c      	ldr	r3, [pc, #496]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e58:	091b      	lsrs	r3, r3, #4
 8006e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d223      	bcs.n	8006eaa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 fdbe 	bl	80079e8 <RCC_SetFlashLatencyFromMSIRange>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e3ba      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e76:	4b73      	ldr	r3, [pc, #460]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a72      	ldr	r2, [pc, #456]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006e7c:	f043 0308 	orr.w	r3, r3, #8
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	4b70      	ldr	r3, [pc, #448]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	496d      	ldr	r1, [pc, #436]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e94:	4b6b      	ldr	r3, [pc, #428]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	4968      	ldr	r1, [pc, #416]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	604b      	str	r3, [r1, #4]
 8006ea8:	e025      	b.n	8006ef6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006eaa:	4b66      	ldr	r3, [pc, #408]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a65      	ldr	r2, [pc, #404]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006eb0:	f043 0308 	orr.w	r3, r3, #8
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	4b63      	ldr	r3, [pc, #396]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	4960      	ldr	r1, [pc, #384]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ec8:	4b5e      	ldr	r3, [pc, #376]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	021b      	lsls	r3, r3, #8
 8006ed6:	495b      	ldr	r1, [pc, #364]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 fd7e 	bl	80079e8 <RCC_SetFlashLatencyFromMSIRange>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e37a      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ef6:	f000 fc81 	bl	80077fc <HAL_RCC_GetSysClockFreq>
 8006efa:	4602      	mov	r2, r0
 8006efc:	4b51      	ldr	r3, [pc, #324]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	091b      	lsrs	r3, r3, #4
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	4950      	ldr	r1, [pc, #320]	; (8007048 <HAL_RCC_OscConfig+0x274>)
 8006f08:	5ccb      	ldrb	r3, [r1, r3]
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f12:	4a4e      	ldr	r2, [pc, #312]	; (800704c <HAL_RCC_OscConfig+0x278>)
 8006f14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006f16:	4b4e      	ldr	r3, [pc, #312]	; (8007050 <HAL_RCC_OscConfig+0x27c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fc ff62 	bl	8003de4 <HAL_InitTick>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d052      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	e35e      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d032      	beq.n	8006f9c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f36:	4b43      	ldr	r3, [pc, #268]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a42      	ldr	r2, [pc, #264]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006f3c:	f043 0301 	orr.w	r3, r3, #1
 8006f40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f42:	f7fd f89d 	bl	8004080 <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f4a:	f7fd f899 	bl	8004080 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e347      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f5c:	4b39      	ldr	r3, [pc, #228]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0f0      	beq.n	8006f4a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f68:	4b36      	ldr	r3, [pc, #216]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a35      	ldr	r2, [pc, #212]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006f6e:	f043 0308 	orr.w	r3, r3, #8
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	4b33      	ldr	r3, [pc, #204]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	4930      	ldr	r1, [pc, #192]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f86:	4b2f      	ldr	r3, [pc, #188]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	021b      	lsls	r3, r3, #8
 8006f94:	492b      	ldr	r1, [pc, #172]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	604b      	str	r3, [r1, #4]
 8006f9a:	e01a      	b.n	8006fd2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f9c:	4b29      	ldr	r3, [pc, #164]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a28      	ldr	r2, [pc, #160]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006fa2:	f023 0301 	bic.w	r3, r3, #1
 8006fa6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fa8:	f7fd f86a 	bl	8004080 <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fb0:	f7fd f866 	bl	8004080 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e314      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006fc2:	4b20      	ldr	r3, [pc, #128]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f0      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x1dc>
 8006fce:	e000      	b.n	8006fd2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d073      	beq.n	80070c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d005      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x21c>
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b0c      	cmp	r3, #12
 8006fe8:	d10e      	bne.n	8007008 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d10b      	bne.n	8007008 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff0:	4b14      	ldr	r3, [pc, #80]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d063      	beq.n	80070c4 <HAL_RCC_OscConfig+0x2f0>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d15f      	bne.n	80070c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e2f1      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007010:	d106      	bne.n	8007020 <HAL_RCC_OscConfig+0x24c>
 8007012:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a0b      	ldr	r2, [pc, #44]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8007018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	e025      	b.n	800706c <HAL_RCC_OscConfig+0x298>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007028:	d114      	bne.n	8007054 <HAL_RCC_OscConfig+0x280>
 800702a:	4b06      	ldr	r3, [pc, #24]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a05      	ldr	r2, [pc, #20]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8007030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	4b03      	ldr	r3, [pc, #12]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a02      	ldr	r2, [pc, #8]	; (8007044 <HAL_RCC_OscConfig+0x270>)
 800703c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	e013      	b.n	800706c <HAL_RCC_OscConfig+0x298>
 8007044:	40021000 	.word	0x40021000
 8007048:	0800f770 	.word	0x0800f770
 800704c:	2000003c 	.word	0x2000003c
 8007050:	20000040 	.word	0x20000040
 8007054:	4ba0      	ldr	r3, [pc, #640]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a9f      	ldr	r2, [pc, #636]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 800705a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	4b9d      	ldr	r3, [pc, #628]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a9c      	ldr	r2, [pc, #624]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 8007066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800706a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d013      	beq.n	800709c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007074:	f7fd f804 	bl	8004080 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800707c:	f7fd f800 	bl	8004080 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b64      	cmp	r3, #100	; 0x64
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e2ae      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800708e:	4b92      	ldr	r3, [pc, #584]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0f0      	beq.n	800707c <HAL_RCC_OscConfig+0x2a8>
 800709a:	e014      	b.n	80070c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709c:	f7fc fff0 	bl	8004080 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070a4:	f7fc ffec 	bl	8004080 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b64      	cmp	r3, #100	; 0x64
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e29a      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070b6:	4b88      	ldr	r3, [pc, #544]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f0      	bne.n	80070a4 <HAL_RCC_OscConfig+0x2d0>
 80070c2:	e000      	b.n	80070c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d060      	beq.n	8007194 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d005      	beq.n	80070e4 <HAL_RCC_OscConfig+0x310>
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2b0c      	cmp	r3, #12
 80070dc:	d119      	bne.n	8007112 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d116      	bne.n	8007112 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070e4:	4b7c      	ldr	r3, [pc, #496]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d005      	beq.n	80070fc <HAL_RCC_OscConfig+0x328>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e277      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070fc:	4b76      	ldr	r3, [pc, #472]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	061b      	lsls	r3, r3, #24
 800710a:	4973      	ldr	r1, [pc, #460]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 800710c:	4313      	orrs	r3, r2
 800710e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007110:	e040      	b.n	8007194 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d023      	beq.n	8007162 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800711a:	4b6f      	ldr	r3, [pc, #444]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a6e      	ldr	r2, [pc, #440]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 8007120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007126:	f7fc ffab 	bl	8004080 <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800712c:	e008      	b.n	8007140 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800712e:	f7fc ffa7 	bl	8004080 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d901      	bls.n	8007140 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e255      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007140:	4b65      	ldr	r3, [pc, #404]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0f0      	beq.n	800712e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800714c:	4b62      	ldr	r3, [pc, #392]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	061b      	lsls	r3, r3, #24
 800715a:	495f      	ldr	r1, [pc, #380]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 800715c:	4313      	orrs	r3, r2
 800715e:	604b      	str	r3, [r1, #4]
 8007160:	e018      	b.n	8007194 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007162:	4b5d      	ldr	r3, [pc, #372]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a5c      	ldr	r2, [pc, #368]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 8007168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800716c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716e:	f7fc ff87 	bl	8004080 <HAL_GetTick>
 8007172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007174:	e008      	b.n	8007188 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007176:	f7fc ff83 	bl	8004080 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d901      	bls.n	8007188 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e231      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007188:	4b53      	ldr	r3, [pc, #332]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1f0      	bne.n	8007176 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0308 	and.w	r3, r3, #8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d03c      	beq.n	800721a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01c      	beq.n	80071e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071a8:	4b4b      	ldr	r3, [pc, #300]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 80071aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071ae:	4a4a      	ldr	r2, [pc, #296]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 80071b0:	f043 0301 	orr.w	r3, r3, #1
 80071b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b8:	f7fc ff62 	bl	8004080 <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071c0:	f7fc ff5e 	bl	8004080 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e20c      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071d2:	4b41      	ldr	r3, [pc, #260]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 80071d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0ef      	beq.n	80071c0 <HAL_RCC_OscConfig+0x3ec>
 80071e0:	e01b      	b.n	800721a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071e2:	4b3d      	ldr	r3, [pc, #244]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 80071e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071e8:	4a3b      	ldr	r2, [pc, #236]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 80071ea:	f023 0301 	bic.w	r3, r3, #1
 80071ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f2:	f7fc ff45 	bl	8004080 <HAL_GetTick>
 80071f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071f8:	e008      	b.n	800720c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071fa:	f7fc ff41 	bl	8004080 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d901      	bls.n	800720c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e1ef      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800720c:	4b32      	ldr	r3, [pc, #200]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 800720e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1ef      	bne.n	80071fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0304 	and.w	r3, r3, #4
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 80a6 	beq.w	8007374 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007228:	2300      	movs	r3, #0
 800722a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800722c:	4b2a      	ldr	r3, [pc, #168]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 800722e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10d      	bne.n	8007254 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007238:	4b27      	ldr	r3, [pc, #156]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 800723a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723c:	4a26      	ldr	r2, [pc, #152]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 800723e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007242:	6593      	str	r3, [r2, #88]	; 0x58
 8007244:	4b24      	ldr	r3, [pc, #144]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 8007246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007250:	2301      	movs	r3, #1
 8007252:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007254:	4b21      	ldr	r3, [pc, #132]	; (80072dc <HAL_RCC_OscConfig+0x508>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725c:	2b00      	cmp	r3, #0
 800725e:	d118      	bne.n	8007292 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007260:	4b1e      	ldr	r3, [pc, #120]	; (80072dc <HAL_RCC_OscConfig+0x508>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a1d      	ldr	r2, [pc, #116]	; (80072dc <HAL_RCC_OscConfig+0x508>)
 8007266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800726a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800726c:	f7fc ff08 	bl	8004080 <HAL_GetTick>
 8007270:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007272:	e008      	b.n	8007286 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007274:	f7fc ff04 	bl	8004080 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e1b2      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007286:	4b15      	ldr	r3, [pc, #84]	; (80072dc <HAL_RCC_OscConfig+0x508>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0f0      	beq.n	8007274 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d108      	bne.n	80072ac <HAL_RCC_OscConfig+0x4d8>
 800729a:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 800729c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a0:	4a0d      	ldr	r2, [pc, #52]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 80072a2:	f043 0301 	orr.w	r3, r3, #1
 80072a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072aa:	e029      	b.n	8007300 <HAL_RCC_OscConfig+0x52c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	2b05      	cmp	r3, #5
 80072b2:	d115      	bne.n	80072e0 <HAL_RCC_OscConfig+0x50c>
 80072b4:	4b08      	ldr	r3, [pc, #32]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 80072b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ba:	4a07      	ldr	r2, [pc, #28]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 80072bc:	f043 0304 	orr.w	r3, r3, #4
 80072c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072c4:	4b04      	ldr	r3, [pc, #16]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 80072c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ca:	4a03      	ldr	r2, [pc, #12]	; (80072d8 <HAL_RCC_OscConfig+0x504>)
 80072cc:	f043 0301 	orr.w	r3, r3, #1
 80072d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072d4:	e014      	b.n	8007300 <HAL_RCC_OscConfig+0x52c>
 80072d6:	bf00      	nop
 80072d8:	40021000 	.word	0x40021000
 80072dc:	40007000 	.word	0x40007000
 80072e0:	4b9a      	ldr	r3, [pc, #616]	; (800754c <HAL_RCC_OscConfig+0x778>)
 80072e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e6:	4a99      	ldr	r2, [pc, #612]	; (800754c <HAL_RCC_OscConfig+0x778>)
 80072e8:	f023 0301 	bic.w	r3, r3, #1
 80072ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072f0:	4b96      	ldr	r3, [pc, #600]	; (800754c <HAL_RCC_OscConfig+0x778>)
 80072f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f6:	4a95      	ldr	r2, [pc, #596]	; (800754c <HAL_RCC_OscConfig+0x778>)
 80072f8:	f023 0304 	bic.w	r3, r3, #4
 80072fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d016      	beq.n	8007336 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007308:	f7fc feba 	bl	8004080 <HAL_GetTick>
 800730c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800730e:	e00a      	b.n	8007326 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007310:	f7fc feb6 	bl	8004080 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	f241 3288 	movw	r2, #5000	; 0x1388
 800731e:	4293      	cmp	r3, r2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e162      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007326:	4b89      	ldr	r3, [pc, #548]	; (800754c <HAL_RCC_OscConfig+0x778>)
 8007328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d0ed      	beq.n	8007310 <HAL_RCC_OscConfig+0x53c>
 8007334:	e015      	b.n	8007362 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007336:	f7fc fea3 	bl	8004080 <HAL_GetTick>
 800733a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800733c:	e00a      	b.n	8007354 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800733e:	f7fc fe9f 	bl	8004080 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	f241 3288 	movw	r2, #5000	; 0x1388
 800734c:	4293      	cmp	r3, r2
 800734e:	d901      	bls.n	8007354 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e14b      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007354:	4b7d      	ldr	r3, [pc, #500]	; (800754c <HAL_RCC_OscConfig+0x778>)
 8007356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1ed      	bne.n	800733e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007362:	7ffb      	ldrb	r3, [r7, #31]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d105      	bne.n	8007374 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007368:	4b78      	ldr	r3, [pc, #480]	; (800754c <HAL_RCC_OscConfig+0x778>)
 800736a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736c:	4a77      	ldr	r2, [pc, #476]	; (800754c <HAL_RCC_OscConfig+0x778>)
 800736e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007372:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0320 	and.w	r3, r3, #32
 800737c:	2b00      	cmp	r3, #0
 800737e:	d03c      	beq.n	80073fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01c      	beq.n	80073c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007388:	4b70      	ldr	r3, [pc, #448]	; (800754c <HAL_RCC_OscConfig+0x778>)
 800738a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800738e:	4a6f      	ldr	r2, [pc, #444]	; (800754c <HAL_RCC_OscConfig+0x778>)
 8007390:	f043 0301 	orr.w	r3, r3, #1
 8007394:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007398:	f7fc fe72 	bl	8004080 <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073a0:	f7fc fe6e 	bl	8004080 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e11c      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073b2:	4b66      	ldr	r3, [pc, #408]	; (800754c <HAL_RCC_OscConfig+0x778>)
 80073b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073b8:	f003 0302 	and.w	r3, r3, #2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0ef      	beq.n	80073a0 <HAL_RCC_OscConfig+0x5cc>
 80073c0:	e01b      	b.n	80073fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073c2:	4b62      	ldr	r3, [pc, #392]	; (800754c <HAL_RCC_OscConfig+0x778>)
 80073c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073c8:	4a60      	ldr	r2, [pc, #384]	; (800754c <HAL_RCC_OscConfig+0x778>)
 80073ca:	f023 0301 	bic.w	r3, r3, #1
 80073ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d2:	f7fc fe55 	bl	8004080 <HAL_GetTick>
 80073d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073d8:	e008      	b.n	80073ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073da:	f7fc fe51 	bl	8004080 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e0ff      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073ec:	4b57      	ldr	r3, [pc, #348]	; (800754c <HAL_RCC_OscConfig+0x778>)
 80073ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1ef      	bne.n	80073da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 80f3 	beq.w	80075ea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007408:	2b02      	cmp	r3, #2
 800740a:	f040 80c9 	bne.w	80075a0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800740e:	4b4f      	ldr	r3, [pc, #316]	; (800754c <HAL_RCC_OscConfig+0x778>)
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f003 0203 	and.w	r2, r3, #3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	429a      	cmp	r2, r3
 8007420:	d12c      	bne.n	800747c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	3b01      	subs	r3, #1
 800742e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007430:	429a      	cmp	r2, r3
 8007432:	d123      	bne.n	800747c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007440:	429a      	cmp	r2, r3
 8007442:	d11b      	bne.n	800747c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007450:	429a      	cmp	r2, r3
 8007452:	d113      	bne.n	800747c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	3b01      	subs	r3, #1
 8007462:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007464:	429a      	cmp	r2, r3
 8007466:	d109      	bne.n	800747c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	085b      	lsrs	r3, r3, #1
 8007474:	3b01      	subs	r3, #1
 8007476:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007478:	429a      	cmp	r2, r3
 800747a:	d06b      	beq.n	8007554 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	2b0c      	cmp	r3, #12
 8007480:	d062      	beq.n	8007548 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007482:	4b32      	ldr	r3, [pc, #200]	; (800754c <HAL_RCC_OscConfig+0x778>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e0ac      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007492:	4b2e      	ldr	r3, [pc, #184]	; (800754c <HAL_RCC_OscConfig+0x778>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a2d      	ldr	r2, [pc, #180]	; (800754c <HAL_RCC_OscConfig+0x778>)
 8007498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800749c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800749e:	f7fc fdef 	bl	8004080 <HAL_GetTick>
 80074a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a4:	e008      	b.n	80074b8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a6:	f7fc fdeb 	bl	8004080 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d901      	bls.n	80074b8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e099      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074b8:	4b24      	ldr	r3, [pc, #144]	; (800754c <HAL_RCC_OscConfig+0x778>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1f0      	bne.n	80074a6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074c4:	4b21      	ldr	r3, [pc, #132]	; (800754c <HAL_RCC_OscConfig+0x778>)
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	4b21      	ldr	r3, [pc, #132]	; (8007550 <HAL_RCC_OscConfig+0x77c>)
 80074ca:	4013      	ands	r3, r2
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80074d4:	3a01      	subs	r2, #1
 80074d6:	0112      	lsls	r2, r2, #4
 80074d8:	4311      	orrs	r1, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074de:	0212      	lsls	r2, r2, #8
 80074e0:	4311      	orrs	r1, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80074e6:	0852      	lsrs	r2, r2, #1
 80074e8:	3a01      	subs	r2, #1
 80074ea:	0552      	lsls	r2, r2, #21
 80074ec:	4311      	orrs	r1, r2
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80074f2:	0852      	lsrs	r2, r2, #1
 80074f4:	3a01      	subs	r2, #1
 80074f6:	0652      	lsls	r2, r2, #25
 80074f8:	4311      	orrs	r1, r2
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074fe:	06d2      	lsls	r2, r2, #27
 8007500:	430a      	orrs	r2, r1
 8007502:	4912      	ldr	r1, [pc, #72]	; (800754c <HAL_RCC_OscConfig+0x778>)
 8007504:	4313      	orrs	r3, r2
 8007506:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007508:	4b10      	ldr	r3, [pc, #64]	; (800754c <HAL_RCC_OscConfig+0x778>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a0f      	ldr	r2, [pc, #60]	; (800754c <HAL_RCC_OscConfig+0x778>)
 800750e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007512:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007514:	4b0d      	ldr	r3, [pc, #52]	; (800754c <HAL_RCC_OscConfig+0x778>)
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	4a0c      	ldr	r2, [pc, #48]	; (800754c <HAL_RCC_OscConfig+0x778>)
 800751a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800751e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007520:	f7fc fdae 	bl	8004080 <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007528:	f7fc fdaa 	bl	8004080 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e058      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800753a:	4b04      	ldr	r3, [pc, #16]	; (800754c <HAL_RCC_OscConfig+0x778>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f0      	beq.n	8007528 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007546:	e050      	b.n	80075ea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e04f      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
 800754c:	40021000 	.word	0x40021000
 8007550:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007554:	4b27      	ldr	r3, [pc, #156]	; (80075f4 <HAL_RCC_OscConfig+0x820>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d144      	bne.n	80075ea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007560:	4b24      	ldr	r3, [pc, #144]	; (80075f4 <HAL_RCC_OscConfig+0x820>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a23      	ldr	r2, [pc, #140]	; (80075f4 <HAL_RCC_OscConfig+0x820>)
 8007566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800756a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800756c:	4b21      	ldr	r3, [pc, #132]	; (80075f4 <HAL_RCC_OscConfig+0x820>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	4a20      	ldr	r2, [pc, #128]	; (80075f4 <HAL_RCC_OscConfig+0x820>)
 8007572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007576:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007578:	f7fc fd82 	bl	8004080 <HAL_GetTick>
 800757c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800757e:	e008      	b.n	8007592 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007580:	f7fc fd7e 	bl	8004080 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d901      	bls.n	8007592 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e02c      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007592:	4b18      	ldr	r3, [pc, #96]	; (80075f4 <HAL_RCC_OscConfig+0x820>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0f0      	beq.n	8007580 <HAL_RCC_OscConfig+0x7ac>
 800759e:	e024      	b.n	80075ea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	2b0c      	cmp	r3, #12
 80075a4:	d01f      	beq.n	80075e6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075a6:	4b13      	ldr	r3, [pc, #76]	; (80075f4 <HAL_RCC_OscConfig+0x820>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a12      	ldr	r2, [pc, #72]	; (80075f4 <HAL_RCC_OscConfig+0x820>)
 80075ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b2:	f7fc fd65 	bl	8004080 <HAL_GetTick>
 80075b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075b8:	e008      	b.n	80075cc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ba:	f7fc fd61 	bl	8004080 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e00f      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075cc:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <HAL_RCC_OscConfig+0x820>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f0      	bne.n	80075ba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80075d8:	4b06      	ldr	r3, [pc, #24]	; (80075f4 <HAL_RCC_OscConfig+0x820>)
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	4905      	ldr	r1, [pc, #20]	; (80075f4 <HAL_RCC_OscConfig+0x820>)
 80075de:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <HAL_RCC_OscConfig+0x824>)
 80075e0:	4013      	ands	r3, r2
 80075e2:	60cb      	str	r3, [r1, #12]
 80075e4:	e001      	b.n	80075ea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3720      	adds	r7, #32
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	40021000 	.word	0x40021000
 80075f8:	feeefffc 	.word	0xfeeefffc

080075fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e0e7      	b.n	80077e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007610:	4b75      	ldr	r3, [pc, #468]	; (80077e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d910      	bls.n	8007640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761e:	4b72      	ldr	r3, [pc, #456]	; (80077e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f023 0207 	bic.w	r2, r3, #7
 8007626:	4970      	ldr	r1, [pc, #448]	; (80077e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	4313      	orrs	r3, r2
 800762c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800762e:	4b6e      	ldr	r3, [pc, #440]	; (80077e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d001      	beq.n	8007640 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e0cf      	b.n	80077e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d010      	beq.n	800766e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	4b66      	ldr	r3, [pc, #408]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007658:	429a      	cmp	r2, r3
 800765a:	d908      	bls.n	800766e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800765c:	4b63      	ldr	r3, [pc, #396]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	4960      	ldr	r1, [pc, #384]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 800766a:	4313      	orrs	r3, r2
 800766c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d04c      	beq.n	8007714 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b03      	cmp	r3, #3
 8007680:	d107      	bne.n	8007692 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007682:	4b5a      	ldr	r3, [pc, #360]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d121      	bne.n	80076d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e0a6      	b.n	80077e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2b02      	cmp	r3, #2
 8007698:	d107      	bne.n	80076aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800769a:	4b54      	ldr	r3, [pc, #336]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d115      	bne.n	80076d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e09a      	b.n	80077e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d107      	bne.n	80076c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076b2:	4b4e      	ldr	r3, [pc, #312]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d109      	bne.n	80076d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e08e      	b.n	80077e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076c2:	4b4a      	ldr	r3, [pc, #296]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e086      	b.n	80077e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076d2:	4b46      	ldr	r3, [pc, #280]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f023 0203 	bic.w	r2, r3, #3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	4943      	ldr	r1, [pc, #268]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076e4:	f7fc fccc 	bl	8004080 <HAL_GetTick>
 80076e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ea:	e00a      	b.n	8007702 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076ec:	f7fc fcc8 	bl	8004080 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e06e      	b.n	80077e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007702:	4b3a      	ldr	r3, [pc, #232]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 020c 	and.w	r2, r3, #12
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	429a      	cmp	r2, r3
 8007712:	d1eb      	bne.n	80076ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0302 	and.w	r3, r3, #2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d010      	beq.n	8007742 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	4b31      	ldr	r3, [pc, #196]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800772c:	429a      	cmp	r2, r3
 800772e:	d208      	bcs.n	8007742 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007730:	4b2e      	ldr	r3, [pc, #184]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	492b      	ldr	r1, [pc, #172]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 800773e:	4313      	orrs	r3, r2
 8007740:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007742:	4b29      	ldr	r3, [pc, #164]	; (80077e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d210      	bcs.n	8007772 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007750:	4b25      	ldr	r3, [pc, #148]	; (80077e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f023 0207 	bic.w	r2, r3, #7
 8007758:	4923      	ldr	r1, [pc, #140]	; (80077e8 <HAL_RCC_ClockConfig+0x1ec>)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	4313      	orrs	r3, r2
 800775e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007760:	4b21      	ldr	r3, [pc, #132]	; (80077e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d001      	beq.n	8007772 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e036      	b.n	80077e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b00      	cmp	r3, #0
 800777c:	d008      	beq.n	8007790 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800777e:	4b1b      	ldr	r3, [pc, #108]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	4918      	ldr	r1, [pc, #96]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 800778c:	4313      	orrs	r3, r2
 800778e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d009      	beq.n	80077b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800779c:	4b13      	ldr	r3, [pc, #76]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	4910      	ldr	r1, [pc, #64]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077b0:	f000 f824 	bl	80077fc <HAL_RCC_GetSysClockFreq>
 80077b4:	4602      	mov	r2, r0
 80077b6:	4b0d      	ldr	r3, [pc, #52]	; (80077ec <HAL_RCC_ClockConfig+0x1f0>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	091b      	lsrs	r3, r3, #4
 80077bc:	f003 030f 	and.w	r3, r3, #15
 80077c0:	490b      	ldr	r1, [pc, #44]	; (80077f0 <HAL_RCC_ClockConfig+0x1f4>)
 80077c2:	5ccb      	ldrb	r3, [r1, r3]
 80077c4:	f003 031f 	and.w	r3, r3, #31
 80077c8:	fa22 f303 	lsr.w	r3, r2, r3
 80077cc:	4a09      	ldr	r2, [pc, #36]	; (80077f4 <HAL_RCC_ClockConfig+0x1f8>)
 80077ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80077d0:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <HAL_RCC_ClockConfig+0x1fc>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fc fb05 	bl	8003de4 <HAL_InitTick>
 80077da:	4603      	mov	r3, r0
 80077dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80077de:	7afb      	ldrb	r3, [r7, #11]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	40022000 	.word	0x40022000
 80077ec:	40021000 	.word	0x40021000
 80077f0:	0800f770 	.word	0x0800f770
 80077f4:	2000003c 	.word	0x2000003c
 80077f8:	20000040 	.word	0x20000040

080077fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b089      	sub	sp, #36	; 0x24
 8007800:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	61fb      	str	r3, [r7, #28]
 8007806:	2300      	movs	r3, #0
 8007808:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800780a:	4b3e      	ldr	r3, [pc, #248]	; (8007904 <HAL_RCC_GetSysClockFreq+0x108>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 030c 	and.w	r3, r3, #12
 8007812:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007814:	4b3b      	ldr	r3, [pc, #236]	; (8007904 <HAL_RCC_GetSysClockFreq+0x108>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f003 0303 	and.w	r3, r3, #3
 800781c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCC_GetSysClockFreq+0x34>
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b0c      	cmp	r3, #12
 8007828:	d121      	bne.n	800786e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d11e      	bne.n	800786e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007830:	4b34      	ldr	r3, [pc, #208]	; (8007904 <HAL_RCC_GetSysClockFreq+0x108>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	2b00      	cmp	r3, #0
 800783a:	d107      	bne.n	800784c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800783c:	4b31      	ldr	r3, [pc, #196]	; (8007904 <HAL_RCC_GetSysClockFreq+0x108>)
 800783e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007842:	0a1b      	lsrs	r3, r3, #8
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	61fb      	str	r3, [r7, #28]
 800784a:	e005      	b.n	8007858 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800784c:	4b2d      	ldr	r3, [pc, #180]	; (8007904 <HAL_RCC_GetSysClockFreq+0x108>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	091b      	lsrs	r3, r3, #4
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007858:	4a2b      	ldr	r2, [pc, #172]	; (8007908 <HAL_RCC_GetSysClockFreq+0x10c>)
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007860:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10d      	bne.n	8007884 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800786c:	e00a      	b.n	8007884 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b04      	cmp	r3, #4
 8007872:	d102      	bne.n	800787a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007874:	4b25      	ldr	r3, [pc, #148]	; (800790c <HAL_RCC_GetSysClockFreq+0x110>)
 8007876:	61bb      	str	r3, [r7, #24]
 8007878:	e004      	b.n	8007884 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	2b08      	cmp	r3, #8
 800787e:	d101      	bne.n	8007884 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007880:	4b23      	ldr	r3, [pc, #140]	; (8007910 <HAL_RCC_GetSysClockFreq+0x114>)
 8007882:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b0c      	cmp	r3, #12
 8007888:	d134      	bne.n	80078f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800788a:	4b1e      	ldr	r3, [pc, #120]	; (8007904 <HAL_RCC_GetSysClockFreq+0x108>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f003 0303 	and.w	r3, r3, #3
 8007892:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b02      	cmp	r3, #2
 8007898:	d003      	beq.n	80078a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b03      	cmp	r3, #3
 800789e:	d003      	beq.n	80078a8 <HAL_RCC_GetSysClockFreq+0xac>
 80078a0:	e005      	b.n	80078ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80078a2:	4b1a      	ldr	r3, [pc, #104]	; (800790c <HAL_RCC_GetSysClockFreq+0x110>)
 80078a4:	617b      	str	r3, [r7, #20]
      break;
 80078a6:	e005      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80078a8:	4b19      	ldr	r3, [pc, #100]	; (8007910 <HAL_RCC_GetSysClockFreq+0x114>)
 80078aa:	617b      	str	r3, [r7, #20]
      break;
 80078ac:	e002      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	617b      	str	r3, [r7, #20]
      break;
 80078b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078b4:	4b13      	ldr	r3, [pc, #76]	; (8007904 <HAL_RCC_GetSysClockFreq+0x108>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	091b      	lsrs	r3, r3, #4
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	3301      	adds	r3, #1
 80078c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80078c2:	4b10      	ldr	r3, [pc, #64]	; (8007904 <HAL_RCC_GetSysClockFreq+0x108>)
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	0a1b      	lsrs	r3, r3, #8
 80078c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	fb03 f202 	mul.w	r2, r3, r2
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078da:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <HAL_RCC_GetSysClockFreq+0x108>)
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	0e5b      	lsrs	r3, r3, #25
 80078e0:	f003 0303 	and.w	r3, r3, #3
 80078e4:	3301      	adds	r3, #1
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80078f4:	69bb      	ldr	r3, [r7, #24]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3724      	adds	r7, #36	; 0x24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	40021000 	.word	0x40021000
 8007908:	0800f788 	.word	0x0800f788
 800790c:	00f42400 	.word	0x00f42400
 8007910:	007a1200 	.word	0x007a1200

08007914 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007914:	b480      	push	{r7}
 8007916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007918:	4b03      	ldr	r3, [pc, #12]	; (8007928 <HAL_RCC_GetHCLKFreq+0x14>)
 800791a:	681b      	ldr	r3, [r3, #0]
}
 800791c:	4618      	mov	r0, r3
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	2000003c 	.word	0x2000003c

0800792c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007930:	f7ff fff0 	bl	8007914 <HAL_RCC_GetHCLKFreq>
 8007934:	4602      	mov	r2, r0
 8007936:	4b06      	ldr	r3, [pc, #24]	; (8007950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	0a1b      	lsrs	r3, r3, #8
 800793c:	f003 0307 	and.w	r3, r3, #7
 8007940:	4904      	ldr	r1, [pc, #16]	; (8007954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007942:	5ccb      	ldrb	r3, [r1, r3]
 8007944:	f003 031f 	and.w	r3, r3, #31
 8007948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800794c:	4618      	mov	r0, r3
 800794e:	bd80      	pop	{r7, pc}
 8007950:	40021000 	.word	0x40021000
 8007954:	0800f780 	.word	0x0800f780

08007958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800795c:	f7ff ffda 	bl	8007914 <HAL_RCC_GetHCLKFreq>
 8007960:	4602      	mov	r2, r0
 8007962:	4b06      	ldr	r3, [pc, #24]	; (800797c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	0adb      	lsrs	r3, r3, #11
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	4904      	ldr	r1, [pc, #16]	; (8007980 <HAL_RCC_GetPCLK2Freq+0x28>)
 800796e:	5ccb      	ldrb	r3, [r1, r3]
 8007970:	f003 031f 	and.w	r3, r3, #31
 8007974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007978:	4618      	mov	r0, r3
 800797a:	bd80      	pop	{r7, pc}
 800797c:	40021000 	.word	0x40021000
 8007980:	0800f780 	.word	0x0800f780

08007984 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	220f      	movs	r2, #15
 8007992:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007994:	4b12      	ldr	r3, [pc, #72]	; (80079e0 <HAL_RCC_GetClockConfig+0x5c>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 0203 	and.w	r2, r3, #3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80079a0:	4b0f      	ldr	r3, [pc, #60]	; (80079e0 <HAL_RCC_GetClockConfig+0x5c>)
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80079ac:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <HAL_RCC_GetClockConfig+0x5c>)
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80079b8:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <HAL_RCC_GetClockConfig+0x5c>)
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	08db      	lsrs	r3, r3, #3
 80079be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80079c6:	4b07      	ldr	r3, [pc, #28]	; (80079e4 <HAL_RCC_GetClockConfig+0x60>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0207 	and.w	r2, r3, #7
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	601a      	str	r2, [r3, #0]
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40021000 	.word	0x40021000
 80079e4:	40022000 	.word	0x40022000

080079e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80079f0:	2300      	movs	r3, #0
 80079f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80079f4:	4b2a      	ldr	r3, [pc, #168]	; (8007aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a00:	f7ff f984 	bl	8006d0c <HAL_PWREx_GetVoltageRange>
 8007a04:	6178      	str	r0, [r7, #20]
 8007a06:	e014      	b.n	8007a32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a08:	4b25      	ldr	r3, [pc, #148]	; (8007aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0c:	4a24      	ldr	r2, [pc, #144]	; (8007aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a12:	6593      	str	r3, [r2, #88]	; 0x58
 8007a14:	4b22      	ldr	r3, [pc, #136]	; (8007aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a20:	f7ff f974 	bl	8006d0c <HAL_PWREx_GetVoltageRange>
 8007a24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a26:	4b1e      	ldr	r3, [pc, #120]	; (8007aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2a:	4a1d      	ldr	r2, [pc, #116]	; (8007aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a38:	d10b      	bne.n	8007a52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b80      	cmp	r3, #128	; 0x80
 8007a3e:	d919      	bls.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2ba0      	cmp	r3, #160	; 0xa0
 8007a44:	d902      	bls.n	8007a4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a46:	2302      	movs	r3, #2
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	e013      	b.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	613b      	str	r3, [r7, #16]
 8007a50:	e010      	b.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b80      	cmp	r3, #128	; 0x80
 8007a56:	d902      	bls.n	8007a5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a58:	2303      	movs	r3, #3
 8007a5a:	613b      	str	r3, [r7, #16]
 8007a5c:	e00a      	b.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b80      	cmp	r3, #128	; 0x80
 8007a62:	d102      	bne.n	8007a6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a64:	2302      	movs	r3, #2
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	e004      	b.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b70      	cmp	r3, #112	; 0x70
 8007a6e:	d101      	bne.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a70:	2301      	movs	r3, #1
 8007a72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a74:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f023 0207 	bic.w	r2, r3, #7
 8007a7c:	4909      	ldr	r1, [pc, #36]	; (8007aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007a84:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d001      	beq.n	8007a96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e000      	b.n	8007a98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	40021000 	.word	0x40021000
 8007aa4:	40022000 	.word	0x40022000

08007aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d031      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007acc:	d01a      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007ace:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ad2:	d814      	bhi.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d009      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007adc:	d10f      	bne.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007ade:	4b5d      	ldr	r3, [pc, #372]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	4a5c      	ldr	r2, [pc, #368]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ae8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007aea:	e00c      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3304      	adds	r3, #4
 8007af0:	2100      	movs	r1, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 f9de 	bl	8007eb4 <RCCEx_PLLSAI1_Config>
 8007af8:	4603      	mov	r3, r0
 8007afa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007afc:	e003      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	74fb      	strb	r3, [r7, #19]
      break;
 8007b02:	e000      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b06:	7cfb      	ldrb	r3, [r7, #19]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10b      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b0c:	4b51      	ldr	r3, [pc, #324]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1a:	494e      	ldr	r1, [pc, #312]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b22:	e001      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b24:	7cfb      	ldrb	r3, [r7, #19]
 8007b26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 809e 	beq.w	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b36:	2300      	movs	r3, #0
 8007b38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b3a:	4b46      	ldr	r3, [pc, #280]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e000      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00d      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b50:	4b40      	ldr	r3, [pc, #256]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b54:	4a3f      	ldr	r2, [pc, #252]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8007b5c:	4b3d      	ldr	r3, [pc, #244]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b64:	60bb      	str	r3, [r7, #8]
 8007b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b6c:	4b3a      	ldr	r3, [pc, #232]	; (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a39      	ldr	r2, [pc, #228]	; (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b78:	f7fc fa82 	bl	8004080 <HAL_GetTick>
 8007b7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b7e:	e009      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b80:	f7fc fa7e 	bl	8004080 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d902      	bls.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	74fb      	strb	r3, [r7, #19]
        break;
 8007b92:	e005      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b94:	4b30      	ldr	r3, [pc, #192]	; (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d0ef      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007ba0:	7cfb      	ldrb	r3, [r7, #19]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d15a      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ba6:	4b2b      	ldr	r3, [pc, #172]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01e      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d019      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007bc2:	4b24      	ldr	r3, [pc, #144]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bcc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bce:	4b21      	ldr	r3, [pc, #132]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd4:	4a1f      	ldr	r2, [pc, #124]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007bde:	4b1d      	ldr	r3, [pc, #116]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be4:	4a1b      	ldr	r2, [pc, #108]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007bee:	4a19      	ldr	r2, [pc, #100]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d016      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c00:	f7fc fa3e 	bl	8004080 <HAL_GetTick>
 8007c04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c06:	e00b      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c08:	f7fc fa3a 	bl	8004080 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d902      	bls.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	74fb      	strb	r3, [r7, #19]
            break;
 8007c1e:	e006      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c20:	4b0c      	ldr	r3, [pc, #48]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0ec      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007c2e:	7cfb      	ldrb	r3, [r7, #19]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10b      	bne.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c34:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c42:	4904      	ldr	r1, [pc, #16]	; (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007c4a:	e009      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c4c:	7cfb      	ldrb	r3, [r7, #19]
 8007c4e:	74bb      	strb	r3, [r7, #18]
 8007c50:	e006      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007c52:	bf00      	nop
 8007c54:	40021000 	.word	0x40021000
 8007c58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5c:	7cfb      	ldrb	r3, [r7, #19]
 8007c5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c60:	7c7b      	ldrb	r3, [r7, #17]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d105      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c66:	4b8a      	ldr	r3, [pc, #552]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6a:	4a89      	ldr	r2, [pc, #548]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c7e:	4b84      	ldr	r3, [pc, #528]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c84:	f023 0203 	bic.w	r2, r3, #3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	4980      	ldr	r1, [pc, #512]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ca0:	4b7b      	ldr	r3, [pc, #492]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca6:	f023 020c 	bic.w	r2, r3, #12
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	4978      	ldr	r1, [pc, #480]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cc2:	4b73      	ldr	r3, [pc, #460]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd0:	496f      	ldr	r1, [pc, #444]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ce4:	4b6a      	ldr	r3, [pc, #424]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cea:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf2:	4967      	ldr	r1, [pc, #412]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d06:	4b62      	ldr	r3, [pc, #392]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d14:	495e      	ldr	r1, [pc, #376]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d28:	4b59      	ldr	r3, [pc, #356]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d36:	4956      	ldr	r1, [pc, #344]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d4a:	4b51      	ldr	r3, [pc, #324]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d58:	494d      	ldr	r1, [pc, #308]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d028      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d6c:	4b48      	ldr	r3, [pc, #288]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	4945      	ldr	r1, [pc, #276]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d8a:	d106      	bne.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d8c:	4b40      	ldr	r3, [pc, #256]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	4a3f      	ldr	r2, [pc, #252]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d96:	60d3      	str	r3, [r2, #12]
 8007d98:	e011      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007da2:	d10c      	bne.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3304      	adds	r3, #4
 8007da8:	2101      	movs	r1, #1
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f882 	bl	8007eb4 <RCCEx_PLLSAI1_Config>
 8007db0:	4603      	mov	r3, r0
 8007db2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007db4:	7cfb      	ldrb	r3, [r7, #19]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007dba:	7cfb      	ldrb	r3, [r7, #19]
 8007dbc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d028      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007dca:	4b31      	ldr	r3, [pc, #196]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd8:	492d      	ldr	r1, [pc, #180]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007de8:	d106      	bne.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dea:	4b29      	ldr	r3, [pc, #164]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	4a28      	ldr	r2, [pc, #160]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007df4:	60d3      	str	r3, [r2, #12]
 8007df6:	e011      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e00:	d10c      	bne.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3304      	adds	r3, #4
 8007e06:	2101      	movs	r1, #1
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 f853 	bl	8007eb4 <RCCEx_PLLSAI1_Config>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e12:	7cfb      	ldrb	r3, [r7, #19]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8007e18:	7cfb      	ldrb	r3, [r7, #19]
 8007e1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d01c      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e28:	4b19      	ldr	r3, [pc, #100]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e36:	4916      	ldr	r1, [pc, #88]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e46:	d10c      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	2102      	movs	r1, #2
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 f830 	bl	8007eb4 <RCCEx_PLLSAI1_Config>
 8007e54:	4603      	mov	r3, r0
 8007e56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e58:	7cfb      	ldrb	r3, [r7, #19]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007e5e:	7cfb      	ldrb	r3, [r7, #19]
 8007e60:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e6e:	4b08      	ldr	r3, [pc, #32]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e74:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e7c:	4904      	ldr	r1, [pc, #16]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007e84:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	40021000 	.word	0x40021000

08007e94 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007e98:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a04      	ldr	r2, [pc, #16]	; (8007eb0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007e9e:	f043 0304 	orr.w	r3, r3, #4
 8007ea2:	6013      	str	r3, [r2, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	40021000 	.word	0x40021000

08007eb4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007ec2:	4b74      	ldr	r3, [pc, #464]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d018      	beq.n	8007f00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007ece:	4b71      	ldr	r3, [pc, #452]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f003 0203 	and.w	r2, r3, #3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d10d      	bne.n	8007efa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
       ||
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007ee6:	4b6b      	ldr	r3, [pc, #428]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	091b      	lsrs	r3, r3, #4
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
       ||
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d047      	beq.n	8007f8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	73fb      	strb	r3, [r7, #15]
 8007efe:	e044      	b.n	8007f8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d018      	beq.n	8007f3a <RCCEx_PLLSAI1_Config+0x86>
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d825      	bhi.n	8007f58 <RCCEx_PLLSAI1_Config+0xa4>
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d002      	beq.n	8007f16 <RCCEx_PLLSAI1_Config+0x62>
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d009      	beq.n	8007f28 <RCCEx_PLLSAI1_Config+0x74>
 8007f14:	e020      	b.n	8007f58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007f16:	4b5f      	ldr	r3, [pc, #380]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d11d      	bne.n	8007f5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f26:	e01a      	b.n	8007f5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007f28:	4b5a      	ldr	r3, [pc, #360]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d116      	bne.n	8007f62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f38:	e013      	b.n	8007f62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007f3a:	4b56      	ldr	r3, [pc, #344]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10f      	bne.n	8007f66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f46:	4b53      	ldr	r3, [pc, #332]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d109      	bne.n	8007f66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f56:	e006      	b.n	8007f66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5c:	e004      	b.n	8007f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f5e:	bf00      	nop
 8007f60:	e002      	b.n	8007f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f62:	bf00      	nop
 8007f64:	e000      	b.n	8007f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f66:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10d      	bne.n	8007f8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007f6e:	4b49      	ldr	r3, [pc, #292]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6819      	ldr	r1, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	430b      	orrs	r3, r1
 8007f84:	4943      	ldr	r1, [pc, #268]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d17c      	bne.n	800808a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007f90:	4b40      	ldr	r3, [pc, #256]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a3f      	ldr	r2, [pc, #252]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f9c:	f7fc f870 	bl	8004080 <HAL_GetTick>
 8007fa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007fa2:	e009      	b.n	8007fb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007fa4:	f7fc f86c 	bl	8004080 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d902      	bls.n	8007fb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	73fb      	strb	r3, [r7, #15]
        break;
 8007fb6:	e005      	b.n	8007fc4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007fb8:	4b36      	ldr	r3, [pc, #216]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1ef      	bne.n	8007fa4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d15f      	bne.n	800808a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d110      	bne.n	8007ff2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007fd0:	4b30      	ldr	r3, [pc, #192]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007fd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6892      	ldr	r2, [r2, #8]
 8007fe0:	0211      	lsls	r1, r2, #8
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	68d2      	ldr	r2, [r2, #12]
 8007fe6:	06d2      	lsls	r2, r2, #27
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	492a      	ldr	r1, [pc, #168]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	610b      	str	r3, [r1, #16]
 8007ff0:	e027      	b.n	8008042 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d112      	bne.n	800801e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ff8:	4b26      	ldr	r3, [pc, #152]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008000:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6892      	ldr	r2, [r2, #8]
 8008008:	0211      	lsls	r1, r2, #8
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6912      	ldr	r2, [r2, #16]
 800800e:	0852      	lsrs	r2, r2, #1
 8008010:	3a01      	subs	r2, #1
 8008012:	0552      	lsls	r2, r2, #21
 8008014:	430a      	orrs	r2, r1
 8008016:	491f      	ldr	r1, [pc, #124]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008018:	4313      	orrs	r3, r2
 800801a:	610b      	str	r3, [r1, #16]
 800801c:	e011      	b.n	8008042 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800801e:	4b1d      	ldr	r3, [pc, #116]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008026:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	6892      	ldr	r2, [r2, #8]
 800802e:	0211      	lsls	r1, r2, #8
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	6952      	ldr	r2, [r2, #20]
 8008034:	0852      	lsrs	r2, r2, #1
 8008036:	3a01      	subs	r2, #1
 8008038:	0652      	lsls	r2, r2, #25
 800803a:	430a      	orrs	r2, r1
 800803c:	4915      	ldr	r1, [pc, #84]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 800803e:	4313      	orrs	r3, r2
 8008040:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008042:	4b14      	ldr	r3, [pc, #80]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a13      	ldr	r2, [pc, #76]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008048:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800804c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800804e:	f7fc f817 	bl	8004080 <HAL_GetTick>
 8008052:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008054:	e009      	b.n	800806a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008056:	f7fc f813 	bl	8004080 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d902      	bls.n	800806a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	73fb      	strb	r3, [r7, #15]
          break;
 8008068:	e005      	b.n	8008076 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800806a:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0ef      	beq.n	8008056 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d106      	bne.n	800808a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800807c:	4b05      	ldr	r3, [pc, #20]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 800807e:	691a      	ldr	r2, [r3, #16]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	4903      	ldr	r1, [pc, #12]	; (8008094 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008086:	4313      	orrs	r3, r2
 8008088:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	40021000 	.word	0x40021000

08008098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e049      	b.n	800813e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fb fdec 	bl	8003c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4619      	mov	r1, r3
 80080d6:	4610      	mov	r0, r2
 80080d8:	f000 fa1e 	bl	8008518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b01      	cmp	r3, #1
 800815a:	d001      	beq.n	8008160 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e033      	b.n	80081c8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a19      	ldr	r2, [pc, #100]	; (80081d4 <HAL_TIM_Base_Start+0x8c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d009      	beq.n	8008186 <HAL_TIM_Base_Start+0x3e>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800817a:	d004      	beq.n	8008186 <HAL_TIM_Base_Start+0x3e>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a15      	ldr	r2, [pc, #84]	; (80081d8 <HAL_TIM_Base_Start+0x90>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d115      	bne.n	80081b2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	4b13      	ldr	r3, [pc, #76]	; (80081dc <HAL_TIM_Base_Start+0x94>)
 800818e:	4013      	ands	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b06      	cmp	r3, #6
 8008196:	d015      	beq.n	80081c4 <HAL_TIM_Base_Start+0x7c>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800819e:	d011      	beq.n	80081c4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0201 	orr.w	r2, r2, #1
 80081ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b0:	e008      	b.n	80081c4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0201 	orr.w	r2, r2, #1
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	e000      	b.n	80081c6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	40012c00 	.word	0x40012c00
 80081d8:	40014000 	.word	0x40014000
 80081dc:	00010007 	.word	0x00010007

080081e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d001      	beq.n	80081f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e03b      	b.n	8008270 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0201 	orr.w	r2, r2, #1
 800820e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a19      	ldr	r2, [pc, #100]	; (800827c <HAL_TIM_Base_Start_IT+0x9c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d009      	beq.n	800822e <HAL_TIM_Base_Start_IT+0x4e>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008222:	d004      	beq.n	800822e <HAL_TIM_Base_Start_IT+0x4e>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a15      	ldr	r2, [pc, #84]	; (8008280 <HAL_TIM_Base_Start_IT+0xa0>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d115      	bne.n	800825a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	4b13      	ldr	r3, [pc, #76]	; (8008284 <HAL_TIM_Base_Start_IT+0xa4>)
 8008236:	4013      	ands	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b06      	cmp	r3, #6
 800823e:	d015      	beq.n	800826c <HAL_TIM_Base_Start_IT+0x8c>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008246:	d011      	beq.n	800826c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0201 	orr.w	r2, r2, #1
 8008256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008258:	e008      	b.n	800826c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f042 0201 	orr.w	r2, r2, #1
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	e000      	b.n	800826e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800826c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	40012c00 	.word	0x40012c00
 8008280:	40014000 	.word	0x40014000
 8008284:	00010007 	.word	0x00010007

08008288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b02      	cmp	r3, #2
 800829c:	d122      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d11b      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f06f 0202 	mvn.w	r2, #2
 80082b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f905 	bl	80084da <HAL_TIM_IC_CaptureCallback>
 80082d0:	e005      	b.n	80082de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f8f7 	bl	80084c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f908 	bl	80084ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d122      	bne.n	8008338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	d11b      	bne.n	8008338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f06f 0204 	mvn.w	r2, #4
 8008308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2202      	movs	r2, #2
 800830e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f8db 	bl	80084da <HAL_TIM_IC_CaptureCallback>
 8008324:	e005      	b.n	8008332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f8cd 	bl	80084c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f8de 	bl	80084ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	f003 0308 	and.w	r3, r3, #8
 8008342:	2b08      	cmp	r3, #8
 8008344:	d122      	bne.n	800838c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b08      	cmp	r3, #8
 8008352:	d11b      	bne.n	800838c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f06f 0208 	mvn.w	r2, #8
 800835c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2204      	movs	r2, #4
 8008362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f8b1 	bl	80084da <HAL_TIM_IC_CaptureCallback>
 8008378:	e005      	b.n	8008386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f8a3 	bl	80084c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f8b4 	bl	80084ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f003 0310 	and.w	r3, r3, #16
 8008396:	2b10      	cmp	r3, #16
 8008398:	d122      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d11b      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f06f 0210 	mvn.w	r2, #16
 80083b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2208      	movs	r2, #8
 80083b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f887 	bl	80084da <HAL_TIM_IC_CaptureCallback>
 80083cc:	e005      	b.n	80083da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f879 	bl	80084c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f88a 	bl	80084ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d10e      	bne.n	800840c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d107      	bne.n	800840c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f06f 0201 	mvn.w	r2, #1
 8008404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7fb fa00 	bl	800380c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008416:	2b80      	cmp	r3, #128	; 0x80
 8008418:	d10e      	bne.n	8008438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008424:	2b80      	cmp	r3, #128	; 0x80
 8008426:	d107      	bne.n	8008438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f944 	bl	80086c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008446:	d10e      	bne.n	8008466 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008452:	2b80      	cmp	r3, #128	; 0x80
 8008454:	d107      	bne.n	8008466 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800845e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f937 	bl	80086d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008470:	2b40      	cmp	r3, #64	; 0x40
 8008472:	d10e      	bne.n	8008492 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847e:	2b40      	cmp	r3, #64	; 0x40
 8008480:	d107      	bne.n	8008492 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800848a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f838 	bl	8008502 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b20      	cmp	r3, #32
 800849e:	d10e      	bne.n	80084be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	d107      	bne.n	80084be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f06f 0220 	mvn.w	r2, #32
 80084b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f8f7 	bl	80086ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084ce:	bf00      	nop
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084da:	b480      	push	{r7}
 80084dc:	b083      	sub	sp, #12
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b083      	sub	sp, #12
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084f6:	bf00      	nop
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
	...

08008518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a2a      	ldr	r2, [pc, #168]	; (80085d4 <TIM_Base_SetConfig+0xbc>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d003      	beq.n	8008538 <TIM_Base_SetConfig+0x20>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008536:	d108      	bne.n	800854a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	4313      	orrs	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a21      	ldr	r2, [pc, #132]	; (80085d4 <TIM_Base_SetConfig+0xbc>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d00b      	beq.n	800856a <TIM_Base_SetConfig+0x52>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008558:	d007      	beq.n	800856a <TIM_Base_SetConfig+0x52>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a1e      	ldr	r2, [pc, #120]	; (80085d8 <TIM_Base_SetConfig+0xc0>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d003      	beq.n	800856a <TIM_Base_SetConfig+0x52>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a1d      	ldr	r2, [pc, #116]	; (80085dc <TIM_Base_SetConfig+0xc4>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d108      	bne.n	800857c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4313      	orrs	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a0c      	ldr	r2, [pc, #48]	; (80085d4 <TIM_Base_SetConfig+0xbc>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d007      	beq.n	80085b8 <TIM_Base_SetConfig+0xa0>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a0b      	ldr	r2, [pc, #44]	; (80085d8 <TIM_Base_SetConfig+0xc0>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d003      	beq.n	80085b8 <TIM_Base_SetConfig+0xa0>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a0a      	ldr	r2, [pc, #40]	; (80085dc <TIM_Base_SetConfig+0xc4>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d103      	bne.n	80085c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	691a      	ldr	r2, [r3, #16]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	615a      	str	r2, [r3, #20]
}
 80085c6:	bf00      	nop
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	40012c00 	.word	0x40012c00
 80085d8:	40014000 	.word	0x40014000
 80085dc:	40014400 	.word	0x40014400

080085e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d101      	bne.n	80085f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085f4:	2302      	movs	r3, #2
 80085f6:	e04f      	b.n	8008698 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2202      	movs	r2, #2
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a21      	ldr	r2, [pc, #132]	; (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d108      	bne.n	8008634 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008628:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	4313      	orrs	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a14      	ldr	r2, [pc, #80]	; (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d009      	beq.n	800866c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008660:	d004      	beq.n	800866c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a10      	ldr	r2, [pc, #64]	; (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d10c      	bne.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008672:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	4313      	orrs	r3, r2
 800867c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	40012c00 	.word	0x40012c00
 80086a8:	40014000 	.word	0x40014000

080086ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e040      	b.n	800877c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fb fb00 	bl	8003d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2224      	movs	r2, #36	; 0x24
 8008714:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0201 	bic.w	r2, r2, #1
 8008724:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f8c0 	bl	80088ac <UART_SetConfig>
 800872c:	4603      	mov	r3, r0
 800872e:	2b01      	cmp	r3, #1
 8008730:	d101      	bne.n	8008736 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e022      	b.n	800877c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873a:	2b00      	cmp	r3, #0
 800873c:	d002      	beq.n	8008744 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fae0 	bl	8008d04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689a      	ldr	r2, [r3, #8]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f042 0201 	orr.w	r2, r2, #1
 8008772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fb67 	bl	8008e48 <UART_CheckIdleState>
 800877a:	4603      	mov	r3, r0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b08a      	sub	sp, #40	; 0x28
 8008788:	af02      	add	r7, sp, #8
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	603b      	str	r3, [r7, #0]
 8008790:	4613      	mov	r3, r2
 8008792:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008798:	2b20      	cmp	r3, #32
 800879a:	f040 8082 	bne.w	80088a2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <HAL_UART_Transmit+0x26>
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e07a      	b.n	80088a4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_UART_Transmit+0x38>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e073      	b.n	80088a4 <HAL_UART_Transmit+0x120>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2221      	movs	r2, #33	; 0x21
 80087d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087d2:	f7fb fc55 	bl	8004080 <HAL_GetTick>
 80087d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	88fa      	ldrh	r2, [r7, #6]
 80087e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f0:	d108      	bne.n	8008804 <HAL_UART_Transmit+0x80>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d104      	bne.n	8008804 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80087fa:	2300      	movs	r3, #0
 80087fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	61bb      	str	r3, [r7, #24]
 8008802:	e003      	b.n	800880c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008808:	2300      	movs	r3, #0
 800880a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008814:	e02d      	b.n	8008872 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2200      	movs	r2, #0
 800881e:	2180      	movs	r1, #128	; 0x80
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 fb5a 	bl	8008eda <UART_WaitOnFlagUntilTimeout>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e039      	b.n	80088a4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10b      	bne.n	800884e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	881a      	ldrh	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008842:	b292      	uxth	r2, r2
 8008844:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	3302      	adds	r3, #2
 800884a:	61bb      	str	r3, [r7, #24]
 800884c:	e008      	b.n	8008860 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	781a      	ldrb	r2, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	b292      	uxth	r2, r2
 8008858:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	3301      	adds	r3, #1
 800885e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008866:	b29b      	uxth	r3, r3
 8008868:	3b01      	subs	r3, #1
 800886a:	b29a      	uxth	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008878:	b29b      	uxth	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1cb      	bne.n	8008816 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2200      	movs	r2, #0
 8008886:	2140      	movs	r1, #64	; 0x40
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 fb26 	bl	8008eda <UART_WaitOnFlagUntilTimeout>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e005      	b.n	80088a4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2220      	movs	r2, #32
 800889c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	e000      	b.n	80088a4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80088a2:	2302      	movs	r3, #2
  }
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3720      	adds	r7, #32
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088b0:	b08a      	sub	sp, #40	; 0x28
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	689a      	ldr	r2, [r3, #8]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	431a      	orrs	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	431a      	orrs	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	4bb4      	ldr	r3, [pc, #720]	; (8008bac <UART_SetConfig+0x300>)
 80088dc:	4013      	ands	r3, r2
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	6812      	ldr	r2, [r2, #0]
 80088e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088e4:	430b      	orrs	r3, r1
 80088e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	68da      	ldr	r2, [r3, #12]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4aa9      	ldr	r2, [pc, #676]	; (8008bb0 <UART_SetConfig+0x304>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d004      	beq.n	8008918 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008914:	4313      	orrs	r3, r2
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008928:	430a      	orrs	r2, r1
 800892a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4aa0      	ldr	r2, [pc, #640]	; (8008bb4 <UART_SetConfig+0x308>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d126      	bne.n	8008984 <UART_SetConfig+0xd8>
 8008936:	4ba0      	ldr	r3, [pc, #640]	; (8008bb8 <UART_SetConfig+0x30c>)
 8008938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800893c:	f003 0303 	and.w	r3, r3, #3
 8008940:	2b03      	cmp	r3, #3
 8008942:	d81b      	bhi.n	800897c <UART_SetConfig+0xd0>
 8008944:	a201      	add	r2, pc, #4	; (adr r2, 800894c <UART_SetConfig+0xa0>)
 8008946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894a:	bf00      	nop
 800894c:	0800895d 	.word	0x0800895d
 8008950:	0800896d 	.word	0x0800896d
 8008954:	08008965 	.word	0x08008965
 8008958:	08008975 	.word	0x08008975
 800895c:	2301      	movs	r3, #1
 800895e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008962:	e080      	b.n	8008a66 <UART_SetConfig+0x1ba>
 8008964:	2302      	movs	r3, #2
 8008966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800896a:	e07c      	b.n	8008a66 <UART_SetConfig+0x1ba>
 800896c:	2304      	movs	r3, #4
 800896e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008972:	e078      	b.n	8008a66 <UART_SetConfig+0x1ba>
 8008974:	2308      	movs	r3, #8
 8008976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800897a:	e074      	b.n	8008a66 <UART_SetConfig+0x1ba>
 800897c:	2310      	movs	r3, #16
 800897e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008982:	e070      	b.n	8008a66 <UART_SetConfig+0x1ba>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a8c      	ldr	r2, [pc, #560]	; (8008bbc <UART_SetConfig+0x310>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d138      	bne.n	8008a00 <UART_SetConfig+0x154>
 800898e:	4b8a      	ldr	r3, [pc, #552]	; (8008bb8 <UART_SetConfig+0x30c>)
 8008990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008994:	f003 030c 	and.w	r3, r3, #12
 8008998:	2b0c      	cmp	r3, #12
 800899a:	d82d      	bhi.n	80089f8 <UART_SetConfig+0x14c>
 800899c:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <UART_SetConfig+0xf8>)
 800899e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a2:	bf00      	nop
 80089a4:	080089d9 	.word	0x080089d9
 80089a8:	080089f9 	.word	0x080089f9
 80089ac:	080089f9 	.word	0x080089f9
 80089b0:	080089f9 	.word	0x080089f9
 80089b4:	080089e9 	.word	0x080089e9
 80089b8:	080089f9 	.word	0x080089f9
 80089bc:	080089f9 	.word	0x080089f9
 80089c0:	080089f9 	.word	0x080089f9
 80089c4:	080089e1 	.word	0x080089e1
 80089c8:	080089f9 	.word	0x080089f9
 80089cc:	080089f9 	.word	0x080089f9
 80089d0:	080089f9 	.word	0x080089f9
 80089d4:	080089f1 	.word	0x080089f1
 80089d8:	2300      	movs	r3, #0
 80089da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089de:	e042      	b.n	8008a66 <UART_SetConfig+0x1ba>
 80089e0:	2302      	movs	r3, #2
 80089e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089e6:	e03e      	b.n	8008a66 <UART_SetConfig+0x1ba>
 80089e8:	2304      	movs	r3, #4
 80089ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ee:	e03a      	b.n	8008a66 <UART_SetConfig+0x1ba>
 80089f0:	2308      	movs	r3, #8
 80089f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089f6:	e036      	b.n	8008a66 <UART_SetConfig+0x1ba>
 80089f8:	2310      	movs	r3, #16
 80089fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089fe:	e032      	b.n	8008a66 <UART_SetConfig+0x1ba>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a6a      	ldr	r2, [pc, #424]	; (8008bb0 <UART_SetConfig+0x304>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d12a      	bne.n	8008a60 <UART_SetConfig+0x1b4>
 8008a0a:	4b6b      	ldr	r3, [pc, #428]	; (8008bb8 <UART_SetConfig+0x30c>)
 8008a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a18:	d01a      	beq.n	8008a50 <UART_SetConfig+0x1a4>
 8008a1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a1e:	d81b      	bhi.n	8008a58 <UART_SetConfig+0x1ac>
 8008a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a24:	d00c      	beq.n	8008a40 <UART_SetConfig+0x194>
 8008a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a2a:	d815      	bhi.n	8008a58 <UART_SetConfig+0x1ac>
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d003      	beq.n	8008a38 <UART_SetConfig+0x18c>
 8008a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a34:	d008      	beq.n	8008a48 <UART_SetConfig+0x19c>
 8008a36:	e00f      	b.n	8008a58 <UART_SetConfig+0x1ac>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a3e:	e012      	b.n	8008a66 <UART_SetConfig+0x1ba>
 8008a40:	2302      	movs	r3, #2
 8008a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a46:	e00e      	b.n	8008a66 <UART_SetConfig+0x1ba>
 8008a48:	2304      	movs	r3, #4
 8008a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a4e:	e00a      	b.n	8008a66 <UART_SetConfig+0x1ba>
 8008a50:	2308      	movs	r3, #8
 8008a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a56:	e006      	b.n	8008a66 <UART_SetConfig+0x1ba>
 8008a58:	2310      	movs	r3, #16
 8008a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a5e:	e002      	b.n	8008a66 <UART_SetConfig+0x1ba>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a51      	ldr	r2, [pc, #324]	; (8008bb0 <UART_SetConfig+0x304>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d17a      	bne.n	8008b66 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d824      	bhi.n	8008ac2 <UART_SetConfig+0x216>
 8008a78:	a201      	add	r2, pc, #4	; (adr r2, 8008a80 <UART_SetConfig+0x1d4>)
 8008a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7e:	bf00      	nop
 8008a80:	08008aa5 	.word	0x08008aa5
 8008a84:	08008ac3 	.word	0x08008ac3
 8008a88:	08008aad 	.word	0x08008aad
 8008a8c:	08008ac3 	.word	0x08008ac3
 8008a90:	08008ab3 	.word	0x08008ab3
 8008a94:	08008ac3 	.word	0x08008ac3
 8008a98:	08008ac3 	.word	0x08008ac3
 8008a9c:	08008ac3 	.word	0x08008ac3
 8008aa0:	08008abb 	.word	0x08008abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aa4:	f7fe ff42 	bl	800792c <HAL_RCC_GetPCLK1Freq>
 8008aa8:	61f8      	str	r0, [r7, #28]
        break;
 8008aaa:	e010      	b.n	8008ace <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008aac:	4b44      	ldr	r3, [pc, #272]	; (8008bc0 <UART_SetConfig+0x314>)
 8008aae:	61fb      	str	r3, [r7, #28]
        break;
 8008ab0:	e00d      	b.n	8008ace <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ab2:	f7fe fea3 	bl	80077fc <HAL_RCC_GetSysClockFreq>
 8008ab6:	61f8      	str	r0, [r7, #28]
        break;
 8008ab8:	e009      	b.n	8008ace <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008abe:	61fb      	str	r3, [r7, #28]
        break;
 8008ac0:	e005      	b.n	8008ace <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008acc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 8107 	beq.w	8008ce4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	4613      	mov	r3, r2
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	4413      	add	r3, r2
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d305      	bcc.n	8008af2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008aec:	69fa      	ldr	r2, [r7, #28]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d903      	bls.n	8008afa <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008af8:	e0f4      	b.n	8008ce4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	2200      	movs	r2, #0
 8008afe:	461c      	mov	r4, r3
 8008b00:	4615      	mov	r5, r2
 8008b02:	f04f 0200 	mov.w	r2, #0
 8008b06:	f04f 0300 	mov.w	r3, #0
 8008b0a:	022b      	lsls	r3, r5, #8
 8008b0c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008b10:	0222      	lsls	r2, r4, #8
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	6849      	ldr	r1, [r1, #4]
 8008b16:	0849      	lsrs	r1, r1, #1
 8008b18:	2000      	movs	r0, #0
 8008b1a:	4688      	mov	r8, r1
 8008b1c:	4681      	mov	r9, r0
 8008b1e:	eb12 0a08 	adds.w	sl, r2, r8
 8008b22:	eb43 0b09 	adc.w	fp, r3, r9
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	603b      	str	r3, [r7, #0]
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b34:	4650      	mov	r0, sl
 8008b36:	4659      	mov	r1, fp
 8008b38:	f7f8 f886 	bl	8000c48 <__aeabi_uldivmod>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4613      	mov	r3, r2
 8008b42:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b4a:	d308      	bcc.n	8008b5e <UART_SetConfig+0x2b2>
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b52:	d204      	bcs.n	8008b5e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	60da      	str	r2, [r3, #12]
 8008b5c:	e0c2      	b.n	8008ce4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b64:	e0be      	b.n	8008ce4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b6e:	d16a      	bne.n	8008c46 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8008b70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b74:	2b08      	cmp	r3, #8
 8008b76:	d834      	bhi.n	8008be2 <UART_SetConfig+0x336>
 8008b78:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <UART_SetConfig+0x2d4>)
 8008b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7e:	bf00      	nop
 8008b80:	08008ba5 	.word	0x08008ba5
 8008b84:	08008bc5 	.word	0x08008bc5
 8008b88:	08008bcd 	.word	0x08008bcd
 8008b8c:	08008be3 	.word	0x08008be3
 8008b90:	08008bd3 	.word	0x08008bd3
 8008b94:	08008be3 	.word	0x08008be3
 8008b98:	08008be3 	.word	0x08008be3
 8008b9c:	08008be3 	.word	0x08008be3
 8008ba0:	08008bdb 	.word	0x08008bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ba4:	f7fe fec2 	bl	800792c <HAL_RCC_GetPCLK1Freq>
 8008ba8:	61f8      	str	r0, [r7, #28]
        break;
 8008baa:	e020      	b.n	8008bee <UART_SetConfig+0x342>
 8008bac:	efff69f3 	.word	0xefff69f3
 8008bb0:	40008000 	.word	0x40008000
 8008bb4:	40013800 	.word	0x40013800
 8008bb8:	40021000 	.word	0x40021000
 8008bbc:	40004400 	.word	0x40004400
 8008bc0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bc4:	f7fe fec8 	bl	8007958 <HAL_RCC_GetPCLK2Freq>
 8008bc8:	61f8      	str	r0, [r7, #28]
        break;
 8008bca:	e010      	b.n	8008bee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bcc:	4b4c      	ldr	r3, [pc, #304]	; (8008d00 <UART_SetConfig+0x454>)
 8008bce:	61fb      	str	r3, [r7, #28]
        break;
 8008bd0:	e00d      	b.n	8008bee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bd2:	f7fe fe13 	bl	80077fc <HAL_RCC_GetSysClockFreq>
 8008bd6:	61f8      	str	r0, [r7, #28]
        break;
 8008bd8:	e009      	b.n	8008bee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bde:	61fb      	str	r3, [r7, #28]
        break;
 8008be0:	e005      	b.n	8008bee <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008bec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d077      	beq.n	8008ce4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	005a      	lsls	r2, r3, #1
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	085b      	lsrs	r3, r3, #1
 8008bfe:	441a      	add	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	2b0f      	cmp	r3, #15
 8008c0e:	d916      	bls.n	8008c3e <UART_SetConfig+0x392>
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c16:	d212      	bcs.n	8008c3e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	f023 030f 	bic.w	r3, r3, #15
 8008c20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	085b      	lsrs	r3, r3, #1
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	f003 0307 	and.w	r3, r3, #7
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	8afb      	ldrh	r3, [r7, #22]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	8afa      	ldrh	r2, [r7, #22]
 8008c3a:	60da      	str	r2, [r3, #12]
 8008c3c:	e052      	b.n	8008ce4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008c44:	e04e      	b.n	8008ce4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c4a:	2b08      	cmp	r3, #8
 8008c4c:	d827      	bhi.n	8008c9e <UART_SetConfig+0x3f2>
 8008c4e:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <UART_SetConfig+0x3a8>)
 8008c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c54:	08008c79 	.word	0x08008c79
 8008c58:	08008c81 	.word	0x08008c81
 8008c5c:	08008c89 	.word	0x08008c89
 8008c60:	08008c9f 	.word	0x08008c9f
 8008c64:	08008c8f 	.word	0x08008c8f
 8008c68:	08008c9f 	.word	0x08008c9f
 8008c6c:	08008c9f 	.word	0x08008c9f
 8008c70:	08008c9f 	.word	0x08008c9f
 8008c74:	08008c97 	.word	0x08008c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c78:	f7fe fe58 	bl	800792c <HAL_RCC_GetPCLK1Freq>
 8008c7c:	61f8      	str	r0, [r7, #28]
        break;
 8008c7e:	e014      	b.n	8008caa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c80:	f7fe fe6a 	bl	8007958 <HAL_RCC_GetPCLK2Freq>
 8008c84:	61f8      	str	r0, [r7, #28]
        break;
 8008c86:	e010      	b.n	8008caa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c88:	4b1d      	ldr	r3, [pc, #116]	; (8008d00 <UART_SetConfig+0x454>)
 8008c8a:	61fb      	str	r3, [r7, #28]
        break;
 8008c8c:	e00d      	b.n	8008caa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c8e:	f7fe fdb5 	bl	80077fc <HAL_RCC_GetSysClockFreq>
 8008c92:	61f8      	str	r0, [r7, #28]
        break;
 8008c94:	e009      	b.n	8008caa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c9a:	61fb      	str	r3, [r7, #28]
        break;
 8008c9c:	e005      	b.n	8008caa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ca8:	bf00      	nop
    }

    if (pclk != 0U)
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d019      	beq.n	8008ce4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	085a      	lsrs	r2, r3, #1
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	441a      	add	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	2b0f      	cmp	r3, #15
 8008cc8:	d909      	bls.n	8008cde <UART_SetConfig+0x432>
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd0:	d205      	bcs.n	8008cde <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	60da      	str	r2, [r3, #12]
 8008cdc:	e002      	b.n	8008ce4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008cf0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3728      	adds	r7, #40	; 0x28
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cfe:	bf00      	nop
 8008d00:	00f42400 	.word	0x00f42400

08008d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00a      	beq.n	8008d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00a      	beq.n	8008d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00a      	beq.n	8008d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	f003 0308 	and.w	r3, r3, #8
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00a      	beq.n	8008d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d98:	f003 0310 	and.w	r3, r3, #16
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00a      	beq.n	8008db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00a      	beq.n	8008dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d01a      	beq.n	8008e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e02:	d10a      	bne.n	8008e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	605a      	str	r2, [r3, #4]
  }
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af02      	add	r7, sp, #8
 8008e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e58:	f7fb f912 	bl	8004080 <HAL_GetTick>
 8008e5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0308 	and.w	r3, r3, #8
 8008e68:	2b08      	cmp	r3, #8
 8008e6a:	d10e      	bne.n	8008e8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f82d 	bl	8008eda <UART_WaitOnFlagUntilTimeout>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e023      	b.n	8008ed2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d10e      	bne.n	8008eb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f817 	bl	8008eda <UART_WaitOnFlagUntilTimeout>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e00d      	b.n	8008ed2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b09c      	sub	sp, #112	; 0x70
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	603b      	str	r3, [r7, #0]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eea:	e0a5      	b.n	8009038 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef2:	f000 80a1 	beq.w	8009038 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef6:	f7fb f8c3 	bl	8004080 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d302      	bcc.n	8008f0c <UART_WaitOnFlagUntilTimeout+0x32>
 8008f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d13e      	bne.n	8008f8a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f20:	667b      	str	r3, [r7, #100]	; 0x64
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e6      	bne.n	8008f0c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3308      	adds	r3, #8
 8008f44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f48:	e853 3f00 	ldrex	r3, [r3]
 8008f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f50:	f023 0301 	bic.w	r3, r3, #1
 8008f54:	663b      	str	r3, [r7, #96]	; 0x60
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f66:	e841 2300 	strex	r3, r2, [r1]
 8008f6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1e5      	bne.n	8008f3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2220      	movs	r2, #32
 8008f76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e067      	b.n	800905a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d04f      	beq.n	8009038 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fa6:	d147      	bne.n	8009038 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fb0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	e853 3f00 	ldrex	r3, [r3]
 8008fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fd8:	e841 2300 	strex	r3, r2, [r1]
 8008fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e6      	bne.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3308      	adds	r3, #8
 8008fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	f023 0301 	bic.w	r3, r3, #1
 8008ffa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3308      	adds	r3, #8
 8009002:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009004:	623a      	str	r2, [r7, #32]
 8009006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	69f9      	ldr	r1, [r7, #28]
 800900a:	6a3a      	ldr	r2, [r7, #32]
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	61bb      	str	r3, [r7, #24]
   return(result);
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e5      	bne.n	8008fe4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2220      	movs	r2, #32
 800901c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2220      	movs	r2, #32
 8009022:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2220      	movs	r2, #32
 8009028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e010      	b.n	800905a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	69da      	ldr	r2, [r3, #28]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	4013      	ands	r3, r2
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	429a      	cmp	r2, r3
 8009046:	bf0c      	ite	eq
 8009048:	2301      	moveq	r3, #1
 800904a:	2300      	movne	r3, #0
 800904c:	b2db      	uxtb	r3, r3
 800904e:	461a      	mov	r2, r3
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	429a      	cmp	r2, r3
 8009054:	f43f af4a 	beq.w	8008eec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3770      	adds	r7, #112	; 0x70
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <__NVIC_SetPriority>:
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	6039      	str	r1, [r7, #0]
 800906e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009074:	2b00      	cmp	r3, #0
 8009076:	db0a      	blt.n	800908e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	b2da      	uxtb	r2, r3
 800907c:	490c      	ldr	r1, [pc, #48]	; (80090b0 <__NVIC_SetPriority+0x4c>)
 800907e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009082:	0112      	lsls	r2, r2, #4
 8009084:	b2d2      	uxtb	r2, r2
 8009086:	440b      	add	r3, r1
 8009088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800908c:	e00a      	b.n	80090a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	b2da      	uxtb	r2, r3
 8009092:	4908      	ldr	r1, [pc, #32]	; (80090b4 <__NVIC_SetPriority+0x50>)
 8009094:	79fb      	ldrb	r3, [r7, #7]
 8009096:	f003 030f 	and.w	r3, r3, #15
 800909a:	3b04      	subs	r3, #4
 800909c:	0112      	lsls	r2, r2, #4
 800909e:	b2d2      	uxtb	r2, r2
 80090a0:	440b      	add	r3, r1
 80090a2:	761a      	strb	r2, [r3, #24]
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	e000e100 	.word	0xe000e100
 80090b4:	e000ed00 	.word	0xe000ed00

080090b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80090b8:	b580      	push	{r7, lr}
 80090ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <SysTick_Handler+0x1c>)
 80090be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80090c0:	f002 fa88 	bl	800b5d4 <xTaskGetSchedulerState>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d001      	beq.n	80090ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80090ca:	f003 f96d 	bl	800c3a8 <xPortSysTickHandler>
  }
}
 80090ce:	bf00      	nop
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	e000e010 	.word	0xe000e010

080090d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80090d8:	b580      	push	{r7, lr}
 80090da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80090dc:	2100      	movs	r1, #0
 80090de:	f06f 0004 	mvn.w	r0, #4
 80090e2:	f7ff ffbf 	bl	8009064 <__NVIC_SetPriority>
#endif
}
 80090e6:	bf00      	nop
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090f2:	f3ef 8305 	mrs	r3, IPSR
 80090f6:	603b      	str	r3, [r7, #0]
  return(result);
 80090f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80090fe:	f06f 0305 	mvn.w	r3, #5
 8009102:	607b      	str	r3, [r7, #4]
 8009104:	e00c      	b.n	8009120 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009106:	4b0a      	ldr	r3, [pc, #40]	; (8009130 <osKernelInitialize+0x44>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d105      	bne.n	800911a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800910e:	4b08      	ldr	r3, [pc, #32]	; (8009130 <osKernelInitialize+0x44>)
 8009110:	2201      	movs	r2, #1
 8009112:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009114:	2300      	movs	r3, #0
 8009116:	607b      	str	r3, [r7, #4]
 8009118:	e002      	b.n	8009120 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800911a:	f04f 33ff 	mov.w	r3, #4294967295
 800911e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009120:	687b      	ldr	r3, [r7, #4]
}
 8009122:	4618      	mov	r0, r3
 8009124:	370c      	adds	r7, #12
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	20000690 	.word	0x20000690

08009134 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800913a:	f3ef 8305 	mrs	r3, IPSR
 800913e:	603b      	str	r3, [r7, #0]
  return(result);
 8009140:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009146:	f06f 0305 	mvn.w	r3, #5
 800914a:	607b      	str	r3, [r7, #4]
 800914c:	e010      	b.n	8009170 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800914e:	4b0b      	ldr	r3, [pc, #44]	; (800917c <osKernelStart+0x48>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d109      	bne.n	800916a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009156:	f7ff ffbf 	bl	80090d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800915a:	4b08      	ldr	r3, [pc, #32]	; (800917c <osKernelStart+0x48>)
 800915c:	2202      	movs	r2, #2
 800915e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009160:	f001 fdcc 	bl	800acfc <vTaskStartScheduler>
      stat = osOK;
 8009164:	2300      	movs	r3, #0
 8009166:	607b      	str	r3, [r7, #4]
 8009168:	e002      	b.n	8009170 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800916a:	f04f 33ff 	mov.w	r3, #4294967295
 800916e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009170:	687b      	ldr	r3, [r7, #4]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20000690 	.word	0x20000690

08009180 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009180:	b580      	push	{r7, lr}
 8009182:	b08e      	sub	sp, #56	; 0x38
 8009184:	af04      	add	r7, sp, #16
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800918c:	2300      	movs	r3, #0
 800918e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009190:	f3ef 8305 	mrs	r3, IPSR
 8009194:	617b      	str	r3, [r7, #20]
  return(result);
 8009196:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009198:	2b00      	cmp	r3, #0
 800919a:	d17e      	bne.n	800929a <osThreadNew+0x11a>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d07b      	beq.n	800929a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80091a2:	2340      	movs	r3, #64	; 0x40
 80091a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80091a6:	2318      	movs	r3, #24
 80091a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80091ae:	f04f 33ff 	mov.w	r3, #4294967295
 80091b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d045      	beq.n	8009246 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d002      	beq.n	80091c8 <osThreadNew+0x48>
        name = attr->name;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d008      	beq.n	80091ee <osThreadNew+0x6e>
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	2b38      	cmp	r3, #56	; 0x38
 80091e0:	d805      	bhi.n	80091ee <osThreadNew+0x6e>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <osThreadNew+0x72>
        return (NULL);
 80091ee:	2300      	movs	r3, #0
 80091f0:	e054      	b.n	800929c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	089b      	lsrs	r3, r3, #2
 8009200:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00e      	beq.n	8009228 <osThreadNew+0xa8>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	2bbb      	cmp	r3, #187	; 0xbb
 8009210:	d90a      	bls.n	8009228 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009216:	2b00      	cmp	r3, #0
 8009218:	d006      	beq.n	8009228 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <osThreadNew+0xa8>
        mem = 1;
 8009222:	2301      	movs	r3, #1
 8009224:	61bb      	str	r3, [r7, #24]
 8009226:	e010      	b.n	800924a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10c      	bne.n	800924a <osThreadNew+0xca>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d108      	bne.n	800924a <osThreadNew+0xca>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d104      	bne.n	800924a <osThreadNew+0xca>
          mem = 0;
 8009240:	2300      	movs	r3, #0
 8009242:	61bb      	str	r3, [r7, #24]
 8009244:	e001      	b.n	800924a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d110      	bne.n	8009272 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009258:	9202      	str	r2, [sp, #8]
 800925a:	9301      	str	r3, [sp, #4]
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	6a3a      	ldr	r2, [r7, #32]
 8009264:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f001 fade 	bl	800a828 <xTaskCreateStatic>
 800926c:	4603      	mov	r3, r0
 800926e:	613b      	str	r3, [r7, #16]
 8009270:	e013      	b.n	800929a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d110      	bne.n	800929a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	b29a      	uxth	r2, r3
 800927c:	f107 0310 	add.w	r3, r7, #16
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f001 fb29 	bl	800a8e2 <xTaskCreate>
 8009290:	4603      	mov	r3, r0
 8009292:	2b01      	cmp	r3, #1
 8009294:	d001      	beq.n	800929a <osThreadNew+0x11a>
            hTask = NULL;
 8009296:	2300      	movs	r3, #0
 8009298:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800929a:	693b      	ldr	r3, [r7, #16]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3728      	adds	r7, #40	; 0x28
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092ac:	f3ef 8305 	mrs	r3, IPSR
 80092b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80092b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <osDelay+0x1c>
    stat = osErrorISR;
 80092b8:	f06f 0305 	mvn.w	r3, #5
 80092bc:	60fb      	str	r3, [r7, #12]
 80092be:	e007      	b.n	80092d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f001 fce2 	bl	800ac94 <vTaskDelay>
    }
  }

  return (stat);
 80092d0:	68fb      	ldr	r3, [r7, #12]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80092da:	b580      	push	{r7, lr}
 80092dc:	b088      	sub	sp, #32
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092e6:	f3ef 8305 	mrs	r3, IPSR
 80092ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80092ec:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d174      	bne.n	80093dc <osMutexNew+0x102>
    if (attr != NULL) {
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d003      	beq.n	8009300 <osMutexNew+0x26>
      type = attr->attr_bits;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	61bb      	str	r3, [r7, #24]
 80092fe:	e001      	b.n	8009304 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	2b00      	cmp	r3, #0
 800930c:	d002      	beq.n	8009314 <osMutexNew+0x3a>
      rmtx = 1U;
 800930e:	2301      	movs	r3, #1
 8009310:	617b      	str	r3, [r7, #20]
 8009312:	e001      	b.n	8009318 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009314:	2300      	movs	r3, #0
 8009316:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	f003 0308 	and.w	r3, r3, #8
 800931e:	2b00      	cmp	r3, #0
 8009320:	d15c      	bne.n	80093dc <osMutexNew+0x102>
      mem = -1;
 8009322:	f04f 33ff 	mov.w	r3, #4294967295
 8009326:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d015      	beq.n	800935a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d006      	beq.n	8009344 <osMutexNew+0x6a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	2b4f      	cmp	r3, #79	; 0x4f
 800933c:	d902      	bls.n	8009344 <osMutexNew+0x6a>
          mem = 1;
 800933e:	2301      	movs	r3, #1
 8009340:	613b      	str	r3, [r7, #16]
 8009342:	e00c      	b.n	800935e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d108      	bne.n	800935e <osMutexNew+0x84>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d104      	bne.n	800935e <osMutexNew+0x84>
            mem = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	613b      	str	r3, [r7, #16]
 8009358:	e001      	b.n	800935e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d112      	bne.n	800938a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d007      	beq.n	800937a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	4619      	mov	r1, r3
 8009370:	2004      	movs	r0, #4
 8009372:	f000 fc48 	bl	8009c06 <xQueueCreateMutexStatic>
 8009376:	61f8      	str	r0, [r7, #28]
 8009378:	e016      	b.n	80093a8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	4619      	mov	r1, r3
 8009380:	2001      	movs	r0, #1
 8009382:	f000 fc40 	bl	8009c06 <xQueueCreateMutexStatic>
 8009386:	61f8      	str	r0, [r7, #28]
 8009388:	e00e      	b.n	80093a8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10b      	bne.n	80093a8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d004      	beq.n	80093a0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009396:	2004      	movs	r0, #4
 8009398:	f000 fc1d 	bl	8009bd6 <xQueueCreateMutex>
 800939c:	61f8      	str	r0, [r7, #28]
 800939e:	e003      	b.n	80093a8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80093a0:	2001      	movs	r0, #1
 80093a2:	f000 fc18 	bl	8009bd6 <xQueueCreateMutex>
 80093a6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00c      	beq.n	80093c8 <osMutexNew+0xee>
        if (attr != NULL) {
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <osMutexNew+0xe2>
          name = attr->name;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60fb      	str	r3, [r7, #12]
 80093ba:	e001      	b.n	80093c0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80093bc:	2300      	movs	r3, #0
 80093be:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80093c0:	68f9      	ldr	r1, [r7, #12]
 80093c2:	69f8      	ldr	r0, [r7, #28]
 80093c4:	f001 f9d2 	bl	800a76c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d006      	beq.n	80093dc <osMutexNew+0x102>
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	f043 0301 	orr.w	r3, r3, #1
 80093da:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80093dc:	69fb      	ldr	r3, [r7, #28]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3720      	adds	r7, #32
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b086      	sub	sp, #24
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f023 0301 	bic.w	r3, r3, #1
 80093f6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009400:	2300      	movs	r3, #0
 8009402:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009404:	f3ef 8305 	mrs	r3, IPSR
 8009408:	60bb      	str	r3, [r7, #8]
  return(result);
 800940a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800940c:	2b00      	cmp	r3, #0
 800940e:	d003      	beq.n	8009418 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009410:	f06f 0305 	mvn.w	r3, #5
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	e02c      	b.n	8009472 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d103      	bne.n	8009426 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800941e:	f06f 0303 	mvn.w	r3, #3
 8009422:	617b      	str	r3, [r7, #20]
 8009424:	e025      	b.n	8009472 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d011      	beq.n	8009450 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6938      	ldr	r0, [r7, #16]
 8009430:	f000 fc38 	bl	8009ca4 <xQueueTakeMutexRecursive>
 8009434:	4603      	mov	r3, r0
 8009436:	2b01      	cmp	r3, #1
 8009438:	d01b      	beq.n	8009472 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d003      	beq.n	8009448 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009440:	f06f 0301 	mvn.w	r3, #1
 8009444:	617b      	str	r3, [r7, #20]
 8009446:	e014      	b.n	8009472 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009448:	f06f 0302 	mvn.w	r3, #2
 800944c:	617b      	str	r3, [r7, #20]
 800944e:	e010      	b.n	8009472 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6938      	ldr	r0, [r7, #16]
 8009454:	f000 fed6 	bl	800a204 <xQueueSemaphoreTake>
 8009458:	4603      	mov	r3, r0
 800945a:	2b01      	cmp	r3, #1
 800945c:	d009      	beq.n	8009472 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d003      	beq.n	800946c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8009464:	f06f 0301 	mvn.w	r3, #1
 8009468:	617b      	str	r3, [r7, #20]
 800946a:	e002      	b.n	8009472 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800946c:	f06f 0302 	mvn.w	r3, #2
 8009470:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009472:	697b      	ldr	r3, [r7, #20]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f023 0301 	bic.w	r3, r3, #1
 800948a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f003 0301 	and.w	r3, r3, #1
 8009492:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009494:	2300      	movs	r3, #0
 8009496:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009498:	f3ef 8305 	mrs	r3, IPSR
 800949c:	60bb      	str	r3, [r7, #8]
  return(result);
 800949e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d003      	beq.n	80094ac <osMutexRelease+0x30>
    stat = osErrorISR;
 80094a4:	f06f 0305 	mvn.w	r3, #5
 80094a8:	617b      	str	r3, [r7, #20]
 80094aa:	e01f      	b.n	80094ec <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d103      	bne.n	80094ba <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80094b2:	f06f 0303 	mvn.w	r3, #3
 80094b6:	617b      	str	r3, [r7, #20]
 80094b8:	e018      	b.n	80094ec <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d009      	beq.n	80094d4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80094c0:	6938      	ldr	r0, [r7, #16]
 80094c2:	f000 fbbb 	bl	8009c3c <xQueueGiveMutexRecursive>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d00f      	beq.n	80094ec <osMutexRelease+0x70>
        stat = osErrorResource;
 80094cc:	f06f 0302 	mvn.w	r3, #2
 80094d0:	617b      	str	r3, [r7, #20]
 80094d2:	e00b      	b.n	80094ec <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80094d4:	2300      	movs	r3, #0
 80094d6:	2200      	movs	r2, #0
 80094d8:	2100      	movs	r1, #0
 80094da:	6938      	ldr	r0, [r7, #16]
 80094dc:	f000 fc18 	bl	8009d10 <xQueueGenericSend>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d002      	beq.n	80094ec <osMutexRelease+0x70>
        stat = osErrorResource;
 80094e6:	f06f 0302 	mvn.w	r3, #2
 80094ea:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80094ec:	697b      	ldr	r3, [r7, #20]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b08a      	sub	sp, #40	; 0x28
 80094fa:	af02      	add	r7, sp, #8
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009502:	2300      	movs	r3, #0
 8009504:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009506:	f3ef 8305 	mrs	r3, IPSR
 800950a:	613b      	str	r3, [r7, #16]
  return(result);
 800950c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800950e:	2b00      	cmp	r3, #0
 8009510:	d15f      	bne.n	80095d2 <osMessageQueueNew+0xdc>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d05c      	beq.n	80095d2 <osMessageQueueNew+0xdc>
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d059      	beq.n	80095d2 <osMessageQueueNew+0xdc>
    mem = -1;
 800951e:	f04f 33ff 	mov.w	r3, #4294967295
 8009522:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d029      	beq.n	800957e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d012      	beq.n	8009558 <osMessageQueueNew+0x62>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	2b4f      	cmp	r3, #79	; 0x4f
 8009538:	d90e      	bls.n	8009558 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00a      	beq.n	8009558 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	695a      	ldr	r2, [r3, #20]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	68b9      	ldr	r1, [r7, #8]
 800954a:	fb01 f303 	mul.w	r3, r1, r3
 800954e:	429a      	cmp	r2, r3
 8009550:	d302      	bcc.n	8009558 <osMessageQueueNew+0x62>
        mem = 1;
 8009552:	2301      	movs	r3, #1
 8009554:	61bb      	str	r3, [r7, #24]
 8009556:	e014      	b.n	8009582 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d110      	bne.n	8009582 <osMessageQueueNew+0x8c>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10c      	bne.n	8009582 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800956c:	2b00      	cmp	r3, #0
 800956e:	d108      	bne.n	8009582 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	695b      	ldr	r3, [r3, #20]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d104      	bne.n	8009582 <osMessageQueueNew+0x8c>
          mem = 0;
 8009578:	2300      	movs	r3, #0
 800957a:	61bb      	str	r3, [r7, #24]
 800957c:	e001      	b.n	8009582 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d10b      	bne.n	80095a0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691a      	ldr	r2, [r3, #16]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	2100      	movs	r1, #0
 8009592:	9100      	str	r1, [sp, #0]
 8009594:	68b9      	ldr	r1, [r7, #8]
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 fa2e 	bl	80099f8 <xQueueGenericCreateStatic>
 800959c:	61f8      	str	r0, [r7, #28]
 800959e:	e008      	b.n	80095b2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d105      	bne.n	80095b2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80095a6:	2200      	movs	r2, #0
 80095a8:	68b9      	ldr	r1, [r7, #8]
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 fa9c 	bl	8009ae8 <xQueueGenericCreate>
 80095b0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00c      	beq.n	80095d2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	617b      	str	r3, [r7, #20]
 80095c4:	e001      	b.n	80095ca <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80095ca:	6979      	ldr	r1, [r7, #20]
 80095cc:	69f8      	ldr	r0, [r7, #28]
 80095ce:	f001 f8cd 	bl	800a76c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80095d2:	69fb      	ldr	r3, [r7, #28]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3720      	adds	r7, #32
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80095dc:	b580      	push	{r7, lr}
 80095de:	b088      	sub	sp, #32
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	603b      	str	r3, [r7, #0]
 80095e8:	4613      	mov	r3, r2
 80095ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095f4:	f3ef 8305 	mrs	r3, IPSR
 80095f8:	617b      	str	r3, [r7, #20]
  return(result);
 80095fa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d028      	beq.n	8009652 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d005      	beq.n	8009612 <osMessageQueuePut+0x36>
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <osMessageQueuePut+0x36>
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009612:	f06f 0303 	mvn.w	r3, #3
 8009616:	61fb      	str	r3, [r7, #28]
 8009618:	e038      	b.n	800968c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800961a:	2300      	movs	r3, #0
 800961c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800961e:	f107 0210 	add.w	r2, r7, #16
 8009622:	2300      	movs	r3, #0
 8009624:	68b9      	ldr	r1, [r7, #8]
 8009626:	69b8      	ldr	r0, [r7, #24]
 8009628:	f000 fc70 	bl	8009f0c <xQueueGenericSendFromISR>
 800962c:	4603      	mov	r3, r0
 800962e:	2b01      	cmp	r3, #1
 8009630:	d003      	beq.n	800963a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009632:	f06f 0302 	mvn.w	r3, #2
 8009636:	61fb      	str	r3, [r7, #28]
 8009638:	e028      	b.n	800968c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d025      	beq.n	800968c <osMessageQueuePut+0xb0>
 8009640:	4b15      	ldr	r3, [pc, #84]	; (8009698 <osMessageQueuePut+0xbc>)
 8009642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	e01c      	b.n	800968c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <osMessageQueuePut+0x82>
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d103      	bne.n	8009666 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800965e:	f06f 0303 	mvn.w	r3, #3
 8009662:	61fb      	str	r3, [r7, #28]
 8009664:	e012      	b.n	800968c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009666:	2300      	movs	r3, #0
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	68b9      	ldr	r1, [r7, #8]
 800966c:	69b8      	ldr	r0, [r7, #24]
 800966e:	f000 fb4f 	bl	8009d10 <xQueueGenericSend>
 8009672:	4603      	mov	r3, r0
 8009674:	2b01      	cmp	r3, #1
 8009676:	d009      	beq.n	800968c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800967e:	f06f 0301 	mvn.w	r3, #1
 8009682:	61fb      	str	r3, [r7, #28]
 8009684:	e002      	b.n	800968c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009686:	f06f 0302 	mvn.w	r3, #2
 800968a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800968c:	69fb      	ldr	r3, [r7, #28]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3720      	adds	r7, #32
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	e000ed04 	.word	0xe000ed04

0800969c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096b2:	f3ef 8305 	mrs	r3, IPSR
 80096b6:	617b      	str	r3, [r7, #20]
  return(result);
 80096b8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d028      	beq.n	8009710 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d005      	beq.n	80096d0 <osMessageQueueGet+0x34>
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <osMessageQueueGet+0x34>
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d003      	beq.n	80096d8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80096d0:	f06f 0303 	mvn.w	r3, #3
 80096d4:	61fb      	str	r3, [r7, #28]
 80096d6:	e037      	b.n	8009748 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80096d8:	2300      	movs	r3, #0
 80096da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80096dc:	f107 0310 	add.w	r3, r7, #16
 80096e0:	461a      	mov	r2, r3
 80096e2:	68b9      	ldr	r1, [r7, #8]
 80096e4:	69b8      	ldr	r0, [r7, #24]
 80096e6:	f000 fe99 	bl	800a41c <xQueueReceiveFromISR>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d003      	beq.n	80096f8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80096f0:	f06f 0302 	mvn.w	r3, #2
 80096f4:	61fb      	str	r3, [r7, #28]
 80096f6:	e027      	b.n	8009748 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d024      	beq.n	8009748 <osMessageQueueGet+0xac>
 80096fe:	4b15      	ldr	r3, [pc, #84]	; (8009754 <osMessageQueueGet+0xb8>)
 8009700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	e01b      	b.n	8009748 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d002      	beq.n	800971c <osMessageQueueGet+0x80>
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d103      	bne.n	8009724 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800971c:	f06f 0303 	mvn.w	r3, #3
 8009720:	61fb      	str	r3, [r7, #28]
 8009722:	e011      	b.n	8009748 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	68b9      	ldr	r1, [r7, #8]
 8009728:	69b8      	ldr	r0, [r7, #24]
 800972a:	f000 fc8b 	bl	800a044 <xQueueReceive>
 800972e:	4603      	mov	r3, r0
 8009730:	2b01      	cmp	r3, #1
 8009732:	d009      	beq.n	8009748 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800973a:	f06f 0301 	mvn.w	r3, #1
 800973e:	61fb      	str	r3, [r7, #28]
 8009740:	e002      	b.n	8009748 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009742:	f06f 0302 	mvn.w	r3, #2
 8009746:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009748:	69fb      	ldr	r3, [r7, #28]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3720      	adds	r7, #32
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	e000ed04 	.word	0xe000ed04

08009758 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4a07      	ldr	r2, [pc, #28]	; (8009784 <vApplicationGetIdleTaskMemory+0x2c>)
 8009768:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	4a06      	ldr	r2, [pc, #24]	; (8009788 <vApplicationGetIdleTaskMemory+0x30>)
 800976e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2240      	movs	r2, #64	; 0x40
 8009774:	601a      	str	r2, [r3, #0]
}
 8009776:	bf00      	nop
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20000694 	.word	0x20000694
 8009788:	20000750 	.word	0x20000750

0800978c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4a07      	ldr	r2, [pc, #28]	; (80097b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800979c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	4a06      	ldr	r2, [pc, #24]	; (80097bc <vApplicationGetTimerTaskMemory+0x30>)
 80097a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2280      	movs	r2, #128	; 0x80
 80097a8:	601a      	str	r2, [r3, #0]
}
 80097aa:	bf00      	nop
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	20000850 	.word	0x20000850
 80097bc:	2000090c 	.word	0x2000090c

080097c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f103 0208 	add.w	r2, r3, #8
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f04f 32ff 	mov.w	r2, #4294967295
 80097d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f103 0208 	add.w	r2, r3, #8
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f103 0208 	add.w	r2, r3, #8
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800980e:	bf00      	nop
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800981a:	b480      	push	{r7}
 800981c:	b085      	sub	sp, #20
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	689a      	ldr	r2, [r3, #8]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	683a      	ldr	r2, [r7, #0]
 800983e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	1c5a      	adds	r2, r3, #1
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	601a      	str	r2, [r3, #0]
}
 8009856:	bf00      	nop
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009862:	b480      	push	{r7}
 8009864:	b085      	sub	sp, #20
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009878:	d103      	bne.n	8009882 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	e00c      	b.n	800989c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	3308      	adds	r3, #8
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	e002      	b.n	8009890 <vListInsert+0x2e>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	60fb      	str	r3, [r7, #12]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	429a      	cmp	r2, r3
 800989a:	d2f6      	bcs.n	800988a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	685a      	ldr	r2, [r3, #4]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	1c5a      	adds	r2, r3, #1
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	601a      	str	r2, [r3, #0]
}
 80098c8:	bf00      	nop
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	6892      	ldr	r2, [r2, #8]
 80098ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6852      	ldr	r2, [r2, #4]
 80098f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d103      	bne.n	8009908 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	689a      	ldr	r2, [r3, #8]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	1e5a      	subs	r2, r3, #1
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10a      	bne.n	8009952 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800994e:	bf00      	nop
 8009950:	e7fe      	b.n	8009950 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009952:	f002 fc97 	bl	800c284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800995e:	68f9      	ldr	r1, [r7, #12]
 8009960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009962:	fb01 f303 	mul.w	r3, r1, r3
 8009966:	441a      	add	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009982:	3b01      	subs	r3, #1
 8009984:	68f9      	ldr	r1, [r7, #12]
 8009986:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009988:	fb01 f303 	mul.w	r3, r1, r3
 800998c:	441a      	add	r2, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	22ff      	movs	r2, #255	; 0xff
 8009996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	22ff      	movs	r2, #255	; 0xff
 800999e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d114      	bne.n	80099d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d01a      	beq.n	80099e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	3310      	adds	r3, #16
 80099b4:	4618      	mov	r0, r3
 80099b6:	f001 fc3b 	bl	800b230 <xTaskRemoveFromEventList>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d012      	beq.n	80099e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80099c0:	4b0c      	ldr	r3, [pc, #48]	; (80099f4 <xQueueGenericReset+0xcc>)
 80099c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	e009      	b.n	80099e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3310      	adds	r3, #16
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7ff fef2 	bl	80097c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	3324      	adds	r3, #36	; 0x24
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7ff feed 	bl	80097c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80099e6:	f002 fc7d 	bl	800c2e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80099ea:	2301      	movs	r3, #1
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	e000ed04 	.word	0xe000ed04

080099f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b08e      	sub	sp, #56	; 0x38
 80099fc:	af02      	add	r7, sp, #8
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
 8009a04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10a      	bne.n	8009a22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10a      	bne.n	8009a3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a3a:	bf00      	nop
 8009a3c:	e7fe      	b.n	8009a3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <xQueueGenericCreateStatic+0x52>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <xQueueGenericCreateStatic+0x56>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e000      	b.n	8009a50 <xQueueGenericCreateStatic+0x58>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10a      	bne.n	8009a6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	623b      	str	r3, [r7, #32]
}
 8009a66:	bf00      	nop
 8009a68:	e7fe      	b.n	8009a68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d102      	bne.n	8009a76 <xQueueGenericCreateStatic+0x7e>
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <xQueueGenericCreateStatic+0x82>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e000      	b.n	8009a7c <xQueueGenericCreateStatic+0x84>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10a      	bne.n	8009a96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	61fb      	str	r3, [r7, #28]
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a96:	2350      	movs	r3, #80	; 0x50
 8009a98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	2b50      	cmp	r3, #80	; 0x50
 8009a9e:	d00a      	beq.n	8009ab6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	61bb      	str	r3, [r7, #24]
}
 8009ab2:	bf00      	nop
 8009ab4:	e7fe      	b.n	8009ab4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ab6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00d      	beq.n	8009ade <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009aca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	68b9      	ldr	r1, [r7, #8]
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 f83f 	bl	8009b5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3730      	adds	r7, #48	; 0x30
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b08a      	sub	sp, #40	; 0x28
 8009aec:	af02      	add	r7, sp, #8
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	4613      	mov	r3, r2
 8009af4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10a      	bne.n	8009b12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	613b      	str	r3, [r7, #16]
}
 8009b0e:	bf00      	nop
 8009b10:	e7fe      	b.n	8009b10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	fb02 f303 	mul.w	r3, r2, r3
 8009b1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	3350      	adds	r3, #80	; 0x50
 8009b20:	4618      	mov	r0, r3
 8009b22:	f002 fcd1 	bl	800c4c8 <pvPortMalloc>
 8009b26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d011      	beq.n	8009b52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	3350      	adds	r3, #80	; 0x50
 8009b36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b40:	79fa      	ldrb	r2, [r7, #7]
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	4613      	mov	r3, r2
 8009b48:	697a      	ldr	r2, [r7, #20]
 8009b4a:	68b9      	ldr	r1, [r7, #8]
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 f805 	bl	8009b5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b52:	69bb      	ldr	r3, [r7, #24]
	}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3720      	adds	r7, #32
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d103      	bne.n	8009b78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	69ba      	ldr	r2, [r7, #24]
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	e002      	b.n	8009b7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	69b8      	ldr	r0, [r7, #24]
 8009b8e:	f7ff fecb 	bl	8009928 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009b9a:	bf00      	nop
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b082      	sub	sp, #8
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00e      	beq.n	8009bce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f8a1 	bl	8009d10 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009bce:	bf00      	nop
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b086      	sub	sp, #24
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	4603      	mov	r3, r0
 8009bde:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009be0:	2301      	movs	r3, #1
 8009be2:	617b      	str	r3, [r7, #20]
 8009be4:	2300      	movs	r3, #0
 8009be6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	461a      	mov	r2, r3
 8009bec:	6939      	ldr	r1, [r7, #16]
 8009bee:	6978      	ldr	r0, [r7, #20]
 8009bf0:	f7ff ff7a 	bl	8009ae8 <xQueueGenericCreate>
 8009bf4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f7ff ffd3 	bl	8009ba2 <prvInitialiseMutex>

		return xNewQueue;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
	}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b088      	sub	sp, #32
 8009c0a:	af02      	add	r7, sp, #8
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	6039      	str	r1, [r7, #0]
 8009c10:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c12:	2301      	movs	r3, #1
 8009c14:	617b      	str	r3, [r7, #20]
 8009c16:	2300      	movs	r3, #0
 8009c18:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009c1a:	79fb      	ldrb	r3, [r7, #7]
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	2200      	movs	r2, #0
 8009c22:	6939      	ldr	r1, [r7, #16]
 8009c24:	6978      	ldr	r0, [r7, #20]
 8009c26:	f7ff fee7 	bl	80099f8 <xQueueGenericCreateStatic>
 8009c2a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f7ff ffb8 	bl	8009ba2 <prvInitialiseMutex>

		return xNewQueue;
 8009c32:	68fb      	ldr	r3, [r7, #12]
	}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009c3c:	b590      	push	{r4, r7, lr}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10a      	bne.n	8009c64 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	60fb      	str	r3, [r7, #12]
}
 8009c60:	bf00      	nop
 8009c62:	e7fe      	b.n	8009c62 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	689c      	ldr	r4, [r3, #8]
 8009c68:	f001 fca4 	bl	800b5b4 <xTaskGetCurrentTaskHandle>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	429c      	cmp	r4, r3
 8009c70:	d111      	bne.n	8009c96 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	1e5a      	subs	r2, r3, #1
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d105      	bne.n	8009c90 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009c84:	2300      	movs	r3, #0
 8009c86:	2200      	movs	r2, #0
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6938      	ldr	r0, [r7, #16]
 8009c8c:	f000 f840 	bl	8009d10 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009c90:	2301      	movs	r3, #1
 8009c92:	617b      	str	r3, [r7, #20]
 8009c94:	e001      	b.n	8009c9a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009c96:	2300      	movs	r3, #0
 8009c98:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009c9a:	697b      	ldr	r3, [r7, #20]
	}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	371c      	adds	r7, #28
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd90      	pop	{r4, r7, pc}

08009ca4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009ca4:	b590      	push	{r4, r7, lr}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10a      	bne.n	8009cce <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	60fb      	str	r3, [r7, #12]
}
 8009cca:	bf00      	nop
 8009ccc:	e7fe      	b.n	8009ccc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	689c      	ldr	r4, [r3, #8]
 8009cd2:	f001 fc6f 	bl	800b5b4 <xTaskGetCurrentTaskHandle>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	429c      	cmp	r4, r3
 8009cda:	d107      	bne.n	8009cec <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	1c5a      	adds	r2, r3, #1
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	617b      	str	r3, [r7, #20]
 8009cea:	e00c      	b.n	8009d06 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6938      	ldr	r0, [r7, #16]
 8009cf0:	f000 fa88 	bl	800a204 <xQueueSemaphoreTake>
 8009cf4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d004      	beq.n	8009d06 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009d06:	697b      	ldr	r3, [r7, #20]
	}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	371c      	adds	r7, #28
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd90      	pop	{r4, r7, pc}

08009d10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b08e      	sub	sp, #56	; 0x38
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10a      	bne.n	8009d42 <xQueueGenericSend+0x32>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d103      	bne.n	8009d50 <xQueueGenericSend+0x40>
 8009d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <xQueueGenericSend+0x44>
 8009d50:	2301      	movs	r3, #1
 8009d52:	e000      	b.n	8009d56 <xQueueGenericSend+0x46>
 8009d54:	2300      	movs	r3, #0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10a      	bne.n	8009d70 <xQueueGenericSend+0x60>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d6c:	bf00      	nop
 8009d6e:	e7fe      	b.n	8009d6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d103      	bne.n	8009d7e <xQueueGenericSend+0x6e>
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d101      	bne.n	8009d82 <xQueueGenericSend+0x72>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e000      	b.n	8009d84 <xQueueGenericSend+0x74>
 8009d82:	2300      	movs	r3, #0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10a      	bne.n	8009d9e <xQueueGenericSend+0x8e>
	__asm volatile
 8009d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	623b      	str	r3, [r7, #32]
}
 8009d9a:	bf00      	nop
 8009d9c:	e7fe      	b.n	8009d9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d9e:	f001 fc19 	bl	800b5d4 <xTaskGetSchedulerState>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d102      	bne.n	8009dae <xQueueGenericSend+0x9e>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <xQueueGenericSend+0xa2>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e000      	b.n	8009db4 <xQueueGenericSend+0xa4>
 8009db2:	2300      	movs	r3, #0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10a      	bne.n	8009dce <xQueueGenericSend+0xbe>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	61fb      	str	r3, [r7, #28]
}
 8009dca:	bf00      	nop
 8009dcc:	e7fe      	b.n	8009dcc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dce:	f002 fa59 	bl	800c284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d302      	bcc.n	8009de4 <xQueueGenericSend+0xd4>
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d129      	bne.n	8009e38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009de4:	683a      	ldr	r2, [r7, #0]
 8009de6:	68b9      	ldr	r1, [r7, #8]
 8009de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dea:	f000 fbaf 	bl	800a54c <prvCopyDataToQueue>
 8009dee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d010      	beq.n	8009e1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	3324      	adds	r3, #36	; 0x24
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f001 fa17 	bl	800b230 <xTaskRemoveFromEventList>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d013      	beq.n	8009e30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e08:	4b3f      	ldr	r3, [pc, #252]	; (8009f08 <xQueueGenericSend+0x1f8>)
 8009e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	e00a      	b.n	8009e30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d007      	beq.n	8009e30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e20:	4b39      	ldr	r3, [pc, #228]	; (8009f08 <xQueueGenericSend+0x1f8>)
 8009e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e26:	601a      	str	r2, [r3, #0]
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e30:	f002 fa58 	bl	800c2e4 <vPortExitCritical>
				return pdPASS;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e063      	b.n	8009f00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d103      	bne.n	8009e46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e3e:	f002 fa51 	bl	800c2e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	e05c      	b.n	8009f00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d106      	bne.n	8009e5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e4c:	f107 0314 	add.w	r3, r7, #20
 8009e50:	4618      	mov	r0, r3
 8009e52:	f001 fa51 	bl	800b2f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e56:	2301      	movs	r3, #1
 8009e58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e5a:	f002 fa43 	bl	800c2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e5e:	f000 ffbd 	bl	800addc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e62:	f002 fa0f 	bl	800c284 <vPortEnterCritical>
 8009e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e6c:	b25b      	sxtb	r3, r3
 8009e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e72:	d103      	bne.n	8009e7c <xQueueGenericSend+0x16c>
 8009e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e82:	b25b      	sxtb	r3, r3
 8009e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e88:	d103      	bne.n	8009e92 <xQueueGenericSend+0x182>
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e92:	f002 fa27 	bl	800c2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e96:	1d3a      	adds	r2, r7, #4
 8009e98:	f107 0314 	add.w	r3, r7, #20
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f001 fa40 	bl	800b324 <xTaskCheckForTimeOut>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d124      	bne.n	8009ef4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eac:	f000 fc46 	bl	800a73c <prvIsQueueFull>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d018      	beq.n	8009ee8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	3310      	adds	r3, #16
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f001 f966 	bl	800b190 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ec6:	f000 fbd1 	bl	800a66c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009eca:	f000 ff95 	bl	800adf8 <xTaskResumeAll>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f47f af7c 	bne.w	8009dce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009ed6:	4b0c      	ldr	r3, [pc, #48]	; (8009f08 <xQueueGenericSend+0x1f8>)
 8009ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	e772      	b.n	8009dce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eea:	f000 fbbf 	bl	800a66c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009eee:	f000 ff83 	bl	800adf8 <xTaskResumeAll>
 8009ef2:	e76c      	b.n	8009dce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ef6:	f000 fbb9 	bl	800a66c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009efa:	f000 ff7d 	bl	800adf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009efe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3738      	adds	r7, #56	; 0x38
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	e000ed04 	.word	0xe000ed04

08009f0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b090      	sub	sp, #64	; 0x40
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10a      	bne.n	8009f3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d103      	bne.n	8009f48 <xQueueGenericSendFromISR+0x3c>
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d101      	bne.n	8009f4c <xQueueGenericSendFromISR+0x40>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e000      	b.n	8009f4e <xQueueGenericSendFromISR+0x42>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10a      	bne.n	8009f68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f56:	f383 8811 	msr	BASEPRI, r3
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f64:	bf00      	nop
 8009f66:	e7fe      	b.n	8009f66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d103      	bne.n	8009f76 <xQueueGenericSendFromISR+0x6a>
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d101      	bne.n	8009f7a <xQueueGenericSendFromISR+0x6e>
 8009f76:	2301      	movs	r3, #1
 8009f78:	e000      	b.n	8009f7c <xQueueGenericSendFromISR+0x70>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10a      	bne.n	8009f96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	623b      	str	r3, [r7, #32]
}
 8009f92:	bf00      	nop
 8009f94:	e7fe      	b.n	8009f94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f96:	f002 fa57 	bl	800c448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f9a:	f3ef 8211 	mrs	r2, BASEPRI
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	61fa      	str	r2, [r7, #28]
 8009fb0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009fb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d302      	bcc.n	8009fc8 <xQueueGenericSendFromISR+0xbc>
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d12f      	bne.n	800a028 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	68b9      	ldr	r1, [r7, #8]
 8009fdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009fde:	f000 fab5 	bl	800a54c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009fe2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fea:	d112      	bne.n	800a012 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d016      	beq.n	800a022 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	3324      	adds	r3, #36	; 0x24
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f001 f919 	bl	800b230 <xTaskRemoveFromEventList>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00e      	beq.n	800a022 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00b      	beq.n	800a022 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	601a      	str	r2, [r3, #0]
 800a010:	e007      	b.n	800a022 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a012:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a016:	3301      	adds	r3, #1
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	b25a      	sxtb	r2, r3
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a022:	2301      	movs	r3, #1
 800a024:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a026:	e001      	b.n	800a02c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a028:	2300      	movs	r3, #0
 800a02a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a036:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3740      	adds	r7, #64	; 0x40
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08c      	sub	sp, #48	; 0x30
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a050:	2300      	movs	r3, #0
 800a052:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10a      	bne.n	800a074 <xQueueReceive+0x30>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	623b      	str	r3, [r7, #32]
}
 800a070:	bf00      	nop
 800a072:	e7fe      	b.n	800a072 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d103      	bne.n	800a082 <xQueueReceive+0x3e>
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d101      	bne.n	800a086 <xQueueReceive+0x42>
 800a082:	2301      	movs	r3, #1
 800a084:	e000      	b.n	800a088 <xQueueReceive+0x44>
 800a086:	2300      	movs	r3, #0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10a      	bne.n	800a0a2 <xQueueReceive+0x5e>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	61fb      	str	r3, [r7, #28]
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0a2:	f001 fa97 	bl	800b5d4 <xTaskGetSchedulerState>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d102      	bne.n	800a0b2 <xQueueReceive+0x6e>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <xQueueReceive+0x72>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e000      	b.n	800a0b8 <xQueueReceive+0x74>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10a      	bne.n	800a0d2 <xQueueReceive+0x8e>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	61bb      	str	r3, [r7, #24]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0d2:	f002 f8d7 	bl	800c284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d01f      	beq.n	800a122 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0e2:	68b9      	ldr	r1, [r7, #8]
 800a0e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0e6:	f000 fa9b 	bl	800a620 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	1e5a      	subs	r2, r3, #1
 800a0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00f      	beq.n	800a11a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	3310      	adds	r3, #16
 800a0fe:	4618      	mov	r0, r3
 800a100:	f001 f896 	bl	800b230 <xTaskRemoveFromEventList>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d007      	beq.n	800a11a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a10a:	4b3d      	ldr	r3, [pc, #244]	; (800a200 <xQueueReceive+0x1bc>)
 800a10c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a110:	601a      	str	r2, [r3, #0]
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a11a:	f002 f8e3 	bl	800c2e4 <vPortExitCritical>
				return pdPASS;
 800a11e:	2301      	movs	r3, #1
 800a120:	e069      	b.n	800a1f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d103      	bne.n	800a130 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a128:	f002 f8dc 	bl	800c2e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a12c:	2300      	movs	r3, #0
 800a12e:	e062      	b.n	800a1f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a132:	2b00      	cmp	r3, #0
 800a134:	d106      	bne.n	800a144 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a136:	f107 0310 	add.w	r3, r7, #16
 800a13a:	4618      	mov	r0, r3
 800a13c:	f001 f8dc 	bl	800b2f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a140:	2301      	movs	r3, #1
 800a142:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a144:	f002 f8ce 	bl	800c2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a148:	f000 fe48 	bl	800addc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a14c:	f002 f89a 	bl	800c284 <vPortEnterCritical>
 800a150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a156:	b25b      	sxtb	r3, r3
 800a158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15c:	d103      	bne.n	800a166 <xQueueReceive+0x122>
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	2200      	movs	r2, #0
 800a162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a16c:	b25b      	sxtb	r3, r3
 800a16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a172:	d103      	bne.n	800a17c <xQueueReceive+0x138>
 800a174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a176:	2200      	movs	r2, #0
 800a178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a17c:	f002 f8b2 	bl	800c2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a180:	1d3a      	adds	r2, r7, #4
 800a182:	f107 0310 	add.w	r3, r7, #16
 800a186:	4611      	mov	r1, r2
 800a188:	4618      	mov	r0, r3
 800a18a:	f001 f8cb 	bl	800b324 <xTaskCheckForTimeOut>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d123      	bne.n	800a1dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a196:	f000 fabb 	bl	800a710 <prvIsQueueEmpty>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d017      	beq.n	800a1d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a2:	3324      	adds	r3, #36	; 0x24
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 fff1 	bl	800b190 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1b0:	f000 fa5c 	bl	800a66c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1b4:	f000 fe20 	bl	800adf8 <xTaskResumeAll>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d189      	bne.n	800a0d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a1be:	4b10      	ldr	r3, [pc, #64]	; (800a200 <xQueueReceive+0x1bc>)
 800a1c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c4:	601a      	str	r2, [r3, #0]
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	e780      	b.n	800a0d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a1d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1d2:	f000 fa4b 	bl	800a66c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1d6:	f000 fe0f 	bl	800adf8 <xTaskResumeAll>
 800a1da:	e77a      	b.n	800a0d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a1dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1de:	f000 fa45 	bl	800a66c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1e2:	f000 fe09 	bl	800adf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e8:	f000 fa92 	bl	800a710 <prvIsQueueEmpty>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f43f af6f 	beq.w	800a0d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3730      	adds	r7, #48	; 0x30
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	e000ed04 	.word	0xe000ed04

0800a204 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b08e      	sub	sp, #56	; 0x38
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a20e:	2300      	movs	r3, #0
 800a210:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a216:	2300      	movs	r3, #0
 800a218:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	623b      	str	r3, [r7, #32]
}
 800a232:	bf00      	nop
 800a234:	e7fe      	b.n	800a234 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00a      	beq.n	800a254 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	61fb      	str	r3, [r7, #28]
}
 800a250:	bf00      	nop
 800a252:	e7fe      	b.n	800a252 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a254:	f001 f9be 	bl	800b5d4 <xTaskGetSchedulerState>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d102      	bne.n	800a264 <xQueueSemaphoreTake+0x60>
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <xQueueSemaphoreTake+0x64>
 800a264:	2301      	movs	r3, #1
 800a266:	e000      	b.n	800a26a <xQueueSemaphoreTake+0x66>
 800a268:	2300      	movs	r3, #0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10a      	bne.n	800a284 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	61bb      	str	r3, [r7, #24]
}
 800a280:	bf00      	nop
 800a282:	e7fe      	b.n	800a282 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a284:	f001 fffe 	bl	800c284 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a290:	2b00      	cmp	r3, #0
 800a292:	d024      	beq.n	800a2de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	1e5a      	subs	r2, r3, #1
 800a298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d104      	bne.n	800a2ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a2a4:	f001 fb0c 	bl	800b8c0 <pvTaskIncrementMutexHeldCount>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00f      	beq.n	800a2d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b8:	3310      	adds	r3, #16
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 ffb8 	bl	800b230 <xTaskRemoveFromEventList>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d007      	beq.n	800a2d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2c6:	4b54      	ldr	r3, [pc, #336]	; (800a418 <xQueueSemaphoreTake+0x214>)
 800a2c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2d6:	f002 f805 	bl	800c2e4 <vPortExitCritical>
				return pdPASS;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e097      	b.n	800a40e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d111      	bne.n	800a308 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00a      	beq.n	800a300 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ee:	f383 8811 	msr	BASEPRI, r3
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	617b      	str	r3, [r7, #20]
}
 800a2fc:	bf00      	nop
 800a2fe:	e7fe      	b.n	800a2fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a300:	f001 fff0 	bl	800c2e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a304:	2300      	movs	r3, #0
 800a306:	e082      	b.n	800a40e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d106      	bne.n	800a31c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a30e:	f107 030c 	add.w	r3, r7, #12
 800a312:	4618      	mov	r0, r3
 800a314:	f000 fff0 	bl	800b2f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a318:	2301      	movs	r3, #1
 800a31a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a31c:	f001 ffe2 	bl	800c2e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a320:	f000 fd5c 	bl	800addc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a324:	f001 ffae 	bl	800c284 <vPortEnterCritical>
 800a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a32e:	b25b      	sxtb	r3, r3
 800a330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a334:	d103      	bne.n	800a33e <xQueueSemaphoreTake+0x13a>
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a344:	b25b      	sxtb	r3, r3
 800a346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34a:	d103      	bne.n	800a354 <xQueueSemaphoreTake+0x150>
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a354:	f001 ffc6 	bl	800c2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a358:	463a      	mov	r2, r7
 800a35a:	f107 030c 	add.w	r3, r7, #12
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f000 ffdf 	bl	800b324 <xTaskCheckForTimeOut>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d132      	bne.n	800a3d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a36c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a36e:	f000 f9cf 	bl	800a710 <prvIsQueueEmpty>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d026      	beq.n	800a3c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d109      	bne.n	800a394 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a380:	f001 ff80 	bl	800c284 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	4618      	mov	r0, r3
 800a38a:	f001 f941 	bl	800b610 <xTaskPriorityInherit>
 800a38e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a390:	f001 ffa8 	bl	800c2e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a396:	3324      	adds	r3, #36	; 0x24
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	4611      	mov	r1, r2
 800a39c:	4618      	mov	r0, r3
 800a39e:	f000 fef7 	bl	800b190 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3a4:	f000 f962 	bl	800a66c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3a8:	f000 fd26 	bl	800adf8 <xTaskResumeAll>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f47f af68 	bne.w	800a284 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a3b4:	4b18      	ldr	r3, [pc, #96]	; (800a418 <xQueueSemaphoreTake+0x214>)
 800a3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	e75e      	b.n	800a284 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a3c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3c8:	f000 f950 	bl	800a66c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3cc:	f000 fd14 	bl	800adf8 <xTaskResumeAll>
 800a3d0:	e758      	b.n	800a284 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a3d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3d4:	f000 f94a 	bl	800a66c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3d8:	f000 fd0e 	bl	800adf8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3de:	f000 f997 	bl	800a710 <prvIsQueueEmpty>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f43f af4d 	beq.w	800a284 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00d      	beq.n	800a40c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a3f0:	f001 ff48 	bl	800c284 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a3f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3f6:	f000 f891 	bl	800a51c <prvGetDisinheritPriorityAfterTimeout>
 800a3fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a402:	4618      	mov	r0, r3
 800a404:	f001 f9da 	bl	800b7bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a408:	f001 ff6c 	bl	800c2e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a40c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3738      	adds	r7, #56	; 0x38
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	e000ed04 	.word	0xe000ed04

0800a41c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b08e      	sub	sp, #56	; 0x38
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10a      	bne.n	800a448 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	623b      	str	r3, [r7, #32]
}
 800a444:	bf00      	nop
 800a446:	e7fe      	b.n	800a446 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d103      	bne.n	800a456 <xQueueReceiveFromISR+0x3a>
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <xQueueReceiveFromISR+0x3e>
 800a456:	2301      	movs	r3, #1
 800a458:	e000      	b.n	800a45c <xQueueReceiveFromISR+0x40>
 800a45a:	2300      	movs	r3, #0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10a      	bne.n	800a476 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	61fb      	str	r3, [r7, #28]
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a476:	f001 ffe7 	bl	800c448 <vPortValidateInterruptPriority>
	__asm volatile
 800a47a:	f3ef 8211 	mrs	r2, BASEPRI
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	61ba      	str	r2, [r7, #24]
 800a490:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a492:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a494:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d02f      	beq.n	800a502 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4ac:	68b9      	ldr	r1, [r7, #8]
 800a4ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4b0:	f000 f8b6 	bl	800a620 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	1e5a      	subs	r2, r3, #1
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a4bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c4:	d112      	bne.n	800a4ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d016      	beq.n	800a4fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d0:	3310      	adds	r3, #16
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 feac 	bl	800b230 <xTaskRemoveFromEventList>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00e      	beq.n	800a4fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00b      	beq.n	800a4fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	e007      	b.n	800a4fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	b25a      	sxtb	r2, r3
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	637b      	str	r3, [r7, #52]	; 0x34
 800a500:	e001      	b.n	800a506 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a502:	2300      	movs	r3, #0
 800a504:	637b      	str	r3, [r7, #52]	; 0x34
 800a506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a508:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	f383 8811 	msr	BASEPRI, r3
}
 800a510:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a514:	4618      	mov	r0, r3
 800a516:	3738      	adds	r7, #56	; 0x38
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a51c:	b480      	push	{r7}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d006      	beq.n	800a53a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a536:	60fb      	str	r3, [r7, #12]
 800a538:	e001      	b.n	800a53e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a53a:	2300      	movs	r3, #0
 800a53c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a53e:	68fb      	ldr	r3, [r7, #12]
	}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a558:	2300      	movs	r3, #0
 800a55a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a560:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10d      	bne.n	800a586 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d14d      	bne.n	800a60e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	4618      	mov	r0, r3
 800a578:	f001 f8b2 	bl	800b6e0 <xTaskPriorityDisinherit>
 800a57c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	609a      	str	r2, [r3, #8]
 800a584:	e043      	b.n	800a60e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d119      	bne.n	800a5c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6858      	ldr	r0, [r3, #4]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a594:	461a      	mov	r2, r3
 800a596:	68b9      	ldr	r1, [r7, #8]
 800a598:	f002 f9ac 	bl	800c8f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a4:	441a      	add	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d32b      	bcc.n	800a60e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	605a      	str	r2, [r3, #4]
 800a5be:	e026      	b.n	800a60e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	68d8      	ldr	r0, [r3, #12]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	68b9      	ldr	r1, [r7, #8]
 800a5cc:	f002 f992 	bl	800c8f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	68da      	ldr	r2, [r3, #12]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d8:	425b      	negs	r3, r3
 800a5da:	441a      	add	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	68da      	ldr	r2, [r3, #12]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d207      	bcs.n	800a5fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	689a      	ldr	r2, [r3, #8]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f4:	425b      	negs	r3, r3
 800a5f6:	441a      	add	r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d105      	bne.n	800a60e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a616:	697b      	ldr	r3, [r7, #20]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d018      	beq.n	800a664 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63a:	441a      	add	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d303      	bcc.n	800a654 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68d9      	ldr	r1, [r3, #12]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65c:	461a      	mov	r2, r3
 800a65e:	6838      	ldr	r0, [r7, #0]
 800a660:	f002 f948 	bl	800c8f4 <memcpy>
	}
}
 800a664:	bf00      	nop
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a674:	f001 fe06 	bl	800c284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a67e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a680:	e011      	b.n	800a6a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	2b00      	cmp	r3, #0
 800a688:	d012      	beq.n	800a6b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	3324      	adds	r3, #36	; 0x24
 800a68e:	4618      	mov	r0, r3
 800a690:	f000 fdce 	bl	800b230 <xTaskRemoveFromEventList>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a69a:	f000 fea5 	bl	800b3e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a69e:	7bfb      	ldrb	r3, [r7, #15]
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	dce9      	bgt.n	800a682 <prvUnlockQueue+0x16>
 800a6ae:	e000      	b.n	800a6b2 <prvUnlockQueue+0x46>
					break;
 800a6b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	22ff      	movs	r2, #255	; 0xff
 800a6b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6ba:	f001 fe13 	bl	800c2e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6be:	f001 fde1 	bl	800c284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6ca:	e011      	b.n	800a6f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d012      	beq.n	800a6fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	3310      	adds	r3, #16
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 fda9 	bl	800b230 <xTaskRemoveFromEventList>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6e4:	f000 fe80 	bl	800b3e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6e8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	dce9      	bgt.n	800a6cc <prvUnlockQueue+0x60>
 800a6f8:	e000      	b.n	800a6fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a6fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	22ff      	movs	r2, #255	; 0xff
 800a700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a704:	f001 fdee 	bl	800c2e4 <vPortExitCritical>
}
 800a708:	bf00      	nop
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a718:	f001 fdb4 	bl	800c284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a720:	2b00      	cmp	r3, #0
 800a722:	d102      	bne.n	800a72a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a724:	2301      	movs	r3, #1
 800a726:	60fb      	str	r3, [r7, #12]
 800a728:	e001      	b.n	800a72e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a72a:	2300      	movs	r3, #0
 800a72c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a72e:	f001 fdd9 	bl	800c2e4 <vPortExitCritical>

	return xReturn;
 800a732:	68fb      	ldr	r3, [r7, #12]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a744:	f001 fd9e 	bl	800c284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a750:	429a      	cmp	r2, r3
 800a752:	d102      	bne.n	800a75a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a754:	2301      	movs	r3, #1
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	e001      	b.n	800a75e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a75a:	2300      	movs	r3, #0
 800a75c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a75e:	f001 fdc1 	bl	800c2e4 <vPortExitCritical>

	return xReturn;
 800a762:	68fb      	ldr	r3, [r7, #12]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a776:	2300      	movs	r3, #0
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	e014      	b.n	800a7a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a77c:	4a0f      	ldr	r2, [pc, #60]	; (800a7bc <vQueueAddToRegistry+0x50>)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10b      	bne.n	800a7a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a788:	490c      	ldr	r1, [pc, #48]	; (800a7bc <vQueueAddToRegistry+0x50>)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a792:	4a0a      	ldr	r2, [pc, #40]	; (800a7bc <vQueueAddToRegistry+0x50>)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	00db      	lsls	r3, r3, #3
 800a798:	4413      	add	r3, r2
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a79e:	e006      	b.n	800a7ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2b07      	cmp	r3, #7
 800a7aa:	d9e7      	bls.n	800a77c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7ac:	bf00      	nop
 800a7ae:	bf00      	nop
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	20000b0c 	.word	0x20000b0c

0800a7c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a7d0:	f001 fd58 	bl	800c284 <vPortEnterCritical>
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7da:	b25b      	sxtb	r3, r3
 800a7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e0:	d103      	bne.n	800a7ea <vQueueWaitForMessageRestricted+0x2a>
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7f0:	b25b      	sxtb	r3, r3
 800a7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f6:	d103      	bne.n	800a800 <vQueueWaitForMessageRestricted+0x40>
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a800:	f001 fd70 	bl	800c2e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d106      	bne.n	800a81a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	3324      	adds	r3, #36	; 0x24
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	68b9      	ldr	r1, [r7, #8]
 800a814:	4618      	mov	r0, r3
 800a816:	f000 fcdf 	bl	800b1d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a81a:	6978      	ldr	r0, [r7, #20]
 800a81c:	f7ff ff26 	bl	800a66c <prvUnlockQueue>
	}
 800a820:	bf00      	nop
 800a822:	3718      	adds	r7, #24
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08e      	sub	sp, #56	; 0x38
 800a82c:	af04      	add	r7, sp, #16
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10a      	bne.n	800a852 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	623b      	str	r3, [r7, #32]
}
 800a84e:	bf00      	nop
 800a850:	e7fe      	b.n	800a850 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <xTaskCreateStatic+0x46>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	61fb      	str	r3, [r7, #28]
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a86e:	23bc      	movs	r3, #188	; 0xbc
 800a870:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2bbc      	cmp	r3, #188	; 0xbc
 800a876:	d00a      	beq.n	800a88e <xTaskCreateStatic+0x66>
	__asm volatile
 800a878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87c:	f383 8811 	msr	BASEPRI, r3
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	61bb      	str	r3, [r7, #24]
}
 800a88a:	bf00      	nop
 800a88c:	e7fe      	b.n	800a88c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a88e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a892:	2b00      	cmp	r3, #0
 800a894:	d01e      	beq.n	800a8d4 <xTaskCreateStatic+0xac>
 800a896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d01b      	beq.n	800a8d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	9303      	str	r3, [sp, #12]
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	9302      	str	r3, [sp, #8]
 800a8b6:	f107 0314 	add.w	r3, r7, #20
 800a8ba:	9301      	str	r3, [sp, #4]
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	68b9      	ldr	r1, [r7, #8]
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f000 f850 	bl	800a96c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8ce:	f000 f8f3 	bl	800aab8 <prvAddNewTaskToReadyList>
 800a8d2:	e001      	b.n	800a8d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a8d8:	697b      	ldr	r3, [r7, #20]
	}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3728      	adds	r7, #40	; 0x28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b08c      	sub	sp, #48	; 0x30
 800a8e6:	af04      	add	r7, sp, #16
 800a8e8:	60f8      	str	r0, [r7, #12]
 800a8ea:	60b9      	str	r1, [r7, #8]
 800a8ec:	603b      	str	r3, [r7, #0]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a8f2:	88fb      	ldrh	r3, [r7, #6]
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f001 fde6 	bl	800c4c8 <pvPortMalloc>
 800a8fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00e      	beq.n	800a922 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a904:	20bc      	movs	r0, #188	; 0xbc
 800a906:	f001 fddf 	bl	800c4c8 <pvPortMalloc>
 800a90a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d003      	beq.n	800a91a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	631a      	str	r2, [r3, #48]	; 0x30
 800a918:	e005      	b.n	800a926 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a91a:	6978      	ldr	r0, [r7, #20]
 800a91c:	f001 fea0 	bl	800c660 <vPortFree>
 800a920:	e001      	b.n	800a926 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a922:	2300      	movs	r3, #0
 800a924:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d017      	beq.n	800a95c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	2200      	movs	r2, #0
 800a930:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a934:	88fa      	ldrh	r2, [r7, #6]
 800a936:	2300      	movs	r3, #0
 800a938:	9303      	str	r3, [sp, #12]
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	9302      	str	r3, [sp, #8]
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 f80e 	bl	800a96c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a950:	69f8      	ldr	r0, [r7, #28]
 800a952:	f000 f8b1 	bl	800aab8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a956:	2301      	movs	r3, #1
 800a958:	61bb      	str	r3, [r7, #24]
 800a95a:	e002      	b.n	800a962 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a95c:	f04f 33ff 	mov.w	r3, #4294967295
 800a960:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a962:	69bb      	ldr	r3, [r7, #24]
	}
 800a964:	4618      	mov	r0, r3
 800a966:	3720      	adds	r7, #32
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
 800a978:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	461a      	mov	r2, r3
 800a984:	21a5      	movs	r1, #165	; 0xa5
 800a986:	f001 ffc3 	bl	800c910 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a994:	3b01      	subs	r3, #1
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	f023 0307 	bic.w	r3, r3, #7
 800a9a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	f003 0307 	and.w	r3, r3, #7
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00a      	beq.n	800a9c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	617b      	str	r3, [r7, #20]
}
 800a9c0:	bf00      	nop
 800a9c2:	e7fe      	b.n	800a9c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d01f      	beq.n	800aa0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	61fb      	str	r3, [r7, #28]
 800a9ce:	e012      	b.n	800a9f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	7819      	ldrb	r1, [r3, #0]
 800a9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	4413      	add	r3, r2
 800a9de:	3334      	adds	r3, #52	; 0x34
 800a9e0:	460a      	mov	r2, r1
 800a9e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d006      	beq.n	800a9fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	61fb      	str	r3, [r7, #28]
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	2b0f      	cmp	r3, #15
 800a9fa:	d9e9      	bls.n	800a9d0 <prvInitialiseNewTask+0x64>
 800a9fc:	e000      	b.n	800aa00 <prvInitialiseNewTask+0x94>
			{
				break;
 800a9fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa08:	e003      	b.n	800aa12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	2b37      	cmp	r3, #55	; 0x37
 800aa16:	d901      	bls.n	800aa1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa18:	2337      	movs	r3, #55	; 0x37
 800aa1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa30:	3304      	adds	r3, #4
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fe fee4 	bl	8009800 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3a:	3318      	adds	r3, #24
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fe fedf 	bl	8009800 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6a:	3354      	adds	r3, #84	; 0x54
 800aa6c:	2260      	movs	r2, #96	; 0x60
 800aa6e:	2100      	movs	r1, #0
 800aa70:	4618      	mov	r0, r3
 800aa72:	f001 ff4d 	bl	800c910 <memset>
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	4a0c      	ldr	r2, [pc, #48]	; (800aaac <prvInitialiseNewTask+0x140>)
 800aa7a:	659a      	str	r2, [r3, #88]	; 0x58
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7e:	4a0c      	ldr	r2, [pc, #48]	; (800aab0 <prvInitialiseNewTask+0x144>)
 800aa80:	65da      	str	r2, [r3, #92]	; 0x5c
 800aa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa84:	4a0b      	ldr	r2, [pc, #44]	; (800aab4 <prvInitialiseNewTask+0x148>)
 800aa86:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	68f9      	ldr	r1, [r7, #12]
 800aa8c:	69b8      	ldr	r0, [r7, #24]
 800aa8e:	f001 facd 	bl	800c02c <pxPortInitialiseStack>
 800aa92:	4602      	mov	r2, r0
 800aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d002      	beq.n	800aaa4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaa2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaa4:	bf00      	nop
 800aaa6:	3720      	adds	r7, #32
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	0800f7d8 	.word	0x0800f7d8
 800aab0:	0800f7f8 	.word	0x0800f7f8
 800aab4:	0800f7b8 	.word	0x0800f7b8

0800aab8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aac0:	f001 fbe0 	bl	800c284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aac4:	4b2d      	ldr	r3, [pc, #180]	; (800ab7c <prvAddNewTaskToReadyList+0xc4>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	3301      	adds	r3, #1
 800aaca:	4a2c      	ldr	r2, [pc, #176]	; (800ab7c <prvAddNewTaskToReadyList+0xc4>)
 800aacc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aace:	4b2c      	ldr	r3, [pc, #176]	; (800ab80 <prvAddNewTaskToReadyList+0xc8>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d109      	bne.n	800aaea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aad6:	4a2a      	ldr	r2, [pc, #168]	; (800ab80 <prvAddNewTaskToReadyList+0xc8>)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aadc:	4b27      	ldr	r3, [pc, #156]	; (800ab7c <prvAddNewTaskToReadyList+0xc4>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d110      	bne.n	800ab06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aae4:	f000 fca4 	bl	800b430 <prvInitialiseTaskLists>
 800aae8:	e00d      	b.n	800ab06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aaea:	4b26      	ldr	r3, [pc, #152]	; (800ab84 <prvAddNewTaskToReadyList+0xcc>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d109      	bne.n	800ab06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aaf2:	4b23      	ldr	r3, [pc, #140]	; (800ab80 <prvAddNewTaskToReadyList+0xc8>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d802      	bhi.n	800ab06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab00:	4a1f      	ldr	r2, [pc, #124]	; (800ab80 <prvAddNewTaskToReadyList+0xc8>)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab06:	4b20      	ldr	r3, [pc, #128]	; (800ab88 <prvAddNewTaskToReadyList+0xd0>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	4a1e      	ldr	r2, [pc, #120]	; (800ab88 <prvAddNewTaskToReadyList+0xd0>)
 800ab0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab10:	4b1d      	ldr	r3, [pc, #116]	; (800ab88 <prvAddNewTaskToReadyList+0xd0>)
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1c:	4b1b      	ldr	r3, [pc, #108]	; (800ab8c <prvAddNewTaskToReadyList+0xd4>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d903      	bls.n	800ab2c <prvAddNewTaskToReadyList+0x74>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	4a18      	ldr	r2, [pc, #96]	; (800ab8c <prvAddNewTaskToReadyList+0xd4>)
 800ab2a:	6013      	str	r3, [r2, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab30:	4613      	mov	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4413      	add	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4a15      	ldr	r2, [pc, #84]	; (800ab90 <prvAddNewTaskToReadyList+0xd8>)
 800ab3a:	441a      	add	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	3304      	adds	r3, #4
 800ab40:	4619      	mov	r1, r3
 800ab42:	4610      	mov	r0, r2
 800ab44:	f7fe fe69 	bl	800981a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab48:	f001 fbcc 	bl	800c2e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab4c:	4b0d      	ldr	r3, [pc, #52]	; (800ab84 <prvAddNewTaskToReadyList+0xcc>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00e      	beq.n	800ab72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab54:	4b0a      	ldr	r3, [pc, #40]	; (800ab80 <prvAddNewTaskToReadyList+0xc8>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d207      	bcs.n	800ab72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab62:	4b0c      	ldr	r3, [pc, #48]	; (800ab94 <prvAddNewTaskToReadyList+0xdc>)
 800ab64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab68:	601a      	str	r2, [r3, #0]
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab72:	bf00      	nop
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20001020 	.word	0x20001020
 800ab80:	20000b4c 	.word	0x20000b4c
 800ab84:	2000102c 	.word	0x2000102c
 800ab88:	2000103c 	.word	0x2000103c
 800ab8c:	20001028 	.word	0x20001028
 800ab90:	20000b50 	.word	0x20000b50
 800ab94:	e000ed04 	.word	0xe000ed04

0800ab98 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08a      	sub	sp, #40	; 0x28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800aba2:	2300      	movs	r3, #0
 800aba4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10a      	bne.n	800abc2 <vTaskDelayUntil+0x2a>
	__asm volatile
 800abac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	617b      	str	r3, [r7, #20]
}
 800abbe:	bf00      	nop
 800abc0:	e7fe      	b.n	800abc0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10a      	bne.n	800abde <vTaskDelayUntil+0x46>
	__asm volatile
 800abc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	613b      	str	r3, [r7, #16]
}
 800abda:	bf00      	nop
 800abdc:	e7fe      	b.n	800abdc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800abde:	4b2a      	ldr	r3, [pc, #168]	; (800ac88 <vTaskDelayUntil+0xf0>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00a      	beq.n	800abfc <vTaskDelayUntil+0x64>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	60fb      	str	r3, [r7, #12]
}
 800abf8:	bf00      	nop
 800abfa:	e7fe      	b.n	800abfa <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800abfc:	f000 f8ee 	bl	800addc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ac00:	4b22      	ldr	r3, [pc, #136]	; (800ac8c <vTaskDelayUntil+0xf4>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6a3a      	ldr	r2, [r7, #32]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d20b      	bcs.n	800ac32 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	69fa      	ldr	r2, [r7, #28]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d211      	bcs.n	800ac48 <vTaskDelayUntil+0xb0>
 800ac24:	69fa      	ldr	r2, [r7, #28]
 800ac26:	6a3b      	ldr	r3, [r7, #32]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d90d      	bls.n	800ac48 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac30:	e00a      	b.n	800ac48 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	69fa      	ldr	r2, [r7, #28]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d303      	bcc.n	800ac44 <vTaskDelayUntil+0xac>
 800ac3c:	69fa      	ldr	r2, [r7, #28]
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d901      	bls.n	800ac48 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ac44:	2301      	movs	r3, #1
 800ac46:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	69fa      	ldr	r2, [r7, #28]
 800ac4c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d006      	beq.n	800ac62 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ac54:	69fa      	ldr	r2, [r7, #28]
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 fe43 	bl	800b8e8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ac62:	f000 f8c9 	bl	800adf8 <xTaskResumeAll>
 800ac66:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d107      	bne.n	800ac7e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800ac6e:	4b08      	ldr	r3, [pc, #32]	; (800ac90 <vTaskDelayUntil+0xf8>)
 800ac70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac74:	601a      	str	r2, [r3, #0]
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac7e:	bf00      	nop
 800ac80:	3728      	adds	r7, #40	; 0x28
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	20001048 	.word	0x20001048
 800ac8c:	20001024 	.word	0x20001024
 800ac90:	e000ed04 	.word	0xe000ed04

0800ac94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d017      	beq.n	800acd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aca6:	4b13      	ldr	r3, [pc, #76]	; (800acf4 <vTaskDelay+0x60>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00a      	beq.n	800acc4 <vTaskDelay+0x30>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	60bb      	str	r3, [r7, #8]
}
 800acc0:	bf00      	nop
 800acc2:	e7fe      	b.n	800acc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800acc4:	f000 f88a 	bl	800addc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800acc8:	2100      	movs	r1, #0
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fe0c 	bl	800b8e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800acd0:	f000 f892 	bl	800adf8 <xTaskResumeAll>
 800acd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d107      	bne.n	800acec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800acdc:	4b06      	ldr	r3, [pc, #24]	; (800acf8 <vTaskDelay+0x64>)
 800acde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acec:	bf00      	nop
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	20001048 	.word	0x20001048
 800acf8:	e000ed04 	.word	0xe000ed04

0800acfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08a      	sub	sp, #40	; 0x28
 800ad00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad0a:	463a      	mov	r2, r7
 800ad0c:	1d39      	adds	r1, r7, #4
 800ad0e:	f107 0308 	add.w	r3, r7, #8
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fe fd20 	bl	8009758 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad18:	6839      	ldr	r1, [r7, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	9202      	str	r2, [sp, #8]
 800ad20:	9301      	str	r3, [sp, #4]
 800ad22:	2300      	movs	r3, #0
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	2300      	movs	r3, #0
 800ad28:	460a      	mov	r2, r1
 800ad2a:	4924      	ldr	r1, [pc, #144]	; (800adbc <vTaskStartScheduler+0xc0>)
 800ad2c:	4824      	ldr	r0, [pc, #144]	; (800adc0 <vTaskStartScheduler+0xc4>)
 800ad2e:	f7ff fd7b 	bl	800a828 <xTaskCreateStatic>
 800ad32:	4603      	mov	r3, r0
 800ad34:	4a23      	ldr	r2, [pc, #140]	; (800adc4 <vTaskStartScheduler+0xc8>)
 800ad36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad38:	4b22      	ldr	r3, [pc, #136]	; (800adc4 <vTaskStartScheduler+0xc8>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad40:	2301      	movs	r3, #1
 800ad42:	617b      	str	r3, [r7, #20]
 800ad44:	e001      	b.n	800ad4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad46:	2300      	movs	r3, #0
 800ad48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d102      	bne.n	800ad56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ad50:	f000 fe1e 	bl	800b990 <xTimerCreateTimerTask>
 800ad54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d11b      	bne.n	800ad94 <vTaskStartScheduler+0x98>
	__asm volatile
 800ad5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	613b      	str	r3, [r7, #16]
}
 800ad6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad70:	4b15      	ldr	r3, [pc, #84]	; (800adc8 <vTaskStartScheduler+0xcc>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3354      	adds	r3, #84	; 0x54
 800ad76:	4a15      	ldr	r2, [pc, #84]	; (800adcc <vTaskStartScheduler+0xd0>)
 800ad78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad7a:	4b15      	ldr	r3, [pc, #84]	; (800add0 <vTaskStartScheduler+0xd4>)
 800ad7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad82:	4b14      	ldr	r3, [pc, #80]	; (800add4 <vTaskStartScheduler+0xd8>)
 800ad84:	2201      	movs	r2, #1
 800ad86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad88:	4b13      	ldr	r3, [pc, #76]	; (800add8 <vTaskStartScheduler+0xdc>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad8e:	f001 f9d7 	bl	800c140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad92:	e00e      	b.n	800adb2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9a:	d10a      	bne.n	800adb2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	60fb      	str	r3, [r7, #12]
}
 800adae:	bf00      	nop
 800adb0:	e7fe      	b.n	800adb0 <vTaskStartScheduler+0xb4>
}
 800adb2:	bf00      	nop
 800adb4:	3718      	adds	r7, #24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	0800f190 	.word	0x0800f190
 800adc0:	0800b401 	.word	0x0800b401
 800adc4:	20001044 	.word	0x20001044
 800adc8:	20000b4c 	.word	0x20000b4c
 800adcc:	2000004c 	.word	0x2000004c
 800add0:	20001040 	.word	0x20001040
 800add4:	2000102c 	.word	0x2000102c
 800add8:	20001024 	.word	0x20001024

0800addc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800addc:	b480      	push	{r7}
 800adde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ade0:	4b04      	ldr	r3, [pc, #16]	; (800adf4 <vTaskSuspendAll+0x18>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3301      	adds	r3, #1
 800ade6:	4a03      	ldr	r2, [pc, #12]	; (800adf4 <vTaskSuspendAll+0x18>)
 800ade8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800adea:	bf00      	nop
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	20001048 	.word	0x20001048

0800adf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800adfe:	2300      	movs	r3, #0
 800ae00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae06:	4b42      	ldr	r3, [pc, #264]	; (800af10 <xTaskResumeAll+0x118>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10a      	bne.n	800ae24 <xTaskResumeAll+0x2c>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	603b      	str	r3, [r7, #0]
}
 800ae20:	bf00      	nop
 800ae22:	e7fe      	b.n	800ae22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae24:	f001 fa2e 	bl	800c284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae28:	4b39      	ldr	r3, [pc, #228]	; (800af10 <xTaskResumeAll+0x118>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	4a38      	ldr	r2, [pc, #224]	; (800af10 <xTaskResumeAll+0x118>)
 800ae30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae32:	4b37      	ldr	r3, [pc, #220]	; (800af10 <xTaskResumeAll+0x118>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d162      	bne.n	800af00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae3a:	4b36      	ldr	r3, [pc, #216]	; (800af14 <xTaskResumeAll+0x11c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d05e      	beq.n	800af00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae42:	e02f      	b.n	800aea4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae44:	4b34      	ldr	r3, [pc, #208]	; (800af18 <xTaskResumeAll+0x120>)
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	3318      	adds	r3, #24
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fe fd3f 	bl	80098d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3304      	adds	r3, #4
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fe fd3a 	bl	80098d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae64:	4b2d      	ldr	r3, [pc, #180]	; (800af1c <xTaskResumeAll+0x124>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d903      	bls.n	800ae74 <xTaskResumeAll+0x7c>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae70:	4a2a      	ldr	r2, [pc, #168]	; (800af1c <xTaskResumeAll+0x124>)
 800ae72:	6013      	str	r3, [r2, #0]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae78:	4613      	mov	r3, r2
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4413      	add	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4a27      	ldr	r2, [pc, #156]	; (800af20 <xTaskResumeAll+0x128>)
 800ae82:	441a      	add	r2, r3
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	3304      	adds	r3, #4
 800ae88:	4619      	mov	r1, r3
 800ae8a:	4610      	mov	r0, r2
 800ae8c:	f7fe fcc5 	bl	800981a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae94:	4b23      	ldr	r3, [pc, #140]	; (800af24 <xTaskResumeAll+0x12c>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d302      	bcc.n	800aea4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ae9e:	4b22      	ldr	r3, [pc, #136]	; (800af28 <xTaskResumeAll+0x130>)
 800aea0:	2201      	movs	r2, #1
 800aea2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aea4:	4b1c      	ldr	r3, [pc, #112]	; (800af18 <xTaskResumeAll+0x120>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1cb      	bne.n	800ae44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aeb2:	f000 fb5f 	bl	800b574 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aeb6:	4b1d      	ldr	r3, [pc, #116]	; (800af2c <xTaskResumeAll+0x134>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d010      	beq.n	800aee4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aec2:	f000 f847 	bl	800af54 <xTaskIncrementTick>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d002      	beq.n	800aed2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aecc:	4b16      	ldr	r3, [pc, #88]	; (800af28 <xTaskResumeAll+0x130>)
 800aece:	2201      	movs	r2, #1
 800aed0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	3b01      	subs	r3, #1
 800aed6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1f1      	bne.n	800aec2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aede:	4b13      	ldr	r3, [pc, #76]	; (800af2c <xTaskResumeAll+0x134>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aee4:	4b10      	ldr	r3, [pc, #64]	; (800af28 <xTaskResumeAll+0x130>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d009      	beq.n	800af00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aeec:	2301      	movs	r3, #1
 800aeee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aef0:	4b0f      	ldr	r3, [pc, #60]	; (800af30 <xTaskResumeAll+0x138>)
 800aef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef6:	601a      	str	r2, [r3, #0]
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af00:	f001 f9f0 	bl	800c2e4 <vPortExitCritical>

	return xAlreadyYielded;
 800af04:	68bb      	ldr	r3, [r7, #8]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	20001048 	.word	0x20001048
 800af14:	20001020 	.word	0x20001020
 800af18:	20000fe0 	.word	0x20000fe0
 800af1c:	20001028 	.word	0x20001028
 800af20:	20000b50 	.word	0x20000b50
 800af24:	20000b4c 	.word	0x20000b4c
 800af28:	20001034 	.word	0x20001034
 800af2c:	20001030 	.word	0x20001030
 800af30:	e000ed04 	.word	0xe000ed04

0800af34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af3a:	4b05      	ldr	r3, [pc, #20]	; (800af50 <xTaskGetTickCount+0x1c>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800af40:	687b      	ldr	r3, [r7, #4]
}
 800af42:	4618      	mov	r0, r3
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	20001024 	.word	0x20001024

0800af54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af5a:	2300      	movs	r3, #0
 800af5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af5e:	4b4f      	ldr	r3, [pc, #316]	; (800b09c <xTaskIncrementTick+0x148>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f040 808f 	bne.w	800b086 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af68:	4b4d      	ldr	r3, [pc, #308]	; (800b0a0 <xTaskIncrementTick+0x14c>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	3301      	adds	r3, #1
 800af6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af70:	4a4b      	ldr	r2, [pc, #300]	; (800b0a0 <xTaskIncrementTick+0x14c>)
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d120      	bne.n	800afbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800af7c:	4b49      	ldr	r3, [pc, #292]	; (800b0a4 <xTaskIncrementTick+0x150>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00a      	beq.n	800af9c <xTaskIncrementTick+0x48>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	603b      	str	r3, [r7, #0]
}
 800af98:	bf00      	nop
 800af9a:	e7fe      	b.n	800af9a <xTaskIncrementTick+0x46>
 800af9c:	4b41      	ldr	r3, [pc, #260]	; (800b0a4 <xTaskIncrementTick+0x150>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	4b41      	ldr	r3, [pc, #260]	; (800b0a8 <xTaskIncrementTick+0x154>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a3f      	ldr	r2, [pc, #252]	; (800b0a4 <xTaskIncrementTick+0x150>)
 800afa8:	6013      	str	r3, [r2, #0]
 800afaa:	4a3f      	ldr	r2, [pc, #252]	; (800b0a8 <xTaskIncrementTick+0x154>)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	4b3e      	ldr	r3, [pc, #248]	; (800b0ac <xTaskIncrementTick+0x158>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3301      	adds	r3, #1
 800afb6:	4a3d      	ldr	r2, [pc, #244]	; (800b0ac <xTaskIncrementTick+0x158>)
 800afb8:	6013      	str	r3, [r2, #0]
 800afba:	f000 fadb 	bl	800b574 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800afbe:	4b3c      	ldr	r3, [pc, #240]	; (800b0b0 <xTaskIncrementTick+0x15c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d349      	bcc.n	800b05c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afc8:	4b36      	ldr	r3, [pc, #216]	; (800b0a4 <xTaskIncrementTick+0x150>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d104      	bne.n	800afdc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afd2:	4b37      	ldr	r3, [pc, #220]	; (800b0b0 <xTaskIncrementTick+0x15c>)
 800afd4:	f04f 32ff 	mov.w	r2, #4294967295
 800afd8:	601a      	str	r2, [r3, #0]
					break;
 800afda:	e03f      	b.n	800b05c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afdc:	4b31      	ldr	r3, [pc, #196]	; (800b0a4 <xTaskIncrementTick+0x150>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800afec:	693a      	ldr	r2, [r7, #16]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d203      	bcs.n	800affc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aff4:	4a2e      	ldr	r2, [pc, #184]	; (800b0b0 <xTaskIncrementTick+0x15c>)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800affa:	e02f      	b.n	800b05c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	3304      	adds	r3, #4
 800b000:	4618      	mov	r0, r3
 800b002:	f7fe fc67 	bl	80098d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d004      	beq.n	800b018 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	3318      	adds	r3, #24
 800b012:	4618      	mov	r0, r3
 800b014:	f7fe fc5e 	bl	80098d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b01c:	4b25      	ldr	r3, [pc, #148]	; (800b0b4 <xTaskIncrementTick+0x160>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	429a      	cmp	r2, r3
 800b022:	d903      	bls.n	800b02c <xTaskIncrementTick+0xd8>
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b028:	4a22      	ldr	r2, [pc, #136]	; (800b0b4 <xTaskIncrementTick+0x160>)
 800b02a:	6013      	str	r3, [r2, #0]
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b030:	4613      	mov	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4a1f      	ldr	r2, [pc, #124]	; (800b0b8 <xTaskIncrementTick+0x164>)
 800b03a:	441a      	add	r2, r3
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	3304      	adds	r3, #4
 800b040:	4619      	mov	r1, r3
 800b042:	4610      	mov	r0, r2
 800b044:	f7fe fbe9 	bl	800981a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b04c:	4b1b      	ldr	r3, [pc, #108]	; (800b0bc <xTaskIncrementTick+0x168>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b052:	429a      	cmp	r2, r3
 800b054:	d3b8      	bcc.n	800afc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b056:	2301      	movs	r3, #1
 800b058:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b05a:	e7b5      	b.n	800afc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b05c:	4b17      	ldr	r3, [pc, #92]	; (800b0bc <xTaskIncrementTick+0x168>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b062:	4915      	ldr	r1, [pc, #84]	; (800b0b8 <xTaskIncrementTick+0x164>)
 800b064:	4613      	mov	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4413      	add	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	440b      	add	r3, r1
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d901      	bls.n	800b078 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b074:	2301      	movs	r3, #1
 800b076:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b078:	4b11      	ldr	r3, [pc, #68]	; (800b0c0 <xTaskIncrementTick+0x16c>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d007      	beq.n	800b090 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b080:	2301      	movs	r3, #1
 800b082:	617b      	str	r3, [r7, #20]
 800b084:	e004      	b.n	800b090 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b086:	4b0f      	ldr	r3, [pc, #60]	; (800b0c4 <xTaskIncrementTick+0x170>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3301      	adds	r3, #1
 800b08c:	4a0d      	ldr	r2, [pc, #52]	; (800b0c4 <xTaskIncrementTick+0x170>)
 800b08e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b090:	697b      	ldr	r3, [r7, #20]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3718      	adds	r7, #24
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20001048 	.word	0x20001048
 800b0a0:	20001024 	.word	0x20001024
 800b0a4:	20000fd8 	.word	0x20000fd8
 800b0a8:	20000fdc 	.word	0x20000fdc
 800b0ac:	20001038 	.word	0x20001038
 800b0b0:	20001040 	.word	0x20001040
 800b0b4:	20001028 	.word	0x20001028
 800b0b8:	20000b50 	.word	0x20000b50
 800b0bc:	20000b4c 	.word	0x20000b4c
 800b0c0:	20001034 	.word	0x20001034
 800b0c4:	20001030 	.word	0x20001030

0800b0c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b0ce:	4b2a      	ldr	r3, [pc, #168]	; (800b178 <vTaskSwitchContext+0xb0>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b0d6:	4b29      	ldr	r3, [pc, #164]	; (800b17c <vTaskSwitchContext+0xb4>)
 800b0d8:	2201      	movs	r2, #1
 800b0da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b0dc:	e046      	b.n	800b16c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b0de:	4b27      	ldr	r3, [pc, #156]	; (800b17c <vTaskSwitchContext+0xb4>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e4:	4b26      	ldr	r3, [pc, #152]	; (800b180 <vTaskSwitchContext+0xb8>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	60fb      	str	r3, [r7, #12]
 800b0ea:	e010      	b.n	800b10e <vTaskSwitchContext+0x46>
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10a      	bne.n	800b108 <vTaskSwitchContext+0x40>
	__asm volatile
 800b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	607b      	str	r3, [r7, #4]
}
 800b104:	bf00      	nop
 800b106:	e7fe      	b.n	800b106 <vTaskSwitchContext+0x3e>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3b01      	subs	r3, #1
 800b10c:	60fb      	str	r3, [r7, #12]
 800b10e:	491d      	ldr	r1, [pc, #116]	; (800b184 <vTaskSwitchContext+0xbc>)
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	4613      	mov	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	4413      	add	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	440b      	add	r3, r1
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d0e4      	beq.n	800b0ec <vTaskSwitchContext+0x24>
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	4613      	mov	r3, r2
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	4413      	add	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	4a15      	ldr	r2, [pc, #84]	; (800b184 <vTaskSwitchContext+0xbc>)
 800b12e:	4413      	add	r3, r2
 800b130:	60bb      	str	r3, [r7, #8]
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	685a      	ldr	r2, [r3, #4]
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	605a      	str	r2, [r3, #4]
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	685a      	ldr	r2, [r3, #4]
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	3308      	adds	r3, #8
 800b144:	429a      	cmp	r2, r3
 800b146:	d104      	bne.n	800b152 <vTaskSwitchContext+0x8a>
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	685a      	ldr	r2, [r3, #4]
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	605a      	str	r2, [r3, #4]
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	4a0b      	ldr	r2, [pc, #44]	; (800b188 <vTaskSwitchContext+0xc0>)
 800b15a:	6013      	str	r3, [r2, #0]
 800b15c:	4a08      	ldr	r2, [pc, #32]	; (800b180 <vTaskSwitchContext+0xb8>)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b162:	4b09      	ldr	r3, [pc, #36]	; (800b188 <vTaskSwitchContext+0xc0>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3354      	adds	r3, #84	; 0x54
 800b168:	4a08      	ldr	r2, [pc, #32]	; (800b18c <vTaskSwitchContext+0xc4>)
 800b16a:	6013      	str	r3, [r2, #0]
}
 800b16c:	bf00      	nop
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	20001048 	.word	0x20001048
 800b17c:	20001034 	.word	0x20001034
 800b180:	20001028 	.word	0x20001028
 800b184:	20000b50 	.word	0x20000b50
 800b188:	20000b4c 	.word	0x20000b4c
 800b18c:	2000004c 	.word	0x2000004c

0800b190 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10a      	bne.n	800b1b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	60fb      	str	r3, [r7, #12]
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1b6:	4b07      	ldr	r3, [pc, #28]	; (800b1d4 <vTaskPlaceOnEventList+0x44>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3318      	adds	r3, #24
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7fe fb4f 	bl	8009862 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	6838      	ldr	r0, [r7, #0]
 800b1c8:	f000 fb8e 	bl	800b8e8 <prvAddCurrentTaskToDelayedList>
}
 800b1cc:	bf00      	nop
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	20000b4c 	.word	0x20000b4c

0800b1d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10a      	bne.n	800b200 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	617b      	str	r3, [r7, #20]
}
 800b1fc:	bf00      	nop
 800b1fe:	e7fe      	b.n	800b1fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b200:	4b0a      	ldr	r3, [pc, #40]	; (800b22c <vTaskPlaceOnEventListRestricted+0x54>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	3318      	adds	r3, #24
 800b206:	4619      	mov	r1, r3
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f7fe fb06 	bl	800981a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b214:	f04f 33ff 	mov.w	r3, #4294967295
 800b218:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b21a:	6879      	ldr	r1, [r7, #4]
 800b21c:	68b8      	ldr	r0, [r7, #8]
 800b21e:	f000 fb63 	bl	800b8e8 <prvAddCurrentTaskToDelayedList>
	}
 800b222:	bf00      	nop
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	20000b4c 	.word	0x20000b4c

0800b230 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10a      	bne.n	800b25c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	60fb      	str	r3, [r7, #12]
}
 800b258:	bf00      	nop
 800b25a:	e7fe      	b.n	800b25a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	3318      	adds	r3, #24
 800b260:	4618      	mov	r0, r3
 800b262:	f7fe fb37 	bl	80098d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b266:	4b1e      	ldr	r3, [pc, #120]	; (800b2e0 <xTaskRemoveFromEventList+0xb0>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d11d      	bne.n	800b2aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	3304      	adds	r3, #4
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe fb2e 	bl	80098d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b27c:	4b19      	ldr	r3, [pc, #100]	; (800b2e4 <xTaskRemoveFromEventList+0xb4>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	429a      	cmp	r2, r3
 800b282:	d903      	bls.n	800b28c <xTaskRemoveFromEventList+0x5c>
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b288:	4a16      	ldr	r2, [pc, #88]	; (800b2e4 <xTaskRemoveFromEventList+0xb4>)
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b290:	4613      	mov	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4a13      	ldr	r2, [pc, #76]	; (800b2e8 <xTaskRemoveFromEventList+0xb8>)
 800b29a:	441a      	add	r2, r3
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	3304      	adds	r3, #4
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4610      	mov	r0, r2
 800b2a4:	f7fe fab9 	bl	800981a <vListInsertEnd>
 800b2a8:	e005      	b.n	800b2b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	3318      	adds	r3, #24
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	480e      	ldr	r0, [pc, #56]	; (800b2ec <xTaskRemoveFromEventList+0xbc>)
 800b2b2:	f7fe fab2 	bl	800981a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ba:	4b0d      	ldr	r3, [pc, #52]	; (800b2f0 <xTaskRemoveFromEventList+0xc0>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d905      	bls.n	800b2d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b2c8:	4b0a      	ldr	r3, [pc, #40]	; (800b2f4 <xTaskRemoveFromEventList+0xc4>)
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	601a      	str	r2, [r3, #0]
 800b2ce:	e001      	b.n	800b2d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b2d4:	697b      	ldr	r3, [r7, #20]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	20001048 	.word	0x20001048
 800b2e4:	20001028 	.word	0x20001028
 800b2e8:	20000b50 	.word	0x20000b50
 800b2ec:	20000fe0 	.word	0x20000fe0
 800b2f0:	20000b4c 	.word	0x20000b4c
 800b2f4:	20001034 	.word	0x20001034

0800b2f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b300:	4b06      	ldr	r3, [pc, #24]	; (800b31c <vTaskInternalSetTimeOutState+0x24>)
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b308:	4b05      	ldr	r3, [pc, #20]	; (800b320 <vTaskInternalSetTimeOutState+0x28>)
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	605a      	str	r2, [r3, #4]
}
 800b310:	bf00      	nop
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr
 800b31c:	20001038 	.word	0x20001038
 800b320:	20001024 	.word	0x20001024

0800b324 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b088      	sub	sp, #32
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10a      	bne.n	800b34a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	613b      	str	r3, [r7, #16]
}
 800b346:	bf00      	nop
 800b348:	e7fe      	b.n	800b348 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10a      	bne.n	800b366 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	60fb      	str	r3, [r7, #12]
}
 800b362:	bf00      	nop
 800b364:	e7fe      	b.n	800b364 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b366:	f000 ff8d 	bl	800c284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b36a:	4b1d      	ldr	r3, [pc, #116]	; (800b3e0 <xTaskCheckForTimeOut+0xbc>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	69ba      	ldr	r2, [r7, #24]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b382:	d102      	bne.n	800b38a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b384:	2300      	movs	r3, #0
 800b386:	61fb      	str	r3, [r7, #28]
 800b388:	e023      	b.n	800b3d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	4b15      	ldr	r3, [pc, #84]	; (800b3e4 <xTaskCheckForTimeOut+0xc0>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	429a      	cmp	r2, r3
 800b394:	d007      	beq.n	800b3a6 <xTaskCheckForTimeOut+0x82>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	69ba      	ldr	r2, [r7, #24]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d302      	bcc.n	800b3a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	61fb      	str	r3, [r7, #28]
 800b3a4:	e015      	b.n	800b3d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d20b      	bcs.n	800b3c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	1ad2      	subs	r2, r2, r3
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff ff9b 	bl	800b2f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	61fb      	str	r3, [r7, #28]
 800b3c6:	e004      	b.n	800b3d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b3d2:	f000 ff87 	bl	800c2e4 <vPortExitCritical>

	return xReturn;
 800b3d6:	69fb      	ldr	r3, [r7, #28]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3720      	adds	r7, #32
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	20001024 	.word	0x20001024
 800b3e4:	20001038 	.word	0x20001038

0800b3e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b3ec:	4b03      	ldr	r3, [pc, #12]	; (800b3fc <vTaskMissedYield+0x14>)
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	601a      	str	r2, [r3, #0]
}
 800b3f2:	bf00      	nop
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	20001034 	.word	0x20001034

0800b400 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b408:	f000 f852 	bl	800b4b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b40c:	4b06      	ldr	r3, [pc, #24]	; (800b428 <prvIdleTask+0x28>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d9f9      	bls.n	800b408 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b414:	4b05      	ldr	r3, [pc, #20]	; (800b42c <prvIdleTask+0x2c>)
 800b416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b41a:	601a      	str	r2, [r3, #0]
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b424:	e7f0      	b.n	800b408 <prvIdleTask+0x8>
 800b426:	bf00      	nop
 800b428:	20000b50 	.word	0x20000b50
 800b42c:	e000ed04 	.word	0xe000ed04

0800b430 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b436:	2300      	movs	r3, #0
 800b438:	607b      	str	r3, [r7, #4]
 800b43a:	e00c      	b.n	800b456 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	4613      	mov	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	4413      	add	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4a12      	ldr	r2, [pc, #72]	; (800b490 <prvInitialiseTaskLists+0x60>)
 800b448:	4413      	add	r3, r2
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fe f9b8 	bl	80097c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3301      	adds	r3, #1
 800b454:	607b      	str	r3, [r7, #4]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2b37      	cmp	r3, #55	; 0x37
 800b45a:	d9ef      	bls.n	800b43c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b45c:	480d      	ldr	r0, [pc, #52]	; (800b494 <prvInitialiseTaskLists+0x64>)
 800b45e:	f7fe f9af 	bl	80097c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b462:	480d      	ldr	r0, [pc, #52]	; (800b498 <prvInitialiseTaskLists+0x68>)
 800b464:	f7fe f9ac 	bl	80097c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b468:	480c      	ldr	r0, [pc, #48]	; (800b49c <prvInitialiseTaskLists+0x6c>)
 800b46a:	f7fe f9a9 	bl	80097c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b46e:	480c      	ldr	r0, [pc, #48]	; (800b4a0 <prvInitialiseTaskLists+0x70>)
 800b470:	f7fe f9a6 	bl	80097c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b474:	480b      	ldr	r0, [pc, #44]	; (800b4a4 <prvInitialiseTaskLists+0x74>)
 800b476:	f7fe f9a3 	bl	80097c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b47a:	4b0b      	ldr	r3, [pc, #44]	; (800b4a8 <prvInitialiseTaskLists+0x78>)
 800b47c:	4a05      	ldr	r2, [pc, #20]	; (800b494 <prvInitialiseTaskLists+0x64>)
 800b47e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b480:	4b0a      	ldr	r3, [pc, #40]	; (800b4ac <prvInitialiseTaskLists+0x7c>)
 800b482:	4a05      	ldr	r2, [pc, #20]	; (800b498 <prvInitialiseTaskLists+0x68>)
 800b484:	601a      	str	r2, [r3, #0]
}
 800b486:	bf00      	nop
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	20000b50 	.word	0x20000b50
 800b494:	20000fb0 	.word	0x20000fb0
 800b498:	20000fc4 	.word	0x20000fc4
 800b49c:	20000fe0 	.word	0x20000fe0
 800b4a0:	20000ff4 	.word	0x20000ff4
 800b4a4:	2000100c 	.word	0x2000100c
 800b4a8:	20000fd8 	.word	0x20000fd8
 800b4ac:	20000fdc 	.word	0x20000fdc

0800b4b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4b6:	e019      	b.n	800b4ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b4b8:	f000 fee4 	bl	800c284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4bc:	4b10      	ldr	r3, [pc, #64]	; (800b500 <prvCheckTasksWaitingTermination+0x50>)
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	3304      	adds	r3, #4
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fe fa03 	bl	80098d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b4ce:	4b0d      	ldr	r3, [pc, #52]	; (800b504 <prvCheckTasksWaitingTermination+0x54>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	4a0b      	ldr	r2, [pc, #44]	; (800b504 <prvCheckTasksWaitingTermination+0x54>)
 800b4d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b4d8:	4b0b      	ldr	r3, [pc, #44]	; (800b508 <prvCheckTasksWaitingTermination+0x58>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	4a0a      	ldr	r2, [pc, #40]	; (800b508 <prvCheckTasksWaitingTermination+0x58>)
 800b4e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b4e2:	f000 feff 	bl	800c2e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 f810 	bl	800b50c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4ec:	4b06      	ldr	r3, [pc, #24]	; (800b508 <prvCheckTasksWaitingTermination+0x58>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1e1      	bne.n	800b4b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b4f4:	bf00      	nop
 800b4f6:	bf00      	nop
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	20000ff4 	.word	0x20000ff4
 800b504:	20001020 	.word	0x20001020
 800b508:	20001008 	.word	0x20001008

0800b50c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	3354      	adds	r3, #84	; 0x54
 800b518:	4618      	mov	r0, r3
 800b51a:	f001 faa3 	bl	800ca64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b524:	2b00      	cmp	r3, #0
 800b526:	d108      	bne.n	800b53a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52c:	4618      	mov	r0, r3
 800b52e:	f001 f897 	bl	800c660 <vPortFree>
				vPortFree( pxTCB );
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f001 f894 	bl	800c660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b538:	e018      	b.n	800b56c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b540:	2b01      	cmp	r3, #1
 800b542:	d103      	bne.n	800b54c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 f88b 	bl	800c660 <vPortFree>
	}
 800b54a:	e00f      	b.n	800b56c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b552:	2b02      	cmp	r3, #2
 800b554:	d00a      	beq.n	800b56c <prvDeleteTCB+0x60>
	__asm volatile
 800b556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55a:	f383 8811 	msr	BASEPRI, r3
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f3bf 8f4f 	dsb	sy
 800b566:	60fb      	str	r3, [r7, #12]
}
 800b568:	bf00      	nop
 800b56a:	e7fe      	b.n	800b56a <prvDeleteTCB+0x5e>
	}
 800b56c:	bf00      	nop
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b57a:	4b0c      	ldr	r3, [pc, #48]	; (800b5ac <prvResetNextTaskUnblockTime+0x38>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d104      	bne.n	800b58e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b584:	4b0a      	ldr	r3, [pc, #40]	; (800b5b0 <prvResetNextTaskUnblockTime+0x3c>)
 800b586:	f04f 32ff 	mov.w	r2, #4294967295
 800b58a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b58c:	e008      	b.n	800b5a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b58e:	4b07      	ldr	r3, [pc, #28]	; (800b5ac <prvResetNextTaskUnblockTime+0x38>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	4a04      	ldr	r2, [pc, #16]	; (800b5b0 <prvResetNextTaskUnblockTime+0x3c>)
 800b59e:	6013      	str	r3, [r2, #0]
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	20000fd8 	.word	0x20000fd8
 800b5b0:	20001040 	.word	0x20001040

0800b5b4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b5ba:	4b05      	ldr	r3, [pc, #20]	; (800b5d0 <xTaskGetCurrentTaskHandle+0x1c>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b5c0:	687b      	ldr	r3, [r7, #4]
	}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	370c      	adds	r7, #12
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	20000b4c 	.word	0x20000b4c

0800b5d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b5da:	4b0b      	ldr	r3, [pc, #44]	; (800b608 <xTaskGetSchedulerState+0x34>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d102      	bne.n	800b5e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	607b      	str	r3, [r7, #4]
 800b5e6:	e008      	b.n	800b5fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5e8:	4b08      	ldr	r3, [pc, #32]	; (800b60c <xTaskGetSchedulerState+0x38>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d102      	bne.n	800b5f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b5f0:	2302      	movs	r3, #2
 800b5f2:	607b      	str	r3, [r7, #4]
 800b5f4:	e001      	b.n	800b5fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b5fa:	687b      	ldr	r3, [r7, #4]
	}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr
 800b608:	2000102c 	.word	0x2000102c
 800b60c:	20001048 	.word	0x20001048

0800b610 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b61c:	2300      	movs	r3, #0
 800b61e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d051      	beq.n	800b6ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62a:	4b2a      	ldr	r3, [pc, #168]	; (800b6d4 <xTaskPriorityInherit+0xc4>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b630:	429a      	cmp	r2, r3
 800b632:	d241      	bcs.n	800b6b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	699b      	ldr	r3, [r3, #24]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	db06      	blt.n	800b64a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b63c:	4b25      	ldr	r3, [pc, #148]	; (800b6d4 <xTaskPriorityInherit+0xc4>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b642:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	6959      	ldr	r1, [r3, #20]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b652:	4613      	mov	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	4413      	add	r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	4a1f      	ldr	r2, [pc, #124]	; (800b6d8 <xTaskPriorityInherit+0xc8>)
 800b65c:	4413      	add	r3, r2
 800b65e:	4299      	cmp	r1, r3
 800b660:	d122      	bne.n	800b6a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	3304      	adds	r3, #4
 800b666:	4618      	mov	r0, r3
 800b668:	f7fe f934 	bl	80098d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b66c:	4b19      	ldr	r3, [pc, #100]	; (800b6d4 <xTaskPriorityInherit+0xc4>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b67a:	4b18      	ldr	r3, [pc, #96]	; (800b6dc <xTaskPriorityInherit+0xcc>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d903      	bls.n	800b68a <xTaskPriorityInherit+0x7a>
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b686:	4a15      	ldr	r2, [pc, #84]	; (800b6dc <xTaskPriorityInherit+0xcc>)
 800b688:	6013      	str	r3, [r2, #0]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68e:	4613      	mov	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4a10      	ldr	r2, [pc, #64]	; (800b6d8 <xTaskPriorityInherit+0xc8>)
 800b698:	441a      	add	r2, r3
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	3304      	adds	r3, #4
 800b69e:	4619      	mov	r1, r3
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	f7fe f8ba 	bl	800981a <vListInsertEnd>
 800b6a6:	e004      	b.n	800b6b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b6a8:	4b0a      	ldr	r3, [pc, #40]	; (800b6d4 <xTaskPriorityInherit+0xc4>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	e008      	b.n	800b6ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6bc:	4b05      	ldr	r3, [pc, #20]	; (800b6d4 <xTaskPriorityInherit+0xc4>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d201      	bcs.n	800b6ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
	}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	20000b4c 	.word	0x20000b4c
 800b6d8:	20000b50 	.word	0x20000b50
 800b6dc:	20001028 	.word	0x20001028

0800b6e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b086      	sub	sp, #24
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d056      	beq.n	800b7a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b6f6:	4b2e      	ldr	r3, [pc, #184]	; (800b7b0 <xTaskPriorityDisinherit+0xd0>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d00a      	beq.n	800b716 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	60fb      	str	r3, [r7, #12]
}
 800b712:	bf00      	nop
 800b714:	e7fe      	b.n	800b714 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	60bb      	str	r3, [r7, #8]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b738:	1e5a      	subs	r2, r3, #1
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b746:	429a      	cmp	r2, r3
 800b748:	d02c      	beq.n	800b7a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d128      	bne.n	800b7a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	3304      	adds	r3, #4
 800b756:	4618      	mov	r0, r3
 800b758:	f7fe f8bc 	bl	80098d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b768:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b774:	4b0f      	ldr	r3, [pc, #60]	; (800b7b4 <xTaskPriorityDisinherit+0xd4>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d903      	bls.n	800b784 <xTaskPriorityDisinherit+0xa4>
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b780:	4a0c      	ldr	r2, [pc, #48]	; (800b7b4 <xTaskPriorityDisinherit+0xd4>)
 800b782:	6013      	str	r3, [r2, #0]
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b788:	4613      	mov	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4413      	add	r3, r2
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	4a09      	ldr	r2, [pc, #36]	; (800b7b8 <xTaskPriorityDisinherit+0xd8>)
 800b792:	441a      	add	r2, r3
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	3304      	adds	r3, #4
 800b798:	4619      	mov	r1, r3
 800b79a:	4610      	mov	r0, r2
 800b79c:	f7fe f83d 	bl	800981a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7a4:	697b      	ldr	r3, [r7, #20]
	}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3718      	adds	r7, #24
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	20000b4c 	.word	0x20000b4c
 800b7b4:	20001028 	.word	0x20001028
 800b7b8:	20000b50 	.word	0x20000b50

0800b7bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b088      	sub	sp, #32
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d06a      	beq.n	800b8aa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10a      	bne.n	800b7f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e0:	f383 8811 	msr	BASEPRI, r3
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	60fb      	str	r3, [r7, #12]
}
 800b7ee:	bf00      	nop
 800b7f0:	e7fe      	b.n	800b7f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d902      	bls.n	800b802 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	61fb      	str	r3, [r7, #28]
 800b800:	e002      	b.n	800b808 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b806:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80c:	69fa      	ldr	r2, [r7, #28]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d04b      	beq.n	800b8aa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b816:	697a      	ldr	r2, [r7, #20]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d146      	bne.n	800b8aa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b81c:	4b25      	ldr	r3, [pc, #148]	; (800b8b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	69ba      	ldr	r2, [r7, #24]
 800b822:	429a      	cmp	r2, r3
 800b824:	d10a      	bne.n	800b83c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	60bb      	str	r3, [r7, #8]
}
 800b838:	bf00      	nop
 800b83a:	e7fe      	b.n	800b83a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b840:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	69fa      	ldr	r2, [r7, #28]
 800b846:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	db04      	blt.n	800b85a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	6959      	ldr	r1, [r3, #20]
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	4613      	mov	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	4413      	add	r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	4a13      	ldr	r2, [pc, #76]	; (800b8b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b86a:	4413      	add	r3, r2
 800b86c:	4299      	cmp	r1, r3
 800b86e:	d11c      	bne.n	800b8aa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	3304      	adds	r3, #4
 800b874:	4618      	mov	r0, r3
 800b876:	f7fe f82d 	bl	80098d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87e:	4b0f      	ldr	r3, [pc, #60]	; (800b8bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	429a      	cmp	r2, r3
 800b884:	d903      	bls.n	800b88e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88a:	4a0c      	ldr	r2, [pc, #48]	; (800b8bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b88c:	6013      	str	r3, [r2, #0]
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b892:	4613      	mov	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4413      	add	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4a07      	ldr	r2, [pc, #28]	; (800b8b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b89c:	441a      	add	r2, r3
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	f7fd ffb8 	bl	800981a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8aa:	bf00      	nop
 800b8ac:	3720      	adds	r7, #32
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20000b4c 	.word	0x20000b4c
 800b8b8:	20000b50 	.word	0x20000b50
 800b8bc:	20001028 	.word	0x20001028

0800b8c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b8c0:	b480      	push	{r7}
 800b8c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b8c4:	4b07      	ldr	r3, [pc, #28]	; (800b8e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d004      	beq.n	800b8d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b8cc:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8d2:	3201      	adds	r2, #1
 800b8d4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b8d6:	4b03      	ldr	r3, [pc, #12]	; (800b8e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
	}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	20000b4c 	.word	0x20000b4c

0800b8e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b8f2:	4b21      	ldr	r3, [pc, #132]	; (800b978 <prvAddCurrentTaskToDelayedList+0x90>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8f8:	4b20      	ldr	r3, [pc, #128]	; (800b97c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fd ffe8 	bl	80098d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b90a:	d10a      	bne.n	800b922 <prvAddCurrentTaskToDelayedList+0x3a>
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d007      	beq.n	800b922 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b912:	4b1a      	ldr	r3, [pc, #104]	; (800b97c <prvAddCurrentTaskToDelayedList+0x94>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3304      	adds	r3, #4
 800b918:	4619      	mov	r1, r3
 800b91a:	4819      	ldr	r0, [pc, #100]	; (800b980 <prvAddCurrentTaskToDelayedList+0x98>)
 800b91c:	f7fd ff7d 	bl	800981a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b920:	e026      	b.n	800b970 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4413      	add	r3, r2
 800b928:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b92a:	4b14      	ldr	r3, [pc, #80]	; (800b97c <prvAddCurrentTaskToDelayedList+0x94>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	68ba      	ldr	r2, [r7, #8]
 800b930:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b932:	68ba      	ldr	r2, [r7, #8]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	429a      	cmp	r2, r3
 800b938:	d209      	bcs.n	800b94e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b93a:	4b12      	ldr	r3, [pc, #72]	; (800b984 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <prvAddCurrentTaskToDelayedList+0x94>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3304      	adds	r3, #4
 800b944:	4619      	mov	r1, r3
 800b946:	4610      	mov	r0, r2
 800b948:	f7fd ff8b 	bl	8009862 <vListInsert>
}
 800b94c:	e010      	b.n	800b970 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b94e:	4b0e      	ldr	r3, [pc, #56]	; (800b988 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	4b0a      	ldr	r3, [pc, #40]	; (800b97c <prvAddCurrentTaskToDelayedList+0x94>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	3304      	adds	r3, #4
 800b958:	4619      	mov	r1, r3
 800b95a:	4610      	mov	r0, r2
 800b95c:	f7fd ff81 	bl	8009862 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b960:	4b0a      	ldr	r3, [pc, #40]	; (800b98c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	429a      	cmp	r2, r3
 800b968:	d202      	bcs.n	800b970 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b96a:	4a08      	ldr	r2, [pc, #32]	; (800b98c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	6013      	str	r3, [r2, #0]
}
 800b970:	bf00      	nop
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	20001024 	.word	0x20001024
 800b97c:	20000b4c 	.word	0x20000b4c
 800b980:	2000100c 	.word	0x2000100c
 800b984:	20000fdc 	.word	0x20000fdc
 800b988:	20000fd8 	.word	0x20000fd8
 800b98c:	20001040 	.word	0x20001040

0800b990 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b08a      	sub	sp, #40	; 0x28
 800b994:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b996:	2300      	movs	r3, #0
 800b998:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b99a:	f000 fb07 	bl	800bfac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b99e:	4b1c      	ldr	r3, [pc, #112]	; (800ba10 <xTimerCreateTimerTask+0x80>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d021      	beq.n	800b9ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b9ae:	1d3a      	adds	r2, r7, #4
 800b9b0:	f107 0108 	add.w	r1, r7, #8
 800b9b4:	f107 030c 	add.w	r3, r7, #12
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fd fee7 	bl	800978c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b9be:	6879      	ldr	r1, [r7, #4]
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	9202      	str	r2, [sp, #8]
 800b9c6:	9301      	str	r3, [sp, #4]
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	460a      	mov	r2, r1
 800b9d0:	4910      	ldr	r1, [pc, #64]	; (800ba14 <xTimerCreateTimerTask+0x84>)
 800b9d2:	4811      	ldr	r0, [pc, #68]	; (800ba18 <xTimerCreateTimerTask+0x88>)
 800b9d4:	f7fe ff28 	bl	800a828 <xTaskCreateStatic>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	4a10      	ldr	r2, [pc, #64]	; (800ba1c <xTimerCreateTimerTask+0x8c>)
 800b9dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b9de:	4b0f      	ldr	r3, [pc, #60]	; (800ba1c <xTimerCreateTimerTask+0x8c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10a      	bne.n	800ba06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	613b      	str	r3, [r7, #16]
}
 800ba02:	bf00      	nop
 800ba04:	e7fe      	b.n	800ba04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba06:	697b      	ldr	r3, [r7, #20]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3718      	adds	r7, #24
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	2000107c 	.word	0x2000107c
 800ba14:	0800f198 	.word	0x0800f198
 800ba18:	0800bb55 	.word	0x0800bb55
 800ba1c:	20001080 	.word	0x20001080

0800ba20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b08a      	sub	sp, #40	; 0x28
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]
 800ba2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10a      	bne.n	800ba4e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	f3bf 8f6f 	isb	sy
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	623b      	str	r3, [r7, #32]
}
 800ba4a:	bf00      	nop
 800ba4c:	e7fe      	b.n	800ba4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba4e:	4b1a      	ldr	r3, [pc, #104]	; (800bab8 <xTimerGenericCommand+0x98>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d02a      	beq.n	800baac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b05      	cmp	r3, #5
 800ba66:	dc18      	bgt.n	800ba9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba68:	f7ff fdb4 	bl	800b5d4 <xTaskGetSchedulerState>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d109      	bne.n	800ba86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba72:	4b11      	ldr	r3, [pc, #68]	; (800bab8 <xTimerGenericCommand+0x98>)
 800ba74:	6818      	ldr	r0, [r3, #0]
 800ba76:	f107 0110 	add.w	r1, r7, #16
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba7e:	f7fe f947 	bl	8009d10 <xQueueGenericSend>
 800ba82:	6278      	str	r0, [r7, #36]	; 0x24
 800ba84:	e012      	b.n	800baac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba86:	4b0c      	ldr	r3, [pc, #48]	; (800bab8 <xTimerGenericCommand+0x98>)
 800ba88:	6818      	ldr	r0, [r3, #0]
 800ba8a:	f107 0110 	add.w	r1, r7, #16
 800ba8e:	2300      	movs	r3, #0
 800ba90:	2200      	movs	r2, #0
 800ba92:	f7fe f93d 	bl	8009d10 <xQueueGenericSend>
 800ba96:	6278      	str	r0, [r7, #36]	; 0x24
 800ba98:	e008      	b.n	800baac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba9a:	4b07      	ldr	r3, [pc, #28]	; (800bab8 <xTimerGenericCommand+0x98>)
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	f107 0110 	add.w	r1, r7, #16
 800baa2:	2300      	movs	r3, #0
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	f7fe fa31 	bl	8009f0c <xQueueGenericSendFromISR>
 800baaa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800baac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3728      	adds	r7, #40	; 0x28
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	2000107c 	.word	0x2000107c

0800babc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b088      	sub	sp, #32
 800bac0:	af02      	add	r7, sp, #8
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bac6:	4b22      	ldr	r3, [pc, #136]	; (800bb50 <prvProcessExpiredTimer+0x94>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	3304      	adds	r3, #4
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7fd fefd 	bl	80098d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bae0:	f003 0304 	and.w	r3, r3, #4
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d022      	beq.n	800bb2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	699a      	ldr	r2, [r3, #24]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	18d1      	adds	r1, r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	683a      	ldr	r2, [r7, #0]
 800baf4:	6978      	ldr	r0, [r7, #20]
 800baf6:	f000 f8d1 	bl	800bc9c <prvInsertTimerInActiveList>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d01f      	beq.n	800bb40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb00:	2300      	movs	r3, #0
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	2300      	movs	r3, #0
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	2100      	movs	r1, #0
 800bb0a:	6978      	ldr	r0, [r7, #20]
 800bb0c:	f7ff ff88 	bl	800ba20 <xTimerGenericCommand>
 800bb10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d113      	bne.n	800bb40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1c:	f383 8811 	msr	BASEPRI, r3
 800bb20:	f3bf 8f6f 	isb	sy
 800bb24:	f3bf 8f4f 	dsb	sy
 800bb28:	60fb      	str	r3, [r7, #12]
}
 800bb2a:	bf00      	nop
 800bb2c:	e7fe      	b.n	800bb2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb34:	f023 0301 	bic.w	r3, r3, #1
 800bb38:	b2da      	uxtb	r2, r3
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	6a1b      	ldr	r3, [r3, #32]
 800bb44:	6978      	ldr	r0, [r7, #20]
 800bb46:	4798      	blx	r3
}
 800bb48:	bf00      	nop
 800bb4a:	3718      	adds	r7, #24
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	20001074 	.word	0x20001074

0800bb54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb5c:	f107 0308 	add.w	r3, r7, #8
 800bb60:	4618      	mov	r0, r3
 800bb62:	f000 f857 	bl	800bc14 <prvGetNextExpireTime>
 800bb66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f000 f803 	bl	800bb78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb72:	f000 f8d5 	bl	800bd20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb76:	e7f1      	b.n	800bb5c <prvTimerTask+0x8>

0800bb78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bb82:	f7ff f92b 	bl	800addc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb86:	f107 0308 	add.w	r3, r7, #8
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f000 f866 	bl	800bc5c <prvSampleTimeNow>
 800bb90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d130      	bne.n	800bbfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10a      	bne.n	800bbb4 <prvProcessTimerOrBlockTask+0x3c>
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d806      	bhi.n	800bbb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bba6:	f7ff f927 	bl	800adf8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bbaa:	68f9      	ldr	r1, [r7, #12]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7ff ff85 	bl	800babc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bbb2:	e024      	b.n	800bbfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d008      	beq.n	800bbcc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bbba:	4b13      	ldr	r3, [pc, #76]	; (800bc08 <prvProcessTimerOrBlockTask+0x90>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d101      	bne.n	800bbc8 <prvProcessTimerOrBlockTask+0x50>
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e000      	b.n	800bbca <prvProcessTimerOrBlockTask+0x52>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bbcc:	4b0f      	ldr	r3, [pc, #60]	; (800bc0c <prvProcessTimerOrBlockTask+0x94>)
 800bbce:	6818      	ldr	r0, [r3, #0]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	4619      	mov	r1, r3
 800bbda:	f7fe fdf1 	bl	800a7c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bbde:	f7ff f90b 	bl	800adf8 <xTaskResumeAll>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10a      	bne.n	800bbfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bbe8:	4b09      	ldr	r3, [pc, #36]	; (800bc10 <prvProcessTimerOrBlockTask+0x98>)
 800bbea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	f3bf 8f6f 	isb	sy
}
 800bbf8:	e001      	b.n	800bbfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bbfa:	f7ff f8fd 	bl	800adf8 <xTaskResumeAll>
}
 800bbfe:	bf00      	nop
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	20001078 	.word	0x20001078
 800bc0c:	2000107c 	.word	0x2000107c
 800bc10:	e000ed04 	.word	0xe000ed04

0800bc14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc1c:	4b0e      	ldr	r3, [pc, #56]	; (800bc58 <prvGetNextExpireTime+0x44>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d101      	bne.n	800bc2a <prvGetNextExpireTime+0x16>
 800bc26:	2201      	movs	r2, #1
 800bc28:	e000      	b.n	800bc2c <prvGetNextExpireTime+0x18>
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d105      	bne.n	800bc44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc38:	4b07      	ldr	r3, [pc, #28]	; (800bc58 <prvGetNextExpireTime+0x44>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	60fb      	str	r3, [r7, #12]
 800bc42:	e001      	b.n	800bc48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc44:	2300      	movs	r3, #0
 800bc46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc48:	68fb      	ldr	r3, [r7, #12]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3714      	adds	r7, #20
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	20001074 	.word	0x20001074

0800bc5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc64:	f7ff f966 	bl	800af34 <xTaskGetTickCount>
 800bc68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc6a:	4b0b      	ldr	r3, [pc, #44]	; (800bc98 <prvSampleTimeNow+0x3c>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d205      	bcs.n	800bc80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bc74:	f000 f936 	bl	800bee4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	601a      	str	r2, [r3, #0]
 800bc7e:	e002      	b.n	800bc86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc86:	4a04      	ldr	r2, [pc, #16]	; (800bc98 <prvSampleTimeNow+0x3c>)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	20001084 	.word	0x20001084

0800bc9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
 800bca8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d812      	bhi.n	800bce8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	1ad2      	subs	r2, r2, r3
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	699b      	ldr	r3, [r3, #24]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d302      	bcc.n	800bcd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	617b      	str	r3, [r7, #20]
 800bcd4:	e01b      	b.n	800bd0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bcd6:	4b10      	ldr	r3, [pc, #64]	; (800bd18 <prvInsertTimerInActiveList+0x7c>)
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	3304      	adds	r3, #4
 800bcde:	4619      	mov	r1, r3
 800bce0:	4610      	mov	r0, r2
 800bce2:	f7fd fdbe 	bl	8009862 <vListInsert>
 800bce6:	e012      	b.n	800bd0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d206      	bcs.n	800bcfe <prvInsertTimerInActiveList+0x62>
 800bcf0:	68ba      	ldr	r2, [r7, #8]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d302      	bcc.n	800bcfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	617b      	str	r3, [r7, #20]
 800bcfc:	e007      	b.n	800bd0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcfe:	4b07      	ldr	r3, [pc, #28]	; (800bd1c <prvInsertTimerInActiveList+0x80>)
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	3304      	adds	r3, #4
 800bd06:	4619      	mov	r1, r3
 800bd08:	4610      	mov	r0, r2
 800bd0a:	f7fd fdaa 	bl	8009862 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd0e:	697b      	ldr	r3, [r7, #20]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3718      	adds	r7, #24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	20001078 	.word	0x20001078
 800bd1c:	20001074 	.word	0x20001074

0800bd20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08e      	sub	sp, #56	; 0x38
 800bd24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd26:	e0ca      	b.n	800bebe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	da18      	bge.n	800bd60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd2e:	1d3b      	adds	r3, r7, #4
 800bd30:	3304      	adds	r3, #4
 800bd32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10a      	bne.n	800bd50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	61fb      	str	r3, [r7, #28]
}
 800bd4c:	bf00      	nop
 800bd4e:	e7fe      	b.n	800bd4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd56:	6850      	ldr	r0, [r2, #4]
 800bd58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd5a:	6892      	ldr	r2, [r2, #8]
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f2c0 80aa 	blt.w	800bebc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d004      	beq.n	800bd7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd76:	3304      	adds	r3, #4
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7fd fdab 	bl	80098d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd7e:	463b      	mov	r3, r7
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7ff ff6b 	bl	800bc5c <prvSampleTimeNow>
 800bd86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b09      	cmp	r3, #9
 800bd8c:	f200 8097 	bhi.w	800bebe <prvProcessReceivedCommands+0x19e>
 800bd90:	a201      	add	r2, pc, #4	; (adr r2, 800bd98 <prvProcessReceivedCommands+0x78>)
 800bd92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd96:	bf00      	nop
 800bd98:	0800bdc1 	.word	0x0800bdc1
 800bd9c:	0800bdc1 	.word	0x0800bdc1
 800bda0:	0800bdc1 	.word	0x0800bdc1
 800bda4:	0800be35 	.word	0x0800be35
 800bda8:	0800be49 	.word	0x0800be49
 800bdac:	0800be93 	.word	0x0800be93
 800bdb0:	0800bdc1 	.word	0x0800bdc1
 800bdb4:	0800bdc1 	.word	0x0800bdc1
 800bdb8:	0800be35 	.word	0x0800be35
 800bdbc:	0800be49 	.word	0x0800be49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdc6:	f043 0301 	orr.w	r3, r3, #1
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd6:	699b      	ldr	r3, [r3, #24]
 800bdd8:	18d1      	adds	r1, r2, r3
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bde0:	f7ff ff5c 	bl	800bc9c <prvInsertTimerInActiveList>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d069      	beq.n	800bebe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdf8:	f003 0304 	and.w	r3, r3, #4
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d05e      	beq.n	800bebe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	441a      	add	r2, r3
 800be08:	2300      	movs	r3, #0
 800be0a:	9300      	str	r3, [sp, #0]
 800be0c:	2300      	movs	r3, #0
 800be0e:	2100      	movs	r1, #0
 800be10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be12:	f7ff fe05 	bl	800ba20 <xTimerGenericCommand>
 800be16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be18:	6a3b      	ldr	r3, [r7, #32]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d14f      	bne.n	800bebe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	61bb      	str	r3, [r7, #24]
}
 800be30:	bf00      	nop
 800be32:	e7fe      	b.n	800be32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be3a:	f023 0301 	bic.w	r3, r3, #1
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800be46:	e03a      	b.n	800bebe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be4e:	f043 0301 	orr.w	r3, r3, #1
 800be52:	b2da      	uxtb	r2, r3
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10a      	bne.n	800be7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	617b      	str	r3, [r7, #20]
}
 800be7a:	bf00      	nop
 800be7c:	e7fe      	b.n	800be7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be80:	699a      	ldr	r2, [r3, #24]
 800be82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be84:	18d1      	adds	r1, r2, r3
 800be86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be8c:	f7ff ff06 	bl	800bc9c <prvInsertTimerInActiveList>
					break;
 800be90:	e015      	b.n	800bebe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be98:	f003 0302 	and.w	r3, r3, #2
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d103      	bne.n	800bea8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bea2:	f000 fbdd 	bl	800c660 <vPortFree>
 800bea6:	e00a      	b.n	800bebe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800beae:	f023 0301 	bic.w	r3, r3, #1
 800beb2:	b2da      	uxtb	r2, r3
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800beba:	e000      	b.n	800bebe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bebc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bebe:	4b08      	ldr	r3, [pc, #32]	; (800bee0 <prvProcessReceivedCommands+0x1c0>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	1d39      	adds	r1, r7, #4
 800bec4:	2200      	movs	r2, #0
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fe f8bc 	bl	800a044 <xQueueReceive>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f47f af2a 	bne.w	800bd28 <prvProcessReceivedCommands+0x8>
	}
}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop
 800bed8:	3730      	adds	r7, #48	; 0x30
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	2000107c 	.word	0x2000107c

0800bee4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b088      	sub	sp, #32
 800bee8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800beea:	e048      	b.n	800bf7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800beec:	4b2d      	ldr	r3, [pc, #180]	; (800bfa4 <prvSwitchTimerLists+0xc0>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bef6:	4b2b      	ldr	r3, [pc, #172]	; (800bfa4 <prvSwitchTimerLists+0xc0>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	3304      	adds	r3, #4
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7fd fce5 	bl	80098d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6a1b      	ldr	r3, [r3, #32]
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf18:	f003 0304 	and.w	r3, r3, #4
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d02e      	beq.n	800bf7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	693a      	ldr	r2, [r7, #16]
 800bf26:	4413      	add	r3, r2
 800bf28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d90e      	bls.n	800bf50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf3e:	4b19      	ldr	r3, [pc, #100]	; (800bfa4 <prvSwitchTimerLists+0xc0>)
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	3304      	adds	r3, #4
 800bf46:	4619      	mov	r1, r3
 800bf48:	4610      	mov	r0, r2
 800bf4a:	f7fd fc8a 	bl	8009862 <vListInsert>
 800bf4e:	e016      	b.n	800bf7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf50:	2300      	movs	r3, #0
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	2300      	movs	r3, #0
 800bf56:	693a      	ldr	r2, [r7, #16]
 800bf58:	2100      	movs	r1, #0
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f7ff fd60 	bl	800ba20 <xTimerGenericCommand>
 800bf60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d10a      	bne.n	800bf7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bf68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6c:	f383 8811 	msr	BASEPRI, r3
 800bf70:	f3bf 8f6f 	isb	sy
 800bf74:	f3bf 8f4f 	dsb	sy
 800bf78:	603b      	str	r3, [r7, #0]
}
 800bf7a:	bf00      	nop
 800bf7c:	e7fe      	b.n	800bf7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf7e:	4b09      	ldr	r3, [pc, #36]	; (800bfa4 <prvSwitchTimerLists+0xc0>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1b1      	bne.n	800beec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf88:	4b06      	ldr	r3, [pc, #24]	; (800bfa4 <prvSwitchTimerLists+0xc0>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf8e:	4b06      	ldr	r3, [pc, #24]	; (800bfa8 <prvSwitchTimerLists+0xc4>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a04      	ldr	r2, [pc, #16]	; (800bfa4 <prvSwitchTimerLists+0xc0>)
 800bf94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bf96:	4a04      	ldr	r2, [pc, #16]	; (800bfa8 <prvSwitchTimerLists+0xc4>)
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	6013      	str	r3, [r2, #0]
}
 800bf9c:	bf00      	nop
 800bf9e:	3718      	adds	r7, #24
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	20001074 	.word	0x20001074
 800bfa8:	20001078 	.word	0x20001078

0800bfac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bfb2:	f000 f967 	bl	800c284 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bfb6:	4b15      	ldr	r3, [pc, #84]	; (800c00c <prvCheckForValidListAndQueue+0x60>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d120      	bne.n	800c000 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bfbe:	4814      	ldr	r0, [pc, #80]	; (800c010 <prvCheckForValidListAndQueue+0x64>)
 800bfc0:	f7fd fbfe 	bl	80097c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bfc4:	4813      	ldr	r0, [pc, #76]	; (800c014 <prvCheckForValidListAndQueue+0x68>)
 800bfc6:	f7fd fbfb 	bl	80097c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bfca:	4b13      	ldr	r3, [pc, #76]	; (800c018 <prvCheckForValidListAndQueue+0x6c>)
 800bfcc:	4a10      	ldr	r2, [pc, #64]	; (800c010 <prvCheckForValidListAndQueue+0x64>)
 800bfce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bfd0:	4b12      	ldr	r3, [pc, #72]	; (800c01c <prvCheckForValidListAndQueue+0x70>)
 800bfd2:	4a10      	ldr	r2, [pc, #64]	; (800c014 <prvCheckForValidListAndQueue+0x68>)
 800bfd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	4b11      	ldr	r3, [pc, #68]	; (800c020 <prvCheckForValidListAndQueue+0x74>)
 800bfdc:	4a11      	ldr	r2, [pc, #68]	; (800c024 <prvCheckForValidListAndQueue+0x78>)
 800bfde:	2110      	movs	r1, #16
 800bfe0:	200a      	movs	r0, #10
 800bfe2:	f7fd fd09 	bl	80099f8 <xQueueGenericCreateStatic>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	4a08      	ldr	r2, [pc, #32]	; (800c00c <prvCheckForValidListAndQueue+0x60>)
 800bfea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bfec:	4b07      	ldr	r3, [pc, #28]	; (800c00c <prvCheckForValidListAndQueue+0x60>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d005      	beq.n	800c000 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bff4:	4b05      	ldr	r3, [pc, #20]	; (800c00c <prvCheckForValidListAndQueue+0x60>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	490b      	ldr	r1, [pc, #44]	; (800c028 <prvCheckForValidListAndQueue+0x7c>)
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fe fbb6 	bl	800a76c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c000:	f000 f970 	bl	800c2e4 <vPortExitCritical>
}
 800c004:	bf00      	nop
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	2000107c 	.word	0x2000107c
 800c010:	2000104c 	.word	0x2000104c
 800c014:	20001060 	.word	0x20001060
 800c018:	20001074 	.word	0x20001074
 800c01c:	20001078 	.word	0x20001078
 800c020:	20001128 	.word	0x20001128
 800c024:	20001088 	.word	0x20001088
 800c028:	0800f1a0 	.word	0x0800f1a0

0800c02c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c02c:	b480      	push	{r7}
 800c02e:	b085      	sub	sp, #20
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	3b04      	subs	r3, #4
 800c03c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	3b04      	subs	r3, #4
 800c04a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	f023 0201 	bic.w	r2, r3, #1
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	3b04      	subs	r3, #4
 800c05a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c05c:	4a0c      	ldr	r2, [pc, #48]	; (800c090 <pxPortInitialiseStack+0x64>)
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	3b14      	subs	r3, #20
 800c066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	3b04      	subs	r3, #4
 800c072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f06f 0202 	mvn.w	r2, #2
 800c07a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	3b20      	subs	r3, #32
 800c080:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c082:	68fb      	ldr	r3, [r7, #12]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr
 800c090:	0800c095 	.word	0x0800c095

0800c094 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c09a:	2300      	movs	r3, #0
 800c09c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c09e:	4b12      	ldr	r3, [pc, #72]	; (800c0e8 <prvTaskExitError+0x54>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a6:	d00a      	beq.n	800c0be <prvTaskExitError+0x2a>
	__asm volatile
 800c0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	60fb      	str	r3, [r7, #12]
}
 800c0ba:	bf00      	nop
 800c0bc:	e7fe      	b.n	800c0bc <prvTaskExitError+0x28>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	60bb      	str	r3, [r7, #8]
}
 800c0d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c0d2:	bf00      	nop
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d0fc      	beq.n	800c0d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c0da:	bf00      	nop
 800c0dc:	bf00      	nop
 800c0de:	3714      	adds	r7, #20
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr
 800c0e8:	20000048 	.word	0x20000048
 800c0ec:	00000000 	.word	0x00000000

0800c0f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c0f0:	4b07      	ldr	r3, [pc, #28]	; (800c110 <pxCurrentTCBConst2>)
 800c0f2:	6819      	ldr	r1, [r3, #0]
 800c0f4:	6808      	ldr	r0, [r1, #0]
 800c0f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fa:	f380 8809 	msr	PSP, r0
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f04f 0000 	mov.w	r0, #0
 800c106:	f380 8811 	msr	BASEPRI, r0
 800c10a:	4770      	bx	lr
 800c10c:	f3af 8000 	nop.w

0800c110 <pxCurrentTCBConst2>:
 800c110:	20000b4c 	.word	0x20000b4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop

0800c118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c118:	4808      	ldr	r0, [pc, #32]	; (800c13c <prvPortStartFirstTask+0x24>)
 800c11a:	6800      	ldr	r0, [r0, #0]
 800c11c:	6800      	ldr	r0, [r0, #0]
 800c11e:	f380 8808 	msr	MSP, r0
 800c122:	f04f 0000 	mov.w	r0, #0
 800c126:	f380 8814 	msr	CONTROL, r0
 800c12a:	b662      	cpsie	i
 800c12c:	b661      	cpsie	f
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	df00      	svc	0
 800c138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c13a:	bf00      	nop
 800c13c:	e000ed08 	.word	0xe000ed08

0800c140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c146:	4b46      	ldr	r3, [pc, #280]	; (800c260 <xPortStartScheduler+0x120>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a46      	ldr	r2, [pc, #280]	; (800c264 <xPortStartScheduler+0x124>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d10a      	bne.n	800c166 <xPortStartScheduler+0x26>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	613b      	str	r3, [r7, #16]
}
 800c162:	bf00      	nop
 800c164:	e7fe      	b.n	800c164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c166:	4b3e      	ldr	r3, [pc, #248]	; (800c260 <xPortStartScheduler+0x120>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a3f      	ldr	r2, [pc, #252]	; (800c268 <xPortStartScheduler+0x128>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d10a      	bne.n	800c186 <xPortStartScheduler+0x46>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	60fb      	str	r3, [r7, #12]
}
 800c182:	bf00      	nop
 800c184:	e7fe      	b.n	800c184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c186:	4b39      	ldr	r3, [pc, #228]	; (800c26c <xPortStartScheduler+0x12c>)
 800c188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	22ff      	movs	r2, #255	; 0xff
 800c196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	4b31      	ldr	r3, [pc, #196]	; (800c270 <xPortStartScheduler+0x130>)
 800c1ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1ae:	4b31      	ldr	r3, [pc, #196]	; (800c274 <xPortStartScheduler+0x134>)
 800c1b0:	2207      	movs	r2, #7
 800c1b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1b4:	e009      	b.n	800c1ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c1b6:	4b2f      	ldr	r3, [pc, #188]	; (800c274 <xPortStartScheduler+0x134>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	4a2d      	ldr	r2, [pc, #180]	; (800c274 <xPortStartScheduler+0x134>)
 800c1be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1c0:	78fb      	ldrb	r3, [r7, #3]
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	005b      	lsls	r3, r3, #1
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1ca:	78fb      	ldrb	r3, [r7, #3]
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d2:	2b80      	cmp	r3, #128	; 0x80
 800c1d4:	d0ef      	beq.n	800c1b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1d6:	4b27      	ldr	r3, [pc, #156]	; (800c274 <xPortStartScheduler+0x134>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f1c3 0307 	rsb	r3, r3, #7
 800c1de:	2b04      	cmp	r3, #4
 800c1e0:	d00a      	beq.n	800c1f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e6:	f383 8811 	msr	BASEPRI, r3
 800c1ea:	f3bf 8f6f 	isb	sy
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	60bb      	str	r3, [r7, #8]
}
 800c1f4:	bf00      	nop
 800c1f6:	e7fe      	b.n	800c1f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c1f8:	4b1e      	ldr	r3, [pc, #120]	; (800c274 <xPortStartScheduler+0x134>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	021b      	lsls	r3, r3, #8
 800c1fe:	4a1d      	ldr	r2, [pc, #116]	; (800c274 <xPortStartScheduler+0x134>)
 800c200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c202:	4b1c      	ldr	r3, [pc, #112]	; (800c274 <xPortStartScheduler+0x134>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c20a:	4a1a      	ldr	r2, [pc, #104]	; (800c274 <xPortStartScheduler+0x134>)
 800c20c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	b2da      	uxtb	r2, r3
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c216:	4b18      	ldr	r3, [pc, #96]	; (800c278 <xPortStartScheduler+0x138>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a17      	ldr	r2, [pc, #92]	; (800c278 <xPortStartScheduler+0x138>)
 800c21c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c222:	4b15      	ldr	r3, [pc, #84]	; (800c278 <xPortStartScheduler+0x138>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a14      	ldr	r2, [pc, #80]	; (800c278 <xPortStartScheduler+0x138>)
 800c228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c22c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c22e:	f000 f8dd 	bl	800c3ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c232:	4b12      	ldr	r3, [pc, #72]	; (800c27c <xPortStartScheduler+0x13c>)
 800c234:	2200      	movs	r2, #0
 800c236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c238:	f000 f8fc 	bl	800c434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c23c:	4b10      	ldr	r3, [pc, #64]	; (800c280 <xPortStartScheduler+0x140>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a0f      	ldr	r2, [pc, #60]	; (800c280 <xPortStartScheduler+0x140>)
 800c242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c248:	f7ff ff66 	bl	800c118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c24c:	f7fe ff3c 	bl	800b0c8 <vTaskSwitchContext>
	prvTaskExitError();
 800c250:	f7ff ff20 	bl	800c094 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	e000ed00 	.word	0xe000ed00
 800c264:	410fc271 	.word	0x410fc271
 800c268:	410fc270 	.word	0x410fc270
 800c26c:	e000e400 	.word	0xe000e400
 800c270:	20001178 	.word	0x20001178
 800c274:	2000117c 	.word	0x2000117c
 800c278:	e000ed20 	.word	0xe000ed20
 800c27c:	20000048 	.word	0x20000048
 800c280:	e000ef34 	.word	0xe000ef34

0800c284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
	__asm volatile
 800c28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28e:	f383 8811 	msr	BASEPRI, r3
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	607b      	str	r3, [r7, #4]
}
 800c29c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c29e:	4b0f      	ldr	r3, [pc, #60]	; (800c2dc <vPortEnterCritical+0x58>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	4a0d      	ldr	r2, [pc, #52]	; (800c2dc <vPortEnterCritical+0x58>)
 800c2a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2a8:	4b0c      	ldr	r3, [pc, #48]	; (800c2dc <vPortEnterCritical+0x58>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d10f      	bne.n	800c2d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2b0:	4b0b      	ldr	r3, [pc, #44]	; (800c2e0 <vPortEnterCritical+0x5c>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00a      	beq.n	800c2d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	603b      	str	r3, [r7, #0]
}
 800c2cc:	bf00      	nop
 800c2ce:	e7fe      	b.n	800c2ce <vPortEnterCritical+0x4a>
	}
}
 800c2d0:	bf00      	nop
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr
 800c2dc:	20000048 	.word	0x20000048
 800c2e0:	e000ed04 	.word	0xe000ed04

0800c2e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c2ea:	4b12      	ldr	r3, [pc, #72]	; (800c334 <vPortExitCritical+0x50>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d10a      	bne.n	800c308 <vPortExitCritical+0x24>
	__asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	607b      	str	r3, [r7, #4]
}
 800c304:	bf00      	nop
 800c306:	e7fe      	b.n	800c306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c308:	4b0a      	ldr	r3, [pc, #40]	; (800c334 <vPortExitCritical+0x50>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	3b01      	subs	r3, #1
 800c30e:	4a09      	ldr	r2, [pc, #36]	; (800c334 <vPortExitCritical+0x50>)
 800c310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c312:	4b08      	ldr	r3, [pc, #32]	; (800c334 <vPortExitCritical+0x50>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d105      	bne.n	800c326 <vPortExitCritical+0x42>
 800c31a:	2300      	movs	r3, #0
 800c31c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	f383 8811 	msr	BASEPRI, r3
}
 800c324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c326:	bf00      	nop
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	20000048 	.word	0x20000048
	...

0800c340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c340:	f3ef 8009 	mrs	r0, PSP
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	4b15      	ldr	r3, [pc, #84]	; (800c3a0 <pxCurrentTCBConst>)
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	f01e 0f10 	tst.w	lr, #16
 800c350:	bf08      	it	eq
 800c352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35a:	6010      	str	r0, [r2, #0]
 800c35c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c360:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c364:	f380 8811 	msr	BASEPRI, r0
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	f3bf 8f6f 	isb	sy
 800c370:	f7fe feaa 	bl	800b0c8 <vTaskSwitchContext>
 800c374:	f04f 0000 	mov.w	r0, #0
 800c378:	f380 8811 	msr	BASEPRI, r0
 800c37c:	bc09      	pop	{r0, r3}
 800c37e:	6819      	ldr	r1, [r3, #0]
 800c380:	6808      	ldr	r0, [r1, #0]
 800c382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c386:	f01e 0f10 	tst.w	lr, #16
 800c38a:	bf08      	it	eq
 800c38c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c390:	f380 8809 	msr	PSP, r0
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	f3af 8000 	nop.w

0800c3a0 <pxCurrentTCBConst>:
 800c3a0:	20000b4c 	.word	0x20000b4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3a4:	bf00      	nop
 800c3a6:	bf00      	nop

0800c3a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	607b      	str	r3, [r7, #4]
}
 800c3c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3c2:	f7fe fdc7 	bl	800af54 <xTaskIncrementTick>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d003      	beq.n	800c3d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3cc:	4b06      	ldr	r3, [pc, #24]	; (800c3e8 <xPortSysTickHandler+0x40>)
 800c3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3d2:	601a      	str	r2, [r3, #0]
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	f383 8811 	msr	BASEPRI, r3
}
 800c3de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c3e0:	bf00      	nop
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	e000ed04 	.word	0xe000ed04

0800c3ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3f0:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <vPortSetupTimerInterrupt+0x34>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3f6:	4b0b      	ldr	r3, [pc, #44]	; (800c424 <vPortSetupTimerInterrupt+0x38>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3fc:	4b0a      	ldr	r3, [pc, #40]	; (800c428 <vPortSetupTimerInterrupt+0x3c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a0a      	ldr	r2, [pc, #40]	; (800c42c <vPortSetupTimerInterrupt+0x40>)
 800c402:	fba2 2303 	umull	r2, r3, r2, r3
 800c406:	099b      	lsrs	r3, r3, #6
 800c408:	4a09      	ldr	r2, [pc, #36]	; (800c430 <vPortSetupTimerInterrupt+0x44>)
 800c40a:	3b01      	subs	r3, #1
 800c40c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c40e:	4b04      	ldr	r3, [pc, #16]	; (800c420 <vPortSetupTimerInterrupt+0x34>)
 800c410:	2207      	movs	r2, #7
 800c412:	601a      	str	r2, [r3, #0]
}
 800c414:	bf00      	nop
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	e000e010 	.word	0xe000e010
 800c424:	e000e018 	.word	0xe000e018
 800c428:	2000003c 	.word	0x2000003c
 800c42c:	10624dd3 	.word	0x10624dd3
 800c430:	e000e014 	.word	0xe000e014

0800c434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c444 <vPortEnableVFP+0x10>
 800c438:	6801      	ldr	r1, [r0, #0]
 800c43a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c43e:	6001      	str	r1, [r0, #0]
 800c440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c442:	bf00      	nop
 800c444:	e000ed88 	.word	0xe000ed88

0800c448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c44e:	f3ef 8305 	mrs	r3, IPSR
 800c452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b0f      	cmp	r3, #15
 800c458:	d914      	bls.n	800c484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c45a:	4a17      	ldr	r2, [pc, #92]	; (800c4b8 <vPortValidateInterruptPriority+0x70>)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	4413      	add	r3, r2
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c464:	4b15      	ldr	r3, [pc, #84]	; (800c4bc <vPortValidateInterruptPriority+0x74>)
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	7afa      	ldrb	r2, [r7, #11]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d20a      	bcs.n	800c484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	607b      	str	r3, [r7, #4]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c484:	4b0e      	ldr	r3, [pc, #56]	; (800c4c0 <vPortValidateInterruptPriority+0x78>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c48c:	4b0d      	ldr	r3, [pc, #52]	; (800c4c4 <vPortValidateInterruptPriority+0x7c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	429a      	cmp	r2, r3
 800c492:	d90a      	bls.n	800c4aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	603b      	str	r3, [r7, #0]
}
 800c4a6:	bf00      	nop
 800c4a8:	e7fe      	b.n	800c4a8 <vPortValidateInterruptPriority+0x60>
	}
 800c4aa:	bf00      	nop
 800c4ac:	3714      	adds	r7, #20
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
 800c4b8:	e000e3f0 	.word	0xe000e3f0
 800c4bc:	20001178 	.word	0x20001178
 800c4c0:	e000ed0c 	.word	0xe000ed0c
 800c4c4:	2000117c 	.word	0x2000117c

0800c4c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b08a      	sub	sp, #40	; 0x28
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c4d4:	f7fe fc82 	bl	800addc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c4d8:	4b5b      	ldr	r3, [pc, #364]	; (800c648 <pvPortMalloc+0x180>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d101      	bne.n	800c4e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c4e0:	f000 f920 	bl	800c724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4e4:	4b59      	ldr	r3, [pc, #356]	; (800c64c <pvPortMalloc+0x184>)
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f040 8093 	bne.w	800c618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d01d      	beq.n	800c534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c4f8:	2208      	movs	r2, #8
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f003 0307 	and.w	r3, r3, #7
 800c506:	2b00      	cmp	r3, #0
 800c508:	d014      	beq.n	800c534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f023 0307 	bic.w	r3, r3, #7
 800c510:	3308      	adds	r3, #8
 800c512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f003 0307 	and.w	r3, r3, #7
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00a      	beq.n	800c534 <pvPortMalloc+0x6c>
	__asm volatile
 800c51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	617b      	str	r3, [r7, #20]
}
 800c530:	bf00      	nop
 800c532:	e7fe      	b.n	800c532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d06e      	beq.n	800c618 <pvPortMalloc+0x150>
 800c53a:	4b45      	ldr	r3, [pc, #276]	; (800c650 <pvPortMalloc+0x188>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	429a      	cmp	r2, r3
 800c542:	d869      	bhi.n	800c618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c544:	4b43      	ldr	r3, [pc, #268]	; (800c654 <pvPortMalloc+0x18c>)
 800c546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c548:	4b42      	ldr	r3, [pc, #264]	; (800c654 <pvPortMalloc+0x18c>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c54e:	e004      	b.n	800c55a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	429a      	cmp	r2, r3
 800c562:	d903      	bls.n	800c56c <pvPortMalloc+0xa4>
 800c564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1f1      	bne.n	800c550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c56c:	4b36      	ldr	r3, [pc, #216]	; (800c648 <pvPortMalloc+0x180>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c572:	429a      	cmp	r2, r3
 800c574:	d050      	beq.n	800c618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c576:	6a3b      	ldr	r3, [r7, #32]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2208      	movs	r2, #8
 800c57c:	4413      	add	r3, r2
 800c57e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	6a3b      	ldr	r3, [r7, #32]
 800c586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	1ad2      	subs	r2, r2, r3
 800c590:	2308      	movs	r3, #8
 800c592:	005b      	lsls	r3, r3, #1
 800c594:	429a      	cmp	r2, r3
 800c596:	d91f      	bls.n	800c5d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4413      	add	r3, r2
 800c59e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	f003 0307 	and.w	r3, r3, #7
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00a      	beq.n	800c5c0 <pvPortMalloc+0xf8>
	__asm volatile
 800c5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ae:	f383 8811 	msr	BASEPRI, r3
 800c5b2:	f3bf 8f6f 	isb	sy
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	613b      	str	r3, [r7, #16]
}
 800c5bc:	bf00      	nop
 800c5be:	e7fe      	b.n	800c5be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c2:	685a      	ldr	r2, [r3, #4]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	1ad2      	subs	r2, r2, r3
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5d2:	69b8      	ldr	r0, [r7, #24]
 800c5d4:	f000 f908 	bl	800c7e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5d8:	4b1d      	ldr	r3, [pc, #116]	; (800c650 <pvPortMalloc+0x188>)
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	4a1b      	ldr	r2, [pc, #108]	; (800c650 <pvPortMalloc+0x188>)
 800c5e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5e6:	4b1a      	ldr	r3, [pc, #104]	; (800c650 <pvPortMalloc+0x188>)
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	4b1b      	ldr	r3, [pc, #108]	; (800c658 <pvPortMalloc+0x190>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d203      	bcs.n	800c5fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5f2:	4b17      	ldr	r3, [pc, #92]	; (800c650 <pvPortMalloc+0x188>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4a18      	ldr	r2, [pc, #96]	; (800c658 <pvPortMalloc+0x190>)
 800c5f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fc:	685a      	ldr	r2, [r3, #4]
 800c5fe:	4b13      	ldr	r3, [pc, #76]	; (800c64c <pvPortMalloc+0x184>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	431a      	orrs	r2, r3
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60a:	2200      	movs	r2, #0
 800c60c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c60e:	4b13      	ldr	r3, [pc, #76]	; (800c65c <pvPortMalloc+0x194>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3301      	adds	r3, #1
 800c614:	4a11      	ldr	r2, [pc, #68]	; (800c65c <pvPortMalloc+0x194>)
 800c616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c618:	f7fe fbee 	bl	800adf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	f003 0307 	and.w	r3, r3, #7
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00a      	beq.n	800c63c <pvPortMalloc+0x174>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	60fb      	str	r3, [r7, #12]
}
 800c638:	bf00      	nop
 800c63a:	e7fe      	b.n	800c63a <pvPortMalloc+0x172>
	return pvReturn;
 800c63c:	69fb      	ldr	r3, [r7, #28]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3728      	adds	r7, #40	; 0x28
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	20002188 	.word	0x20002188
 800c64c:	2000219c 	.word	0x2000219c
 800c650:	2000218c 	.word	0x2000218c
 800c654:	20002180 	.word	0x20002180
 800c658:	20002190 	.word	0x20002190
 800c65c:	20002194 	.word	0x20002194

0800c660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d04d      	beq.n	800c70e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c672:	2308      	movs	r3, #8
 800c674:	425b      	negs	r3, r3
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	4413      	add	r3, r2
 800c67a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	685a      	ldr	r2, [r3, #4]
 800c684:	4b24      	ldr	r3, [pc, #144]	; (800c718 <vPortFree+0xb8>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4013      	ands	r3, r2
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10a      	bne.n	800c6a4 <vPortFree+0x44>
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	60fb      	str	r3, [r7, #12]
}
 800c6a0:	bf00      	nop
 800c6a2:	e7fe      	b.n	800c6a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00a      	beq.n	800c6c2 <vPortFree+0x62>
	__asm volatile
 800c6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b0:	f383 8811 	msr	BASEPRI, r3
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	60bb      	str	r3, [r7, #8]
}
 800c6be:	bf00      	nop
 800c6c0:	e7fe      	b.n	800c6c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	685a      	ldr	r2, [r3, #4]
 800c6c6:	4b14      	ldr	r3, [pc, #80]	; (800c718 <vPortFree+0xb8>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d01e      	beq.n	800c70e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d11a      	bne.n	800c70e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	4b0e      	ldr	r3, [pc, #56]	; (800c718 <vPortFree+0xb8>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	43db      	mvns	r3, r3
 800c6e2:	401a      	ands	r2, r3
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6e8:	f7fe fb78 	bl	800addc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	685a      	ldr	r2, [r3, #4]
 800c6f0:	4b0a      	ldr	r3, [pc, #40]	; (800c71c <vPortFree+0xbc>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	4a09      	ldr	r2, [pc, #36]	; (800c71c <vPortFree+0xbc>)
 800c6f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6fa:	6938      	ldr	r0, [r7, #16]
 800c6fc:	f000 f874 	bl	800c7e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c700:	4b07      	ldr	r3, [pc, #28]	; (800c720 <vPortFree+0xc0>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	3301      	adds	r3, #1
 800c706:	4a06      	ldr	r2, [pc, #24]	; (800c720 <vPortFree+0xc0>)
 800c708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c70a:	f7fe fb75 	bl	800adf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c70e:	bf00      	nop
 800c710:	3718      	adds	r7, #24
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	2000219c 	.word	0x2000219c
 800c71c:	2000218c 	.word	0x2000218c
 800c720:	20002198 	.word	0x20002198

0800c724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c724:	b480      	push	{r7}
 800c726:	b085      	sub	sp, #20
 800c728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c72a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c72e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c730:	4b27      	ldr	r3, [pc, #156]	; (800c7d0 <prvHeapInit+0xac>)
 800c732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f003 0307 	and.w	r3, r3, #7
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d00c      	beq.n	800c758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3307      	adds	r3, #7
 800c742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f023 0307 	bic.w	r3, r3, #7
 800c74a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	1ad3      	subs	r3, r2, r3
 800c752:	4a1f      	ldr	r2, [pc, #124]	; (800c7d0 <prvHeapInit+0xac>)
 800c754:	4413      	add	r3, r2
 800c756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c75c:	4a1d      	ldr	r2, [pc, #116]	; (800c7d4 <prvHeapInit+0xb0>)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c762:	4b1c      	ldr	r3, [pc, #112]	; (800c7d4 <prvHeapInit+0xb0>)
 800c764:	2200      	movs	r2, #0
 800c766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	68ba      	ldr	r2, [r7, #8]
 800c76c:	4413      	add	r3, r2
 800c76e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c770:	2208      	movs	r2, #8
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	1a9b      	subs	r3, r3, r2
 800c776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f023 0307 	bic.w	r3, r3, #7
 800c77e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	4a15      	ldr	r2, [pc, #84]	; (800c7d8 <prvHeapInit+0xb4>)
 800c784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c786:	4b14      	ldr	r3, [pc, #80]	; (800c7d8 <prvHeapInit+0xb4>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2200      	movs	r2, #0
 800c78c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c78e:	4b12      	ldr	r3, [pc, #72]	; (800c7d8 <prvHeapInit+0xb4>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2200      	movs	r2, #0
 800c794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	1ad2      	subs	r2, r2, r3
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7a4:	4b0c      	ldr	r3, [pc, #48]	; (800c7d8 <prvHeapInit+0xb4>)
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	4a0a      	ldr	r2, [pc, #40]	; (800c7dc <prvHeapInit+0xb8>)
 800c7b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	4a09      	ldr	r2, [pc, #36]	; (800c7e0 <prvHeapInit+0xbc>)
 800c7ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7bc:	4b09      	ldr	r3, [pc, #36]	; (800c7e4 <prvHeapInit+0xc0>)
 800c7be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c7c2:	601a      	str	r2, [r3, #0]
}
 800c7c4:	bf00      	nop
 800c7c6:	3714      	adds	r7, #20
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr
 800c7d0:	20001180 	.word	0x20001180
 800c7d4:	20002180 	.word	0x20002180
 800c7d8:	20002188 	.word	0x20002188
 800c7dc:	20002190 	.word	0x20002190
 800c7e0:	2000218c 	.word	0x2000218c
 800c7e4:	2000219c 	.word	0x2000219c

0800c7e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7f0:	4b28      	ldr	r3, [pc, #160]	; (800c894 <prvInsertBlockIntoFreeList+0xac>)
 800c7f2:	60fb      	str	r3, [r7, #12]
 800c7f4:	e002      	b.n	800c7fc <prvInsertBlockIntoFreeList+0x14>
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	60fb      	str	r3, [r7, #12]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	429a      	cmp	r2, r3
 800c804:	d8f7      	bhi.n	800c7f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	68ba      	ldr	r2, [r7, #8]
 800c810:	4413      	add	r3, r2
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	429a      	cmp	r2, r3
 800c816:	d108      	bne.n	800c82a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	685a      	ldr	r2, [r3, #4]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	441a      	add	r2, r3
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	441a      	add	r2, r3
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d118      	bne.n	800c870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	4b15      	ldr	r3, [pc, #84]	; (800c898 <prvInsertBlockIntoFreeList+0xb0>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	429a      	cmp	r2, r3
 800c848:	d00d      	beq.n	800c866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	441a      	add	r2, r3
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	601a      	str	r2, [r3, #0]
 800c864:	e008      	b.n	800c878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c866:	4b0c      	ldr	r3, [pc, #48]	; (800c898 <prvInsertBlockIntoFreeList+0xb0>)
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	601a      	str	r2, [r3, #0]
 800c86e:	e003      	b.n	800c878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d002      	beq.n	800c886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c886:	bf00      	nop
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	20002180 	.word	0x20002180
 800c898:	20002188 	.word	0x20002188

0800c89c <__errno>:
 800c89c:	4b01      	ldr	r3, [pc, #4]	; (800c8a4 <__errno+0x8>)
 800c89e:	6818      	ldr	r0, [r3, #0]
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	2000004c 	.word	0x2000004c

0800c8a8 <__libc_init_array>:
 800c8a8:	b570      	push	{r4, r5, r6, lr}
 800c8aa:	4d0d      	ldr	r5, [pc, #52]	; (800c8e0 <__libc_init_array+0x38>)
 800c8ac:	4c0d      	ldr	r4, [pc, #52]	; (800c8e4 <__libc_init_array+0x3c>)
 800c8ae:	1b64      	subs	r4, r4, r5
 800c8b0:	10a4      	asrs	r4, r4, #2
 800c8b2:	2600      	movs	r6, #0
 800c8b4:	42a6      	cmp	r6, r4
 800c8b6:	d109      	bne.n	800c8cc <__libc_init_array+0x24>
 800c8b8:	4d0b      	ldr	r5, [pc, #44]	; (800c8e8 <__libc_init_array+0x40>)
 800c8ba:	4c0c      	ldr	r4, [pc, #48]	; (800c8ec <__libc_init_array+0x44>)
 800c8bc:	f002 fc26 	bl	800f10c <_init>
 800c8c0:	1b64      	subs	r4, r4, r5
 800c8c2:	10a4      	asrs	r4, r4, #2
 800c8c4:	2600      	movs	r6, #0
 800c8c6:	42a6      	cmp	r6, r4
 800c8c8:	d105      	bne.n	800c8d6 <__libc_init_array+0x2e>
 800c8ca:	bd70      	pop	{r4, r5, r6, pc}
 800c8cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8d0:	4798      	blx	r3
 800c8d2:	3601      	adds	r6, #1
 800c8d4:	e7ee      	b.n	800c8b4 <__libc_init_array+0xc>
 800c8d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8da:	4798      	blx	r3
 800c8dc:	3601      	adds	r6, #1
 800c8de:	e7f2      	b.n	800c8c6 <__libc_init_array+0x1e>
 800c8e0:	0800fa60 	.word	0x0800fa60
 800c8e4:	0800fa60 	.word	0x0800fa60
 800c8e8:	0800fa60 	.word	0x0800fa60
 800c8ec:	0800fa64 	.word	0x0800fa64

0800c8f0 <__retarget_lock_acquire_recursive>:
 800c8f0:	4770      	bx	lr

0800c8f2 <__retarget_lock_release_recursive>:
 800c8f2:	4770      	bx	lr

0800c8f4 <memcpy>:
 800c8f4:	440a      	add	r2, r1
 800c8f6:	4291      	cmp	r1, r2
 800c8f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8fc:	d100      	bne.n	800c900 <memcpy+0xc>
 800c8fe:	4770      	bx	lr
 800c900:	b510      	push	{r4, lr}
 800c902:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c90a:	4291      	cmp	r1, r2
 800c90c:	d1f9      	bne.n	800c902 <memcpy+0xe>
 800c90e:	bd10      	pop	{r4, pc}

0800c910 <memset>:
 800c910:	4402      	add	r2, r0
 800c912:	4603      	mov	r3, r0
 800c914:	4293      	cmp	r3, r2
 800c916:	d100      	bne.n	800c91a <memset+0xa>
 800c918:	4770      	bx	lr
 800c91a:	f803 1b01 	strb.w	r1, [r3], #1
 800c91e:	e7f9      	b.n	800c914 <memset+0x4>

0800c920 <sbrk_aligned>:
 800c920:	b570      	push	{r4, r5, r6, lr}
 800c922:	4e0e      	ldr	r6, [pc, #56]	; (800c95c <sbrk_aligned+0x3c>)
 800c924:	460c      	mov	r4, r1
 800c926:	6831      	ldr	r1, [r6, #0]
 800c928:	4605      	mov	r5, r0
 800c92a:	b911      	cbnz	r1, 800c932 <sbrk_aligned+0x12>
 800c92c:	f000 f8f6 	bl	800cb1c <_sbrk_r>
 800c930:	6030      	str	r0, [r6, #0]
 800c932:	4621      	mov	r1, r4
 800c934:	4628      	mov	r0, r5
 800c936:	f000 f8f1 	bl	800cb1c <_sbrk_r>
 800c93a:	1c43      	adds	r3, r0, #1
 800c93c:	d00a      	beq.n	800c954 <sbrk_aligned+0x34>
 800c93e:	1cc4      	adds	r4, r0, #3
 800c940:	f024 0403 	bic.w	r4, r4, #3
 800c944:	42a0      	cmp	r0, r4
 800c946:	d007      	beq.n	800c958 <sbrk_aligned+0x38>
 800c948:	1a21      	subs	r1, r4, r0
 800c94a:	4628      	mov	r0, r5
 800c94c:	f000 f8e6 	bl	800cb1c <_sbrk_r>
 800c950:	3001      	adds	r0, #1
 800c952:	d101      	bne.n	800c958 <sbrk_aligned+0x38>
 800c954:	f04f 34ff 	mov.w	r4, #4294967295
 800c958:	4620      	mov	r0, r4
 800c95a:	bd70      	pop	{r4, r5, r6, pc}
 800c95c:	200021a8 	.word	0x200021a8

0800c960 <_malloc_r>:
 800c960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c964:	1ccd      	adds	r5, r1, #3
 800c966:	f025 0503 	bic.w	r5, r5, #3
 800c96a:	3508      	adds	r5, #8
 800c96c:	2d0c      	cmp	r5, #12
 800c96e:	bf38      	it	cc
 800c970:	250c      	movcc	r5, #12
 800c972:	2d00      	cmp	r5, #0
 800c974:	4607      	mov	r7, r0
 800c976:	db01      	blt.n	800c97c <_malloc_r+0x1c>
 800c978:	42a9      	cmp	r1, r5
 800c97a:	d905      	bls.n	800c988 <_malloc_r+0x28>
 800c97c:	230c      	movs	r3, #12
 800c97e:	603b      	str	r3, [r7, #0]
 800c980:	2600      	movs	r6, #0
 800c982:	4630      	mov	r0, r6
 800c984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c988:	4e2e      	ldr	r6, [pc, #184]	; (800ca44 <_malloc_r+0xe4>)
 800c98a:	f000 f8f7 	bl	800cb7c <__malloc_lock>
 800c98e:	6833      	ldr	r3, [r6, #0]
 800c990:	461c      	mov	r4, r3
 800c992:	bb34      	cbnz	r4, 800c9e2 <_malloc_r+0x82>
 800c994:	4629      	mov	r1, r5
 800c996:	4638      	mov	r0, r7
 800c998:	f7ff ffc2 	bl	800c920 <sbrk_aligned>
 800c99c:	1c43      	adds	r3, r0, #1
 800c99e:	4604      	mov	r4, r0
 800c9a0:	d14d      	bne.n	800ca3e <_malloc_r+0xde>
 800c9a2:	6834      	ldr	r4, [r6, #0]
 800c9a4:	4626      	mov	r6, r4
 800c9a6:	2e00      	cmp	r6, #0
 800c9a8:	d140      	bne.n	800ca2c <_malloc_r+0xcc>
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	4631      	mov	r1, r6
 800c9ae:	4638      	mov	r0, r7
 800c9b0:	eb04 0803 	add.w	r8, r4, r3
 800c9b4:	f000 f8b2 	bl	800cb1c <_sbrk_r>
 800c9b8:	4580      	cmp	r8, r0
 800c9ba:	d13a      	bne.n	800ca32 <_malloc_r+0xd2>
 800c9bc:	6821      	ldr	r1, [r4, #0]
 800c9be:	3503      	adds	r5, #3
 800c9c0:	1a6d      	subs	r5, r5, r1
 800c9c2:	f025 0503 	bic.w	r5, r5, #3
 800c9c6:	3508      	adds	r5, #8
 800c9c8:	2d0c      	cmp	r5, #12
 800c9ca:	bf38      	it	cc
 800c9cc:	250c      	movcc	r5, #12
 800c9ce:	4629      	mov	r1, r5
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	f7ff ffa5 	bl	800c920 <sbrk_aligned>
 800c9d6:	3001      	adds	r0, #1
 800c9d8:	d02b      	beq.n	800ca32 <_malloc_r+0xd2>
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	442b      	add	r3, r5
 800c9de:	6023      	str	r3, [r4, #0]
 800c9e0:	e00e      	b.n	800ca00 <_malloc_r+0xa0>
 800c9e2:	6822      	ldr	r2, [r4, #0]
 800c9e4:	1b52      	subs	r2, r2, r5
 800c9e6:	d41e      	bmi.n	800ca26 <_malloc_r+0xc6>
 800c9e8:	2a0b      	cmp	r2, #11
 800c9ea:	d916      	bls.n	800ca1a <_malloc_r+0xba>
 800c9ec:	1961      	adds	r1, r4, r5
 800c9ee:	42a3      	cmp	r3, r4
 800c9f0:	6025      	str	r5, [r4, #0]
 800c9f2:	bf18      	it	ne
 800c9f4:	6059      	strne	r1, [r3, #4]
 800c9f6:	6863      	ldr	r3, [r4, #4]
 800c9f8:	bf08      	it	eq
 800c9fa:	6031      	streq	r1, [r6, #0]
 800c9fc:	5162      	str	r2, [r4, r5]
 800c9fe:	604b      	str	r3, [r1, #4]
 800ca00:	4638      	mov	r0, r7
 800ca02:	f104 060b 	add.w	r6, r4, #11
 800ca06:	f000 f8bf 	bl	800cb88 <__malloc_unlock>
 800ca0a:	f026 0607 	bic.w	r6, r6, #7
 800ca0e:	1d23      	adds	r3, r4, #4
 800ca10:	1af2      	subs	r2, r6, r3
 800ca12:	d0b6      	beq.n	800c982 <_malloc_r+0x22>
 800ca14:	1b9b      	subs	r3, r3, r6
 800ca16:	50a3      	str	r3, [r4, r2]
 800ca18:	e7b3      	b.n	800c982 <_malloc_r+0x22>
 800ca1a:	6862      	ldr	r2, [r4, #4]
 800ca1c:	42a3      	cmp	r3, r4
 800ca1e:	bf0c      	ite	eq
 800ca20:	6032      	streq	r2, [r6, #0]
 800ca22:	605a      	strne	r2, [r3, #4]
 800ca24:	e7ec      	b.n	800ca00 <_malloc_r+0xa0>
 800ca26:	4623      	mov	r3, r4
 800ca28:	6864      	ldr	r4, [r4, #4]
 800ca2a:	e7b2      	b.n	800c992 <_malloc_r+0x32>
 800ca2c:	4634      	mov	r4, r6
 800ca2e:	6876      	ldr	r6, [r6, #4]
 800ca30:	e7b9      	b.n	800c9a6 <_malloc_r+0x46>
 800ca32:	230c      	movs	r3, #12
 800ca34:	603b      	str	r3, [r7, #0]
 800ca36:	4638      	mov	r0, r7
 800ca38:	f000 f8a6 	bl	800cb88 <__malloc_unlock>
 800ca3c:	e7a1      	b.n	800c982 <_malloc_r+0x22>
 800ca3e:	6025      	str	r5, [r4, #0]
 800ca40:	e7de      	b.n	800ca00 <_malloc_r+0xa0>
 800ca42:	bf00      	nop
 800ca44:	200021a4 	.word	0x200021a4

0800ca48 <cleanup_glue>:
 800ca48:	b538      	push	{r3, r4, r5, lr}
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	6809      	ldr	r1, [r1, #0]
 800ca4e:	4605      	mov	r5, r0
 800ca50:	b109      	cbz	r1, 800ca56 <cleanup_glue+0xe>
 800ca52:	f7ff fff9 	bl	800ca48 <cleanup_glue>
 800ca56:	4621      	mov	r1, r4
 800ca58:	4628      	mov	r0, r5
 800ca5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca5e:	f000 b899 	b.w	800cb94 <_free_r>
	...

0800ca64 <_reclaim_reent>:
 800ca64:	4b2c      	ldr	r3, [pc, #176]	; (800cb18 <_reclaim_reent+0xb4>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4283      	cmp	r3, r0
 800ca6a:	b570      	push	{r4, r5, r6, lr}
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	d051      	beq.n	800cb14 <_reclaim_reent+0xb0>
 800ca70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ca72:	b143      	cbz	r3, 800ca86 <_reclaim_reent+0x22>
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d14a      	bne.n	800cb10 <_reclaim_reent+0xac>
 800ca7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca7c:	6819      	ldr	r1, [r3, #0]
 800ca7e:	b111      	cbz	r1, 800ca86 <_reclaim_reent+0x22>
 800ca80:	4620      	mov	r0, r4
 800ca82:	f000 f887 	bl	800cb94 <_free_r>
 800ca86:	6961      	ldr	r1, [r4, #20]
 800ca88:	b111      	cbz	r1, 800ca90 <_reclaim_reent+0x2c>
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f000 f882 	bl	800cb94 <_free_r>
 800ca90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ca92:	b111      	cbz	r1, 800ca9a <_reclaim_reent+0x36>
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 f87d 	bl	800cb94 <_free_r>
 800ca9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ca9c:	b111      	cbz	r1, 800caa4 <_reclaim_reent+0x40>
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f000 f878 	bl	800cb94 <_free_r>
 800caa4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800caa6:	b111      	cbz	r1, 800caae <_reclaim_reent+0x4a>
 800caa8:	4620      	mov	r0, r4
 800caaa:	f000 f873 	bl	800cb94 <_free_r>
 800caae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cab0:	b111      	cbz	r1, 800cab8 <_reclaim_reent+0x54>
 800cab2:	4620      	mov	r0, r4
 800cab4:	f000 f86e 	bl	800cb94 <_free_r>
 800cab8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800caba:	b111      	cbz	r1, 800cac2 <_reclaim_reent+0x5e>
 800cabc:	4620      	mov	r0, r4
 800cabe:	f000 f869 	bl	800cb94 <_free_r>
 800cac2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cac4:	b111      	cbz	r1, 800cacc <_reclaim_reent+0x68>
 800cac6:	4620      	mov	r0, r4
 800cac8:	f000 f864 	bl	800cb94 <_free_r>
 800cacc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cace:	b111      	cbz	r1, 800cad6 <_reclaim_reent+0x72>
 800cad0:	4620      	mov	r0, r4
 800cad2:	f000 f85f 	bl	800cb94 <_free_r>
 800cad6:	69a3      	ldr	r3, [r4, #24]
 800cad8:	b1e3      	cbz	r3, 800cb14 <_reclaim_reent+0xb0>
 800cada:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cadc:	4620      	mov	r0, r4
 800cade:	4798      	blx	r3
 800cae0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cae2:	b1b9      	cbz	r1, 800cb14 <_reclaim_reent+0xb0>
 800cae4:	4620      	mov	r0, r4
 800cae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800caea:	f7ff bfad 	b.w	800ca48 <cleanup_glue>
 800caee:	5949      	ldr	r1, [r1, r5]
 800caf0:	b941      	cbnz	r1, 800cb04 <_reclaim_reent+0xa0>
 800caf2:	3504      	adds	r5, #4
 800caf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caf6:	2d80      	cmp	r5, #128	; 0x80
 800caf8:	68d9      	ldr	r1, [r3, #12]
 800cafa:	d1f8      	bne.n	800caee <_reclaim_reent+0x8a>
 800cafc:	4620      	mov	r0, r4
 800cafe:	f000 f849 	bl	800cb94 <_free_r>
 800cb02:	e7ba      	b.n	800ca7a <_reclaim_reent+0x16>
 800cb04:	680e      	ldr	r6, [r1, #0]
 800cb06:	4620      	mov	r0, r4
 800cb08:	f000 f844 	bl	800cb94 <_free_r>
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	e7ef      	b.n	800caf0 <_reclaim_reent+0x8c>
 800cb10:	2500      	movs	r5, #0
 800cb12:	e7ef      	b.n	800caf4 <_reclaim_reent+0x90>
 800cb14:	bd70      	pop	{r4, r5, r6, pc}
 800cb16:	bf00      	nop
 800cb18:	2000004c 	.word	0x2000004c

0800cb1c <_sbrk_r>:
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	4d06      	ldr	r5, [pc, #24]	; (800cb38 <_sbrk_r+0x1c>)
 800cb20:	2300      	movs	r3, #0
 800cb22:	4604      	mov	r4, r0
 800cb24:	4608      	mov	r0, r1
 800cb26:	602b      	str	r3, [r5, #0]
 800cb28:	f7f7 fa0c 	bl	8003f44 <_sbrk>
 800cb2c:	1c43      	adds	r3, r0, #1
 800cb2e:	d102      	bne.n	800cb36 <_sbrk_r+0x1a>
 800cb30:	682b      	ldr	r3, [r5, #0]
 800cb32:	b103      	cbz	r3, 800cb36 <_sbrk_r+0x1a>
 800cb34:	6023      	str	r3, [r4, #0]
 800cb36:	bd38      	pop	{r3, r4, r5, pc}
 800cb38:	200021ac 	.word	0x200021ac

0800cb3c <siprintf>:
 800cb3c:	b40e      	push	{r1, r2, r3}
 800cb3e:	b500      	push	{lr}
 800cb40:	b09c      	sub	sp, #112	; 0x70
 800cb42:	ab1d      	add	r3, sp, #116	; 0x74
 800cb44:	9002      	str	r0, [sp, #8]
 800cb46:	9006      	str	r0, [sp, #24]
 800cb48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cb4c:	4809      	ldr	r0, [pc, #36]	; (800cb74 <siprintf+0x38>)
 800cb4e:	9107      	str	r1, [sp, #28]
 800cb50:	9104      	str	r1, [sp, #16]
 800cb52:	4909      	ldr	r1, [pc, #36]	; (800cb78 <siprintf+0x3c>)
 800cb54:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb58:	9105      	str	r1, [sp, #20]
 800cb5a:	6800      	ldr	r0, [r0, #0]
 800cb5c:	9301      	str	r3, [sp, #4]
 800cb5e:	a902      	add	r1, sp, #8
 800cb60:	f000 f8c0 	bl	800cce4 <_svfiprintf_r>
 800cb64:	9b02      	ldr	r3, [sp, #8]
 800cb66:	2200      	movs	r2, #0
 800cb68:	701a      	strb	r2, [r3, #0]
 800cb6a:	b01c      	add	sp, #112	; 0x70
 800cb6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb70:	b003      	add	sp, #12
 800cb72:	4770      	bx	lr
 800cb74:	2000004c 	.word	0x2000004c
 800cb78:	ffff0208 	.word	0xffff0208

0800cb7c <__malloc_lock>:
 800cb7c:	4801      	ldr	r0, [pc, #4]	; (800cb84 <__malloc_lock+0x8>)
 800cb7e:	f7ff beb7 	b.w	800c8f0 <__retarget_lock_acquire_recursive>
 800cb82:	bf00      	nop
 800cb84:	200021a0 	.word	0x200021a0

0800cb88 <__malloc_unlock>:
 800cb88:	4801      	ldr	r0, [pc, #4]	; (800cb90 <__malloc_unlock+0x8>)
 800cb8a:	f7ff beb2 	b.w	800c8f2 <__retarget_lock_release_recursive>
 800cb8e:	bf00      	nop
 800cb90:	200021a0 	.word	0x200021a0

0800cb94 <_free_r>:
 800cb94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb96:	2900      	cmp	r1, #0
 800cb98:	d044      	beq.n	800cc24 <_free_r+0x90>
 800cb9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb9e:	9001      	str	r0, [sp, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	f1a1 0404 	sub.w	r4, r1, #4
 800cba6:	bfb8      	it	lt
 800cba8:	18e4      	addlt	r4, r4, r3
 800cbaa:	f7ff ffe7 	bl	800cb7c <__malloc_lock>
 800cbae:	4a1e      	ldr	r2, [pc, #120]	; (800cc28 <_free_r+0x94>)
 800cbb0:	9801      	ldr	r0, [sp, #4]
 800cbb2:	6813      	ldr	r3, [r2, #0]
 800cbb4:	b933      	cbnz	r3, 800cbc4 <_free_r+0x30>
 800cbb6:	6063      	str	r3, [r4, #4]
 800cbb8:	6014      	str	r4, [r2, #0]
 800cbba:	b003      	add	sp, #12
 800cbbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbc0:	f7ff bfe2 	b.w	800cb88 <__malloc_unlock>
 800cbc4:	42a3      	cmp	r3, r4
 800cbc6:	d908      	bls.n	800cbda <_free_r+0x46>
 800cbc8:	6825      	ldr	r5, [r4, #0]
 800cbca:	1961      	adds	r1, r4, r5
 800cbcc:	428b      	cmp	r3, r1
 800cbce:	bf01      	itttt	eq
 800cbd0:	6819      	ldreq	r1, [r3, #0]
 800cbd2:	685b      	ldreq	r3, [r3, #4]
 800cbd4:	1949      	addeq	r1, r1, r5
 800cbd6:	6021      	streq	r1, [r4, #0]
 800cbd8:	e7ed      	b.n	800cbb6 <_free_r+0x22>
 800cbda:	461a      	mov	r2, r3
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	b10b      	cbz	r3, 800cbe4 <_free_r+0x50>
 800cbe0:	42a3      	cmp	r3, r4
 800cbe2:	d9fa      	bls.n	800cbda <_free_r+0x46>
 800cbe4:	6811      	ldr	r1, [r2, #0]
 800cbe6:	1855      	adds	r5, r2, r1
 800cbe8:	42a5      	cmp	r5, r4
 800cbea:	d10b      	bne.n	800cc04 <_free_r+0x70>
 800cbec:	6824      	ldr	r4, [r4, #0]
 800cbee:	4421      	add	r1, r4
 800cbf0:	1854      	adds	r4, r2, r1
 800cbf2:	42a3      	cmp	r3, r4
 800cbf4:	6011      	str	r1, [r2, #0]
 800cbf6:	d1e0      	bne.n	800cbba <_free_r+0x26>
 800cbf8:	681c      	ldr	r4, [r3, #0]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	6053      	str	r3, [r2, #4]
 800cbfe:	4421      	add	r1, r4
 800cc00:	6011      	str	r1, [r2, #0]
 800cc02:	e7da      	b.n	800cbba <_free_r+0x26>
 800cc04:	d902      	bls.n	800cc0c <_free_r+0x78>
 800cc06:	230c      	movs	r3, #12
 800cc08:	6003      	str	r3, [r0, #0]
 800cc0a:	e7d6      	b.n	800cbba <_free_r+0x26>
 800cc0c:	6825      	ldr	r5, [r4, #0]
 800cc0e:	1961      	adds	r1, r4, r5
 800cc10:	428b      	cmp	r3, r1
 800cc12:	bf04      	itt	eq
 800cc14:	6819      	ldreq	r1, [r3, #0]
 800cc16:	685b      	ldreq	r3, [r3, #4]
 800cc18:	6063      	str	r3, [r4, #4]
 800cc1a:	bf04      	itt	eq
 800cc1c:	1949      	addeq	r1, r1, r5
 800cc1e:	6021      	streq	r1, [r4, #0]
 800cc20:	6054      	str	r4, [r2, #4]
 800cc22:	e7ca      	b.n	800cbba <_free_r+0x26>
 800cc24:	b003      	add	sp, #12
 800cc26:	bd30      	pop	{r4, r5, pc}
 800cc28:	200021a4 	.word	0x200021a4

0800cc2c <__ssputs_r>:
 800cc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc30:	688e      	ldr	r6, [r1, #8]
 800cc32:	429e      	cmp	r6, r3
 800cc34:	4682      	mov	sl, r0
 800cc36:	460c      	mov	r4, r1
 800cc38:	4690      	mov	r8, r2
 800cc3a:	461f      	mov	r7, r3
 800cc3c:	d838      	bhi.n	800ccb0 <__ssputs_r+0x84>
 800cc3e:	898a      	ldrh	r2, [r1, #12]
 800cc40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc44:	d032      	beq.n	800ccac <__ssputs_r+0x80>
 800cc46:	6825      	ldr	r5, [r4, #0]
 800cc48:	6909      	ldr	r1, [r1, #16]
 800cc4a:	eba5 0901 	sub.w	r9, r5, r1
 800cc4e:	6965      	ldr	r5, [r4, #20]
 800cc50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc58:	3301      	adds	r3, #1
 800cc5a:	444b      	add	r3, r9
 800cc5c:	106d      	asrs	r5, r5, #1
 800cc5e:	429d      	cmp	r5, r3
 800cc60:	bf38      	it	cc
 800cc62:	461d      	movcc	r5, r3
 800cc64:	0553      	lsls	r3, r2, #21
 800cc66:	d531      	bpl.n	800cccc <__ssputs_r+0xa0>
 800cc68:	4629      	mov	r1, r5
 800cc6a:	f7ff fe79 	bl	800c960 <_malloc_r>
 800cc6e:	4606      	mov	r6, r0
 800cc70:	b950      	cbnz	r0, 800cc88 <__ssputs_r+0x5c>
 800cc72:	230c      	movs	r3, #12
 800cc74:	f8ca 3000 	str.w	r3, [sl]
 800cc78:	89a3      	ldrh	r3, [r4, #12]
 800cc7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc7e:	81a3      	strh	r3, [r4, #12]
 800cc80:	f04f 30ff 	mov.w	r0, #4294967295
 800cc84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc88:	6921      	ldr	r1, [r4, #16]
 800cc8a:	464a      	mov	r2, r9
 800cc8c:	f7ff fe32 	bl	800c8f4 <memcpy>
 800cc90:	89a3      	ldrh	r3, [r4, #12]
 800cc92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc9a:	81a3      	strh	r3, [r4, #12]
 800cc9c:	6126      	str	r6, [r4, #16]
 800cc9e:	6165      	str	r5, [r4, #20]
 800cca0:	444e      	add	r6, r9
 800cca2:	eba5 0509 	sub.w	r5, r5, r9
 800cca6:	6026      	str	r6, [r4, #0]
 800cca8:	60a5      	str	r5, [r4, #8]
 800ccaa:	463e      	mov	r6, r7
 800ccac:	42be      	cmp	r6, r7
 800ccae:	d900      	bls.n	800ccb2 <__ssputs_r+0x86>
 800ccb0:	463e      	mov	r6, r7
 800ccb2:	6820      	ldr	r0, [r4, #0]
 800ccb4:	4632      	mov	r2, r6
 800ccb6:	4641      	mov	r1, r8
 800ccb8:	f000 faa8 	bl	800d20c <memmove>
 800ccbc:	68a3      	ldr	r3, [r4, #8]
 800ccbe:	1b9b      	subs	r3, r3, r6
 800ccc0:	60a3      	str	r3, [r4, #8]
 800ccc2:	6823      	ldr	r3, [r4, #0]
 800ccc4:	4433      	add	r3, r6
 800ccc6:	6023      	str	r3, [r4, #0]
 800ccc8:	2000      	movs	r0, #0
 800ccca:	e7db      	b.n	800cc84 <__ssputs_r+0x58>
 800cccc:	462a      	mov	r2, r5
 800ccce:	f000 fab7 	bl	800d240 <_realloc_r>
 800ccd2:	4606      	mov	r6, r0
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	d1e1      	bne.n	800cc9c <__ssputs_r+0x70>
 800ccd8:	6921      	ldr	r1, [r4, #16]
 800ccda:	4650      	mov	r0, sl
 800ccdc:	f7ff ff5a 	bl	800cb94 <_free_r>
 800cce0:	e7c7      	b.n	800cc72 <__ssputs_r+0x46>
	...

0800cce4 <_svfiprintf_r>:
 800cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce8:	4698      	mov	r8, r3
 800ccea:	898b      	ldrh	r3, [r1, #12]
 800ccec:	061b      	lsls	r3, r3, #24
 800ccee:	b09d      	sub	sp, #116	; 0x74
 800ccf0:	4607      	mov	r7, r0
 800ccf2:	460d      	mov	r5, r1
 800ccf4:	4614      	mov	r4, r2
 800ccf6:	d50e      	bpl.n	800cd16 <_svfiprintf_r+0x32>
 800ccf8:	690b      	ldr	r3, [r1, #16]
 800ccfa:	b963      	cbnz	r3, 800cd16 <_svfiprintf_r+0x32>
 800ccfc:	2140      	movs	r1, #64	; 0x40
 800ccfe:	f7ff fe2f 	bl	800c960 <_malloc_r>
 800cd02:	6028      	str	r0, [r5, #0]
 800cd04:	6128      	str	r0, [r5, #16]
 800cd06:	b920      	cbnz	r0, 800cd12 <_svfiprintf_r+0x2e>
 800cd08:	230c      	movs	r3, #12
 800cd0a:	603b      	str	r3, [r7, #0]
 800cd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd10:	e0d1      	b.n	800ceb6 <_svfiprintf_r+0x1d2>
 800cd12:	2340      	movs	r3, #64	; 0x40
 800cd14:	616b      	str	r3, [r5, #20]
 800cd16:	2300      	movs	r3, #0
 800cd18:	9309      	str	r3, [sp, #36]	; 0x24
 800cd1a:	2320      	movs	r3, #32
 800cd1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd20:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd24:	2330      	movs	r3, #48	; 0x30
 800cd26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ced0 <_svfiprintf_r+0x1ec>
 800cd2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd2e:	f04f 0901 	mov.w	r9, #1
 800cd32:	4623      	mov	r3, r4
 800cd34:	469a      	mov	sl, r3
 800cd36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd3a:	b10a      	cbz	r2, 800cd40 <_svfiprintf_r+0x5c>
 800cd3c:	2a25      	cmp	r2, #37	; 0x25
 800cd3e:	d1f9      	bne.n	800cd34 <_svfiprintf_r+0x50>
 800cd40:	ebba 0b04 	subs.w	fp, sl, r4
 800cd44:	d00b      	beq.n	800cd5e <_svfiprintf_r+0x7a>
 800cd46:	465b      	mov	r3, fp
 800cd48:	4622      	mov	r2, r4
 800cd4a:	4629      	mov	r1, r5
 800cd4c:	4638      	mov	r0, r7
 800cd4e:	f7ff ff6d 	bl	800cc2c <__ssputs_r>
 800cd52:	3001      	adds	r0, #1
 800cd54:	f000 80aa 	beq.w	800ceac <_svfiprintf_r+0x1c8>
 800cd58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd5a:	445a      	add	r2, fp
 800cd5c:	9209      	str	r2, [sp, #36]	; 0x24
 800cd5e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f000 80a2 	beq.w	800ceac <_svfiprintf_r+0x1c8>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd72:	f10a 0a01 	add.w	sl, sl, #1
 800cd76:	9304      	str	r3, [sp, #16]
 800cd78:	9307      	str	r3, [sp, #28]
 800cd7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd7e:	931a      	str	r3, [sp, #104]	; 0x68
 800cd80:	4654      	mov	r4, sl
 800cd82:	2205      	movs	r2, #5
 800cd84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd88:	4851      	ldr	r0, [pc, #324]	; (800ced0 <_svfiprintf_r+0x1ec>)
 800cd8a:	f7f3 fa29 	bl	80001e0 <memchr>
 800cd8e:	9a04      	ldr	r2, [sp, #16]
 800cd90:	b9d8      	cbnz	r0, 800cdca <_svfiprintf_r+0xe6>
 800cd92:	06d0      	lsls	r0, r2, #27
 800cd94:	bf44      	itt	mi
 800cd96:	2320      	movmi	r3, #32
 800cd98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd9c:	0711      	lsls	r1, r2, #28
 800cd9e:	bf44      	itt	mi
 800cda0:	232b      	movmi	r3, #43	; 0x2b
 800cda2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cda6:	f89a 3000 	ldrb.w	r3, [sl]
 800cdaa:	2b2a      	cmp	r3, #42	; 0x2a
 800cdac:	d015      	beq.n	800cdda <_svfiprintf_r+0xf6>
 800cdae:	9a07      	ldr	r2, [sp, #28]
 800cdb0:	4654      	mov	r4, sl
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	f04f 0c0a 	mov.w	ip, #10
 800cdb8:	4621      	mov	r1, r4
 800cdba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdbe:	3b30      	subs	r3, #48	; 0x30
 800cdc0:	2b09      	cmp	r3, #9
 800cdc2:	d94e      	bls.n	800ce62 <_svfiprintf_r+0x17e>
 800cdc4:	b1b0      	cbz	r0, 800cdf4 <_svfiprintf_r+0x110>
 800cdc6:	9207      	str	r2, [sp, #28]
 800cdc8:	e014      	b.n	800cdf4 <_svfiprintf_r+0x110>
 800cdca:	eba0 0308 	sub.w	r3, r0, r8
 800cdce:	fa09 f303 	lsl.w	r3, r9, r3
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	9304      	str	r3, [sp, #16]
 800cdd6:	46a2      	mov	sl, r4
 800cdd8:	e7d2      	b.n	800cd80 <_svfiprintf_r+0x9c>
 800cdda:	9b03      	ldr	r3, [sp, #12]
 800cddc:	1d19      	adds	r1, r3, #4
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	9103      	str	r1, [sp, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	bfbb      	ittet	lt
 800cde6:	425b      	neglt	r3, r3
 800cde8:	f042 0202 	orrlt.w	r2, r2, #2
 800cdec:	9307      	strge	r3, [sp, #28]
 800cdee:	9307      	strlt	r3, [sp, #28]
 800cdf0:	bfb8      	it	lt
 800cdf2:	9204      	strlt	r2, [sp, #16]
 800cdf4:	7823      	ldrb	r3, [r4, #0]
 800cdf6:	2b2e      	cmp	r3, #46	; 0x2e
 800cdf8:	d10c      	bne.n	800ce14 <_svfiprintf_r+0x130>
 800cdfa:	7863      	ldrb	r3, [r4, #1]
 800cdfc:	2b2a      	cmp	r3, #42	; 0x2a
 800cdfe:	d135      	bne.n	800ce6c <_svfiprintf_r+0x188>
 800ce00:	9b03      	ldr	r3, [sp, #12]
 800ce02:	1d1a      	adds	r2, r3, #4
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	9203      	str	r2, [sp, #12]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	bfb8      	it	lt
 800ce0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce10:	3402      	adds	r4, #2
 800ce12:	9305      	str	r3, [sp, #20]
 800ce14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cee0 <_svfiprintf_r+0x1fc>
 800ce18:	7821      	ldrb	r1, [r4, #0]
 800ce1a:	2203      	movs	r2, #3
 800ce1c:	4650      	mov	r0, sl
 800ce1e:	f7f3 f9df 	bl	80001e0 <memchr>
 800ce22:	b140      	cbz	r0, 800ce36 <_svfiprintf_r+0x152>
 800ce24:	2340      	movs	r3, #64	; 0x40
 800ce26:	eba0 000a 	sub.w	r0, r0, sl
 800ce2a:	fa03 f000 	lsl.w	r0, r3, r0
 800ce2e:	9b04      	ldr	r3, [sp, #16]
 800ce30:	4303      	orrs	r3, r0
 800ce32:	3401      	adds	r4, #1
 800ce34:	9304      	str	r3, [sp, #16]
 800ce36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce3a:	4826      	ldr	r0, [pc, #152]	; (800ced4 <_svfiprintf_r+0x1f0>)
 800ce3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce40:	2206      	movs	r2, #6
 800ce42:	f7f3 f9cd 	bl	80001e0 <memchr>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d038      	beq.n	800cebc <_svfiprintf_r+0x1d8>
 800ce4a:	4b23      	ldr	r3, [pc, #140]	; (800ced8 <_svfiprintf_r+0x1f4>)
 800ce4c:	bb1b      	cbnz	r3, 800ce96 <_svfiprintf_r+0x1b2>
 800ce4e:	9b03      	ldr	r3, [sp, #12]
 800ce50:	3307      	adds	r3, #7
 800ce52:	f023 0307 	bic.w	r3, r3, #7
 800ce56:	3308      	adds	r3, #8
 800ce58:	9303      	str	r3, [sp, #12]
 800ce5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce5c:	4433      	add	r3, r6
 800ce5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce60:	e767      	b.n	800cd32 <_svfiprintf_r+0x4e>
 800ce62:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce66:	460c      	mov	r4, r1
 800ce68:	2001      	movs	r0, #1
 800ce6a:	e7a5      	b.n	800cdb8 <_svfiprintf_r+0xd4>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	3401      	adds	r4, #1
 800ce70:	9305      	str	r3, [sp, #20]
 800ce72:	4619      	mov	r1, r3
 800ce74:	f04f 0c0a 	mov.w	ip, #10
 800ce78:	4620      	mov	r0, r4
 800ce7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce7e:	3a30      	subs	r2, #48	; 0x30
 800ce80:	2a09      	cmp	r2, #9
 800ce82:	d903      	bls.n	800ce8c <_svfiprintf_r+0x1a8>
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d0c5      	beq.n	800ce14 <_svfiprintf_r+0x130>
 800ce88:	9105      	str	r1, [sp, #20]
 800ce8a:	e7c3      	b.n	800ce14 <_svfiprintf_r+0x130>
 800ce8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce90:	4604      	mov	r4, r0
 800ce92:	2301      	movs	r3, #1
 800ce94:	e7f0      	b.n	800ce78 <_svfiprintf_r+0x194>
 800ce96:	ab03      	add	r3, sp, #12
 800ce98:	9300      	str	r3, [sp, #0]
 800ce9a:	462a      	mov	r2, r5
 800ce9c:	4b0f      	ldr	r3, [pc, #60]	; (800cedc <_svfiprintf_r+0x1f8>)
 800ce9e:	a904      	add	r1, sp, #16
 800cea0:	4638      	mov	r0, r7
 800cea2:	f3af 8000 	nop.w
 800cea6:	1c42      	adds	r2, r0, #1
 800cea8:	4606      	mov	r6, r0
 800ceaa:	d1d6      	bne.n	800ce5a <_svfiprintf_r+0x176>
 800ceac:	89ab      	ldrh	r3, [r5, #12]
 800ceae:	065b      	lsls	r3, r3, #25
 800ceb0:	f53f af2c 	bmi.w	800cd0c <_svfiprintf_r+0x28>
 800ceb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ceb6:	b01d      	add	sp, #116	; 0x74
 800ceb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cebc:	ab03      	add	r3, sp, #12
 800cebe:	9300      	str	r3, [sp, #0]
 800cec0:	462a      	mov	r2, r5
 800cec2:	4b06      	ldr	r3, [pc, #24]	; (800cedc <_svfiprintf_r+0x1f8>)
 800cec4:	a904      	add	r1, sp, #16
 800cec6:	4638      	mov	r0, r7
 800cec8:	f000 f87a 	bl	800cfc0 <_printf_i>
 800cecc:	e7eb      	b.n	800cea6 <_svfiprintf_r+0x1c2>
 800cece:	bf00      	nop
 800ced0:	0800f818 	.word	0x0800f818
 800ced4:	0800f822 	.word	0x0800f822
 800ced8:	00000000 	.word	0x00000000
 800cedc:	0800cc2d 	.word	0x0800cc2d
 800cee0:	0800f81e 	.word	0x0800f81e

0800cee4 <_printf_common>:
 800cee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee8:	4616      	mov	r6, r2
 800ceea:	4699      	mov	r9, r3
 800ceec:	688a      	ldr	r2, [r1, #8]
 800ceee:	690b      	ldr	r3, [r1, #16]
 800cef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cef4:	4293      	cmp	r3, r2
 800cef6:	bfb8      	it	lt
 800cef8:	4613      	movlt	r3, r2
 800cefa:	6033      	str	r3, [r6, #0]
 800cefc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf00:	4607      	mov	r7, r0
 800cf02:	460c      	mov	r4, r1
 800cf04:	b10a      	cbz	r2, 800cf0a <_printf_common+0x26>
 800cf06:	3301      	adds	r3, #1
 800cf08:	6033      	str	r3, [r6, #0]
 800cf0a:	6823      	ldr	r3, [r4, #0]
 800cf0c:	0699      	lsls	r1, r3, #26
 800cf0e:	bf42      	ittt	mi
 800cf10:	6833      	ldrmi	r3, [r6, #0]
 800cf12:	3302      	addmi	r3, #2
 800cf14:	6033      	strmi	r3, [r6, #0]
 800cf16:	6825      	ldr	r5, [r4, #0]
 800cf18:	f015 0506 	ands.w	r5, r5, #6
 800cf1c:	d106      	bne.n	800cf2c <_printf_common+0x48>
 800cf1e:	f104 0a19 	add.w	sl, r4, #25
 800cf22:	68e3      	ldr	r3, [r4, #12]
 800cf24:	6832      	ldr	r2, [r6, #0]
 800cf26:	1a9b      	subs	r3, r3, r2
 800cf28:	42ab      	cmp	r3, r5
 800cf2a:	dc26      	bgt.n	800cf7a <_printf_common+0x96>
 800cf2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf30:	1e13      	subs	r3, r2, #0
 800cf32:	6822      	ldr	r2, [r4, #0]
 800cf34:	bf18      	it	ne
 800cf36:	2301      	movne	r3, #1
 800cf38:	0692      	lsls	r2, r2, #26
 800cf3a:	d42b      	bmi.n	800cf94 <_printf_common+0xb0>
 800cf3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf40:	4649      	mov	r1, r9
 800cf42:	4638      	mov	r0, r7
 800cf44:	47c0      	blx	r8
 800cf46:	3001      	adds	r0, #1
 800cf48:	d01e      	beq.n	800cf88 <_printf_common+0xa4>
 800cf4a:	6823      	ldr	r3, [r4, #0]
 800cf4c:	68e5      	ldr	r5, [r4, #12]
 800cf4e:	6832      	ldr	r2, [r6, #0]
 800cf50:	f003 0306 	and.w	r3, r3, #6
 800cf54:	2b04      	cmp	r3, #4
 800cf56:	bf08      	it	eq
 800cf58:	1aad      	subeq	r5, r5, r2
 800cf5a:	68a3      	ldr	r3, [r4, #8]
 800cf5c:	6922      	ldr	r2, [r4, #16]
 800cf5e:	bf0c      	ite	eq
 800cf60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf64:	2500      	movne	r5, #0
 800cf66:	4293      	cmp	r3, r2
 800cf68:	bfc4      	itt	gt
 800cf6a:	1a9b      	subgt	r3, r3, r2
 800cf6c:	18ed      	addgt	r5, r5, r3
 800cf6e:	2600      	movs	r6, #0
 800cf70:	341a      	adds	r4, #26
 800cf72:	42b5      	cmp	r5, r6
 800cf74:	d11a      	bne.n	800cfac <_printf_common+0xc8>
 800cf76:	2000      	movs	r0, #0
 800cf78:	e008      	b.n	800cf8c <_printf_common+0xa8>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	4652      	mov	r2, sl
 800cf7e:	4649      	mov	r1, r9
 800cf80:	4638      	mov	r0, r7
 800cf82:	47c0      	blx	r8
 800cf84:	3001      	adds	r0, #1
 800cf86:	d103      	bne.n	800cf90 <_printf_common+0xac>
 800cf88:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf90:	3501      	adds	r5, #1
 800cf92:	e7c6      	b.n	800cf22 <_printf_common+0x3e>
 800cf94:	18e1      	adds	r1, r4, r3
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	2030      	movs	r0, #48	; 0x30
 800cf9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf9e:	4422      	add	r2, r4
 800cfa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfa8:	3302      	adds	r3, #2
 800cfaa:	e7c7      	b.n	800cf3c <_printf_common+0x58>
 800cfac:	2301      	movs	r3, #1
 800cfae:	4622      	mov	r2, r4
 800cfb0:	4649      	mov	r1, r9
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	47c0      	blx	r8
 800cfb6:	3001      	adds	r0, #1
 800cfb8:	d0e6      	beq.n	800cf88 <_printf_common+0xa4>
 800cfba:	3601      	adds	r6, #1
 800cfbc:	e7d9      	b.n	800cf72 <_printf_common+0x8e>
	...

0800cfc0 <_printf_i>:
 800cfc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc4:	7e0f      	ldrb	r7, [r1, #24]
 800cfc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cfc8:	2f78      	cmp	r7, #120	; 0x78
 800cfca:	4691      	mov	r9, r2
 800cfcc:	4680      	mov	r8, r0
 800cfce:	460c      	mov	r4, r1
 800cfd0:	469a      	mov	sl, r3
 800cfd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cfd6:	d807      	bhi.n	800cfe8 <_printf_i+0x28>
 800cfd8:	2f62      	cmp	r7, #98	; 0x62
 800cfda:	d80a      	bhi.n	800cff2 <_printf_i+0x32>
 800cfdc:	2f00      	cmp	r7, #0
 800cfde:	f000 80d8 	beq.w	800d192 <_printf_i+0x1d2>
 800cfe2:	2f58      	cmp	r7, #88	; 0x58
 800cfe4:	f000 80a3 	beq.w	800d12e <_printf_i+0x16e>
 800cfe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cff0:	e03a      	b.n	800d068 <_printf_i+0xa8>
 800cff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cff6:	2b15      	cmp	r3, #21
 800cff8:	d8f6      	bhi.n	800cfe8 <_printf_i+0x28>
 800cffa:	a101      	add	r1, pc, #4	; (adr r1, 800d000 <_printf_i+0x40>)
 800cffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d000:	0800d059 	.word	0x0800d059
 800d004:	0800d06d 	.word	0x0800d06d
 800d008:	0800cfe9 	.word	0x0800cfe9
 800d00c:	0800cfe9 	.word	0x0800cfe9
 800d010:	0800cfe9 	.word	0x0800cfe9
 800d014:	0800cfe9 	.word	0x0800cfe9
 800d018:	0800d06d 	.word	0x0800d06d
 800d01c:	0800cfe9 	.word	0x0800cfe9
 800d020:	0800cfe9 	.word	0x0800cfe9
 800d024:	0800cfe9 	.word	0x0800cfe9
 800d028:	0800cfe9 	.word	0x0800cfe9
 800d02c:	0800d179 	.word	0x0800d179
 800d030:	0800d09d 	.word	0x0800d09d
 800d034:	0800d15b 	.word	0x0800d15b
 800d038:	0800cfe9 	.word	0x0800cfe9
 800d03c:	0800cfe9 	.word	0x0800cfe9
 800d040:	0800d19b 	.word	0x0800d19b
 800d044:	0800cfe9 	.word	0x0800cfe9
 800d048:	0800d09d 	.word	0x0800d09d
 800d04c:	0800cfe9 	.word	0x0800cfe9
 800d050:	0800cfe9 	.word	0x0800cfe9
 800d054:	0800d163 	.word	0x0800d163
 800d058:	682b      	ldr	r3, [r5, #0]
 800d05a:	1d1a      	adds	r2, r3, #4
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	602a      	str	r2, [r5, #0]
 800d060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d068:	2301      	movs	r3, #1
 800d06a:	e0a3      	b.n	800d1b4 <_printf_i+0x1f4>
 800d06c:	6820      	ldr	r0, [r4, #0]
 800d06e:	6829      	ldr	r1, [r5, #0]
 800d070:	0606      	lsls	r6, r0, #24
 800d072:	f101 0304 	add.w	r3, r1, #4
 800d076:	d50a      	bpl.n	800d08e <_printf_i+0xce>
 800d078:	680e      	ldr	r6, [r1, #0]
 800d07a:	602b      	str	r3, [r5, #0]
 800d07c:	2e00      	cmp	r6, #0
 800d07e:	da03      	bge.n	800d088 <_printf_i+0xc8>
 800d080:	232d      	movs	r3, #45	; 0x2d
 800d082:	4276      	negs	r6, r6
 800d084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d088:	485e      	ldr	r0, [pc, #376]	; (800d204 <_printf_i+0x244>)
 800d08a:	230a      	movs	r3, #10
 800d08c:	e019      	b.n	800d0c2 <_printf_i+0x102>
 800d08e:	680e      	ldr	r6, [r1, #0]
 800d090:	602b      	str	r3, [r5, #0]
 800d092:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d096:	bf18      	it	ne
 800d098:	b236      	sxthne	r6, r6
 800d09a:	e7ef      	b.n	800d07c <_printf_i+0xbc>
 800d09c:	682b      	ldr	r3, [r5, #0]
 800d09e:	6820      	ldr	r0, [r4, #0]
 800d0a0:	1d19      	adds	r1, r3, #4
 800d0a2:	6029      	str	r1, [r5, #0]
 800d0a4:	0601      	lsls	r1, r0, #24
 800d0a6:	d501      	bpl.n	800d0ac <_printf_i+0xec>
 800d0a8:	681e      	ldr	r6, [r3, #0]
 800d0aa:	e002      	b.n	800d0b2 <_printf_i+0xf2>
 800d0ac:	0646      	lsls	r6, r0, #25
 800d0ae:	d5fb      	bpl.n	800d0a8 <_printf_i+0xe8>
 800d0b0:	881e      	ldrh	r6, [r3, #0]
 800d0b2:	4854      	ldr	r0, [pc, #336]	; (800d204 <_printf_i+0x244>)
 800d0b4:	2f6f      	cmp	r7, #111	; 0x6f
 800d0b6:	bf0c      	ite	eq
 800d0b8:	2308      	moveq	r3, #8
 800d0ba:	230a      	movne	r3, #10
 800d0bc:	2100      	movs	r1, #0
 800d0be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0c2:	6865      	ldr	r5, [r4, #4]
 800d0c4:	60a5      	str	r5, [r4, #8]
 800d0c6:	2d00      	cmp	r5, #0
 800d0c8:	bfa2      	ittt	ge
 800d0ca:	6821      	ldrge	r1, [r4, #0]
 800d0cc:	f021 0104 	bicge.w	r1, r1, #4
 800d0d0:	6021      	strge	r1, [r4, #0]
 800d0d2:	b90e      	cbnz	r6, 800d0d8 <_printf_i+0x118>
 800d0d4:	2d00      	cmp	r5, #0
 800d0d6:	d04d      	beq.n	800d174 <_printf_i+0x1b4>
 800d0d8:	4615      	mov	r5, r2
 800d0da:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0de:	fb03 6711 	mls	r7, r3, r1, r6
 800d0e2:	5dc7      	ldrb	r7, [r0, r7]
 800d0e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0e8:	4637      	mov	r7, r6
 800d0ea:	42bb      	cmp	r3, r7
 800d0ec:	460e      	mov	r6, r1
 800d0ee:	d9f4      	bls.n	800d0da <_printf_i+0x11a>
 800d0f0:	2b08      	cmp	r3, #8
 800d0f2:	d10b      	bne.n	800d10c <_printf_i+0x14c>
 800d0f4:	6823      	ldr	r3, [r4, #0]
 800d0f6:	07de      	lsls	r6, r3, #31
 800d0f8:	d508      	bpl.n	800d10c <_printf_i+0x14c>
 800d0fa:	6923      	ldr	r3, [r4, #16]
 800d0fc:	6861      	ldr	r1, [r4, #4]
 800d0fe:	4299      	cmp	r1, r3
 800d100:	bfde      	ittt	le
 800d102:	2330      	movle	r3, #48	; 0x30
 800d104:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d108:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d10c:	1b52      	subs	r2, r2, r5
 800d10e:	6122      	str	r2, [r4, #16]
 800d110:	f8cd a000 	str.w	sl, [sp]
 800d114:	464b      	mov	r3, r9
 800d116:	aa03      	add	r2, sp, #12
 800d118:	4621      	mov	r1, r4
 800d11a:	4640      	mov	r0, r8
 800d11c:	f7ff fee2 	bl	800cee4 <_printf_common>
 800d120:	3001      	adds	r0, #1
 800d122:	d14c      	bne.n	800d1be <_printf_i+0x1fe>
 800d124:	f04f 30ff 	mov.w	r0, #4294967295
 800d128:	b004      	add	sp, #16
 800d12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d12e:	4835      	ldr	r0, [pc, #212]	; (800d204 <_printf_i+0x244>)
 800d130:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d134:	6829      	ldr	r1, [r5, #0]
 800d136:	6823      	ldr	r3, [r4, #0]
 800d138:	f851 6b04 	ldr.w	r6, [r1], #4
 800d13c:	6029      	str	r1, [r5, #0]
 800d13e:	061d      	lsls	r5, r3, #24
 800d140:	d514      	bpl.n	800d16c <_printf_i+0x1ac>
 800d142:	07df      	lsls	r7, r3, #31
 800d144:	bf44      	itt	mi
 800d146:	f043 0320 	orrmi.w	r3, r3, #32
 800d14a:	6023      	strmi	r3, [r4, #0]
 800d14c:	b91e      	cbnz	r6, 800d156 <_printf_i+0x196>
 800d14e:	6823      	ldr	r3, [r4, #0]
 800d150:	f023 0320 	bic.w	r3, r3, #32
 800d154:	6023      	str	r3, [r4, #0]
 800d156:	2310      	movs	r3, #16
 800d158:	e7b0      	b.n	800d0bc <_printf_i+0xfc>
 800d15a:	6823      	ldr	r3, [r4, #0]
 800d15c:	f043 0320 	orr.w	r3, r3, #32
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	2378      	movs	r3, #120	; 0x78
 800d164:	4828      	ldr	r0, [pc, #160]	; (800d208 <_printf_i+0x248>)
 800d166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d16a:	e7e3      	b.n	800d134 <_printf_i+0x174>
 800d16c:	0659      	lsls	r1, r3, #25
 800d16e:	bf48      	it	mi
 800d170:	b2b6      	uxthmi	r6, r6
 800d172:	e7e6      	b.n	800d142 <_printf_i+0x182>
 800d174:	4615      	mov	r5, r2
 800d176:	e7bb      	b.n	800d0f0 <_printf_i+0x130>
 800d178:	682b      	ldr	r3, [r5, #0]
 800d17a:	6826      	ldr	r6, [r4, #0]
 800d17c:	6961      	ldr	r1, [r4, #20]
 800d17e:	1d18      	adds	r0, r3, #4
 800d180:	6028      	str	r0, [r5, #0]
 800d182:	0635      	lsls	r5, r6, #24
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	d501      	bpl.n	800d18c <_printf_i+0x1cc>
 800d188:	6019      	str	r1, [r3, #0]
 800d18a:	e002      	b.n	800d192 <_printf_i+0x1d2>
 800d18c:	0670      	lsls	r0, r6, #25
 800d18e:	d5fb      	bpl.n	800d188 <_printf_i+0x1c8>
 800d190:	8019      	strh	r1, [r3, #0]
 800d192:	2300      	movs	r3, #0
 800d194:	6123      	str	r3, [r4, #16]
 800d196:	4615      	mov	r5, r2
 800d198:	e7ba      	b.n	800d110 <_printf_i+0x150>
 800d19a:	682b      	ldr	r3, [r5, #0]
 800d19c:	1d1a      	adds	r2, r3, #4
 800d19e:	602a      	str	r2, [r5, #0]
 800d1a0:	681d      	ldr	r5, [r3, #0]
 800d1a2:	6862      	ldr	r2, [r4, #4]
 800d1a4:	2100      	movs	r1, #0
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	f7f3 f81a 	bl	80001e0 <memchr>
 800d1ac:	b108      	cbz	r0, 800d1b2 <_printf_i+0x1f2>
 800d1ae:	1b40      	subs	r0, r0, r5
 800d1b0:	6060      	str	r0, [r4, #4]
 800d1b2:	6863      	ldr	r3, [r4, #4]
 800d1b4:	6123      	str	r3, [r4, #16]
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1bc:	e7a8      	b.n	800d110 <_printf_i+0x150>
 800d1be:	6923      	ldr	r3, [r4, #16]
 800d1c0:	462a      	mov	r2, r5
 800d1c2:	4649      	mov	r1, r9
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	47d0      	blx	sl
 800d1c8:	3001      	adds	r0, #1
 800d1ca:	d0ab      	beq.n	800d124 <_printf_i+0x164>
 800d1cc:	6823      	ldr	r3, [r4, #0]
 800d1ce:	079b      	lsls	r3, r3, #30
 800d1d0:	d413      	bmi.n	800d1fa <_printf_i+0x23a>
 800d1d2:	68e0      	ldr	r0, [r4, #12]
 800d1d4:	9b03      	ldr	r3, [sp, #12]
 800d1d6:	4298      	cmp	r0, r3
 800d1d8:	bfb8      	it	lt
 800d1da:	4618      	movlt	r0, r3
 800d1dc:	e7a4      	b.n	800d128 <_printf_i+0x168>
 800d1de:	2301      	movs	r3, #1
 800d1e0:	4632      	mov	r2, r6
 800d1e2:	4649      	mov	r1, r9
 800d1e4:	4640      	mov	r0, r8
 800d1e6:	47d0      	blx	sl
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	d09b      	beq.n	800d124 <_printf_i+0x164>
 800d1ec:	3501      	adds	r5, #1
 800d1ee:	68e3      	ldr	r3, [r4, #12]
 800d1f0:	9903      	ldr	r1, [sp, #12]
 800d1f2:	1a5b      	subs	r3, r3, r1
 800d1f4:	42ab      	cmp	r3, r5
 800d1f6:	dcf2      	bgt.n	800d1de <_printf_i+0x21e>
 800d1f8:	e7eb      	b.n	800d1d2 <_printf_i+0x212>
 800d1fa:	2500      	movs	r5, #0
 800d1fc:	f104 0619 	add.w	r6, r4, #25
 800d200:	e7f5      	b.n	800d1ee <_printf_i+0x22e>
 800d202:	bf00      	nop
 800d204:	0800f829 	.word	0x0800f829
 800d208:	0800f83a 	.word	0x0800f83a

0800d20c <memmove>:
 800d20c:	4288      	cmp	r0, r1
 800d20e:	b510      	push	{r4, lr}
 800d210:	eb01 0402 	add.w	r4, r1, r2
 800d214:	d902      	bls.n	800d21c <memmove+0x10>
 800d216:	4284      	cmp	r4, r0
 800d218:	4623      	mov	r3, r4
 800d21a:	d807      	bhi.n	800d22c <memmove+0x20>
 800d21c:	1e43      	subs	r3, r0, #1
 800d21e:	42a1      	cmp	r1, r4
 800d220:	d008      	beq.n	800d234 <memmove+0x28>
 800d222:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d22a:	e7f8      	b.n	800d21e <memmove+0x12>
 800d22c:	4402      	add	r2, r0
 800d22e:	4601      	mov	r1, r0
 800d230:	428a      	cmp	r2, r1
 800d232:	d100      	bne.n	800d236 <memmove+0x2a>
 800d234:	bd10      	pop	{r4, pc}
 800d236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d23a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d23e:	e7f7      	b.n	800d230 <memmove+0x24>

0800d240 <_realloc_r>:
 800d240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d244:	4680      	mov	r8, r0
 800d246:	4614      	mov	r4, r2
 800d248:	460e      	mov	r6, r1
 800d24a:	b921      	cbnz	r1, 800d256 <_realloc_r+0x16>
 800d24c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d250:	4611      	mov	r1, r2
 800d252:	f7ff bb85 	b.w	800c960 <_malloc_r>
 800d256:	b92a      	cbnz	r2, 800d264 <_realloc_r+0x24>
 800d258:	f7ff fc9c 	bl	800cb94 <_free_r>
 800d25c:	4625      	mov	r5, r4
 800d25e:	4628      	mov	r0, r5
 800d260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d264:	f000 f81b 	bl	800d29e <_malloc_usable_size_r>
 800d268:	4284      	cmp	r4, r0
 800d26a:	4607      	mov	r7, r0
 800d26c:	d802      	bhi.n	800d274 <_realloc_r+0x34>
 800d26e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d272:	d812      	bhi.n	800d29a <_realloc_r+0x5a>
 800d274:	4621      	mov	r1, r4
 800d276:	4640      	mov	r0, r8
 800d278:	f7ff fb72 	bl	800c960 <_malloc_r>
 800d27c:	4605      	mov	r5, r0
 800d27e:	2800      	cmp	r0, #0
 800d280:	d0ed      	beq.n	800d25e <_realloc_r+0x1e>
 800d282:	42bc      	cmp	r4, r7
 800d284:	4622      	mov	r2, r4
 800d286:	4631      	mov	r1, r6
 800d288:	bf28      	it	cs
 800d28a:	463a      	movcs	r2, r7
 800d28c:	f7ff fb32 	bl	800c8f4 <memcpy>
 800d290:	4631      	mov	r1, r6
 800d292:	4640      	mov	r0, r8
 800d294:	f7ff fc7e 	bl	800cb94 <_free_r>
 800d298:	e7e1      	b.n	800d25e <_realloc_r+0x1e>
 800d29a:	4635      	mov	r5, r6
 800d29c:	e7df      	b.n	800d25e <_realloc_r+0x1e>

0800d29e <_malloc_usable_size_r>:
 800d29e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2a2:	1f18      	subs	r0, r3, #4
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	bfbc      	itt	lt
 800d2a8:	580b      	ldrlt	r3, [r1, r0]
 800d2aa:	18c0      	addlt	r0, r0, r3
 800d2ac:	4770      	bx	lr
	...

0800d2b0 <cos>:
 800d2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2b2:	ec53 2b10 	vmov	r2, r3, d0
 800d2b6:	4826      	ldr	r0, [pc, #152]	; (800d350 <cos+0xa0>)
 800d2b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d2bc:	4281      	cmp	r1, r0
 800d2be:	dc06      	bgt.n	800d2ce <cos+0x1e>
 800d2c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d348 <cos+0x98>
 800d2c4:	b005      	add	sp, #20
 800d2c6:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2ca:	f001 b8fd 	b.w	800e4c8 <__kernel_cos>
 800d2ce:	4821      	ldr	r0, [pc, #132]	; (800d354 <cos+0xa4>)
 800d2d0:	4281      	cmp	r1, r0
 800d2d2:	dd09      	ble.n	800d2e8 <cos+0x38>
 800d2d4:	ee10 0a10 	vmov	r0, s0
 800d2d8:	4619      	mov	r1, r3
 800d2da:	f7f2 ffd5 	bl	8000288 <__aeabi_dsub>
 800d2de:	ec41 0b10 	vmov	d0, r0, r1
 800d2e2:	b005      	add	sp, #20
 800d2e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2e8:	4668      	mov	r0, sp
 800d2ea:	f000 fe2d 	bl	800df48 <__ieee754_rem_pio2>
 800d2ee:	f000 0003 	and.w	r0, r0, #3
 800d2f2:	2801      	cmp	r0, #1
 800d2f4:	d00b      	beq.n	800d30e <cos+0x5e>
 800d2f6:	2802      	cmp	r0, #2
 800d2f8:	d016      	beq.n	800d328 <cos+0x78>
 800d2fa:	b9e0      	cbnz	r0, 800d336 <cos+0x86>
 800d2fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d300:	ed9d 0b00 	vldr	d0, [sp]
 800d304:	f001 f8e0 	bl	800e4c8 <__kernel_cos>
 800d308:	ec51 0b10 	vmov	r0, r1, d0
 800d30c:	e7e7      	b.n	800d2de <cos+0x2e>
 800d30e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d312:	ed9d 0b00 	vldr	d0, [sp]
 800d316:	f001 fcef 	bl	800ecf8 <__kernel_sin>
 800d31a:	ec53 2b10 	vmov	r2, r3, d0
 800d31e:	ee10 0a10 	vmov	r0, s0
 800d322:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d326:	e7da      	b.n	800d2de <cos+0x2e>
 800d328:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d32c:	ed9d 0b00 	vldr	d0, [sp]
 800d330:	f001 f8ca 	bl	800e4c8 <__kernel_cos>
 800d334:	e7f1      	b.n	800d31a <cos+0x6a>
 800d336:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d33a:	ed9d 0b00 	vldr	d0, [sp]
 800d33e:	2001      	movs	r0, #1
 800d340:	f001 fcda 	bl	800ecf8 <__kernel_sin>
 800d344:	e7e0      	b.n	800d308 <cos+0x58>
 800d346:	bf00      	nop
	...
 800d350:	3fe921fb 	.word	0x3fe921fb
 800d354:	7fefffff 	.word	0x7fefffff

0800d358 <sin>:
 800d358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d35a:	ec53 2b10 	vmov	r2, r3, d0
 800d35e:	4828      	ldr	r0, [pc, #160]	; (800d400 <sin+0xa8>)
 800d360:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d364:	4281      	cmp	r1, r0
 800d366:	dc07      	bgt.n	800d378 <sin+0x20>
 800d368:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d3f8 <sin+0xa0>
 800d36c:	2000      	movs	r0, #0
 800d36e:	b005      	add	sp, #20
 800d370:	f85d eb04 	ldr.w	lr, [sp], #4
 800d374:	f001 bcc0 	b.w	800ecf8 <__kernel_sin>
 800d378:	4822      	ldr	r0, [pc, #136]	; (800d404 <sin+0xac>)
 800d37a:	4281      	cmp	r1, r0
 800d37c:	dd09      	ble.n	800d392 <sin+0x3a>
 800d37e:	ee10 0a10 	vmov	r0, s0
 800d382:	4619      	mov	r1, r3
 800d384:	f7f2 ff80 	bl	8000288 <__aeabi_dsub>
 800d388:	ec41 0b10 	vmov	d0, r0, r1
 800d38c:	b005      	add	sp, #20
 800d38e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d392:	4668      	mov	r0, sp
 800d394:	f000 fdd8 	bl	800df48 <__ieee754_rem_pio2>
 800d398:	f000 0003 	and.w	r0, r0, #3
 800d39c:	2801      	cmp	r0, #1
 800d39e:	d00c      	beq.n	800d3ba <sin+0x62>
 800d3a0:	2802      	cmp	r0, #2
 800d3a2:	d011      	beq.n	800d3c8 <sin+0x70>
 800d3a4:	b9f0      	cbnz	r0, 800d3e4 <sin+0x8c>
 800d3a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3aa:	ed9d 0b00 	vldr	d0, [sp]
 800d3ae:	2001      	movs	r0, #1
 800d3b0:	f001 fca2 	bl	800ecf8 <__kernel_sin>
 800d3b4:	ec51 0b10 	vmov	r0, r1, d0
 800d3b8:	e7e6      	b.n	800d388 <sin+0x30>
 800d3ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3be:	ed9d 0b00 	vldr	d0, [sp]
 800d3c2:	f001 f881 	bl	800e4c8 <__kernel_cos>
 800d3c6:	e7f5      	b.n	800d3b4 <sin+0x5c>
 800d3c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3cc:	ed9d 0b00 	vldr	d0, [sp]
 800d3d0:	2001      	movs	r0, #1
 800d3d2:	f001 fc91 	bl	800ecf8 <__kernel_sin>
 800d3d6:	ec53 2b10 	vmov	r2, r3, d0
 800d3da:	ee10 0a10 	vmov	r0, s0
 800d3de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d3e2:	e7d1      	b.n	800d388 <sin+0x30>
 800d3e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3e8:	ed9d 0b00 	vldr	d0, [sp]
 800d3ec:	f001 f86c 	bl	800e4c8 <__kernel_cos>
 800d3f0:	e7f1      	b.n	800d3d6 <sin+0x7e>
 800d3f2:	bf00      	nop
 800d3f4:	f3af 8000 	nop.w
	...
 800d400:	3fe921fb 	.word	0x3fe921fb
 800d404:	7fefffff 	.word	0x7fefffff

0800d408 <pow>:
 800d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40a:	ed2d 8b02 	vpush	{d8}
 800d40e:	eeb0 8a40 	vmov.f32	s16, s0
 800d412:	eef0 8a60 	vmov.f32	s17, s1
 800d416:	ec55 4b11 	vmov	r4, r5, d1
 800d41a:	f000 f865 	bl	800d4e8 <__ieee754_pow>
 800d41e:	4622      	mov	r2, r4
 800d420:	462b      	mov	r3, r5
 800d422:	4620      	mov	r0, r4
 800d424:	4629      	mov	r1, r5
 800d426:	ec57 6b10 	vmov	r6, r7, d0
 800d42a:	f7f3 fb7f 	bl	8000b2c <__aeabi_dcmpun>
 800d42e:	2800      	cmp	r0, #0
 800d430:	d13b      	bne.n	800d4aa <pow+0xa2>
 800d432:	ec51 0b18 	vmov	r0, r1, d8
 800d436:	2200      	movs	r2, #0
 800d438:	2300      	movs	r3, #0
 800d43a:	f7f3 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800d43e:	b1b8      	cbz	r0, 800d470 <pow+0x68>
 800d440:	2200      	movs	r2, #0
 800d442:	2300      	movs	r3, #0
 800d444:	4620      	mov	r0, r4
 800d446:	4629      	mov	r1, r5
 800d448:	f7f3 fb3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d146      	bne.n	800d4de <pow+0xd6>
 800d450:	ec45 4b10 	vmov	d0, r4, r5
 800d454:	f001 fd47 	bl	800eee6 <finite>
 800d458:	b338      	cbz	r0, 800d4aa <pow+0xa2>
 800d45a:	2200      	movs	r2, #0
 800d45c:	2300      	movs	r3, #0
 800d45e:	4620      	mov	r0, r4
 800d460:	4629      	mov	r1, r5
 800d462:	f7f3 fb3b 	bl	8000adc <__aeabi_dcmplt>
 800d466:	b300      	cbz	r0, 800d4aa <pow+0xa2>
 800d468:	f7ff fa18 	bl	800c89c <__errno>
 800d46c:	2322      	movs	r3, #34	; 0x22
 800d46e:	e01b      	b.n	800d4a8 <pow+0xa0>
 800d470:	ec47 6b10 	vmov	d0, r6, r7
 800d474:	f001 fd37 	bl	800eee6 <finite>
 800d478:	b9e0      	cbnz	r0, 800d4b4 <pow+0xac>
 800d47a:	eeb0 0a48 	vmov.f32	s0, s16
 800d47e:	eef0 0a68 	vmov.f32	s1, s17
 800d482:	f001 fd30 	bl	800eee6 <finite>
 800d486:	b1a8      	cbz	r0, 800d4b4 <pow+0xac>
 800d488:	ec45 4b10 	vmov	d0, r4, r5
 800d48c:	f001 fd2b 	bl	800eee6 <finite>
 800d490:	b180      	cbz	r0, 800d4b4 <pow+0xac>
 800d492:	4632      	mov	r2, r6
 800d494:	463b      	mov	r3, r7
 800d496:	4630      	mov	r0, r6
 800d498:	4639      	mov	r1, r7
 800d49a:	f7f3 fb47 	bl	8000b2c <__aeabi_dcmpun>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d0e2      	beq.n	800d468 <pow+0x60>
 800d4a2:	f7ff f9fb 	bl	800c89c <__errno>
 800d4a6:	2321      	movs	r3, #33	; 0x21
 800d4a8:	6003      	str	r3, [r0, #0]
 800d4aa:	ecbd 8b02 	vpop	{d8}
 800d4ae:	ec47 6b10 	vmov	d0, r6, r7
 800d4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	4639      	mov	r1, r7
 800d4bc:	f7f3 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d0f2      	beq.n	800d4aa <pow+0xa2>
 800d4c4:	eeb0 0a48 	vmov.f32	s0, s16
 800d4c8:	eef0 0a68 	vmov.f32	s1, s17
 800d4cc:	f001 fd0b 	bl	800eee6 <finite>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	d0ea      	beq.n	800d4aa <pow+0xa2>
 800d4d4:	ec45 4b10 	vmov	d0, r4, r5
 800d4d8:	f001 fd05 	bl	800eee6 <finite>
 800d4dc:	e7c3      	b.n	800d466 <pow+0x5e>
 800d4de:	4f01      	ldr	r7, [pc, #4]	; (800d4e4 <pow+0xdc>)
 800d4e0:	2600      	movs	r6, #0
 800d4e2:	e7e2      	b.n	800d4aa <pow+0xa2>
 800d4e4:	3ff00000 	.word	0x3ff00000

0800d4e8 <__ieee754_pow>:
 800d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ec:	ed2d 8b06 	vpush	{d8-d10}
 800d4f0:	b089      	sub	sp, #36	; 0x24
 800d4f2:	ed8d 1b00 	vstr	d1, [sp]
 800d4f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d4fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d4fe:	ea58 0102 	orrs.w	r1, r8, r2
 800d502:	ec57 6b10 	vmov	r6, r7, d0
 800d506:	d115      	bne.n	800d534 <__ieee754_pow+0x4c>
 800d508:	19b3      	adds	r3, r6, r6
 800d50a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d50e:	4152      	adcs	r2, r2
 800d510:	4299      	cmp	r1, r3
 800d512:	4b89      	ldr	r3, [pc, #548]	; (800d738 <__ieee754_pow+0x250>)
 800d514:	4193      	sbcs	r3, r2
 800d516:	f080 84d2 	bcs.w	800debe <__ieee754_pow+0x9d6>
 800d51a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d51e:	4630      	mov	r0, r6
 800d520:	4639      	mov	r1, r7
 800d522:	f7f2 feb3 	bl	800028c <__adddf3>
 800d526:	ec41 0b10 	vmov	d0, r0, r1
 800d52a:	b009      	add	sp, #36	; 0x24
 800d52c:	ecbd 8b06 	vpop	{d8-d10}
 800d530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d534:	4b81      	ldr	r3, [pc, #516]	; (800d73c <__ieee754_pow+0x254>)
 800d536:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d53a:	429c      	cmp	r4, r3
 800d53c:	ee10 aa10 	vmov	sl, s0
 800d540:	463d      	mov	r5, r7
 800d542:	dc06      	bgt.n	800d552 <__ieee754_pow+0x6a>
 800d544:	d101      	bne.n	800d54a <__ieee754_pow+0x62>
 800d546:	2e00      	cmp	r6, #0
 800d548:	d1e7      	bne.n	800d51a <__ieee754_pow+0x32>
 800d54a:	4598      	cmp	r8, r3
 800d54c:	dc01      	bgt.n	800d552 <__ieee754_pow+0x6a>
 800d54e:	d10f      	bne.n	800d570 <__ieee754_pow+0x88>
 800d550:	b172      	cbz	r2, 800d570 <__ieee754_pow+0x88>
 800d552:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d556:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d55a:	ea55 050a 	orrs.w	r5, r5, sl
 800d55e:	d1dc      	bne.n	800d51a <__ieee754_pow+0x32>
 800d560:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d564:	18db      	adds	r3, r3, r3
 800d566:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d56a:	4152      	adcs	r2, r2
 800d56c:	429d      	cmp	r5, r3
 800d56e:	e7d0      	b.n	800d512 <__ieee754_pow+0x2a>
 800d570:	2d00      	cmp	r5, #0
 800d572:	da3b      	bge.n	800d5ec <__ieee754_pow+0x104>
 800d574:	4b72      	ldr	r3, [pc, #456]	; (800d740 <__ieee754_pow+0x258>)
 800d576:	4598      	cmp	r8, r3
 800d578:	dc51      	bgt.n	800d61e <__ieee754_pow+0x136>
 800d57a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d57e:	4598      	cmp	r8, r3
 800d580:	f340 84ac 	ble.w	800dedc <__ieee754_pow+0x9f4>
 800d584:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d588:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d58c:	2b14      	cmp	r3, #20
 800d58e:	dd0f      	ble.n	800d5b0 <__ieee754_pow+0xc8>
 800d590:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d594:	fa22 f103 	lsr.w	r1, r2, r3
 800d598:	fa01 f303 	lsl.w	r3, r1, r3
 800d59c:	4293      	cmp	r3, r2
 800d59e:	f040 849d 	bne.w	800dedc <__ieee754_pow+0x9f4>
 800d5a2:	f001 0101 	and.w	r1, r1, #1
 800d5a6:	f1c1 0302 	rsb	r3, r1, #2
 800d5aa:	9304      	str	r3, [sp, #16]
 800d5ac:	b182      	cbz	r2, 800d5d0 <__ieee754_pow+0xe8>
 800d5ae:	e05f      	b.n	800d670 <__ieee754_pow+0x188>
 800d5b0:	2a00      	cmp	r2, #0
 800d5b2:	d15b      	bne.n	800d66c <__ieee754_pow+0x184>
 800d5b4:	f1c3 0314 	rsb	r3, r3, #20
 800d5b8:	fa48 f103 	asr.w	r1, r8, r3
 800d5bc:	fa01 f303 	lsl.w	r3, r1, r3
 800d5c0:	4543      	cmp	r3, r8
 800d5c2:	f040 8488 	bne.w	800ded6 <__ieee754_pow+0x9ee>
 800d5c6:	f001 0101 	and.w	r1, r1, #1
 800d5ca:	f1c1 0302 	rsb	r3, r1, #2
 800d5ce:	9304      	str	r3, [sp, #16]
 800d5d0:	4b5c      	ldr	r3, [pc, #368]	; (800d744 <__ieee754_pow+0x25c>)
 800d5d2:	4598      	cmp	r8, r3
 800d5d4:	d132      	bne.n	800d63c <__ieee754_pow+0x154>
 800d5d6:	f1b9 0f00 	cmp.w	r9, #0
 800d5da:	f280 8478 	bge.w	800dece <__ieee754_pow+0x9e6>
 800d5de:	4959      	ldr	r1, [pc, #356]	; (800d744 <__ieee754_pow+0x25c>)
 800d5e0:	4632      	mov	r2, r6
 800d5e2:	463b      	mov	r3, r7
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	f7f3 f931 	bl	800084c <__aeabi_ddiv>
 800d5ea:	e79c      	b.n	800d526 <__ieee754_pow+0x3e>
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	9304      	str	r3, [sp, #16]
 800d5f0:	2a00      	cmp	r2, #0
 800d5f2:	d13d      	bne.n	800d670 <__ieee754_pow+0x188>
 800d5f4:	4b51      	ldr	r3, [pc, #324]	; (800d73c <__ieee754_pow+0x254>)
 800d5f6:	4598      	cmp	r8, r3
 800d5f8:	d1ea      	bne.n	800d5d0 <__ieee754_pow+0xe8>
 800d5fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d5fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d602:	ea53 030a 	orrs.w	r3, r3, sl
 800d606:	f000 845a 	beq.w	800debe <__ieee754_pow+0x9d6>
 800d60a:	4b4f      	ldr	r3, [pc, #316]	; (800d748 <__ieee754_pow+0x260>)
 800d60c:	429c      	cmp	r4, r3
 800d60e:	dd08      	ble.n	800d622 <__ieee754_pow+0x13a>
 800d610:	f1b9 0f00 	cmp.w	r9, #0
 800d614:	f2c0 8457 	blt.w	800dec6 <__ieee754_pow+0x9de>
 800d618:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d61c:	e783      	b.n	800d526 <__ieee754_pow+0x3e>
 800d61e:	2302      	movs	r3, #2
 800d620:	e7e5      	b.n	800d5ee <__ieee754_pow+0x106>
 800d622:	f1b9 0f00 	cmp.w	r9, #0
 800d626:	f04f 0000 	mov.w	r0, #0
 800d62a:	f04f 0100 	mov.w	r1, #0
 800d62e:	f6bf af7a 	bge.w	800d526 <__ieee754_pow+0x3e>
 800d632:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d636:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d63a:	e774      	b.n	800d526 <__ieee754_pow+0x3e>
 800d63c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d640:	d106      	bne.n	800d650 <__ieee754_pow+0x168>
 800d642:	4632      	mov	r2, r6
 800d644:	463b      	mov	r3, r7
 800d646:	4630      	mov	r0, r6
 800d648:	4639      	mov	r1, r7
 800d64a:	f7f2 ffd5 	bl	80005f8 <__aeabi_dmul>
 800d64e:	e76a      	b.n	800d526 <__ieee754_pow+0x3e>
 800d650:	4b3e      	ldr	r3, [pc, #248]	; (800d74c <__ieee754_pow+0x264>)
 800d652:	4599      	cmp	r9, r3
 800d654:	d10c      	bne.n	800d670 <__ieee754_pow+0x188>
 800d656:	2d00      	cmp	r5, #0
 800d658:	db0a      	blt.n	800d670 <__ieee754_pow+0x188>
 800d65a:	ec47 6b10 	vmov	d0, r6, r7
 800d65e:	b009      	add	sp, #36	; 0x24
 800d660:	ecbd 8b06 	vpop	{d8-d10}
 800d664:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d668:	f000 be7a 	b.w	800e360 <__ieee754_sqrt>
 800d66c:	2300      	movs	r3, #0
 800d66e:	9304      	str	r3, [sp, #16]
 800d670:	ec47 6b10 	vmov	d0, r6, r7
 800d674:	f001 fc2e 	bl	800eed4 <fabs>
 800d678:	ec51 0b10 	vmov	r0, r1, d0
 800d67c:	f1ba 0f00 	cmp.w	sl, #0
 800d680:	d129      	bne.n	800d6d6 <__ieee754_pow+0x1ee>
 800d682:	b124      	cbz	r4, 800d68e <__ieee754_pow+0x1a6>
 800d684:	4b2f      	ldr	r3, [pc, #188]	; (800d744 <__ieee754_pow+0x25c>)
 800d686:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d123      	bne.n	800d6d6 <__ieee754_pow+0x1ee>
 800d68e:	f1b9 0f00 	cmp.w	r9, #0
 800d692:	da05      	bge.n	800d6a0 <__ieee754_pow+0x1b8>
 800d694:	4602      	mov	r2, r0
 800d696:	460b      	mov	r3, r1
 800d698:	2000      	movs	r0, #0
 800d69a:	492a      	ldr	r1, [pc, #168]	; (800d744 <__ieee754_pow+0x25c>)
 800d69c:	f7f3 f8d6 	bl	800084c <__aeabi_ddiv>
 800d6a0:	2d00      	cmp	r5, #0
 800d6a2:	f6bf af40 	bge.w	800d526 <__ieee754_pow+0x3e>
 800d6a6:	9b04      	ldr	r3, [sp, #16]
 800d6a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d6ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d6b0:	4323      	orrs	r3, r4
 800d6b2:	d108      	bne.n	800d6c6 <__ieee754_pow+0x1de>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	f7f2 fde4 	bl	8000288 <__aeabi_dsub>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	e78f      	b.n	800d5e6 <__ieee754_pow+0xfe>
 800d6c6:	9b04      	ldr	r3, [sp, #16]
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	f47f af2c 	bne.w	800d526 <__ieee754_pow+0x3e>
 800d6ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	e727      	b.n	800d526 <__ieee754_pow+0x3e>
 800d6d6:	0feb      	lsrs	r3, r5, #31
 800d6d8:	3b01      	subs	r3, #1
 800d6da:	9306      	str	r3, [sp, #24]
 800d6dc:	9a06      	ldr	r2, [sp, #24]
 800d6de:	9b04      	ldr	r3, [sp, #16]
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	d102      	bne.n	800d6ea <__ieee754_pow+0x202>
 800d6e4:	4632      	mov	r2, r6
 800d6e6:	463b      	mov	r3, r7
 800d6e8:	e7e6      	b.n	800d6b8 <__ieee754_pow+0x1d0>
 800d6ea:	4b19      	ldr	r3, [pc, #100]	; (800d750 <__ieee754_pow+0x268>)
 800d6ec:	4598      	cmp	r8, r3
 800d6ee:	f340 80fb 	ble.w	800d8e8 <__ieee754_pow+0x400>
 800d6f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d6f6:	4598      	cmp	r8, r3
 800d6f8:	4b13      	ldr	r3, [pc, #76]	; (800d748 <__ieee754_pow+0x260>)
 800d6fa:	dd0c      	ble.n	800d716 <__ieee754_pow+0x22e>
 800d6fc:	429c      	cmp	r4, r3
 800d6fe:	dc0f      	bgt.n	800d720 <__ieee754_pow+0x238>
 800d700:	f1b9 0f00 	cmp.w	r9, #0
 800d704:	da0f      	bge.n	800d726 <__ieee754_pow+0x23e>
 800d706:	2000      	movs	r0, #0
 800d708:	b009      	add	sp, #36	; 0x24
 800d70a:	ecbd 8b06 	vpop	{d8-d10}
 800d70e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d712:	f001 bbd6 	b.w	800eec2 <__math_oflow>
 800d716:	429c      	cmp	r4, r3
 800d718:	dbf2      	blt.n	800d700 <__ieee754_pow+0x218>
 800d71a:	4b0a      	ldr	r3, [pc, #40]	; (800d744 <__ieee754_pow+0x25c>)
 800d71c:	429c      	cmp	r4, r3
 800d71e:	dd19      	ble.n	800d754 <__ieee754_pow+0x26c>
 800d720:	f1b9 0f00 	cmp.w	r9, #0
 800d724:	dcef      	bgt.n	800d706 <__ieee754_pow+0x21e>
 800d726:	2000      	movs	r0, #0
 800d728:	b009      	add	sp, #36	; 0x24
 800d72a:	ecbd 8b06 	vpop	{d8-d10}
 800d72e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d732:	f001 bbbd 	b.w	800eeb0 <__math_uflow>
 800d736:	bf00      	nop
 800d738:	fff00000 	.word	0xfff00000
 800d73c:	7ff00000 	.word	0x7ff00000
 800d740:	433fffff 	.word	0x433fffff
 800d744:	3ff00000 	.word	0x3ff00000
 800d748:	3fefffff 	.word	0x3fefffff
 800d74c:	3fe00000 	.word	0x3fe00000
 800d750:	41e00000 	.word	0x41e00000
 800d754:	4b60      	ldr	r3, [pc, #384]	; (800d8d8 <__ieee754_pow+0x3f0>)
 800d756:	2200      	movs	r2, #0
 800d758:	f7f2 fd96 	bl	8000288 <__aeabi_dsub>
 800d75c:	a354      	add	r3, pc, #336	; (adr r3, 800d8b0 <__ieee754_pow+0x3c8>)
 800d75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d762:	4604      	mov	r4, r0
 800d764:	460d      	mov	r5, r1
 800d766:	f7f2 ff47 	bl	80005f8 <__aeabi_dmul>
 800d76a:	a353      	add	r3, pc, #332	; (adr r3, 800d8b8 <__ieee754_pow+0x3d0>)
 800d76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d770:	4606      	mov	r6, r0
 800d772:	460f      	mov	r7, r1
 800d774:	4620      	mov	r0, r4
 800d776:	4629      	mov	r1, r5
 800d778:	f7f2 ff3e 	bl	80005f8 <__aeabi_dmul>
 800d77c:	4b57      	ldr	r3, [pc, #348]	; (800d8dc <__ieee754_pow+0x3f4>)
 800d77e:	4682      	mov	sl, r0
 800d780:	468b      	mov	fp, r1
 800d782:	2200      	movs	r2, #0
 800d784:	4620      	mov	r0, r4
 800d786:	4629      	mov	r1, r5
 800d788:	f7f2 ff36 	bl	80005f8 <__aeabi_dmul>
 800d78c:	4602      	mov	r2, r0
 800d78e:	460b      	mov	r3, r1
 800d790:	a14b      	add	r1, pc, #300	; (adr r1, 800d8c0 <__ieee754_pow+0x3d8>)
 800d792:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d796:	f7f2 fd77 	bl	8000288 <__aeabi_dsub>
 800d79a:	4622      	mov	r2, r4
 800d79c:	462b      	mov	r3, r5
 800d79e:	f7f2 ff2b 	bl	80005f8 <__aeabi_dmul>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	494d      	ldr	r1, [pc, #308]	; (800d8e0 <__ieee754_pow+0x3f8>)
 800d7aa:	f7f2 fd6d 	bl	8000288 <__aeabi_dsub>
 800d7ae:	4622      	mov	r2, r4
 800d7b0:	4680      	mov	r8, r0
 800d7b2:	4689      	mov	r9, r1
 800d7b4:	462b      	mov	r3, r5
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	f7f2 ff1d 	bl	80005f8 <__aeabi_dmul>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	4640      	mov	r0, r8
 800d7c4:	4649      	mov	r1, r9
 800d7c6:	f7f2 ff17 	bl	80005f8 <__aeabi_dmul>
 800d7ca:	a33f      	add	r3, pc, #252	; (adr r3, 800d8c8 <__ieee754_pow+0x3e0>)
 800d7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d0:	f7f2 ff12 	bl	80005f8 <__aeabi_dmul>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	4650      	mov	r0, sl
 800d7da:	4659      	mov	r1, fp
 800d7dc:	f7f2 fd54 	bl	8000288 <__aeabi_dsub>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	4680      	mov	r8, r0
 800d7e6:	4689      	mov	r9, r1
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	4639      	mov	r1, r7
 800d7ec:	f7f2 fd4e 	bl	800028c <__adddf3>
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	4632      	mov	r2, r6
 800d7f4:	463b      	mov	r3, r7
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	460d      	mov	r5, r1
 800d7fa:	f7f2 fd45 	bl	8000288 <__aeabi_dsub>
 800d7fe:	4602      	mov	r2, r0
 800d800:	460b      	mov	r3, r1
 800d802:	4640      	mov	r0, r8
 800d804:	4649      	mov	r1, r9
 800d806:	f7f2 fd3f 	bl	8000288 <__aeabi_dsub>
 800d80a:	9b04      	ldr	r3, [sp, #16]
 800d80c:	9a06      	ldr	r2, [sp, #24]
 800d80e:	3b01      	subs	r3, #1
 800d810:	4313      	orrs	r3, r2
 800d812:	4682      	mov	sl, r0
 800d814:	468b      	mov	fp, r1
 800d816:	f040 81e7 	bne.w	800dbe8 <__ieee754_pow+0x700>
 800d81a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d8d0 <__ieee754_pow+0x3e8>
 800d81e:	eeb0 8a47 	vmov.f32	s16, s14
 800d822:	eef0 8a67 	vmov.f32	s17, s15
 800d826:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d82a:	2600      	movs	r6, #0
 800d82c:	4632      	mov	r2, r6
 800d82e:	463b      	mov	r3, r7
 800d830:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d834:	f7f2 fd28 	bl	8000288 <__aeabi_dsub>
 800d838:	4622      	mov	r2, r4
 800d83a:	462b      	mov	r3, r5
 800d83c:	f7f2 fedc 	bl	80005f8 <__aeabi_dmul>
 800d840:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d844:	4680      	mov	r8, r0
 800d846:	4689      	mov	r9, r1
 800d848:	4650      	mov	r0, sl
 800d84a:	4659      	mov	r1, fp
 800d84c:	f7f2 fed4 	bl	80005f8 <__aeabi_dmul>
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	4640      	mov	r0, r8
 800d856:	4649      	mov	r1, r9
 800d858:	f7f2 fd18 	bl	800028c <__adddf3>
 800d85c:	4632      	mov	r2, r6
 800d85e:	463b      	mov	r3, r7
 800d860:	4680      	mov	r8, r0
 800d862:	4689      	mov	r9, r1
 800d864:	4620      	mov	r0, r4
 800d866:	4629      	mov	r1, r5
 800d868:	f7f2 fec6 	bl	80005f8 <__aeabi_dmul>
 800d86c:	460b      	mov	r3, r1
 800d86e:	4604      	mov	r4, r0
 800d870:	460d      	mov	r5, r1
 800d872:	4602      	mov	r2, r0
 800d874:	4649      	mov	r1, r9
 800d876:	4640      	mov	r0, r8
 800d878:	f7f2 fd08 	bl	800028c <__adddf3>
 800d87c:	4b19      	ldr	r3, [pc, #100]	; (800d8e4 <__ieee754_pow+0x3fc>)
 800d87e:	4299      	cmp	r1, r3
 800d880:	ec45 4b19 	vmov	d9, r4, r5
 800d884:	4606      	mov	r6, r0
 800d886:	460f      	mov	r7, r1
 800d888:	468b      	mov	fp, r1
 800d88a:	f340 82f1 	ble.w	800de70 <__ieee754_pow+0x988>
 800d88e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d892:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d896:	4303      	orrs	r3, r0
 800d898:	f000 81e4 	beq.w	800dc64 <__ieee754_pow+0x77c>
 800d89c:	ec51 0b18 	vmov	r0, r1, d8
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	f7f3 f91a 	bl	8000adc <__aeabi_dcmplt>
 800d8a8:	3800      	subs	r0, #0
 800d8aa:	bf18      	it	ne
 800d8ac:	2001      	movne	r0, #1
 800d8ae:	e72b      	b.n	800d708 <__ieee754_pow+0x220>
 800d8b0:	60000000 	.word	0x60000000
 800d8b4:	3ff71547 	.word	0x3ff71547
 800d8b8:	f85ddf44 	.word	0xf85ddf44
 800d8bc:	3e54ae0b 	.word	0x3e54ae0b
 800d8c0:	55555555 	.word	0x55555555
 800d8c4:	3fd55555 	.word	0x3fd55555
 800d8c8:	652b82fe 	.word	0x652b82fe
 800d8cc:	3ff71547 	.word	0x3ff71547
 800d8d0:	00000000 	.word	0x00000000
 800d8d4:	bff00000 	.word	0xbff00000
 800d8d8:	3ff00000 	.word	0x3ff00000
 800d8dc:	3fd00000 	.word	0x3fd00000
 800d8e0:	3fe00000 	.word	0x3fe00000
 800d8e4:	408fffff 	.word	0x408fffff
 800d8e8:	4bd5      	ldr	r3, [pc, #852]	; (800dc40 <__ieee754_pow+0x758>)
 800d8ea:	402b      	ands	r3, r5
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	b92b      	cbnz	r3, 800d8fc <__ieee754_pow+0x414>
 800d8f0:	4bd4      	ldr	r3, [pc, #848]	; (800dc44 <__ieee754_pow+0x75c>)
 800d8f2:	f7f2 fe81 	bl	80005f8 <__aeabi_dmul>
 800d8f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d8fa:	460c      	mov	r4, r1
 800d8fc:	1523      	asrs	r3, r4, #20
 800d8fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d902:	4413      	add	r3, r2
 800d904:	9305      	str	r3, [sp, #20]
 800d906:	4bd0      	ldr	r3, [pc, #832]	; (800dc48 <__ieee754_pow+0x760>)
 800d908:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d90c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d910:	429c      	cmp	r4, r3
 800d912:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d916:	dd08      	ble.n	800d92a <__ieee754_pow+0x442>
 800d918:	4bcc      	ldr	r3, [pc, #816]	; (800dc4c <__ieee754_pow+0x764>)
 800d91a:	429c      	cmp	r4, r3
 800d91c:	f340 8162 	ble.w	800dbe4 <__ieee754_pow+0x6fc>
 800d920:	9b05      	ldr	r3, [sp, #20]
 800d922:	3301      	adds	r3, #1
 800d924:	9305      	str	r3, [sp, #20]
 800d926:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d92a:	2400      	movs	r4, #0
 800d92c:	00e3      	lsls	r3, r4, #3
 800d92e:	9307      	str	r3, [sp, #28]
 800d930:	4bc7      	ldr	r3, [pc, #796]	; (800dc50 <__ieee754_pow+0x768>)
 800d932:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d936:	ed93 7b00 	vldr	d7, [r3]
 800d93a:	4629      	mov	r1, r5
 800d93c:	ec53 2b17 	vmov	r2, r3, d7
 800d940:	eeb0 9a47 	vmov.f32	s18, s14
 800d944:	eef0 9a67 	vmov.f32	s19, s15
 800d948:	4682      	mov	sl, r0
 800d94a:	f7f2 fc9d 	bl	8000288 <__aeabi_dsub>
 800d94e:	4652      	mov	r2, sl
 800d950:	4606      	mov	r6, r0
 800d952:	460f      	mov	r7, r1
 800d954:	462b      	mov	r3, r5
 800d956:	ec51 0b19 	vmov	r0, r1, d9
 800d95a:	f7f2 fc97 	bl	800028c <__adddf3>
 800d95e:	4602      	mov	r2, r0
 800d960:	460b      	mov	r3, r1
 800d962:	2000      	movs	r0, #0
 800d964:	49bb      	ldr	r1, [pc, #748]	; (800dc54 <__ieee754_pow+0x76c>)
 800d966:	f7f2 ff71 	bl	800084c <__aeabi_ddiv>
 800d96a:	ec41 0b1a 	vmov	d10, r0, r1
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	4630      	mov	r0, r6
 800d974:	4639      	mov	r1, r7
 800d976:	f7f2 fe3f 	bl	80005f8 <__aeabi_dmul>
 800d97a:	2300      	movs	r3, #0
 800d97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d980:	9302      	str	r3, [sp, #8]
 800d982:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d986:	46ab      	mov	fp, r5
 800d988:	106d      	asrs	r5, r5, #1
 800d98a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d98e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d992:	ec41 0b18 	vmov	d8, r0, r1
 800d996:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d99a:	2200      	movs	r2, #0
 800d99c:	4640      	mov	r0, r8
 800d99e:	4649      	mov	r1, r9
 800d9a0:	4614      	mov	r4, r2
 800d9a2:	461d      	mov	r5, r3
 800d9a4:	f7f2 fe28 	bl	80005f8 <__aeabi_dmul>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	4639      	mov	r1, r7
 800d9b0:	f7f2 fc6a 	bl	8000288 <__aeabi_dsub>
 800d9b4:	ec53 2b19 	vmov	r2, r3, d9
 800d9b8:	4606      	mov	r6, r0
 800d9ba:	460f      	mov	r7, r1
 800d9bc:	4620      	mov	r0, r4
 800d9be:	4629      	mov	r1, r5
 800d9c0:	f7f2 fc62 	bl	8000288 <__aeabi_dsub>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	4650      	mov	r0, sl
 800d9ca:	4659      	mov	r1, fp
 800d9cc:	f7f2 fc5c 	bl	8000288 <__aeabi_dsub>
 800d9d0:	4642      	mov	r2, r8
 800d9d2:	464b      	mov	r3, r9
 800d9d4:	f7f2 fe10 	bl	80005f8 <__aeabi_dmul>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	460b      	mov	r3, r1
 800d9dc:	4630      	mov	r0, r6
 800d9de:	4639      	mov	r1, r7
 800d9e0:	f7f2 fc52 	bl	8000288 <__aeabi_dsub>
 800d9e4:	ec53 2b1a 	vmov	r2, r3, d10
 800d9e8:	f7f2 fe06 	bl	80005f8 <__aeabi_dmul>
 800d9ec:	ec53 2b18 	vmov	r2, r3, d8
 800d9f0:	ec41 0b19 	vmov	d9, r0, r1
 800d9f4:	ec51 0b18 	vmov	r0, r1, d8
 800d9f8:	f7f2 fdfe 	bl	80005f8 <__aeabi_dmul>
 800d9fc:	a37c      	add	r3, pc, #496	; (adr r3, 800dbf0 <__ieee754_pow+0x708>)
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	4604      	mov	r4, r0
 800da04:	460d      	mov	r5, r1
 800da06:	f7f2 fdf7 	bl	80005f8 <__aeabi_dmul>
 800da0a:	a37b      	add	r3, pc, #492	; (adr r3, 800dbf8 <__ieee754_pow+0x710>)
 800da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da10:	f7f2 fc3c 	bl	800028c <__adddf3>
 800da14:	4622      	mov	r2, r4
 800da16:	462b      	mov	r3, r5
 800da18:	f7f2 fdee 	bl	80005f8 <__aeabi_dmul>
 800da1c:	a378      	add	r3, pc, #480	; (adr r3, 800dc00 <__ieee754_pow+0x718>)
 800da1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da22:	f7f2 fc33 	bl	800028c <__adddf3>
 800da26:	4622      	mov	r2, r4
 800da28:	462b      	mov	r3, r5
 800da2a:	f7f2 fde5 	bl	80005f8 <__aeabi_dmul>
 800da2e:	a376      	add	r3, pc, #472	; (adr r3, 800dc08 <__ieee754_pow+0x720>)
 800da30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da34:	f7f2 fc2a 	bl	800028c <__adddf3>
 800da38:	4622      	mov	r2, r4
 800da3a:	462b      	mov	r3, r5
 800da3c:	f7f2 fddc 	bl	80005f8 <__aeabi_dmul>
 800da40:	a373      	add	r3, pc, #460	; (adr r3, 800dc10 <__ieee754_pow+0x728>)
 800da42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da46:	f7f2 fc21 	bl	800028c <__adddf3>
 800da4a:	4622      	mov	r2, r4
 800da4c:	462b      	mov	r3, r5
 800da4e:	f7f2 fdd3 	bl	80005f8 <__aeabi_dmul>
 800da52:	a371      	add	r3, pc, #452	; (adr r3, 800dc18 <__ieee754_pow+0x730>)
 800da54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da58:	f7f2 fc18 	bl	800028c <__adddf3>
 800da5c:	4622      	mov	r2, r4
 800da5e:	4606      	mov	r6, r0
 800da60:	460f      	mov	r7, r1
 800da62:	462b      	mov	r3, r5
 800da64:	4620      	mov	r0, r4
 800da66:	4629      	mov	r1, r5
 800da68:	f7f2 fdc6 	bl	80005f8 <__aeabi_dmul>
 800da6c:	4602      	mov	r2, r0
 800da6e:	460b      	mov	r3, r1
 800da70:	4630      	mov	r0, r6
 800da72:	4639      	mov	r1, r7
 800da74:	f7f2 fdc0 	bl	80005f8 <__aeabi_dmul>
 800da78:	4642      	mov	r2, r8
 800da7a:	4604      	mov	r4, r0
 800da7c:	460d      	mov	r5, r1
 800da7e:	464b      	mov	r3, r9
 800da80:	ec51 0b18 	vmov	r0, r1, d8
 800da84:	f7f2 fc02 	bl	800028c <__adddf3>
 800da88:	ec53 2b19 	vmov	r2, r3, d9
 800da8c:	f7f2 fdb4 	bl	80005f8 <__aeabi_dmul>
 800da90:	4622      	mov	r2, r4
 800da92:	462b      	mov	r3, r5
 800da94:	f7f2 fbfa 	bl	800028c <__adddf3>
 800da98:	4642      	mov	r2, r8
 800da9a:	4682      	mov	sl, r0
 800da9c:	468b      	mov	fp, r1
 800da9e:	464b      	mov	r3, r9
 800daa0:	4640      	mov	r0, r8
 800daa2:	4649      	mov	r1, r9
 800daa4:	f7f2 fda8 	bl	80005f8 <__aeabi_dmul>
 800daa8:	4b6b      	ldr	r3, [pc, #428]	; (800dc58 <__ieee754_pow+0x770>)
 800daaa:	2200      	movs	r2, #0
 800daac:	4606      	mov	r6, r0
 800daae:	460f      	mov	r7, r1
 800dab0:	f7f2 fbec 	bl	800028c <__adddf3>
 800dab4:	4652      	mov	r2, sl
 800dab6:	465b      	mov	r3, fp
 800dab8:	f7f2 fbe8 	bl	800028c <__adddf3>
 800dabc:	2000      	movs	r0, #0
 800dabe:	4604      	mov	r4, r0
 800dac0:	460d      	mov	r5, r1
 800dac2:	4602      	mov	r2, r0
 800dac4:	460b      	mov	r3, r1
 800dac6:	4640      	mov	r0, r8
 800dac8:	4649      	mov	r1, r9
 800daca:	f7f2 fd95 	bl	80005f8 <__aeabi_dmul>
 800dace:	4b62      	ldr	r3, [pc, #392]	; (800dc58 <__ieee754_pow+0x770>)
 800dad0:	4680      	mov	r8, r0
 800dad2:	4689      	mov	r9, r1
 800dad4:	2200      	movs	r2, #0
 800dad6:	4620      	mov	r0, r4
 800dad8:	4629      	mov	r1, r5
 800dada:	f7f2 fbd5 	bl	8000288 <__aeabi_dsub>
 800dade:	4632      	mov	r2, r6
 800dae0:	463b      	mov	r3, r7
 800dae2:	f7f2 fbd1 	bl	8000288 <__aeabi_dsub>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	4650      	mov	r0, sl
 800daec:	4659      	mov	r1, fp
 800daee:	f7f2 fbcb 	bl	8000288 <__aeabi_dsub>
 800daf2:	ec53 2b18 	vmov	r2, r3, d8
 800daf6:	f7f2 fd7f 	bl	80005f8 <__aeabi_dmul>
 800dafa:	4622      	mov	r2, r4
 800dafc:	4606      	mov	r6, r0
 800dafe:	460f      	mov	r7, r1
 800db00:	462b      	mov	r3, r5
 800db02:	ec51 0b19 	vmov	r0, r1, d9
 800db06:	f7f2 fd77 	bl	80005f8 <__aeabi_dmul>
 800db0a:	4602      	mov	r2, r0
 800db0c:	460b      	mov	r3, r1
 800db0e:	4630      	mov	r0, r6
 800db10:	4639      	mov	r1, r7
 800db12:	f7f2 fbbb 	bl	800028c <__adddf3>
 800db16:	4606      	mov	r6, r0
 800db18:	460f      	mov	r7, r1
 800db1a:	4602      	mov	r2, r0
 800db1c:	460b      	mov	r3, r1
 800db1e:	4640      	mov	r0, r8
 800db20:	4649      	mov	r1, r9
 800db22:	f7f2 fbb3 	bl	800028c <__adddf3>
 800db26:	a33e      	add	r3, pc, #248	; (adr r3, 800dc20 <__ieee754_pow+0x738>)
 800db28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2c:	2000      	movs	r0, #0
 800db2e:	4604      	mov	r4, r0
 800db30:	460d      	mov	r5, r1
 800db32:	f7f2 fd61 	bl	80005f8 <__aeabi_dmul>
 800db36:	4642      	mov	r2, r8
 800db38:	ec41 0b18 	vmov	d8, r0, r1
 800db3c:	464b      	mov	r3, r9
 800db3e:	4620      	mov	r0, r4
 800db40:	4629      	mov	r1, r5
 800db42:	f7f2 fba1 	bl	8000288 <__aeabi_dsub>
 800db46:	4602      	mov	r2, r0
 800db48:	460b      	mov	r3, r1
 800db4a:	4630      	mov	r0, r6
 800db4c:	4639      	mov	r1, r7
 800db4e:	f7f2 fb9b 	bl	8000288 <__aeabi_dsub>
 800db52:	a335      	add	r3, pc, #212	; (adr r3, 800dc28 <__ieee754_pow+0x740>)
 800db54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db58:	f7f2 fd4e 	bl	80005f8 <__aeabi_dmul>
 800db5c:	a334      	add	r3, pc, #208	; (adr r3, 800dc30 <__ieee754_pow+0x748>)
 800db5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db62:	4606      	mov	r6, r0
 800db64:	460f      	mov	r7, r1
 800db66:	4620      	mov	r0, r4
 800db68:	4629      	mov	r1, r5
 800db6a:	f7f2 fd45 	bl	80005f8 <__aeabi_dmul>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4630      	mov	r0, r6
 800db74:	4639      	mov	r1, r7
 800db76:	f7f2 fb89 	bl	800028c <__adddf3>
 800db7a:	9a07      	ldr	r2, [sp, #28]
 800db7c:	4b37      	ldr	r3, [pc, #220]	; (800dc5c <__ieee754_pow+0x774>)
 800db7e:	4413      	add	r3, r2
 800db80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db84:	f7f2 fb82 	bl	800028c <__adddf3>
 800db88:	4682      	mov	sl, r0
 800db8a:	9805      	ldr	r0, [sp, #20]
 800db8c:	468b      	mov	fp, r1
 800db8e:	f7f2 fcc9 	bl	8000524 <__aeabi_i2d>
 800db92:	9a07      	ldr	r2, [sp, #28]
 800db94:	4b32      	ldr	r3, [pc, #200]	; (800dc60 <__ieee754_pow+0x778>)
 800db96:	4413      	add	r3, r2
 800db98:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db9c:	4606      	mov	r6, r0
 800db9e:	460f      	mov	r7, r1
 800dba0:	4652      	mov	r2, sl
 800dba2:	465b      	mov	r3, fp
 800dba4:	ec51 0b18 	vmov	r0, r1, d8
 800dba8:	f7f2 fb70 	bl	800028c <__adddf3>
 800dbac:	4642      	mov	r2, r8
 800dbae:	464b      	mov	r3, r9
 800dbb0:	f7f2 fb6c 	bl	800028c <__adddf3>
 800dbb4:	4632      	mov	r2, r6
 800dbb6:	463b      	mov	r3, r7
 800dbb8:	f7f2 fb68 	bl	800028c <__adddf3>
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	4632      	mov	r2, r6
 800dbc0:	463b      	mov	r3, r7
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	460d      	mov	r5, r1
 800dbc6:	f7f2 fb5f 	bl	8000288 <__aeabi_dsub>
 800dbca:	4642      	mov	r2, r8
 800dbcc:	464b      	mov	r3, r9
 800dbce:	f7f2 fb5b 	bl	8000288 <__aeabi_dsub>
 800dbd2:	ec53 2b18 	vmov	r2, r3, d8
 800dbd6:	f7f2 fb57 	bl	8000288 <__aeabi_dsub>
 800dbda:	4602      	mov	r2, r0
 800dbdc:	460b      	mov	r3, r1
 800dbde:	4650      	mov	r0, sl
 800dbe0:	4659      	mov	r1, fp
 800dbe2:	e610      	b.n	800d806 <__ieee754_pow+0x31e>
 800dbe4:	2401      	movs	r4, #1
 800dbe6:	e6a1      	b.n	800d92c <__ieee754_pow+0x444>
 800dbe8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800dc38 <__ieee754_pow+0x750>
 800dbec:	e617      	b.n	800d81e <__ieee754_pow+0x336>
 800dbee:	bf00      	nop
 800dbf0:	4a454eef 	.word	0x4a454eef
 800dbf4:	3fca7e28 	.word	0x3fca7e28
 800dbf8:	93c9db65 	.word	0x93c9db65
 800dbfc:	3fcd864a 	.word	0x3fcd864a
 800dc00:	a91d4101 	.word	0xa91d4101
 800dc04:	3fd17460 	.word	0x3fd17460
 800dc08:	518f264d 	.word	0x518f264d
 800dc0c:	3fd55555 	.word	0x3fd55555
 800dc10:	db6fabff 	.word	0xdb6fabff
 800dc14:	3fdb6db6 	.word	0x3fdb6db6
 800dc18:	33333303 	.word	0x33333303
 800dc1c:	3fe33333 	.word	0x3fe33333
 800dc20:	e0000000 	.word	0xe0000000
 800dc24:	3feec709 	.word	0x3feec709
 800dc28:	dc3a03fd 	.word	0xdc3a03fd
 800dc2c:	3feec709 	.word	0x3feec709
 800dc30:	145b01f5 	.word	0x145b01f5
 800dc34:	be3e2fe0 	.word	0xbe3e2fe0
 800dc38:	00000000 	.word	0x00000000
 800dc3c:	3ff00000 	.word	0x3ff00000
 800dc40:	7ff00000 	.word	0x7ff00000
 800dc44:	43400000 	.word	0x43400000
 800dc48:	0003988e 	.word	0x0003988e
 800dc4c:	000bb679 	.word	0x000bb679
 800dc50:	0800f850 	.word	0x0800f850
 800dc54:	3ff00000 	.word	0x3ff00000
 800dc58:	40080000 	.word	0x40080000
 800dc5c:	0800f870 	.word	0x0800f870
 800dc60:	0800f860 	.word	0x0800f860
 800dc64:	a3b5      	add	r3, pc, #724	; (adr r3, 800df3c <__ieee754_pow+0xa54>)
 800dc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6a:	4640      	mov	r0, r8
 800dc6c:	4649      	mov	r1, r9
 800dc6e:	f7f2 fb0d 	bl	800028c <__adddf3>
 800dc72:	4622      	mov	r2, r4
 800dc74:	ec41 0b1a 	vmov	d10, r0, r1
 800dc78:	462b      	mov	r3, r5
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	4639      	mov	r1, r7
 800dc7e:	f7f2 fb03 	bl	8000288 <__aeabi_dsub>
 800dc82:	4602      	mov	r2, r0
 800dc84:	460b      	mov	r3, r1
 800dc86:	ec51 0b1a 	vmov	r0, r1, d10
 800dc8a:	f7f2 ff45 	bl	8000b18 <__aeabi_dcmpgt>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	f47f ae04 	bne.w	800d89c <__ieee754_pow+0x3b4>
 800dc94:	4aa4      	ldr	r2, [pc, #656]	; (800df28 <__ieee754_pow+0xa40>)
 800dc96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	f340 8108 	ble.w	800deb0 <__ieee754_pow+0x9c8>
 800dca0:	151b      	asrs	r3, r3, #20
 800dca2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dca6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dcaa:	fa4a f303 	asr.w	r3, sl, r3
 800dcae:	445b      	add	r3, fp
 800dcb0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dcb4:	4e9d      	ldr	r6, [pc, #628]	; (800df2c <__ieee754_pow+0xa44>)
 800dcb6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dcba:	4116      	asrs	r6, r2
 800dcbc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	ea23 0106 	bic.w	r1, r3, r6
 800dcc6:	f1c2 0214 	rsb	r2, r2, #20
 800dcca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dcce:	fa4a fa02 	asr.w	sl, sl, r2
 800dcd2:	f1bb 0f00 	cmp.w	fp, #0
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	460b      	mov	r3, r1
 800dcda:	4620      	mov	r0, r4
 800dcdc:	4629      	mov	r1, r5
 800dcde:	bfb8      	it	lt
 800dce0:	f1ca 0a00 	rsblt	sl, sl, #0
 800dce4:	f7f2 fad0 	bl	8000288 <__aeabi_dsub>
 800dce8:	ec41 0b19 	vmov	d9, r0, r1
 800dcec:	4642      	mov	r2, r8
 800dcee:	464b      	mov	r3, r9
 800dcf0:	ec51 0b19 	vmov	r0, r1, d9
 800dcf4:	f7f2 faca 	bl	800028c <__adddf3>
 800dcf8:	a37b      	add	r3, pc, #492	; (adr r3, 800dee8 <__ieee754_pow+0xa00>)
 800dcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfe:	2000      	movs	r0, #0
 800dd00:	4604      	mov	r4, r0
 800dd02:	460d      	mov	r5, r1
 800dd04:	f7f2 fc78 	bl	80005f8 <__aeabi_dmul>
 800dd08:	ec53 2b19 	vmov	r2, r3, d9
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	460f      	mov	r7, r1
 800dd10:	4620      	mov	r0, r4
 800dd12:	4629      	mov	r1, r5
 800dd14:	f7f2 fab8 	bl	8000288 <__aeabi_dsub>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	4640      	mov	r0, r8
 800dd1e:	4649      	mov	r1, r9
 800dd20:	f7f2 fab2 	bl	8000288 <__aeabi_dsub>
 800dd24:	a372      	add	r3, pc, #456	; (adr r3, 800def0 <__ieee754_pow+0xa08>)
 800dd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2a:	f7f2 fc65 	bl	80005f8 <__aeabi_dmul>
 800dd2e:	a372      	add	r3, pc, #456	; (adr r3, 800def8 <__ieee754_pow+0xa10>)
 800dd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd34:	4680      	mov	r8, r0
 800dd36:	4689      	mov	r9, r1
 800dd38:	4620      	mov	r0, r4
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	f7f2 fc5c 	bl	80005f8 <__aeabi_dmul>
 800dd40:	4602      	mov	r2, r0
 800dd42:	460b      	mov	r3, r1
 800dd44:	4640      	mov	r0, r8
 800dd46:	4649      	mov	r1, r9
 800dd48:	f7f2 faa0 	bl	800028c <__adddf3>
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	460d      	mov	r5, r1
 800dd50:	4602      	mov	r2, r0
 800dd52:	460b      	mov	r3, r1
 800dd54:	4630      	mov	r0, r6
 800dd56:	4639      	mov	r1, r7
 800dd58:	f7f2 fa98 	bl	800028c <__adddf3>
 800dd5c:	4632      	mov	r2, r6
 800dd5e:	463b      	mov	r3, r7
 800dd60:	4680      	mov	r8, r0
 800dd62:	4689      	mov	r9, r1
 800dd64:	f7f2 fa90 	bl	8000288 <__aeabi_dsub>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	4629      	mov	r1, r5
 800dd70:	f7f2 fa8a 	bl	8000288 <__aeabi_dsub>
 800dd74:	4642      	mov	r2, r8
 800dd76:	4606      	mov	r6, r0
 800dd78:	460f      	mov	r7, r1
 800dd7a:	464b      	mov	r3, r9
 800dd7c:	4640      	mov	r0, r8
 800dd7e:	4649      	mov	r1, r9
 800dd80:	f7f2 fc3a 	bl	80005f8 <__aeabi_dmul>
 800dd84:	a35e      	add	r3, pc, #376	; (adr r3, 800df00 <__ieee754_pow+0xa18>)
 800dd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	460d      	mov	r5, r1
 800dd8e:	f7f2 fc33 	bl	80005f8 <__aeabi_dmul>
 800dd92:	a35d      	add	r3, pc, #372	; (adr r3, 800df08 <__ieee754_pow+0xa20>)
 800dd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd98:	f7f2 fa76 	bl	8000288 <__aeabi_dsub>
 800dd9c:	4622      	mov	r2, r4
 800dd9e:	462b      	mov	r3, r5
 800dda0:	f7f2 fc2a 	bl	80005f8 <__aeabi_dmul>
 800dda4:	a35a      	add	r3, pc, #360	; (adr r3, 800df10 <__ieee754_pow+0xa28>)
 800dda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddaa:	f7f2 fa6f 	bl	800028c <__adddf3>
 800ddae:	4622      	mov	r2, r4
 800ddb0:	462b      	mov	r3, r5
 800ddb2:	f7f2 fc21 	bl	80005f8 <__aeabi_dmul>
 800ddb6:	a358      	add	r3, pc, #352	; (adr r3, 800df18 <__ieee754_pow+0xa30>)
 800ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbc:	f7f2 fa64 	bl	8000288 <__aeabi_dsub>
 800ddc0:	4622      	mov	r2, r4
 800ddc2:	462b      	mov	r3, r5
 800ddc4:	f7f2 fc18 	bl	80005f8 <__aeabi_dmul>
 800ddc8:	a355      	add	r3, pc, #340	; (adr r3, 800df20 <__ieee754_pow+0xa38>)
 800ddca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddce:	f7f2 fa5d 	bl	800028c <__adddf3>
 800ddd2:	4622      	mov	r2, r4
 800ddd4:	462b      	mov	r3, r5
 800ddd6:	f7f2 fc0f 	bl	80005f8 <__aeabi_dmul>
 800ddda:	4602      	mov	r2, r0
 800dddc:	460b      	mov	r3, r1
 800ddde:	4640      	mov	r0, r8
 800dde0:	4649      	mov	r1, r9
 800dde2:	f7f2 fa51 	bl	8000288 <__aeabi_dsub>
 800dde6:	4604      	mov	r4, r0
 800dde8:	460d      	mov	r5, r1
 800ddea:	4602      	mov	r2, r0
 800ddec:	460b      	mov	r3, r1
 800ddee:	4640      	mov	r0, r8
 800ddf0:	4649      	mov	r1, r9
 800ddf2:	f7f2 fc01 	bl	80005f8 <__aeabi_dmul>
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	ec41 0b19 	vmov	d9, r0, r1
 800ddfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de00:	4620      	mov	r0, r4
 800de02:	4629      	mov	r1, r5
 800de04:	f7f2 fa40 	bl	8000288 <__aeabi_dsub>
 800de08:	4602      	mov	r2, r0
 800de0a:	460b      	mov	r3, r1
 800de0c:	ec51 0b19 	vmov	r0, r1, d9
 800de10:	f7f2 fd1c 	bl	800084c <__aeabi_ddiv>
 800de14:	4632      	mov	r2, r6
 800de16:	4604      	mov	r4, r0
 800de18:	460d      	mov	r5, r1
 800de1a:	463b      	mov	r3, r7
 800de1c:	4640      	mov	r0, r8
 800de1e:	4649      	mov	r1, r9
 800de20:	f7f2 fbea 	bl	80005f8 <__aeabi_dmul>
 800de24:	4632      	mov	r2, r6
 800de26:	463b      	mov	r3, r7
 800de28:	f7f2 fa30 	bl	800028c <__adddf3>
 800de2c:	4602      	mov	r2, r0
 800de2e:	460b      	mov	r3, r1
 800de30:	4620      	mov	r0, r4
 800de32:	4629      	mov	r1, r5
 800de34:	f7f2 fa28 	bl	8000288 <__aeabi_dsub>
 800de38:	4642      	mov	r2, r8
 800de3a:	464b      	mov	r3, r9
 800de3c:	f7f2 fa24 	bl	8000288 <__aeabi_dsub>
 800de40:	460b      	mov	r3, r1
 800de42:	4602      	mov	r2, r0
 800de44:	493a      	ldr	r1, [pc, #232]	; (800df30 <__ieee754_pow+0xa48>)
 800de46:	2000      	movs	r0, #0
 800de48:	f7f2 fa1e 	bl	8000288 <__aeabi_dsub>
 800de4c:	ec41 0b10 	vmov	d0, r0, r1
 800de50:	ee10 3a90 	vmov	r3, s1
 800de54:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800de58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de5c:	da2b      	bge.n	800deb6 <__ieee754_pow+0x9ce>
 800de5e:	4650      	mov	r0, sl
 800de60:	f001 f8ce 	bl	800f000 <scalbn>
 800de64:	ec51 0b10 	vmov	r0, r1, d0
 800de68:	ec53 2b18 	vmov	r2, r3, d8
 800de6c:	f7ff bbed 	b.w	800d64a <__ieee754_pow+0x162>
 800de70:	4b30      	ldr	r3, [pc, #192]	; (800df34 <__ieee754_pow+0xa4c>)
 800de72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800de76:	429e      	cmp	r6, r3
 800de78:	f77f af0c 	ble.w	800dc94 <__ieee754_pow+0x7ac>
 800de7c:	4b2e      	ldr	r3, [pc, #184]	; (800df38 <__ieee754_pow+0xa50>)
 800de7e:	440b      	add	r3, r1
 800de80:	4303      	orrs	r3, r0
 800de82:	d009      	beq.n	800de98 <__ieee754_pow+0x9b0>
 800de84:	ec51 0b18 	vmov	r0, r1, d8
 800de88:	2200      	movs	r2, #0
 800de8a:	2300      	movs	r3, #0
 800de8c:	f7f2 fe26 	bl	8000adc <__aeabi_dcmplt>
 800de90:	3800      	subs	r0, #0
 800de92:	bf18      	it	ne
 800de94:	2001      	movne	r0, #1
 800de96:	e447      	b.n	800d728 <__ieee754_pow+0x240>
 800de98:	4622      	mov	r2, r4
 800de9a:	462b      	mov	r3, r5
 800de9c:	f7f2 f9f4 	bl	8000288 <__aeabi_dsub>
 800dea0:	4642      	mov	r2, r8
 800dea2:	464b      	mov	r3, r9
 800dea4:	f7f2 fe2e 	bl	8000b04 <__aeabi_dcmpge>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	f43f aef3 	beq.w	800dc94 <__ieee754_pow+0x7ac>
 800deae:	e7e9      	b.n	800de84 <__ieee754_pow+0x99c>
 800deb0:	f04f 0a00 	mov.w	sl, #0
 800deb4:	e71a      	b.n	800dcec <__ieee754_pow+0x804>
 800deb6:	ec51 0b10 	vmov	r0, r1, d0
 800deba:	4619      	mov	r1, r3
 800debc:	e7d4      	b.n	800de68 <__ieee754_pow+0x980>
 800debe:	491c      	ldr	r1, [pc, #112]	; (800df30 <__ieee754_pow+0xa48>)
 800dec0:	2000      	movs	r0, #0
 800dec2:	f7ff bb30 	b.w	800d526 <__ieee754_pow+0x3e>
 800dec6:	2000      	movs	r0, #0
 800dec8:	2100      	movs	r1, #0
 800deca:	f7ff bb2c 	b.w	800d526 <__ieee754_pow+0x3e>
 800dece:	4630      	mov	r0, r6
 800ded0:	4639      	mov	r1, r7
 800ded2:	f7ff bb28 	b.w	800d526 <__ieee754_pow+0x3e>
 800ded6:	9204      	str	r2, [sp, #16]
 800ded8:	f7ff bb7a 	b.w	800d5d0 <__ieee754_pow+0xe8>
 800dedc:	2300      	movs	r3, #0
 800dede:	f7ff bb64 	b.w	800d5aa <__ieee754_pow+0xc2>
 800dee2:	bf00      	nop
 800dee4:	f3af 8000 	nop.w
 800dee8:	00000000 	.word	0x00000000
 800deec:	3fe62e43 	.word	0x3fe62e43
 800def0:	fefa39ef 	.word	0xfefa39ef
 800def4:	3fe62e42 	.word	0x3fe62e42
 800def8:	0ca86c39 	.word	0x0ca86c39
 800defc:	be205c61 	.word	0xbe205c61
 800df00:	72bea4d0 	.word	0x72bea4d0
 800df04:	3e663769 	.word	0x3e663769
 800df08:	c5d26bf1 	.word	0xc5d26bf1
 800df0c:	3ebbbd41 	.word	0x3ebbbd41
 800df10:	af25de2c 	.word	0xaf25de2c
 800df14:	3f11566a 	.word	0x3f11566a
 800df18:	16bebd93 	.word	0x16bebd93
 800df1c:	3f66c16c 	.word	0x3f66c16c
 800df20:	5555553e 	.word	0x5555553e
 800df24:	3fc55555 	.word	0x3fc55555
 800df28:	3fe00000 	.word	0x3fe00000
 800df2c:	000fffff 	.word	0x000fffff
 800df30:	3ff00000 	.word	0x3ff00000
 800df34:	4090cbff 	.word	0x4090cbff
 800df38:	3f6f3400 	.word	0x3f6f3400
 800df3c:	652b82fe 	.word	0x652b82fe
 800df40:	3c971547 	.word	0x3c971547
 800df44:	00000000 	.word	0x00000000

0800df48 <__ieee754_rem_pio2>:
 800df48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df4c:	ed2d 8b02 	vpush	{d8}
 800df50:	ec55 4b10 	vmov	r4, r5, d0
 800df54:	4bca      	ldr	r3, [pc, #808]	; (800e280 <__ieee754_rem_pio2+0x338>)
 800df56:	b08b      	sub	sp, #44	; 0x2c
 800df58:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800df5c:	4598      	cmp	r8, r3
 800df5e:	4682      	mov	sl, r0
 800df60:	9502      	str	r5, [sp, #8]
 800df62:	dc08      	bgt.n	800df76 <__ieee754_rem_pio2+0x2e>
 800df64:	2200      	movs	r2, #0
 800df66:	2300      	movs	r3, #0
 800df68:	ed80 0b00 	vstr	d0, [r0]
 800df6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800df70:	f04f 0b00 	mov.w	fp, #0
 800df74:	e028      	b.n	800dfc8 <__ieee754_rem_pio2+0x80>
 800df76:	4bc3      	ldr	r3, [pc, #780]	; (800e284 <__ieee754_rem_pio2+0x33c>)
 800df78:	4598      	cmp	r8, r3
 800df7a:	dc78      	bgt.n	800e06e <__ieee754_rem_pio2+0x126>
 800df7c:	9b02      	ldr	r3, [sp, #8]
 800df7e:	4ec2      	ldr	r6, [pc, #776]	; (800e288 <__ieee754_rem_pio2+0x340>)
 800df80:	2b00      	cmp	r3, #0
 800df82:	ee10 0a10 	vmov	r0, s0
 800df86:	a3b0      	add	r3, pc, #704	; (adr r3, 800e248 <__ieee754_rem_pio2+0x300>)
 800df88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8c:	4629      	mov	r1, r5
 800df8e:	dd39      	ble.n	800e004 <__ieee754_rem_pio2+0xbc>
 800df90:	f7f2 f97a 	bl	8000288 <__aeabi_dsub>
 800df94:	45b0      	cmp	r8, r6
 800df96:	4604      	mov	r4, r0
 800df98:	460d      	mov	r5, r1
 800df9a:	d01b      	beq.n	800dfd4 <__ieee754_rem_pio2+0x8c>
 800df9c:	a3ac      	add	r3, pc, #688	; (adr r3, 800e250 <__ieee754_rem_pio2+0x308>)
 800df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa2:	f7f2 f971 	bl	8000288 <__aeabi_dsub>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	e9ca 2300 	strd	r2, r3, [sl]
 800dfae:	4620      	mov	r0, r4
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	f7f2 f969 	bl	8000288 <__aeabi_dsub>
 800dfb6:	a3a6      	add	r3, pc, #664	; (adr r3, 800e250 <__ieee754_rem_pio2+0x308>)
 800dfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbc:	f7f2 f964 	bl	8000288 <__aeabi_dsub>
 800dfc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dfc4:	f04f 0b01 	mov.w	fp, #1
 800dfc8:	4658      	mov	r0, fp
 800dfca:	b00b      	add	sp, #44	; 0x2c
 800dfcc:	ecbd 8b02 	vpop	{d8}
 800dfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd4:	a3a0      	add	r3, pc, #640	; (adr r3, 800e258 <__ieee754_rem_pio2+0x310>)
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	f7f2 f955 	bl	8000288 <__aeabi_dsub>
 800dfde:	a3a0      	add	r3, pc, #640	; (adr r3, 800e260 <__ieee754_rem_pio2+0x318>)
 800dfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe4:	4604      	mov	r4, r0
 800dfe6:	460d      	mov	r5, r1
 800dfe8:	f7f2 f94e 	bl	8000288 <__aeabi_dsub>
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	e9ca 2300 	strd	r2, r3, [sl]
 800dff4:	4620      	mov	r0, r4
 800dff6:	4629      	mov	r1, r5
 800dff8:	f7f2 f946 	bl	8000288 <__aeabi_dsub>
 800dffc:	a398      	add	r3, pc, #608	; (adr r3, 800e260 <__ieee754_rem_pio2+0x318>)
 800dffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e002:	e7db      	b.n	800dfbc <__ieee754_rem_pio2+0x74>
 800e004:	f7f2 f942 	bl	800028c <__adddf3>
 800e008:	45b0      	cmp	r8, r6
 800e00a:	4604      	mov	r4, r0
 800e00c:	460d      	mov	r5, r1
 800e00e:	d016      	beq.n	800e03e <__ieee754_rem_pio2+0xf6>
 800e010:	a38f      	add	r3, pc, #572	; (adr r3, 800e250 <__ieee754_rem_pio2+0x308>)
 800e012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e016:	f7f2 f939 	bl	800028c <__adddf3>
 800e01a:	4602      	mov	r2, r0
 800e01c:	460b      	mov	r3, r1
 800e01e:	e9ca 2300 	strd	r2, r3, [sl]
 800e022:	4620      	mov	r0, r4
 800e024:	4629      	mov	r1, r5
 800e026:	f7f2 f92f 	bl	8000288 <__aeabi_dsub>
 800e02a:	a389      	add	r3, pc, #548	; (adr r3, 800e250 <__ieee754_rem_pio2+0x308>)
 800e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e030:	f7f2 f92c 	bl	800028c <__adddf3>
 800e034:	f04f 3bff 	mov.w	fp, #4294967295
 800e038:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e03c:	e7c4      	b.n	800dfc8 <__ieee754_rem_pio2+0x80>
 800e03e:	a386      	add	r3, pc, #536	; (adr r3, 800e258 <__ieee754_rem_pio2+0x310>)
 800e040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e044:	f7f2 f922 	bl	800028c <__adddf3>
 800e048:	a385      	add	r3, pc, #532	; (adr r3, 800e260 <__ieee754_rem_pio2+0x318>)
 800e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04e:	4604      	mov	r4, r0
 800e050:	460d      	mov	r5, r1
 800e052:	f7f2 f91b 	bl	800028c <__adddf3>
 800e056:	4602      	mov	r2, r0
 800e058:	460b      	mov	r3, r1
 800e05a:	e9ca 2300 	strd	r2, r3, [sl]
 800e05e:	4620      	mov	r0, r4
 800e060:	4629      	mov	r1, r5
 800e062:	f7f2 f911 	bl	8000288 <__aeabi_dsub>
 800e066:	a37e      	add	r3, pc, #504	; (adr r3, 800e260 <__ieee754_rem_pio2+0x318>)
 800e068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06c:	e7e0      	b.n	800e030 <__ieee754_rem_pio2+0xe8>
 800e06e:	4b87      	ldr	r3, [pc, #540]	; (800e28c <__ieee754_rem_pio2+0x344>)
 800e070:	4598      	cmp	r8, r3
 800e072:	f300 80d9 	bgt.w	800e228 <__ieee754_rem_pio2+0x2e0>
 800e076:	f000 ff2d 	bl	800eed4 <fabs>
 800e07a:	ec55 4b10 	vmov	r4, r5, d0
 800e07e:	ee10 0a10 	vmov	r0, s0
 800e082:	a379      	add	r3, pc, #484	; (adr r3, 800e268 <__ieee754_rem_pio2+0x320>)
 800e084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e088:	4629      	mov	r1, r5
 800e08a:	f7f2 fab5 	bl	80005f8 <__aeabi_dmul>
 800e08e:	4b80      	ldr	r3, [pc, #512]	; (800e290 <__ieee754_rem_pio2+0x348>)
 800e090:	2200      	movs	r2, #0
 800e092:	f7f2 f8fb 	bl	800028c <__adddf3>
 800e096:	f7f2 fd5f 	bl	8000b58 <__aeabi_d2iz>
 800e09a:	4683      	mov	fp, r0
 800e09c:	f7f2 fa42 	bl	8000524 <__aeabi_i2d>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	ec43 2b18 	vmov	d8, r2, r3
 800e0a8:	a367      	add	r3, pc, #412	; (adr r3, 800e248 <__ieee754_rem_pio2+0x300>)
 800e0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ae:	f7f2 faa3 	bl	80005f8 <__aeabi_dmul>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	4629      	mov	r1, r5
 800e0ba:	f7f2 f8e5 	bl	8000288 <__aeabi_dsub>
 800e0be:	a364      	add	r3, pc, #400	; (adr r3, 800e250 <__ieee754_rem_pio2+0x308>)
 800e0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c4:	4606      	mov	r6, r0
 800e0c6:	460f      	mov	r7, r1
 800e0c8:	ec51 0b18 	vmov	r0, r1, d8
 800e0cc:	f7f2 fa94 	bl	80005f8 <__aeabi_dmul>
 800e0d0:	f1bb 0f1f 	cmp.w	fp, #31
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	460d      	mov	r5, r1
 800e0d8:	dc0d      	bgt.n	800e0f6 <__ieee754_rem_pio2+0x1ae>
 800e0da:	4b6e      	ldr	r3, [pc, #440]	; (800e294 <__ieee754_rem_pio2+0x34c>)
 800e0dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0e4:	4543      	cmp	r3, r8
 800e0e6:	d006      	beq.n	800e0f6 <__ieee754_rem_pio2+0x1ae>
 800e0e8:	4622      	mov	r2, r4
 800e0ea:	462b      	mov	r3, r5
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	4639      	mov	r1, r7
 800e0f0:	f7f2 f8ca 	bl	8000288 <__aeabi_dsub>
 800e0f4:	e00f      	b.n	800e116 <__ieee754_rem_pio2+0x1ce>
 800e0f6:	462b      	mov	r3, r5
 800e0f8:	4622      	mov	r2, r4
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	4639      	mov	r1, r7
 800e0fe:	f7f2 f8c3 	bl	8000288 <__aeabi_dsub>
 800e102:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e106:	9303      	str	r3, [sp, #12]
 800e108:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e10c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e110:	f1b8 0f10 	cmp.w	r8, #16
 800e114:	dc02      	bgt.n	800e11c <__ieee754_rem_pio2+0x1d4>
 800e116:	e9ca 0100 	strd	r0, r1, [sl]
 800e11a:	e039      	b.n	800e190 <__ieee754_rem_pio2+0x248>
 800e11c:	a34e      	add	r3, pc, #312	; (adr r3, 800e258 <__ieee754_rem_pio2+0x310>)
 800e11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e122:	ec51 0b18 	vmov	r0, r1, d8
 800e126:	f7f2 fa67 	bl	80005f8 <__aeabi_dmul>
 800e12a:	4604      	mov	r4, r0
 800e12c:	460d      	mov	r5, r1
 800e12e:	4602      	mov	r2, r0
 800e130:	460b      	mov	r3, r1
 800e132:	4630      	mov	r0, r6
 800e134:	4639      	mov	r1, r7
 800e136:	f7f2 f8a7 	bl	8000288 <__aeabi_dsub>
 800e13a:	4602      	mov	r2, r0
 800e13c:	460b      	mov	r3, r1
 800e13e:	4680      	mov	r8, r0
 800e140:	4689      	mov	r9, r1
 800e142:	4630      	mov	r0, r6
 800e144:	4639      	mov	r1, r7
 800e146:	f7f2 f89f 	bl	8000288 <__aeabi_dsub>
 800e14a:	4622      	mov	r2, r4
 800e14c:	462b      	mov	r3, r5
 800e14e:	f7f2 f89b 	bl	8000288 <__aeabi_dsub>
 800e152:	a343      	add	r3, pc, #268	; (adr r3, 800e260 <__ieee754_rem_pio2+0x318>)
 800e154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e158:	4604      	mov	r4, r0
 800e15a:	460d      	mov	r5, r1
 800e15c:	ec51 0b18 	vmov	r0, r1, d8
 800e160:	f7f2 fa4a 	bl	80005f8 <__aeabi_dmul>
 800e164:	4622      	mov	r2, r4
 800e166:	462b      	mov	r3, r5
 800e168:	f7f2 f88e 	bl	8000288 <__aeabi_dsub>
 800e16c:	4602      	mov	r2, r0
 800e16e:	460b      	mov	r3, r1
 800e170:	4604      	mov	r4, r0
 800e172:	460d      	mov	r5, r1
 800e174:	4640      	mov	r0, r8
 800e176:	4649      	mov	r1, r9
 800e178:	f7f2 f886 	bl	8000288 <__aeabi_dsub>
 800e17c:	9a03      	ldr	r2, [sp, #12]
 800e17e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e182:	1ad3      	subs	r3, r2, r3
 800e184:	2b31      	cmp	r3, #49	; 0x31
 800e186:	dc24      	bgt.n	800e1d2 <__ieee754_rem_pio2+0x28a>
 800e188:	e9ca 0100 	strd	r0, r1, [sl]
 800e18c:	4646      	mov	r6, r8
 800e18e:	464f      	mov	r7, r9
 800e190:	e9da 8900 	ldrd	r8, r9, [sl]
 800e194:	4630      	mov	r0, r6
 800e196:	4642      	mov	r2, r8
 800e198:	464b      	mov	r3, r9
 800e19a:	4639      	mov	r1, r7
 800e19c:	f7f2 f874 	bl	8000288 <__aeabi_dsub>
 800e1a0:	462b      	mov	r3, r5
 800e1a2:	4622      	mov	r2, r4
 800e1a4:	f7f2 f870 	bl	8000288 <__aeabi_dsub>
 800e1a8:	9b02      	ldr	r3, [sp, #8]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e1b0:	f6bf af0a 	bge.w	800dfc8 <__ieee754_rem_pio2+0x80>
 800e1b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e1b8:	f8ca 3004 	str.w	r3, [sl, #4]
 800e1bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1c0:	f8ca 8000 	str.w	r8, [sl]
 800e1c4:	f8ca 0008 	str.w	r0, [sl, #8]
 800e1c8:	f8ca 300c 	str.w	r3, [sl, #12]
 800e1cc:	f1cb 0b00 	rsb	fp, fp, #0
 800e1d0:	e6fa      	b.n	800dfc8 <__ieee754_rem_pio2+0x80>
 800e1d2:	a327      	add	r3, pc, #156	; (adr r3, 800e270 <__ieee754_rem_pio2+0x328>)
 800e1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d8:	ec51 0b18 	vmov	r0, r1, d8
 800e1dc:	f7f2 fa0c 	bl	80005f8 <__aeabi_dmul>
 800e1e0:	4604      	mov	r4, r0
 800e1e2:	460d      	mov	r5, r1
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	460b      	mov	r3, r1
 800e1e8:	4640      	mov	r0, r8
 800e1ea:	4649      	mov	r1, r9
 800e1ec:	f7f2 f84c 	bl	8000288 <__aeabi_dsub>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	4606      	mov	r6, r0
 800e1f6:	460f      	mov	r7, r1
 800e1f8:	4640      	mov	r0, r8
 800e1fa:	4649      	mov	r1, r9
 800e1fc:	f7f2 f844 	bl	8000288 <__aeabi_dsub>
 800e200:	4622      	mov	r2, r4
 800e202:	462b      	mov	r3, r5
 800e204:	f7f2 f840 	bl	8000288 <__aeabi_dsub>
 800e208:	a31b      	add	r3, pc, #108	; (adr r3, 800e278 <__ieee754_rem_pio2+0x330>)
 800e20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20e:	4604      	mov	r4, r0
 800e210:	460d      	mov	r5, r1
 800e212:	ec51 0b18 	vmov	r0, r1, d8
 800e216:	f7f2 f9ef 	bl	80005f8 <__aeabi_dmul>
 800e21a:	4622      	mov	r2, r4
 800e21c:	462b      	mov	r3, r5
 800e21e:	f7f2 f833 	bl	8000288 <__aeabi_dsub>
 800e222:	4604      	mov	r4, r0
 800e224:	460d      	mov	r5, r1
 800e226:	e75f      	b.n	800e0e8 <__ieee754_rem_pio2+0x1a0>
 800e228:	4b1b      	ldr	r3, [pc, #108]	; (800e298 <__ieee754_rem_pio2+0x350>)
 800e22a:	4598      	cmp	r8, r3
 800e22c:	dd36      	ble.n	800e29c <__ieee754_rem_pio2+0x354>
 800e22e:	ee10 2a10 	vmov	r2, s0
 800e232:	462b      	mov	r3, r5
 800e234:	4620      	mov	r0, r4
 800e236:	4629      	mov	r1, r5
 800e238:	f7f2 f826 	bl	8000288 <__aeabi_dsub>
 800e23c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e240:	e9ca 0100 	strd	r0, r1, [sl]
 800e244:	e694      	b.n	800df70 <__ieee754_rem_pio2+0x28>
 800e246:	bf00      	nop
 800e248:	54400000 	.word	0x54400000
 800e24c:	3ff921fb 	.word	0x3ff921fb
 800e250:	1a626331 	.word	0x1a626331
 800e254:	3dd0b461 	.word	0x3dd0b461
 800e258:	1a600000 	.word	0x1a600000
 800e25c:	3dd0b461 	.word	0x3dd0b461
 800e260:	2e037073 	.word	0x2e037073
 800e264:	3ba3198a 	.word	0x3ba3198a
 800e268:	6dc9c883 	.word	0x6dc9c883
 800e26c:	3fe45f30 	.word	0x3fe45f30
 800e270:	2e000000 	.word	0x2e000000
 800e274:	3ba3198a 	.word	0x3ba3198a
 800e278:	252049c1 	.word	0x252049c1
 800e27c:	397b839a 	.word	0x397b839a
 800e280:	3fe921fb 	.word	0x3fe921fb
 800e284:	4002d97b 	.word	0x4002d97b
 800e288:	3ff921fb 	.word	0x3ff921fb
 800e28c:	413921fb 	.word	0x413921fb
 800e290:	3fe00000 	.word	0x3fe00000
 800e294:	0800f880 	.word	0x0800f880
 800e298:	7fefffff 	.word	0x7fefffff
 800e29c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e2a0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e2a4:	ee10 0a10 	vmov	r0, s0
 800e2a8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e2ac:	ee10 6a10 	vmov	r6, s0
 800e2b0:	460f      	mov	r7, r1
 800e2b2:	f7f2 fc51 	bl	8000b58 <__aeabi_d2iz>
 800e2b6:	f7f2 f935 	bl	8000524 <__aeabi_i2d>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	4630      	mov	r0, r6
 800e2c0:	4639      	mov	r1, r7
 800e2c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e2c6:	f7f1 ffdf 	bl	8000288 <__aeabi_dsub>
 800e2ca:	4b23      	ldr	r3, [pc, #140]	; (800e358 <__ieee754_rem_pio2+0x410>)
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f7f2 f993 	bl	80005f8 <__aeabi_dmul>
 800e2d2:	460f      	mov	r7, r1
 800e2d4:	4606      	mov	r6, r0
 800e2d6:	f7f2 fc3f 	bl	8000b58 <__aeabi_d2iz>
 800e2da:	f7f2 f923 	bl	8000524 <__aeabi_i2d>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	4630      	mov	r0, r6
 800e2e4:	4639      	mov	r1, r7
 800e2e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e2ea:	f7f1 ffcd 	bl	8000288 <__aeabi_dsub>
 800e2ee:	4b1a      	ldr	r3, [pc, #104]	; (800e358 <__ieee754_rem_pio2+0x410>)
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f7f2 f981 	bl	80005f8 <__aeabi_dmul>
 800e2f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e2fa:	ad04      	add	r5, sp, #16
 800e2fc:	f04f 0803 	mov.w	r8, #3
 800e300:	46a9      	mov	r9, r5
 800e302:	2600      	movs	r6, #0
 800e304:	2700      	movs	r7, #0
 800e306:	4632      	mov	r2, r6
 800e308:	463b      	mov	r3, r7
 800e30a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e30e:	46c3      	mov	fp, r8
 800e310:	3d08      	subs	r5, #8
 800e312:	f108 38ff 	add.w	r8, r8, #4294967295
 800e316:	f7f2 fbd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d1f3      	bne.n	800e306 <__ieee754_rem_pio2+0x3be>
 800e31e:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <__ieee754_rem_pio2+0x414>)
 800e320:	9301      	str	r3, [sp, #4]
 800e322:	2302      	movs	r3, #2
 800e324:	9300      	str	r3, [sp, #0]
 800e326:	4622      	mov	r2, r4
 800e328:	465b      	mov	r3, fp
 800e32a:	4651      	mov	r1, sl
 800e32c:	4648      	mov	r0, r9
 800e32e:	f000 f993 	bl	800e658 <__kernel_rem_pio2>
 800e332:	9b02      	ldr	r3, [sp, #8]
 800e334:	2b00      	cmp	r3, #0
 800e336:	4683      	mov	fp, r0
 800e338:	f6bf ae46 	bge.w	800dfc8 <__ieee754_rem_pio2+0x80>
 800e33c:	e9da 2100 	ldrd	r2, r1, [sl]
 800e340:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e344:	e9ca 2300 	strd	r2, r3, [sl]
 800e348:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e34c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e350:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e354:	e73a      	b.n	800e1cc <__ieee754_rem_pio2+0x284>
 800e356:	bf00      	nop
 800e358:	41700000 	.word	0x41700000
 800e35c:	0800f900 	.word	0x0800f900

0800e360 <__ieee754_sqrt>:
 800e360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e364:	ec55 4b10 	vmov	r4, r5, d0
 800e368:	4e55      	ldr	r6, [pc, #340]	; (800e4c0 <__ieee754_sqrt+0x160>)
 800e36a:	43ae      	bics	r6, r5
 800e36c:	ee10 0a10 	vmov	r0, s0
 800e370:	ee10 3a10 	vmov	r3, s0
 800e374:	462a      	mov	r2, r5
 800e376:	4629      	mov	r1, r5
 800e378:	d110      	bne.n	800e39c <__ieee754_sqrt+0x3c>
 800e37a:	ee10 2a10 	vmov	r2, s0
 800e37e:	462b      	mov	r3, r5
 800e380:	f7f2 f93a 	bl	80005f8 <__aeabi_dmul>
 800e384:	4602      	mov	r2, r0
 800e386:	460b      	mov	r3, r1
 800e388:	4620      	mov	r0, r4
 800e38a:	4629      	mov	r1, r5
 800e38c:	f7f1 ff7e 	bl	800028c <__adddf3>
 800e390:	4604      	mov	r4, r0
 800e392:	460d      	mov	r5, r1
 800e394:	ec45 4b10 	vmov	d0, r4, r5
 800e398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e39c:	2d00      	cmp	r5, #0
 800e39e:	dc10      	bgt.n	800e3c2 <__ieee754_sqrt+0x62>
 800e3a0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e3a4:	4330      	orrs	r0, r6
 800e3a6:	d0f5      	beq.n	800e394 <__ieee754_sqrt+0x34>
 800e3a8:	b15d      	cbz	r5, 800e3c2 <__ieee754_sqrt+0x62>
 800e3aa:	ee10 2a10 	vmov	r2, s0
 800e3ae:	462b      	mov	r3, r5
 800e3b0:	ee10 0a10 	vmov	r0, s0
 800e3b4:	f7f1 ff68 	bl	8000288 <__aeabi_dsub>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	f7f2 fa46 	bl	800084c <__aeabi_ddiv>
 800e3c0:	e7e6      	b.n	800e390 <__ieee754_sqrt+0x30>
 800e3c2:	1512      	asrs	r2, r2, #20
 800e3c4:	d074      	beq.n	800e4b0 <__ieee754_sqrt+0x150>
 800e3c6:	07d4      	lsls	r4, r2, #31
 800e3c8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e3cc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e3d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e3d4:	bf5e      	ittt	pl
 800e3d6:	0fda      	lsrpl	r2, r3, #31
 800e3d8:	005b      	lslpl	r3, r3, #1
 800e3da:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e3de:	2400      	movs	r4, #0
 800e3e0:	0fda      	lsrs	r2, r3, #31
 800e3e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e3e6:	107f      	asrs	r7, r7, #1
 800e3e8:	005b      	lsls	r3, r3, #1
 800e3ea:	2516      	movs	r5, #22
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e3f2:	1886      	adds	r6, r0, r2
 800e3f4:	428e      	cmp	r6, r1
 800e3f6:	bfde      	ittt	le
 800e3f8:	1b89      	suble	r1, r1, r6
 800e3fa:	18b0      	addle	r0, r6, r2
 800e3fc:	18a4      	addle	r4, r4, r2
 800e3fe:	0049      	lsls	r1, r1, #1
 800e400:	3d01      	subs	r5, #1
 800e402:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e406:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e40a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e40e:	d1f0      	bne.n	800e3f2 <__ieee754_sqrt+0x92>
 800e410:	462a      	mov	r2, r5
 800e412:	f04f 0e20 	mov.w	lr, #32
 800e416:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e41a:	4281      	cmp	r1, r0
 800e41c:	eb06 0c05 	add.w	ip, r6, r5
 800e420:	dc02      	bgt.n	800e428 <__ieee754_sqrt+0xc8>
 800e422:	d113      	bne.n	800e44c <__ieee754_sqrt+0xec>
 800e424:	459c      	cmp	ip, r3
 800e426:	d811      	bhi.n	800e44c <__ieee754_sqrt+0xec>
 800e428:	f1bc 0f00 	cmp.w	ip, #0
 800e42c:	eb0c 0506 	add.w	r5, ip, r6
 800e430:	da43      	bge.n	800e4ba <__ieee754_sqrt+0x15a>
 800e432:	2d00      	cmp	r5, #0
 800e434:	db41      	blt.n	800e4ba <__ieee754_sqrt+0x15a>
 800e436:	f100 0801 	add.w	r8, r0, #1
 800e43a:	1a09      	subs	r1, r1, r0
 800e43c:	459c      	cmp	ip, r3
 800e43e:	bf88      	it	hi
 800e440:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e444:	eba3 030c 	sub.w	r3, r3, ip
 800e448:	4432      	add	r2, r6
 800e44a:	4640      	mov	r0, r8
 800e44c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e450:	f1be 0e01 	subs.w	lr, lr, #1
 800e454:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e458:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e45c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e460:	d1db      	bne.n	800e41a <__ieee754_sqrt+0xba>
 800e462:	430b      	orrs	r3, r1
 800e464:	d006      	beq.n	800e474 <__ieee754_sqrt+0x114>
 800e466:	1c50      	adds	r0, r2, #1
 800e468:	bf13      	iteet	ne
 800e46a:	3201      	addne	r2, #1
 800e46c:	3401      	addeq	r4, #1
 800e46e:	4672      	moveq	r2, lr
 800e470:	f022 0201 	bicne.w	r2, r2, #1
 800e474:	1063      	asrs	r3, r4, #1
 800e476:	0852      	lsrs	r2, r2, #1
 800e478:	07e1      	lsls	r1, r4, #31
 800e47a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e47e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e482:	bf48      	it	mi
 800e484:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e488:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e48c:	4614      	mov	r4, r2
 800e48e:	e781      	b.n	800e394 <__ieee754_sqrt+0x34>
 800e490:	0ad9      	lsrs	r1, r3, #11
 800e492:	3815      	subs	r0, #21
 800e494:	055b      	lsls	r3, r3, #21
 800e496:	2900      	cmp	r1, #0
 800e498:	d0fa      	beq.n	800e490 <__ieee754_sqrt+0x130>
 800e49a:	02cd      	lsls	r5, r1, #11
 800e49c:	d50a      	bpl.n	800e4b4 <__ieee754_sqrt+0x154>
 800e49e:	f1c2 0420 	rsb	r4, r2, #32
 800e4a2:	fa23 f404 	lsr.w	r4, r3, r4
 800e4a6:	1e55      	subs	r5, r2, #1
 800e4a8:	4093      	lsls	r3, r2
 800e4aa:	4321      	orrs	r1, r4
 800e4ac:	1b42      	subs	r2, r0, r5
 800e4ae:	e78a      	b.n	800e3c6 <__ieee754_sqrt+0x66>
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	e7f0      	b.n	800e496 <__ieee754_sqrt+0x136>
 800e4b4:	0049      	lsls	r1, r1, #1
 800e4b6:	3201      	adds	r2, #1
 800e4b8:	e7ef      	b.n	800e49a <__ieee754_sqrt+0x13a>
 800e4ba:	4680      	mov	r8, r0
 800e4bc:	e7bd      	b.n	800e43a <__ieee754_sqrt+0xda>
 800e4be:	bf00      	nop
 800e4c0:	7ff00000 	.word	0x7ff00000
 800e4c4:	00000000 	.word	0x00000000

0800e4c8 <__kernel_cos>:
 800e4c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4cc:	ec57 6b10 	vmov	r6, r7, d0
 800e4d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e4d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e4d8:	ed8d 1b00 	vstr	d1, [sp]
 800e4dc:	da07      	bge.n	800e4ee <__kernel_cos+0x26>
 800e4de:	ee10 0a10 	vmov	r0, s0
 800e4e2:	4639      	mov	r1, r7
 800e4e4:	f7f2 fb38 	bl	8000b58 <__aeabi_d2iz>
 800e4e8:	2800      	cmp	r0, #0
 800e4ea:	f000 8088 	beq.w	800e5fe <__kernel_cos+0x136>
 800e4ee:	4632      	mov	r2, r6
 800e4f0:	463b      	mov	r3, r7
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	4639      	mov	r1, r7
 800e4f6:	f7f2 f87f 	bl	80005f8 <__aeabi_dmul>
 800e4fa:	4b51      	ldr	r3, [pc, #324]	; (800e640 <__kernel_cos+0x178>)
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	4604      	mov	r4, r0
 800e500:	460d      	mov	r5, r1
 800e502:	f7f2 f879 	bl	80005f8 <__aeabi_dmul>
 800e506:	a340      	add	r3, pc, #256	; (adr r3, 800e608 <__kernel_cos+0x140>)
 800e508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50c:	4682      	mov	sl, r0
 800e50e:	468b      	mov	fp, r1
 800e510:	4620      	mov	r0, r4
 800e512:	4629      	mov	r1, r5
 800e514:	f7f2 f870 	bl	80005f8 <__aeabi_dmul>
 800e518:	a33d      	add	r3, pc, #244	; (adr r3, 800e610 <__kernel_cos+0x148>)
 800e51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51e:	f7f1 feb5 	bl	800028c <__adddf3>
 800e522:	4622      	mov	r2, r4
 800e524:	462b      	mov	r3, r5
 800e526:	f7f2 f867 	bl	80005f8 <__aeabi_dmul>
 800e52a:	a33b      	add	r3, pc, #236	; (adr r3, 800e618 <__kernel_cos+0x150>)
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	f7f1 feaa 	bl	8000288 <__aeabi_dsub>
 800e534:	4622      	mov	r2, r4
 800e536:	462b      	mov	r3, r5
 800e538:	f7f2 f85e 	bl	80005f8 <__aeabi_dmul>
 800e53c:	a338      	add	r3, pc, #224	; (adr r3, 800e620 <__kernel_cos+0x158>)
 800e53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e542:	f7f1 fea3 	bl	800028c <__adddf3>
 800e546:	4622      	mov	r2, r4
 800e548:	462b      	mov	r3, r5
 800e54a:	f7f2 f855 	bl	80005f8 <__aeabi_dmul>
 800e54e:	a336      	add	r3, pc, #216	; (adr r3, 800e628 <__kernel_cos+0x160>)
 800e550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e554:	f7f1 fe98 	bl	8000288 <__aeabi_dsub>
 800e558:	4622      	mov	r2, r4
 800e55a:	462b      	mov	r3, r5
 800e55c:	f7f2 f84c 	bl	80005f8 <__aeabi_dmul>
 800e560:	a333      	add	r3, pc, #204	; (adr r3, 800e630 <__kernel_cos+0x168>)
 800e562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e566:	f7f1 fe91 	bl	800028c <__adddf3>
 800e56a:	4622      	mov	r2, r4
 800e56c:	462b      	mov	r3, r5
 800e56e:	f7f2 f843 	bl	80005f8 <__aeabi_dmul>
 800e572:	4622      	mov	r2, r4
 800e574:	462b      	mov	r3, r5
 800e576:	f7f2 f83f 	bl	80005f8 <__aeabi_dmul>
 800e57a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e57e:	4604      	mov	r4, r0
 800e580:	460d      	mov	r5, r1
 800e582:	4630      	mov	r0, r6
 800e584:	4639      	mov	r1, r7
 800e586:	f7f2 f837 	bl	80005f8 <__aeabi_dmul>
 800e58a:	460b      	mov	r3, r1
 800e58c:	4602      	mov	r2, r0
 800e58e:	4629      	mov	r1, r5
 800e590:	4620      	mov	r0, r4
 800e592:	f7f1 fe79 	bl	8000288 <__aeabi_dsub>
 800e596:	4b2b      	ldr	r3, [pc, #172]	; (800e644 <__kernel_cos+0x17c>)
 800e598:	4598      	cmp	r8, r3
 800e59a:	4606      	mov	r6, r0
 800e59c:	460f      	mov	r7, r1
 800e59e:	dc10      	bgt.n	800e5c2 <__kernel_cos+0xfa>
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	460b      	mov	r3, r1
 800e5a4:	4650      	mov	r0, sl
 800e5a6:	4659      	mov	r1, fp
 800e5a8:	f7f1 fe6e 	bl	8000288 <__aeabi_dsub>
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	4926      	ldr	r1, [pc, #152]	; (800e648 <__kernel_cos+0x180>)
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	f7f1 fe68 	bl	8000288 <__aeabi_dsub>
 800e5b8:	ec41 0b10 	vmov	d0, r0, r1
 800e5bc:	b003      	add	sp, #12
 800e5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c2:	4b22      	ldr	r3, [pc, #136]	; (800e64c <__kernel_cos+0x184>)
 800e5c4:	4920      	ldr	r1, [pc, #128]	; (800e648 <__kernel_cos+0x180>)
 800e5c6:	4598      	cmp	r8, r3
 800e5c8:	bfcc      	ite	gt
 800e5ca:	4d21      	ldrgt	r5, [pc, #132]	; (800e650 <__kernel_cos+0x188>)
 800e5cc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e5d0:	2400      	movs	r4, #0
 800e5d2:	4622      	mov	r2, r4
 800e5d4:	462b      	mov	r3, r5
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	f7f1 fe56 	bl	8000288 <__aeabi_dsub>
 800e5dc:	4622      	mov	r2, r4
 800e5de:	4680      	mov	r8, r0
 800e5e0:	4689      	mov	r9, r1
 800e5e2:	462b      	mov	r3, r5
 800e5e4:	4650      	mov	r0, sl
 800e5e6:	4659      	mov	r1, fp
 800e5e8:	f7f1 fe4e 	bl	8000288 <__aeabi_dsub>
 800e5ec:	4632      	mov	r2, r6
 800e5ee:	463b      	mov	r3, r7
 800e5f0:	f7f1 fe4a 	bl	8000288 <__aeabi_dsub>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	4640      	mov	r0, r8
 800e5fa:	4649      	mov	r1, r9
 800e5fc:	e7da      	b.n	800e5b4 <__kernel_cos+0xec>
 800e5fe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e638 <__kernel_cos+0x170>
 800e602:	e7db      	b.n	800e5bc <__kernel_cos+0xf4>
 800e604:	f3af 8000 	nop.w
 800e608:	be8838d4 	.word	0xbe8838d4
 800e60c:	bda8fae9 	.word	0xbda8fae9
 800e610:	bdb4b1c4 	.word	0xbdb4b1c4
 800e614:	3e21ee9e 	.word	0x3e21ee9e
 800e618:	809c52ad 	.word	0x809c52ad
 800e61c:	3e927e4f 	.word	0x3e927e4f
 800e620:	19cb1590 	.word	0x19cb1590
 800e624:	3efa01a0 	.word	0x3efa01a0
 800e628:	16c15177 	.word	0x16c15177
 800e62c:	3f56c16c 	.word	0x3f56c16c
 800e630:	5555554c 	.word	0x5555554c
 800e634:	3fa55555 	.word	0x3fa55555
 800e638:	00000000 	.word	0x00000000
 800e63c:	3ff00000 	.word	0x3ff00000
 800e640:	3fe00000 	.word	0x3fe00000
 800e644:	3fd33332 	.word	0x3fd33332
 800e648:	3ff00000 	.word	0x3ff00000
 800e64c:	3fe90000 	.word	0x3fe90000
 800e650:	3fd20000 	.word	0x3fd20000
 800e654:	00000000 	.word	0x00000000

0800e658 <__kernel_rem_pio2>:
 800e658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e65c:	ed2d 8b02 	vpush	{d8}
 800e660:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e664:	f112 0f14 	cmn.w	r2, #20
 800e668:	9308      	str	r3, [sp, #32]
 800e66a:	9101      	str	r1, [sp, #4]
 800e66c:	4bc4      	ldr	r3, [pc, #784]	; (800e980 <__kernel_rem_pio2+0x328>)
 800e66e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e670:	900b      	str	r0, [sp, #44]	; 0x2c
 800e672:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e676:	9302      	str	r3, [sp, #8]
 800e678:	9b08      	ldr	r3, [sp, #32]
 800e67a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e67e:	bfa8      	it	ge
 800e680:	1ed4      	subge	r4, r2, #3
 800e682:	9306      	str	r3, [sp, #24]
 800e684:	bfb2      	itee	lt
 800e686:	2400      	movlt	r4, #0
 800e688:	2318      	movge	r3, #24
 800e68a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e68e:	f06f 0317 	mvn.w	r3, #23
 800e692:	fb04 3303 	mla	r3, r4, r3, r3
 800e696:	eb03 0a02 	add.w	sl, r3, r2
 800e69a:	9b02      	ldr	r3, [sp, #8]
 800e69c:	9a06      	ldr	r2, [sp, #24]
 800e69e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e970 <__kernel_rem_pio2+0x318>
 800e6a2:	eb03 0802 	add.w	r8, r3, r2
 800e6a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e6a8:	1aa7      	subs	r7, r4, r2
 800e6aa:	ae22      	add	r6, sp, #136	; 0x88
 800e6ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e6b0:	2500      	movs	r5, #0
 800e6b2:	4545      	cmp	r5, r8
 800e6b4:	dd13      	ble.n	800e6de <__kernel_rem_pio2+0x86>
 800e6b6:	9b08      	ldr	r3, [sp, #32]
 800e6b8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e970 <__kernel_rem_pio2+0x318>
 800e6bc:	aa22      	add	r2, sp, #136	; 0x88
 800e6be:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e6c2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e6c6:	f04f 0800 	mov.w	r8, #0
 800e6ca:	9b02      	ldr	r3, [sp, #8]
 800e6cc:	4598      	cmp	r8, r3
 800e6ce:	dc2f      	bgt.n	800e730 <__kernel_rem_pio2+0xd8>
 800e6d0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e6d4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e6d8:	462f      	mov	r7, r5
 800e6da:	2600      	movs	r6, #0
 800e6dc:	e01b      	b.n	800e716 <__kernel_rem_pio2+0xbe>
 800e6de:	42ef      	cmn	r7, r5
 800e6e0:	d407      	bmi.n	800e6f2 <__kernel_rem_pio2+0x9a>
 800e6e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e6e6:	f7f1 ff1d 	bl	8000524 <__aeabi_i2d>
 800e6ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e6ee:	3501      	adds	r5, #1
 800e6f0:	e7df      	b.n	800e6b2 <__kernel_rem_pio2+0x5a>
 800e6f2:	ec51 0b18 	vmov	r0, r1, d8
 800e6f6:	e7f8      	b.n	800e6ea <__kernel_rem_pio2+0x92>
 800e6f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e700:	f7f1 ff7a 	bl	80005f8 <__aeabi_dmul>
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e70c:	f7f1 fdbe 	bl	800028c <__adddf3>
 800e710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e714:	3601      	adds	r6, #1
 800e716:	9b06      	ldr	r3, [sp, #24]
 800e718:	429e      	cmp	r6, r3
 800e71a:	f1a7 0708 	sub.w	r7, r7, #8
 800e71e:	ddeb      	ble.n	800e6f8 <__kernel_rem_pio2+0xa0>
 800e720:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e724:	f108 0801 	add.w	r8, r8, #1
 800e728:	ecab 7b02 	vstmia	fp!, {d7}
 800e72c:	3508      	adds	r5, #8
 800e72e:	e7cc      	b.n	800e6ca <__kernel_rem_pio2+0x72>
 800e730:	9b02      	ldr	r3, [sp, #8]
 800e732:	aa0e      	add	r2, sp, #56	; 0x38
 800e734:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e738:	930d      	str	r3, [sp, #52]	; 0x34
 800e73a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e73c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e740:	9c02      	ldr	r4, [sp, #8]
 800e742:	930c      	str	r3, [sp, #48]	; 0x30
 800e744:	00e3      	lsls	r3, r4, #3
 800e746:	930a      	str	r3, [sp, #40]	; 0x28
 800e748:	ab9a      	add	r3, sp, #616	; 0x268
 800e74a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e74e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e752:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e756:	ab72      	add	r3, sp, #456	; 0x1c8
 800e758:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e75c:	46c3      	mov	fp, r8
 800e75e:	46a1      	mov	r9, r4
 800e760:	f1b9 0f00 	cmp.w	r9, #0
 800e764:	f1a5 0508 	sub.w	r5, r5, #8
 800e768:	dc77      	bgt.n	800e85a <__kernel_rem_pio2+0x202>
 800e76a:	ec47 6b10 	vmov	d0, r6, r7
 800e76e:	4650      	mov	r0, sl
 800e770:	f000 fc46 	bl	800f000 <scalbn>
 800e774:	ec57 6b10 	vmov	r6, r7, d0
 800e778:	2200      	movs	r2, #0
 800e77a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e77e:	ee10 0a10 	vmov	r0, s0
 800e782:	4639      	mov	r1, r7
 800e784:	f7f1 ff38 	bl	80005f8 <__aeabi_dmul>
 800e788:	ec41 0b10 	vmov	d0, r0, r1
 800e78c:	f000 fbb8 	bl	800ef00 <floor>
 800e790:	4b7c      	ldr	r3, [pc, #496]	; (800e984 <__kernel_rem_pio2+0x32c>)
 800e792:	ec51 0b10 	vmov	r0, r1, d0
 800e796:	2200      	movs	r2, #0
 800e798:	f7f1 ff2e 	bl	80005f8 <__aeabi_dmul>
 800e79c:	4602      	mov	r2, r0
 800e79e:	460b      	mov	r3, r1
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	4639      	mov	r1, r7
 800e7a4:	f7f1 fd70 	bl	8000288 <__aeabi_dsub>
 800e7a8:	460f      	mov	r7, r1
 800e7aa:	4606      	mov	r6, r0
 800e7ac:	f7f2 f9d4 	bl	8000b58 <__aeabi_d2iz>
 800e7b0:	9004      	str	r0, [sp, #16]
 800e7b2:	f7f1 feb7 	bl	8000524 <__aeabi_i2d>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	4639      	mov	r1, r7
 800e7be:	f7f1 fd63 	bl	8000288 <__aeabi_dsub>
 800e7c2:	f1ba 0f00 	cmp.w	sl, #0
 800e7c6:	4606      	mov	r6, r0
 800e7c8:	460f      	mov	r7, r1
 800e7ca:	dd6d      	ble.n	800e8a8 <__kernel_rem_pio2+0x250>
 800e7cc:	1e62      	subs	r2, r4, #1
 800e7ce:	ab0e      	add	r3, sp, #56	; 0x38
 800e7d0:	9d04      	ldr	r5, [sp, #16]
 800e7d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e7d6:	f1ca 0118 	rsb	r1, sl, #24
 800e7da:	fa40 f301 	asr.w	r3, r0, r1
 800e7de:	441d      	add	r5, r3
 800e7e0:	408b      	lsls	r3, r1
 800e7e2:	1ac0      	subs	r0, r0, r3
 800e7e4:	ab0e      	add	r3, sp, #56	; 0x38
 800e7e6:	9504      	str	r5, [sp, #16]
 800e7e8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e7ec:	f1ca 0317 	rsb	r3, sl, #23
 800e7f0:	fa40 fb03 	asr.w	fp, r0, r3
 800e7f4:	f1bb 0f00 	cmp.w	fp, #0
 800e7f8:	dd65      	ble.n	800e8c6 <__kernel_rem_pio2+0x26e>
 800e7fa:	9b04      	ldr	r3, [sp, #16]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	3301      	adds	r3, #1
 800e800:	9304      	str	r3, [sp, #16]
 800e802:	4615      	mov	r5, r2
 800e804:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e808:	4294      	cmp	r4, r2
 800e80a:	f300 809c 	bgt.w	800e946 <__kernel_rem_pio2+0x2ee>
 800e80e:	f1ba 0f00 	cmp.w	sl, #0
 800e812:	dd07      	ble.n	800e824 <__kernel_rem_pio2+0x1cc>
 800e814:	f1ba 0f01 	cmp.w	sl, #1
 800e818:	f000 80c0 	beq.w	800e99c <__kernel_rem_pio2+0x344>
 800e81c:	f1ba 0f02 	cmp.w	sl, #2
 800e820:	f000 80c6 	beq.w	800e9b0 <__kernel_rem_pio2+0x358>
 800e824:	f1bb 0f02 	cmp.w	fp, #2
 800e828:	d14d      	bne.n	800e8c6 <__kernel_rem_pio2+0x26e>
 800e82a:	4632      	mov	r2, r6
 800e82c:	463b      	mov	r3, r7
 800e82e:	4956      	ldr	r1, [pc, #344]	; (800e988 <__kernel_rem_pio2+0x330>)
 800e830:	2000      	movs	r0, #0
 800e832:	f7f1 fd29 	bl	8000288 <__aeabi_dsub>
 800e836:	4606      	mov	r6, r0
 800e838:	460f      	mov	r7, r1
 800e83a:	2d00      	cmp	r5, #0
 800e83c:	d043      	beq.n	800e8c6 <__kernel_rem_pio2+0x26e>
 800e83e:	4650      	mov	r0, sl
 800e840:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e978 <__kernel_rem_pio2+0x320>
 800e844:	f000 fbdc 	bl	800f000 <scalbn>
 800e848:	4630      	mov	r0, r6
 800e84a:	4639      	mov	r1, r7
 800e84c:	ec53 2b10 	vmov	r2, r3, d0
 800e850:	f7f1 fd1a 	bl	8000288 <__aeabi_dsub>
 800e854:	4606      	mov	r6, r0
 800e856:	460f      	mov	r7, r1
 800e858:	e035      	b.n	800e8c6 <__kernel_rem_pio2+0x26e>
 800e85a:	4b4c      	ldr	r3, [pc, #304]	; (800e98c <__kernel_rem_pio2+0x334>)
 800e85c:	2200      	movs	r2, #0
 800e85e:	4630      	mov	r0, r6
 800e860:	4639      	mov	r1, r7
 800e862:	f7f1 fec9 	bl	80005f8 <__aeabi_dmul>
 800e866:	f7f2 f977 	bl	8000b58 <__aeabi_d2iz>
 800e86a:	f7f1 fe5b 	bl	8000524 <__aeabi_i2d>
 800e86e:	4602      	mov	r2, r0
 800e870:	460b      	mov	r3, r1
 800e872:	ec43 2b18 	vmov	d8, r2, r3
 800e876:	4b46      	ldr	r3, [pc, #280]	; (800e990 <__kernel_rem_pio2+0x338>)
 800e878:	2200      	movs	r2, #0
 800e87a:	f7f1 febd 	bl	80005f8 <__aeabi_dmul>
 800e87e:	4602      	mov	r2, r0
 800e880:	460b      	mov	r3, r1
 800e882:	4630      	mov	r0, r6
 800e884:	4639      	mov	r1, r7
 800e886:	f7f1 fcff 	bl	8000288 <__aeabi_dsub>
 800e88a:	f7f2 f965 	bl	8000b58 <__aeabi_d2iz>
 800e88e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e892:	f84b 0b04 	str.w	r0, [fp], #4
 800e896:	ec51 0b18 	vmov	r0, r1, d8
 800e89a:	f7f1 fcf7 	bl	800028c <__adddf3>
 800e89e:	f109 39ff 	add.w	r9, r9, #4294967295
 800e8a2:	4606      	mov	r6, r0
 800e8a4:	460f      	mov	r7, r1
 800e8a6:	e75b      	b.n	800e760 <__kernel_rem_pio2+0x108>
 800e8a8:	d106      	bne.n	800e8b8 <__kernel_rem_pio2+0x260>
 800e8aa:	1e63      	subs	r3, r4, #1
 800e8ac:	aa0e      	add	r2, sp, #56	; 0x38
 800e8ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e8b2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e8b6:	e79d      	b.n	800e7f4 <__kernel_rem_pio2+0x19c>
 800e8b8:	4b36      	ldr	r3, [pc, #216]	; (800e994 <__kernel_rem_pio2+0x33c>)
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f7f2 f922 	bl	8000b04 <__aeabi_dcmpge>
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	d13d      	bne.n	800e940 <__kernel_rem_pio2+0x2e8>
 800e8c4:	4683      	mov	fp, r0
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	4639      	mov	r1, r7
 800e8ce:	f7f2 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	f000 80c0 	beq.w	800ea58 <__kernel_rem_pio2+0x400>
 800e8d8:	1e65      	subs	r5, r4, #1
 800e8da:	462b      	mov	r3, r5
 800e8dc:	2200      	movs	r2, #0
 800e8de:	9902      	ldr	r1, [sp, #8]
 800e8e0:	428b      	cmp	r3, r1
 800e8e2:	da6c      	bge.n	800e9be <__kernel_rem_pio2+0x366>
 800e8e4:	2a00      	cmp	r2, #0
 800e8e6:	f000 8089 	beq.w	800e9fc <__kernel_rem_pio2+0x3a4>
 800e8ea:	ab0e      	add	r3, sp, #56	; 0x38
 800e8ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800e8f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f000 80ad 	beq.w	800ea54 <__kernel_rem_pio2+0x3fc>
 800e8fa:	4650      	mov	r0, sl
 800e8fc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e978 <__kernel_rem_pio2+0x320>
 800e900:	f000 fb7e 	bl	800f000 <scalbn>
 800e904:	ab9a      	add	r3, sp, #616	; 0x268
 800e906:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e90a:	ec57 6b10 	vmov	r6, r7, d0
 800e90e:	00ec      	lsls	r4, r5, #3
 800e910:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e914:	46aa      	mov	sl, r5
 800e916:	f1ba 0f00 	cmp.w	sl, #0
 800e91a:	f280 80d6 	bge.w	800eaca <__kernel_rem_pio2+0x472>
 800e91e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e970 <__kernel_rem_pio2+0x318>
 800e922:	462e      	mov	r6, r5
 800e924:	2e00      	cmp	r6, #0
 800e926:	f2c0 8104 	blt.w	800eb32 <__kernel_rem_pio2+0x4da>
 800e92a:	ab72      	add	r3, sp, #456	; 0x1c8
 800e92c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e930:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e998 <__kernel_rem_pio2+0x340>
 800e934:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e938:	f04f 0800 	mov.w	r8, #0
 800e93c:	1baf      	subs	r7, r5, r6
 800e93e:	e0ea      	b.n	800eb16 <__kernel_rem_pio2+0x4be>
 800e940:	f04f 0b02 	mov.w	fp, #2
 800e944:	e759      	b.n	800e7fa <__kernel_rem_pio2+0x1a2>
 800e946:	f8d8 3000 	ldr.w	r3, [r8]
 800e94a:	b955      	cbnz	r5, 800e962 <__kernel_rem_pio2+0x30a>
 800e94c:	b123      	cbz	r3, 800e958 <__kernel_rem_pio2+0x300>
 800e94e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e952:	f8c8 3000 	str.w	r3, [r8]
 800e956:	2301      	movs	r3, #1
 800e958:	3201      	adds	r2, #1
 800e95a:	f108 0804 	add.w	r8, r8, #4
 800e95e:	461d      	mov	r5, r3
 800e960:	e752      	b.n	800e808 <__kernel_rem_pio2+0x1b0>
 800e962:	1acb      	subs	r3, r1, r3
 800e964:	f8c8 3000 	str.w	r3, [r8]
 800e968:	462b      	mov	r3, r5
 800e96a:	e7f5      	b.n	800e958 <__kernel_rem_pio2+0x300>
 800e96c:	f3af 8000 	nop.w
	...
 800e97c:	3ff00000 	.word	0x3ff00000
 800e980:	0800fa48 	.word	0x0800fa48
 800e984:	40200000 	.word	0x40200000
 800e988:	3ff00000 	.word	0x3ff00000
 800e98c:	3e700000 	.word	0x3e700000
 800e990:	41700000 	.word	0x41700000
 800e994:	3fe00000 	.word	0x3fe00000
 800e998:	0800fa08 	.word	0x0800fa08
 800e99c:	1e62      	subs	r2, r4, #1
 800e99e:	ab0e      	add	r3, sp, #56	; 0x38
 800e9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e9a8:	a90e      	add	r1, sp, #56	; 0x38
 800e9aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e9ae:	e739      	b.n	800e824 <__kernel_rem_pio2+0x1cc>
 800e9b0:	1e62      	subs	r2, r4, #1
 800e9b2:	ab0e      	add	r3, sp, #56	; 0x38
 800e9b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e9bc:	e7f4      	b.n	800e9a8 <__kernel_rem_pio2+0x350>
 800e9be:	a90e      	add	r1, sp, #56	; 0x38
 800e9c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e9c4:	3b01      	subs	r3, #1
 800e9c6:	430a      	orrs	r2, r1
 800e9c8:	e789      	b.n	800e8de <__kernel_rem_pio2+0x286>
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e9d0:	2900      	cmp	r1, #0
 800e9d2:	d0fa      	beq.n	800e9ca <__kernel_rem_pio2+0x372>
 800e9d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9d6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e9da:	446a      	add	r2, sp
 800e9dc:	3a98      	subs	r2, #152	; 0x98
 800e9de:	920a      	str	r2, [sp, #40]	; 0x28
 800e9e0:	9a08      	ldr	r2, [sp, #32]
 800e9e2:	18e3      	adds	r3, r4, r3
 800e9e4:	18a5      	adds	r5, r4, r2
 800e9e6:	aa22      	add	r2, sp, #136	; 0x88
 800e9e8:	f104 0801 	add.w	r8, r4, #1
 800e9ec:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e9f0:	9304      	str	r3, [sp, #16]
 800e9f2:	9b04      	ldr	r3, [sp, #16]
 800e9f4:	4543      	cmp	r3, r8
 800e9f6:	da04      	bge.n	800ea02 <__kernel_rem_pio2+0x3aa>
 800e9f8:	461c      	mov	r4, r3
 800e9fa:	e6a3      	b.n	800e744 <__kernel_rem_pio2+0xec>
 800e9fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9fe:	2301      	movs	r3, #1
 800ea00:	e7e4      	b.n	800e9cc <__kernel_rem_pio2+0x374>
 800ea02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea04:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ea08:	f7f1 fd8c 	bl	8000524 <__aeabi_i2d>
 800ea0c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ea10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea12:	46ab      	mov	fp, r5
 800ea14:	461c      	mov	r4, r3
 800ea16:	f04f 0900 	mov.w	r9, #0
 800ea1a:	2600      	movs	r6, #0
 800ea1c:	2700      	movs	r7, #0
 800ea1e:	9b06      	ldr	r3, [sp, #24]
 800ea20:	4599      	cmp	r9, r3
 800ea22:	dd06      	ble.n	800ea32 <__kernel_rem_pio2+0x3da>
 800ea24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea26:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ea2a:	f108 0801 	add.w	r8, r8, #1
 800ea2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ea30:	e7df      	b.n	800e9f2 <__kernel_rem_pio2+0x39a>
 800ea32:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ea36:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ea3a:	f7f1 fddd 	bl	80005f8 <__aeabi_dmul>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	460b      	mov	r3, r1
 800ea42:	4630      	mov	r0, r6
 800ea44:	4639      	mov	r1, r7
 800ea46:	f7f1 fc21 	bl	800028c <__adddf3>
 800ea4a:	f109 0901 	add.w	r9, r9, #1
 800ea4e:	4606      	mov	r6, r0
 800ea50:	460f      	mov	r7, r1
 800ea52:	e7e4      	b.n	800ea1e <__kernel_rem_pio2+0x3c6>
 800ea54:	3d01      	subs	r5, #1
 800ea56:	e748      	b.n	800e8ea <__kernel_rem_pio2+0x292>
 800ea58:	ec47 6b10 	vmov	d0, r6, r7
 800ea5c:	f1ca 0000 	rsb	r0, sl, #0
 800ea60:	f000 face 	bl	800f000 <scalbn>
 800ea64:	ec57 6b10 	vmov	r6, r7, d0
 800ea68:	4ba0      	ldr	r3, [pc, #640]	; (800ecec <__kernel_rem_pio2+0x694>)
 800ea6a:	ee10 0a10 	vmov	r0, s0
 800ea6e:	2200      	movs	r2, #0
 800ea70:	4639      	mov	r1, r7
 800ea72:	f7f2 f847 	bl	8000b04 <__aeabi_dcmpge>
 800ea76:	b1f8      	cbz	r0, 800eab8 <__kernel_rem_pio2+0x460>
 800ea78:	4b9d      	ldr	r3, [pc, #628]	; (800ecf0 <__kernel_rem_pio2+0x698>)
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	4639      	mov	r1, r7
 800ea80:	f7f1 fdba 	bl	80005f8 <__aeabi_dmul>
 800ea84:	f7f2 f868 	bl	8000b58 <__aeabi_d2iz>
 800ea88:	4680      	mov	r8, r0
 800ea8a:	f7f1 fd4b 	bl	8000524 <__aeabi_i2d>
 800ea8e:	4b97      	ldr	r3, [pc, #604]	; (800ecec <__kernel_rem_pio2+0x694>)
 800ea90:	2200      	movs	r2, #0
 800ea92:	f7f1 fdb1 	bl	80005f8 <__aeabi_dmul>
 800ea96:	460b      	mov	r3, r1
 800ea98:	4602      	mov	r2, r0
 800ea9a:	4639      	mov	r1, r7
 800ea9c:	4630      	mov	r0, r6
 800ea9e:	f7f1 fbf3 	bl	8000288 <__aeabi_dsub>
 800eaa2:	f7f2 f859 	bl	8000b58 <__aeabi_d2iz>
 800eaa6:	1c65      	adds	r5, r4, #1
 800eaa8:	ab0e      	add	r3, sp, #56	; 0x38
 800eaaa:	f10a 0a18 	add.w	sl, sl, #24
 800eaae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eab2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800eab6:	e720      	b.n	800e8fa <__kernel_rem_pio2+0x2a2>
 800eab8:	4630      	mov	r0, r6
 800eaba:	4639      	mov	r1, r7
 800eabc:	f7f2 f84c 	bl	8000b58 <__aeabi_d2iz>
 800eac0:	ab0e      	add	r3, sp, #56	; 0x38
 800eac2:	4625      	mov	r5, r4
 800eac4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eac8:	e717      	b.n	800e8fa <__kernel_rem_pio2+0x2a2>
 800eaca:	ab0e      	add	r3, sp, #56	; 0x38
 800eacc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ead0:	f7f1 fd28 	bl	8000524 <__aeabi_i2d>
 800ead4:	4632      	mov	r2, r6
 800ead6:	463b      	mov	r3, r7
 800ead8:	f7f1 fd8e 	bl	80005f8 <__aeabi_dmul>
 800eadc:	4b84      	ldr	r3, [pc, #528]	; (800ecf0 <__kernel_rem_pio2+0x698>)
 800eade:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800eae2:	2200      	movs	r2, #0
 800eae4:	4630      	mov	r0, r6
 800eae6:	4639      	mov	r1, r7
 800eae8:	f7f1 fd86 	bl	80005f8 <__aeabi_dmul>
 800eaec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eaf0:	4606      	mov	r6, r0
 800eaf2:	460f      	mov	r7, r1
 800eaf4:	e70f      	b.n	800e916 <__kernel_rem_pio2+0x2be>
 800eaf6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800eafa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800eafe:	f7f1 fd7b 	bl	80005f8 <__aeabi_dmul>
 800eb02:	4602      	mov	r2, r0
 800eb04:	460b      	mov	r3, r1
 800eb06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb0a:	f7f1 fbbf 	bl	800028c <__adddf3>
 800eb0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb12:	f108 0801 	add.w	r8, r8, #1
 800eb16:	9b02      	ldr	r3, [sp, #8]
 800eb18:	4598      	cmp	r8, r3
 800eb1a:	dc01      	bgt.n	800eb20 <__kernel_rem_pio2+0x4c8>
 800eb1c:	45b8      	cmp	r8, r7
 800eb1e:	ddea      	ble.n	800eaf6 <__kernel_rem_pio2+0x49e>
 800eb20:	ed9d 7b06 	vldr	d7, [sp, #24]
 800eb24:	ab4a      	add	r3, sp, #296	; 0x128
 800eb26:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800eb2a:	ed87 7b00 	vstr	d7, [r7]
 800eb2e:	3e01      	subs	r6, #1
 800eb30:	e6f8      	b.n	800e924 <__kernel_rem_pio2+0x2cc>
 800eb32:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800eb34:	2b02      	cmp	r3, #2
 800eb36:	dc0b      	bgt.n	800eb50 <__kernel_rem_pio2+0x4f8>
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	dc35      	bgt.n	800eba8 <__kernel_rem_pio2+0x550>
 800eb3c:	d059      	beq.n	800ebf2 <__kernel_rem_pio2+0x59a>
 800eb3e:	9b04      	ldr	r3, [sp, #16]
 800eb40:	f003 0007 	and.w	r0, r3, #7
 800eb44:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800eb48:	ecbd 8b02 	vpop	{d8}
 800eb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb50:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800eb52:	2b03      	cmp	r3, #3
 800eb54:	d1f3      	bne.n	800eb3e <__kernel_rem_pio2+0x4e6>
 800eb56:	ab4a      	add	r3, sp, #296	; 0x128
 800eb58:	4423      	add	r3, r4
 800eb5a:	9306      	str	r3, [sp, #24]
 800eb5c:	461c      	mov	r4, r3
 800eb5e:	469a      	mov	sl, r3
 800eb60:	9502      	str	r5, [sp, #8]
 800eb62:	9b02      	ldr	r3, [sp, #8]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	f1aa 0a08 	sub.w	sl, sl, #8
 800eb6a:	dc6b      	bgt.n	800ec44 <__kernel_rem_pio2+0x5ec>
 800eb6c:	46aa      	mov	sl, r5
 800eb6e:	f1ba 0f01 	cmp.w	sl, #1
 800eb72:	f1a4 0408 	sub.w	r4, r4, #8
 800eb76:	f300 8085 	bgt.w	800ec84 <__kernel_rem_pio2+0x62c>
 800eb7a:	9c06      	ldr	r4, [sp, #24]
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	3408      	adds	r4, #8
 800eb80:	2100      	movs	r1, #0
 800eb82:	2d01      	cmp	r5, #1
 800eb84:	f300 809d 	bgt.w	800ecc2 <__kernel_rem_pio2+0x66a>
 800eb88:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800eb8c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800eb90:	f1bb 0f00 	cmp.w	fp, #0
 800eb94:	f040 809b 	bne.w	800ecce <__kernel_rem_pio2+0x676>
 800eb98:	9b01      	ldr	r3, [sp, #4]
 800eb9a:	e9c3 5600 	strd	r5, r6, [r3]
 800eb9e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800eba2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800eba6:	e7ca      	b.n	800eb3e <__kernel_rem_pio2+0x4e6>
 800eba8:	3408      	adds	r4, #8
 800ebaa:	ab4a      	add	r3, sp, #296	; 0x128
 800ebac:	441c      	add	r4, r3
 800ebae:	462e      	mov	r6, r5
 800ebb0:	2000      	movs	r0, #0
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	2e00      	cmp	r6, #0
 800ebb6:	da36      	bge.n	800ec26 <__kernel_rem_pio2+0x5ce>
 800ebb8:	f1bb 0f00 	cmp.w	fp, #0
 800ebbc:	d039      	beq.n	800ec32 <__kernel_rem_pio2+0x5da>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebc4:	9c01      	ldr	r4, [sp, #4]
 800ebc6:	e9c4 2300 	strd	r2, r3, [r4]
 800ebca:	4602      	mov	r2, r0
 800ebcc:	460b      	mov	r3, r1
 800ebce:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ebd2:	f7f1 fb59 	bl	8000288 <__aeabi_dsub>
 800ebd6:	ae4c      	add	r6, sp, #304	; 0x130
 800ebd8:	2401      	movs	r4, #1
 800ebda:	42a5      	cmp	r5, r4
 800ebdc:	da2c      	bge.n	800ec38 <__kernel_rem_pio2+0x5e0>
 800ebde:	f1bb 0f00 	cmp.w	fp, #0
 800ebe2:	d002      	beq.n	800ebea <__kernel_rem_pio2+0x592>
 800ebe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebe8:	4619      	mov	r1, r3
 800ebea:	9b01      	ldr	r3, [sp, #4]
 800ebec:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ebf0:	e7a5      	b.n	800eb3e <__kernel_rem_pio2+0x4e6>
 800ebf2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ebf6:	eb0d 0403 	add.w	r4, sp, r3
 800ebfa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ebfe:	2000      	movs	r0, #0
 800ec00:	2100      	movs	r1, #0
 800ec02:	2d00      	cmp	r5, #0
 800ec04:	da09      	bge.n	800ec1a <__kernel_rem_pio2+0x5c2>
 800ec06:	f1bb 0f00 	cmp.w	fp, #0
 800ec0a:	d002      	beq.n	800ec12 <__kernel_rem_pio2+0x5ba>
 800ec0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec10:	4619      	mov	r1, r3
 800ec12:	9b01      	ldr	r3, [sp, #4]
 800ec14:	e9c3 0100 	strd	r0, r1, [r3]
 800ec18:	e791      	b.n	800eb3e <__kernel_rem_pio2+0x4e6>
 800ec1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ec1e:	f7f1 fb35 	bl	800028c <__adddf3>
 800ec22:	3d01      	subs	r5, #1
 800ec24:	e7ed      	b.n	800ec02 <__kernel_rem_pio2+0x5aa>
 800ec26:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ec2a:	f7f1 fb2f 	bl	800028c <__adddf3>
 800ec2e:	3e01      	subs	r6, #1
 800ec30:	e7c0      	b.n	800ebb4 <__kernel_rem_pio2+0x55c>
 800ec32:	4602      	mov	r2, r0
 800ec34:	460b      	mov	r3, r1
 800ec36:	e7c5      	b.n	800ebc4 <__kernel_rem_pio2+0x56c>
 800ec38:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ec3c:	f7f1 fb26 	bl	800028c <__adddf3>
 800ec40:	3401      	adds	r4, #1
 800ec42:	e7ca      	b.n	800ebda <__kernel_rem_pio2+0x582>
 800ec44:	e9da 8900 	ldrd	r8, r9, [sl]
 800ec48:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ec4c:	9b02      	ldr	r3, [sp, #8]
 800ec4e:	3b01      	subs	r3, #1
 800ec50:	9302      	str	r3, [sp, #8]
 800ec52:	4632      	mov	r2, r6
 800ec54:	463b      	mov	r3, r7
 800ec56:	4640      	mov	r0, r8
 800ec58:	4649      	mov	r1, r9
 800ec5a:	f7f1 fb17 	bl	800028c <__adddf3>
 800ec5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ec62:	4602      	mov	r2, r0
 800ec64:	460b      	mov	r3, r1
 800ec66:	4640      	mov	r0, r8
 800ec68:	4649      	mov	r1, r9
 800ec6a:	f7f1 fb0d 	bl	8000288 <__aeabi_dsub>
 800ec6e:	4632      	mov	r2, r6
 800ec70:	463b      	mov	r3, r7
 800ec72:	f7f1 fb0b 	bl	800028c <__adddf3>
 800ec76:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ec7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec7e:	ed8a 7b00 	vstr	d7, [sl]
 800ec82:	e76e      	b.n	800eb62 <__kernel_rem_pio2+0x50a>
 800ec84:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ec88:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ec8c:	4640      	mov	r0, r8
 800ec8e:	4632      	mov	r2, r6
 800ec90:	463b      	mov	r3, r7
 800ec92:	4649      	mov	r1, r9
 800ec94:	f7f1 fafa 	bl	800028c <__adddf3>
 800ec98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	460b      	mov	r3, r1
 800eca0:	4640      	mov	r0, r8
 800eca2:	4649      	mov	r1, r9
 800eca4:	f7f1 faf0 	bl	8000288 <__aeabi_dsub>
 800eca8:	4632      	mov	r2, r6
 800ecaa:	463b      	mov	r3, r7
 800ecac:	f7f1 faee 	bl	800028c <__adddf3>
 800ecb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ecb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ecb8:	ed84 7b00 	vstr	d7, [r4]
 800ecbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecc0:	e755      	b.n	800eb6e <__kernel_rem_pio2+0x516>
 800ecc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ecc6:	f7f1 fae1 	bl	800028c <__adddf3>
 800ecca:	3d01      	subs	r5, #1
 800eccc:	e759      	b.n	800eb82 <__kernel_rem_pio2+0x52a>
 800ecce:	9b01      	ldr	r3, [sp, #4]
 800ecd0:	9a01      	ldr	r2, [sp, #4]
 800ecd2:	601d      	str	r5, [r3, #0]
 800ecd4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ecd8:	605c      	str	r4, [r3, #4]
 800ecda:	609f      	str	r7, [r3, #8]
 800ecdc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ece0:	60d3      	str	r3, [r2, #12]
 800ece2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ece6:	6110      	str	r0, [r2, #16]
 800ece8:	6153      	str	r3, [r2, #20]
 800ecea:	e728      	b.n	800eb3e <__kernel_rem_pio2+0x4e6>
 800ecec:	41700000 	.word	0x41700000
 800ecf0:	3e700000 	.word	0x3e700000
 800ecf4:	00000000 	.word	0x00000000

0800ecf8 <__kernel_sin>:
 800ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfc:	ed2d 8b04 	vpush	{d8-d9}
 800ed00:	eeb0 8a41 	vmov.f32	s16, s2
 800ed04:	eef0 8a61 	vmov.f32	s17, s3
 800ed08:	ec55 4b10 	vmov	r4, r5, d0
 800ed0c:	b083      	sub	sp, #12
 800ed0e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ed12:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ed16:	9001      	str	r0, [sp, #4]
 800ed18:	da06      	bge.n	800ed28 <__kernel_sin+0x30>
 800ed1a:	ee10 0a10 	vmov	r0, s0
 800ed1e:	4629      	mov	r1, r5
 800ed20:	f7f1 ff1a 	bl	8000b58 <__aeabi_d2iz>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d051      	beq.n	800edcc <__kernel_sin+0xd4>
 800ed28:	4622      	mov	r2, r4
 800ed2a:	462b      	mov	r3, r5
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	4629      	mov	r1, r5
 800ed30:	f7f1 fc62 	bl	80005f8 <__aeabi_dmul>
 800ed34:	4682      	mov	sl, r0
 800ed36:	468b      	mov	fp, r1
 800ed38:	4602      	mov	r2, r0
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	4629      	mov	r1, r5
 800ed40:	f7f1 fc5a 	bl	80005f8 <__aeabi_dmul>
 800ed44:	a341      	add	r3, pc, #260	; (adr r3, 800ee4c <__kernel_sin+0x154>)
 800ed46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4a:	4680      	mov	r8, r0
 800ed4c:	4689      	mov	r9, r1
 800ed4e:	4650      	mov	r0, sl
 800ed50:	4659      	mov	r1, fp
 800ed52:	f7f1 fc51 	bl	80005f8 <__aeabi_dmul>
 800ed56:	a33f      	add	r3, pc, #252	; (adr r3, 800ee54 <__kernel_sin+0x15c>)
 800ed58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5c:	f7f1 fa94 	bl	8000288 <__aeabi_dsub>
 800ed60:	4652      	mov	r2, sl
 800ed62:	465b      	mov	r3, fp
 800ed64:	f7f1 fc48 	bl	80005f8 <__aeabi_dmul>
 800ed68:	a33c      	add	r3, pc, #240	; (adr r3, 800ee5c <__kernel_sin+0x164>)
 800ed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6e:	f7f1 fa8d 	bl	800028c <__adddf3>
 800ed72:	4652      	mov	r2, sl
 800ed74:	465b      	mov	r3, fp
 800ed76:	f7f1 fc3f 	bl	80005f8 <__aeabi_dmul>
 800ed7a:	a33a      	add	r3, pc, #232	; (adr r3, 800ee64 <__kernel_sin+0x16c>)
 800ed7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed80:	f7f1 fa82 	bl	8000288 <__aeabi_dsub>
 800ed84:	4652      	mov	r2, sl
 800ed86:	465b      	mov	r3, fp
 800ed88:	f7f1 fc36 	bl	80005f8 <__aeabi_dmul>
 800ed8c:	a337      	add	r3, pc, #220	; (adr r3, 800ee6c <__kernel_sin+0x174>)
 800ed8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed92:	f7f1 fa7b 	bl	800028c <__adddf3>
 800ed96:	9b01      	ldr	r3, [sp, #4]
 800ed98:	4606      	mov	r6, r0
 800ed9a:	460f      	mov	r7, r1
 800ed9c:	b9eb      	cbnz	r3, 800edda <__kernel_sin+0xe2>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	460b      	mov	r3, r1
 800eda2:	4650      	mov	r0, sl
 800eda4:	4659      	mov	r1, fp
 800eda6:	f7f1 fc27 	bl	80005f8 <__aeabi_dmul>
 800edaa:	a325      	add	r3, pc, #148	; (adr r3, 800ee40 <__kernel_sin+0x148>)
 800edac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb0:	f7f1 fa6a 	bl	8000288 <__aeabi_dsub>
 800edb4:	4642      	mov	r2, r8
 800edb6:	464b      	mov	r3, r9
 800edb8:	f7f1 fc1e 	bl	80005f8 <__aeabi_dmul>
 800edbc:	4602      	mov	r2, r0
 800edbe:	460b      	mov	r3, r1
 800edc0:	4620      	mov	r0, r4
 800edc2:	4629      	mov	r1, r5
 800edc4:	f7f1 fa62 	bl	800028c <__adddf3>
 800edc8:	4604      	mov	r4, r0
 800edca:	460d      	mov	r5, r1
 800edcc:	ec45 4b10 	vmov	d0, r4, r5
 800edd0:	b003      	add	sp, #12
 800edd2:	ecbd 8b04 	vpop	{d8-d9}
 800edd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edda:	4b1b      	ldr	r3, [pc, #108]	; (800ee48 <__kernel_sin+0x150>)
 800eddc:	ec51 0b18 	vmov	r0, r1, d8
 800ede0:	2200      	movs	r2, #0
 800ede2:	f7f1 fc09 	bl	80005f8 <__aeabi_dmul>
 800ede6:	4632      	mov	r2, r6
 800ede8:	ec41 0b19 	vmov	d9, r0, r1
 800edec:	463b      	mov	r3, r7
 800edee:	4640      	mov	r0, r8
 800edf0:	4649      	mov	r1, r9
 800edf2:	f7f1 fc01 	bl	80005f8 <__aeabi_dmul>
 800edf6:	4602      	mov	r2, r0
 800edf8:	460b      	mov	r3, r1
 800edfa:	ec51 0b19 	vmov	r0, r1, d9
 800edfe:	f7f1 fa43 	bl	8000288 <__aeabi_dsub>
 800ee02:	4652      	mov	r2, sl
 800ee04:	465b      	mov	r3, fp
 800ee06:	f7f1 fbf7 	bl	80005f8 <__aeabi_dmul>
 800ee0a:	ec53 2b18 	vmov	r2, r3, d8
 800ee0e:	f7f1 fa3b 	bl	8000288 <__aeabi_dsub>
 800ee12:	a30b      	add	r3, pc, #44	; (adr r3, 800ee40 <__kernel_sin+0x148>)
 800ee14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee18:	4606      	mov	r6, r0
 800ee1a:	460f      	mov	r7, r1
 800ee1c:	4640      	mov	r0, r8
 800ee1e:	4649      	mov	r1, r9
 800ee20:	f7f1 fbea 	bl	80005f8 <__aeabi_dmul>
 800ee24:	4602      	mov	r2, r0
 800ee26:	460b      	mov	r3, r1
 800ee28:	4630      	mov	r0, r6
 800ee2a:	4639      	mov	r1, r7
 800ee2c:	f7f1 fa2e 	bl	800028c <__adddf3>
 800ee30:	4602      	mov	r2, r0
 800ee32:	460b      	mov	r3, r1
 800ee34:	4620      	mov	r0, r4
 800ee36:	4629      	mov	r1, r5
 800ee38:	f7f1 fa26 	bl	8000288 <__aeabi_dsub>
 800ee3c:	e7c4      	b.n	800edc8 <__kernel_sin+0xd0>
 800ee3e:	bf00      	nop
 800ee40:	55555549 	.word	0x55555549
 800ee44:	3fc55555 	.word	0x3fc55555
 800ee48:	3fe00000 	.word	0x3fe00000
 800ee4c:	5acfd57c 	.word	0x5acfd57c
 800ee50:	3de5d93a 	.word	0x3de5d93a
 800ee54:	8a2b9ceb 	.word	0x8a2b9ceb
 800ee58:	3e5ae5e6 	.word	0x3e5ae5e6
 800ee5c:	57b1fe7d 	.word	0x57b1fe7d
 800ee60:	3ec71de3 	.word	0x3ec71de3
 800ee64:	19c161d5 	.word	0x19c161d5
 800ee68:	3f2a01a0 	.word	0x3f2a01a0
 800ee6c:	1110f8a6 	.word	0x1110f8a6
 800ee70:	3f811111 	.word	0x3f811111

0800ee74 <with_errno>:
 800ee74:	b570      	push	{r4, r5, r6, lr}
 800ee76:	4604      	mov	r4, r0
 800ee78:	460d      	mov	r5, r1
 800ee7a:	4616      	mov	r6, r2
 800ee7c:	f7fd fd0e 	bl	800c89c <__errno>
 800ee80:	4629      	mov	r1, r5
 800ee82:	6006      	str	r6, [r0, #0]
 800ee84:	4620      	mov	r0, r4
 800ee86:	bd70      	pop	{r4, r5, r6, pc}

0800ee88 <xflow>:
 800ee88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee8a:	4614      	mov	r4, r2
 800ee8c:	461d      	mov	r5, r3
 800ee8e:	b108      	cbz	r0, 800ee94 <xflow+0xc>
 800ee90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ee94:	e9cd 2300 	strd	r2, r3, [sp]
 800ee98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	4629      	mov	r1, r5
 800eea0:	f7f1 fbaa 	bl	80005f8 <__aeabi_dmul>
 800eea4:	2222      	movs	r2, #34	; 0x22
 800eea6:	b003      	add	sp, #12
 800eea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eeac:	f7ff bfe2 	b.w	800ee74 <with_errno>

0800eeb0 <__math_uflow>:
 800eeb0:	b508      	push	{r3, lr}
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eeb8:	f7ff ffe6 	bl	800ee88 <xflow>
 800eebc:	ec41 0b10 	vmov	d0, r0, r1
 800eec0:	bd08      	pop	{r3, pc}

0800eec2 <__math_oflow>:
 800eec2:	b508      	push	{r3, lr}
 800eec4:	2200      	movs	r2, #0
 800eec6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800eeca:	f7ff ffdd 	bl	800ee88 <xflow>
 800eece:	ec41 0b10 	vmov	d0, r0, r1
 800eed2:	bd08      	pop	{r3, pc}

0800eed4 <fabs>:
 800eed4:	ec51 0b10 	vmov	r0, r1, d0
 800eed8:	ee10 2a10 	vmov	r2, s0
 800eedc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eee0:	ec43 2b10 	vmov	d0, r2, r3
 800eee4:	4770      	bx	lr

0800eee6 <finite>:
 800eee6:	b082      	sub	sp, #8
 800eee8:	ed8d 0b00 	vstr	d0, [sp]
 800eeec:	9801      	ldr	r0, [sp, #4]
 800eeee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800eef2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800eef6:	0fc0      	lsrs	r0, r0, #31
 800eef8:	b002      	add	sp, #8
 800eefa:	4770      	bx	lr
 800eefc:	0000      	movs	r0, r0
	...

0800ef00 <floor>:
 800ef00:	ec51 0b10 	vmov	r0, r1, d0
 800ef04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef08:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ef0c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ef10:	2e13      	cmp	r6, #19
 800ef12:	ee10 5a10 	vmov	r5, s0
 800ef16:	ee10 8a10 	vmov	r8, s0
 800ef1a:	460c      	mov	r4, r1
 800ef1c:	dc32      	bgt.n	800ef84 <floor+0x84>
 800ef1e:	2e00      	cmp	r6, #0
 800ef20:	da14      	bge.n	800ef4c <floor+0x4c>
 800ef22:	a333      	add	r3, pc, #204	; (adr r3, 800eff0 <floor+0xf0>)
 800ef24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef28:	f7f1 f9b0 	bl	800028c <__adddf3>
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	2300      	movs	r3, #0
 800ef30:	f7f1 fdf2 	bl	8000b18 <__aeabi_dcmpgt>
 800ef34:	b138      	cbz	r0, 800ef46 <floor+0x46>
 800ef36:	2c00      	cmp	r4, #0
 800ef38:	da57      	bge.n	800efea <floor+0xea>
 800ef3a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ef3e:	431d      	orrs	r5, r3
 800ef40:	d001      	beq.n	800ef46 <floor+0x46>
 800ef42:	4c2d      	ldr	r4, [pc, #180]	; (800eff8 <floor+0xf8>)
 800ef44:	2500      	movs	r5, #0
 800ef46:	4621      	mov	r1, r4
 800ef48:	4628      	mov	r0, r5
 800ef4a:	e025      	b.n	800ef98 <floor+0x98>
 800ef4c:	4f2b      	ldr	r7, [pc, #172]	; (800effc <floor+0xfc>)
 800ef4e:	4137      	asrs	r7, r6
 800ef50:	ea01 0307 	and.w	r3, r1, r7
 800ef54:	4303      	orrs	r3, r0
 800ef56:	d01f      	beq.n	800ef98 <floor+0x98>
 800ef58:	a325      	add	r3, pc, #148	; (adr r3, 800eff0 <floor+0xf0>)
 800ef5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5e:	f7f1 f995 	bl	800028c <__adddf3>
 800ef62:	2200      	movs	r2, #0
 800ef64:	2300      	movs	r3, #0
 800ef66:	f7f1 fdd7 	bl	8000b18 <__aeabi_dcmpgt>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d0eb      	beq.n	800ef46 <floor+0x46>
 800ef6e:	2c00      	cmp	r4, #0
 800ef70:	bfbe      	ittt	lt
 800ef72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ef76:	fa43 f606 	asrlt.w	r6, r3, r6
 800ef7a:	19a4      	addlt	r4, r4, r6
 800ef7c:	ea24 0407 	bic.w	r4, r4, r7
 800ef80:	2500      	movs	r5, #0
 800ef82:	e7e0      	b.n	800ef46 <floor+0x46>
 800ef84:	2e33      	cmp	r6, #51	; 0x33
 800ef86:	dd0b      	ble.n	800efa0 <floor+0xa0>
 800ef88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ef8c:	d104      	bne.n	800ef98 <floor+0x98>
 800ef8e:	ee10 2a10 	vmov	r2, s0
 800ef92:	460b      	mov	r3, r1
 800ef94:	f7f1 f97a 	bl	800028c <__adddf3>
 800ef98:	ec41 0b10 	vmov	d0, r0, r1
 800ef9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800efa4:	f04f 33ff 	mov.w	r3, #4294967295
 800efa8:	fa23 f707 	lsr.w	r7, r3, r7
 800efac:	4207      	tst	r7, r0
 800efae:	d0f3      	beq.n	800ef98 <floor+0x98>
 800efb0:	a30f      	add	r3, pc, #60	; (adr r3, 800eff0 <floor+0xf0>)
 800efb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb6:	f7f1 f969 	bl	800028c <__adddf3>
 800efba:	2200      	movs	r2, #0
 800efbc:	2300      	movs	r3, #0
 800efbe:	f7f1 fdab 	bl	8000b18 <__aeabi_dcmpgt>
 800efc2:	2800      	cmp	r0, #0
 800efc4:	d0bf      	beq.n	800ef46 <floor+0x46>
 800efc6:	2c00      	cmp	r4, #0
 800efc8:	da02      	bge.n	800efd0 <floor+0xd0>
 800efca:	2e14      	cmp	r6, #20
 800efcc:	d103      	bne.n	800efd6 <floor+0xd6>
 800efce:	3401      	adds	r4, #1
 800efd0:	ea25 0507 	bic.w	r5, r5, r7
 800efd4:	e7b7      	b.n	800ef46 <floor+0x46>
 800efd6:	2301      	movs	r3, #1
 800efd8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800efdc:	fa03 f606 	lsl.w	r6, r3, r6
 800efe0:	4435      	add	r5, r6
 800efe2:	4545      	cmp	r5, r8
 800efe4:	bf38      	it	cc
 800efe6:	18e4      	addcc	r4, r4, r3
 800efe8:	e7f2      	b.n	800efd0 <floor+0xd0>
 800efea:	2500      	movs	r5, #0
 800efec:	462c      	mov	r4, r5
 800efee:	e7aa      	b.n	800ef46 <floor+0x46>
 800eff0:	8800759c 	.word	0x8800759c
 800eff4:	7e37e43c 	.word	0x7e37e43c
 800eff8:	bff00000 	.word	0xbff00000
 800effc:	000fffff 	.word	0x000fffff

0800f000 <scalbn>:
 800f000:	b570      	push	{r4, r5, r6, lr}
 800f002:	ec55 4b10 	vmov	r4, r5, d0
 800f006:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f00a:	4606      	mov	r6, r0
 800f00c:	462b      	mov	r3, r5
 800f00e:	b99a      	cbnz	r2, 800f038 <scalbn+0x38>
 800f010:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f014:	4323      	orrs	r3, r4
 800f016:	d036      	beq.n	800f086 <scalbn+0x86>
 800f018:	4b39      	ldr	r3, [pc, #228]	; (800f100 <scalbn+0x100>)
 800f01a:	4629      	mov	r1, r5
 800f01c:	ee10 0a10 	vmov	r0, s0
 800f020:	2200      	movs	r2, #0
 800f022:	f7f1 fae9 	bl	80005f8 <__aeabi_dmul>
 800f026:	4b37      	ldr	r3, [pc, #220]	; (800f104 <scalbn+0x104>)
 800f028:	429e      	cmp	r6, r3
 800f02a:	4604      	mov	r4, r0
 800f02c:	460d      	mov	r5, r1
 800f02e:	da10      	bge.n	800f052 <scalbn+0x52>
 800f030:	a32b      	add	r3, pc, #172	; (adr r3, 800f0e0 <scalbn+0xe0>)
 800f032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f036:	e03a      	b.n	800f0ae <scalbn+0xae>
 800f038:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f03c:	428a      	cmp	r2, r1
 800f03e:	d10c      	bne.n	800f05a <scalbn+0x5a>
 800f040:	ee10 2a10 	vmov	r2, s0
 800f044:	4620      	mov	r0, r4
 800f046:	4629      	mov	r1, r5
 800f048:	f7f1 f920 	bl	800028c <__adddf3>
 800f04c:	4604      	mov	r4, r0
 800f04e:	460d      	mov	r5, r1
 800f050:	e019      	b.n	800f086 <scalbn+0x86>
 800f052:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f056:	460b      	mov	r3, r1
 800f058:	3a36      	subs	r2, #54	; 0x36
 800f05a:	4432      	add	r2, r6
 800f05c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f060:	428a      	cmp	r2, r1
 800f062:	dd08      	ble.n	800f076 <scalbn+0x76>
 800f064:	2d00      	cmp	r5, #0
 800f066:	a120      	add	r1, pc, #128	; (adr r1, 800f0e8 <scalbn+0xe8>)
 800f068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f06c:	da1c      	bge.n	800f0a8 <scalbn+0xa8>
 800f06e:	a120      	add	r1, pc, #128	; (adr r1, 800f0f0 <scalbn+0xf0>)
 800f070:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f074:	e018      	b.n	800f0a8 <scalbn+0xa8>
 800f076:	2a00      	cmp	r2, #0
 800f078:	dd08      	ble.n	800f08c <scalbn+0x8c>
 800f07a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f07e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f082:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f086:	ec45 4b10 	vmov	d0, r4, r5
 800f08a:	bd70      	pop	{r4, r5, r6, pc}
 800f08c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f090:	da19      	bge.n	800f0c6 <scalbn+0xc6>
 800f092:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f096:	429e      	cmp	r6, r3
 800f098:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f09c:	dd0a      	ble.n	800f0b4 <scalbn+0xb4>
 800f09e:	a112      	add	r1, pc, #72	; (adr r1, 800f0e8 <scalbn+0xe8>)
 800f0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d1e2      	bne.n	800f06e <scalbn+0x6e>
 800f0a8:	a30f      	add	r3, pc, #60	; (adr r3, 800f0e8 <scalbn+0xe8>)
 800f0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ae:	f7f1 faa3 	bl	80005f8 <__aeabi_dmul>
 800f0b2:	e7cb      	b.n	800f04c <scalbn+0x4c>
 800f0b4:	a10a      	add	r1, pc, #40	; (adr r1, 800f0e0 <scalbn+0xe0>)
 800f0b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d0b8      	beq.n	800f030 <scalbn+0x30>
 800f0be:	a10e      	add	r1, pc, #56	; (adr r1, 800f0f8 <scalbn+0xf8>)
 800f0c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0c4:	e7b4      	b.n	800f030 <scalbn+0x30>
 800f0c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f0ca:	3236      	adds	r2, #54	; 0x36
 800f0cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f0d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	4b0c      	ldr	r3, [pc, #48]	; (800f108 <scalbn+0x108>)
 800f0d8:	2200      	movs	r2, #0
 800f0da:	e7e8      	b.n	800f0ae <scalbn+0xae>
 800f0dc:	f3af 8000 	nop.w
 800f0e0:	c2f8f359 	.word	0xc2f8f359
 800f0e4:	01a56e1f 	.word	0x01a56e1f
 800f0e8:	8800759c 	.word	0x8800759c
 800f0ec:	7e37e43c 	.word	0x7e37e43c
 800f0f0:	8800759c 	.word	0x8800759c
 800f0f4:	fe37e43c 	.word	0xfe37e43c
 800f0f8:	c2f8f359 	.word	0xc2f8f359
 800f0fc:	81a56e1f 	.word	0x81a56e1f
 800f100:	43500000 	.word	0x43500000
 800f104:	ffff3cb0 	.word	0xffff3cb0
 800f108:	3c900000 	.word	0x3c900000

0800f10c <_init>:
 800f10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10e:	bf00      	nop
 800f110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f112:	bc08      	pop	{r3}
 800f114:	469e      	mov	lr, r3
 800f116:	4770      	bx	lr

0800f118 <_fini>:
 800f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11a:	bf00      	nop
 800f11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f11e:	bc08      	pop	{r3}
 800f120:	469e      	mov	lr, r3
 800f122:	4770      	bx	lr
