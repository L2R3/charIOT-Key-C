
charIOT-Key-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800b470  0800b470  0001b470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7f8  0800b7f8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7f8  0800b7f8  0001b7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b800  0800b800  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b800  0800b800  0001b800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b804  0800b804  0001b804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800b808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019ec  200000a8  0800b8b0  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a94  0800b8b0  00021a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025bfe  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000448b  00000000  00000000  00045cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef8  00000000  00000000  0004a168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d60  00000000  00000000  0004c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a42  00000000  00000000  0004ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021fc4  00000000  00000000  00052802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efa90  00000000  00000000  000747c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164256  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f1c  00000000  00000000  001642a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b454 	.word	0x0800b454

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800b454 	.word	0x0800b454

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	rotationSteps(dreal, dimag);
 8000eb0:	4934      	ldr	r1, [pc, #208]	; (8000f84 <main+0xd8>)
 8000eb2:	4835      	ldr	r0, [pc, #212]	; (8000f88 <main+0xdc>)
 8000eb4:	f000 fc18 	bl	80016e8 <rotationSteps>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eb8:	f001 f8a7 	bl	800200a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ebc:	f000 f884 	bl	8000fc8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ec0:	f000 fa96 	bl	80013f0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ec4:	f000 fa64 	bl	8001390 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 8000ec8:	f000 f946 	bl	8001158 <MX_CAN1_Init>
	MX_I2C1_Init();
 8000ecc:	f000 f9b4 	bl	8001238 <MX_I2C1_Init>
	MX_ADC1_Init();
 8000ed0:	f000 f8de 	bl	8001090 <MX_ADC1_Init>
	MX_DAC1_Init();
 8000ed4:	f000 f974 	bl	80011c0 <MX_DAC1_Init>
	MX_TIM6_Init();
 8000ed8:	f000 f9ee 	bl	80012b8 <MX_TIM6_Init>
	MX_TIM7_Init();
 8000edc:	f000 fa22 	bl	8001324 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim7);
 8000ee0:	482a      	ldr	r0, [pc, #168]	; (8000f8c <main+0xe0>)
 8000ee2:	f004 f88b 	bl	8004ffc <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 8000ee6:	482a      	ldr	r0, [pc, #168]	; (8000f90 <main+0xe4>)
 8000ee8:	f004 f8d4 	bl	8005094 <HAL_TIM_Base_Start_IT>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000eec:	2100      	movs	r1, #0
 8000eee:	4829      	ldr	r0, [pc, #164]	; (8000f94 <main+0xe8>)
 8000ef0:	f002 f99c 	bl	800322c <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	4827      	ldr	r0, [pc, #156]	; (8000f94 <main+0xe8>)
 8000ef8:	f002 f998 	bl	800322c <HAL_DAC_Start>

	setOutMuxBit(DRST_BIT, GPIO_PIN_RESET);
 8000efc:	2304      	movs	r3, #4
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fb1a 	bl	800153c <setOutMuxBit>
	delayMicro(2);
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f000 fafd 	bl	8001508 <delayMicro>
	setOutMuxBit(DRST_BIT, GPIO_PIN_SET);
 8000f0e:	2304      	movs	r3, #4
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2101      	movs	r1, #1
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fb11 	bl	800153c <setOutMuxBit>
	HAL_Delay(1); // u8g2.begin();
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f001 f8ae 	bl	800207c <HAL_Delay>
	setOutMuxBit(DEN_BIT, GPIO_PIN_SET);
 8000f20:	2303      	movs	r3, #3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2101      	movs	r1, #1
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fb08 	bl	800153c <setOutMuxBit>

	serialPrintln("charIOT-Key-C");
 8000f2c:	481a      	ldr	r0, [pc, #104]	; (8000f98 <main+0xec>)
 8000f2e:	f000 facd 	bl	80014cc <serialPrintln>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000f32:	f005 f835 	bl	8005fa0 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of keysMutex */
	keysMutexHandle = osMutexNew(&keysMutex_attributes);
 8000f36:	4819      	ldr	r0, [pc, #100]	; (8000f9c <main+0xf0>)
 8000f38:	f005 f929 	bl	800618e <osMutexNew>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <main+0xf4>)
 8000f40:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	osMutexRelease(keysMutexHandle);
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <main+0xf4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f005 f9f2 	bl	8006330 <osMutexRelease>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000f4c:	4a15      	ldr	r2, [pc, #84]	; (8000fa4 <main+0xf8>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <main+0xfc>)
 8000f52:	f005 f86f 	bl	8006034 <osThreadNew>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a14      	ldr	r2, [pc, #80]	; (8000fac <main+0x100>)
 8000f5a:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of scanKeys */
	scanKeysHandle = osThreadNew(scanKeysTask, NULL, &scanKeys_attributes);
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <main+0x104>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <main+0x108>)
 8000f62:	f005 f867 	bl	8006034 <osThreadNew>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <main+0x10c>)
 8000f6a:	6013      	str	r3, [r2, #0]

	/* creation of displayUpdate */
	displayUpdateHandle = osThreadNew(displayUpdateTask, NULL,
 8000f6c:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <main+0x110>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <main+0x114>)
 8000f72:	f005 f85f 	bl	8006034 <osThreadNew>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <main+0x118>)
 8000f7a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000f7c:	f005 f834 	bl	8005fe8 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f80:	e7fe      	b.n	8000f80 <main+0xd4>
 8000f82:	bf00      	nop
 8000f84:	20000314 	.word	0x20000314
 8000f88:	200002e4 	.word	0x200002e4
 8000f8c:	20000204 	.word	0x20000204
 8000f90:	200001b8 	.word	0x200001b8
 8000f94:	20000150 	.word	0x20000150
 8000f98:	0800b4a4 	.word	0x0800b4a4
 8000f9c:	0800b538 	.word	0x0800b538
 8000fa0:	200002e0 	.word	0x200002e0
 8000fa4:	0800b4cc 	.word	0x0800b4cc
 8000fa8:	080017f5 	.word	0x080017f5
 8000fac:	200002d4 	.word	0x200002d4
 8000fb0:	0800b4f0 	.word	0x0800b4f0
 8000fb4:	08001805 	.word	0x08001805
 8000fb8:	200002d8 	.word	0x200002d8
 8000fbc:	0800b514 	.word	0x0800b514
 8000fc0:	08001855 	.word	0x08001855
 8000fc4:	200002dc 	.word	0x200002dc

08000fc8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b096      	sub	sp, #88	; 0x58
 8000fcc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	2244      	movs	r2, #68	; 0x44
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f008 fa42 	bl	8009460 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fee:	f002 fdf5 	bl	8003bdc <HAL_PWREx_ControlVoltageScaling>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000ff8:	f000 fd18 	bl	8001a2c <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000ffc:	f002 fdd0 	bl	8003ba0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <SystemClock_Config+0xc4>)
 8001002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001006:	4a21      	ldr	r2, [pc, #132]	; (800108c <SystemClock_Config+0xc4>)
 8001008:	f023 0318 	bic.w	r3, r3, #24
 800100c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8001010:	2314      	movs	r3, #20
 8001012:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001018:	2301      	movs	r3, #1
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001020:	2360      	movs	r3, #96	; 0x60
 8001022:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001024:	2302      	movs	r3, #2
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001028:	2301      	movs	r3, #1
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001030:	2328      	movs	r3, #40	; 0x28
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001034:	2307      	movs	r3, #7
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001038:	2302      	movs	r3, #2
 800103a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800103c:	2302      	movs	r3, #2
 800103e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4618      	mov	r0, r3
 8001046:	f002 fe1f 	bl	8003c88 <HAL_RCC_OscConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x8c>
		Error_Handler();
 8001050:	f000 fcec 	bl	8001a2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001054:	230f      	movs	r3, #15
 8001056:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001058:	2303      	movs	r3, #3
 800105a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001064:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800106a:	463b      	mov	r3, r7
 800106c:	2104      	movs	r1, #4
 800106e:	4618      	mov	r0, r3
 8001070:	f003 fa1e 	bl	80044b0 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xb6>
		Error_Handler();
 800107a:	f000 fcd7 	bl	8001a2c <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 800107e:	f003 fe63 	bl	8004d48 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001082:	bf00      	nop
 8001084:	3758      	adds	r7, #88	; 0x58
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001096:	463b      	mov	r3, r7
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <MX_ADC1_Init+0xbc>)
 80010a8:	4a29      	ldr	r2, [pc, #164]	; (8001150 <MX_ADC1_Init+0xc0>)
 80010aa:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <MX_ADC1_Init+0xbc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b2:	4b26      	ldr	r3, [pc, #152]	; (800114c <MX_ADC1_Init+0xbc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <MX_ADC1_Init+0xbc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010be:	4b23      	ldr	r3, [pc, #140]	; (800114c <MX_ADC1_Init+0xbc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_ADC1_Init+0xbc>)
 80010c6:	2204      	movs	r2, #4
 80010c8:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <MX_ADC1_Init+0xbc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <MX_ADC1_Init+0xbc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_ADC1_Init+0xbc>)
 80010d8:	2201      	movs	r2, #1
 80010da:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_ADC1_Init+0xbc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_ADC1_Init+0xbc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_ADC1_Init+0xbc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_ADC1_Init+0xbc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_ADC1_Init+0xbc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <MX_ADC1_Init+0xbc>)
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001106:	4811      	ldr	r0, [pc, #68]	; (800114c <MX_ADC1_Init+0xbc>)
 8001108:	f001 f968 	bl	80023dc <HAL_ADC_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0x86>
		Error_Handler();
 8001112:	f000 fc8b 	bl	8001a2c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_ADC1_Init+0xc4>)
 8001118:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800111a:	2306      	movs	r3, #6
 800111c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001122:	237f      	movs	r3, #127	; 0x7f
 8001124:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001126:	2304      	movs	r3, #4
 8001128:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800112e:	463b      	mov	r3, r7
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <MX_ADC1_Init+0xbc>)
 8001134:	f001 fa9a 	bl	800266c <HAL_ADC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0xb2>
		Error_Handler();
 800113e:	f000 fc75 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000c4 	.word	0x200000c4
 8001150:	50040000 	.word	0x50040000
 8001154:	14f00020 	.word	0x14f00020

08001158 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_CAN1_Init+0x60>)
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <MX_CAN1_Init+0x64>)
 8001160:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_CAN1_Init+0x60>)
 8001164:	2210      	movs	r2, #16
 8001166:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_CAN1_Init+0x60>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_CAN1_Init+0x60>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_CAN1_Init+0x60>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_CAN1_Init+0x60>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_CAN1_Init+0x60>)
 8001182:	2200      	movs	r2, #0
 8001184:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_CAN1_Init+0x60>)
 8001188:	2200      	movs	r2, #0
 800118a:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_CAN1_Init+0x60>)
 800118e:	2200      	movs	r2, #0
 8001190:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_CAN1_Init+0x60>)
 8001194:	2200      	movs	r2, #0
 8001196:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_CAN1_Init+0x60>)
 800119a:	2200      	movs	r2, #0
 800119c:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_CAN1_Init+0x60>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_CAN1_Init+0x60>)
 80011a6:	f001 fe41 	bl	8002e2c <HAL_CAN_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_CAN1_Init+0x5c>
		Error_Handler();
 80011b0:	f000 fc3c 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000128 	.word	0x20000128
 80011bc:	40006400 	.word	0x40006400

080011c0 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2224      	movs	r2, #36	; 0x24
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f008 f947 	bl	8009460 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_DAC1_Init+0x70>)
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <MX_DAC1_Init+0x74>)
 80011d6:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80011d8:	4815      	ldr	r0, [pc, #84]	; (8001230 <MX_DAC1_Init+0x70>)
 80011da:	f002 f805 	bl	80031e8 <HAL_DAC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_DAC1_Init+0x28>
		Error_Handler();
 80011e4:	f000 fc22 	bl	8001a2c <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80011ec:	2304      	movs	r3, #4
 80011ee:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80011f4:	2301      	movs	r3, #1
 80011f6:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	480b      	ldr	r0, [pc, #44]	; (8001230 <MX_DAC1_Init+0x70>)
 8001204:	f002 f8e8 	bl	80033d8 <HAL_DAC_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_DAC1_Init+0x52>
		Error_Handler();
 800120e:	f000 fc0d 	bl	8001a2c <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2210      	movs	r2, #16
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_DAC1_Init+0x70>)
 800121a:	f002 f8dd 	bl	80033d8 <HAL_DAC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_DAC1_Init+0x68>
		Error_Handler();
 8001224:	f000 fc02 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000150 	.word	0x20000150
 8001234:	40007400 	.word	0x40007400

08001238 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_I2C1_Init+0x74>)
 800123e:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <MX_I2C1_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00909BEB;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_I2C1_Init+0x74>)
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <MX_I2C1_Init+0x7c>)
 8001246:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_I2C1_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_I2C1_Init+0x74>)
 8001250:	2201      	movs	r2, #1
 8001252:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_I2C1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_I2C1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_I2C1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_I2C1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_I2C1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001272:	480e      	ldr	r0, [pc, #56]	; (80012ac <MX_I2C1_Init+0x74>)
 8001274:	f002 fb6e 	bl	8003954 <HAL_I2C_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_I2C1_Init+0x4a>
		Error_Handler();
 800127e:	f000 fbd5 	bl	8001a2c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001282:	2100      	movs	r1, #0
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <MX_I2C1_Init+0x74>)
 8001286:	f002 fbf4 	bl	8003a72 <HAL_I2CEx_ConfigAnalogFilter>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001290:	f000 fbcc 	bl	8001a2c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001294:	2100      	movs	r1, #0
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_I2C1_Init+0x74>)
 8001298:	f002 fc36 	bl	8003b08 <HAL_I2CEx_ConfigDigitalFilter>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80012a2:	f000 fbc3 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000164 	.word	0x20000164
 80012b0:	40005400 	.word	0x40005400
 80012b4:	00909beb 	.word	0x00909beb

080012b8 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_TIM6_Init+0x64>)
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <MX_TIM6_Init+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_TIM6_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_TIM6_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 3636 - 1;
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_TIM6_Init+0x64>)
 80012dc:	f640 6233 	movw	r2, #3635	; 0xe33
 80012e0:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_TIM6_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_TIM6_Init+0x64>)
 80012ea:	f003 fe2f 	bl	8004f4c <HAL_TIM_Base_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM6_Init+0x40>
		Error_Handler();
 80012f4:	f000 fb9a 	bl	8001a2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012f8:	2320      	movs	r3, #32
 80012fa:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_TIM6_Init+0x64>)
 8001306:	f004 f8c5 	bl	8005494 <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM6_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001310:	f000 fb8c 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200001b8 	.word	0x200001b8
 8001320:	40001000 	.word	0x40001000

08001324 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_TIM7_Init+0x64>)
 8001336:	4a15      	ldr	r2, [pc, #84]	; (800138c <MX_TIM7_Init+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 80 - 1;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_TIM7_Init+0x64>)
 800133c:	224f      	movs	r2, #79	; 0x4f
 800133e:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_TIM7_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 1000 - 1;
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <MX_TIM7_Init+0x64>)
 8001348:	f240 32e7 	movw	r2, #999	; 0x3e7
 800134c:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_TIM7_Init+0x64>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <MX_TIM7_Init+0x64>)
 8001356:	f003 fdf9 	bl	8004f4c <HAL_TIM_Base_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM7_Init+0x40>
		Error_Handler();
 8001360:	f000 fb64 	bl	8001a2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_TIM7_Init+0x64>)
 8001372:	f004 f88f 	bl	8005494 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800137c:	f000 fb56 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000204 	.word	0x20000204
 800138c:	40001400 	.word	0x40001400

08001390 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 8001396:	4a15      	ldr	r2, [pc, #84]	; (80013ec <MX_USART2_UART_Init+0x5c>)
 8001398:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013d4:	f004 f8e2 	bl	800559c <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80013de:	f000 fb25 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000250 	.word	0x20000250
 80013ec:	40004400 	.word	0x40004400

080013f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <MX_GPIO_Init+0xd4>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	4a2e      	ldr	r2, [pc, #184]	; (80014c4 <MX_GPIO_Init+0xd4>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001412:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <MX_GPIO_Init+0xd4>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <MX_GPIO_Init+0xd4>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <MX_GPIO_Init+0xd4>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_GPIO_Init+0xd4>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <MX_GPIO_Init+0xd4>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <MX_GPIO_Init+0xd4>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <MX_GPIO_Init+0xd4>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2140      	movs	r1, #64	; 0x40
 8001452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001456:	f002 fa65 	bl	8003924 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800145a:	2200      	movs	r2, #0
 800145c:	213b      	movs	r1, #59	; 0x3b
 800145e:	481a      	ldr	r0, [pc, #104]	; (80014c8 <MX_GPIO_Init+0xd8>)
 8001460:	f002 fa60 	bl	8003924 <HAL_GPIO_WritePin>
			RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin | OUT_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : C0_Pin C2_Pin C1_Pin C3_Pin */
	GPIO_InitStruct.Pin = C0_Pin | C2_Pin | C1_Pin | C3_Pin;
 8001464:	f44f 7362 	mov.w	r3, #904	; 0x388
 8001468:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4619      	mov	r1, r3
 8001478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147c:	f002 f8d0 	bl	8003620 <HAL_GPIO_Init>

	/*Configure GPIO pin : REN_Pin */
	GPIO_InitStruct.Pin = REN_Pin;
 8001480:	2340      	movs	r3, #64	; 0x40
 8001482:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(REN_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f002 f8c1 	bl	8003620 <HAL_GPIO_Init>

	/*Configure GPIO pins : RA0_Pin RA1_Pin LED_BUILTIN_Pin RA2_Pin
	 OUT_Pin */
	GPIO_InitStruct.Pin = RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin
 800149e:	233b      	movs	r3, #59	; 0x3b
 80014a0:	60fb      	str	r3, [r7, #12]
			| OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_GPIO_Init+0xd8>)
 80014b6:	f002 f8b3 	bl	8003620 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80014ba:	bf00      	nop
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000
 80014c8:	48000400 	.word	0x48000400

080014cc <serialPrintln>:

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);

}

void serialPrintln(char val[]) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7fe fe7b 	bl	80001d0 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	230a      	movs	r3, #10
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4808      	ldr	r0, [pc, #32]	; (8001504 <serialPrintln+0x38>)
 80014e4:	f004 f8a8 	bl	8005638 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80014e8:	f640 230d 	movw	r3, #2573	; 0xa0d
 80014ec:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) newline, 2, 10);
 80014ee:	f107 010c 	add.w	r1, r7, #12
 80014f2:	230a      	movs	r3, #10
 80014f4:	2202      	movs	r2, #2
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <serialPrintln+0x38>)
 80014f8:	f004 f89e 	bl	8005638 <HAL_UART_Transmit>

}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000250 	.word	0x20000250

08001508 <delayMicro>:

void delayMicro(uint16_t us) {
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]

	htim7.Instance->CNT = 0;
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <delayMicro+0x30>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
	while (htim7.Instance->CNT < us)
 800151a:	bf00      	nop
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <delayMicro+0x30>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3f9      	bcc.n	800151c <delayMicro+0x14>
		;

}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000204 	.word	0x20000204

0800153c <setOutMuxBit>:

void setOutMuxBit(const uint8_t bitIdx, const bool value) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	460a      	mov	r2, r1
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	4613      	mov	r3, r2
 800154a:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2140      	movs	r1, #64	; 0x40
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f002 f9e6 	bl	8003924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, bitIdx & 0x01);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	2101      	movs	r1, #1
 8001564:	4816      	ldr	r0, [pc, #88]	; (80015c0 <setOutMuxBit+0x84>)
 8001566:	f002 f9dd 	bl	8003924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, bitIdx & 0x02);
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	b2db      	uxtb	r3, r3
 8001572:	461a      	mov	r2, r3
 8001574:	2102      	movs	r1, #2
 8001576:	4812      	ldr	r0, [pc, #72]	; (80015c0 <setOutMuxBit+0x84>)
 8001578:	f002 f9d4 	bl	8003924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, bitIdx & 0x04);
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	b2db      	uxtb	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	2110      	movs	r1, #16
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <setOutMuxBit+0x84>)
 800158a:	f002 f9cb 	bl	8003924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, value);
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	461a      	mov	r2, r3
 8001592:	2120      	movs	r1, #32
 8001594:	480a      	ldr	r0, [pc, #40]	; (80015c0 <setOutMuxBit+0x84>)
 8001596:	f002 f9c5 	bl	8003924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 800159a:	2201      	movs	r2, #1
 800159c:	2140      	movs	r1, #64	; 0x40
 800159e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a2:	f002 f9bf 	bl	8003924 <HAL_GPIO_WritePin>
	delayMicro(2);
 80015a6:	2002      	movs	r0, #2
 80015a8:	f7ff ffae 	bl	8001508 <delayMicro>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2140      	movs	r1, #64	; 0x40
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b4:	f002 f9b6 	bl	8003924 <HAL_GPIO_WritePin>

}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	48000400 	.word	0x48000400

080015c4 <setRow>:

void setRow(uint8_t rowIdx) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2140      	movs	r1, #64	; 0x40
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d6:	f002 f9a5 	bl	8003924 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, rowIdx & 0x01);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	2101      	movs	r1, #1
 80015e6:	480f      	ldr	r0, [pc, #60]	; (8001624 <setRow+0x60>)
 80015e8:	f002 f99c 	bl	8003924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, rowIdx & 0x02);
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	2102      	movs	r1, #2
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <setRow+0x60>)
 80015fa:	f002 f993 	bl	8003924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, rowIdx & 0x04);
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	b2db      	uxtb	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	2110      	movs	r1, #16
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <setRow+0x60>)
 800160c:	f002 f98a 	bl	8003924 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	2140      	movs	r1, #64	; 0x40
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001618:	f002 f984 	bl	8003924 <HAL_GPIO_WritePin>

}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	48000400 	.word	0x48000400

08001628 <readCols>:

uint8_t readCols() {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

	uint8_t C0_val = HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin);
 800162e:	2108      	movs	r1, #8
 8001630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001634:	f002 f95e 	bl	80038f4 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
	uint8_t C1_val = HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin);
 800163c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001644:	f002 f956 	bl	80038f4 <HAL_GPIO_ReadPin>
 8001648:	4603      	mov	r3, r0
 800164a:	71bb      	strb	r3, [r7, #6]
	uint8_t C2_val = HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin);
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001652:	f002 f94f 	bl	80038f4 <HAL_GPIO_ReadPin>
 8001656:	4603      	mov	r3, r0
 8001658:	717b      	strb	r3, [r7, #5]
	uint8_t C3_val = HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin);
 800165a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f002 f947 	bl	80038f4 <HAL_GPIO_ReadPin>
 8001666:	4603      	mov	r3, r0
 8001668:	713b      	strb	r3, [r7, #4]

	return (C3_val << 3) | (C2_val << 2) | (C1_val << 1) | C0_val;
 800166a:	793b      	ldrb	r3, [r7, #4]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	b25a      	sxtb	r2, r3
 8001670:	797b      	ldrb	r3, [r7, #5]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b25a      	sxtb	r2, r3
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	b25b      	sxtb	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b25a      	sxtb	r2, r3
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	4313      	orrs	r3, r2
 800168a:	b25b      	sxtb	r3, r3
 800168c:	b2db      	uxtb	r3, r3

}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <readKeys>:

uint16_t readKeys() {
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0

	uint16_t keysRead = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	80fb      	strh	r3, [r7, #6]

	for (int i = 0; i <= 2; i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	e018      	b.n	80016d8 <readKeys+0x42>

		setRow(i);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff8a 	bl	80015c4 <setRow>
		delayMicro(5);
 80016b0:	2005      	movs	r0, #5
 80016b2:	f7ff ff29 	bl	8001508 <delayMicro>
		keysRead |= readCols() << (4 * i);
 80016b6:	f7ff ffb7 	bl	8001628 <readCols>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i <= 2; i++) {
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	dde3      	ble.n	80016a6 <readKeys+0x10>

	}

	return keysRead;
 80016de:	88fb      	ldrh	r3, [r7, #6]

}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <rotationSteps>:

void rotationSteps(float *dreal, float *dimag) {
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]

	float phi;

	for (int i = 0; i < 12; i++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	e067      	b.n	80017c8 <rotationSteps+0xe0>

		phi = 2 * M_PI * fA * pow(2, (i - 9) / 12.0) / fs;
 80016f8:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <rotationSteps+0x100>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fed4 	bl	80004a8 <__aeabi_f2d>
 8001700:	a335      	add	r3, pc, #212	; (adr r3, 80017d8 <rotationSteps+0xf0>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe ff27 	bl	8000558 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4614      	mov	r4, r2
 8001710:	461d      	mov	r5, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3b09      	subs	r3, #9
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe feb4 	bl	8000484 <__aeabi_i2d>
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b32      	ldr	r3, [pc, #200]	; (80017ec <rotationSteps+0x104>)
 8001722:	f7ff f843 	bl	80007ac <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	ec43 2b17 	vmov	d7, r2, r3
 800172e:	eeb0 1a47 	vmov.f32	s2, s14
 8001732:	eef0 1a67 	vmov.f32	s3, s15
 8001736:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 80017e0 <rotationSteps+0xf8>
 800173a:	f008 f809 	bl	8009750 <pow>
 800173e:	ec53 2b10 	vmov	r2, r3, d0
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7fe ff07 	bl	8000558 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4614      	mov	r4, r2
 8001750:	461d      	mov	r5, r3
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <rotationSteps+0x108>)
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fea7 	bl	80004a8 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7ff f823 	bl	80007ac <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f9cb 	bl	8000b08 <__aeabi_d2f>
 8001772:	4603      	mov	r3, r0
 8001774:	60bb      	str	r3, [r7, #8]
		dreal[i] = cos(phi);
 8001776:	68b8      	ldr	r0, [r7, #8]
 8001778:	f7fe fe96 	bl	80004a8 <__aeabi_f2d>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	ec43 2b10 	vmov	d0, r2, r3
 8001784:	f007 ff38 	bl	80095f8 <cos>
 8001788:	ec51 0b10 	vmov	r0, r1, d0
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	18d4      	adds	r4, r2, r3
 8001794:	f7ff f9b8 	bl	8000b08 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	6023      	str	r3, [r4, #0]
		dimag[i] = sin(phi);
 800179c:	68b8      	ldr	r0, [r7, #8]
 800179e:	f7fe fe83 	bl	80004a8 <__aeabi_f2d>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	ec43 2b10 	vmov	d0, r2, r3
 80017aa:	f007 ff79 	bl	80096a0 <sin>
 80017ae:	ec51 0b10 	vmov	r0, r1, d0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	18d4      	adds	r4, r2, r3
 80017ba:	f7ff f9a5 	bl	8000b08 <__aeabi_d2f>
 80017be:	4603      	mov	r3, r0
 80017c0:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 12; i++) {
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3301      	adds	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b0b      	cmp	r3, #11
 80017cc:	dd94      	ble.n	80016f8 <rotationSteps+0x10>

	}

}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bdb0      	pop	{r4, r5, r7, pc}
 80017d8:	54442d18 	.word	0x54442d18
 80017dc:	401921fb 	.word	0x401921fb
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40000000 	.word	0x40000000
 80017e8:	43dc0000 	.word	0x43dc0000
 80017ec:	40280000 	.word	0x40280000
 80017f0:	46abe000 	.word	0x46abe000

080017f4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f004 fcab 	bl	8006158 <osDelay>
 8001802:	e7fb      	b.n	80017fc <StartDefaultTask+0x8>

08001804 <scanKeysTask>:
 * @brief Function implementing the scanKeys thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_scanKeysTask */
void scanKeysTask(void *argument) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN scanKeysTask */

	const TickType_t xFrequency = 50 / portTICK_PERIOD_MS;
 800180c:	2332      	movs	r3, #50	; 0x32
 800180e:	617b      	str	r3, [r7, #20]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001810:	f006 f93a 	bl	8007a88 <xTaskGetTickCount>
 8001814:	4603      	mov	r3, r0
 8001816:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	6979      	ldr	r1, [r7, #20]
 800181e:	4618      	mov	r0, r3
 8001820:	f005 ff64 	bl	80076ec <vTaskDelayUntil>

		uint16_t localKeys = readKeys();
 8001824:	f7ff ff37 	bl	8001696 <readKeys>
 8001828:	4603      	mov	r3, r0
 800182a:	827b      	strh	r3, [r7, #18]

		osMutexAcquire(keysMutexHandle, osWaitForever);
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <scanKeysTask+0x48>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	4618      	mov	r0, r3
 8001836:	f004 fd30 	bl	800629a <osMutexAcquire>

		__atomic_store_n(&keys, localKeys, __ATOMIC_RELAXED);
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <scanKeysTask+0x4c>)
 800183c:	8a7b      	ldrh	r3, [r7, #18]
 800183e:	8013      	strh	r3, [r2, #0]

		osMutexRelease(keysMutexHandle);
 8001840:	4b02      	ldr	r3, [pc, #8]	; (800184c <scanKeysTask+0x48>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f004 fd73 	bl	8006330 <osMutexRelease>
	for (;;) {
 800184a:	e7e5      	b.n	8001818 <scanKeysTask+0x14>
 800184c:	200002e0 	.word	0x200002e0
 8001850:	20000000 	.word	0x20000000

08001854 <displayUpdateTask>:
 * @brief Function implementing the displayUpdate thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_displayUpdateTask */
void displayUpdateTask(void *argument) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN displayUpdateTask */

	const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
 800185c:	2364      	movs	r3, #100	; 0x64
 800185e:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001860:	f006 f912 	bl	8007a88 <xTaskGetTickCount>
 8001864:	4603      	mov	r3, r0
 8001866:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	4618      	mov	r0, r3
 8001870:	f005 ff3c 	bl	80076ec <vTaskDelayUntil>

		osMutexAcquire(keysMutexHandle, osWaitForever);
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <displayUpdateTask+0x3c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	4618      	mov	r0, r3
 800187e:	f004 fd0c 	bl	800629a <osMutexAcquire>

		osMutexRelease(keysMutexHandle);
 8001882:	4b03      	ldr	r3, [pc, #12]	; (8001890 <displayUpdateTask+0x3c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f004 fd52 	bl	8006330 <osMutexRelease>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800188c:	e7ec      	b.n	8001868 <displayUpdateTask+0x14>
 800188e:	bf00      	nop
 8001890:	200002e0 	.word	0x200002e0

08001894 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	if (htim == &htim6) {
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a58      	ldr	r2, [pc, #352]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	f040 80a2 	bne.w	80019ea <HAL_TIM_PeriodElapsedCallback+0x156>

		HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	2108      	movs	r1, #8
 80018aa:	4856      	ldr	r0, [pc, #344]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80018ac:	f002 f83a 	bl	8003924 <HAL_GPIO_WritePin>
		static float imag[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

		float real2;
		float imag2;

		float Vadd = 0;
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]

		uint16_t keysbuff;

		keysbuff = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 80018b6:	4b54      	ldr	r3, [pc, #336]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	837b      	strh	r3, [r7, #26]

		for (int i = 0; i < 12; i++) {
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e062      	b.n	8001988 <HAL_TIM_PeriodElapsedCallback+0xf4>

			if (!(keysbuff & 1)) {
 80018c2:	8b7b      	ldrh	r3, [r7, #26]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d157      	bne.n	800197c <HAL_TIM_PeriodElapsedCallback+0xe8>

				real2 = dreal[i] * real[i] - dimag[i] * imag[i];
 80018cc:	4a4f      	ldr	r2, [pc, #316]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	ed93 7a00 	vldr	s14, [r3]
 80018d8:	4a4d      	ldr	r2, [pc, #308]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e8:	4a4a      	ldr	r2, [pc, #296]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	edd3 6a00 	vldr	s13, [r3]
 80018f4:	4a48      	ldr	r2, [pc, #288]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001908:	edc7 7a03 	vstr	s15, [r7, #12]
				imag2 = dimag[i] * real[i] + dreal[i] * imag[i];
 800190c:	4a41      	ldr	r2, [pc, #260]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	ed93 7a00 	vldr	s14, [r3]
 8001918:	4a3d      	ldr	r2, [pc, #244]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001928:	4a38      	ldr	r2, [pc, #224]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	edd3 6a00 	vldr	s13, [r3]
 8001934:	4a38      	ldr	r2, [pc, #224]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001948:	edc7 7a02 	vstr	s15, [r7, #8]

				real[i] = real2;
 800194c:	4a30      	ldr	r2, [pc, #192]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	601a      	str	r2, [r3, #0]
				imag[i] = imag2;
 8001958:	4a2f      	ldr	r2, [pc, #188]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	601a      	str	r2, [r3, #0]

				Vadd += real[i];
 8001964:	4a2a      	ldr	r2, [pc, #168]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ed97 7a07 	vldr	s14, [r7, #28]
 8001974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001978:	edc7 7a07 	vstr	s15, [r7, #28]

			}

			keysbuff >>= 1;
 800197c:	8b7b      	ldrh	r3, [r7, #26]
 800197e:	085b      	lsrs	r3, r3, #1
 8001980:	837b      	strh	r3, [r7, #26]
		for (int i = 0; i < 12; i++) {
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b0b      	cmp	r3, #11
 800198c:	dd99      	ble.n	80018c2 <HAL_TIM_PeriodElapsedCallback+0x2e>

		}

		int16_t Vout = (int16_t) 1024 * Vadd / 12.0;
 800198e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001992:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001a1c <HAL_TIM_PeriodElapsedCallback+0x188>
 8001996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199a:	ee17 0a90 	vmov	r0, s15
 800199e:	f7fe fd83 	bl	80004a8 <__aeabi_f2d>
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80019a8:	f7fe ff00 	bl	80007ac <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f880 	bl	8000ab8 <__aeabi_d2iz>
 80019b8:	4603      	mov	r3, r0
 80019ba:	827b      	strh	r3, [r7, #18]

		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, Vout + 2048);
 80019bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	4816      	ldr	r0, [pc, #88]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80019ca:	f001 fcd6 	bl	800337a <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, Vout + 2048);
 80019ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d6:	2200      	movs	r2, #0
 80019d8:	2110      	movs	r1, #16
 80019da:	4812      	ldr	r0, [pc, #72]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80019dc:	f001 fccd 	bl	800337a <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin,
 80019e0:	2200      	movs	r2, #0
 80019e2:	2108      	movs	r1, #8
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80019e6:	f001 ff9d 	bl	8003924 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);

	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM16) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d101      	bne.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0x164>
		HAL_IncTick();
 80019f4:	f000 fb22 	bl	800203c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80019f8:	bf00      	nop
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200001b8 	.word	0x200001b8
 8001a04:	48000400 	.word	0x48000400
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	200002e4 	.word	0x200002e4
 8001a10:	20000004 	.word	0x20000004
 8001a14:	20000314 	.word	0x20000314
 8001a18:	20000344 	.word	0x20000344
 8001a1c:	44800000 	.word	0x44800000
 8001a20:	40280000 	.word	0x40280000
 8001a24:	20000150 	.word	0x20000150
 8001a28:	40014400 	.word	0x40014400

08001a2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a34:	e7fe      	b.n	8001a34 <Error_Handler+0x8>
	...

08001a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6613      	str	r3, [r2, #96]	; 0x60
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	6593      	str	r3, [r2, #88]	; 0x58
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	210f      	movs	r1, #15
 8001a72:	f06f 0001 	mvn.w	r0, #1
 8001a76:	f001 fb8d 	bl	8003194 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09e      	sub	sp, #120	; 0x78
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2254      	movs	r2, #84	; 0x54
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f007 fcd9 	bl	8009460 <memset>
  if(hadc->Instance==ADC1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a25      	ldr	r2, [pc, #148]	; (8001b48 <HAL_ADC_MspInit+0xc0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d143      	bne.n	8001b40 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ab8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001abc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001abe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ac2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001acc:	2310      	movs	r3, #16
 8001ace:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 ff38 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001af2:	f7ff ff9b 	bl	8001a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_ADC_MspInit+0xc4>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <HAL_ADC_MspInit+0xc4>)
 8001afc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_ADC_MspInit+0xc4>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_ADC_MspInit+0xc4>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_ADC_MspInit+0xc4>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_ADC_MspInit+0xc4>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = JOYY_Pin|JOYX_Pin;
 8001b26:	2303      	movs	r3, #3
 8001b28:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b2a:	230b      	movs	r3, #11
 8001b2c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3c:	f001 fd70 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b40:	bf00      	nop
 8001b42:	3778      	adds	r7, #120	; 0x78
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	50040000 	.word	0x50040000
 8001b4c:	40021000 	.word	0x40021000

08001b50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a18      	ldr	r2, [pc, #96]	; (8001bd0 <HAL_CAN_MspInit+0x80>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d129      	bne.n	8001bc6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_CAN_MspInit+0x84>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <HAL_CAN_MspInit+0x84>)
 8001b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_CAN_MspInit+0x84>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_CAN_MspInit+0x84>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4a11      	ldr	r2, [pc, #68]	; (8001bd4 <HAL_CAN_MspInit+0x84>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_CAN_MspInit+0x84>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ba2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bb4:	2309      	movs	r3, #9
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc2:	f001 fd2d 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	; 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40006400 	.word	0x40006400
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_DAC_MspInit+0x84>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d12c      	bne.n	8001c54 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_DAC_MspInit+0x88>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <HAL_DAC_MspInit+0x88>)
 8001c00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c04:	6593      	str	r3, [r2, #88]	; 0x58
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_DAC_MspInit+0x88>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_DAC_MspInit+0x88>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <HAL_DAC_MspInit+0x88>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_DAC_MspInit+0x88>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = OUTR_Pin|OUTL_Pin;
 8001c2a:	2330      	movs	r3, #48	; 0x30
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c40:	f001 fcee 	bl	8003620 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2105      	movs	r1, #5
 8001c48:	2036      	movs	r0, #54	; 0x36
 8001c4a:	f001 faa3 	bl	8003194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c4e:	2036      	movs	r0, #54	; 0x36
 8001c50:	f001 fabc 	bl	80031cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40007400 	.word	0x40007400
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b09e      	sub	sp, #120	; 0x78
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	2254      	movs	r2, #84	; 0x54
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f007 fbeb 	bl	8009460 <memset>
  if(hi2c->Instance==I2C1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <HAL_I2C_MspInit+0xa4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d135      	bne.n	8001d00 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c94:	2340      	movs	r3, #64	; 0x40
 8001c96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 fe5b 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001cac:	f7ff febe 	bl	8001a2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_I2C_MspInit+0xa8>)
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb4:	4a15      	ldr	r2, [pc, #84]	; (8001d0c <HAL_I2C_MspInit+0xa8>)
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <HAL_I2C_MspInit+0xa8>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cc8:	23c0      	movs	r3, #192	; 0xc0
 8001cca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ccc:	2312      	movs	r3, #18
 8001cce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cd8:	2304      	movs	r3, #4
 8001cda:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cdc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480b      	ldr	r0, [pc, #44]	; (8001d10 <HAL_I2C_MspInit+0xac>)
 8001ce4:	f001 fc9c 	bl	8003620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_I2C_MspInit+0xa8>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <HAL_I2C_MspInit+0xa8>)
 8001cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_I2C_MspInit+0xa8>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	3778      	adds	r7, #120	; 0x78
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48000400 	.word	0x48000400

08001d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <HAL_TIM_Base_MspInit+0x68>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d114      	bne.n	8001d50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d2c:	f043 0310 	orr.w	r3, r3, #16
 8001d30:	6593      	str	r3, [r2, #88]	; 0x58
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2105      	movs	r1, #5
 8001d42:	2036      	movs	r0, #54	; 0x36
 8001d44:	f001 fa26 	bl	8003194 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d48:	2036      	movs	r0, #54	; 0x36
 8001d4a:	f001 fa3f 	bl	80031cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001d4e:	e010      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <HAL_TIM_Base_MspInit+0x70>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10b      	bne.n	8001d72 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40001000 	.word	0x40001000
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40001400 	.word	0x40001400

08001d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09e      	sub	sp, #120	; 0x78
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	2254      	movs	r2, #84	; 0x54
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f007 fb59 	bl	8009460 <memset>
  if(huart->Instance==USART2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <HAL_UART_MspInit+0xcc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d148      	bne.n	8001e4a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001db8:	2302      	movs	r3, #2
 8001dba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc0:	f107 0310 	add.w	r3, r7, #16
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 fdc9 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dd0:	f7ff fe2c 	bl	8001a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_UART_MspInit+0xd0>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_UART_MspInit+0xd0>)
 8001dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dde:	6593      	str	r3, [r2, #88]	; 0x58
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_UART_MspInit+0xd0>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dec:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_UART_MspInit+0xd0>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_UART_MspInit+0xd0>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_UART_MspInit+0xd0>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e04:	2304      	movs	r3, #4
 8001e06:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e14:	2307      	movs	r3, #7
 8001e16:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f001 fbfd 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e2a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e40:	4619      	mov	r1, r3
 8001e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e46:	f001 fbeb 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3778      	adds	r7, #120	; 0x78
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40004400 	.word	0x40004400
 8001e58:	40021000 	.word	0x40021000

08001e5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	; 0x30
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001e6a:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <HAL_InitTick+0xc8>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6e:	4a2d      	ldr	r2, [pc, #180]	; (8001f24 <HAL_InitTick+0xc8>)
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	6613      	str	r3, [r2, #96]	; 0x60
 8001e76:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <HAL_InitTick+0xc8>)
 8001e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e82:	f107 020c 	add.w	r2, r7, #12
 8001e86:	f107 0310 	add.w	r3, r7, #16
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f002 fcd3 	bl	8004838 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e92:	f002 fcbb 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 8001e96:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9a:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_InitTick+0xcc>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	0c9b      	lsrs	r3, r3, #18
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_InitTick+0xd0>)
 8001ea8:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <HAL_InitTick+0xd4>)
 8001eaa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001eac:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <HAL_InitTick+0xd0>)
 8001eae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eb2:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001eb4:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <HAL_InitTick+0xd0>)
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_InitTick+0xd0>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <HAL_InitTick+0xd0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_InitTick+0xd0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8001ecc:	4817      	ldr	r0, [pc, #92]	; (8001f2c <HAL_InitTick+0xd0>)
 8001ece:	f003 f83d 	bl	8004f4c <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d11b      	bne.n	8001f18 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8001ee0:	4812      	ldr	r0, [pc, #72]	; (8001f2c <HAL_InitTick+0xd0>)
 8001ee2:	f003 f8d7 	bl	8005094 <HAL_TIM_Base_Start_IT>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001eec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d111      	bne.n	8001f18 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ef4:	2019      	movs	r0, #25
 8001ef6:	f001 f969 	bl	80031cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b0f      	cmp	r3, #15
 8001efe:	d808      	bhi.n	8001f12 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001f00:	2200      	movs	r2, #0
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	2019      	movs	r0, #25
 8001f06:	f001 f945 	bl	8003194 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_InitTick+0xd8>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e002      	b.n	8001f18 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3730      	adds	r7, #48	; 0x30
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	431bde83 	.word	0x431bde83
 8001f2c:	20000374 	.word	0x20000374
 8001f30:	40014400 	.word	0x40014400
 8001f34:	20000038 	.word	0x20000038

08001f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <NMI_Handler+0x4>

08001f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <HardFault_Handler+0x4>

08001f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <MemManage_Handler+0x4>

08001f4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <BusFault_Handler+0x4>

08001f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <UsageFault_Handler+0x4>

08001f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001f6a:	f003 f8e7 	bl	800513c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000374 	.word	0x20000374

08001f78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <TIM6_DAC_IRQHandler+0x14>)
 8001f7e:	f003 f8dd 	bl	800513c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001f82:	4803      	ldr	r0, [pc, #12]	; (8001f90 <TIM6_DAC_IRQHandler+0x18>)
 8001f84:	f001 f99f 	bl	80032c6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	200001b8 	.word	0x200001b8
 8001f90:	20000150 	.word	0x20000150

08001f94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <SystemInit+0x20>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <SystemInit+0x20>)
 8001fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fbc:	f7ff ffea 	bl	8001f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc0:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fc2:	490d      	ldr	r1, [pc, #52]	; (8001ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <LoopForever+0xe>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc8:	e002      	b.n	8001fd0 <LoopCopyDataInit>

08001fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fce:	3304      	adds	r3, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd4:	d3f9      	bcc.n	8001fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fd8:	4c0a      	ldr	r4, [pc, #40]	; (8002004 <LoopForever+0x16>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fdc:	e001      	b.n	8001fe2 <LoopFillZerobss>

08001fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe0:	3204      	adds	r2, #4

08001fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe4:	d3fb      	bcc.n	8001fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f007 fa07 	bl	80093f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fea:	f7fe ff5f 	bl	8000eac <main>

08001fee <LoopForever>:

LoopForever:
    b LoopForever
 8001fee:	e7fe      	b.n	8001fee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ff0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001ffc:	0800b808 	.word	0x0800b808
  ldr r2, =_sbss
 8002000:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002004:	20001a94 	.word	0x20001a94

08002008 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC1_IRQHandler>

0800200a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002014:	2003      	movs	r0, #3
 8002016:	f001 f8b2 	bl	800317e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800201a:	200f      	movs	r0, #15
 800201c:	f7ff ff1e 	bl	8001e5c <HAL_InitTick>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	71fb      	strb	r3, [r7, #7]
 800202a:	e001      	b.n	8002030 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800202c:	f7ff fd04 	bl	8001a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002030:	79fb      	ldrb	r3, [r7, #7]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x20>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x24>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4413      	add	r3, r2
 800204c:	4a04      	ldr	r2, [pc, #16]	; (8002060 <HAL_IncTick+0x24>)
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	2000003c 	.word	0x2000003c
 8002060:	200003c0 	.word	0x200003c0

08002064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return uwTick;
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_GetTick+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	200003c0 	.word	0x200003c0

0800207c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff ffee 	bl	8002064 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d005      	beq.n	80020a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_Delay+0x44>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a2:	bf00      	nop
 80020a4:	f7ff ffde 	bl	8002064 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d8f7      	bhi.n	80020a4 <HAL_Delay+0x28>
  {
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2000003c 	.word	0x2000003c

080020c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	609a      	str	r2, [r3, #8]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	609a      	str	r2, [r3, #8]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3360      	adds	r3, #96	; 0x60
 800213e:	461a      	mov	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <LL_ADC_SetOffset+0x44>)
 800214e:	4013      	ands	r3, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	4313      	orrs	r3, r2
 800215c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002164:	bf00      	nop
 8002166:	371c      	adds	r7, #28
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	03fff000 	.word	0x03fff000

08002174 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3360      	adds	r3, #96	; 0x60
 8002182:	461a      	mov	r2, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3360      	adds	r3, #96	; 0x60
 80021b0:	461a      	mov	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	431a      	orrs	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b087      	sub	sp, #28
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3330      	adds	r3, #48	; 0x30
 80021e6:	461a      	mov	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	4413      	add	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	211f      	movs	r1, #31
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	401a      	ands	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	f003 011f 	and.w	r1, r3, #31
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	431a      	orrs	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800222e:	b480      	push	{r7}
 8002230:	b087      	sub	sp, #28
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3314      	adds	r3, #20
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	0e5b      	lsrs	r3, r3, #25
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	4413      	add	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	0d1b      	lsrs	r3, r3, #20
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	2107      	movs	r1, #7
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	401a      	ands	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	0d1b      	lsrs	r3, r3, #20
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	431a      	orrs	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002278:	bf00      	nop
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229c:	43db      	mvns	r3, r3
 800229e:	401a      	ands	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0318 	and.w	r3, r3, #24
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022a8:	40d9      	lsrs	r1, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	400b      	ands	r3, r1
 80022ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b2:	431a      	orrs	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	0007ffff 	.word	0x0007ffff

080022cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6093      	str	r3, [r2, #8]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002304:	d101      	bne.n	800230a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800232c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002354:	d101      	bne.n	800235a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <LL_ADC_IsEnabled+0x18>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <LL_ADC_IsEnabled+0x1a>
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d101      	bne.n	80023a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d101      	bne.n	80023cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e12c      	b.n	8002650 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff fb3f 	bl	8001a88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff67 	bl	80022f0 <LL_ADC_IsDeepPowerDownEnabled>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff4d 	bl	80022cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff82 	bl	8002340 <LL_ADC_IsInternalRegulatorEnabled>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d115      	bne.n	800246e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ff66 	bl	8002318 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800244c:	4b82      	ldr	r3, [pc, #520]	; (8002658 <HAL_ADC_Init+0x27c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	4a82      	ldr	r2, [pc, #520]	; (800265c <HAL_ADC_Init+0x280>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	3301      	adds	r3, #1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002460:	e002      	b.n	8002468 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3b01      	subs	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff64 	bl	8002340 <LL_ADC_IsInternalRegulatorEnabled>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	f043 0210 	orr.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff75 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 80024a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 80c5 	bne.w	800263e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f040 80c1 	bne.w	800263e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024c4:	f043 0202 	orr.w	r2, r3, #2
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff49 	bl	8002368 <LL_ADC_IsEnabled>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10b      	bne.n	80024f4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024dc:	4860      	ldr	r0, [pc, #384]	; (8002660 <HAL_ADC_Init+0x284>)
 80024de:	f7ff ff43 	bl	8002368 <LL_ADC_IsEnabled>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4619      	mov	r1, r3
 80024ee:	485d      	ldr	r0, [pc, #372]	; (8002664 <HAL_ADC_Init+0x288>)
 80024f0:	f7ff fde8 	bl	80020c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7e5b      	ldrb	r3, [r3, #25]
 80024f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002504:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800250a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002512:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d106      	bne.n	8002530 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	3b01      	subs	r3, #1
 8002528:	045b      	lsls	r3, r3, #17
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	d009      	beq.n	800254c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	4b45      	ldr	r3, [pc, #276]	; (8002668 <HAL_ADC_Init+0x28c>)
 8002554:	4013      	ands	r3, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	430b      	orrs	r3, r1
 800255e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff12 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 800256a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff1f 	bl	80023b4 <LL_ADC_INJ_IsConversionOngoing>
 8002576:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d13d      	bne.n	80025fa <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d13a      	bne.n	80025fa <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002588:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002590:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a0:	f023 0302 	bic.w	r3, r3, #2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	69b9      	ldr	r1, [r7, #24]
 80025aa:	430b      	orrs	r3, r1
 80025ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d118      	bne.n	80025ea <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025c2:	f023 0304 	bic.w	r3, r3, #4
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025ce:	4311      	orrs	r1, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025da:	430a      	orrs	r2, r1
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	611a      	str	r2, [r3, #16]
 80025e8:	e007      	b.n	80025fa <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d10c      	bne.n	800261c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	f023 010f 	bic.w	r1, r3, #15
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
 800261a:	e007      	b.n	800262c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 020f 	bic.w	r2, r2, #15
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002630:	f023 0303 	bic.w	r3, r3, #3
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	655a      	str	r2, [r3, #84]	; 0x54
 800263c:	e007      	b.n	800264e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f043 0210 	orr.w	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800264e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000034 	.word	0x20000034
 800265c:	053e2d63 	.word	0x053e2d63
 8002660:	50040000 	.word	0x50040000
 8002664:	50040300 	.word	0x50040300
 8002668:	fff0c007 	.word	0xfff0c007

0800266c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b0b6      	sub	sp, #216	; 0xd8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x22>
 800268a:	2302      	movs	r3, #2
 800268c:	e3b9      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x796>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fe77 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 839e 	bne.w	8002de4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d824      	bhi.n	80026fa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	3b02      	subs	r3, #2
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d81b      	bhi.n	80026f2 <HAL_ADC_ConfigChannel+0x86>
 80026ba:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <HAL_ADC_ConfigChannel+0x54>)
 80026bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026d9 	.word	0x080026d9
 80026c8:	080026e1 	.word	0x080026e1
 80026cc:	080026e9 	.word	0x080026e9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	220c      	movs	r2, #12
 80026d4:	605a      	str	r2, [r3, #4]
          break;
 80026d6:	e011      	b.n	80026fc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2212      	movs	r2, #18
 80026dc:	605a      	str	r2, [r3, #4]
          break;
 80026de:	e00d      	b.n	80026fc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2218      	movs	r2, #24
 80026e4:	605a      	str	r2, [r3, #4]
          break;
 80026e6:	e009      	b.n	80026fc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ee:	605a      	str	r2, [r3, #4]
          break;
 80026f0:	e004      	b.n	80026fc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2206      	movs	r2, #6
 80026f6:	605a      	str	r2, [r3, #4]
          break;
 80026f8:	e000      	b.n	80026fc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80026fa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	f7ff fd64 	bl	80021d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fe3b 	bl	800238e <LL_ADC_REG_IsConversionOngoing>
 8002718:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fe47 	bl	80023b4 <LL_ADC_INJ_IsConversionOngoing>
 8002726:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800272a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 81a6 	bne.w	8002a80 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002734:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002738:	2b00      	cmp	r3, #0
 800273a:	f040 81a1 	bne.w	8002a80 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6819      	ldr	r1, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	461a      	mov	r2, r3
 800274c:	f7ff fd6f 	bl	800222e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	08db      	lsrs	r3, r3, #3
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b04      	cmp	r3, #4
 8002770:	d00a      	beq.n	8002788 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6919      	ldr	r1, [r3, #16]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002782:	f7ff fcd3 	bl	800212c <LL_ADC_SetOffset>
 8002786:	e17b      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fcf0 	bl	8002174 <LL_ADC_GetOffsetChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10a      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x148>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fce5 	bl	8002174 <LL_ADC_GetOffsetChannel>
 80027aa:	4603      	mov	r3, r0
 80027ac:	0e9b      	lsrs	r3, r3, #26
 80027ae:	f003 021f 	and.w	r2, r3, #31
 80027b2:	e01e      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x186>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fcda 	bl	8002174 <LL_ADC_GetOffsetChannel>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80027e2:	2320      	movs	r3, #32
 80027e4:	e004      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80027e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d105      	bne.n	800280a <HAL_ADC_ConfigChannel+0x19e>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	0e9b      	lsrs	r3, r3, #26
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	e018      	b.n	800283c <HAL_ADC_ConfigChannel+0x1d0>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800281e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002822:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002826:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800282e:	2320      	movs	r3, #32
 8002830:	e004      	b.n	800283c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002832:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800283c:	429a      	cmp	r2, r3
 800283e:	d106      	bne.n	800284e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fca9 	bl	80021a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2101      	movs	r1, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fc8d 	bl	8002174 <LL_ADC_GetOffsetChannel>
 800285a:	4603      	mov	r3, r0
 800285c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <HAL_ADC_ConfigChannel+0x20e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fc82 	bl	8002174 <LL_ADC_GetOffsetChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	0e9b      	lsrs	r3, r3, #26
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	e01e      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x24c>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2101      	movs	r1, #1
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fc77 	bl	8002174 <LL_ADC_GetOffsetChannel>
 8002886:	4603      	mov	r3, r0
 8002888:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002898:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800289c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80028a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80028a8:	2320      	movs	r3, #32
 80028aa:	e004      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80028ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d105      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x264>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0e9b      	lsrs	r3, r3, #26
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	e018      	b.n	8002902 <HAL_ADC_ConfigChannel+0x296>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80028e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80028f4:	2320      	movs	r3, #32
 80028f6:	e004      	b.n	8002902 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80028f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002902:	429a      	cmp	r2, r3
 8002904:	d106      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	2101      	movs	r1, #1
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fc46 	bl	80021a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2102      	movs	r1, #2
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fc2a 	bl	8002174 <LL_ADC_GetOffsetChannel>
 8002920:	4603      	mov	r3, r0
 8002922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x2d4>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2102      	movs	r1, #2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fc1f 	bl	8002174 <LL_ADC_GetOffsetChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	0e9b      	lsrs	r3, r3, #26
 800293a:	f003 021f 	and.w	r2, r3, #31
 800293e:	e01e      	b.n	800297e <HAL_ADC_ConfigChannel+0x312>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2102      	movs	r1, #2
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fc14 	bl	8002174 <LL_ADC_GetOffsetChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800295e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002966:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800296e:	2320      	movs	r3, #32
 8002970:	e004      	b.n	800297c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002972:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002986:	2b00      	cmp	r3, #0
 8002988:	d105      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x32a>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	0e9b      	lsrs	r3, r3, #26
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	e016      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x358>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80029a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80029ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80029b6:	2320      	movs	r3, #32
 80029b8:	e004      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80029ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d106      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2102      	movs	r1, #2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fbe5 	bl	80021a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2103      	movs	r1, #3
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fbc9 	bl	8002174 <LL_ADC_GetOffsetChannel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x396>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2103      	movs	r1, #3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fbbe 	bl	8002174 <LL_ADC_GetOffsetChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	e017      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x3c6>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2103      	movs	r1, #3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fbb3 	bl	8002174 <LL_ADC_GetOffsetChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a1c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	e003      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x3de>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	0e9b      	lsrs	r3, r3, #26
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	e011      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x402>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002a62:	2320      	movs	r3, #32
 8002a64:	e003      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d106      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2200      	movs	r2, #0
 8002a78:	2103      	movs	r1, #3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fb90 	bl	80021a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fc6f 	bl	8002368 <LL_ADC_IsEnabled>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f040 813f 	bne.w	8002d10 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6819      	ldr	r1, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f7ff fbf0 	bl	8002284 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a8e      	ldr	r2, [pc, #568]	; (8002ce4 <HAL_ADC_ConfigChannel+0x678>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	f040 8130 	bne.w	8002d10 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x46c>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0e9b      	lsrs	r3, r3, #26
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	2b09      	cmp	r3, #9
 8002ace:	bf94      	ite	ls
 8002ad0:	2301      	movls	r3, #1
 8002ad2:	2300      	movhi	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	e019      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x4a0>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002af0:	2320      	movs	r3, #32
 8002af2:	e003      	b.n	8002afc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002af4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2b09      	cmp	r3, #9
 8002b04:	bf94      	ite	ls
 8002b06:	2301      	movls	r3, #1
 8002b08:	2300      	movhi	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d079      	beq.n	8002c04 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x4c0>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0e9b      	lsrs	r3, r3, #26
 8002b22:	3301      	adds	r3, #1
 8002b24:	069b      	lsls	r3, r3, #26
 8002b26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b2a:	e015      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x4ec>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002b44:	2320      	movs	r3, #32
 8002b46:	e003      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	069b      	lsls	r3, r3, #26
 8002b54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x50c>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	0e9b      	lsrs	r3, r3, #26
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	2101      	movs	r1, #1
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	e017      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x53c>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b90:	2320      	movs	r3, #32
 8002b92:	e003      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	ea42 0103 	orr.w	r1, r2, r3
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x562>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f003 021f 	and.w	r2, r3, #31
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	051b      	lsls	r3, r3, #20
 8002bcc:	e018      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x594>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002be6:	2320      	movs	r3, #32
 8002be8:	e003      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c00:	430b      	orrs	r3, r1
 8002c02:	e080      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x5b4>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0e9b      	lsrs	r3, r3, #26
 8002c16:	3301      	adds	r3, #1
 8002c18:	069b      	lsls	r3, r3, #26
 8002c1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1e:	e015      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x5e0>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002c38:	2320      	movs	r3, #32
 8002c3a:	e003      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	3301      	adds	r3, #1
 8002c46:	069b      	lsls	r3, r3, #26
 8002c48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x600>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	e017      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x630>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	61fb      	str	r3, [r7, #28]
  return result;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c84:	2320      	movs	r3, #32
 8002c86:	e003      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2101      	movs	r1, #1
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10d      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x65c>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f003 021f 	and.w	r2, r3, #31
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3b1e      	subs	r3, #30
 8002cc0:	051b      	lsls	r3, r3, #20
 8002cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	e01d      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x698>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	613b      	str	r3, [r7, #16]
  return result;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e005      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x684>
 8002ce4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f003 021f 	and.w	r2, r3, #31
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3b1e      	subs	r3, #30
 8002cfe:	051b      	lsls	r3, r3, #20
 8002d00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d04:	430b      	orrs	r3, r1
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	6892      	ldr	r2, [r2, #8]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f7ff fa8f 	bl	800222e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <HAL_ADC_ConfigChannel+0x7a0>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d06c      	beq.n	8002df6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d1c:	483c      	ldr	r0, [pc, #240]	; (8002e10 <HAL_ADC_ConfigChannel+0x7a4>)
 8002d1e:	f7ff f9f7 	bl	8002110 <LL_ADC_GetCommonPathInternalCh>
 8002d22:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a3a      	ldr	r2, [pc, #232]	; (8002e14 <HAL_ADC_ConfigChannel+0x7a8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d127      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d121      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a35      	ldr	r2, [pc, #212]	; (8002e18 <HAL_ADC_ConfigChannel+0x7ac>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d157      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d4e:	4619      	mov	r1, r3
 8002d50:	482f      	ldr	r0, [pc, #188]	; (8002e10 <HAL_ADC_ConfigChannel+0x7a4>)
 8002d52:	f7ff f9ca 	bl	80020ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d56:	4b31      	ldr	r3, [pc, #196]	; (8002e1c <HAL_ADC_ConfigChannel+0x7b0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	099b      	lsrs	r3, r3, #6
 8002d5c:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <HAL_ADC_ConfigChannel+0x7b4>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	099b      	lsrs	r3, r3, #6
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d70:	e002      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f9      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d7e:	e03a      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d113      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x746>
 8002d8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10d      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <HAL_ADC_ConfigChannel+0x7ac>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d12a      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002da8:	4619      	mov	r1, r3
 8002daa:	4819      	ldr	r0, [pc, #100]	; (8002e10 <HAL_ADC_ConfigChannel+0x7a4>)
 8002dac:	f7ff f99d 	bl	80020ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db0:	e021      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1c      	ldr	r2, [pc, #112]	; (8002e28 <HAL_ADC_ConfigChannel+0x7bc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d11c      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d116      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <HAL_ADC_ConfigChannel+0x7ac>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d111      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dda:	4619      	mov	r1, r3
 8002ddc:	480c      	ldr	r0, [pc, #48]	; (8002e10 <HAL_ADC_ConfigChannel+0x7a4>)
 8002dde:	f7ff f984 	bl	80020ea <LL_ADC_SetCommonPathInternalCh>
 8002de2:	e008      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dfe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	37d8      	adds	r7, #216	; 0xd8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	80080000 	.word	0x80080000
 8002e10:	50040300 	.word	0x50040300
 8002e14:	c7520000 	.word	0xc7520000
 8002e18:	50040000 	.word	0x50040000
 8002e1c:	20000034 	.word	0x20000034
 8002e20:	053e2d63 	.word	0x053e2d63
 8002e24:	cb840000 	.word	0xcb840000
 8002e28:	80000001 	.word	0x80000001

08002e2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0ed      	b.n	800301a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe fe80 	bl	8001b50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e60:	f7ff f900 	bl	8002064 <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e66:	e012      	b.n	8002e8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e68:	f7ff f8fc 	bl	8002064 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b0a      	cmp	r3, #10
 8002e74:	d90b      	bls.n	8002e8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2205      	movs	r2, #5
 8002e86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0c5      	b.n	800301a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0e5      	beq.n	8002e68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0202 	bic.w	r2, r2, #2
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eac:	f7ff f8da 	bl	8002064 <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002eb2:	e012      	b.n	8002eda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eb4:	f7ff f8d6 	bl	8002064 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b0a      	cmp	r3, #10
 8002ec0:	d90b      	bls.n	8002eda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2205      	movs	r2, #5
 8002ed2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e09f      	b.n	800301a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e5      	bne.n	8002eb4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	7e1b      	ldrb	r3, [r3, #24]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d108      	bne.n	8002f02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e007      	b.n	8002f12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	7e5b      	ldrb	r3, [r3, #25]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d108      	bne.n	8002f2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e007      	b.n	8002f3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	7e9b      	ldrb	r3, [r3, #26]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d108      	bne.n	8002f56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0220 	orr.w	r2, r2, #32
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	e007      	b.n	8002f66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0220 	bic.w	r2, r2, #32
 8002f64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7edb      	ldrb	r3, [r3, #27]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d108      	bne.n	8002f80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0210 	bic.w	r2, r2, #16
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e007      	b.n	8002f90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0210 	orr.w	r2, r2, #16
 8002f8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	7f1b      	ldrb	r3, [r3, #28]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d108      	bne.n	8002faa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0208 	orr.w	r2, r2, #8
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e007      	b.n	8002fba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0208 	bic.w	r2, r2, #8
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	7f5b      	ldrb	r3, [r3, #29]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d108      	bne.n	8002fd4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0204 	orr.w	r2, r2, #4
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e007      	b.n	8002fe4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0204 	bic.w	r2, r2, #4
 8002fe2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	ea42 0103 	orr.w	r1, r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	1e5a      	subs	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <__NVIC_SetPriorityGrouping+0x44>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003040:	4013      	ands	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800304c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003056:	4a04      	ldr	r2, [pc, #16]	; (8003068 <__NVIC_SetPriorityGrouping+0x44>)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	60d3      	str	r3, [r2, #12]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <__NVIC_GetPriorityGrouping+0x18>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	f003 0307 	and.w	r3, r3, #7
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	2b00      	cmp	r3, #0
 8003098:	db0b      	blt.n	80030b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	f003 021f 	and.w	r2, r3, #31
 80030a0:	4907      	ldr	r1, [pc, #28]	; (80030c0 <__NVIC_EnableIRQ+0x38>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	2001      	movs	r0, #1
 80030aa:	fa00 f202 	lsl.w	r2, r0, r2
 80030ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000e100 	.word	0xe000e100

080030c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	6039      	str	r1, [r7, #0]
 80030ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	db0a      	blt.n	80030ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	490c      	ldr	r1, [pc, #48]	; (8003110 <__NVIC_SetPriority+0x4c>)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	0112      	lsls	r2, r2, #4
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	440b      	add	r3, r1
 80030e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ec:	e00a      	b.n	8003104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	4908      	ldr	r1, [pc, #32]	; (8003114 <__NVIC_SetPriority+0x50>)
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	3b04      	subs	r3, #4
 80030fc:	0112      	lsls	r2, r2, #4
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	440b      	add	r3, r1
 8003102:	761a      	strb	r2, [r3, #24]
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000e100 	.word	0xe000e100
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	; 0x24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f1c3 0307 	rsb	r3, r3, #7
 8003132:	2b04      	cmp	r3, #4
 8003134:	bf28      	it	cs
 8003136:	2304      	movcs	r3, #4
 8003138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3304      	adds	r3, #4
 800313e:	2b06      	cmp	r3, #6
 8003140:	d902      	bls.n	8003148 <NVIC_EncodePriority+0x30>
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3b03      	subs	r3, #3
 8003146:	e000      	b.n	800314a <NVIC_EncodePriority+0x32>
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800314c:	f04f 32ff 	mov.w	r2, #4294967295
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43da      	mvns	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	401a      	ands	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003160:	f04f 31ff 	mov.w	r1, #4294967295
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	43d9      	mvns	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	4313      	orrs	r3, r2
         );
}
 8003172:	4618      	mov	r0, r3
 8003174:	3724      	adds	r7, #36	; 0x24
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ff4c 	bl	8003024 <__NVIC_SetPriorityGrouping>
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031a6:	f7ff ff61 	bl	800306c <__NVIC_GetPriorityGrouping>
 80031aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	6978      	ldr	r0, [r7, #20]
 80031b2:	f7ff ffb1 	bl	8003118 <NVIC_EncodePriority>
 80031b6:	4602      	mov	r2, r0
 80031b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff ff80 	bl	80030c4 <__NVIC_SetPriority>
}
 80031c4:	bf00      	nop
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff ff54 	bl	8003088 <__NVIC_EnableIRQ>
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e014      	b.n	8003224 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	791b      	ldrb	r3, [r3, #4]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe fce4 	bl	8001bd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	795b      	ldrb	r3, [r3, #5]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_DAC_Start+0x16>
 800323e:	2302      	movs	r3, #2
 8003240:	e03b      	b.n	80032ba <HAL_DAC_Start+0x8e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2201      	movs	r2, #1
 800325c:	409a      	lsls	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10f      	bne.n	800328c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003276:	2b04      	cmp	r3, #4
 8003278:	d118      	bne.n	80032ac <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0201 	orr.w	r2, r2, #1
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e00f      	b.n	80032ac <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003296:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800329a:	d107      	bne.n	80032ac <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0202 	orr.w	r2, r2, #2
 80032aa:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032dc:	d120      	bne.n	8003320 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ec:	d118      	bne.n	8003320 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2204      	movs	r2, #4
 80032f2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f043 0201 	orr.w	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003308:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003318:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f852 	bl	80033c4 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800332a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800332e:	d120      	bne.n	8003372 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800333a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800333e:	d118      	bne.n	8003372 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2204      	movs	r2, #4
 8003344:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f043 0202 	orr.w	r2, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800335a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800336a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f94d 	bl	800360c <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800337a:	b480      	push	{r7}
 800337c:	b087      	sub	sp, #28
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	3308      	adds	r3, #8
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	e004      	b.n	80033ae <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	3314      	adds	r3, #20
 80033ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	461a      	mov	r2, r3
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	795b      	ldrb	r3, [r3, #5]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_DAC_ConfigChannel+0x1c>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e107      	b.n	8003604 <HAL_DAC_ConfigChannel+0x22c>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2202      	movs	r2, #2
 80033fe:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b04      	cmp	r3, #4
 8003406:	d174      	bne.n	80034f2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003408:	f7fe fe2c 	bl	8002064 <HAL_GetTick>
 800340c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d134      	bne.n	800347e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003414:	e011      	b.n	800343a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003416:	f7fe fe25 	bl	8002064 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d90a      	bls.n	800343a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f043 0208 	orr.w	r2, r3, #8
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2203      	movs	r2, #3
 8003434:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0e4      	b.n	8003604 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e6      	bne.n	8003416 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003448:	2001      	movs	r0, #1
 800344a:	f7fe fe17 	bl	800207c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	6992      	ldr	r2, [r2, #24]
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
 8003458:	e01e      	b.n	8003498 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800345a:	f7fe fe03 	bl	8002064 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d90a      	bls.n	800347e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f043 0208 	orr.w	r2, r3, #8
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2203      	movs	r2, #3
 8003478:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0c2      	b.n	8003604 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003484:	2b00      	cmp	r3, #0
 8003486:	dbe8      	blt.n	800345a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003488:	2001      	movs	r0, #1
 800348a:	f7fe fdf7 	bl	800207c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	6992      	ldr	r2, [r2, #24]
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	ea02 0103 	and.w	r1, r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	69da      	ldr	r2, [r3, #28]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	409a      	lsls	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	21ff      	movs	r1, #255	; 0xff
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	ea02 0103 	and.w	r1, r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6a1a      	ldr	r2, [r3, #32]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	409a      	lsls	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d11d      	bne.n	8003536 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	221f      	movs	r2, #31
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4013      	ands	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2207      	movs	r2, #7
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	431a      	orrs	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6819      	ldr	r1, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	400a      	ands	r2, r1
 800359a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	f640 72fc 	movw	r2, #4092	; 0xffc
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6819      	ldr	r1, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	22c0      	movs	r2, #192	; 0xc0
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43da      	mvns	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	400a      	ands	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800362e:	e148      	b.n	80038c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2101      	movs	r1, #1
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	fa01 f303 	lsl.w	r3, r1, r3
 800363c:	4013      	ands	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 813a 	beq.w	80038bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d005      	beq.n	8003660 <HAL_GPIO_Init+0x40>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d130      	bne.n	80036c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003696:	2201      	movs	r2, #1
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	f003 0201 	and.w	r2, r3, #1
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d017      	beq.n	80036fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	2203      	movs	r2, #3
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d123      	bne.n	8003752 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	08da      	lsrs	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3208      	adds	r2, #8
 8003712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003716:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	220f      	movs	r2, #15
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	08da      	lsrs	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3208      	adds	r2, #8
 800374c:	6939      	ldr	r1, [r7, #16]
 800374e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	2203      	movs	r2, #3
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4013      	ands	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 0203 	and.w	r2, r3, #3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8094 	beq.w	80038bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003794:	4b52      	ldr	r3, [pc, #328]	; (80038e0 <HAL_GPIO_Init+0x2c0>)
 8003796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003798:	4a51      	ldr	r2, [pc, #324]	; (80038e0 <HAL_GPIO_Init+0x2c0>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6613      	str	r3, [r2, #96]	; 0x60
 80037a0:	4b4f      	ldr	r3, [pc, #316]	; (80038e0 <HAL_GPIO_Init+0x2c0>)
 80037a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037ac:	4a4d      	ldr	r2, [pc, #308]	; (80038e4 <HAL_GPIO_Init+0x2c4>)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	089b      	lsrs	r3, r3, #2
 80037b2:	3302      	adds	r3, #2
 80037b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	220f      	movs	r2, #15
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037d6:	d00d      	beq.n	80037f4 <HAL_GPIO_Init+0x1d4>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a43      	ldr	r2, [pc, #268]	; (80038e8 <HAL_GPIO_Init+0x2c8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d007      	beq.n	80037f0 <HAL_GPIO_Init+0x1d0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a42      	ldr	r2, [pc, #264]	; (80038ec <HAL_GPIO_Init+0x2cc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d101      	bne.n	80037ec <HAL_GPIO_Init+0x1cc>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e004      	b.n	80037f6 <HAL_GPIO_Init+0x1d6>
 80037ec:	2307      	movs	r3, #7
 80037ee:	e002      	b.n	80037f6 <HAL_GPIO_Init+0x1d6>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_GPIO_Init+0x1d6>
 80037f4:	2300      	movs	r3, #0
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	f002 0203 	and.w	r2, r2, #3
 80037fc:	0092      	lsls	r2, r2, #2
 80037fe:	4093      	lsls	r3, r2
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003806:	4937      	ldr	r1, [pc, #220]	; (80038e4 <HAL_GPIO_Init+0x2c4>)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	3302      	adds	r3, #2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003814:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	43db      	mvns	r3, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003838:	4a2d      	ldr	r2, [pc, #180]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800383e:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	43db      	mvns	r3, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003862:	4a23      	ldr	r2, [pc, #140]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003868:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	43db      	mvns	r3, r3
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4013      	ands	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800388c:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003892:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	43db      	mvns	r3, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038b6:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <HAL_GPIO_Init+0x2d0>)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3301      	adds	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f47f aeaf 	bne.w	8003630 <HAL_GPIO_Init+0x10>
  }
}
 80038d2:	bf00      	nop
 80038d4:	bf00      	nop
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40010000 	.word	0x40010000
 80038e8:	48000400 	.word	0x48000400
 80038ec:	48000800 	.word	0x48000800
 80038f0:	40010400 	.word	0x40010400

080038f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	887b      	ldrh	r3, [r7, #2]
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
 8003910:	e001      	b.n	8003916 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	807b      	strh	r3, [r7, #2]
 8003930:	4613      	mov	r3, r2
 8003932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003934:	787b      	ldrb	r3, [r7, #1]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003940:	e002      	b.n	8003948 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e081      	b.n	8003a6a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fe f972 	bl	8001c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2224      	movs	r2, #36	; 0x24
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0201 	bic.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d107      	bne.n	80039ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	e006      	b.n	80039dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d104      	bne.n	80039ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69d9      	ldr	r1, [r3, #28]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1a      	ldr	r2, [r3, #32]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d138      	bne.n	8003afa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e032      	b.n	8003afc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2224      	movs	r2, #36	; 0x24
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ac4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6819      	ldr	r1, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0201 	orr.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e000      	b.n	8003afc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
  }
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d139      	bne.n	8003b92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e033      	b.n	8003b94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	; 0x24
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e000      	b.n	8003b94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
  }
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bae:	6013      	str	r3, [r2, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40007000 	.word	0x40007000

08003bc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40007000 	.word	0x40007000

08003bdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bea:	d130      	bne.n	8003c4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bec:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf8:	d038      	beq.n	8003c6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bfa:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c02:	4a1e      	ldr	r2, [pc, #120]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c0a:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2232      	movs	r2, #50	; 0x32
 8003c10:	fb02 f303 	mul.w	r3, r2, r3
 8003c14:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	0c9b      	lsrs	r3, r3, #18
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c20:	e002      	b.n	8003c28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c34:	d102      	bne.n	8003c3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f2      	bne.n	8003c22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c48:	d110      	bne.n	8003c6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e00f      	b.n	8003c6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5a:	d007      	beq.n	8003c6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c5c:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c64:	4a05      	ldr	r2, [pc, #20]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40007000 	.word	0x40007000
 8003c80:	20000034 	.word	0x20000034
 8003c84:	431bde83 	.word	0x431bde83

08003c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f000 bc02 	b.w	80044a0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c9c:	4b96      	ldr	r3, [pc, #600]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ca6:	4b94      	ldr	r3, [pc, #592]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80e4 	beq.w	8003e86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d007      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x4c>
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	f040 808b 	bne.w	8003de2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	f040 8087 	bne.w	8003de2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cd4:	4b88      	ldr	r3, [pc, #544]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_OscConfig+0x64>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e3d9      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	4b81      	ldr	r3, [pc, #516]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d004      	beq.n	8003d06 <HAL_RCC_OscConfig+0x7e>
 8003cfc:	4b7e      	ldr	r3, [pc, #504]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d04:	e005      	b.n	8003d12 <HAL_RCC_OscConfig+0x8a>
 8003d06:	4b7c      	ldr	r3, [pc, #496]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d223      	bcs.n	8003d5e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fdbe 	bl	800489c <RCC_SetFlashLatencyFromMSIRange>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e3ba      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d2a:	4b73      	ldr	r3, [pc, #460]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a72      	ldr	r2, [pc, #456]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003d30:	f043 0308 	orr.w	r3, r3, #8
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b70      	ldr	r3, [pc, #448]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	496d      	ldr	r1, [pc, #436]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d48:	4b6b      	ldr	r3, [pc, #428]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	4968      	ldr	r1, [pc, #416]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
 8003d5c:	e025      	b.n	8003daa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d5e:	4b66      	ldr	r3, [pc, #408]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a65      	ldr	r2, [pc, #404]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003d64:	f043 0308 	orr.w	r3, r3, #8
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	4960      	ldr	r1, [pc, #384]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d7c:	4b5e      	ldr	r3, [pc, #376]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	495b      	ldr	r1, [pc, #364]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fd7e 	bl	800489c <RCC_SetFlashLatencyFromMSIRange>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e37a      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003daa:	f000 fc81 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 8003dae:	4602      	mov	r2, r0
 8003db0:	4b51      	ldr	r3, [pc, #324]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	4950      	ldr	r1, [pc, #320]	; (8003efc <HAL_RCC_OscConfig+0x274>)
 8003dbc:	5ccb      	ldrb	r3, [r1, r3]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc6:	4a4e      	ldr	r2, [pc, #312]	; (8003f00 <HAL_RCC_OscConfig+0x278>)
 8003dc8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dca:	4b4e      	ldr	r3, [pc, #312]	; (8003f04 <HAL_RCC_OscConfig+0x27c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe f844 	bl	8001e5c <HAL_InitTick>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d052      	beq.n	8003e84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	e35e      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d032      	beq.n	8003e50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dea:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a42      	ldr	r2, [pc, #264]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003df6:	f7fe f935 	bl	8002064 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dfe:	f7fe f931 	bl	8002064 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e347      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e10:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e1c:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a35      	ldr	r2, [pc, #212]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003e22:	f043 0308 	orr.w	r3, r3, #8
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	4b33      	ldr	r3, [pc, #204]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4930      	ldr	r1, [pc, #192]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	492b      	ldr	r1, [pc, #172]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	604b      	str	r3, [r1, #4]
 8003e4e:	e01a      	b.n	8003e86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e50:	4b29      	ldr	r3, [pc, #164]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a28      	ldr	r2, [pc, #160]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003e56:	f023 0301 	bic.w	r3, r3, #1
 8003e5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe f902 	bl	8002064 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e64:	f7fe f8fe 	bl	8002064 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e314      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e76:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x1dc>
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d073      	beq.n	8003f7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x21c>
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d10e      	bne.n	8003ebc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d10b      	bne.n	8003ebc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d063      	beq.n	8003f78 <HAL_RCC_OscConfig+0x2f0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d15f      	bne.n	8003f78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e2f1      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec4:	d106      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x24c>
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e025      	b.n	8003f20 <HAL_RCC_OscConfig+0x298>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003edc:	d114      	bne.n	8003f08 <HAL_RCC_OscConfig+0x280>
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a02      	ldr	r2, [pc, #8]	; (8003ef8 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e013      	b.n	8003f20 <HAL_RCC_OscConfig+0x298>
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	0800b548 	.word	0x0800b548
 8003f00:	20000034 	.word	0x20000034
 8003f04:	20000038 	.word	0x20000038
 8003f08:	4ba0      	ldr	r3, [pc, #640]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a9f      	ldr	r2, [pc, #636]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8003f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	4b9d      	ldr	r3, [pc, #628]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a9c      	ldr	r2, [pc, #624]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8003f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d013      	beq.n	8003f50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fe f89c 	bl	8002064 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f30:	f7fe f898 	bl	8002064 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b64      	cmp	r3, #100	; 0x64
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e2ae      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f42:	4b92      	ldr	r3, [pc, #584]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x2a8>
 8003f4e:	e014      	b.n	8003f7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe f888 	bl	8002064 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f58:	f7fe f884 	bl	8002064 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e29a      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f6a:	4b88      	ldr	r3, [pc, #544]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x2d0>
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d060      	beq.n	8004048 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCC_OscConfig+0x310>
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b0c      	cmp	r3, #12
 8003f90:	d119      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d116      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f98:	4b7c      	ldr	r3, [pc, #496]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x328>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e277      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb0:	4b76      	ldr	r3, [pc, #472]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	4973      	ldr	r1, [pc, #460]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fc4:	e040      	b.n	8004048 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d023      	beq.n	8004016 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fce:	4b6f      	ldr	r3, [pc, #444]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a6e      	ldr	r2, [pc, #440]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8003fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fda:	f7fe f843 	bl	8002064 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe2:	f7fe f83f 	bl	8002064 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e255      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff4:	4b65      	ldr	r3, [pc, #404]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004000:	4b62      	ldr	r3, [pc, #392]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	061b      	lsls	r3, r3, #24
 800400e:	495f      	ldr	r1, [pc, #380]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8004010:	4313      	orrs	r3, r2
 8004012:	604b      	str	r3, [r1, #4]
 8004014:	e018      	b.n	8004048 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004016:	4b5d      	ldr	r3, [pc, #372]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a5c      	ldr	r2, [pc, #368]	; (800418c <HAL_RCC_OscConfig+0x504>)
 800401c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004022:	f7fe f81f 	bl	8002064 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800402a:	f7fe f81b 	bl	8002064 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e231      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800403c:	4b53      	ldr	r3, [pc, #332]	; (800418c <HAL_RCC_OscConfig+0x504>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d03c      	beq.n	80040ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01c      	beq.n	8004096 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800405c:	4b4b      	ldr	r3, [pc, #300]	; (800418c <HAL_RCC_OscConfig+0x504>)
 800405e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004062:	4a4a      	ldr	r2, [pc, #296]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fd fffa 	bl	8002064 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004074:	f7fd fff6 	bl	8002064 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e20c      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004086:	4b41      	ldr	r3, [pc, #260]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8004088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ef      	beq.n	8004074 <HAL_RCC_OscConfig+0x3ec>
 8004094:	e01b      	b.n	80040ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004096:	4b3d      	ldr	r3, [pc, #244]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8004098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800409c:	4a3b      	ldr	r2, [pc, #236]	; (800418c <HAL_RCC_OscConfig+0x504>)
 800409e:	f023 0301 	bic.w	r3, r3, #1
 80040a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a6:	f7fd ffdd 	bl	8002064 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ae:	f7fd ffd9 	bl	8002064 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e1ef      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c0:	4b32      	ldr	r3, [pc, #200]	; (800418c <HAL_RCC_OscConfig+0x504>)
 80040c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1ef      	bne.n	80040ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 80a6 	beq.w	8004228 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040dc:	2300      	movs	r3, #0
 80040de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040e0:	4b2a      	ldr	r3, [pc, #168]	; (800418c <HAL_RCC_OscConfig+0x504>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10d      	bne.n	8004108 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ec:	4b27      	ldr	r3, [pc, #156]	; (800418c <HAL_RCC_OscConfig+0x504>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	4a26      	ldr	r2, [pc, #152]	; (800418c <HAL_RCC_OscConfig+0x504>)
 80040f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f6:	6593      	str	r3, [r2, #88]	; 0x58
 80040f8:	4b24      	ldr	r3, [pc, #144]	; (800418c <HAL_RCC_OscConfig+0x504>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004104:	2301      	movs	r3, #1
 8004106:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004108:	4b21      	ldr	r3, [pc, #132]	; (8004190 <HAL_RCC_OscConfig+0x508>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d118      	bne.n	8004146 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004114:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <HAL_RCC_OscConfig+0x508>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1d      	ldr	r2, [pc, #116]	; (8004190 <HAL_RCC_OscConfig+0x508>)
 800411a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004120:	f7fd ffa0 	bl	8002064 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004128:	f7fd ff9c 	bl	8002064 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e1b2      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <HAL_RCC_OscConfig+0x508>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d108      	bne.n	8004160 <HAL_RCC_OscConfig+0x4d8>
 800414e:	4b0f      	ldr	r3, [pc, #60]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	4a0d      	ldr	r2, [pc, #52]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800415e:	e029      	b.n	80041b4 <HAL_RCC_OscConfig+0x52c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b05      	cmp	r3, #5
 8004166:	d115      	bne.n	8004194 <HAL_RCC_OscConfig+0x50c>
 8004168:	4b08      	ldr	r3, [pc, #32]	; (800418c <HAL_RCC_OscConfig+0x504>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416e:	4a07      	ldr	r2, [pc, #28]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8004170:	f043 0304 	orr.w	r3, r3, #4
 8004174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004178:	4b04      	ldr	r3, [pc, #16]	; (800418c <HAL_RCC_OscConfig+0x504>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	4a03      	ldr	r2, [pc, #12]	; (800418c <HAL_RCC_OscConfig+0x504>)
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004188:	e014      	b.n	80041b4 <HAL_RCC_OscConfig+0x52c>
 800418a:	bf00      	nop
 800418c:	40021000 	.word	0x40021000
 8004190:	40007000 	.word	0x40007000
 8004194:	4b9a      	ldr	r3, [pc, #616]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	4a99      	ldr	r2, [pc, #612]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a4:	4b96      	ldr	r3, [pc, #600]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	4a95      	ldr	r2, [pc, #596]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 80041ac:	f023 0304 	bic.w	r3, r3, #4
 80041b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d016      	beq.n	80041ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fd ff52 	bl	8002064 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c2:	e00a      	b.n	80041da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c4:	f7fd ff4e 	bl	8002064 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e162      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041da:	4b89      	ldr	r3, [pc, #548]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0ed      	beq.n	80041c4 <HAL_RCC_OscConfig+0x53c>
 80041e8:	e015      	b.n	8004216 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ea:	f7fd ff3b 	bl	8002064 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f2:	f7fd ff37 	bl	8002064 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004200:	4293      	cmp	r3, r2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e14b      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004208:	4b7d      	ldr	r3, [pc, #500]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1ed      	bne.n	80041f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004216:	7ffb      	ldrb	r3, [r7, #31]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d105      	bne.n	8004228 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800421c:	4b78      	ldr	r3, [pc, #480]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 800421e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004220:	4a77      	ldr	r2, [pc, #476]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 8004222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004226:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d03c      	beq.n	80042ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01c      	beq.n	8004276 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800423c:	4b70      	ldr	r3, [pc, #448]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 800423e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004242:	4a6f      	ldr	r2, [pc, #444]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424c:	f7fd ff0a 	bl	8002064 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004254:	f7fd ff06 	bl	8002064 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e11c      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004266:	4b66      	ldr	r3, [pc, #408]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 8004268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0ef      	beq.n	8004254 <HAL_RCC_OscConfig+0x5cc>
 8004274:	e01b      	b.n	80042ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004276:	4b62      	ldr	r3, [pc, #392]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 8004278:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800427c:	4a60      	ldr	r2, [pc, #384]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004286:	f7fd feed 	bl	8002064 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800428e:	f7fd fee9 	bl	8002064 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e0ff      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042a0:	4b57      	ldr	r3, [pc, #348]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 80042a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ef      	bne.n	800428e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80f3 	beq.w	800449e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	2b02      	cmp	r3, #2
 80042be:	f040 80c9 	bne.w	8004454 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042c2:	4b4f      	ldr	r3, [pc, #316]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f003 0203 	and.w	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d12c      	bne.n	8004330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	3b01      	subs	r3, #1
 80042e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d123      	bne.n	8004330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d11b      	bne.n	8004330 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004304:	429a      	cmp	r2, r3
 8004306:	d113      	bne.n	8004330 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	3b01      	subs	r3, #1
 8004316:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d109      	bne.n	8004330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	3b01      	subs	r3, #1
 800432a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d06b      	beq.n	8004408 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b0c      	cmp	r3, #12
 8004334:	d062      	beq.n	80043fc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004336:	4b32      	ldr	r3, [pc, #200]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e0ac      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004346:	4b2e      	ldr	r3, [pc, #184]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2d      	ldr	r2, [pc, #180]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 800434c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004350:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004352:	f7fd fe87 	bl	8002064 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435a:	f7fd fe83 	bl	8002064 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e099      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800436c:	4b24      	ldr	r3, [pc, #144]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f0      	bne.n	800435a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004378:	4b21      	ldr	r3, [pc, #132]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	4b21      	ldr	r3, [pc, #132]	; (8004404 <HAL_RCC_OscConfig+0x77c>)
 800437e:	4013      	ands	r3, r2
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004388:	3a01      	subs	r2, #1
 800438a:	0112      	lsls	r2, r2, #4
 800438c:	4311      	orrs	r1, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004392:	0212      	lsls	r2, r2, #8
 8004394:	4311      	orrs	r1, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800439a:	0852      	lsrs	r2, r2, #1
 800439c:	3a01      	subs	r2, #1
 800439e:	0552      	lsls	r2, r2, #21
 80043a0:	4311      	orrs	r1, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043a6:	0852      	lsrs	r2, r2, #1
 80043a8:	3a01      	subs	r2, #1
 80043aa:	0652      	lsls	r2, r2, #25
 80043ac:	4311      	orrs	r1, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043b2:	06d2      	lsls	r2, r2, #27
 80043b4:	430a      	orrs	r2, r1
 80043b6:	4912      	ldr	r1, [pc, #72]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043bc:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0f      	ldr	r2, [pc, #60]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 80043c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043c8:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4a0c      	ldr	r2, [pc, #48]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 80043ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043d4:	f7fd fe46 	bl	8002064 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043dc:	f7fd fe42 	bl	8002064 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e058      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <HAL_RCC_OscConfig+0x778>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043fa:	e050      	b.n	800449e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e04f      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
 8004400:	40021000 	.word	0x40021000
 8004404:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004408:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <HAL_RCC_OscConfig+0x820>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d144      	bne.n	800449e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004414:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <HAL_RCC_OscConfig+0x820>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a23      	ldr	r2, [pc, #140]	; (80044a8 <HAL_RCC_OscConfig+0x820>)
 800441a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800441e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004420:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <HAL_RCC_OscConfig+0x820>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <HAL_RCC_OscConfig+0x820>)
 8004426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800442a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800442c:	f7fd fe1a 	bl	8002064 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004434:	f7fd fe16 	bl	8002064 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e02c      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004446:	4b18      	ldr	r3, [pc, #96]	; (80044a8 <HAL_RCC_OscConfig+0x820>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0x7ac>
 8004452:	e024      	b.n	800449e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b0c      	cmp	r3, #12
 8004458:	d01f      	beq.n	800449a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <HAL_RCC_OscConfig+0x820>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a12      	ldr	r2, [pc, #72]	; (80044a8 <HAL_RCC_OscConfig+0x820>)
 8004460:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004466:	f7fd fdfd 	bl	8002064 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446e:	f7fd fdf9 	bl	8002064 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e00f      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_RCC_OscConfig+0x820>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f0      	bne.n	800446e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <HAL_RCC_OscConfig+0x820>)
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	4905      	ldr	r1, [pc, #20]	; (80044a8 <HAL_RCC_OscConfig+0x820>)
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_RCC_OscConfig+0x824>)
 8004494:	4013      	ands	r3, r2
 8004496:	60cb      	str	r3, [r1, #12]
 8004498:	e001      	b.n	800449e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3720      	adds	r7, #32
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000
 80044ac:	feeefffc 	.word	0xfeeefffc

080044b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0e7      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c4:	4b75      	ldr	r3, [pc, #468]	; (800469c <HAL_RCC_ClockConfig+0x1ec>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d910      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b72      	ldr	r3, [pc, #456]	; (800469c <HAL_RCC_ClockConfig+0x1ec>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 0207 	bic.w	r2, r3, #7
 80044da:	4970      	ldr	r1, [pc, #448]	; (800469c <HAL_RCC_ClockConfig+0x1ec>)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b6e      	ldr	r3, [pc, #440]	; (800469c <HAL_RCC_ClockConfig+0x1ec>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0cf      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d010      	beq.n	8004522 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	4b66      	ldr	r3, [pc, #408]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450c:	429a      	cmp	r2, r3
 800450e:	d908      	bls.n	8004522 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004510:	4b63      	ldr	r3, [pc, #396]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4960      	ldr	r1, [pc, #384]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d04c      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d107      	bne.n	8004546 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004536:	4b5a      	ldr	r3, [pc, #360]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d121      	bne.n	8004586 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e0a6      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d107      	bne.n	800455e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800454e:	4b54      	ldr	r3, [pc, #336]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d115      	bne.n	8004586 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e09a      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d107      	bne.n	8004576 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004566:	4b4e      	ldr	r3, [pc, #312]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e08e      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004576:	4b4a      	ldr	r3, [pc, #296]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e086      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004586:	4b46      	ldr	r3, [pc, #280]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f023 0203 	bic.w	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4943      	ldr	r1, [pc, #268]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004594:	4313      	orrs	r3, r2
 8004596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004598:	f7fd fd64 	bl	8002064 <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a0:	f7fd fd60 	bl	8002064 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e06e      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b6:	4b3a      	ldr	r3, [pc, #232]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 020c 	and.w	r2, r3, #12
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d1eb      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d010      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	4b31      	ldr	r3, [pc, #196]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d208      	bcs.n	80045f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e4:	4b2e      	ldr	r3, [pc, #184]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	492b      	ldr	r1, [pc, #172]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045f6:	4b29      	ldr	r3, [pc, #164]	; (800469c <HAL_RCC_ClockConfig+0x1ec>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d210      	bcs.n	8004626 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004604:	4b25      	ldr	r3, [pc, #148]	; (800469c <HAL_RCC_ClockConfig+0x1ec>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f023 0207 	bic.w	r2, r3, #7
 800460c:	4923      	ldr	r1, [pc, #140]	; (800469c <HAL_RCC_ClockConfig+0x1ec>)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	4313      	orrs	r3, r2
 8004612:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004614:	4b21      	ldr	r3, [pc, #132]	; (800469c <HAL_RCC_ClockConfig+0x1ec>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d001      	beq.n	8004626 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e036      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d008      	beq.n	8004644 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004632:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	4918      	ldr	r1, [pc, #96]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004640:	4313      	orrs	r3, r2
 8004642:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d009      	beq.n	8004664 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004650:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4910      	ldr	r1, [pc, #64]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004660:	4313      	orrs	r3, r2
 8004662:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004664:	f000 f824 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <HAL_RCC_ClockConfig+0x1f0>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	490b      	ldr	r1, [pc, #44]	; (80046a4 <HAL_RCC_ClockConfig+0x1f4>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
 8004680:	4a09      	ldr	r2, [pc, #36]	; (80046a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004682:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004684:	4b09      	ldr	r3, [pc, #36]	; (80046ac <HAL_RCC_ClockConfig+0x1fc>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7fd fbe7 	bl	8001e5c <HAL_InitTick>
 800468e:	4603      	mov	r3, r0
 8004690:	72fb      	strb	r3, [r7, #11]

  return status;
 8004692:	7afb      	ldrb	r3, [r7, #11]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40022000 	.word	0x40022000
 80046a0:	40021000 	.word	0x40021000
 80046a4:	0800b548 	.word	0x0800b548
 80046a8:	20000034 	.word	0x20000034
 80046ac:	20000038 	.word	0x20000038

080046b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b089      	sub	sp, #36	; 0x24
 80046b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	2300      	movs	r3, #0
 80046bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046be:	4b3e      	ldr	r3, [pc, #248]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046c8:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0x34>
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	2b0c      	cmp	r3, #12
 80046dc:	d121      	bne.n	8004722 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d11e      	bne.n	8004722 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046e4:	4b34      	ldr	r3, [pc, #208]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046f0:	4b31      	ldr	r3, [pc, #196]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	e005      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004700:	4b2d      	ldr	r3, [pc, #180]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800470c:	4a2b      	ldr	r2, [pc, #172]	; (80047bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004714:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10d      	bne.n	8004738 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004720:	e00a      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b04      	cmp	r3, #4
 8004726:	d102      	bne.n	800472e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004728:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	e004      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b08      	cmp	r3, #8
 8004732:	d101      	bne.n	8004738 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004734:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004736:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b0c      	cmp	r3, #12
 800473c:	d134      	bne.n	80047a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800473e:	4b1e      	ldr	r3, [pc, #120]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d003      	beq.n	8004756 <HAL_RCC_GetSysClockFreq+0xa6>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b03      	cmp	r3, #3
 8004752:	d003      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0xac>
 8004754:	e005      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004756:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004758:	617b      	str	r3, [r7, #20]
      break;
 800475a:	e005      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800475c:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800475e:	617b      	str	r3, [r7, #20]
      break;
 8004760:	e002      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	617b      	str	r3, [r7, #20]
      break;
 8004766:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004768:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	3301      	adds	r3, #1
 8004774:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	0a1b      	lsrs	r3, r3, #8
 800477c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	fb03 f202 	mul.w	r2, r3, r2
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800478e:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	0e5b      	lsrs	r3, r3, #25
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	3301      	adds	r3, #1
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047a8:	69bb      	ldr	r3, [r7, #24]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3724      	adds	r7, #36	; 0x24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40021000 	.word	0x40021000
 80047bc:	0800b560 	.word	0x0800b560
 80047c0:	00f42400 	.word	0x00f42400
 80047c4:	007a1200 	.word	0x007a1200

080047c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <HAL_RCC_GetHCLKFreq+0x14>)
 80047ce:	681b      	ldr	r3, [r3, #0]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000034 	.word	0x20000034

080047e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047e4:	f7ff fff0 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4904      	ldr	r1, [pc, #16]	; (8004808 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000
 8004808:	0800b558 	.word	0x0800b558

0800480c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004810:	f7ff ffda 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	0adb      	lsrs	r3, r3, #11
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4904      	ldr	r1, [pc, #16]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40021000 	.word	0x40021000
 8004834:	0800b558 	.word	0x0800b558

08004838 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	220f      	movs	r2, #15
 8004846:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004848:	4b12      	ldr	r3, [pc, #72]	; (8004894 <HAL_RCC_GetClockConfig+0x5c>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0203 	and.w	r2, r3, #3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004854:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <HAL_RCC_GetClockConfig+0x5c>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <HAL_RCC_GetClockConfig+0x5c>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800486c:	4b09      	ldr	r3, [pc, #36]	; (8004894 <HAL_RCC_GetClockConfig+0x5c>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <HAL_RCC_GetClockConfig+0x60>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0207 	and.w	r2, r3, #7
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	601a      	str	r2, [r3, #0]
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40021000 	.word	0x40021000
 8004898:	40022000 	.word	0x40022000

0800489c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048a8:	4b2a      	ldr	r3, [pc, #168]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048b4:	f7ff f984 	bl	8003bc0 <HAL_PWREx_GetVoltageRange>
 80048b8:	6178      	str	r0, [r7, #20]
 80048ba:	e014      	b.n	80048e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048bc:	4b25      	ldr	r3, [pc, #148]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	4a24      	ldr	r2, [pc, #144]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c6:	6593      	str	r3, [r2, #88]	; 0x58
 80048c8:	4b22      	ldr	r3, [pc, #136]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048d4:	f7ff f974 	bl	8003bc0 <HAL_PWREx_GetVoltageRange>
 80048d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048da:	4b1e      	ldr	r3, [pc, #120]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048de:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ec:	d10b      	bne.n	8004906 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d919      	bls.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2ba0      	cmp	r3, #160	; 0xa0
 80048f8:	d902      	bls.n	8004900 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048fa:	2302      	movs	r3, #2
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	e013      	b.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004900:	2301      	movs	r3, #1
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	e010      	b.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b80      	cmp	r3, #128	; 0x80
 800490a:	d902      	bls.n	8004912 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800490c:	2303      	movs	r3, #3
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	e00a      	b.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	d102      	bne.n	800491e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004918:	2302      	movs	r3, #2
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	e004      	b.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b70      	cmp	r3, #112	; 0x70
 8004922:	d101      	bne.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004924:	2301      	movs	r3, #1
 8004926:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f023 0207 	bic.w	r2, r3, #7
 8004930:	4909      	ldr	r1, [pc, #36]	; (8004958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	429a      	cmp	r2, r3
 8004944:	d001      	beq.n	800494a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40021000 	.word	0x40021000
 8004958:	40022000 	.word	0x40022000

0800495c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004964:	2300      	movs	r3, #0
 8004966:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004968:	2300      	movs	r3, #0
 800496a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004974:	2b00      	cmp	r3, #0
 8004976:	d031      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004980:	d01a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004982:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004986:	d814      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d009      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800498c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004990:	d10f      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004992:	4b5d      	ldr	r3, [pc, #372]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	4a5c      	ldr	r2, [pc, #368]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800499e:	e00c      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3304      	adds	r3, #4
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 f9de 	bl	8004d68 <RCCEx_PLLSAI1_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049b0:	e003      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	74fb      	strb	r3, [r7, #19]
      break;
 80049b6:	e000      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80049b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ba:	7cfb      	ldrb	r3, [r7, #19]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10b      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049c0:	4b51      	ldr	r3, [pc, #324]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	494e      	ldr	r1, [pc, #312]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049d6:	e001      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d8:	7cfb      	ldrb	r3, [r7, #19]
 80049da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 809e 	beq.w	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ea:	2300      	movs	r3, #0
 80049ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049ee:	4b46      	ldr	r3, [pc, #280]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80049fe:	2300      	movs	r3, #0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00d      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a04:	4b40      	ldr	r3, [pc, #256]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a08:	4a3f      	ldr	r2, [pc, #252]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a10:	4b3d      	ldr	r3, [pc, #244]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a20:	4b3a      	ldr	r3, [pc, #232]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a39      	ldr	r2, [pc, #228]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a2c:	f7fd fb1a 	bl	8002064 <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a32:	e009      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a34:	f7fd fb16 	bl	8002064 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d902      	bls.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	74fb      	strb	r3, [r7, #19]
        break;
 8004a46:	e005      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a48:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0ef      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d15a      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a5a:	4b2b      	ldr	r3, [pc, #172]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01e      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d019      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a76:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a82:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a88:	4a1f      	ldr	r2, [pc, #124]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a92:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a98:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004aa2:	4a19      	ldr	r2, [pc, #100]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d016      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fd fad6 	bl	8002064 <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004abc:	f7fd fad2 	bl	8002064 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d902      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	74fb      	strb	r3, [r7, #19]
            break;
 8004ad2:	e006      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0ec      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004ae2:	7cfb      	ldrb	r3, [r7, #19]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10b      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ae8:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af6:	4904      	ldr	r1, [pc, #16]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004afe:	e009      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	74bb      	strb	r3, [r7, #18]
 8004b04:	e006      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b14:	7c7b      	ldrb	r3, [r7, #17]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d105      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1a:	4b8a      	ldr	r3, [pc, #552]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	4a89      	ldr	r2, [pc, #548]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b32:	4b84      	ldr	r3, [pc, #528]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	f023 0203 	bic.w	r2, r3, #3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	4980      	ldr	r1, [pc, #512]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b54:	4b7b      	ldr	r3, [pc, #492]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f023 020c 	bic.w	r2, r3, #12
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	4978      	ldr	r1, [pc, #480]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b76:	4b73      	ldr	r3, [pc, #460]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	496f      	ldr	r1, [pc, #444]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b98:	4b6a      	ldr	r3, [pc, #424]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba6:	4967      	ldr	r1, [pc, #412]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bba:	4b62      	ldr	r3, [pc, #392]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	495e      	ldr	r1, [pc, #376]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bdc:	4b59      	ldr	r3, [pc, #356]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	4956      	ldr	r1, [pc, #344]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bfe:	4b51      	ldr	r3, [pc, #324]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	494d      	ldr	r1, [pc, #308]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d028      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c20:	4b48      	ldr	r3, [pc, #288]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	4945      	ldr	r1, [pc, #276]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c3e:	d106      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c40:	4b40      	ldr	r3, [pc, #256]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a3f      	ldr	r2, [pc, #252]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c4a:	60d3      	str	r3, [r2, #12]
 8004c4c:	e011      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c56:	d10c      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f882 	bl	8004d68 <RCCEx_PLLSAI1_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c68:	7cfb      	ldrb	r3, [r7, #19]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004c6e:	7cfb      	ldrb	r3, [r7, #19]
 8004c70:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d028      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c7e:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8c:	492d      	ldr	r1, [pc, #180]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c9c:	d106      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c9e:	4b29      	ldr	r3, [pc, #164]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	4a28      	ldr	r2, [pc, #160]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca8:	60d3      	str	r3, [r2, #12]
 8004caa:	e011      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	2101      	movs	r1, #1
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 f853 	bl	8004d68 <RCCEx_PLLSAI1_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cc6:	7cfb      	ldrb	r3, [r7, #19]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004ccc:	7cfb      	ldrb	r3, [r7, #19]
 8004cce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01c      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cdc:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cea:	4916      	ldr	r1, [pc, #88]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cfa:	d10c      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	2102      	movs	r1, #2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 f830 	bl	8004d68 <RCCEx_PLLSAI1_Config>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d0c:	7cfb      	ldrb	r3, [r7, #19]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004d12:	7cfb      	ldrb	r3, [r7, #19]
 8004d14:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d28:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d30:	4904      	ldr	r1, [pc, #16]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d38:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000

08004d48 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a04      	ldr	r2, [pc, #16]	; (8004d64 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d52:	f043 0304 	orr.w	r3, r3, #4
 8004d56:	6013      	str	r3, [r2, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40021000 	.word	0x40021000

08004d68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d76:	4b74      	ldr	r3, [pc, #464]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d018      	beq.n	8004db4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d82:	4b71      	ldr	r3, [pc, #452]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f003 0203 	and.w	r2, r3, #3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d10d      	bne.n	8004dae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
       ||
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d9a:	4b6b      	ldr	r3, [pc, #428]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	091b      	lsrs	r3, r3, #4
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
       ||
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d047      	beq.n	8004e3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	73fb      	strb	r3, [r7, #15]
 8004db2:	e044      	b.n	8004e3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d018      	beq.n	8004dee <RCCEx_PLLSAI1_Config+0x86>
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d825      	bhi.n	8004e0c <RCCEx_PLLSAI1_Config+0xa4>
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d002      	beq.n	8004dca <RCCEx_PLLSAI1_Config+0x62>
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d009      	beq.n	8004ddc <RCCEx_PLLSAI1_Config+0x74>
 8004dc8:	e020      	b.n	8004e0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dca:	4b5f      	ldr	r3, [pc, #380]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d11d      	bne.n	8004e12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dda:	e01a      	b.n	8004e12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ddc:	4b5a      	ldr	r3, [pc, #360]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d116      	bne.n	8004e16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dec:	e013      	b.n	8004e16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dee:	4b56      	ldr	r3, [pc, #344]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10f      	bne.n	8004e1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dfa:	4b53      	ldr	r3, [pc, #332]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d109      	bne.n	8004e1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e0a:	e006      	b.n	8004e1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e10:	e004      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e12:	bf00      	nop
 8004e14:	e002      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10d      	bne.n	8004e3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e22:	4b49      	ldr	r3, [pc, #292]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6819      	ldr	r1, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	430b      	orrs	r3, r1
 8004e38:	4943      	ldr	r1, [pc, #268]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d17c      	bne.n	8004f3e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e44:	4b40      	ldr	r3, [pc, #256]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a3f      	ldr	r2, [pc, #252]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e50:	f7fd f908 	bl	8002064 <HAL_GetTick>
 8004e54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e56:	e009      	b.n	8004e6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e58:	f7fd f904 	bl	8002064 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d902      	bls.n	8004e6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	73fb      	strb	r3, [r7, #15]
        break;
 8004e6a:	e005      	b.n	8004e78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e6c:	4b36      	ldr	r3, [pc, #216]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1ef      	bne.n	8004e58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d15f      	bne.n	8004f3e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d110      	bne.n	8004ea6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e84:	4b30      	ldr	r3, [pc, #192]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004e8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6892      	ldr	r2, [r2, #8]
 8004e94:	0211      	lsls	r1, r2, #8
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68d2      	ldr	r2, [r2, #12]
 8004e9a:	06d2      	lsls	r2, r2, #27
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	492a      	ldr	r1, [pc, #168]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	610b      	str	r3, [r1, #16]
 8004ea4:	e027      	b.n	8004ef6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d112      	bne.n	8004ed2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eac:	4b26      	ldr	r3, [pc, #152]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004eb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6892      	ldr	r2, [r2, #8]
 8004ebc:	0211      	lsls	r1, r2, #8
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6912      	ldr	r2, [r2, #16]
 8004ec2:	0852      	lsrs	r2, r2, #1
 8004ec4:	3a01      	subs	r2, #1
 8004ec6:	0552      	lsls	r2, r2, #21
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	491f      	ldr	r1, [pc, #124]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	610b      	str	r3, [r1, #16]
 8004ed0:	e011      	b.n	8004ef6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ed2:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004eda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6892      	ldr	r2, [r2, #8]
 8004ee2:	0211      	lsls	r1, r2, #8
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6952      	ldr	r2, [r2, #20]
 8004ee8:	0852      	lsrs	r2, r2, #1
 8004eea:	3a01      	subs	r2, #1
 8004eec:	0652      	lsls	r2, r2, #25
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	4915      	ldr	r1, [pc, #84]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004efc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f02:	f7fd f8af 	bl	8002064 <HAL_GetTick>
 8004f06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f08:	e009      	b.n	8004f1e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f0a:	f7fd f8ab 	bl	8002064 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d902      	bls.n	8004f1e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	73fb      	strb	r3, [r7, #15]
          break;
 8004f1c:	e005      	b.n	8004f2a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0ef      	beq.n	8004f0a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	4903      	ldr	r1, [pc, #12]	; (8004f48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40021000 	.word	0x40021000

08004f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e049      	b.n	8004ff2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fc fece 	bl	8001d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f000 fa1e 	bl	80053cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d001      	beq.n	8005014 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e033      	b.n	800507c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a19      	ldr	r2, [pc, #100]	; (8005088 <HAL_TIM_Base_Start+0x8c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d009      	beq.n	800503a <HAL_TIM_Base_Start+0x3e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502e:	d004      	beq.n	800503a <HAL_TIM_Base_Start+0x3e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a15      	ldr	r2, [pc, #84]	; (800508c <HAL_TIM_Base_Start+0x90>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d115      	bne.n	8005066 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	4b13      	ldr	r3, [pc, #76]	; (8005090 <HAL_TIM_Base_Start+0x94>)
 8005042:	4013      	ands	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b06      	cmp	r3, #6
 800504a:	d015      	beq.n	8005078 <HAL_TIM_Base_Start+0x7c>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005052:	d011      	beq.n	8005078 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005064:	e008      	b.n	8005078 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0201 	orr.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	e000      	b.n	800507a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005078:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	40012c00 	.word	0x40012c00
 800508c:	40014000 	.word	0x40014000
 8005090:	00010007 	.word	0x00010007

08005094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d001      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e03b      	b.n	8005124 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a19      	ldr	r2, [pc, #100]	; (8005130 <HAL_TIM_Base_Start_IT+0x9c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d009      	beq.n	80050e2 <HAL_TIM_Base_Start_IT+0x4e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d6:	d004      	beq.n	80050e2 <HAL_TIM_Base_Start_IT+0x4e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a15      	ldr	r2, [pc, #84]	; (8005134 <HAL_TIM_Base_Start_IT+0xa0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d115      	bne.n	800510e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	4b13      	ldr	r3, [pc, #76]	; (8005138 <HAL_TIM_Base_Start_IT+0xa4>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b06      	cmp	r3, #6
 80050f2:	d015      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x8c>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fa:	d011      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510c:	e008      	b.n	8005120 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0201 	orr.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e000      	b.n	8005122 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005120:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40012c00 	.word	0x40012c00
 8005134:	40014000 	.word	0x40014000
 8005138:	00010007 	.word	0x00010007

0800513c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b02      	cmp	r3, #2
 8005150:	d122      	bne.n	8005198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b02      	cmp	r3, #2
 800515e:	d11b      	bne.n	8005198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0202 	mvn.w	r2, #2
 8005168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f905 	bl	800538e <HAL_TIM_IC_CaptureCallback>
 8005184:	e005      	b.n	8005192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8f7 	bl	800537a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f908 	bl	80053a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d122      	bne.n	80051ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d11b      	bne.n	80051ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0204 	mvn.w	r2, #4
 80051bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f8db 	bl	800538e <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f8cd 	bl	800537a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f8de 	bl	80053a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d122      	bne.n	8005240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b08      	cmp	r3, #8
 8005206:	d11b      	bne.n	8005240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0208 	mvn.w	r2, #8
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2204      	movs	r2, #4
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f8b1 	bl	800538e <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f8a3 	bl	800537a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f8b4 	bl	80053a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0310 	and.w	r3, r3, #16
 800524a:	2b10      	cmp	r3, #16
 800524c:	d122      	bne.n	8005294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b10      	cmp	r3, #16
 800525a:	d11b      	bne.n	8005294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0210 	mvn.w	r2, #16
 8005264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2208      	movs	r2, #8
 800526a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f887 	bl	800538e <HAL_TIM_IC_CaptureCallback>
 8005280:	e005      	b.n	800528e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f879 	bl	800537a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f88a 	bl	80053a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d10e      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d107      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0201 	mvn.w	r2, #1
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fc faea 	bl	8001894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ca:	2b80      	cmp	r3, #128	; 0x80
 80052cc:	d10e      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d8:	2b80      	cmp	r3, #128	; 0x80
 80052da:	d107      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f944 	bl	8005574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fa:	d10e      	bne.n	800531a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005306:	2b80      	cmp	r3, #128	; 0x80
 8005308:	d107      	bne.n	800531a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f937 	bl	8005588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005324:	2b40      	cmp	r3, #64	; 0x40
 8005326:	d10e      	bne.n	8005346 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d107      	bne.n	8005346 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800533e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f838 	bl	80053b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b20      	cmp	r3, #32
 8005352:	d10e      	bne.n	8005372 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b20      	cmp	r3, #32
 8005360:	d107      	bne.n	8005372 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f06f 0220 	mvn.w	r2, #32
 800536a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f8f7 	bl	8005560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005372:	bf00      	nop
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
	...

080053cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a2a      	ldr	r2, [pc, #168]	; (8005488 <TIM_Base_SetConfig+0xbc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_Base_SetConfig+0x20>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ea:	d108      	bne.n	80053fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a21      	ldr	r2, [pc, #132]	; (8005488 <TIM_Base_SetConfig+0xbc>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00b      	beq.n	800541e <TIM_Base_SetConfig+0x52>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540c:	d007      	beq.n	800541e <TIM_Base_SetConfig+0x52>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a1e      	ldr	r2, [pc, #120]	; (800548c <TIM_Base_SetConfig+0xc0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_Base_SetConfig+0x52>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a1d      	ldr	r2, [pc, #116]	; (8005490 <TIM_Base_SetConfig+0xc4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d108      	bne.n	8005430 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a0c      	ldr	r2, [pc, #48]	; (8005488 <TIM_Base_SetConfig+0xbc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d007      	beq.n	800546c <TIM_Base_SetConfig+0xa0>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a0b      	ldr	r2, [pc, #44]	; (800548c <TIM_Base_SetConfig+0xc0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_Base_SetConfig+0xa0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <TIM_Base_SetConfig+0xc4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d103      	bne.n	8005474 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	615a      	str	r2, [r3, #20]
}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40014000 	.word	0x40014000
 8005490:	40014400 	.word	0x40014400

08005494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e04f      	b.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a21      	ldr	r2, [pc, #132]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d108      	bne.n	80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a14      	ldr	r2, [pc, #80]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d009      	beq.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005514:	d004      	beq.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a10      	ldr	r2, [pc, #64]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d10c      	bne.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005526:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	4313      	orrs	r3, r2
 8005530:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40014000 	.word	0x40014000

08005560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e040      	b.n	8005630 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fc fbe2 	bl	8001d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2224      	movs	r2, #36	; 0x24
 80055c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f8c0 	bl	8005760 <UART_SetConfig>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e022      	b.n	8005630 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fae0 	bl	8005bb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0201 	orr.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fb67 	bl	8005cfc <UART_CheckIdleState>
 800562e:	4603      	mov	r3, r0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	; 0x28
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	603b      	str	r3, [r7, #0]
 8005644:	4613      	mov	r3, r2
 8005646:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800564c:	2b20      	cmp	r3, #32
 800564e:	f040 8082 	bne.w	8005756 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <HAL_UART_Transmit+0x26>
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e07a      	b.n	8005758 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_UART_Transmit+0x38>
 800566c:	2302      	movs	r3, #2
 800566e:	e073      	b.n	8005758 <HAL_UART_Transmit+0x120>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2221      	movs	r2, #33	; 0x21
 8005684:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005686:	f7fc fced 	bl	8002064 <HAL_GetTick>
 800568a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	88fa      	ldrh	r2, [r7, #6]
 8005690:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a4:	d108      	bne.n	80056b8 <HAL_UART_Transmit+0x80>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d104      	bne.n	80056b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	e003      	b.n	80056c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80056c8:	e02d      	b.n	8005726 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2200      	movs	r2, #0
 80056d2:	2180      	movs	r1, #128	; 0x80
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 fb5a 	bl	8005d8e <UART_WaitOnFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e039      	b.n	8005758 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10b      	bne.n	8005702 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	881a      	ldrh	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f6:	b292      	uxth	r2, r2
 80056f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	3302      	adds	r3, #2
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	e008      	b.n	8005714 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	781a      	ldrb	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	b292      	uxth	r2, r2
 800570c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	3301      	adds	r3, #1
 8005712:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1cb      	bne.n	80056ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2200      	movs	r2, #0
 800573a:	2140      	movs	r1, #64	; 0x40
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 fb26 	bl	8005d8e <UART_WaitOnFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e005      	b.n	8005758 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	e000      	b.n	8005758 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005756:	2302      	movs	r3, #2
  }
}
 8005758:	4618      	mov	r0, r3
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005764:	b08a      	sub	sp, #40	; 0x28
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	431a      	orrs	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	431a      	orrs	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	4313      	orrs	r3, r2
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4bb4      	ldr	r3, [pc, #720]	; (8005a60 <UART_SetConfig+0x300>)
 8005790:	4013      	ands	r3, r2
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	6812      	ldr	r2, [r2, #0]
 8005796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005798:	430b      	orrs	r3, r1
 800579a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4aa9      	ldr	r2, [pc, #676]	; (8005a64 <UART_SetConfig+0x304>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d004      	beq.n	80057cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c8:	4313      	orrs	r3, r2
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057dc:	430a      	orrs	r2, r1
 80057de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4aa0      	ldr	r2, [pc, #640]	; (8005a68 <UART_SetConfig+0x308>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d126      	bne.n	8005838 <UART_SetConfig+0xd8>
 80057ea:	4ba0      	ldr	r3, [pc, #640]	; (8005a6c <UART_SetConfig+0x30c>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d81b      	bhi.n	8005830 <UART_SetConfig+0xd0>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0xa0>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005811 	.word	0x08005811
 8005804:	08005821 	.word	0x08005821
 8005808:	08005819 	.word	0x08005819
 800580c:	08005829 	.word	0x08005829
 8005810:	2301      	movs	r3, #1
 8005812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005816:	e080      	b.n	800591a <UART_SetConfig+0x1ba>
 8005818:	2302      	movs	r3, #2
 800581a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800581e:	e07c      	b.n	800591a <UART_SetConfig+0x1ba>
 8005820:	2304      	movs	r3, #4
 8005822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005826:	e078      	b.n	800591a <UART_SetConfig+0x1ba>
 8005828:	2308      	movs	r3, #8
 800582a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800582e:	e074      	b.n	800591a <UART_SetConfig+0x1ba>
 8005830:	2310      	movs	r3, #16
 8005832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005836:	e070      	b.n	800591a <UART_SetConfig+0x1ba>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a8c      	ldr	r2, [pc, #560]	; (8005a70 <UART_SetConfig+0x310>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d138      	bne.n	80058b4 <UART_SetConfig+0x154>
 8005842:	4b8a      	ldr	r3, [pc, #552]	; (8005a6c <UART_SetConfig+0x30c>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005848:	f003 030c 	and.w	r3, r3, #12
 800584c:	2b0c      	cmp	r3, #12
 800584e:	d82d      	bhi.n	80058ac <UART_SetConfig+0x14c>
 8005850:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <UART_SetConfig+0xf8>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	0800588d 	.word	0x0800588d
 800585c:	080058ad 	.word	0x080058ad
 8005860:	080058ad 	.word	0x080058ad
 8005864:	080058ad 	.word	0x080058ad
 8005868:	0800589d 	.word	0x0800589d
 800586c:	080058ad 	.word	0x080058ad
 8005870:	080058ad 	.word	0x080058ad
 8005874:	080058ad 	.word	0x080058ad
 8005878:	08005895 	.word	0x08005895
 800587c:	080058ad 	.word	0x080058ad
 8005880:	080058ad 	.word	0x080058ad
 8005884:	080058ad 	.word	0x080058ad
 8005888:	080058a5 	.word	0x080058a5
 800588c:	2300      	movs	r3, #0
 800588e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005892:	e042      	b.n	800591a <UART_SetConfig+0x1ba>
 8005894:	2302      	movs	r3, #2
 8005896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589a:	e03e      	b.n	800591a <UART_SetConfig+0x1ba>
 800589c:	2304      	movs	r3, #4
 800589e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a2:	e03a      	b.n	800591a <UART_SetConfig+0x1ba>
 80058a4:	2308      	movs	r3, #8
 80058a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058aa:	e036      	b.n	800591a <UART_SetConfig+0x1ba>
 80058ac:	2310      	movs	r3, #16
 80058ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b2:	e032      	b.n	800591a <UART_SetConfig+0x1ba>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a6a      	ldr	r2, [pc, #424]	; (8005a64 <UART_SetConfig+0x304>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d12a      	bne.n	8005914 <UART_SetConfig+0x1b4>
 80058be:	4b6b      	ldr	r3, [pc, #428]	; (8005a6c <UART_SetConfig+0x30c>)
 80058c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058cc:	d01a      	beq.n	8005904 <UART_SetConfig+0x1a4>
 80058ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058d2:	d81b      	bhi.n	800590c <UART_SetConfig+0x1ac>
 80058d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058d8:	d00c      	beq.n	80058f4 <UART_SetConfig+0x194>
 80058da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058de:	d815      	bhi.n	800590c <UART_SetConfig+0x1ac>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <UART_SetConfig+0x18c>
 80058e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e8:	d008      	beq.n	80058fc <UART_SetConfig+0x19c>
 80058ea:	e00f      	b.n	800590c <UART_SetConfig+0x1ac>
 80058ec:	2300      	movs	r3, #0
 80058ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f2:	e012      	b.n	800591a <UART_SetConfig+0x1ba>
 80058f4:	2302      	movs	r3, #2
 80058f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fa:	e00e      	b.n	800591a <UART_SetConfig+0x1ba>
 80058fc:	2304      	movs	r3, #4
 80058fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005902:	e00a      	b.n	800591a <UART_SetConfig+0x1ba>
 8005904:	2308      	movs	r3, #8
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590a:	e006      	b.n	800591a <UART_SetConfig+0x1ba>
 800590c:	2310      	movs	r3, #16
 800590e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005912:	e002      	b.n	800591a <UART_SetConfig+0x1ba>
 8005914:	2310      	movs	r3, #16
 8005916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a51      	ldr	r2, [pc, #324]	; (8005a64 <UART_SetConfig+0x304>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d17a      	bne.n	8005a1a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005928:	2b08      	cmp	r3, #8
 800592a:	d824      	bhi.n	8005976 <UART_SetConfig+0x216>
 800592c:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <UART_SetConfig+0x1d4>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	08005959 	.word	0x08005959
 8005938:	08005977 	.word	0x08005977
 800593c:	08005961 	.word	0x08005961
 8005940:	08005977 	.word	0x08005977
 8005944:	08005967 	.word	0x08005967
 8005948:	08005977 	.word	0x08005977
 800594c:	08005977 	.word	0x08005977
 8005950:	08005977 	.word	0x08005977
 8005954:	0800596f 	.word	0x0800596f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005958:	f7fe ff42 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 800595c:	61f8      	str	r0, [r7, #28]
        break;
 800595e:	e010      	b.n	8005982 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005960:	4b44      	ldr	r3, [pc, #272]	; (8005a74 <UART_SetConfig+0x314>)
 8005962:	61fb      	str	r3, [r7, #28]
        break;
 8005964:	e00d      	b.n	8005982 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005966:	f7fe fea3 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 800596a:	61f8      	str	r0, [r7, #28]
        break;
 800596c:	e009      	b.n	8005982 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800596e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005972:	61fb      	str	r3, [r7, #28]
        break;
 8005974:	e005      	b.n	8005982 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005980:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8107 	beq.w	8005b98 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	4413      	add	r3, r2
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	429a      	cmp	r2, r3
 8005998:	d305      	bcc.n	80059a6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d903      	bls.n	80059ae <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059ac:	e0f4      	b.n	8005b98 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	2200      	movs	r2, #0
 80059b2:	461c      	mov	r4, r3
 80059b4:	4615      	mov	r5, r2
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	f04f 0300 	mov.w	r3, #0
 80059be:	022b      	lsls	r3, r5, #8
 80059c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80059c4:	0222      	lsls	r2, r4, #8
 80059c6:	68f9      	ldr	r1, [r7, #12]
 80059c8:	6849      	ldr	r1, [r1, #4]
 80059ca:	0849      	lsrs	r1, r1, #1
 80059cc:	2000      	movs	r0, #0
 80059ce:	4688      	mov	r8, r1
 80059d0:	4681      	mov	r9, r0
 80059d2:	eb12 0a08 	adds.w	sl, r2, r8
 80059d6:	eb43 0b09 	adc.w	fp, r3, r9
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	603b      	str	r3, [r7, #0]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e8:	4650      	mov	r0, sl
 80059ea:	4659      	mov	r1, fp
 80059ec:	f7fb f8dc 	bl	8000ba8 <__aeabi_uldivmod>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4613      	mov	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059fe:	d308      	bcc.n	8005a12 <UART_SetConfig+0x2b2>
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a06:	d204      	bcs.n	8005a12 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	60da      	str	r2, [r3, #12]
 8005a10:	e0c2      	b.n	8005b98 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a18:	e0be      	b.n	8005b98 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a22:	d16a      	bne.n	8005afa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d834      	bhi.n	8005a96 <UART_SetConfig+0x336>
 8005a2c:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <UART_SetConfig+0x2d4>)
 8005a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a32:	bf00      	nop
 8005a34:	08005a59 	.word	0x08005a59
 8005a38:	08005a79 	.word	0x08005a79
 8005a3c:	08005a81 	.word	0x08005a81
 8005a40:	08005a97 	.word	0x08005a97
 8005a44:	08005a87 	.word	0x08005a87
 8005a48:	08005a97 	.word	0x08005a97
 8005a4c:	08005a97 	.word	0x08005a97
 8005a50:	08005a97 	.word	0x08005a97
 8005a54:	08005a8f 	.word	0x08005a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a58:	f7fe fec2 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 8005a5c:	61f8      	str	r0, [r7, #28]
        break;
 8005a5e:	e020      	b.n	8005aa2 <UART_SetConfig+0x342>
 8005a60:	efff69f3 	.word	0xefff69f3
 8005a64:	40008000 	.word	0x40008000
 8005a68:	40013800 	.word	0x40013800
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	40004400 	.word	0x40004400
 8005a74:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a78:	f7fe fec8 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 8005a7c:	61f8      	str	r0, [r7, #28]
        break;
 8005a7e:	e010      	b.n	8005aa2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a80:	4b4c      	ldr	r3, [pc, #304]	; (8005bb4 <UART_SetConfig+0x454>)
 8005a82:	61fb      	str	r3, [r7, #28]
        break;
 8005a84:	e00d      	b.n	8005aa2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a86:	f7fe fe13 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 8005a8a:	61f8      	str	r0, [r7, #28]
        break;
 8005a8c:	e009      	b.n	8005aa2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a92:	61fb      	str	r3, [r7, #28]
        break;
 8005a94:	e005      	b.n	8005aa2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005aa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d077      	beq.n	8005b98 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	005a      	lsls	r2, r3, #1
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	085b      	lsrs	r3, r3, #1
 8005ab2:	441a      	add	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b0f      	cmp	r3, #15
 8005ac2:	d916      	bls.n	8005af2 <UART_SetConfig+0x392>
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aca:	d212      	bcs.n	8005af2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f023 030f 	bic.w	r3, r3, #15
 8005ad4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	8afb      	ldrh	r3, [r7, #22]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	8afa      	ldrh	r2, [r7, #22]
 8005aee:	60da      	str	r2, [r3, #12]
 8005af0:	e052      	b.n	8005b98 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005af8:	e04e      	b.n	8005b98 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005afa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d827      	bhi.n	8005b52 <UART_SetConfig+0x3f2>
 8005b02:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <UART_SetConfig+0x3a8>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b35 	.word	0x08005b35
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	08005b53 	.word	0x08005b53
 8005b18:	08005b43 	.word	0x08005b43
 8005b1c:	08005b53 	.word	0x08005b53
 8005b20:	08005b53 	.word	0x08005b53
 8005b24:	08005b53 	.word	0x08005b53
 8005b28:	08005b4b 	.word	0x08005b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7fe fe58 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 8005b30:	61f8      	str	r0, [r7, #28]
        break;
 8005b32:	e014      	b.n	8005b5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b34:	f7fe fe6a 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 8005b38:	61f8      	str	r0, [r7, #28]
        break;
 8005b3a:	e010      	b.n	8005b5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <UART_SetConfig+0x454>)
 8005b3e:	61fb      	str	r3, [r7, #28]
        break;
 8005b40:	e00d      	b.n	8005b5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b42:	f7fe fdb5 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 8005b46:	61f8      	str	r0, [r7, #28]
        break;
 8005b48:	e009      	b.n	8005b5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4e:	61fb      	str	r3, [r7, #28]
        break;
 8005b50:	e005      	b.n	8005b5e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b5c:	bf00      	nop
    }

    if (pclk != 0U)
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d019      	beq.n	8005b98 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	085a      	lsrs	r2, r3, #1
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	441a      	add	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b0f      	cmp	r3, #15
 8005b7c:	d909      	bls.n	8005b92 <UART_SetConfig+0x432>
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b84:	d205      	bcs.n	8005b92 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60da      	str	r2, [r3, #12]
 8005b90:	e002      	b.n	8005b98 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ba4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3728      	adds	r7, #40	; 0x28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb2:	bf00      	nop
 8005bb4:	00f42400 	.word	0x00f42400

08005bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01a      	beq.n	8005cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cb6:	d10a      	bne.n	8005cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	605a      	str	r2, [r3, #4]
  }
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d0c:	f7fc f9aa 	bl	8002064 <HAL_GetTick>
 8005d10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d10e      	bne.n	8005d3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f82d 	bl	8005d8e <UART_WaitOnFlagUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e023      	b.n	8005d86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d10e      	bne.n	8005d6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f817 	bl	8005d8e <UART_WaitOnFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e00d      	b.n	8005d86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2220      	movs	r2, #32
 8005d74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b09c      	sub	sp, #112	; 0x70
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9e:	e0a5      	b.n	8005eec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da6:	f000 80a1 	beq.w	8005eec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005daa:	f7fc f95b 	bl	8002064 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d302      	bcc.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d13e      	bne.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dd4:	667b      	str	r3, [r7, #100]	; 0x64
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005de0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005de4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e6      	bne.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3308      	adds	r3, #8
 8005df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	f023 0301 	bic.w	r3, r3, #1
 8005e08:	663b      	str	r3, [r7, #96]	; 0x60
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3308      	adds	r3, #8
 8005e10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e12:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e5      	bne.n	8005df2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e067      	b.n	8005f0e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d04f      	beq.n	8005eec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e5a:	d147      	bne.n	8005eec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e64:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e84:	637b      	str	r3, [r7, #52]	; 0x34
 8005e86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e6      	bne.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005eb8:	623a      	str	r2, [r7, #32]
 8005eba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	69f9      	ldr	r1, [r7, #28]
 8005ebe:	6a3a      	ldr	r2, [r7, #32]
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e5      	bne.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e010      	b.n	8005f0e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69da      	ldr	r2, [r3, #28]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	bf0c      	ite	eq
 8005efc:	2301      	moveq	r3, #1
 8005efe:	2300      	movne	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	79fb      	ldrb	r3, [r7, #7]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	f43f af4a 	beq.w	8005da0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3770      	adds	r7, #112	; 0x70
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <__NVIC_SetPriority>:
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	6039      	str	r1, [r7, #0]
 8005f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	db0a      	blt.n	8005f42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	490c      	ldr	r1, [pc, #48]	; (8005f64 <__NVIC_SetPriority+0x4c>)
 8005f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f36:	0112      	lsls	r2, r2, #4
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f40:	e00a      	b.n	8005f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	4908      	ldr	r1, [pc, #32]	; (8005f68 <__NVIC_SetPriority+0x50>)
 8005f48:	79fb      	ldrb	r3, [r7, #7]
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	3b04      	subs	r3, #4
 8005f50:	0112      	lsls	r2, r2, #4
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	440b      	add	r3, r1
 8005f56:	761a      	strb	r2, [r3, #24]
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	e000e100 	.word	0xe000e100
 8005f68:	e000ed00 	.word	0xe000ed00

08005f6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005f70:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <SysTick_Handler+0x1c>)
 8005f72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005f74:	f002 f8d8 	bl	8008128 <xTaskGetSchedulerState>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d001      	beq.n	8005f82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005f7e:	f002 ffbb 	bl	8008ef8 <xPortSysTickHandler>
  }
}
 8005f82:	bf00      	nop
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	e000e010 	.word	0xe000e010

08005f8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f90:	2100      	movs	r1, #0
 8005f92:	f06f 0004 	mvn.w	r0, #4
 8005f96:	f7ff ffbf 	bl	8005f18 <__NVIC_SetPriority>
#endif
}
 8005f9a:	bf00      	nop
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fa6:	f3ef 8305 	mrs	r3, IPSR
 8005faa:	603b      	str	r3, [r7, #0]
  return(result);
 8005fac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005fb2:	f06f 0305 	mvn.w	r3, #5
 8005fb6:	607b      	str	r3, [r7, #4]
 8005fb8:	e00c      	b.n	8005fd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005fba:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <osKernelInitialize+0x44>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d105      	bne.n	8005fce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005fc2:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <osKernelInitialize+0x44>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	e002      	b.n	8005fd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005fce:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005fd4:	687b      	ldr	r3, [r7, #4]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	200003c4 	.word	0x200003c4

08005fe8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fee:	f3ef 8305 	mrs	r3, IPSR
 8005ff2:	603b      	str	r3, [r7, #0]
  return(result);
 8005ff4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ffa:	f06f 0305 	mvn.w	r3, #5
 8005ffe:	607b      	str	r3, [r7, #4]
 8006000:	e010      	b.n	8006024 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006002:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <osKernelStart+0x48>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d109      	bne.n	800601e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800600a:	f7ff ffbf 	bl	8005f8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800600e:	4b08      	ldr	r3, [pc, #32]	; (8006030 <osKernelStart+0x48>)
 8006010:	2202      	movs	r2, #2
 8006012:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006014:	f001 fc1c 	bl	8007850 <vTaskStartScheduler>
      stat = osOK;
 8006018:	2300      	movs	r3, #0
 800601a:	607b      	str	r3, [r7, #4]
 800601c:	e002      	b.n	8006024 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800601e:	f04f 33ff 	mov.w	r3, #4294967295
 8006022:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006024:	687b      	ldr	r3, [r7, #4]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	200003c4 	.word	0x200003c4

08006034 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b08e      	sub	sp, #56	; 0x38
 8006038:	af04      	add	r7, sp, #16
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006040:	2300      	movs	r3, #0
 8006042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006044:	f3ef 8305 	mrs	r3, IPSR
 8006048:	617b      	str	r3, [r7, #20]
  return(result);
 800604a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800604c:	2b00      	cmp	r3, #0
 800604e:	d17e      	bne.n	800614e <osThreadNew+0x11a>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d07b      	beq.n	800614e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006056:	2340      	movs	r3, #64	; 0x40
 8006058:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800605a:	2318      	movs	r3, #24
 800605c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800605e:	2300      	movs	r3, #0
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006062:	f04f 33ff 	mov.w	r3, #4294967295
 8006066:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d045      	beq.n	80060fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <osThreadNew+0x48>
        name = attr->name;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d008      	beq.n	80060a2 <osThreadNew+0x6e>
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	2b38      	cmp	r3, #56	; 0x38
 8006094:	d805      	bhi.n	80060a2 <osThreadNew+0x6e>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <osThreadNew+0x72>
        return (NULL);
 80060a2:	2300      	movs	r3, #0
 80060a4:	e054      	b.n	8006150 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	089b      	lsrs	r3, r3, #2
 80060b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00e      	beq.n	80060dc <osThreadNew+0xa8>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	2bbb      	cmp	r3, #187	; 0xbb
 80060c4:	d90a      	bls.n	80060dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d006      	beq.n	80060dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <osThreadNew+0xa8>
        mem = 1;
 80060d6:	2301      	movs	r3, #1
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	e010      	b.n	80060fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10c      	bne.n	80060fe <osThreadNew+0xca>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d108      	bne.n	80060fe <osThreadNew+0xca>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d104      	bne.n	80060fe <osThreadNew+0xca>
          mem = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e001      	b.n	80060fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d110      	bne.n	8006126 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800610c:	9202      	str	r2, [sp, #8]
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	6a3a      	ldr	r2, [r7, #32]
 8006118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f001 f92e 	bl	800737c <xTaskCreateStatic>
 8006120:	4603      	mov	r3, r0
 8006122:	613b      	str	r3, [r7, #16]
 8006124:	e013      	b.n	800614e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d110      	bne.n	800614e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	b29a      	uxth	r2, r3
 8006130:	f107 0310 	add.w	r3, r7, #16
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f001 f979 	bl	8007436 <xTaskCreate>
 8006144:	4603      	mov	r3, r0
 8006146:	2b01      	cmp	r3, #1
 8006148:	d001      	beq.n	800614e <osThreadNew+0x11a>
            hTask = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800614e:	693b      	ldr	r3, [r7, #16]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3728      	adds	r7, #40	; 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006160:	f3ef 8305 	mrs	r3, IPSR
 8006164:	60bb      	str	r3, [r7, #8]
  return(result);
 8006166:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <osDelay+0x1c>
    stat = osErrorISR;
 800616c:	f06f 0305 	mvn.w	r3, #5
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	e007      	b.n	8006184 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <osDelay+0x2c>
      vTaskDelay(ticks);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 fb32 	bl	80077e8 <vTaskDelay>
    }
  }

  return (stat);
 8006184:	68fb      	ldr	r3, [r7, #12]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800618e:	b580      	push	{r7, lr}
 8006190:	b088      	sub	sp, #32
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800619a:	f3ef 8305 	mrs	r3, IPSR
 800619e:	60bb      	str	r3, [r7, #8]
  return(result);
 80061a0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d174      	bne.n	8006290 <osMutexNew+0x102>
    if (attr != NULL) {
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	e001      	b.n	80061b8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <osMutexNew+0x3a>
      rmtx = 1U;
 80061c2:	2301      	movs	r3, #1
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e001      	b.n	80061cc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d15c      	bne.n	8006290 <osMutexNew+0x102>
      mem = -1;
 80061d6:	f04f 33ff 	mov.w	r3, #4294967295
 80061da:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d015      	beq.n	800620e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d006      	beq.n	80061f8 <osMutexNew+0x6a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	2b4f      	cmp	r3, #79	; 0x4f
 80061f0:	d902      	bls.n	80061f8 <osMutexNew+0x6a>
          mem = 1;
 80061f2:	2301      	movs	r3, #1
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	e00c      	b.n	8006212 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d108      	bne.n	8006212 <osMutexNew+0x84>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d104      	bne.n	8006212 <osMutexNew+0x84>
            mem = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	e001      	b.n	8006212 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d112      	bne.n	800623e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d007      	beq.n	800622e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	4619      	mov	r1, r3
 8006224:	2004      	movs	r0, #4
 8006226:	f000 fb18 	bl	800685a <xQueueCreateMutexStatic>
 800622a:	61f8      	str	r0, [r7, #28]
 800622c:	e016      	b.n	800625c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	4619      	mov	r1, r3
 8006234:	2001      	movs	r0, #1
 8006236:	f000 fb10 	bl	800685a <xQueueCreateMutexStatic>
 800623a:	61f8      	str	r0, [r7, #28]
 800623c:	e00e      	b.n	800625c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10b      	bne.n	800625c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800624a:	2004      	movs	r0, #4
 800624c:	f000 faed 	bl	800682a <xQueueCreateMutex>
 8006250:	61f8      	str	r0, [r7, #28]
 8006252:	e003      	b.n	800625c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006254:	2001      	movs	r0, #1
 8006256:	f000 fae8 	bl	800682a <xQueueCreateMutex>
 800625a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00c      	beq.n	800627c <osMutexNew+0xee>
        if (attr != NULL) {
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <osMutexNew+0xe2>
          name = attr->name;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	e001      	b.n	8006274 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006274:	68f9      	ldr	r1, [r7, #12]
 8006276:	69f8      	ldr	r0, [r7, #28]
 8006278:	f001 f822 	bl	80072c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d006      	beq.n	8006290 <osMutexNew+0x102>
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006290:	69fb      	ldr	r3, [r7, #28]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3720      	adds	r7, #32
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800629a:	b580      	push	{r7, lr}
 800629c:	b086      	sub	sp, #24
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f023 0301 	bic.w	r3, r3, #1
 80062aa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062b8:	f3ef 8305 	mrs	r3, IPSR
 80062bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80062be:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80062c4:	f06f 0305 	mvn.w	r3, #5
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e02c      	b.n	8006326 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d103      	bne.n	80062da <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80062d2:	f06f 0303 	mvn.w	r3, #3
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e025      	b.n	8006326 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d011      	beq.n	8006304 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6938      	ldr	r0, [r7, #16]
 80062e4:	f000 fb08 	bl	80068f8 <xQueueTakeMutexRecursive>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d01b      	beq.n	8006326 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80062f4:	f06f 0301 	mvn.w	r3, #1
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	e014      	b.n	8006326 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80062fc:	f06f 0302 	mvn.w	r3, #2
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	e010      	b.n	8006326 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6938      	ldr	r0, [r7, #16]
 8006308:	f000 fda6 	bl	8006e58 <xQueueSemaphoreTake>
 800630c:	4603      	mov	r3, r0
 800630e:	2b01      	cmp	r3, #1
 8006310:	d009      	beq.n	8006326 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006318:	f06f 0301 	mvn.w	r3, #1
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	e002      	b.n	8006326 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006320:	f06f 0302 	mvn.w	r3, #2
 8006324:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006326:	697b      	ldr	r3, [r7, #20]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f023 0301 	bic.w	r3, r3, #1
 800633e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006348:	2300      	movs	r3, #0
 800634a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800634c:	f3ef 8305 	mrs	r3, IPSR
 8006350:	60bb      	str	r3, [r7, #8]
  return(result);
 8006352:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006358:	f06f 0305 	mvn.w	r3, #5
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	e01f      	b.n	80063a0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d103      	bne.n	800636e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006366:	f06f 0303 	mvn.w	r3, #3
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e018      	b.n	80063a0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d009      	beq.n	8006388 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006374:	6938      	ldr	r0, [r7, #16]
 8006376:	f000 fa8b 	bl	8006890 <xQueueGiveMutexRecursive>
 800637a:	4603      	mov	r3, r0
 800637c:	2b01      	cmp	r3, #1
 800637e:	d00f      	beq.n	80063a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006380:	f06f 0302 	mvn.w	r3, #2
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	e00b      	b.n	80063a0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006388:	2300      	movs	r3, #0
 800638a:	2200      	movs	r2, #0
 800638c:	2100      	movs	r1, #0
 800638e:	6938      	ldr	r0, [r7, #16]
 8006390:	f000 fae8 	bl	8006964 <xQueueGenericSend>
 8006394:	4603      	mov	r3, r0
 8006396:	2b01      	cmp	r3, #1
 8006398:	d002      	beq.n	80063a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800639a:	f06f 0302 	mvn.w	r3, #2
 800639e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80063a0:	697b      	ldr	r3, [r7, #20]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a07      	ldr	r2, [pc, #28]	; (80063d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80063bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	4a06      	ldr	r2, [pc, #24]	; (80063dc <vApplicationGetIdleTaskMemory+0x30>)
 80063c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2240      	movs	r2, #64	; 0x40
 80063c8:	601a      	str	r2, [r3, #0]
}
 80063ca:	bf00      	nop
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	200003c8 	.word	0x200003c8
 80063dc:	20000484 	.word	0x20000484

080063e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4a07      	ldr	r2, [pc, #28]	; (800640c <vApplicationGetTimerTaskMemory+0x2c>)
 80063f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	4a06      	ldr	r2, [pc, #24]	; (8006410 <vApplicationGetTimerTaskMemory+0x30>)
 80063f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2280      	movs	r2, #128	; 0x80
 80063fc:	601a      	str	r2, [r3, #0]
}
 80063fe:	bf00      	nop
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	20000584 	.word	0x20000584
 8006410:	20000640 	.word	0x20000640

08006414 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f103 0208 	add.w	r2, r3, #8
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f04f 32ff 	mov.w	r2, #4294967295
 800642c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f103 0208 	add.w	r2, r3, #8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f103 0208 	add.w	r2, r3, #8
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800646e:	b480      	push	{r7}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	601a      	str	r2, [r3, #0]
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064cc:	d103      	bne.n	80064d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	e00c      	b.n	80064f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3308      	adds	r3, #8
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e002      	b.n	80064e4 <vListInsert+0x2e>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d2f6      	bcs.n	80064de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]
}
 800651c:	bf00      	nop
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6892      	ldr	r2, [r2, #8]
 800653e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6852      	ldr	r2, [r2, #4]
 8006548:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	429a      	cmp	r2, r3
 8006552:	d103      	bne.n	800655c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	1e5a      	subs	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80065a6:	f002 fc15 	bl	8008dd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b2:	68f9      	ldr	r1, [r7, #12]
 80065b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	441a      	add	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d6:	3b01      	subs	r3, #1
 80065d8:	68f9      	ldr	r1, [r7, #12]
 80065da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	441a      	add	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	22ff      	movs	r2, #255	; 0xff
 80065ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	22ff      	movs	r2, #255	; 0xff
 80065f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d114      	bne.n	8006626 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01a      	beq.n	800663a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3310      	adds	r3, #16
 8006608:	4618      	mov	r0, r3
 800660a:	f001 fbbb 	bl	8007d84 <xTaskRemoveFromEventList>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d012      	beq.n	800663a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <xQueueGenericReset+0xcc>)
 8006616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	e009      	b.n	800663a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3310      	adds	r3, #16
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff fef2 	bl	8006414 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3324      	adds	r3, #36	; 0x24
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff feed 	bl	8006414 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800663a:	f002 fbfb 	bl	8008e34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800663e:	2301      	movs	r3, #1
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	e000ed04 	.word	0xe000ed04

0800664c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08e      	sub	sp, #56	; 0x38
 8006650:	af02      	add	r7, sp, #8
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <xQueueGenericCreateStatic+0x52>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <xQueueGenericCreateStatic+0x56>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <xQueueGenericCreateStatic+0x58>
 80066a2:	2300      	movs	r3, #0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	623b      	str	r3, [r7, #32]
}
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <xQueueGenericCreateStatic+0x7e>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <xQueueGenericCreateStatic+0x82>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <xQueueGenericCreateStatic+0x84>
 80066ce:	2300      	movs	r3, #0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	61fb      	str	r3, [r7, #28]
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066ea:	2350      	movs	r3, #80	; 0x50
 80066ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b50      	cmp	r3, #80	; 0x50
 80066f2:	d00a      	beq.n	800670a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	61bb      	str	r3, [r7, #24]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800670a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00d      	beq.n	8006732 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800671e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	4613      	mov	r3, r2
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f83f 	bl	80067b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006734:	4618      	mov	r0, r3
 8006736:	3730      	adds	r7, #48	; 0x30
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08a      	sub	sp, #40	; 0x28
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	4613      	mov	r3, r2
 8006748:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10a      	bne.n	8006766 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	613b      	str	r3, [r7, #16]
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	fb02 f303 	mul.w	r3, r2, r3
 800676e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	3350      	adds	r3, #80	; 0x50
 8006774:	4618      	mov	r0, r3
 8006776:	f002 fc4f 	bl	8009018 <pvPortMalloc>
 800677a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d011      	beq.n	80067a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	3350      	adds	r3, #80	; 0x50
 800678a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006794:	79fa      	ldrb	r2, [r7, #7]
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	4613      	mov	r3, r2
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f805 	bl	80067b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067a6:	69bb      	ldr	r3, [r7, #24]
	}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3720      	adds	r7, #32
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d103      	bne.n	80067cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e002      	b.n	80067d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067de:	2101      	movs	r1, #1
 80067e0:	69b8      	ldr	r0, [r7, #24]
 80067e2:	f7ff fecb 	bl	800657c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00e      	beq.n	8006822 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006816:	2300      	movs	r3, #0
 8006818:	2200      	movs	r2, #0
 800681a:	2100      	movs	r1, #0
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f8a1 	bl	8006964 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800682a:	b580      	push	{r7, lr}
 800682c:	b086      	sub	sp, #24
 800682e:	af00      	add	r7, sp, #0
 8006830:	4603      	mov	r3, r0
 8006832:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006834:	2301      	movs	r3, #1
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	461a      	mov	r2, r3
 8006840:	6939      	ldr	r1, [r7, #16]
 8006842:	6978      	ldr	r0, [r7, #20]
 8006844:	f7ff ff7a 	bl	800673c <xQueueGenericCreate>
 8006848:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff ffd3 	bl	80067f6 <prvInitialiseMutex>

		return xNewQueue;
 8006850:	68fb      	ldr	r3, [r7, #12]
	}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800685a:	b580      	push	{r7, lr}
 800685c:	b088      	sub	sp, #32
 800685e:	af02      	add	r7, sp, #8
 8006860:	4603      	mov	r3, r0
 8006862:	6039      	str	r1, [r7, #0]
 8006864:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006866:	2301      	movs	r3, #1
 8006868:	617b      	str	r3, [r7, #20]
 800686a:	2300      	movs	r3, #0
 800686c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2200      	movs	r2, #0
 8006876:	6939      	ldr	r1, [r7, #16]
 8006878:	6978      	ldr	r0, [r7, #20]
 800687a:	f7ff fee7 	bl	800664c <xQueueGenericCreateStatic>
 800687e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f7ff ffb8 	bl	80067f6 <prvInitialiseMutex>

		return xNewQueue;
 8006886:	68fb      	ldr	r3, [r7, #12]
	}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006890:	b590      	push	{r4, r7, lr}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10a      	bne.n	80068b8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	60fb      	str	r3, [r7, #12]
}
 80068b4:	bf00      	nop
 80068b6:	e7fe      	b.n	80068b6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	689c      	ldr	r4, [r3, #8]
 80068bc:	f001 fc24 	bl	8008108 <xTaskGetCurrentTaskHandle>
 80068c0:	4603      	mov	r3, r0
 80068c2:	429c      	cmp	r4, r3
 80068c4:	d111      	bne.n	80068ea <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	1e5a      	subs	r2, r3, #1
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d105      	bne.n	80068e4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80068d8:	2300      	movs	r3, #0
 80068da:	2200      	movs	r2, #0
 80068dc:	2100      	movs	r1, #0
 80068de:	6938      	ldr	r0, [r7, #16]
 80068e0:	f000 f840 	bl	8006964 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80068e4:	2301      	movs	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e001      	b.n	80068ee <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80068ee:	697b      	ldr	r3, [r7, #20]
	}
 80068f0:	4618      	mov	r0, r3
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd90      	pop	{r4, r7, pc}

080068f8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10a      	bne.n	8006922 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	60fb      	str	r3, [r7, #12]
}
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	689c      	ldr	r4, [r3, #8]
 8006926:	f001 fbef 	bl	8008108 <xTaskGetCurrentTaskHandle>
 800692a:	4603      	mov	r3, r0
 800692c:	429c      	cmp	r4, r3
 800692e:	d107      	bne.n	8006940 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800693a:	2301      	movs	r3, #1
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	e00c      	b.n	800695a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6938      	ldr	r0, [r7, #16]
 8006944:	f000 fa88 	bl	8006e58 <xQueueSemaphoreTake>
 8006948:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d004      	beq.n	800695a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800695a:	697b      	ldr	r3, [r7, #20]
	}
 800695c:	4618      	mov	r0, r3
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	bd90      	pop	{r4, r7, pc}

08006964 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08e      	sub	sp, #56	; 0x38
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006972:	2300      	movs	r3, #0
 8006974:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <xQueueGenericSend+0x32>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d103      	bne.n	80069a4 <xQueueGenericSend+0x40>
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <xQueueGenericSend+0x44>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <xQueueGenericSend+0x46>
 80069a8:	2300      	movs	r3, #0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <xQueueGenericSend+0x60>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d103      	bne.n	80069d2 <xQueueGenericSend+0x6e>
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <xQueueGenericSend+0x72>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <xQueueGenericSend+0x74>
 80069d6:	2300      	movs	r3, #0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	623b      	str	r3, [r7, #32]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069f2:	f001 fb99 	bl	8008128 <xTaskGetSchedulerState>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <xQueueGenericSend+0x9e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <xQueueGenericSend+0xa2>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e000      	b.n	8006a08 <xQueueGenericSend+0xa4>
 8006a06:	2300      	movs	r3, #0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10a      	bne.n	8006a22 <xQueueGenericSend+0xbe>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	61fb      	str	r3, [r7, #28]
}
 8006a1e:	bf00      	nop
 8006a20:	e7fe      	b.n	8006a20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a22:	f002 f9d7 	bl	8008dd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d302      	bcc.n	8006a38 <xQueueGenericSend+0xd4>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d129      	bne.n	8006a8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a3e:	f000 fb2f 	bl	80070a0 <prvCopyDataToQueue>
 8006a42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d010      	beq.n	8006a6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	3324      	adds	r3, #36	; 0x24
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 f997 	bl	8007d84 <xTaskRemoveFromEventList>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d013      	beq.n	8006a84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a5c:	4b3f      	ldr	r3, [pc, #252]	; (8006b5c <xQueueGenericSend+0x1f8>)
 8006a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	e00a      	b.n	8006a84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a74:	4b39      	ldr	r3, [pc, #228]	; (8006b5c <xQueueGenericSend+0x1f8>)
 8006a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a84:	f002 f9d6 	bl	8008e34 <vPortExitCritical>
				return pdPASS;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e063      	b.n	8006b54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d103      	bne.n	8006a9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a92:	f002 f9cf 	bl	8008e34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e05c      	b.n	8006b54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d106      	bne.n	8006aae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006aa0:	f107 0314 	add.w	r3, r7, #20
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 f9d1 	bl	8007e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006aae:	f002 f9c1 	bl	8008e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ab2:	f000 ff3d 	bl	8007930 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ab6:	f002 f98d 	bl	8008dd4 <vPortEnterCritical>
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ac0:	b25b      	sxtb	r3, r3
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d103      	bne.n	8006ad0 <xQueueGenericSend+0x16c>
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ad6:	b25b      	sxtb	r3, r3
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006adc:	d103      	bne.n	8006ae6 <xQueueGenericSend+0x182>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ae6:	f002 f9a5 	bl	8008e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aea:	1d3a      	adds	r2, r7, #4
 8006aec:	f107 0314 	add.w	r3, r7, #20
 8006af0:	4611      	mov	r1, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f001 f9c0 	bl	8007e78 <xTaskCheckForTimeOut>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d124      	bne.n	8006b48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006afe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b00:	f000 fbc6 	bl	8007290 <prvIsQueueFull>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d018      	beq.n	8006b3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	3310      	adds	r3, #16
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	4611      	mov	r1, r2
 8006b12:	4618      	mov	r0, r3
 8006b14:	f001 f8e6 	bl	8007ce4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b1a:	f000 fb51 	bl	80071c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b1e:	f000 ff15 	bl	800794c <xTaskResumeAll>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f47f af7c 	bne.w	8006a22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b2a:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <xQueueGenericSend+0x1f8>)
 8006b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	e772      	b.n	8006a22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b3e:	f000 fb3f 	bl	80071c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b42:	f000 ff03 	bl	800794c <xTaskResumeAll>
 8006b46:	e76c      	b.n	8006a22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b4a:	f000 fb39 	bl	80071c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b4e:	f000 fefd 	bl	800794c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3738      	adds	r7, #56	; 0x38
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	e000ed04 	.word	0xe000ed04

08006b60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b090      	sub	sp, #64	; 0x40
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d103      	bne.n	8006b9c <xQueueGenericSendFromISR+0x3c>
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <xQueueGenericSendFromISR+0x40>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <xQueueGenericSendFromISR+0x42>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10a      	bne.n	8006bbc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bb8:	bf00      	nop
 8006bba:	e7fe      	b.n	8006bba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d103      	bne.n	8006bca <xQueueGenericSendFromISR+0x6a>
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <xQueueGenericSendFromISR+0x6e>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <xQueueGenericSendFromISR+0x70>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	623b      	str	r3, [r7, #32]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bea:	f002 f9d5 	bl	8008f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006bee:	f3ef 8211 	mrs	r2, BASEPRI
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	61fa      	str	r2, [r7, #28]
 8006c04:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d302      	bcc.n	8006c1c <xQueueGenericSendFromISR+0xbc>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d12f      	bne.n	8006c7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c32:	f000 fa35 	bl	80070a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d112      	bne.n	8006c66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d016      	beq.n	8006c76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	3324      	adds	r3, #36	; 0x24
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 f899 	bl	8007d84 <xTaskRemoveFromEventList>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00e      	beq.n	8006c76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	e007      	b.n	8006c76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	b25a      	sxtb	r2, r3
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c76:	2301      	movs	r3, #1
 8006c78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c7a:	e001      	b.n	8006c80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c82:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3740      	adds	r7, #64	; 0x40
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08c      	sub	sp, #48	; 0x30
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <xQueueReceive+0x30>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	623b      	str	r3, [r7, #32]
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d103      	bne.n	8006cd6 <xQueueReceive+0x3e>
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <xQueueReceive+0x42>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <xQueueReceive+0x44>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10a      	bne.n	8006cf6 <xQueueReceive+0x5e>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	61fb      	str	r3, [r7, #28]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cf6:	f001 fa17 	bl	8008128 <xTaskGetSchedulerState>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d102      	bne.n	8006d06 <xQueueReceive+0x6e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <xQueueReceive+0x72>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <xQueueReceive+0x74>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <xQueueReceive+0x8e>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	61bb      	str	r3, [r7, #24]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d26:	f002 f855 	bl	8008dd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01f      	beq.n	8006d76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d3a:	f000 fa1b 	bl	8007174 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	1e5a      	subs	r2, r3, #1
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00f      	beq.n	8006d6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	3310      	adds	r3, #16
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 f816 	bl	8007d84 <xTaskRemoveFromEventList>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d007      	beq.n	8006d6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d5e:	4b3d      	ldr	r3, [pc, #244]	; (8006e54 <xQueueReceive+0x1bc>)
 8006d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d6e:	f002 f861 	bl	8008e34 <vPortExitCritical>
				return pdPASS;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e069      	b.n	8006e4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d103      	bne.n	8006d84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d7c:	f002 f85a 	bl	8008e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d80:	2300      	movs	r3, #0
 8006d82:	e062      	b.n	8006e4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d8a:	f107 0310 	add.w	r3, r7, #16
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 f85c 	bl	8007e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d94:	2301      	movs	r3, #1
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d98:	f002 f84c 	bl	8008e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d9c:	f000 fdc8 	bl	8007930 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006da0:	f002 f818 	bl	8008dd4 <vPortEnterCritical>
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006daa:	b25b      	sxtb	r3, r3
 8006dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db0:	d103      	bne.n	8006dba <xQueueReceive+0x122>
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dc0:	b25b      	sxtb	r3, r3
 8006dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc6:	d103      	bne.n	8006dd0 <xQueueReceive+0x138>
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dd0:	f002 f830 	bl	8008e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dd4:	1d3a      	adds	r2, r7, #4
 8006dd6:	f107 0310 	add.w	r3, r7, #16
 8006dda:	4611      	mov	r1, r2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f001 f84b 	bl	8007e78 <xTaskCheckForTimeOut>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d123      	bne.n	8006e30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dea:	f000 fa3b 	bl	8007264 <prvIsQueueEmpty>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d017      	beq.n	8006e24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	3324      	adds	r3, #36	; 0x24
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 ff71 	bl	8007ce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e04:	f000 f9dc 	bl	80071c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e08:	f000 fda0 	bl	800794c <xTaskResumeAll>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d189      	bne.n	8006d26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e12:	4b10      	ldr	r3, [pc, #64]	; (8006e54 <xQueueReceive+0x1bc>)
 8006e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	e780      	b.n	8006d26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e26:	f000 f9cb 	bl	80071c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e2a:	f000 fd8f 	bl	800794c <xTaskResumeAll>
 8006e2e:	e77a      	b.n	8006d26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e32:	f000 f9c5 	bl	80071c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e36:	f000 fd89 	bl	800794c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e3c:	f000 fa12 	bl	8007264 <prvIsQueueEmpty>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f43f af6f 	beq.w	8006d26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3730      	adds	r7, #48	; 0x30
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08e      	sub	sp, #56	; 0x38
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	623b      	str	r3, [r7, #32]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	61fb      	str	r3, [r7, #28]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ea8:	f001 f93e 	bl	8008128 <xTaskGetSchedulerState>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <xQueueSemaphoreTake+0x60>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <xQueueSemaphoreTake+0x64>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <xQueueSemaphoreTake+0x66>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10a      	bne.n	8006ed8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	61bb      	str	r3, [r7, #24]
}
 8006ed4:	bf00      	nop
 8006ed6:	e7fe      	b.n	8006ed6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ed8:	f001 ff7c 	bl	8008dd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d024      	beq.n	8006f32 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	1e5a      	subs	r2, r3, #1
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006ef8:	f001 fa8c 	bl	8008414 <pvTaskIncrementMutexHeldCount>
 8006efc:	4602      	mov	r2, r0
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00f      	beq.n	8006f2a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	3310      	adds	r3, #16
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 ff38 	bl	8007d84 <xTaskRemoveFromEventList>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d007      	beq.n	8006f2a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f1a:	4b54      	ldr	r3, [pc, #336]	; (800706c <xQueueSemaphoreTake+0x214>)
 8006f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f2a:	f001 ff83 	bl	8008e34 <vPortExitCritical>
				return pdPASS;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e097      	b.n	8007062 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d111      	bne.n	8006f5c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	617b      	str	r3, [r7, #20]
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006f54:	f001 ff6e 	bl	8008e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e082      	b.n	8007062 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f62:	f107 030c 	add.w	r3, r7, #12
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 ff70 	bl	8007e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f70:	f001 ff60 	bl	8008e34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f74:	f000 fcdc 	bl	8007930 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f78:	f001 ff2c 	bl	8008dd4 <vPortEnterCritical>
 8006f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f82:	b25b      	sxtb	r3, r3
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f88:	d103      	bne.n	8006f92 <xQueueSemaphoreTake+0x13a>
 8006f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f98:	b25b      	sxtb	r3, r3
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9e:	d103      	bne.n	8006fa8 <xQueueSemaphoreTake+0x150>
 8006fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fa8:	f001 ff44 	bl	8008e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fac:	463a      	mov	r2, r7
 8006fae:	f107 030c 	add.w	r3, r7, #12
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 ff5f 	bl	8007e78 <xTaskCheckForTimeOut>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d132      	bne.n	8007026 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fc2:	f000 f94f 	bl	8007264 <prvIsQueueEmpty>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d026      	beq.n	800701a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d109      	bne.n	8006fe8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006fd4:	f001 fefe 	bl	8008dd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 f8c1 	bl	8008164 <xTaskPriorityInherit>
 8006fe2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006fe4:	f001 ff26 	bl	8008e34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fea:	3324      	adds	r3, #36	; 0x24
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	4611      	mov	r1, r2
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 fe77 	bl	8007ce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ff6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ff8:	f000 f8e2 	bl	80071c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ffc:	f000 fca6 	bl	800794c <xTaskResumeAll>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	f47f af68 	bne.w	8006ed8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007008:	4b18      	ldr	r3, [pc, #96]	; (800706c <xQueueSemaphoreTake+0x214>)
 800700a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	e75e      	b.n	8006ed8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800701a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800701c:	f000 f8d0 	bl	80071c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007020:	f000 fc94 	bl	800794c <xTaskResumeAll>
 8007024:	e758      	b.n	8006ed8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007028:	f000 f8ca 	bl	80071c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800702c:	f000 fc8e 	bl	800794c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007032:	f000 f917 	bl	8007264 <prvIsQueueEmpty>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	f43f af4d 	beq.w	8006ed8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00d      	beq.n	8007060 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007044:	f001 fec6 	bl	8008dd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800704a:	f000 f811 	bl	8007070 <prvGetDisinheritPriorityAfterTimeout>
 800704e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007056:	4618      	mov	r0, r3
 8007058:	f001 f95a 	bl	8008310 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800705c:	f001 feea 	bl	8008e34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007060:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007062:	4618      	mov	r0, r3
 8007064:	3738      	adds	r7, #56	; 0x38
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	2b00      	cmp	r3, #0
 800707e:	d006      	beq.n	800708e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	e001      	b.n	8007092 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007092:	68fb      	ldr	r3, [r7, #12]
	}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070ac:	2300      	movs	r3, #0
 80070ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10d      	bne.n	80070da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d14d      	bne.n	8007162 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 f8b2 	bl	8008234 <xTaskPriorityDisinherit>
 80070d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	609a      	str	r2, [r3, #8]
 80070d8:	e043      	b.n	8007162 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d119      	bne.n	8007114 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6858      	ldr	r0, [r3, #4]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e8:	461a      	mov	r2, r3
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	f002 f9aa 	bl	8009444 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	441a      	add	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	429a      	cmp	r2, r3
 8007108:	d32b      	bcc.n	8007162 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	605a      	str	r2, [r3, #4]
 8007112:	e026      	b.n	8007162 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	68d8      	ldr	r0, [r3, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	461a      	mov	r2, r3
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	f002 f990 	bl	8009444 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	425b      	negs	r3, r3
 800712e:	441a      	add	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	68da      	ldr	r2, [r3, #12]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	429a      	cmp	r2, r3
 800713e:	d207      	bcs.n	8007150 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007148:	425b      	negs	r3, r3
 800714a:	441a      	add	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b02      	cmp	r3, #2
 8007154:	d105      	bne.n	8007162 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	3b01      	subs	r3, #1
 8007160:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800716a:	697b      	ldr	r3, [r7, #20]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	d018      	beq.n	80071b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	441a      	add	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	429a      	cmp	r2, r3
 800719e:	d303      	bcc.n	80071a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68d9      	ldr	r1, [r3, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b0:	461a      	mov	r2, r3
 80071b2:	6838      	ldr	r0, [r7, #0]
 80071b4:	f002 f946 	bl	8009444 <memcpy>
	}
}
 80071b8:	bf00      	nop
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071c8:	f001 fe04 	bl	8008dd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071d4:	e011      	b.n	80071fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d012      	beq.n	8007204 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3324      	adds	r3, #36	; 0x24
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fdce 	bl	8007d84 <xTaskRemoveFromEventList>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071ee:	f000 fea5 	bl	8007f3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	dce9      	bgt.n	80071d6 <prvUnlockQueue+0x16>
 8007202:	e000      	b.n	8007206 <prvUnlockQueue+0x46>
					break;
 8007204:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	22ff      	movs	r2, #255	; 0xff
 800720a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800720e:	f001 fe11 	bl	8008e34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007212:	f001 fddf 	bl	8008dd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800721c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800721e:	e011      	b.n	8007244 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d012      	beq.n	800724e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3310      	adds	r3, #16
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fda9 	bl	8007d84 <xTaskRemoveFromEventList>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007238:	f000 fe80 	bl	8007f3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	3b01      	subs	r3, #1
 8007240:	b2db      	uxtb	r3, r3
 8007242:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007248:	2b00      	cmp	r3, #0
 800724a:	dce9      	bgt.n	8007220 <prvUnlockQueue+0x60>
 800724c:	e000      	b.n	8007250 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800724e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	22ff      	movs	r2, #255	; 0xff
 8007254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007258:	f001 fdec 	bl	8008e34 <vPortExitCritical>
}
 800725c:	bf00      	nop
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800726c:	f001 fdb2 	bl	8008dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	2b00      	cmp	r3, #0
 8007276:	d102      	bne.n	800727e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007278:	2301      	movs	r3, #1
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	e001      	b.n	8007282 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007282:	f001 fdd7 	bl	8008e34 <vPortExitCritical>

	return xReturn;
 8007286:	68fb      	ldr	r3, [r7, #12]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007298:	f001 fd9c 	bl	8008dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d102      	bne.n	80072ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072a8:	2301      	movs	r3, #1
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	e001      	b.n	80072b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072b2:	f001 fdbf 	bl	8008e34 <vPortExitCritical>

	return xReturn;
 80072b6:	68fb      	ldr	r3, [r7, #12]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072ca:	2300      	movs	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	e014      	b.n	80072fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072d0:	4a0f      	ldr	r2, [pc, #60]	; (8007310 <vQueueAddToRegistry+0x50>)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10b      	bne.n	80072f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072dc:	490c      	ldr	r1, [pc, #48]	; (8007310 <vQueueAddToRegistry+0x50>)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072e6:	4a0a      	ldr	r2, [pc, #40]	; (8007310 <vQueueAddToRegistry+0x50>)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	4413      	add	r3, r2
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80072f2:	e006      	b.n	8007302 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3301      	adds	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b07      	cmp	r3, #7
 80072fe:	d9e7      	bls.n	80072d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007300:	bf00      	nop
 8007302:	bf00      	nop
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	20000840 	.word	0x20000840

08007314 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007324:	f001 fd56 	bl	8008dd4 <vPortEnterCritical>
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800732e:	b25b      	sxtb	r3, r3
 8007330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007334:	d103      	bne.n	800733e <vQueueWaitForMessageRestricted+0x2a>
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007344:	b25b      	sxtb	r3, r3
 8007346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734a:	d103      	bne.n	8007354 <vQueueWaitForMessageRestricted+0x40>
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007354:	f001 fd6e 	bl	8008e34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	2b00      	cmp	r3, #0
 800735e:	d106      	bne.n	800736e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	3324      	adds	r3, #36	; 0x24
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	68b9      	ldr	r1, [r7, #8]
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fcdf 	bl	8007d2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800736e:	6978      	ldr	r0, [r7, #20]
 8007370:	f7ff ff26 	bl	80071c0 <prvUnlockQueue>
	}
 8007374:	bf00      	nop
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08e      	sub	sp, #56	; 0x38
 8007380:	af04      	add	r7, sp, #16
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800738a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10a      	bne.n	80073a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	623b      	str	r3, [r7, #32]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10a      	bne.n	80073c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	61fb      	str	r3, [r7, #28]
}
 80073be:	bf00      	nop
 80073c0:	e7fe      	b.n	80073c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073c2:	23bc      	movs	r3, #188	; 0xbc
 80073c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2bbc      	cmp	r3, #188	; 0xbc
 80073ca:	d00a      	beq.n	80073e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	61bb      	str	r3, [r7, #24]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d01e      	beq.n	8007428 <xTaskCreateStatic+0xac>
 80073ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d01b      	beq.n	8007428 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	2202      	movs	r2, #2
 80073fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007402:	2300      	movs	r3, #0
 8007404:	9303      	str	r3, [sp, #12]
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	9302      	str	r3, [sp, #8]
 800740a:	f107 0314 	add.w	r3, r7, #20
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	68b9      	ldr	r1, [r7, #8]
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 f850 	bl	80074c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007422:	f000 f8f3 	bl	800760c <prvAddNewTaskToReadyList>
 8007426:	e001      	b.n	800742c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800742c:	697b      	ldr	r3, [r7, #20]
	}
 800742e:	4618      	mov	r0, r3
 8007430:	3728      	adds	r7, #40	; 0x28
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007436:	b580      	push	{r7, lr}
 8007438:	b08c      	sub	sp, #48	; 0x30
 800743a:	af04      	add	r7, sp, #16
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	603b      	str	r3, [r7, #0]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007446:	88fb      	ldrh	r3, [r7, #6]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4618      	mov	r0, r3
 800744c:	f001 fde4 	bl	8009018 <pvPortMalloc>
 8007450:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00e      	beq.n	8007476 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007458:	20bc      	movs	r0, #188	; 0xbc
 800745a:	f001 fddd 	bl	8009018 <pvPortMalloc>
 800745e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	631a      	str	r2, [r3, #48]	; 0x30
 800746c:	e005      	b.n	800747a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800746e:	6978      	ldr	r0, [r7, #20]
 8007470:	f001 fe9e 	bl	80091b0 <vPortFree>
 8007474:	e001      	b.n	800747a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007476:	2300      	movs	r3, #0
 8007478:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d017      	beq.n	80074b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007488:	88fa      	ldrh	r2, [r7, #6]
 800748a:	2300      	movs	r3, #0
 800748c:	9303      	str	r3, [sp, #12]
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	9302      	str	r3, [sp, #8]
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007494:	9301      	str	r3, [sp, #4]
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 f80e 	bl	80074c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074a4:	69f8      	ldr	r0, [r7, #28]
 80074a6:	f000 f8b1 	bl	800760c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074aa:	2301      	movs	r3, #1
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	e002      	b.n	80074b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074b0:	f04f 33ff 	mov.w	r3, #4294967295
 80074b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074b6:	69bb      	ldr	r3, [r7, #24]
	}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3720      	adds	r7, #32
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	461a      	mov	r2, r3
 80074d8:	21a5      	movs	r1, #165	; 0xa5
 80074da:	f001 ffc1 	bl	8009460 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074e8:	3b01      	subs	r3, #1
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	f023 0307 	bic.w	r3, r3, #7
 80074f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	617b      	str	r3, [r7, #20]
}
 8007514:	bf00      	nop
 8007516:	e7fe      	b.n	8007516 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01f      	beq.n	800755e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800751e:	2300      	movs	r3, #0
 8007520:	61fb      	str	r3, [r7, #28]
 8007522:	e012      	b.n	800754a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	7819      	ldrb	r1, [r3, #0]
 800752c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4413      	add	r3, r2
 8007532:	3334      	adds	r3, #52	; 0x34
 8007534:	460a      	mov	r2, r1
 8007536:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	4413      	add	r3, r2
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d006      	beq.n	8007552 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	3301      	adds	r3, #1
 8007548:	61fb      	str	r3, [r7, #28]
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	2b0f      	cmp	r3, #15
 800754e:	d9e9      	bls.n	8007524 <prvInitialiseNewTask+0x64>
 8007550:	e000      	b.n	8007554 <prvInitialiseNewTask+0x94>
			{
				break;
 8007552:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800755c:	e003      	b.n	8007566 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	2b37      	cmp	r3, #55	; 0x37
 800756a:	d901      	bls.n	8007570 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800756c:	2337      	movs	r3, #55	; 0x37
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007574:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800757a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	2200      	movs	r2, #0
 8007580:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	3304      	adds	r3, #4
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe ff64 	bl	8006454 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	3318      	adds	r3, #24
 8007590:	4618      	mov	r0, r3
 8007592:	f7fe ff5f 	bl	8006454 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800759a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	3354      	adds	r3, #84	; 0x54
 80075c0:	2260      	movs	r2, #96	; 0x60
 80075c2:	2100      	movs	r1, #0
 80075c4:	4618      	mov	r0, r3
 80075c6:	f001 ff4b 	bl	8009460 <memset>
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	4a0c      	ldr	r2, [pc, #48]	; (8007600 <prvInitialiseNewTask+0x140>)
 80075ce:	659a      	str	r2, [r3, #88]	; 0x58
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	4a0c      	ldr	r2, [pc, #48]	; (8007604 <prvInitialiseNewTask+0x144>)
 80075d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	4a0b      	ldr	r2, [pc, #44]	; (8007608 <prvInitialiseNewTask+0x148>)
 80075da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	68f9      	ldr	r1, [r7, #12]
 80075e0:	69b8      	ldr	r0, [r7, #24]
 80075e2:	f001 facd 	bl	8008b80 <pxPortInitialiseStack>
 80075e6:	4602      	mov	r2, r0
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075f8:	bf00      	nop
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	0800b5b0 	.word	0x0800b5b0
 8007604:	0800b5d0 	.word	0x0800b5d0
 8007608:	0800b590 	.word	0x0800b590

0800760c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007614:	f001 fbde 	bl	8008dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007618:	4b2d      	ldr	r3, [pc, #180]	; (80076d0 <prvAddNewTaskToReadyList+0xc4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3301      	adds	r3, #1
 800761e:	4a2c      	ldr	r2, [pc, #176]	; (80076d0 <prvAddNewTaskToReadyList+0xc4>)
 8007620:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007622:	4b2c      	ldr	r3, [pc, #176]	; (80076d4 <prvAddNewTaskToReadyList+0xc8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d109      	bne.n	800763e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800762a:	4a2a      	ldr	r2, [pc, #168]	; (80076d4 <prvAddNewTaskToReadyList+0xc8>)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007630:	4b27      	ldr	r3, [pc, #156]	; (80076d0 <prvAddNewTaskToReadyList+0xc4>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d110      	bne.n	800765a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007638:	f000 fca4 	bl	8007f84 <prvInitialiseTaskLists>
 800763c:	e00d      	b.n	800765a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800763e:	4b26      	ldr	r3, [pc, #152]	; (80076d8 <prvAddNewTaskToReadyList+0xcc>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d109      	bne.n	800765a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007646:	4b23      	ldr	r3, [pc, #140]	; (80076d4 <prvAddNewTaskToReadyList+0xc8>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	429a      	cmp	r2, r3
 8007652:	d802      	bhi.n	800765a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007654:	4a1f      	ldr	r2, [pc, #124]	; (80076d4 <prvAddNewTaskToReadyList+0xc8>)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800765a:	4b20      	ldr	r3, [pc, #128]	; (80076dc <prvAddNewTaskToReadyList+0xd0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3301      	adds	r3, #1
 8007660:	4a1e      	ldr	r2, [pc, #120]	; (80076dc <prvAddNewTaskToReadyList+0xd0>)
 8007662:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007664:	4b1d      	ldr	r3, [pc, #116]	; (80076dc <prvAddNewTaskToReadyList+0xd0>)
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007670:	4b1b      	ldr	r3, [pc, #108]	; (80076e0 <prvAddNewTaskToReadyList+0xd4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	429a      	cmp	r2, r3
 8007676:	d903      	bls.n	8007680 <prvAddNewTaskToReadyList+0x74>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	4a18      	ldr	r2, [pc, #96]	; (80076e0 <prvAddNewTaskToReadyList+0xd4>)
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4a15      	ldr	r2, [pc, #84]	; (80076e4 <prvAddNewTaskToReadyList+0xd8>)
 800768e:	441a      	add	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3304      	adds	r3, #4
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	f7fe fee9 	bl	800646e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800769c:	f001 fbca 	bl	8008e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076a0:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <prvAddNewTaskToReadyList+0xcc>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00e      	beq.n	80076c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076a8:	4b0a      	ldr	r3, [pc, #40]	; (80076d4 <prvAddNewTaskToReadyList+0xc8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d207      	bcs.n	80076c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076b6:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <prvAddNewTaskToReadyList+0xdc>)
 80076b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076c6:	bf00      	nop
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20000d54 	.word	0x20000d54
 80076d4:	20000880 	.word	0x20000880
 80076d8:	20000d60 	.word	0x20000d60
 80076dc:	20000d70 	.word	0x20000d70
 80076e0:	20000d5c 	.word	0x20000d5c
 80076e4:	20000884 	.word	0x20000884
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08a      	sub	sp, #40	; 0x28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80076f6:	2300      	movs	r3, #0
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <vTaskDelayUntil+0x2a>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	617b      	str	r3, [r7, #20]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <vTaskDelayUntil+0x46>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	613b      	str	r3, [r7, #16]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007732:	4b2a      	ldr	r3, [pc, #168]	; (80077dc <vTaskDelayUntil+0xf0>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <vTaskDelayUntil+0x64>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	60fb      	str	r3, [r7, #12]
}
 800774c:	bf00      	nop
 800774e:	e7fe      	b.n	800774e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007750:	f000 f8ee 	bl	8007930 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007754:	4b22      	ldr	r3, [pc, #136]	; (80077e0 <vTaskDelayUntil+0xf4>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	4413      	add	r3, r2
 8007762:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6a3a      	ldr	r2, [r7, #32]
 800776a:	429a      	cmp	r2, r3
 800776c:	d20b      	bcs.n	8007786 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	429a      	cmp	r2, r3
 8007776:	d211      	bcs.n	800779c <vTaskDelayUntil+0xb0>
 8007778:	69fa      	ldr	r2, [r7, #28]
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	429a      	cmp	r2, r3
 800777e:	d90d      	bls.n	800779c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007780:	2301      	movs	r3, #1
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
 8007784:	e00a      	b.n	800779c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	429a      	cmp	r2, r3
 800778e:	d303      	bcc.n	8007798 <vTaskDelayUntil+0xac>
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	429a      	cmp	r2, r3
 8007796:	d901      	bls.n	800779c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007798:	2301      	movs	r3, #1
 800779a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d006      	beq.n	80077b6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80077a8:	69fa      	ldr	r2, [r7, #28]
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2100      	movs	r1, #0
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fe43 	bl	800843c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80077b6:	f000 f8c9 	bl	800794c <xTaskResumeAll>
 80077ba:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d107      	bne.n	80077d2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80077c2:	4b08      	ldr	r3, [pc, #32]	; (80077e4 <vTaskDelayUntil+0xf8>)
 80077c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077d2:	bf00      	nop
 80077d4:	3728      	adds	r7, #40	; 0x28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20000d7c 	.word	0x20000d7c
 80077e0:	20000d58 	.word	0x20000d58
 80077e4:	e000ed04 	.word	0xe000ed04

080077e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d017      	beq.n	800782a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077fa:	4b13      	ldr	r3, [pc, #76]	; (8007848 <vTaskDelay+0x60>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <vTaskDelay+0x30>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	60bb      	str	r3, [r7, #8]
}
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007818:	f000 f88a 	bl	8007930 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800781c:	2100      	movs	r1, #0
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fe0c 	bl	800843c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007824:	f000 f892 	bl	800794c <xTaskResumeAll>
 8007828:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d107      	bne.n	8007840 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007830:	4b06      	ldr	r3, [pc, #24]	; (800784c <vTaskDelay+0x64>)
 8007832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007840:	bf00      	nop
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000d7c 	.word	0x20000d7c
 800784c:	e000ed04 	.word	0xe000ed04

08007850 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08a      	sub	sp, #40	; 0x28
 8007854:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800785e:	463a      	mov	r2, r7
 8007860:	1d39      	adds	r1, r7, #4
 8007862:	f107 0308 	add.w	r3, r7, #8
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fda0 	bl	80063ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	9202      	str	r2, [sp, #8]
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	2300      	movs	r3, #0
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	2300      	movs	r3, #0
 800787c:	460a      	mov	r2, r1
 800787e:	4924      	ldr	r1, [pc, #144]	; (8007910 <vTaskStartScheduler+0xc0>)
 8007880:	4824      	ldr	r0, [pc, #144]	; (8007914 <vTaskStartScheduler+0xc4>)
 8007882:	f7ff fd7b 	bl	800737c <xTaskCreateStatic>
 8007886:	4603      	mov	r3, r0
 8007888:	4a23      	ldr	r2, [pc, #140]	; (8007918 <vTaskStartScheduler+0xc8>)
 800788a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800788c:	4b22      	ldr	r3, [pc, #136]	; (8007918 <vTaskStartScheduler+0xc8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007894:	2301      	movs	r3, #1
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	e001      	b.n	800789e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800789a:	2300      	movs	r3, #0
 800789c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d102      	bne.n	80078aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078a4:	f000 fe1e 	bl	80084e4 <xTimerCreateTimerTask>
 80078a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d11b      	bne.n	80078e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	613b      	str	r3, [r7, #16]
}
 80078c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078c4:	4b15      	ldr	r3, [pc, #84]	; (800791c <vTaskStartScheduler+0xcc>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3354      	adds	r3, #84	; 0x54
 80078ca:	4a15      	ldr	r2, [pc, #84]	; (8007920 <vTaskStartScheduler+0xd0>)
 80078cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078ce:	4b15      	ldr	r3, [pc, #84]	; (8007924 <vTaskStartScheduler+0xd4>)
 80078d0:	f04f 32ff 	mov.w	r2, #4294967295
 80078d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078d6:	4b14      	ldr	r3, [pc, #80]	; (8007928 <vTaskStartScheduler+0xd8>)
 80078d8:	2201      	movs	r2, #1
 80078da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078dc:	4b13      	ldr	r3, [pc, #76]	; (800792c <vTaskStartScheduler+0xdc>)
 80078de:	2200      	movs	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078e2:	f001 f9d5 	bl	8008c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078e6:	e00e      	b.n	8007906 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ee:	d10a      	bne.n	8007906 <vTaskStartScheduler+0xb6>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	60fb      	str	r3, [r7, #12]
}
 8007902:	bf00      	nop
 8007904:	e7fe      	b.n	8007904 <vTaskStartScheduler+0xb4>
}
 8007906:	bf00      	nop
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	0800b4b4 	.word	0x0800b4b4
 8007914:	08007f55 	.word	0x08007f55
 8007918:	20000d78 	.word	0x20000d78
 800791c:	20000880 	.word	0x20000880
 8007920:	20000044 	.word	0x20000044
 8007924:	20000d74 	.word	0x20000d74
 8007928:	20000d60 	.word	0x20000d60
 800792c:	20000d58 	.word	0x20000d58

08007930 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007934:	4b04      	ldr	r3, [pc, #16]	; (8007948 <vTaskSuspendAll+0x18>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3301      	adds	r3, #1
 800793a:	4a03      	ldr	r2, [pc, #12]	; (8007948 <vTaskSuspendAll+0x18>)
 800793c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800793e:	bf00      	nop
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	20000d7c 	.word	0x20000d7c

0800794c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007952:	2300      	movs	r3, #0
 8007954:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007956:	2300      	movs	r3, #0
 8007958:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800795a:	4b42      	ldr	r3, [pc, #264]	; (8007a64 <xTaskResumeAll+0x118>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <xTaskResumeAll+0x2c>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	603b      	str	r3, [r7, #0]
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007978:	f001 fa2c 	bl	8008dd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800797c:	4b39      	ldr	r3, [pc, #228]	; (8007a64 <xTaskResumeAll+0x118>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3b01      	subs	r3, #1
 8007982:	4a38      	ldr	r2, [pc, #224]	; (8007a64 <xTaskResumeAll+0x118>)
 8007984:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007986:	4b37      	ldr	r3, [pc, #220]	; (8007a64 <xTaskResumeAll+0x118>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d162      	bne.n	8007a54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800798e:	4b36      	ldr	r3, [pc, #216]	; (8007a68 <xTaskResumeAll+0x11c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d05e      	beq.n	8007a54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007996:	e02f      	b.n	80079f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007998:	4b34      	ldr	r3, [pc, #208]	; (8007a6c <xTaskResumeAll+0x120>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3318      	adds	r3, #24
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fe fdbf 	bl	8006528 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe fdba 	bl	8006528 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b8:	4b2d      	ldr	r3, [pc, #180]	; (8007a70 <xTaskResumeAll+0x124>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d903      	bls.n	80079c8 <xTaskResumeAll+0x7c>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	4a2a      	ldr	r2, [pc, #168]	; (8007a70 <xTaskResumeAll+0x124>)
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4a27      	ldr	r2, [pc, #156]	; (8007a74 <xTaskResumeAll+0x128>)
 80079d6:	441a      	add	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3304      	adds	r3, #4
 80079dc:	4619      	mov	r1, r3
 80079de:	4610      	mov	r0, r2
 80079e0:	f7fe fd45 	bl	800646e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e8:	4b23      	ldr	r3, [pc, #140]	; (8007a78 <xTaskResumeAll+0x12c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d302      	bcc.n	80079f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079f2:	4b22      	ldr	r3, [pc, #136]	; (8007a7c <xTaskResumeAll+0x130>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079f8:	4b1c      	ldr	r3, [pc, #112]	; (8007a6c <xTaskResumeAll+0x120>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1cb      	bne.n	8007998 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a06:	f000 fb5f 	bl	80080c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a0a:	4b1d      	ldr	r3, [pc, #116]	; (8007a80 <xTaskResumeAll+0x134>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d010      	beq.n	8007a38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a16:	f000 f847 	bl	8007aa8 <xTaskIncrementTick>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a20:	4b16      	ldr	r3, [pc, #88]	; (8007a7c <xTaskResumeAll+0x130>)
 8007a22:	2201      	movs	r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f1      	bne.n	8007a16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a32:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <xTaskResumeAll+0x134>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a38:	4b10      	ldr	r3, [pc, #64]	; (8007a7c <xTaskResumeAll+0x130>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d009      	beq.n	8007a54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a40:	2301      	movs	r3, #1
 8007a42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a44:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <xTaskResumeAll+0x138>)
 8007a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a54:	f001 f9ee 	bl	8008e34 <vPortExitCritical>

	return xAlreadyYielded;
 8007a58:	68bb      	ldr	r3, [r7, #8]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000d7c 	.word	0x20000d7c
 8007a68:	20000d54 	.word	0x20000d54
 8007a6c:	20000d14 	.word	0x20000d14
 8007a70:	20000d5c 	.word	0x20000d5c
 8007a74:	20000884 	.word	0x20000884
 8007a78:	20000880 	.word	0x20000880
 8007a7c:	20000d68 	.word	0x20000d68
 8007a80:	20000d64 	.word	0x20000d64
 8007a84:	e000ed04 	.word	0xe000ed04

08007a88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a8e:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <xTaskGetTickCount+0x1c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a94:	687b      	ldr	r3, [r7, #4]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000d58 	.word	0x20000d58

08007aa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ab2:	4b4f      	ldr	r3, [pc, #316]	; (8007bf0 <xTaskIncrementTick+0x148>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f040 808f 	bne.w	8007bda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007abc:	4b4d      	ldr	r3, [pc, #308]	; (8007bf4 <xTaskIncrementTick+0x14c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ac4:	4a4b      	ldr	r2, [pc, #300]	; (8007bf4 <xTaskIncrementTick+0x14c>)
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d120      	bne.n	8007b12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ad0:	4b49      	ldr	r3, [pc, #292]	; (8007bf8 <xTaskIncrementTick+0x150>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <xTaskIncrementTick+0x48>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	603b      	str	r3, [r7, #0]
}
 8007aec:	bf00      	nop
 8007aee:	e7fe      	b.n	8007aee <xTaskIncrementTick+0x46>
 8007af0:	4b41      	ldr	r3, [pc, #260]	; (8007bf8 <xTaskIncrementTick+0x150>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	4b41      	ldr	r3, [pc, #260]	; (8007bfc <xTaskIncrementTick+0x154>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a3f      	ldr	r2, [pc, #252]	; (8007bf8 <xTaskIncrementTick+0x150>)
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	4a3f      	ldr	r2, [pc, #252]	; (8007bfc <xTaskIncrementTick+0x154>)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	4b3e      	ldr	r3, [pc, #248]	; (8007c00 <xTaskIncrementTick+0x158>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	4a3d      	ldr	r2, [pc, #244]	; (8007c00 <xTaskIncrementTick+0x158>)
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	f000 fadb 	bl	80080c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b12:	4b3c      	ldr	r3, [pc, #240]	; (8007c04 <xTaskIncrementTick+0x15c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d349      	bcc.n	8007bb0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b1c:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <xTaskIncrementTick+0x150>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d104      	bne.n	8007b30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b26:	4b37      	ldr	r3, [pc, #220]	; (8007c04 <xTaskIncrementTick+0x15c>)
 8007b28:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2c:	601a      	str	r2, [r3, #0]
					break;
 8007b2e:	e03f      	b.n	8007bb0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b30:	4b31      	ldr	r3, [pc, #196]	; (8007bf8 <xTaskIncrementTick+0x150>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d203      	bcs.n	8007b50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b48:	4a2e      	ldr	r2, [pc, #184]	; (8007c04 <xTaskIncrementTick+0x15c>)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b4e:	e02f      	b.n	8007bb0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	3304      	adds	r3, #4
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe fce7 	bl	8006528 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d004      	beq.n	8007b6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	3318      	adds	r3, #24
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe fcde 	bl	8006528 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b70:	4b25      	ldr	r3, [pc, #148]	; (8007c08 <xTaskIncrementTick+0x160>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d903      	bls.n	8007b80 <xTaskIncrementTick+0xd8>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	4a22      	ldr	r2, [pc, #136]	; (8007c08 <xTaskIncrementTick+0x160>)
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b84:	4613      	mov	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4a1f      	ldr	r2, [pc, #124]	; (8007c0c <xTaskIncrementTick+0x164>)
 8007b8e:	441a      	add	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	3304      	adds	r3, #4
 8007b94:	4619      	mov	r1, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	f7fe fc69 	bl	800646e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba0:	4b1b      	ldr	r3, [pc, #108]	; (8007c10 <xTaskIncrementTick+0x168>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d3b8      	bcc.n	8007b1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007baa:	2301      	movs	r3, #1
 8007bac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bae:	e7b5      	b.n	8007b1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bb0:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <xTaskIncrementTick+0x168>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb6:	4915      	ldr	r1, [pc, #84]	; (8007c0c <xTaskIncrementTick+0x164>)
 8007bb8:	4613      	mov	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d901      	bls.n	8007bcc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007bcc:	4b11      	ldr	r3, [pc, #68]	; (8007c14 <xTaskIncrementTick+0x16c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d007      	beq.n	8007be4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	e004      	b.n	8007be4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007bda:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <xTaskIncrementTick+0x170>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3301      	adds	r3, #1
 8007be0:	4a0d      	ldr	r2, [pc, #52]	; (8007c18 <xTaskIncrementTick+0x170>)
 8007be2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007be4:	697b      	ldr	r3, [r7, #20]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000d7c 	.word	0x20000d7c
 8007bf4:	20000d58 	.word	0x20000d58
 8007bf8:	20000d0c 	.word	0x20000d0c
 8007bfc:	20000d10 	.word	0x20000d10
 8007c00:	20000d6c 	.word	0x20000d6c
 8007c04:	20000d74 	.word	0x20000d74
 8007c08:	20000d5c 	.word	0x20000d5c
 8007c0c:	20000884 	.word	0x20000884
 8007c10:	20000880 	.word	0x20000880
 8007c14:	20000d68 	.word	0x20000d68
 8007c18:	20000d64 	.word	0x20000d64

08007c1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c22:	4b2a      	ldr	r3, [pc, #168]	; (8007ccc <vTaskSwitchContext+0xb0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c2a:	4b29      	ldr	r3, [pc, #164]	; (8007cd0 <vTaskSwitchContext+0xb4>)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c30:	e046      	b.n	8007cc0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007c32:	4b27      	ldr	r3, [pc, #156]	; (8007cd0 <vTaskSwitchContext+0xb4>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c38:	4b26      	ldr	r3, [pc, #152]	; (8007cd4 <vTaskSwitchContext+0xb8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	e010      	b.n	8007c62 <vTaskSwitchContext+0x46>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10a      	bne.n	8007c5c <vTaskSwitchContext+0x40>
	__asm volatile
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	607b      	str	r3, [r7, #4]
}
 8007c58:	bf00      	nop
 8007c5a:	e7fe      	b.n	8007c5a <vTaskSwitchContext+0x3e>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	491d      	ldr	r1, [pc, #116]	; (8007cd8 <vTaskSwitchContext+0xbc>)
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4613      	mov	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	440b      	add	r3, r1
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0e4      	beq.n	8007c40 <vTaskSwitchContext+0x24>
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4a15      	ldr	r2, [pc, #84]	; (8007cd8 <vTaskSwitchContext+0xbc>)
 8007c82:	4413      	add	r3, r2
 8007c84:	60bb      	str	r3, [r7, #8]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	605a      	str	r2, [r3, #4]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	3308      	adds	r3, #8
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d104      	bne.n	8007ca6 <vTaskSwitchContext+0x8a>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	4a0b      	ldr	r2, [pc, #44]	; (8007cdc <vTaskSwitchContext+0xc0>)
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	4a08      	ldr	r2, [pc, #32]	; (8007cd4 <vTaskSwitchContext+0xb8>)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cb6:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <vTaskSwitchContext+0xc0>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3354      	adds	r3, #84	; 0x54
 8007cbc:	4a08      	ldr	r2, [pc, #32]	; (8007ce0 <vTaskSwitchContext+0xc4>)
 8007cbe:	6013      	str	r3, [r2, #0]
}
 8007cc0:	bf00      	nop
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	20000d7c 	.word	0x20000d7c
 8007cd0:	20000d68 	.word	0x20000d68
 8007cd4:	20000d5c 	.word	0x20000d5c
 8007cd8:	20000884 	.word	0x20000884
 8007cdc:	20000880 	.word	0x20000880
 8007ce0:	20000044 	.word	0x20000044

08007ce4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10a      	bne.n	8007d0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	60fb      	str	r3, [r7, #12]
}
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d0a:	4b07      	ldr	r3, [pc, #28]	; (8007d28 <vTaskPlaceOnEventList+0x44>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3318      	adds	r3, #24
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7fe fbcf 	bl	80064b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d18:	2101      	movs	r1, #1
 8007d1a:	6838      	ldr	r0, [r7, #0]
 8007d1c:	f000 fb8e 	bl	800843c <prvAddCurrentTaskToDelayedList>
}
 8007d20:	bf00      	nop
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20000880 	.word	0x20000880

08007d2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	617b      	str	r3, [r7, #20]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d54:	4b0a      	ldr	r3, [pc, #40]	; (8007d80 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3318      	adds	r3, #24
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7fe fb86 	bl	800646e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d68:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	68b8      	ldr	r0, [r7, #8]
 8007d72:	f000 fb63 	bl	800843c <prvAddCurrentTaskToDelayedList>
	}
 8007d76:	bf00      	nop
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000880 	.word	0x20000880

08007d84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10a      	bne.n	8007db0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	60fb      	str	r3, [r7, #12]
}
 8007dac:	bf00      	nop
 8007dae:	e7fe      	b.n	8007dae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	3318      	adds	r3, #24
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fe fbb7 	bl	8006528 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dba:	4b1e      	ldr	r3, [pc, #120]	; (8007e34 <xTaskRemoveFromEventList+0xb0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d11d      	bne.n	8007dfe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe fbae 	bl	8006528 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd0:	4b19      	ldr	r3, [pc, #100]	; (8007e38 <xTaskRemoveFromEventList+0xb4>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d903      	bls.n	8007de0 <xTaskRemoveFromEventList+0x5c>
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	4a16      	ldr	r2, [pc, #88]	; (8007e38 <xTaskRemoveFromEventList+0xb4>)
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de4:	4613      	mov	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4a13      	ldr	r2, [pc, #76]	; (8007e3c <xTaskRemoveFromEventList+0xb8>)
 8007dee:	441a      	add	r2, r3
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	3304      	adds	r3, #4
 8007df4:	4619      	mov	r1, r3
 8007df6:	4610      	mov	r0, r2
 8007df8:	f7fe fb39 	bl	800646e <vListInsertEnd>
 8007dfc:	e005      	b.n	8007e0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	3318      	adds	r3, #24
 8007e02:	4619      	mov	r1, r3
 8007e04:	480e      	ldr	r0, [pc, #56]	; (8007e40 <xTaskRemoveFromEventList+0xbc>)
 8007e06:	f7fe fb32 	bl	800646e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0e:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <xTaskRemoveFromEventList+0xc0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d905      	bls.n	8007e24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <xTaskRemoveFromEventList+0xc4>)
 8007e1e:	2201      	movs	r2, #1
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	e001      	b.n	8007e28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e24:	2300      	movs	r3, #0
 8007e26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e28:	697b      	ldr	r3, [r7, #20]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20000d7c 	.word	0x20000d7c
 8007e38:	20000d5c 	.word	0x20000d5c
 8007e3c:	20000884 	.word	0x20000884
 8007e40:	20000d14 	.word	0x20000d14
 8007e44:	20000880 	.word	0x20000880
 8007e48:	20000d68 	.word	0x20000d68

08007e4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e54:	4b06      	ldr	r3, [pc, #24]	; (8007e70 <vTaskInternalSetTimeOutState+0x24>)
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e5c:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <vTaskInternalSetTimeOutState+0x28>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	605a      	str	r2, [r3, #4]
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	20000d6c 	.word	0x20000d6c
 8007e74:	20000d58 	.word	0x20000d58

08007e78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10a      	bne.n	8007e9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	613b      	str	r3, [r7, #16]
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10a      	bne.n	8007eba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	60fb      	str	r3, [r7, #12]
}
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007eba:	f000 ff8b 	bl	8008dd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ebe:	4b1d      	ldr	r3, [pc, #116]	; (8007f34 <xTaskCheckForTimeOut+0xbc>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d102      	bne.n	8007ede <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	e023      	b.n	8007f26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b15      	ldr	r3, [pc, #84]	; (8007f38 <xTaskCheckForTimeOut+0xc0>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d007      	beq.n	8007efa <xTaskCheckForTimeOut+0x82>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d302      	bcc.n	8007efa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	61fb      	str	r3, [r7, #28]
 8007ef8:	e015      	b.n	8007f26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d20b      	bcs.n	8007f1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	1ad2      	subs	r2, r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff ff9b 	bl	8007e4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f16:	2300      	movs	r3, #0
 8007f18:	61fb      	str	r3, [r7, #28]
 8007f1a:	e004      	b.n	8007f26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f22:	2301      	movs	r3, #1
 8007f24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f26:	f000 ff85 	bl	8008e34 <vPortExitCritical>

	return xReturn;
 8007f2a:	69fb      	ldr	r3, [r7, #28]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3720      	adds	r7, #32
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20000d58 	.word	0x20000d58
 8007f38:	20000d6c 	.word	0x20000d6c

08007f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f40:	4b03      	ldr	r3, [pc, #12]	; (8007f50 <vTaskMissedYield+0x14>)
 8007f42:	2201      	movs	r2, #1
 8007f44:	601a      	str	r2, [r3, #0]
}
 8007f46:	bf00      	nop
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	20000d68 	.word	0x20000d68

08007f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f5c:	f000 f852 	bl	8008004 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f60:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <prvIdleTask+0x28>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d9f9      	bls.n	8007f5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f68:	4b05      	ldr	r3, [pc, #20]	; (8007f80 <prvIdleTask+0x2c>)
 8007f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f78:	e7f0      	b.n	8007f5c <prvIdleTask+0x8>
 8007f7a:	bf00      	nop
 8007f7c:	20000884 	.word	0x20000884
 8007f80:	e000ed04 	.word	0xe000ed04

08007f84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	607b      	str	r3, [r7, #4]
 8007f8e:	e00c      	b.n	8007faa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4a12      	ldr	r2, [pc, #72]	; (8007fe4 <prvInitialiseTaskLists+0x60>)
 8007f9c:	4413      	add	r3, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe fa38 	bl	8006414 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	607b      	str	r3, [r7, #4]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b37      	cmp	r3, #55	; 0x37
 8007fae:	d9ef      	bls.n	8007f90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fb0:	480d      	ldr	r0, [pc, #52]	; (8007fe8 <prvInitialiseTaskLists+0x64>)
 8007fb2:	f7fe fa2f 	bl	8006414 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fb6:	480d      	ldr	r0, [pc, #52]	; (8007fec <prvInitialiseTaskLists+0x68>)
 8007fb8:	f7fe fa2c 	bl	8006414 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fbc:	480c      	ldr	r0, [pc, #48]	; (8007ff0 <prvInitialiseTaskLists+0x6c>)
 8007fbe:	f7fe fa29 	bl	8006414 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fc2:	480c      	ldr	r0, [pc, #48]	; (8007ff4 <prvInitialiseTaskLists+0x70>)
 8007fc4:	f7fe fa26 	bl	8006414 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fc8:	480b      	ldr	r0, [pc, #44]	; (8007ff8 <prvInitialiseTaskLists+0x74>)
 8007fca:	f7fe fa23 	bl	8006414 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fce:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <prvInitialiseTaskLists+0x78>)
 8007fd0:	4a05      	ldr	r2, [pc, #20]	; (8007fe8 <prvInitialiseTaskLists+0x64>)
 8007fd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fd4:	4b0a      	ldr	r3, [pc, #40]	; (8008000 <prvInitialiseTaskLists+0x7c>)
 8007fd6:	4a05      	ldr	r2, [pc, #20]	; (8007fec <prvInitialiseTaskLists+0x68>)
 8007fd8:	601a      	str	r2, [r3, #0]
}
 8007fda:	bf00      	nop
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000884 	.word	0x20000884
 8007fe8:	20000ce4 	.word	0x20000ce4
 8007fec:	20000cf8 	.word	0x20000cf8
 8007ff0:	20000d14 	.word	0x20000d14
 8007ff4:	20000d28 	.word	0x20000d28
 8007ff8:	20000d40 	.word	0x20000d40
 8007ffc:	20000d0c 	.word	0x20000d0c
 8008000:	20000d10 	.word	0x20000d10

08008004 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800800a:	e019      	b.n	8008040 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800800c:	f000 fee2 	bl	8008dd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008010:	4b10      	ldr	r3, [pc, #64]	; (8008054 <prvCheckTasksWaitingTermination+0x50>)
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3304      	adds	r3, #4
 800801c:	4618      	mov	r0, r3
 800801e:	f7fe fa83 	bl	8006528 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008022:	4b0d      	ldr	r3, [pc, #52]	; (8008058 <prvCheckTasksWaitingTermination+0x54>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3b01      	subs	r3, #1
 8008028:	4a0b      	ldr	r2, [pc, #44]	; (8008058 <prvCheckTasksWaitingTermination+0x54>)
 800802a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800802c:	4b0b      	ldr	r3, [pc, #44]	; (800805c <prvCheckTasksWaitingTermination+0x58>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3b01      	subs	r3, #1
 8008032:	4a0a      	ldr	r2, [pc, #40]	; (800805c <prvCheckTasksWaitingTermination+0x58>)
 8008034:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008036:	f000 fefd 	bl	8008e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f810 	bl	8008060 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008040:	4b06      	ldr	r3, [pc, #24]	; (800805c <prvCheckTasksWaitingTermination+0x58>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e1      	bne.n	800800c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008048:	bf00      	nop
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20000d28 	.word	0x20000d28
 8008058:	20000d54 	.word	0x20000d54
 800805c:	20000d3c 	.word	0x20000d3c

08008060 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3354      	adds	r3, #84	; 0x54
 800806c:	4618      	mov	r0, r3
 800806e:	f001 fa0d 	bl	800948c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008078:	2b00      	cmp	r3, #0
 800807a:	d108      	bne.n	800808e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008080:	4618      	mov	r0, r3
 8008082:	f001 f895 	bl	80091b0 <vPortFree>
				vPortFree( pxTCB );
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 f892 	bl	80091b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800808c:	e018      	b.n	80080c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008094:	2b01      	cmp	r3, #1
 8008096:	d103      	bne.n	80080a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 f889 	bl	80091b0 <vPortFree>
	}
 800809e:	e00f      	b.n	80080c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d00a      	beq.n	80080c0 <prvDeleteTCB+0x60>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	60fb      	str	r3, [r7, #12]
}
 80080bc:	bf00      	nop
 80080be:	e7fe      	b.n	80080be <prvDeleteTCB+0x5e>
	}
 80080c0:	bf00      	nop
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080ce:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <prvResetNextTaskUnblockTime+0x38>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080d8:	4b0a      	ldr	r3, [pc, #40]	; (8008104 <prvResetNextTaskUnblockTime+0x3c>)
 80080da:	f04f 32ff 	mov.w	r2, #4294967295
 80080de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080e0:	e008      	b.n	80080f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080e2:	4b07      	ldr	r3, [pc, #28]	; (8008100 <prvResetNextTaskUnblockTime+0x38>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	4a04      	ldr	r2, [pc, #16]	; (8008104 <prvResetNextTaskUnblockTime+0x3c>)
 80080f2:	6013      	str	r3, [r2, #0]
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	20000d0c 	.word	0x20000d0c
 8008104:	20000d74 	.word	0x20000d74

08008108 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800810e:	4b05      	ldr	r3, [pc, #20]	; (8008124 <xTaskGetCurrentTaskHandle+0x1c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008114:	687b      	ldr	r3, [r7, #4]
	}
 8008116:	4618      	mov	r0, r3
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	20000880 	.word	0x20000880

08008128 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800812e:	4b0b      	ldr	r3, [pc, #44]	; (800815c <xTaskGetSchedulerState+0x34>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d102      	bne.n	800813c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008136:	2301      	movs	r3, #1
 8008138:	607b      	str	r3, [r7, #4]
 800813a:	e008      	b.n	800814e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800813c:	4b08      	ldr	r3, [pc, #32]	; (8008160 <xTaskGetSchedulerState+0x38>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d102      	bne.n	800814a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008144:	2302      	movs	r3, #2
 8008146:	607b      	str	r3, [r7, #4]
 8008148:	e001      	b.n	800814e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800814a:	2300      	movs	r3, #0
 800814c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800814e:	687b      	ldr	r3, [r7, #4]
	}
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	20000d60 	.word	0x20000d60
 8008160:	20000d7c 	.word	0x20000d7c

08008164 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008170:	2300      	movs	r3, #0
 8008172:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d051      	beq.n	800821e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817e:	4b2a      	ldr	r3, [pc, #168]	; (8008228 <xTaskPriorityInherit+0xc4>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	429a      	cmp	r2, r3
 8008186:	d241      	bcs.n	800820c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	2b00      	cmp	r3, #0
 800818e:	db06      	blt.n	800819e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008190:	4b25      	ldr	r3, [pc, #148]	; (8008228 <xTaskPriorityInherit+0xc4>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008196:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	6959      	ldr	r1, [r3, #20]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4a1f      	ldr	r2, [pc, #124]	; (800822c <xTaskPriorityInherit+0xc8>)
 80081b0:	4413      	add	r3, r2
 80081b2:	4299      	cmp	r1, r3
 80081b4:	d122      	bne.n	80081fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	3304      	adds	r3, #4
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe f9b4 	bl	8006528 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081c0:	4b19      	ldr	r3, [pc, #100]	; (8008228 <xTaskPriorityInherit+0xc4>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ce:	4b18      	ldr	r3, [pc, #96]	; (8008230 <xTaskPriorityInherit+0xcc>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d903      	bls.n	80081de <xTaskPriorityInherit+0x7a>
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081da:	4a15      	ldr	r2, [pc, #84]	; (8008230 <xTaskPriorityInherit+0xcc>)
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4a10      	ldr	r2, [pc, #64]	; (800822c <xTaskPriorityInherit+0xc8>)
 80081ec:	441a      	add	r2, r3
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	3304      	adds	r3, #4
 80081f2:	4619      	mov	r1, r3
 80081f4:	4610      	mov	r0, r2
 80081f6:	f7fe f93a 	bl	800646e <vListInsertEnd>
 80081fa:	e004      	b.n	8008206 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <xTaskPriorityInherit+0xc4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008206:	2301      	movs	r3, #1
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	e008      	b.n	800821e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008210:	4b05      	ldr	r3, [pc, #20]	; (8008228 <xTaskPriorityInherit+0xc4>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	429a      	cmp	r2, r3
 8008218:	d201      	bcs.n	800821e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800821a:	2301      	movs	r3, #1
 800821c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800821e:	68fb      	ldr	r3, [r7, #12]
	}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20000880 	.word	0x20000880
 800822c:	20000884 	.word	0x20000884
 8008230:	20000d5c 	.word	0x20000d5c

08008234 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008240:	2300      	movs	r3, #0
 8008242:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d056      	beq.n	80082f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800824a:	4b2e      	ldr	r3, [pc, #184]	; (8008304 <xTaskPriorityDisinherit+0xd0>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	429a      	cmp	r2, r3
 8008252:	d00a      	beq.n	800826a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	60fb      	str	r3, [r7, #12]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10a      	bne.n	8008288 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	60bb      	str	r3, [r7, #8]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800828c:	1e5a      	subs	r2, r3, #1
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800829a:	429a      	cmp	r2, r3
 800829c:	d02c      	beq.n	80082f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d128      	bne.n	80082f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe f93c 	bl	8006528 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c8:	4b0f      	ldr	r3, [pc, #60]	; (8008308 <xTaskPriorityDisinherit+0xd4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d903      	bls.n	80082d8 <xTaskPriorityDisinherit+0xa4>
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d4:	4a0c      	ldr	r2, [pc, #48]	; (8008308 <xTaskPriorityDisinherit+0xd4>)
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4a09      	ldr	r2, [pc, #36]	; (800830c <xTaskPriorityDisinherit+0xd8>)
 80082e6:	441a      	add	r2, r3
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	3304      	adds	r3, #4
 80082ec:	4619      	mov	r1, r3
 80082ee:	4610      	mov	r0, r2
 80082f0:	f7fe f8bd 	bl	800646e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082f4:	2301      	movs	r3, #1
 80082f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082f8:	697b      	ldr	r3, [r7, #20]
	}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	20000880 	.word	0x20000880
 8008308:	20000d5c 	.word	0x20000d5c
 800830c:	20000884 	.word	0x20000884

08008310 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800831e:	2301      	movs	r3, #1
 8008320:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d06a      	beq.n	80083fe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	60fb      	str	r3, [r7, #12]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	429a      	cmp	r2, r3
 800834e:	d902      	bls.n	8008356 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	61fb      	str	r3, [r7, #28]
 8008354:	e002      	b.n	800835c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800835a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	429a      	cmp	r2, r3
 8008364:	d04b      	beq.n	80083fe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	429a      	cmp	r2, r3
 800836e:	d146      	bne.n	80083fe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008370:	4b25      	ldr	r3, [pc, #148]	; (8008408 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	429a      	cmp	r2, r3
 8008378:	d10a      	bne.n	8008390 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	60bb      	str	r3, [r7, #8]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008394:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	69fa      	ldr	r2, [r7, #28]
 800839a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	db04      	blt.n	80083ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	6959      	ldr	r1, [r3, #20]
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	4613      	mov	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4a13      	ldr	r2, [pc, #76]	; (800840c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80083be:	4413      	add	r3, r2
 80083c0:	4299      	cmp	r1, r3
 80083c2:	d11c      	bne.n	80083fe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe f8ad 	bl	8006528 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d2:	4b0f      	ldr	r3, [pc, #60]	; (8008410 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d903      	bls.n	80083e2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083de:	4a0c      	ldr	r2, [pc, #48]	; (8008410 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4a07      	ldr	r2, [pc, #28]	; (800840c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80083f0:	441a      	add	r2, r3
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	3304      	adds	r3, #4
 80083f6:	4619      	mov	r1, r3
 80083f8:	4610      	mov	r0, r2
 80083fa:	f7fe f838 	bl	800646e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083fe:	bf00      	nop
 8008400:	3720      	adds	r7, #32
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000880 	.word	0x20000880
 800840c:	20000884 	.word	0x20000884
 8008410:	20000d5c 	.word	0x20000d5c

08008414 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008414:	b480      	push	{r7}
 8008416:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008418:	4b07      	ldr	r3, [pc, #28]	; (8008438 <pvTaskIncrementMutexHeldCount+0x24>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008420:	4b05      	ldr	r3, [pc, #20]	; (8008438 <pvTaskIncrementMutexHeldCount+0x24>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008426:	3201      	adds	r2, #1
 8008428:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800842a:	4b03      	ldr	r3, [pc, #12]	; (8008438 <pvTaskIncrementMutexHeldCount+0x24>)
 800842c:	681b      	ldr	r3, [r3, #0]
	}
 800842e:	4618      	mov	r0, r3
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	20000880 	.word	0x20000880

0800843c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008446:	4b21      	ldr	r3, [pc, #132]	; (80084cc <prvAddCurrentTaskToDelayedList+0x90>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800844c:	4b20      	ldr	r3, [pc, #128]	; (80084d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3304      	adds	r3, #4
 8008452:	4618      	mov	r0, r3
 8008454:	f7fe f868 	bl	8006528 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845e:	d10a      	bne.n	8008476 <prvAddCurrentTaskToDelayedList+0x3a>
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d007      	beq.n	8008476 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008466:	4b1a      	ldr	r3, [pc, #104]	; (80084d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3304      	adds	r3, #4
 800846c:	4619      	mov	r1, r3
 800846e:	4819      	ldr	r0, [pc, #100]	; (80084d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008470:	f7fd fffd 	bl	800646e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008474:	e026      	b.n	80084c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4413      	add	r3, r2
 800847c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800847e:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	429a      	cmp	r2, r3
 800848c:	d209      	bcs.n	80084a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800848e:	4b12      	ldr	r3, [pc, #72]	; (80084d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3304      	adds	r3, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f7fe f80b 	bl	80064b6 <vListInsert>
}
 80084a0:	e010      	b.n	80084c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084a2:	4b0e      	ldr	r3, [pc, #56]	; (80084dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	4b0a      	ldr	r3, [pc, #40]	; (80084d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3304      	adds	r3, #4
 80084ac:	4619      	mov	r1, r3
 80084ae:	4610      	mov	r0, r2
 80084b0:	f7fe f801 	bl	80064b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084b4:	4b0a      	ldr	r3, [pc, #40]	; (80084e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d202      	bcs.n	80084c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80084be:	4a08      	ldr	r2, [pc, #32]	; (80084e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	6013      	str	r3, [r2, #0]
}
 80084c4:	bf00      	nop
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000d58 	.word	0x20000d58
 80084d0:	20000880 	.word	0x20000880
 80084d4:	20000d40 	.word	0x20000d40
 80084d8:	20000d10 	.word	0x20000d10
 80084dc:	20000d0c 	.word	0x20000d0c
 80084e0:	20000d74 	.word	0x20000d74

080084e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08a      	sub	sp, #40	; 0x28
 80084e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80084ee:	f000 fb07 	bl	8008b00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084f2:	4b1c      	ldr	r3, [pc, #112]	; (8008564 <xTimerCreateTimerTask+0x80>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d021      	beq.n	800853e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008502:	1d3a      	adds	r2, r7, #4
 8008504:	f107 0108 	add.w	r1, r7, #8
 8008508:	f107 030c 	add.w	r3, r7, #12
 800850c:	4618      	mov	r0, r3
 800850e:	f7fd ff67 	bl	80063e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	9202      	str	r2, [sp, #8]
 800851a:	9301      	str	r3, [sp, #4]
 800851c:	2302      	movs	r3, #2
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	2300      	movs	r3, #0
 8008522:	460a      	mov	r2, r1
 8008524:	4910      	ldr	r1, [pc, #64]	; (8008568 <xTimerCreateTimerTask+0x84>)
 8008526:	4811      	ldr	r0, [pc, #68]	; (800856c <xTimerCreateTimerTask+0x88>)
 8008528:	f7fe ff28 	bl	800737c <xTaskCreateStatic>
 800852c:	4603      	mov	r3, r0
 800852e:	4a10      	ldr	r2, [pc, #64]	; (8008570 <xTimerCreateTimerTask+0x8c>)
 8008530:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008532:	4b0f      	ldr	r3, [pc, #60]	; (8008570 <xTimerCreateTimerTask+0x8c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800853a:	2301      	movs	r3, #1
 800853c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10a      	bne.n	800855a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	613b      	str	r3, [r7, #16]
}
 8008556:	bf00      	nop
 8008558:	e7fe      	b.n	8008558 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800855a:	697b      	ldr	r3, [r7, #20]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20000db0 	.word	0x20000db0
 8008568:	0800b4bc 	.word	0x0800b4bc
 800856c:	080086a9 	.word	0x080086a9
 8008570:	20000db4 	.word	0x20000db4

08008574 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08a      	sub	sp, #40	; 0x28
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008582:	2300      	movs	r3, #0
 8008584:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10a      	bne.n	80085a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	623b      	str	r3, [r7, #32]
}
 800859e:	bf00      	nop
 80085a0:	e7fe      	b.n	80085a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80085a2:	4b1a      	ldr	r3, [pc, #104]	; (800860c <xTimerGenericCommand+0x98>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d02a      	beq.n	8008600 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2b05      	cmp	r3, #5
 80085ba:	dc18      	bgt.n	80085ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80085bc:	f7ff fdb4 	bl	8008128 <xTaskGetSchedulerState>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d109      	bne.n	80085da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085c6:	4b11      	ldr	r3, [pc, #68]	; (800860c <xTimerGenericCommand+0x98>)
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	f107 0110 	add.w	r1, r7, #16
 80085ce:	2300      	movs	r3, #0
 80085d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d2:	f7fe f9c7 	bl	8006964 <xQueueGenericSend>
 80085d6:	6278      	str	r0, [r7, #36]	; 0x24
 80085d8:	e012      	b.n	8008600 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80085da:	4b0c      	ldr	r3, [pc, #48]	; (800860c <xTimerGenericCommand+0x98>)
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	f107 0110 	add.w	r1, r7, #16
 80085e2:	2300      	movs	r3, #0
 80085e4:	2200      	movs	r2, #0
 80085e6:	f7fe f9bd 	bl	8006964 <xQueueGenericSend>
 80085ea:	6278      	str	r0, [r7, #36]	; 0x24
 80085ec:	e008      	b.n	8008600 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085ee:	4b07      	ldr	r3, [pc, #28]	; (800860c <xTimerGenericCommand+0x98>)
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	f107 0110 	add.w	r1, r7, #16
 80085f6:	2300      	movs	r3, #0
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	f7fe fab1 	bl	8006b60 <xQueueGenericSendFromISR>
 80085fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008602:	4618      	mov	r0, r3
 8008604:	3728      	adds	r7, #40	; 0x28
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20000db0 	.word	0x20000db0

08008610 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b088      	sub	sp, #32
 8008614:	af02      	add	r7, sp, #8
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800861a:	4b22      	ldr	r3, [pc, #136]	; (80086a4 <prvProcessExpiredTimer+0x94>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	3304      	adds	r3, #4
 8008628:	4618      	mov	r0, r3
 800862a:	f7fd ff7d 	bl	8006528 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d022      	beq.n	8008682 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	699a      	ldr	r2, [r3, #24]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	18d1      	adds	r1, r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	6978      	ldr	r0, [r7, #20]
 800864a:	f000 f8d1 	bl	80087f0 <prvInsertTimerInActiveList>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d01f      	beq.n	8008694 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008654:	2300      	movs	r3, #0
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	2300      	movs	r3, #0
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	2100      	movs	r1, #0
 800865e:	6978      	ldr	r0, [r7, #20]
 8008660:	f7ff ff88 	bl	8008574 <xTimerGenericCommand>
 8008664:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d113      	bne.n	8008694 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	60fb      	str	r3, [r7, #12]
}
 800867e:	bf00      	nop
 8008680:	e7fe      	b.n	8008680 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008688:	f023 0301 	bic.w	r3, r3, #1
 800868c:	b2da      	uxtb	r2, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	6978      	ldr	r0, [r7, #20]
 800869a:	4798      	blx	r3
}
 800869c:	bf00      	nop
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	20000da8 	.word	0x20000da8

080086a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086b0:	f107 0308 	add.w	r3, r7, #8
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 f857 	bl	8008768 <prvGetNextExpireTime>
 80086ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	4619      	mov	r1, r3
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f803 	bl	80086cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086c6:	f000 f8d5 	bl	8008874 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086ca:	e7f1      	b.n	80086b0 <prvTimerTask+0x8>

080086cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80086d6:	f7ff f92b 	bl	8007930 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086da:	f107 0308 	add.w	r3, r7, #8
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 f866 	bl	80087b0 <prvSampleTimeNow>
 80086e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d130      	bne.n	800874e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <prvProcessTimerOrBlockTask+0x3c>
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d806      	bhi.n	8008708 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086fa:	f7ff f927 	bl	800794c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086fe:	68f9      	ldr	r1, [r7, #12]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7ff ff85 	bl	8008610 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008706:	e024      	b.n	8008752 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d008      	beq.n	8008720 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800870e:	4b13      	ldr	r3, [pc, #76]	; (800875c <prvProcessTimerOrBlockTask+0x90>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <prvProcessTimerOrBlockTask+0x50>
 8008718:	2301      	movs	r3, #1
 800871a:	e000      	b.n	800871e <prvProcessTimerOrBlockTask+0x52>
 800871c:	2300      	movs	r3, #0
 800871e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008720:	4b0f      	ldr	r3, [pc, #60]	; (8008760 <prvProcessTimerOrBlockTask+0x94>)
 8008722:	6818      	ldr	r0, [r3, #0]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	4619      	mov	r1, r3
 800872e:	f7fe fdf1 	bl	8007314 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008732:	f7ff f90b 	bl	800794c <xTaskResumeAll>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800873c:	4b09      	ldr	r3, [pc, #36]	; (8008764 <prvProcessTimerOrBlockTask+0x98>)
 800873e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	f3bf 8f6f 	isb	sy
}
 800874c:	e001      	b.n	8008752 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800874e:	f7ff f8fd 	bl	800794c <xTaskResumeAll>
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20000dac 	.word	0x20000dac
 8008760:	20000db0 	.word	0x20000db0
 8008764:	e000ed04 	.word	0xe000ed04

08008768 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008770:	4b0e      	ldr	r3, [pc, #56]	; (80087ac <prvGetNextExpireTime+0x44>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <prvGetNextExpireTime+0x16>
 800877a:	2201      	movs	r2, #1
 800877c:	e000      	b.n	8008780 <prvGetNextExpireTime+0x18>
 800877e:	2200      	movs	r2, #0
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d105      	bne.n	8008798 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800878c:	4b07      	ldr	r3, [pc, #28]	; (80087ac <prvGetNextExpireTime+0x44>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	e001      	b.n	800879c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800879c:	68fb      	ldr	r3, [r7, #12]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20000da8 	.word	0x20000da8

080087b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80087b8:	f7ff f966 	bl	8007a88 <xTaskGetTickCount>
 80087bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80087be:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <prvSampleTimeNow+0x3c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d205      	bcs.n	80087d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80087c8:	f000 f936 	bl	8008a38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	e002      	b.n	80087da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80087da:	4a04      	ldr	r2, [pc, #16]	; (80087ec <prvSampleTimeNow+0x3c>)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087e0:	68fb      	ldr	r3, [r7, #12]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20000db8 	.word	0x20000db8

080087f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	429a      	cmp	r2, r3
 8008814:	d812      	bhi.n	800883c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	1ad2      	subs	r2, r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	429a      	cmp	r2, r3
 8008822:	d302      	bcc.n	800882a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008824:	2301      	movs	r3, #1
 8008826:	617b      	str	r3, [r7, #20]
 8008828:	e01b      	b.n	8008862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800882a:	4b10      	ldr	r3, [pc, #64]	; (800886c <prvInsertTimerInActiveList+0x7c>)
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3304      	adds	r3, #4
 8008832:	4619      	mov	r1, r3
 8008834:	4610      	mov	r0, r2
 8008836:	f7fd fe3e 	bl	80064b6 <vListInsert>
 800883a:	e012      	b.n	8008862 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	429a      	cmp	r2, r3
 8008842:	d206      	bcs.n	8008852 <prvInsertTimerInActiveList+0x62>
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	429a      	cmp	r2, r3
 800884a:	d302      	bcc.n	8008852 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800884c:	2301      	movs	r3, #1
 800884e:	617b      	str	r3, [r7, #20]
 8008850:	e007      	b.n	8008862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008852:	4b07      	ldr	r3, [pc, #28]	; (8008870 <prvInsertTimerInActiveList+0x80>)
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3304      	adds	r3, #4
 800885a:	4619      	mov	r1, r3
 800885c:	4610      	mov	r0, r2
 800885e:	f7fd fe2a 	bl	80064b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008862:	697b      	ldr	r3, [r7, #20]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20000dac 	.word	0x20000dac
 8008870:	20000da8 	.word	0x20000da8

08008874 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b08e      	sub	sp, #56	; 0x38
 8008878:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800887a:	e0ca      	b.n	8008a12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	da18      	bge.n	80088b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008882:	1d3b      	adds	r3, r7, #4
 8008884:	3304      	adds	r3, #4
 8008886:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10a      	bne.n	80088a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	61fb      	str	r3, [r7, #28]
}
 80088a0:	bf00      	nop
 80088a2:	e7fe      	b.n	80088a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088aa:	6850      	ldr	r0, [r2, #4]
 80088ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ae:	6892      	ldr	r2, [r2, #8]
 80088b0:	4611      	mov	r1, r2
 80088b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f2c0 80aa 	blt.w	8008a10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	3304      	adds	r3, #4
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fd fe2b 	bl	8006528 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088d2:	463b      	mov	r3, r7
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7ff ff6b 	bl	80087b0 <prvSampleTimeNow>
 80088da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b09      	cmp	r3, #9
 80088e0:	f200 8097 	bhi.w	8008a12 <prvProcessReceivedCommands+0x19e>
 80088e4:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <prvProcessReceivedCommands+0x78>)
 80088e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ea:	bf00      	nop
 80088ec:	08008915 	.word	0x08008915
 80088f0:	08008915 	.word	0x08008915
 80088f4:	08008915 	.word	0x08008915
 80088f8:	08008989 	.word	0x08008989
 80088fc:	0800899d 	.word	0x0800899d
 8008900:	080089e7 	.word	0x080089e7
 8008904:	08008915 	.word	0x08008915
 8008908:	08008915 	.word	0x08008915
 800890c:	08008989 	.word	0x08008989
 8008910:	0800899d 	.word	0x0800899d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800891a:	f043 0301 	orr.w	r3, r3, #1
 800891e:	b2da      	uxtb	r2, r3
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	18d1      	adds	r1, r2, r3
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008934:	f7ff ff5c 	bl	80087f0 <prvInsertTimerInActiveList>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d069      	beq.n	8008a12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800893e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008944:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	d05e      	beq.n	8008a12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	441a      	add	r2, r3
 800895c:	2300      	movs	r3, #0
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	2300      	movs	r3, #0
 8008962:	2100      	movs	r1, #0
 8008964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008966:	f7ff fe05 	bl	8008574 <xTimerGenericCommand>
 800896a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d14f      	bne.n	8008a12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	61bb      	str	r3, [r7, #24]
}
 8008984:	bf00      	nop
 8008986:	e7fe      	b.n	8008986 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800898e:	f023 0301 	bic.w	r3, r3, #1
 8008992:	b2da      	uxtb	r2, r3
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800899a:	e03a      	b.n	8008a12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089a2:	f043 0301 	orr.w	r3, r3, #1
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	617b      	str	r3, [r7, #20]
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	699a      	ldr	r2, [r3, #24]
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	18d1      	adds	r1, r2, r3
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089e0:	f7ff ff06 	bl	80087f0 <prvInsertTimerInActiveList>
					break;
 80089e4:	e015      	b.n	8008a12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d103      	bne.n	80089fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80089f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089f6:	f000 fbdb 	bl	80091b0 <vPortFree>
 80089fa:	e00a      	b.n	8008a12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a02:	f023 0301 	bic.w	r3, r3, #1
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a0e:	e000      	b.n	8008a12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008a10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a12:	4b08      	ldr	r3, [pc, #32]	; (8008a34 <prvProcessReceivedCommands+0x1c0>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	1d39      	adds	r1, r7, #4
 8008a18:	2200      	movs	r2, #0
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe f93c 	bl	8006c98 <xQueueReceive>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f47f af2a 	bne.w	800887c <prvProcessReceivedCommands+0x8>
	}
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	3730      	adds	r7, #48	; 0x30
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	20000db0 	.word	0x20000db0

08008a38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a3e:	e048      	b.n	8008ad2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a40:	4b2d      	ldr	r3, [pc, #180]	; (8008af8 <prvSwitchTimerLists+0xc0>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a4a:	4b2b      	ldr	r3, [pc, #172]	; (8008af8 <prvSwitchTimerLists+0xc0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3304      	adds	r3, #4
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fd fd65 	bl	8006528 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d02e      	beq.n	8008ad2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d90e      	bls.n	8008aa4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a92:	4b19      	ldr	r3, [pc, #100]	; (8008af8 <prvSwitchTimerLists+0xc0>)
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f7fd fd0a 	bl	80064b6 <vListInsert>
 8008aa2:	e016      	b.n	8008ad2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	2100      	movs	r1, #0
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f7ff fd60 	bl	8008574 <xTimerGenericCommand>
 8008ab4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10a      	bne.n	8008ad2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	603b      	str	r3, [r7, #0]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ad2:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <prvSwitchTimerLists+0xc0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1b1      	bne.n	8008a40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008adc:	4b06      	ldr	r3, [pc, #24]	; (8008af8 <prvSwitchTimerLists+0xc0>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ae2:	4b06      	ldr	r3, [pc, #24]	; (8008afc <prvSwitchTimerLists+0xc4>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a04      	ldr	r2, [pc, #16]	; (8008af8 <prvSwitchTimerLists+0xc0>)
 8008ae8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008aea:	4a04      	ldr	r2, [pc, #16]	; (8008afc <prvSwitchTimerLists+0xc4>)
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	6013      	str	r3, [r2, #0]
}
 8008af0:	bf00      	nop
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20000da8 	.word	0x20000da8
 8008afc:	20000dac 	.word	0x20000dac

08008b00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b06:	f000 f965 	bl	8008dd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b0a:	4b15      	ldr	r3, [pc, #84]	; (8008b60 <prvCheckForValidListAndQueue+0x60>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d120      	bne.n	8008b54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b12:	4814      	ldr	r0, [pc, #80]	; (8008b64 <prvCheckForValidListAndQueue+0x64>)
 8008b14:	f7fd fc7e 	bl	8006414 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b18:	4813      	ldr	r0, [pc, #76]	; (8008b68 <prvCheckForValidListAndQueue+0x68>)
 8008b1a:	f7fd fc7b 	bl	8006414 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b1e:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <prvCheckForValidListAndQueue+0x6c>)
 8008b20:	4a10      	ldr	r2, [pc, #64]	; (8008b64 <prvCheckForValidListAndQueue+0x64>)
 8008b22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b24:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <prvCheckForValidListAndQueue+0x70>)
 8008b26:	4a10      	ldr	r2, [pc, #64]	; (8008b68 <prvCheckForValidListAndQueue+0x68>)
 8008b28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	4b11      	ldr	r3, [pc, #68]	; (8008b74 <prvCheckForValidListAndQueue+0x74>)
 8008b30:	4a11      	ldr	r2, [pc, #68]	; (8008b78 <prvCheckForValidListAndQueue+0x78>)
 8008b32:	2110      	movs	r1, #16
 8008b34:	200a      	movs	r0, #10
 8008b36:	f7fd fd89 	bl	800664c <xQueueGenericCreateStatic>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	4a08      	ldr	r2, [pc, #32]	; (8008b60 <prvCheckForValidListAndQueue+0x60>)
 8008b3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b40:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <prvCheckForValidListAndQueue+0x60>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d005      	beq.n	8008b54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b48:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <prvCheckForValidListAndQueue+0x60>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	490b      	ldr	r1, [pc, #44]	; (8008b7c <prvCheckForValidListAndQueue+0x7c>)
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe fbb6 	bl	80072c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b54:	f000 f96e 	bl	8008e34 <vPortExitCritical>
}
 8008b58:	bf00      	nop
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20000db0 	.word	0x20000db0
 8008b64:	20000d80 	.word	0x20000d80
 8008b68:	20000d94 	.word	0x20000d94
 8008b6c:	20000da8 	.word	0x20000da8
 8008b70:	20000dac 	.word	0x20000dac
 8008b74:	20000e5c 	.word	0x20000e5c
 8008b78:	20000dbc 	.word	0x20000dbc
 8008b7c:	0800b4c4 	.word	0x0800b4c4

08008b80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3b04      	subs	r3, #4
 8008b90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3b04      	subs	r3, #4
 8008b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f023 0201 	bic.w	r2, r3, #1
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3b04      	subs	r3, #4
 8008bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bb0:	4a0c      	ldr	r2, [pc, #48]	; (8008be4 <pxPortInitialiseStack+0x64>)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3b14      	subs	r3, #20
 8008bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3b04      	subs	r3, #4
 8008bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f06f 0202 	mvn.w	r2, #2
 8008bce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3b20      	subs	r3, #32
 8008bd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	08008be9 	.word	0x08008be9

08008be8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008bf2:	4b12      	ldr	r3, [pc, #72]	; (8008c3c <prvTaskExitError+0x54>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfa:	d00a      	beq.n	8008c12 <prvTaskExitError+0x2a>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	60fb      	str	r3, [r7, #12]
}
 8008c0e:	bf00      	nop
 8008c10:	e7fe      	b.n	8008c10 <prvTaskExitError+0x28>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	60bb      	str	r3, [r7, #8]
}
 8008c24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c26:	bf00      	nop
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0fc      	beq.n	8008c28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c2e:	bf00      	nop
 8008c30:	bf00      	nop
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	20000040 	.word	0x20000040

08008c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c40:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <pxCurrentTCBConst2>)
 8008c42:	6819      	ldr	r1, [r3, #0]
 8008c44:	6808      	ldr	r0, [r1, #0]
 8008c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4a:	f380 8809 	msr	PSP, r0
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f04f 0000 	mov.w	r0, #0
 8008c56:	f380 8811 	msr	BASEPRI, r0
 8008c5a:	4770      	bx	lr
 8008c5c:	f3af 8000 	nop.w

08008c60 <pxCurrentTCBConst2>:
 8008c60:	20000880 	.word	0x20000880
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop

08008c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c68:	4808      	ldr	r0, [pc, #32]	; (8008c8c <prvPortStartFirstTask+0x24>)
 8008c6a:	6800      	ldr	r0, [r0, #0]
 8008c6c:	6800      	ldr	r0, [r0, #0]
 8008c6e:	f380 8808 	msr	MSP, r0
 8008c72:	f04f 0000 	mov.w	r0, #0
 8008c76:	f380 8814 	msr	CONTROL, r0
 8008c7a:	b662      	cpsie	i
 8008c7c:	b661      	cpsie	f
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	df00      	svc	0
 8008c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c8a:	bf00      	nop
 8008c8c:	e000ed08 	.word	0xe000ed08

08008c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c96:	4b46      	ldr	r3, [pc, #280]	; (8008db0 <xPortStartScheduler+0x120>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a46      	ldr	r2, [pc, #280]	; (8008db4 <xPortStartScheduler+0x124>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d10a      	bne.n	8008cb6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	613b      	str	r3, [r7, #16]
}
 8008cb2:	bf00      	nop
 8008cb4:	e7fe      	b.n	8008cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008cb6:	4b3e      	ldr	r3, [pc, #248]	; (8008db0 <xPortStartScheduler+0x120>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a3f      	ldr	r2, [pc, #252]	; (8008db8 <xPortStartScheduler+0x128>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d10a      	bne.n	8008cd6 <xPortStartScheduler+0x46>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	60fb      	str	r3, [r7, #12]
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008cd6:	4b39      	ldr	r3, [pc, #228]	; (8008dbc <xPortStartScheduler+0x12c>)
 8008cd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	22ff      	movs	r2, #255	; 0xff
 8008ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	4b31      	ldr	r3, [pc, #196]	; (8008dc0 <xPortStartScheduler+0x130>)
 8008cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cfe:	4b31      	ldr	r3, [pc, #196]	; (8008dc4 <xPortStartScheduler+0x134>)
 8008d00:	2207      	movs	r2, #7
 8008d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d04:	e009      	b.n	8008d1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d06:	4b2f      	ldr	r3, [pc, #188]	; (8008dc4 <xPortStartScheduler+0x134>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	4a2d      	ldr	r2, [pc, #180]	; (8008dc4 <xPortStartScheduler+0x134>)
 8008d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d10:	78fb      	ldrb	r3, [r7, #3]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d1a:	78fb      	ldrb	r3, [r7, #3]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d22:	2b80      	cmp	r3, #128	; 0x80
 8008d24:	d0ef      	beq.n	8008d06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d26:	4b27      	ldr	r3, [pc, #156]	; (8008dc4 <xPortStartScheduler+0x134>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f1c3 0307 	rsb	r3, r3, #7
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d00a      	beq.n	8008d48 <xPortStartScheduler+0xb8>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	60bb      	str	r3, [r7, #8]
}
 8008d44:	bf00      	nop
 8008d46:	e7fe      	b.n	8008d46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d48:	4b1e      	ldr	r3, [pc, #120]	; (8008dc4 <xPortStartScheduler+0x134>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	021b      	lsls	r3, r3, #8
 8008d4e:	4a1d      	ldr	r2, [pc, #116]	; (8008dc4 <xPortStartScheduler+0x134>)
 8008d50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d52:	4b1c      	ldr	r3, [pc, #112]	; (8008dc4 <xPortStartScheduler+0x134>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d5a:	4a1a      	ldr	r2, [pc, #104]	; (8008dc4 <xPortStartScheduler+0x134>)
 8008d5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d66:	4b18      	ldr	r3, [pc, #96]	; (8008dc8 <xPortStartScheduler+0x138>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a17      	ldr	r2, [pc, #92]	; (8008dc8 <xPortStartScheduler+0x138>)
 8008d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d72:	4b15      	ldr	r3, [pc, #84]	; (8008dc8 <xPortStartScheduler+0x138>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a14      	ldr	r2, [pc, #80]	; (8008dc8 <xPortStartScheduler+0x138>)
 8008d78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d7e:	f000 f8dd 	bl	8008f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d82:	4b12      	ldr	r3, [pc, #72]	; (8008dcc <xPortStartScheduler+0x13c>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d88:	f000 f8fc 	bl	8008f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d8c:	4b10      	ldr	r3, [pc, #64]	; (8008dd0 <xPortStartScheduler+0x140>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a0f      	ldr	r2, [pc, #60]	; (8008dd0 <xPortStartScheduler+0x140>)
 8008d92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d98:	f7ff ff66 	bl	8008c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d9c:	f7fe ff3e 	bl	8007c1c <vTaskSwitchContext>
	prvTaskExitError();
 8008da0:	f7ff ff22 	bl	8008be8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	e000ed00 	.word	0xe000ed00
 8008db4:	410fc271 	.word	0x410fc271
 8008db8:	410fc270 	.word	0x410fc270
 8008dbc:	e000e400 	.word	0xe000e400
 8008dc0:	20000eac 	.word	0x20000eac
 8008dc4:	20000eb0 	.word	0x20000eb0
 8008dc8:	e000ed20 	.word	0xe000ed20
 8008dcc:	20000040 	.word	0x20000040
 8008dd0:	e000ef34 	.word	0xe000ef34

08008dd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	607b      	str	r3, [r7, #4]
}
 8008dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008dee:	4b0f      	ldr	r3, [pc, #60]	; (8008e2c <vPortEnterCritical+0x58>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3301      	adds	r3, #1
 8008df4:	4a0d      	ldr	r2, [pc, #52]	; (8008e2c <vPortEnterCritical+0x58>)
 8008df6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008df8:	4b0c      	ldr	r3, [pc, #48]	; (8008e2c <vPortEnterCritical+0x58>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d10f      	bne.n	8008e20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e00:	4b0b      	ldr	r3, [pc, #44]	; (8008e30 <vPortEnterCritical+0x5c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00a      	beq.n	8008e20 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	603b      	str	r3, [r7, #0]
}
 8008e1c:	bf00      	nop
 8008e1e:	e7fe      	b.n	8008e1e <vPortEnterCritical+0x4a>
	}
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	20000040 	.word	0x20000040
 8008e30:	e000ed04 	.word	0xe000ed04

08008e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e3a:	4b12      	ldr	r3, [pc, #72]	; (8008e84 <vPortExitCritical+0x50>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10a      	bne.n	8008e58 <vPortExitCritical+0x24>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	607b      	str	r3, [r7, #4]
}
 8008e54:	bf00      	nop
 8008e56:	e7fe      	b.n	8008e56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e58:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <vPortExitCritical+0x50>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	4a09      	ldr	r2, [pc, #36]	; (8008e84 <vPortExitCritical+0x50>)
 8008e60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e62:	4b08      	ldr	r3, [pc, #32]	; (8008e84 <vPortExitCritical+0x50>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d105      	bne.n	8008e76 <vPortExitCritical+0x42>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	f383 8811 	msr	BASEPRI, r3
}
 8008e74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000040 	.word	0x20000040
	...

08008e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e90:	f3ef 8009 	mrs	r0, PSP
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	4b15      	ldr	r3, [pc, #84]	; (8008ef0 <pxCurrentTCBConst>)
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	f01e 0f10 	tst.w	lr, #16
 8008ea0:	bf08      	it	eq
 8008ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eaa:	6010      	str	r0, [r2, #0]
 8008eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008eb4:	f380 8811 	msr	BASEPRI, r0
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f7fe feac 	bl	8007c1c <vTaskSwitchContext>
 8008ec4:	f04f 0000 	mov.w	r0, #0
 8008ec8:	f380 8811 	msr	BASEPRI, r0
 8008ecc:	bc09      	pop	{r0, r3}
 8008ece:	6819      	ldr	r1, [r3, #0]
 8008ed0:	6808      	ldr	r0, [r1, #0]
 8008ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed6:	f01e 0f10 	tst.w	lr, #16
 8008eda:	bf08      	it	eq
 8008edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ee0:	f380 8809 	msr	PSP, r0
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	f3af 8000 	nop.w

08008ef0 <pxCurrentTCBConst>:
 8008ef0:	20000880 	.word	0x20000880
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop

08008ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	607b      	str	r3, [r7, #4]
}
 8008f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f12:	f7fe fdc9 	bl	8007aa8 <xTaskIncrementTick>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d003      	beq.n	8008f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f1c:	4b06      	ldr	r3, [pc, #24]	; (8008f38 <xPortSysTickHandler+0x40>)
 8008f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	2300      	movs	r3, #0
 8008f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	f383 8811 	msr	BASEPRI, r3
}
 8008f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	e000ed04 	.word	0xe000ed04

08008f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f40:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <vPortSetupTimerInterrupt+0x34>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f46:	4b0b      	ldr	r3, [pc, #44]	; (8008f74 <vPortSetupTimerInterrupt+0x38>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f4c:	4b0a      	ldr	r3, [pc, #40]	; (8008f78 <vPortSetupTimerInterrupt+0x3c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a0a      	ldr	r2, [pc, #40]	; (8008f7c <vPortSetupTimerInterrupt+0x40>)
 8008f52:	fba2 2303 	umull	r2, r3, r2, r3
 8008f56:	099b      	lsrs	r3, r3, #6
 8008f58:	4a09      	ldr	r2, [pc, #36]	; (8008f80 <vPortSetupTimerInterrupt+0x44>)
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f5e:	4b04      	ldr	r3, [pc, #16]	; (8008f70 <vPortSetupTimerInterrupt+0x34>)
 8008f60:	2207      	movs	r2, #7
 8008f62:	601a      	str	r2, [r3, #0]
}
 8008f64:	bf00      	nop
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	e000e010 	.word	0xe000e010
 8008f74:	e000e018 	.word	0xe000e018
 8008f78:	20000034 	.word	0x20000034
 8008f7c:	10624dd3 	.word	0x10624dd3
 8008f80:	e000e014 	.word	0xe000e014

08008f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f94 <vPortEnableVFP+0x10>
 8008f88:	6801      	ldr	r1, [r0, #0]
 8008f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f8e:	6001      	str	r1, [r0, #0]
 8008f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f92:	bf00      	nop
 8008f94:	e000ed88 	.word	0xe000ed88

08008f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f9e:	f3ef 8305 	mrs	r3, IPSR
 8008fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b0f      	cmp	r3, #15
 8008fa8:	d914      	bls.n	8008fd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008faa:	4a17      	ldr	r2, [pc, #92]	; (8009008 <vPortValidateInterruptPriority+0x70>)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	4413      	add	r3, r2
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fb4:	4b15      	ldr	r3, [pc, #84]	; (800900c <vPortValidateInterruptPriority+0x74>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	7afa      	ldrb	r2, [r7, #11]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d20a      	bcs.n	8008fd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	607b      	str	r3, [r7, #4]
}
 8008fd0:	bf00      	nop
 8008fd2:	e7fe      	b.n	8008fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fd4:	4b0e      	ldr	r3, [pc, #56]	; (8009010 <vPortValidateInterruptPriority+0x78>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008fdc:	4b0d      	ldr	r3, [pc, #52]	; (8009014 <vPortValidateInterruptPriority+0x7c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d90a      	bls.n	8008ffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	603b      	str	r3, [r7, #0]
}
 8008ff6:	bf00      	nop
 8008ff8:	e7fe      	b.n	8008ff8 <vPortValidateInterruptPriority+0x60>
	}
 8008ffa:	bf00      	nop
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	e000e3f0 	.word	0xe000e3f0
 800900c:	20000eac 	.word	0x20000eac
 8009010:	e000ed0c 	.word	0xe000ed0c
 8009014:	20000eb0 	.word	0x20000eb0

08009018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08a      	sub	sp, #40	; 0x28
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009020:	2300      	movs	r3, #0
 8009022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009024:	f7fe fc84 	bl	8007930 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009028:	4b5b      	ldr	r3, [pc, #364]	; (8009198 <pvPortMalloc+0x180>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009030:	f000 f920 	bl	8009274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009034:	4b59      	ldr	r3, [pc, #356]	; (800919c <pvPortMalloc+0x184>)
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4013      	ands	r3, r2
 800903c:	2b00      	cmp	r3, #0
 800903e:	f040 8093 	bne.w	8009168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d01d      	beq.n	8009084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009048:	2208      	movs	r2, #8
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4413      	add	r3, r2
 800904e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	2b00      	cmp	r3, #0
 8009058:	d014      	beq.n	8009084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f023 0307 	bic.w	r3, r3, #7
 8009060:	3308      	adds	r3, #8
 8009062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <pvPortMalloc+0x6c>
	__asm volatile
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	617b      	str	r3, [r7, #20]
}
 8009080:	bf00      	nop
 8009082:	e7fe      	b.n	8009082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d06e      	beq.n	8009168 <pvPortMalloc+0x150>
 800908a:	4b45      	ldr	r3, [pc, #276]	; (80091a0 <pvPortMalloc+0x188>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	429a      	cmp	r2, r3
 8009092:	d869      	bhi.n	8009168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009094:	4b43      	ldr	r3, [pc, #268]	; (80091a4 <pvPortMalloc+0x18c>)
 8009096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009098:	4b42      	ldr	r3, [pc, #264]	; (80091a4 <pvPortMalloc+0x18c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800909e:	e004      	b.n	80090aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d903      	bls.n	80090bc <pvPortMalloc+0xa4>
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1f1      	bne.n	80090a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090bc:	4b36      	ldr	r3, [pc, #216]	; (8009198 <pvPortMalloc+0x180>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d050      	beq.n	8009168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2208      	movs	r2, #8
 80090cc:	4413      	add	r3, r2
 80090ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	1ad2      	subs	r2, r2, r3
 80090e0:	2308      	movs	r3, #8
 80090e2:	005b      	lsls	r3, r3, #1
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d91f      	bls.n	8009128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4413      	add	r3, r2
 80090ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	f003 0307 	and.w	r3, r3, #7
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00a      	beq.n	8009110 <pvPortMalloc+0xf8>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	613b      	str	r3, [r7, #16]
}
 800910c:	bf00      	nop
 800910e:	e7fe      	b.n	800910e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	685a      	ldr	r2, [r3, #4]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	1ad2      	subs	r2, r2, r3
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009122:	69b8      	ldr	r0, [r7, #24]
 8009124:	f000 f908 	bl	8009338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009128:	4b1d      	ldr	r3, [pc, #116]	; (80091a0 <pvPortMalloc+0x188>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	4a1b      	ldr	r2, [pc, #108]	; (80091a0 <pvPortMalloc+0x188>)
 8009134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009136:	4b1a      	ldr	r3, [pc, #104]	; (80091a0 <pvPortMalloc+0x188>)
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <pvPortMalloc+0x190>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	429a      	cmp	r2, r3
 8009140:	d203      	bcs.n	800914a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009142:	4b17      	ldr	r3, [pc, #92]	; (80091a0 <pvPortMalloc+0x188>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a18      	ldr	r2, [pc, #96]	; (80091a8 <pvPortMalloc+0x190>)
 8009148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	4b13      	ldr	r3, [pc, #76]	; (800919c <pvPortMalloc+0x184>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	431a      	orrs	r2, r3
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800915e:	4b13      	ldr	r3, [pc, #76]	; (80091ac <pvPortMalloc+0x194>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	4a11      	ldr	r2, [pc, #68]	; (80091ac <pvPortMalloc+0x194>)
 8009166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009168:	f7fe fbf0 	bl	800794c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	f003 0307 	and.w	r3, r3, #7
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00a      	beq.n	800918c <pvPortMalloc+0x174>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	60fb      	str	r3, [r7, #12]
}
 8009188:	bf00      	nop
 800918a:	e7fe      	b.n	800918a <pvPortMalloc+0x172>
	return pvReturn;
 800918c:	69fb      	ldr	r3, [r7, #28]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3728      	adds	r7, #40	; 0x28
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	20001a74 	.word	0x20001a74
 800919c:	20001a88 	.word	0x20001a88
 80091a0:	20001a78 	.word	0x20001a78
 80091a4:	20001a6c 	.word	0x20001a6c
 80091a8:	20001a7c 	.word	0x20001a7c
 80091ac:	20001a80 	.word	0x20001a80

080091b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d04d      	beq.n	800925e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091c2:	2308      	movs	r3, #8
 80091c4:	425b      	negs	r3, r3
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	4413      	add	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	4b24      	ldr	r3, [pc, #144]	; (8009268 <vPortFree+0xb8>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4013      	ands	r3, r2
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10a      	bne.n	80091f4 <vPortFree+0x44>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	60fb      	str	r3, [r7, #12]
}
 80091f0:	bf00      	nop
 80091f2:	e7fe      	b.n	80091f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00a      	beq.n	8009212 <vPortFree+0x62>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	60bb      	str	r3, [r7, #8]
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <vPortFree+0xb8>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4013      	ands	r3, r2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01e      	beq.n	800925e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d11a      	bne.n	800925e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	4b0e      	ldr	r3, [pc, #56]	; (8009268 <vPortFree+0xb8>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	43db      	mvns	r3, r3
 8009232:	401a      	ands	r2, r3
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009238:	f7fe fb7a 	bl	8007930 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	4b0a      	ldr	r3, [pc, #40]	; (800926c <vPortFree+0xbc>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4413      	add	r3, r2
 8009246:	4a09      	ldr	r2, [pc, #36]	; (800926c <vPortFree+0xbc>)
 8009248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800924a:	6938      	ldr	r0, [r7, #16]
 800924c:	f000 f874 	bl	8009338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009250:	4b07      	ldr	r3, [pc, #28]	; (8009270 <vPortFree+0xc0>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3301      	adds	r3, #1
 8009256:	4a06      	ldr	r2, [pc, #24]	; (8009270 <vPortFree+0xc0>)
 8009258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800925a:	f7fe fb77 	bl	800794c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800925e:	bf00      	nop
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20001a88 	.word	0x20001a88
 800926c:	20001a78 	.word	0x20001a78
 8009270:	20001a84 	.word	0x20001a84

08009274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800927a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800927e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009280:	4b27      	ldr	r3, [pc, #156]	; (8009320 <prvHeapInit+0xac>)
 8009282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00c      	beq.n	80092a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3307      	adds	r3, #7
 8009292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f023 0307 	bic.w	r3, r3, #7
 800929a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	4a1f      	ldr	r2, [pc, #124]	; (8009320 <prvHeapInit+0xac>)
 80092a4:	4413      	add	r3, r2
 80092a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092ac:	4a1d      	ldr	r2, [pc, #116]	; (8009324 <prvHeapInit+0xb0>)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092b2:	4b1c      	ldr	r3, [pc, #112]	; (8009324 <prvHeapInit+0xb0>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	4413      	add	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092c0:	2208      	movs	r2, #8
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	1a9b      	subs	r3, r3, r2
 80092c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f023 0307 	bic.w	r3, r3, #7
 80092ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4a15      	ldr	r2, [pc, #84]	; (8009328 <prvHeapInit+0xb4>)
 80092d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092d6:	4b14      	ldr	r3, [pc, #80]	; (8009328 <prvHeapInit+0xb4>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2200      	movs	r2, #0
 80092dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092de:	4b12      	ldr	r3, [pc, #72]	; (8009328 <prvHeapInit+0xb4>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	1ad2      	subs	r2, r2, r3
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092f4:	4b0c      	ldr	r3, [pc, #48]	; (8009328 <prvHeapInit+0xb4>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	4a0a      	ldr	r2, [pc, #40]	; (800932c <prvHeapInit+0xb8>)
 8009302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	4a09      	ldr	r2, [pc, #36]	; (8009330 <prvHeapInit+0xbc>)
 800930a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800930c:	4b09      	ldr	r3, [pc, #36]	; (8009334 <prvHeapInit+0xc0>)
 800930e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009312:	601a      	str	r2, [r3, #0]
}
 8009314:	bf00      	nop
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	20000eb4 	.word	0x20000eb4
 8009324:	20001a6c 	.word	0x20001a6c
 8009328:	20001a74 	.word	0x20001a74
 800932c:	20001a7c 	.word	0x20001a7c
 8009330:	20001a78 	.word	0x20001a78
 8009334:	20001a88 	.word	0x20001a88

08009338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009340:	4b28      	ldr	r3, [pc, #160]	; (80093e4 <prvInsertBlockIntoFreeList+0xac>)
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	e002      	b.n	800934c <prvInsertBlockIntoFreeList+0x14>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	429a      	cmp	r2, r3
 8009354:	d8f7      	bhi.n	8009346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	4413      	add	r3, r2
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	429a      	cmp	r2, r3
 8009366:	d108      	bne.n	800937a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	441a      	add	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	441a      	add	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	429a      	cmp	r2, r3
 800938c:	d118      	bne.n	80093c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	4b15      	ldr	r3, [pc, #84]	; (80093e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	429a      	cmp	r2, r3
 8009398:	d00d      	beq.n	80093b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	441a      	add	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	e008      	b.n	80093c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093b6:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <prvInsertBlockIntoFreeList+0xb0>)
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	e003      	b.n	80093c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d002      	beq.n	80093d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093d6:	bf00      	nop
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	20001a6c 	.word	0x20001a6c
 80093e8:	20001a74 	.word	0x20001a74

080093ec <__errno>:
 80093ec:	4b01      	ldr	r3, [pc, #4]	; (80093f4 <__errno+0x8>)
 80093ee:	6818      	ldr	r0, [r3, #0]
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	20000044 	.word	0x20000044

080093f8 <__libc_init_array>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	4d0d      	ldr	r5, [pc, #52]	; (8009430 <__libc_init_array+0x38>)
 80093fc:	4c0d      	ldr	r4, [pc, #52]	; (8009434 <__libc_init_array+0x3c>)
 80093fe:	1b64      	subs	r4, r4, r5
 8009400:	10a4      	asrs	r4, r4, #2
 8009402:	2600      	movs	r6, #0
 8009404:	42a6      	cmp	r6, r4
 8009406:	d109      	bne.n	800941c <__libc_init_array+0x24>
 8009408:	4d0b      	ldr	r5, [pc, #44]	; (8009438 <__libc_init_array+0x40>)
 800940a:	4c0c      	ldr	r4, [pc, #48]	; (800943c <__libc_init_array+0x44>)
 800940c:	f002 f822 	bl	800b454 <_init>
 8009410:	1b64      	subs	r4, r4, r5
 8009412:	10a4      	asrs	r4, r4, #2
 8009414:	2600      	movs	r6, #0
 8009416:	42a6      	cmp	r6, r4
 8009418:	d105      	bne.n	8009426 <__libc_init_array+0x2e>
 800941a:	bd70      	pop	{r4, r5, r6, pc}
 800941c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009420:	4798      	blx	r3
 8009422:	3601      	adds	r6, #1
 8009424:	e7ee      	b.n	8009404 <__libc_init_array+0xc>
 8009426:	f855 3b04 	ldr.w	r3, [r5], #4
 800942a:	4798      	blx	r3
 800942c:	3601      	adds	r6, #1
 800942e:	e7f2      	b.n	8009416 <__libc_init_array+0x1e>
 8009430:	0800b800 	.word	0x0800b800
 8009434:	0800b800 	.word	0x0800b800
 8009438:	0800b800 	.word	0x0800b800
 800943c:	0800b804 	.word	0x0800b804

08009440 <__retarget_lock_acquire_recursive>:
 8009440:	4770      	bx	lr

08009442 <__retarget_lock_release_recursive>:
 8009442:	4770      	bx	lr

08009444 <memcpy>:
 8009444:	440a      	add	r2, r1
 8009446:	4291      	cmp	r1, r2
 8009448:	f100 33ff 	add.w	r3, r0, #4294967295
 800944c:	d100      	bne.n	8009450 <memcpy+0xc>
 800944e:	4770      	bx	lr
 8009450:	b510      	push	{r4, lr}
 8009452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800945a:	4291      	cmp	r1, r2
 800945c:	d1f9      	bne.n	8009452 <memcpy+0xe>
 800945e:	bd10      	pop	{r4, pc}

08009460 <memset>:
 8009460:	4402      	add	r2, r0
 8009462:	4603      	mov	r3, r0
 8009464:	4293      	cmp	r3, r2
 8009466:	d100      	bne.n	800946a <memset+0xa>
 8009468:	4770      	bx	lr
 800946a:	f803 1b01 	strb.w	r1, [r3], #1
 800946e:	e7f9      	b.n	8009464 <memset+0x4>

08009470 <cleanup_glue>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	460c      	mov	r4, r1
 8009474:	6809      	ldr	r1, [r1, #0]
 8009476:	4605      	mov	r5, r0
 8009478:	b109      	cbz	r1, 800947e <cleanup_glue+0xe>
 800947a:	f7ff fff9 	bl	8009470 <cleanup_glue>
 800947e:	4621      	mov	r1, r4
 8009480:	4628      	mov	r0, r5
 8009482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009486:	f000 b869 	b.w	800955c <_free_r>
	...

0800948c <_reclaim_reent>:
 800948c:	4b2c      	ldr	r3, [pc, #176]	; (8009540 <_reclaim_reent+0xb4>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4283      	cmp	r3, r0
 8009492:	b570      	push	{r4, r5, r6, lr}
 8009494:	4604      	mov	r4, r0
 8009496:	d051      	beq.n	800953c <_reclaim_reent+0xb0>
 8009498:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800949a:	b143      	cbz	r3, 80094ae <_reclaim_reent+0x22>
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d14a      	bne.n	8009538 <_reclaim_reent+0xac>
 80094a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094a4:	6819      	ldr	r1, [r3, #0]
 80094a6:	b111      	cbz	r1, 80094ae <_reclaim_reent+0x22>
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 f857 	bl	800955c <_free_r>
 80094ae:	6961      	ldr	r1, [r4, #20]
 80094b0:	b111      	cbz	r1, 80094b8 <_reclaim_reent+0x2c>
 80094b2:	4620      	mov	r0, r4
 80094b4:	f000 f852 	bl	800955c <_free_r>
 80094b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80094ba:	b111      	cbz	r1, 80094c2 <_reclaim_reent+0x36>
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 f84d 	bl	800955c <_free_r>
 80094c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80094c4:	b111      	cbz	r1, 80094cc <_reclaim_reent+0x40>
 80094c6:	4620      	mov	r0, r4
 80094c8:	f000 f848 	bl	800955c <_free_r>
 80094cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80094ce:	b111      	cbz	r1, 80094d6 <_reclaim_reent+0x4a>
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 f843 	bl	800955c <_free_r>
 80094d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80094d8:	b111      	cbz	r1, 80094e0 <_reclaim_reent+0x54>
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 f83e 	bl	800955c <_free_r>
 80094e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80094e2:	b111      	cbz	r1, 80094ea <_reclaim_reent+0x5e>
 80094e4:	4620      	mov	r0, r4
 80094e6:	f000 f839 	bl	800955c <_free_r>
 80094ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80094ec:	b111      	cbz	r1, 80094f4 <_reclaim_reent+0x68>
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 f834 	bl	800955c <_free_r>
 80094f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094f6:	b111      	cbz	r1, 80094fe <_reclaim_reent+0x72>
 80094f8:	4620      	mov	r0, r4
 80094fa:	f000 f82f 	bl	800955c <_free_r>
 80094fe:	69a3      	ldr	r3, [r4, #24]
 8009500:	b1e3      	cbz	r3, 800953c <_reclaim_reent+0xb0>
 8009502:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009504:	4620      	mov	r0, r4
 8009506:	4798      	blx	r3
 8009508:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800950a:	b1b9      	cbz	r1, 800953c <_reclaim_reent+0xb0>
 800950c:	4620      	mov	r0, r4
 800950e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009512:	f7ff bfad 	b.w	8009470 <cleanup_glue>
 8009516:	5949      	ldr	r1, [r1, r5]
 8009518:	b941      	cbnz	r1, 800952c <_reclaim_reent+0xa0>
 800951a:	3504      	adds	r5, #4
 800951c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800951e:	2d80      	cmp	r5, #128	; 0x80
 8009520:	68d9      	ldr	r1, [r3, #12]
 8009522:	d1f8      	bne.n	8009516 <_reclaim_reent+0x8a>
 8009524:	4620      	mov	r0, r4
 8009526:	f000 f819 	bl	800955c <_free_r>
 800952a:	e7ba      	b.n	80094a2 <_reclaim_reent+0x16>
 800952c:	680e      	ldr	r6, [r1, #0]
 800952e:	4620      	mov	r0, r4
 8009530:	f000 f814 	bl	800955c <_free_r>
 8009534:	4631      	mov	r1, r6
 8009536:	e7ef      	b.n	8009518 <_reclaim_reent+0x8c>
 8009538:	2500      	movs	r5, #0
 800953a:	e7ef      	b.n	800951c <_reclaim_reent+0x90>
 800953c:	bd70      	pop	{r4, r5, r6, pc}
 800953e:	bf00      	nop
 8009540:	20000044 	.word	0x20000044

08009544 <__malloc_lock>:
 8009544:	4801      	ldr	r0, [pc, #4]	; (800954c <__malloc_lock+0x8>)
 8009546:	f7ff bf7b 	b.w	8009440 <__retarget_lock_acquire_recursive>
 800954a:	bf00      	nop
 800954c:	20001a8c 	.word	0x20001a8c

08009550 <__malloc_unlock>:
 8009550:	4801      	ldr	r0, [pc, #4]	; (8009558 <__malloc_unlock+0x8>)
 8009552:	f7ff bf76 	b.w	8009442 <__retarget_lock_release_recursive>
 8009556:	bf00      	nop
 8009558:	20001a8c 	.word	0x20001a8c

0800955c <_free_r>:
 800955c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800955e:	2900      	cmp	r1, #0
 8009560:	d044      	beq.n	80095ec <_free_r+0x90>
 8009562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009566:	9001      	str	r0, [sp, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	f1a1 0404 	sub.w	r4, r1, #4
 800956e:	bfb8      	it	lt
 8009570:	18e4      	addlt	r4, r4, r3
 8009572:	f7ff ffe7 	bl	8009544 <__malloc_lock>
 8009576:	4a1e      	ldr	r2, [pc, #120]	; (80095f0 <_free_r+0x94>)
 8009578:	9801      	ldr	r0, [sp, #4]
 800957a:	6813      	ldr	r3, [r2, #0]
 800957c:	b933      	cbnz	r3, 800958c <_free_r+0x30>
 800957e:	6063      	str	r3, [r4, #4]
 8009580:	6014      	str	r4, [r2, #0]
 8009582:	b003      	add	sp, #12
 8009584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009588:	f7ff bfe2 	b.w	8009550 <__malloc_unlock>
 800958c:	42a3      	cmp	r3, r4
 800958e:	d908      	bls.n	80095a2 <_free_r+0x46>
 8009590:	6825      	ldr	r5, [r4, #0]
 8009592:	1961      	adds	r1, r4, r5
 8009594:	428b      	cmp	r3, r1
 8009596:	bf01      	itttt	eq
 8009598:	6819      	ldreq	r1, [r3, #0]
 800959a:	685b      	ldreq	r3, [r3, #4]
 800959c:	1949      	addeq	r1, r1, r5
 800959e:	6021      	streq	r1, [r4, #0]
 80095a0:	e7ed      	b.n	800957e <_free_r+0x22>
 80095a2:	461a      	mov	r2, r3
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	b10b      	cbz	r3, 80095ac <_free_r+0x50>
 80095a8:	42a3      	cmp	r3, r4
 80095aa:	d9fa      	bls.n	80095a2 <_free_r+0x46>
 80095ac:	6811      	ldr	r1, [r2, #0]
 80095ae:	1855      	adds	r5, r2, r1
 80095b0:	42a5      	cmp	r5, r4
 80095b2:	d10b      	bne.n	80095cc <_free_r+0x70>
 80095b4:	6824      	ldr	r4, [r4, #0]
 80095b6:	4421      	add	r1, r4
 80095b8:	1854      	adds	r4, r2, r1
 80095ba:	42a3      	cmp	r3, r4
 80095bc:	6011      	str	r1, [r2, #0]
 80095be:	d1e0      	bne.n	8009582 <_free_r+0x26>
 80095c0:	681c      	ldr	r4, [r3, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	6053      	str	r3, [r2, #4]
 80095c6:	4421      	add	r1, r4
 80095c8:	6011      	str	r1, [r2, #0]
 80095ca:	e7da      	b.n	8009582 <_free_r+0x26>
 80095cc:	d902      	bls.n	80095d4 <_free_r+0x78>
 80095ce:	230c      	movs	r3, #12
 80095d0:	6003      	str	r3, [r0, #0]
 80095d2:	e7d6      	b.n	8009582 <_free_r+0x26>
 80095d4:	6825      	ldr	r5, [r4, #0]
 80095d6:	1961      	adds	r1, r4, r5
 80095d8:	428b      	cmp	r3, r1
 80095da:	bf04      	itt	eq
 80095dc:	6819      	ldreq	r1, [r3, #0]
 80095de:	685b      	ldreq	r3, [r3, #4]
 80095e0:	6063      	str	r3, [r4, #4]
 80095e2:	bf04      	itt	eq
 80095e4:	1949      	addeq	r1, r1, r5
 80095e6:	6021      	streq	r1, [r4, #0]
 80095e8:	6054      	str	r4, [r2, #4]
 80095ea:	e7ca      	b.n	8009582 <_free_r+0x26>
 80095ec:	b003      	add	sp, #12
 80095ee:	bd30      	pop	{r4, r5, pc}
 80095f0:	20001a90 	.word	0x20001a90
 80095f4:	00000000 	.word	0x00000000

080095f8 <cos>:
 80095f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095fa:	ec53 2b10 	vmov	r2, r3, d0
 80095fe:	4826      	ldr	r0, [pc, #152]	; (8009698 <cos+0xa0>)
 8009600:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009604:	4281      	cmp	r1, r0
 8009606:	dc06      	bgt.n	8009616 <cos+0x1e>
 8009608:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009690 <cos+0x98>
 800960c:	b005      	add	sp, #20
 800960e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009612:	f001 b8fd 	b.w	800a810 <__kernel_cos>
 8009616:	4821      	ldr	r0, [pc, #132]	; (800969c <cos+0xa4>)
 8009618:	4281      	cmp	r1, r0
 800961a:	dd09      	ble.n	8009630 <cos+0x38>
 800961c:	ee10 0a10 	vmov	r0, s0
 8009620:	4619      	mov	r1, r3
 8009622:	f7f6 fde1 	bl	80001e8 <__aeabi_dsub>
 8009626:	ec41 0b10 	vmov	d0, r0, r1
 800962a:	b005      	add	sp, #20
 800962c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009630:	4668      	mov	r0, sp
 8009632:	f000 fe2d 	bl	800a290 <__ieee754_rem_pio2>
 8009636:	f000 0003 	and.w	r0, r0, #3
 800963a:	2801      	cmp	r0, #1
 800963c:	d00b      	beq.n	8009656 <cos+0x5e>
 800963e:	2802      	cmp	r0, #2
 8009640:	d016      	beq.n	8009670 <cos+0x78>
 8009642:	b9e0      	cbnz	r0, 800967e <cos+0x86>
 8009644:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009648:	ed9d 0b00 	vldr	d0, [sp]
 800964c:	f001 f8e0 	bl	800a810 <__kernel_cos>
 8009650:	ec51 0b10 	vmov	r0, r1, d0
 8009654:	e7e7      	b.n	8009626 <cos+0x2e>
 8009656:	ed9d 1b02 	vldr	d1, [sp, #8]
 800965a:	ed9d 0b00 	vldr	d0, [sp]
 800965e:	f001 fcef 	bl	800b040 <__kernel_sin>
 8009662:	ec53 2b10 	vmov	r2, r3, d0
 8009666:	ee10 0a10 	vmov	r0, s0
 800966a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800966e:	e7da      	b.n	8009626 <cos+0x2e>
 8009670:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009674:	ed9d 0b00 	vldr	d0, [sp]
 8009678:	f001 f8ca 	bl	800a810 <__kernel_cos>
 800967c:	e7f1      	b.n	8009662 <cos+0x6a>
 800967e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009682:	ed9d 0b00 	vldr	d0, [sp]
 8009686:	2001      	movs	r0, #1
 8009688:	f001 fcda 	bl	800b040 <__kernel_sin>
 800968c:	e7e0      	b.n	8009650 <cos+0x58>
 800968e:	bf00      	nop
	...
 8009698:	3fe921fb 	.word	0x3fe921fb
 800969c:	7fefffff 	.word	0x7fefffff

080096a0 <sin>:
 80096a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096a2:	ec53 2b10 	vmov	r2, r3, d0
 80096a6:	4828      	ldr	r0, [pc, #160]	; (8009748 <sin+0xa8>)
 80096a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80096ac:	4281      	cmp	r1, r0
 80096ae:	dc07      	bgt.n	80096c0 <sin+0x20>
 80096b0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009740 <sin+0xa0>
 80096b4:	2000      	movs	r0, #0
 80096b6:	b005      	add	sp, #20
 80096b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096bc:	f001 bcc0 	b.w	800b040 <__kernel_sin>
 80096c0:	4822      	ldr	r0, [pc, #136]	; (800974c <sin+0xac>)
 80096c2:	4281      	cmp	r1, r0
 80096c4:	dd09      	ble.n	80096da <sin+0x3a>
 80096c6:	ee10 0a10 	vmov	r0, s0
 80096ca:	4619      	mov	r1, r3
 80096cc:	f7f6 fd8c 	bl	80001e8 <__aeabi_dsub>
 80096d0:	ec41 0b10 	vmov	d0, r0, r1
 80096d4:	b005      	add	sp, #20
 80096d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80096da:	4668      	mov	r0, sp
 80096dc:	f000 fdd8 	bl	800a290 <__ieee754_rem_pio2>
 80096e0:	f000 0003 	and.w	r0, r0, #3
 80096e4:	2801      	cmp	r0, #1
 80096e6:	d00c      	beq.n	8009702 <sin+0x62>
 80096e8:	2802      	cmp	r0, #2
 80096ea:	d011      	beq.n	8009710 <sin+0x70>
 80096ec:	b9f0      	cbnz	r0, 800972c <sin+0x8c>
 80096ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096f2:	ed9d 0b00 	vldr	d0, [sp]
 80096f6:	2001      	movs	r0, #1
 80096f8:	f001 fca2 	bl	800b040 <__kernel_sin>
 80096fc:	ec51 0b10 	vmov	r0, r1, d0
 8009700:	e7e6      	b.n	80096d0 <sin+0x30>
 8009702:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009706:	ed9d 0b00 	vldr	d0, [sp]
 800970a:	f001 f881 	bl	800a810 <__kernel_cos>
 800970e:	e7f5      	b.n	80096fc <sin+0x5c>
 8009710:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009714:	ed9d 0b00 	vldr	d0, [sp]
 8009718:	2001      	movs	r0, #1
 800971a:	f001 fc91 	bl	800b040 <__kernel_sin>
 800971e:	ec53 2b10 	vmov	r2, r3, d0
 8009722:	ee10 0a10 	vmov	r0, s0
 8009726:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800972a:	e7d1      	b.n	80096d0 <sin+0x30>
 800972c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009730:	ed9d 0b00 	vldr	d0, [sp]
 8009734:	f001 f86c 	bl	800a810 <__kernel_cos>
 8009738:	e7f1      	b.n	800971e <sin+0x7e>
 800973a:	bf00      	nop
 800973c:	f3af 8000 	nop.w
	...
 8009748:	3fe921fb 	.word	0x3fe921fb
 800974c:	7fefffff 	.word	0x7fefffff

08009750 <pow>:
 8009750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009752:	ed2d 8b02 	vpush	{d8}
 8009756:	eeb0 8a40 	vmov.f32	s16, s0
 800975a:	eef0 8a60 	vmov.f32	s17, s1
 800975e:	ec55 4b11 	vmov	r4, r5, d1
 8009762:	f000 f865 	bl	8009830 <__ieee754_pow>
 8009766:	4622      	mov	r2, r4
 8009768:	462b      	mov	r3, r5
 800976a:	4620      	mov	r0, r4
 800976c:	4629      	mov	r1, r5
 800976e:	ec57 6b10 	vmov	r6, r7, d0
 8009772:	f7f7 f98b 	bl	8000a8c <__aeabi_dcmpun>
 8009776:	2800      	cmp	r0, #0
 8009778:	d13b      	bne.n	80097f2 <pow+0xa2>
 800977a:	ec51 0b18 	vmov	r0, r1, d8
 800977e:	2200      	movs	r2, #0
 8009780:	2300      	movs	r3, #0
 8009782:	f7f7 f951 	bl	8000a28 <__aeabi_dcmpeq>
 8009786:	b1b8      	cbz	r0, 80097b8 <pow+0x68>
 8009788:	2200      	movs	r2, #0
 800978a:	2300      	movs	r3, #0
 800978c:	4620      	mov	r0, r4
 800978e:	4629      	mov	r1, r5
 8009790:	f7f7 f94a 	bl	8000a28 <__aeabi_dcmpeq>
 8009794:	2800      	cmp	r0, #0
 8009796:	d146      	bne.n	8009826 <pow+0xd6>
 8009798:	ec45 4b10 	vmov	d0, r4, r5
 800979c:	f001 fd47 	bl	800b22e <finite>
 80097a0:	b338      	cbz	r0, 80097f2 <pow+0xa2>
 80097a2:	2200      	movs	r2, #0
 80097a4:	2300      	movs	r3, #0
 80097a6:	4620      	mov	r0, r4
 80097a8:	4629      	mov	r1, r5
 80097aa:	f7f7 f947 	bl	8000a3c <__aeabi_dcmplt>
 80097ae:	b300      	cbz	r0, 80097f2 <pow+0xa2>
 80097b0:	f7ff fe1c 	bl	80093ec <__errno>
 80097b4:	2322      	movs	r3, #34	; 0x22
 80097b6:	e01b      	b.n	80097f0 <pow+0xa0>
 80097b8:	ec47 6b10 	vmov	d0, r6, r7
 80097bc:	f001 fd37 	bl	800b22e <finite>
 80097c0:	b9e0      	cbnz	r0, 80097fc <pow+0xac>
 80097c2:	eeb0 0a48 	vmov.f32	s0, s16
 80097c6:	eef0 0a68 	vmov.f32	s1, s17
 80097ca:	f001 fd30 	bl	800b22e <finite>
 80097ce:	b1a8      	cbz	r0, 80097fc <pow+0xac>
 80097d0:	ec45 4b10 	vmov	d0, r4, r5
 80097d4:	f001 fd2b 	bl	800b22e <finite>
 80097d8:	b180      	cbz	r0, 80097fc <pow+0xac>
 80097da:	4632      	mov	r2, r6
 80097dc:	463b      	mov	r3, r7
 80097de:	4630      	mov	r0, r6
 80097e0:	4639      	mov	r1, r7
 80097e2:	f7f7 f953 	bl	8000a8c <__aeabi_dcmpun>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d0e2      	beq.n	80097b0 <pow+0x60>
 80097ea:	f7ff fdff 	bl	80093ec <__errno>
 80097ee:	2321      	movs	r3, #33	; 0x21
 80097f0:	6003      	str	r3, [r0, #0]
 80097f2:	ecbd 8b02 	vpop	{d8}
 80097f6:	ec47 6b10 	vmov	d0, r6, r7
 80097fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097fc:	2200      	movs	r2, #0
 80097fe:	2300      	movs	r3, #0
 8009800:	4630      	mov	r0, r6
 8009802:	4639      	mov	r1, r7
 8009804:	f7f7 f910 	bl	8000a28 <__aeabi_dcmpeq>
 8009808:	2800      	cmp	r0, #0
 800980a:	d0f2      	beq.n	80097f2 <pow+0xa2>
 800980c:	eeb0 0a48 	vmov.f32	s0, s16
 8009810:	eef0 0a68 	vmov.f32	s1, s17
 8009814:	f001 fd0b 	bl	800b22e <finite>
 8009818:	2800      	cmp	r0, #0
 800981a:	d0ea      	beq.n	80097f2 <pow+0xa2>
 800981c:	ec45 4b10 	vmov	d0, r4, r5
 8009820:	f001 fd05 	bl	800b22e <finite>
 8009824:	e7c3      	b.n	80097ae <pow+0x5e>
 8009826:	4f01      	ldr	r7, [pc, #4]	; (800982c <pow+0xdc>)
 8009828:	2600      	movs	r6, #0
 800982a:	e7e2      	b.n	80097f2 <pow+0xa2>
 800982c:	3ff00000 	.word	0x3ff00000

08009830 <__ieee754_pow>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	ed2d 8b06 	vpush	{d8-d10}
 8009838:	b089      	sub	sp, #36	; 0x24
 800983a:	ed8d 1b00 	vstr	d1, [sp]
 800983e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009842:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009846:	ea58 0102 	orrs.w	r1, r8, r2
 800984a:	ec57 6b10 	vmov	r6, r7, d0
 800984e:	d115      	bne.n	800987c <__ieee754_pow+0x4c>
 8009850:	19b3      	adds	r3, r6, r6
 8009852:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009856:	4152      	adcs	r2, r2
 8009858:	4299      	cmp	r1, r3
 800985a:	4b89      	ldr	r3, [pc, #548]	; (8009a80 <__ieee754_pow+0x250>)
 800985c:	4193      	sbcs	r3, r2
 800985e:	f080 84d2 	bcs.w	800a206 <__ieee754_pow+0x9d6>
 8009862:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009866:	4630      	mov	r0, r6
 8009868:	4639      	mov	r1, r7
 800986a:	f7f6 fcbf 	bl	80001ec <__adddf3>
 800986e:	ec41 0b10 	vmov	d0, r0, r1
 8009872:	b009      	add	sp, #36	; 0x24
 8009874:	ecbd 8b06 	vpop	{d8-d10}
 8009878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987c:	4b81      	ldr	r3, [pc, #516]	; (8009a84 <__ieee754_pow+0x254>)
 800987e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009882:	429c      	cmp	r4, r3
 8009884:	ee10 aa10 	vmov	sl, s0
 8009888:	463d      	mov	r5, r7
 800988a:	dc06      	bgt.n	800989a <__ieee754_pow+0x6a>
 800988c:	d101      	bne.n	8009892 <__ieee754_pow+0x62>
 800988e:	2e00      	cmp	r6, #0
 8009890:	d1e7      	bne.n	8009862 <__ieee754_pow+0x32>
 8009892:	4598      	cmp	r8, r3
 8009894:	dc01      	bgt.n	800989a <__ieee754_pow+0x6a>
 8009896:	d10f      	bne.n	80098b8 <__ieee754_pow+0x88>
 8009898:	b172      	cbz	r2, 80098b8 <__ieee754_pow+0x88>
 800989a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800989e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80098a2:	ea55 050a 	orrs.w	r5, r5, sl
 80098a6:	d1dc      	bne.n	8009862 <__ieee754_pow+0x32>
 80098a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80098ac:	18db      	adds	r3, r3, r3
 80098ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80098b2:	4152      	adcs	r2, r2
 80098b4:	429d      	cmp	r5, r3
 80098b6:	e7d0      	b.n	800985a <__ieee754_pow+0x2a>
 80098b8:	2d00      	cmp	r5, #0
 80098ba:	da3b      	bge.n	8009934 <__ieee754_pow+0x104>
 80098bc:	4b72      	ldr	r3, [pc, #456]	; (8009a88 <__ieee754_pow+0x258>)
 80098be:	4598      	cmp	r8, r3
 80098c0:	dc51      	bgt.n	8009966 <__ieee754_pow+0x136>
 80098c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80098c6:	4598      	cmp	r8, r3
 80098c8:	f340 84ac 	ble.w	800a224 <__ieee754_pow+0x9f4>
 80098cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80098d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80098d4:	2b14      	cmp	r3, #20
 80098d6:	dd0f      	ble.n	80098f8 <__ieee754_pow+0xc8>
 80098d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80098dc:	fa22 f103 	lsr.w	r1, r2, r3
 80098e0:	fa01 f303 	lsl.w	r3, r1, r3
 80098e4:	4293      	cmp	r3, r2
 80098e6:	f040 849d 	bne.w	800a224 <__ieee754_pow+0x9f4>
 80098ea:	f001 0101 	and.w	r1, r1, #1
 80098ee:	f1c1 0302 	rsb	r3, r1, #2
 80098f2:	9304      	str	r3, [sp, #16]
 80098f4:	b182      	cbz	r2, 8009918 <__ieee754_pow+0xe8>
 80098f6:	e05f      	b.n	80099b8 <__ieee754_pow+0x188>
 80098f8:	2a00      	cmp	r2, #0
 80098fa:	d15b      	bne.n	80099b4 <__ieee754_pow+0x184>
 80098fc:	f1c3 0314 	rsb	r3, r3, #20
 8009900:	fa48 f103 	asr.w	r1, r8, r3
 8009904:	fa01 f303 	lsl.w	r3, r1, r3
 8009908:	4543      	cmp	r3, r8
 800990a:	f040 8488 	bne.w	800a21e <__ieee754_pow+0x9ee>
 800990e:	f001 0101 	and.w	r1, r1, #1
 8009912:	f1c1 0302 	rsb	r3, r1, #2
 8009916:	9304      	str	r3, [sp, #16]
 8009918:	4b5c      	ldr	r3, [pc, #368]	; (8009a8c <__ieee754_pow+0x25c>)
 800991a:	4598      	cmp	r8, r3
 800991c:	d132      	bne.n	8009984 <__ieee754_pow+0x154>
 800991e:	f1b9 0f00 	cmp.w	r9, #0
 8009922:	f280 8478 	bge.w	800a216 <__ieee754_pow+0x9e6>
 8009926:	4959      	ldr	r1, [pc, #356]	; (8009a8c <__ieee754_pow+0x25c>)
 8009928:	4632      	mov	r2, r6
 800992a:	463b      	mov	r3, r7
 800992c:	2000      	movs	r0, #0
 800992e:	f7f6 ff3d 	bl	80007ac <__aeabi_ddiv>
 8009932:	e79c      	b.n	800986e <__ieee754_pow+0x3e>
 8009934:	2300      	movs	r3, #0
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	2a00      	cmp	r2, #0
 800993a:	d13d      	bne.n	80099b8 <__ieee754_pow+0x188>
 800993c:	4b51      	ldr	r3, [pc, #324]	; (8009a84 <__ieee754_pow+0x254>)
 800993e:	4598      	cmp	r8, r3
 8009940:	d1ea      	bne.n	8009918 <__ieee754_pow+0xe8>
 8009942:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009946:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800994a:	ea53 030a 	orrs.w	r3, r3, sl
 800994e:	f000 845a 	beq.w	800a206 <__ieee754_pow+0x9d6>
 8009952:	4b4f      	ldr	r3, [pc, #316]	; (8009a90 <__ieee754_pow+0x260>)
 8009954:	429c      	cmp	r4, r3
 8009956:	dd08      	ble.n	800996a <__ieee754_pow+0x13a>
 8009958:	f1b9 0f00 	cmp.w	r9, #0
 800995c:	f2c0 8457 	blt.w	800a20e <__ieee754_pow+0x9de>
 8009960:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009964:	e783      	b.n	800986e <__ieee754_pow+0x3e>
 8009966:	2302      	movs	r3, #2
 8009968:	e7e5      	b.n	8009936 <__ieee754_pow+0x106>
 800996a:	f1b9 0f00 	cmp.w	r9, #0
 800996e:	f04f 0000 	mov.w	r0, #0
 8009972:	f04f 0100 	mov.w	r1, #0
 8009976:	f6bf af7a 	bge.w	800986e <__ieee754_pow+0x3e>
 800997a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800997e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009982:	e774      	b.n	800986e <__ieee754_pow+0x3e>
 8009984:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009988:	d106      	bne.n	8009998 <__ieee754_pow+0x168>
 800998a:	4632      	mov	r2, r6
 800998c:	463b      	mov	r3, r7
 800998e:	4630      	mov	r0, r6
 8009990:	4639      	mov	r1, r7
 8009992:	f7f6 fde1 	bl	8000558 <__aeabi_dmul>
 8009996:	e76a      	b.n	800986e <__ieee754_pow+0x3e>
 8009998:	4b3e      	ldr	r3, [pc, #248]	; (8009a94 <__ieee754_pow+0x264>)
 800999a:	4599      	cmp	r9, r3
 800999c:	d10c      	bne.n	80099b8 <__ieee754_pow+0x188>
 800999e:	2d00      	cmp	r5, #0
 80099a0:	db0a      	blt.n	80099b8 <__ieee754_pow+0x188>
 80099a2:	ec47 6b10 	vmov	d0, r6, r7
 80099a6:	b009      	add	sp, #36	; 0x24
 80099a8:	ecbd 8b06 	vpop	{d8-d10}
 80099ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b0:	f000 be7a 	b.w	800a6a8 <__ieee754_sqrt>
 80099b4:	2300      	movs	r3, #0
 80099b6:	9304      	str	r3, [sp, #16]
 80099b8:	ec47 6b10 	vmov	d0, r6, r7
 80099bc:	f001 fc2e 	bl	800b21c <fabs>
 80099c0:	ec51 0b10 	vmov	r0, r1, d0
 80099c4:	f1ba 0f00 	cmp.w	sl, #0
 80099c8:	d129      	bne.n	8009a1e <__ieee754_pow+0x1ee>
 80099ca:	b124      	cbz	r4, 80099d6 <__ieee754_pow+0x1a6>
 80099cc:	4b2f      	ldr	r3, [pc, #188]	; (8009a8c <__ieee754_pow+0x25c>)
 80099ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d123      	bne.n	8009a1e <__ieee754_pow+0x1ee>
 80099d6:	f1b9 0f00 	cmp.w	r9, #0
 80099da:	da05      	bge.n	80099e8 <__ieee754_pow+0x1b8>
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	2000      	movs	r0, #0
 80099e2:	492a      	ldr	r1, [pc, #168]	; (8009a8c <__ieee754_pow+0x25c>)
 80099e4:	f7f6 fee2 	bl	80007ac <__aeabi_ddiv>
 80099e8:	2d00      	cmp	r5, #0
 80099ea:	f6bf af40 	bge.w	800986e <__ieee754_pow+0x3e>
 80099ee:	9b04      	ldr	r3, [sp, #16]
 80099f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80099f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80099f8:	4323      	orrs	r3, r4
 80099fa:	d108      	bne.n	8009a0e <__ieee754_pow+0x1de>
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	4610      	mov	r0, r2
 8009a02:	4619      	mov	r1, r3
 8009a04:	f7f6 fbf0 	bl	80001e8 <__aeabi_dsub>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	e78f      	b.n	800992e <__ieee754_pow+0xfe>
 8009a0e:	9b04      	ldr	r3, [sp, #16]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	f47f af2c 	bne.w	800986e <__ieee754_pow+0x3e>
 8009a16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	e727      	b.n	800986e <__ieee754_pow+0x3e>
 8009a1e:	0feb      	lsrs	r3, r5, #31
 8009a20:	3b01      	subs	r3, #1
 8009a22:	9306      	str	r3, [sp, #24]
 8009a24:	9a06      	ldr	r2, [sp, #24]
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	d102      	bne.n	8009a32 <__ieee754_pow+0x202>
 8009a2c:	4632      	mov	r2, r6
 8009a2e:	463b      	mov	r3, r7
 8009a30:	e7e6      	b.n	8009a00 <__ieee754_pow+0x1d0>
 8009a32:	4b19      	ldr	r3, [pc, #100]	; (8009a98 <__ieee754_pow+0x268>)
 8009a34:	4598      	cmp	r8, r3
 8009a36:	f340 80fb 	ble.w	8009c30 <__ieee754_pow+0x400>
 8009a3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009a3e:	4598      	cmp	r8, r3
 8009a40:	4b13      	ldr	r3, [pc, #76]	; (8009a90 <__ieee754_pow+0x260>)
 8009a42:	dd0c      	ble.n	8009a5e <__ieee754_pow+0x22e>
 8009a44:	429c      	cmp	r4, r3
 8009a46:	dc0f      	bgt.n	8009a68 <__ieee754_pow+0x238>
 8009a48:	f1b9 0f00 	cmp.w	r9, #0
 8009a4c:	da0f      	bge.n	8009a6e <__ieee754_pow+0x23e>
 8009a4e:	2000      	movs	r0, #0
 8009a50:	b009      	add	sp, #36	; 0x24
 8009a52:	ecbd 8b06 	vpop	{d8-d10}
 8009a56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5a:	f001 bbd6 	b.w	800b20a <__math_oflow>
 8009a5e:	429c      	cmp	r4, r3
 8009a60:	dbf2      	blt.n	8009a48 <__ieee754_pow+0x218>
 8009a62:	4b0a      	ldr	r3, [pc, #40]	; (8009a8c <__ieee754_pow+0x25c>)
 8009a64:	429c      	cmp	r4, r3
 8009a66:	dd19      	ble.n	8009a9c <__ieee754_pow+0x26c>
 8009a68:	f1b9 0f00 	cmp.w	r9, #0
 8009a6c:	dcef      	bgt.n	8009a4e <__ieee754_pow+0x21e>
 8009a6e:	2000      	movs	r0, #0
 8009a70:	b009      	add	sp, #36	; 0x24
 8009a72:	ecbd 8b06 	vpop	{d8-d10}
 8009a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7a:	f001 bbbd 	b.w	800b1f8 <__math_uflow>
 8009a7e:	bf00      	nop
 8009a80:	fff00000 	.word	0xfff00000
 8009a84:	7ff00000 	.word	0x7ff00000
 8009a88:	433fffff 	.word	0x433fffff
 8009a8c:	3ff00000 	.word	0x3ff00000
 8009a90:	3fefffff 	.word	0x3fefffff
 8009a94:	3fe00000 	.word	0x3fe00000
 8009a98:	41e00000 	.word	0x41e00000
 8009a9c:	4b60      	ldr	r3, [pc, #384]	; (8009c20 <__ieee754_pow+0x3f0>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f7f6 fba2 	bl	80001e8 <__aeabi_dsub>
 8009aa4:	a354      	add	r3, pc, #336	; (adr r3, 8009bf8 <__ieee754_pow+0x3c8>)
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	4604      	mov	r4, r0
 8009aac:	460d      	mov	r5, r1
 8009aae:	f7f6 fd53 	bl	8000558 <__aeabi_dmul>
 8009ab2:	a353      	add	r3, pc, #332	; (adr r3, 8009c00 <__ieee754_pow+0x3d0>)
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	4606      	mov	r6, r0
 8009aba:	460f      	mov	r7, r1
 8009abc:	4620      	mov	r0, r4
 8009abe:	4629      	mov	r1, r5
 8009ac0:	f7f6 fd4a 	bl	8000558 <__aeabi_dmul>
 8009ac4:	4b57      	ldr	r3, [pc, #348]	; (8009c24 <__ieee754_pow+0x3f4>)
 8009ac6:	4682      	mov	sl, r0
 8009ac8:	468b      	mov	fp, r1
 8009aca:	2200      	movs	r2, #0
 8009acc:	4620      	mov	r0, r4
 8009ace:	4629      	mov	r1, r5
 8009ad0:	f7f6 fd42 	bl	8000558 <__aeabi_dmul>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	a14b      	add	r1, pc, #300	; (adr r1, 8009c08 <__ieee754_pow+0x3d8>)
 8009ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ade:	f7f6 fb83 	bl	80001e8 <__aeabi_dsub>
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	462b      	mov	r3, r5
 8009ae6:	f7f6 fd37 	bl	8000558 <__aeabi_dmul>
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	2000      	movs	r0, #0
 8009af0:	494d      	ldr	r1, [pc, #308]	; (8009c28 <__ieee754_pow+0x3f8>)
 8009af2:	f7f6 fb79 	bl	80001e8 <__aeabi_dsub>
 8009af6:	4622      	mov	r2, r4
 8009af8:	4680      	mov	r8, r0
 8009afa:	4689      	mov	r9, r1
 8009afc:	462b      	mov	r3, r5
 8009afe:	4620      	mov	r0, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f6 fd29 	bl	8000558 <__aeabi_dmul>
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4640      	mov	r0, r8
 8009b0c:	4649      	mov	r1, r9
 8009b0e:	f7f6 fd23 	bl	8000558 <__aeabi_dmul>
 8009b12:	a33f      	add	r3, pc, #252	; (adr r3, 8009c10 <__ieee754_pow+0x3e0>)
 8009b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b18:	f7f6 fd1e 	bl	8000558 <__aeabi_dmul>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4650      	mov	r0, sl
 8009b22:	4659      	mov	r1, fp
 8009b24:	f7f6 fb60 	bl	80001e8 <__aeabi_dsub>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4680      	mov	r8, r0
 8009b2e:	4689      	mov	r9, r1
 8009b30:	4630      	mov	r0, r6
 8009b32:	4639      	mov	r1, r7
 8009b34:	f7f6 fb5a 	bl	80001ec <__adddf3>
 8009b38:	2000      	movs	r0, #0
 8009b3a:	4632      	mov	r2, r6
 8009b3c:	463b      	mov	r3, r7
 8009b3e:	4604      	mov	r4, r0
 8009b40:	460d      	mov	r5, r1
 8009b42:	f7f6 fb51 	bl	80001e8 <__aeabi_dsub>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	f7f6 fb4b 	bl	80001e8 <__aeabi_dsub>
 8009b52:	9b04      	ldr	r3, [sp, #16]
 8009b54:	9a06      	ldr	r2, [sp, #24]
 8009b56:	3b01      	subs	r3, #1
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	4682      	mov	sl, r0
 8009b5c:	468b      	mov	fp, r1
 8009b5e:	f040 81e7 	bne.w	8009f30 <__ieee754_pow+0x700>
 8009b62:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009c18 <__ieee754_pow+0x3e8>
 8009b66:	eeb0 8a47 	vmov.f32	s16, s14
 8009b6a:	eef0 8a67 	vmov.f32	s17, s15
 8009b6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009b72:	2600      	movs	r6, #0
 8009b74:	4632      	mov	r2, r6
 8009b76:	463b      	mov	r3, r7
 8009b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b7c:	f7f6 fb34 	bl	80001e8 <__aeabi_dsub>
 8009b80:	4622      	mov	r2, r4
 8009b82:	462b      	mov	r3, r5
 8009b84:	f7f6 fce8 	bl	8000558 <__aeabi_dmul>
 8009b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b8c:	4680      	mov	r8, r0
 8009b8e:	4689      	mov	r9, r1
 8009b90:	4650      	mov	r0, sl
 8009b92:	4659      	mov	r1, fp
 8009b94:	f7f6 fce0 	bl	8000558 <__aeabi_dmul>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	4649      	mov	r1, r9
 8009ba0:	f7f6 fb24 	bl	80001ec <__adddf3>
 8009ba4:	4632      	mov	r2, r6
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	4680      	mov	r8, r0
 8009baa:	4689      	mov	r9, r1
 8009bac:	4620      	mov	r0, r4
 8009bae:	4629      	mov	r1, r5
 8009bb0:	f7f6 fcd2 	bl	8000558 <__aeabi_dmul>
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	460d      	mov	r5, r1
 8009bba:	4602      	mov	r2, r0
 8009bbc:	4649      	mov	r1, r9
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	f7f6 fb14 	bl	80001ec <__adddf3>
 8009bc4:	4b19      	ldr	r3, [pc, #100]	; (8009c2c <__ieee754_pow+0x3fc>)
 8009bc6:	4299      	cmp	r1, r3
 8009bc8:	ec45 4b19 	vmov	d9, r4, r5
 8009bcc:	4606      	mov	r6, r0
 8009bce:	460f      	mov	r7, r1
 8009bd0:	468b      	mov	fp, r1
 8009bd2:	f340 82f1 	ble.w	800a1b8 <__ieee754_pow+0x988>
 8009bd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009bda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009bde:	4303      	orrs	r3, r0
 8009be0:	f000 81e4 	beq.w	8009fac <__ieee754_pow+0x77c>
 8009be4:	ec51 0b18 	vmov	r0, r1, d8
 8009be8:	2200      	movs	r2, #0
 8009bea:	2300      	movs	r3, #0
 8009bec:	f7f6 ff26 	bl	8000a3c <__aeabi_dcmplt>
 8009bf0:	3800      	subs	r0, #0
 8009bf2:	bf18      	it	ne
 8009bf4:	2001      	movne	r0, #1
 8009bf6:	e72b      	b.n	8009a50 <__ieee754_pow+0x220>
 8009bf8:	60000000 	.word	0x60000000
 8009bfc:	3ff71547 	.word	0x3ff71547
 8009c00:	f85ddf44 	.word	0xf85ddf44
 8009c04:	3e54ae0b 	.word	0x3e54ae0b
 8009c08:	55555555 	.word	0x55555555
 8009c0c:	3fd55555 	.word	0x3fd55555
 8009c10:	652b82fe 	.word	0x652b82fe
 8009c14:	3ff71547 	.word	0x3ff71547
 8009c18:	00000000 	.word	0x00000000
 8009c1c:	bff00000 	.word	0xbff00000
 8009c20:	3ff00000 	.word	0x3ff00000
 8009c24:	3fd00000 	.word	0x3fd00000
 8009c28:	3fe00000 	.word	0x3fe00000
 8009c2c:	408fffff 	.word	0x408fffff
 8009c30:	4bd5      	ldr	r3, [pc, #852]	; (8009f88 <__ieee754_pow+0x758>)
 8009c32:	402b      	ands	r3, r5
 8009c34:	2200      	movs	r2, #0
 8009c36:	b92b      	cbnz	r3, 8009c44 <__ieee754_pow+0x414>
 8009c38:	4bd4      	ldr	r3, [pc, #848]	; (8009f8c <__ieee754_pow+0x75c>)
 8009c3a:	f7f6 fc8d 	bl	8000558 <__aeabi_dmul>
 8009c3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009c42:	460c      	mov	r4, r1
 8009c44:	1523      	asrs	r3, r4, #20
 8009c46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009c4a:	4413      	add	r3, r2
 8009c4c:	9305      	str	r3, [sp, #20]
 8009c4e:	4bd0      	ldr	r3, [pc, #832]	; (8009f90 <__ieee754_pow+0x760>)
 8009c50:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009c54:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009c58:	429c      	cmp	r4, r3
 8009c5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009c5e:	dd08      	ble.n	8009c72 <__ieee754_pow+0x442>
 8009c60:	4bcc      	ldr	r3, [pc, #816]	; (8009f94 <__ieee754_pow+0x764>)
 8009c62:	429c      	cmp	r4, r3
 8009c64:	f340 8162 	ble.w	8009f2c <__ieee754_pow+0x6fc>
 8009c68:	9b05      	ldr	r3, [sp, #20]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	9305      	str	r3, [sp, #20]
 8009c6e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009c72:	2400      	movs	r4, #0
 8009c74:	00e3      	lsls	r3, r4, #3
 8009c76:	9307      	str	r3, [sp, #28]
 8009c78:	4bc7      	ldr	r3, [pc, #796]	; (8009f98 <__ieee754_pow+0x768>)
 8009c7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c7e:	ed93 7b00 	vldr	d7, [r3]
 8009c82:	4629      	mov	r1, r5
 8009c84:	ec53 2b17 	vmov	r2, r3, d7
 8009c88:	eeb0 9a47 	vmov.f32	s18, s14
 8009c8c:	eef0 9a67 	vmov.f32	s19, s15
 8009c90:	4682      	mov	sl, r0
 8009c92:	f7f6 faa9 	bl	80001e8 <__aeabi_dsub>
 8009c96:	4652      	mov	r2, sl
 8009c98:	4606      	mov	r6, r0
 8009c9a:	460f      	mov	r7, r1
 8009c9c:	462b      	mov	r3, r5
 8009c9e:	ec51 0b19 	vmov	r0, r1, d9
 8009ca2:	f7f6 faa3 	bl	80001ec <__adddf3>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	2000      	movs	r0, #0
 8009cac:	49bb      	ldr	r1, [pc, #748]	; (8009f9c <__ieee754_pow+0x76c>)
 8009cae:	f7f6 fd7d 	bl	80007ac <__aeabi_ddiv>
 8009cb2:	ec41 0b1a 	vmov	d10, r0, r1
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	460b      	mov	r3, r1
 8009cba:	4630      	mov	r0, r6
 8009cbc:	4639      	mov	r1, r7
 8009cbe:	f7f6 fc4b 	bl	8000558 <__aeabi_dmul>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cc8:	9302      	str	r3, [sp, #8]
 8009cca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009cce:	46ab      	mov	fp, r5
 8009cd0:	106d      	asrs	r5, r5, #1
 8009cd2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009cd6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009cda:	ec41 0b18 	vmov	d8, r0, r1
 8009cde:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	4649      	mov	r1, r9
 8009ce8:	4614      	mov	r4, r2
 8009cea:	461d      	mov	r5, r3
 8009cec:	f7f6 fc34 	bl	8000558 <__aeabi_dmul>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	f7f6 fa76 	bl	80001e8 <__aeabi_dsub>
 8009cfc:	ec53 2b19 	vmov	r2, r3, d9
 8009d00:	4606      	mov	r6, r0
 8009d02:	460f      	mov	r7, r1
 8009d04:	4620      	mov	r0, r4
 8009d06:	4629      	mov	r1, r5
 8009d08:	f7f6 fa6e 	bl	80001e8 <__aeabi_dsub>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4650      	mov	r0, sl
 8009d12:	4659      	mov	r1, fp
 8009d14:	f7f6 fa68 	bl	80001e8 <__aeabi_dsub>
 8009d18:	4642      	mov	r2, r8
 8009d1a:	464b      	mov	r3, r9
 8009d1c:	f7f6 fc1c 	bl	8000558 <__aeabi_dmul>
 8009d20:	4602      	mov	r2, r0
 8009d22:	460b      	mov	r3, r1
 8009d24:	4630      	mov	r0, r6
 8009d26:	4639      	mov	r1, r7
 8009d28:	f7f6 fa5e 	bl	80001e8 <__aeabi_dsub>
 8009d2c:	ec53 2b1a 	vmov	r2, r3, d10
 8009d30:	f7f6 fc12 	bl	8000558 <__aeabi_dmul>
 8009d34:	ec53 2b18 	vmov	r2, r3, d8
 8009d38:	ec41 0b19 	vmov	d9, r0, r1
 8009d3c:	ec51 0b18 	vmov	r0, r1, d8
 8009d40:	f7f6 fc0a 	bl	8000558 <__aeabi_dmul>
 8009d44:	a37c      	add	r3, pc, #496	; (adr r3, 8009f38 <__ieee754_pow+0x708>)
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	460d      	mov	r5, r1
 8009d4e:	f7f6 fc03 	bl	8000558 <__aeabi_dmul>
 8009d52:	a37b      	add	r3, pc, #492	; (adr r3, 8009f40 <__ieee754_pow+0x710>)
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f7f6 fa48 	bl	80001ec <__adddf3>
 8009d5c:	4622      	mov	r2, r4
 8009d5e:	462b      	mov	r3, r5
 8009d60:	f7f6 fbfa 	bl	8000558 <__aeabi_dmul>
 8009d64:	a378      	add	r3, pc, #480	; (adr r3, 8009f48 <__ieee754_pow+0x718>)
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	f7f6 fa3f 	bl	80001ec <__adddf3>
 8009d6e:	4622      	mov	r2, r4
 8009d70:	462b      	mov	r3, r5
 8009d72:	f7f6 fbf1 	bl	8000558 <__aeabi_dmul>
 8009d76:	a376      	add	r3, pc, #472	; (adr r3, 8009f50 <__ieee754_pow+0x720>)
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	f7f6 fa36 	bl	80001ec <__adddf3>
 8009d80:	4622      	mov	r2, r4
 8009d82:	462b      	mov	r3, r5
 8009d84:	f7f6 fbe8 	bl	8000558 <__aeabi_dmul>
 8009d88:	a373      	add	r3, pc, #460	; (adr r3, 8009f58 <__ieee754_pow+0x728>)
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	f7f6 fa2d 	bl	80001ec <__adddf3>
 8009d92:	4622      	mov	r2, r4
 8009d94:	462b      	mov	r3, r5
 8009d96:	f7f6 fbdf 	bl	8000558 <__aeabi_dmul>
 8009d9a:	a371      	add	r3, pc, #452	; (adr r3, 8009f60 <__ieee754_pow+0x730>)
 8009d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da0:	f7f6 fa24 	bl	80001ec <__adddf3>
 8009da4:	4622      	mov	r2, r4
 8009da6:	4606      	mov	r6, r0
 8009da8:	460f      	mov	r7, r1
 8009daa:	462b      	mov	r3, r5
 8009dac:	4620      	mov	r0, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	f7f6 fbd2 	bl	8000558 <__aeabi_dmul>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4630      	mov	r0, r6
 8009dba:	4639      	mov	r1, r7
 8009dbc:	f7f6 fbcc 	bl	8000558 <__aeabi_dmul>
 8009dc0:	4642      	mov	r2, r8
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	460d      	mov	r5, r1
 8009dc6:	464b      	mov	r3, r9
 8009dc8:	ec51 0b18 	vmov	r0, r1, d8
 8009dcc:	f7f6 fa0e 	bl	80001ec <__adddf3>
 8009dd0:	ec53 2b19 	vmov	r2, r3, d9
 8009dd4:	f7f6 fbc0 	bl	8000558 <__aeabi_dmul>
 8009dd8:	4622      	mov	r2, r4
 8009dda:	462b      	mov	r3, r5
 8009ddc:	f7f6 fa06 	bl	80001ec <__adddf3>
 8009de0:	4642      	mov	r2, r8
 8009de2:	4682      	mov	sl, r0
 8009de4:	468b      	mov	fp, r1
 8009de6:	464b      	mov	r3, r9
 8009de8:	4640      	mov	r0, r8
 8009dea:	4649      	mov	r1, r9
 8009dec:	f7f6 fbb4 	bl	8000558 <__aeabi_dmul>
 8009df0:	4b6b      	ldr	r3, [pc, #428]	; (8009fa0 <__ieee754_pow+0x770>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	4606      	mov	r6, r0
 8009df6:	460f      	mov	r7, r1
 8009df8:	f7f6 f9f8 	bl	80001ec <__adddf3>
 8009dfc:	4652      	mov	r2, sl
 8009dfe:	465b      	mov	r3, fp
 8009e00:	f7f6 f9f4 	bl	80001ec <__adddf3>
 8009e04:	2000      	movs	r0, #0
 8009e06:	4604      	mov	r4, r0
 8009e08:	460d      	mov	r5, r1
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	4640      	mov	r0, r8
 8009e10:	4649      	mov	r1, r9
 8009e12:	f7f6 fba1 	bl	8000558 <__aeabi_dmul>
 8009e16:	4b62      	ldr	r3, [pc, #392]	; (8009fa0 <__ieee754_pow+0x770>)
 8009e18:	4680      	mov	r8, r0
 8009e1a:	4689      	mov	r9, r1
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	4620      	mov	r0, r4
 8009e20:	4629      	mov	r1, r5
 8009e22:	f7f6 f9e1 	bl	80001e8 <__aeabi_dsub>
 8009e26:	4632      	mov	r2, r6
 8009e28:	463b      	mov	r3, r7
 8009e2a:	f7f6 f9dd 	bl	80001e8 <__aeabi_dsub>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	460b      	mov	r3, r1
 8009e32:	4650      	mov	r0, sl
 8009e34:	4659      	mov	r1, fp
 8009e36:	f7f6 f9d7 	bl	80001e8 <__aeabi_dsub>
 8009e3a:	ec53 2b18 	vmov	r2, r3, d8
 8009e3e:	f7f6 fb8b 	bl	8000558 <__aeabi_dmul>
 8009e42:	4622      	mov	r2, r4
 8009e44:	4606      	mov	r6, r0
 8009e46:	460f      	mov	r7, r1
 8009e48:	462b      	mov	r3, r5
 8009e4a:	ec51 0b19 	vmov	r0, r1, d9
 8009e4e:	f7f6 fb83 	bl	8000558 <__aeabi_dmul>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	4630      	mov	r0, r6
 8009e58:	4639      	mov	r1, r7
 8009e5a:	f7f6 f9c7 	bl	80001ec <__adddf3>
 8009e5e:	4606      	mov	r6, r0
 8009e60:	460f      	mov	r7, r1
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4640      	mov	r0, r8
 8009e68:	4649      	mov	r1, r9
 8009e6a:	f7f6 f9bf 	bl	80001ec <__adddf3>
 8009e6e:	a33e      	add	r3, pc, #248	; (adr r3, 8009f68 <__ieee754_pow+0x738>)
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	2000      	movs	r0, #0
 8009e76:	4604      	mov	r4, r0
 8009e78:	460d      	mov	r5, r1
 8009e7a:	f7f6 fb6d 	bl	8000558 <__aeabi_dmul>
 8009e7e:	4642      	mov	r2, r8
 8009e80:	ec41 0b18 	vmov	d8, r0, r1
 8009e84:	464b      	mov	r3, r9
 8009e86:	4620      	mov	r0, r4
 8009e88:	4629      	mov	r1, r5
 8009e8a:	f7f6 f9ad 	bl	80001e8 <__aeabi_dsub>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	4630      	mov	r0, r6
 8009e94:	4639      	mov	r1, r7
 8009e96:	f7f6 f9a7 	bl	80001e8 <__aeabi_dsub>
 8009e9a:	a335      	add	r3, pc, #212	; (adr r3, 8009f70 <__ieee754_pow+0x740>)
 8009e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea0:	f7f6 fb5a 	bl	8000558 <__aeabi_dmul>
 8009ea4:	a334      	add	r3, pc, #208	; (adr r3, 8009f78 <__ieee754_pow+0x748>)
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	4606      	mov	r6, r0
 8009eac:	460f      	mov	r7, r1
 8009eae:	4620      	mov	r0, r4
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	f7f6 fb51 	bl	8000558 <__aeabi_dmul>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	460b      	mov	r3, r1
 8009eba:	4630      	mov	r0, r6
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	f7f6 f995 	bl	80001ec <__adddf3>
 8009ec2:	9a07      	ldr	r2, [sp, #28]
 8009ec4:	4b37      	ldr	r3, [pc, #220]	; (8009fa4 <__ieee754_pow+0x774>)
 8009ec6:	4413      	add	r3, r2
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	f7f6 f98e 	bl	80001ec <__adddf3>
 8009ed0:	4682      	mov	sl, r0
 8009ed2:	9805      	ldr	r0, [sp, #20]
 8009ed4:	468b      	mov	fp, r1
 8009ed6:	f7f6 fad5 	bl	8000484 <__aeabi_i2d>
 8009eda:	9a07      	ldr	r2, [sp, #28]
 8009edc:	4b32      	ldr	r3, [pc, #200]	; (8009fa8 <__ieee754_pow+0x778>)
 8009ede:	4413      	add	r3, r2
 8009ee0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	460f      	mov	r7, r1
 8009ee8:	4652      	mov	r2, sl
 8009eea:	465b      	mov	r3, fp
 8009eec:	ec51 0b18 	vmov	r0, r1, d8
 8009ef0:	f7f6 f97c 	bl	80001ec <__adddf3>
 8009ef4:	4642      	mov	r2, r8
 8009ef6:	464b      	mov	r3, r9
 8009ef8:	f7f6 f978 	bl	80001ec <__adddf3>
 8009efc:	4632      	mov	r2, r6
 8009efe:	463b      	mov	r3, r7
 8009f00:	f7f6 f974 	bl	80001ec <__adddf3>
 8009f04:	2000      	movs	r0, #0
 8009f06:	4632      	mov	r2, r6
 8009f08:	463b      	mov	r3, r7
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	460d      	mov	r5, r1
 8009f0e:	f7f6 f96b 	bl	80001e8 <__aeabi_dsub>
 8009f12:	4642      	mov	r2, r8
 8009f14:	464b      	mov	r3, r9
 8009f16:	f7f6 f967 	bl	80001e8 <__aeabi_dsub>
 8009f1a:	ec53 2b18 	vmov	r2, r3, d8
 8009f1e:	f7f6 f963 	bl	80001e8 <__aeabi_dsub>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4650      	mov	r0, sl
 8009f28:	4659      	mov	r1, fp
 8009f2a:	e610      	b.n	8009b4e <__ieee754_pow+0x31e>
 8009f2c:	2401      	movs	r4, #1
 8009f2e:	e6a1      	b.n	8009c74 <__ieee754_pow+0x444>
 8009f30:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009f80 <__ieee754_pow+0x750>
 8009f34:	e617      	b.n	8009b66 <__ieee754_pow+0x336>
 8009f36:	bf00      	nop
 8009f38:	4a454eef 	.word	0x4a454eef
 8009f3c:	3fca7e28 	.word	0x3fca7e28
 8009f40:	93c9db65 	.word	0x93c9db65
 8009f44:	3fcd864a 	.word	0x3fcd864a
 8009f48:	a91d4101 	.word	0xa91d4101
 8009f4c:	3fd17460 	.word	0x3fd17460
 8009f50:	518f264d 	.word	0x518f264d
 8009f54:	3fd55555 	.word	0x3fd55555
 8009f58:	db6fabff 	.word	0xdb6fabff
 8009f5c:	3fdb6db6 	.word	0x3fdb6db6
 8009f60:	33333303 	.word	0x33333303
 8009f64:	3fe33333 	.word	0x3fe33333
 8009f68:	e0000000 	.word	0xe0000000
 8009f6c:	3feec709 	.word	0x3feec709
 8009f70:	dc3a03fd 	.word	0xdc3a03fd
 8009f74:	3feec709 	.word	0x3feec709
 8009f78:	145b01f5 	.word	0x145b01f5
 8009f7c:	be3e2fe0 	.word	0xbe3e2fe0
 8009f80:	00000000 	.word	0x00000000
 8009f84:	3ff00000 	.word	0x3ff00000
 8009f88:	7ff00000 	.word	0x7ff00000
 8009f8c:	43400000 	.word	0x43400000
 8009f90:	0003988e 	.word	0x0003988e
 8009f94:	000bb679 	.word	0x000bb679
 8009f98:	0800b5f0 	.word	0x0800b5f0
 8009f9c:	3ff00000 	.word	0x3ff00000
 8009fa0:	40080000 	.word	0x40080000
 8009fa4:	0800b610 	.word	0x0800b610
 8009fa8:	0800b600 	.word	0x0800b600
 8009fac:	a3b5      	add	r3, pc, #724	; (adr r3, 800a284 <__ieee754_pow+0xa54>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	4649      	mov	r1, r9
 8009fb6:	f7f6 f919 	bl	80001ec <__adddf3>
 8009fba:	4622      	mov	r2, r4
 8009fbc:	ec41 0b1a 	vmov	d10, r0, r1
 8009fc0:	462b      	mov	r3, r5
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	f7f6 f90f 	bl	80001e8 <__aeabi_dsub>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	460b      	mov	r3, r1
 8009fce:	ec51 0b1a 	vmov	r0, r1, d10
 8009fd2:	f7f6 fd51 	bl	8000a78 <__aeabi_dcmpgt>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	f47f ae04 	bne.w	8009be4 <__ieee754_pow+0x3b4>
 8009fdc:	4aa4      	ldr	r2, [pc, #656]	; (800a270 <__ieee754_pow+0xa40>)
 8009fde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	f340 8108 	ble.w	800a1f8 <__ieee754_pow+0x9c8>
 8009fe8:	151b      	asrs	r3, r3, #20
 8009fea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009fee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009ff2:	fa4a f303 	asr.w	r3, sl, r3
 8009ff6:	445b      	add	r3, fp
 8009ff8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009ffc:	4e9d      	ldr	r6, [pc, #628]	; (800a274 <__ieee754_pow+0xa44>)
 8009ffe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a002:	4116      	asrs	r6, r2
 800a004:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a008:	2000      	movs	r0, #0
 800a00a:	ea23 0106 	bic.w	r1, r3, r6
 800a00e:	f1c2 0214 	rsb	r2, r2, #20
 800a012:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a016:	fa4a fa02 	asr.w	sl, sl, r2
 800a01a:	f1bb 0f00 	cmp.w	fp, #0
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	4620      	mov	r0, r4
 800a024:	4629      	mov	r1, r5
 800a026:	bfb8      	it	lt
 800a028:	f1ca 0a00 	rsblt	sl, sl, #0
 800a02c:	f7f6 f8dc 	bl	80001e8 <__aeabi_dsub>
 800a030:	ec41 0b19 	vmov	d9, r0, r1
 800a034:	4642      	mov	r2, r8
 800a036:	464b      	mov	r3, r9
 800a038:	ec51 0b19 	vmov	r0, r1, d9
 800a03c:	f7f6 f8d6 	bl	80001ec <__adddf3>
 800a040:	a37b      	add	r3, pc, #492	; (adr r3, 800a230 <__ieee754_pow+0xa00>)
 800a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a046:	2000      	movs	r0, #0
 800a048:	4604      	mov	r4, r0
 800a04a:	460d      	mov	r5, r1
 800a04c:	f7f6 fa84 	bl	8000558 <__aeabi_dmul>
 800a050:	ec53 2b19 	vmov	r2, r3, d9
 800a054:	4606      	mov	r6, r0
 800a056:	460f      	mov	r7, r1
 800a058:	4620      	mov	r0, r4
 800a05a:	4629      	mov	r1, r5
 800a05c:	f7f6 f8c4 	bl	80001e8 <__aeabi_dsub>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4640      	mov	r0, r8
 800a066:	4649      	mov	r1, r9
 800a068:	f7f6 f8be 	bl	80001e8 <__aeabi_dsub>
 800a06c:	a372      	add	r3, pc, #456	; (adr r3, 800a238 <__ieee754_pow+0xa08>)
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f7f6 fa71 	bl	8000558 <__aeabi_dmul>
 800a076:	a372      	add	r3, pc, #456	; (adr r3, 800a240 <__ieee754_pow+0xa10>)
 800a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07c:	4680      	mov	r8, r0
 800a07e:	4689      	mov	r9, r1
 800a080:	4620      	mov	r0, r4
 800a082:	4629      	mov	r1, r5
 800a084:	f7f6 fa68 	bl	8000558 <__aeabi_dmul>
 800a088:	4602      	mov	r2, r0
 800a08a:	460b      	mov	r3, r1
 800a08c:	4640      	mov	r0, r8
 800a08e:	4649      	mov	r1, r9
 800a090:	f7f6 f8ac 	bl	80001ec <__adddf3>
 800a094:	4604      	mov	r4, r0
 800a096:	460d      	mov	r5, r1
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4630      	mov	r0, r6
 800a09e:	4639      	mov	r1, r7
 800a0a0:	f7f6 f8a4 	bl	80001ec <__adddf3>
 800a0a4:	4632      	mov	r2, r6
 800a0a6:	463b      	mov	r3, r7
 800a0a8:	4680      	mov	r8, r0
 800a0aa:	4689      	mov	r9, r1
 800a0ac:	f7f6 f89c 	bl	80001e8 <__aeabi_dsub>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	f7f6 f896 	bl	80001e8 <__aeabi_dsub>
 800a0bc:	4642      	mov	r2, r8
 800a0be:	4606      	mov	r6, r0
 800a0c0:	460f      	mov	r7, r1
 800a0c2:	464b      	mov	r3, r9
 800a0c4:	4640      	mov	r0, r8
 800a0c6:	4649      	mov	r1, r9
 800a0c8:	f7f6 fa46 	bl	8000558 <__aeabi_dmul>
 800a0cc:	a35e      	add	r3, pc, #376	; (adr r3, 800a248 <__ieee754_pow+0xa18>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	460d      	mov	r5, r1
 800a0d6:	f7f6 fa3f 	bl	8000558 <__aeabi_dmul>
 800a0da:	a35d      	add	r3, pc, #372	; (adr r3, 800a250 <__ieee754_pow+0xa20>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	f7f6 f882 	bl	80001e8 <__aeabi_dsub>
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	462b      	mov	r3, r5
 800a0e8:	f7f6 fa36 	bl	8000558 <__aeabi_dmul>
 800a0ec:	a35a      	add	r3, pc, #360	; (adr r3, 800a258 <__ieee754_pow+0xa28>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f7f6 f87b 	bl	80001ec <__adddf3>
 800a0f6:	4622      	mov	r2, r4
 800a0f8:	462b      	mov	r3, r5
 800a0fa:	f7f6 fa2d 	bl	8000558 <__aeabi_dmul>
 800a0fe:	a358      	add	r3, pc, #352	; (adr r3, 800a260 <__ieee754_pow+0xa30>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	f7f6 f870 	bl	80001e8 <__aeabi_dsub>
 800a108:	4622      	mov	r2, r4
 800a10a:	462b      	mov	r3, r5
 800a10c:	f7f6 fa24 	bl	8000558 <__aeabi_dmul>
 800a110:	a355      	add	r3, pc, #340	; (adr r3, 800a268 <__ieee754_pow+0xa38>)
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	f7f6 f869 	bl	80001ec <__adddf3>
 800a11a:	4622      	mov	r2, r4
 800a11c:	462b      	mov	r3, r5
 800a11e:	f7f6 fa1b 	bl	8000558 <__aeabi_dmul>
 800a122:	4602      	mov	r2, r0
 800a124:	460b      	mov	r3, r1
 800a126:	4640      	mov	r0, r8
 800a128:	4649      	mov	r1, r9
 800a12a:	f7f6 f85d 	bl	80001e8 <__aeabi_dsub>
 800a12e:	4604      	mov	r4, r0
 800a130:	460d      	mov	r5, r1
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4640      	mov	r0, r8
 800a138:	4649      	mov	r1, r9
 800a13a:	f7f6 fa0d 	bl	8000558 <__aeabi_dmul>
 800a13e:	2200      	movs	r2, #0
 800a140:	ec41 0b19 	vmov	d9, r0, r1
 800a144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a148:	4620      	mov	r0, r4
 800a14a:	4629      	mov	r1, r5
 800a14c:	f7f6 f84c 	bl	80001e8 <__aeabi_dsub>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	ec51 0b19 	vmov	r0, r1, d9
 800a158:	f7f6 fb28 	bl	80007ac <__aeabi_ddiv>
 800a15c:	4632      	mov	r2, r6
 800a15e:	4604      	mov	r4, r0
 800a160:	460d      	mov	r5, r1
 800a162:	463b      	mov	r3, r7
 800a164:	4640      	mov	r0, r8
 800a166:	4649      	mov	r1, r9
 800a168:	f7f6 f9f6 	bl	8000558 <__aeabi_dmul>
 800a16c:	4632      	mov	r2, r6
 800a16e:	463b      	mov	r3, r7
 800a170:	f7f6 f83c 	bl	80001ec <__adddf3>
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	4620      	mov	r0, r4
 800a17a:	4629      	mov	r1, r5
 800a17c:	f7f6 f834 	bl	80001e8 <__aeabi_dsub>
 800a180:	4642      	mov	r2, r8
 800a182:	464b      	mov	r3, r9
 800a184:	f7f6 f830 	bl	80001e8 <__aeabi_dsub>
 800a188:	460b      	mov	r3, r1
 800a18a:	4602      	mov	r2, r0
 800a18c:	493a      	ldr	r1, [pc, #232]	; (800a278 <__ieee754_pow+0xa48>)
 800a18e:	2000      	movs	r0, #0
 800a190:	f7f6 f82a 	bl	80001e8 <__aeabi_dsub>
 800a194:	ec41 0b10 	vmov	d0, r0, r1
 800a198:	ee10 3a90 	vmov	r3, s1
 800a19c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a1a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1a4:	da2b      	bge.n	800a1fe <__ieee754_pow+0x9ce>
 800a1a6:	4650      	mov	r0, sl
 800a1a8:	f001 f8ce 	bl	800b348 <scalbn>
 800a1ac:	ec51 0b10 	vmov	r0, r1, d0
 800a1b0:	ec53 2b18 	vmov	r2, r3, d8
 800a1b4:	f7ff bbed 	b.w	8009992 <__ieee754_pow+0x162>
 800a1b8:	4b30      	ldr	r3, [pc, #192]	; (800a27c <__ieee754_pow+0xa4c>)
 800a1ba:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a1be:	429e      	cmp	r6, r3
 800a1c0:	f77f af0c 	ble.w	8009fdc <__ieee754_pow+0x7ac>
 800a1c4:	4b2e      	ldr	r3, [pc, #184]	; (800a280 <__ieee754_pow+0xa50>)
 800a1c6:	440b      	add	r3, r1
 800a1c8:	4303      	orrs	r3, r0
 800a1ca:	d009      	beq.n	800a1e0 <__ieee754_pow+0x9b0>
 800a1cc:	ec51 0b18 	vmov	r0, r1, d8
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f7f6 fc32 	bl	8000a3c <__aeabi_dcmplt>
 800a1d8:	3800      	subs	r0, #0
 800a1da:	bf18      	it	ne
 800a1dc:	2001      	movne	r0, #1
 800a1de:	e447      	b.n	8009a70 <__ieee754_pow+0x240>
 800a1e0:	4622      	mov	r2, r4
 800a1e2:	462b      	mov	r3, r5
 800a1e4:	f7f6 f800 	bl	80001e8 <__aeabi_dsub>
 800a1e8:	4642      	mov	r2, r8
 800a1ea:	464b      	mov	r3, r9
 800a1ec:	f7f6 fc3a 	bl	8000a64 <__aeabi_dcmpge>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	f43f aef3 	beq.w	8009fdc <__ieee754_pow+0x7ac>
 800a1f6:	e7e9      	b.n	800a1cc <__ieee754_pow+0x99c>
 800a1f8:	f04f 0a00 	mov.w	sl, #0
 800a1fc:	e71a      	b.n	800a034 <__ieee754_pow+0x804>
 800a1fe:	ec51 0b10 	vmov	r0, r1, d0
 800a202:	4619      	mov	r1, r3
 800a204:	e7d4      	b.n	800a1b0 <__ieee754_pow+0x980>
 800a206:	491c      	ldr	r1, [pc, #112]	; (800a278 <__ieee754_pow+0xa48>)
 800a208:	2000      	movs	r0, #0
 800a20a:	f7ff bb30 	b.w	800986e <__ieee754_pow+0x3e>
 800a20e:	2000      	movs	r0, #0
 800a210:	2100      	movs	r1, #0
 800a212:	f7ff bb2c 	b.w	800986e <__ieee754_pow+0x3e>
 800a216:	4630      	mov	r0, r6
 800a218:	4639      	mov	r1, r7
 800a21a:	f7ff bb28 	b.w	800986e <__ieee754_pow+0x3e>
 800a21e:	9204      	str	r2, [sp, #16]
 800a220:	f7ff bb7a 	b.w	8009918 <__ieee754_pow+0xe8>
 800a224:	2300      	movs	r3, #0
 800a226:	f7ff bb64 	b.w	80098f2 <__ieee754_pow+0xc2>
 800a22a:	bf00      	nop
 800a22c:	f3af 8000 	nop.w
 800a230:	00000000 	.word	0x00000000
 800a234:	3fe62e43 	.word	0x3fe62e43
 800a238:	fefa39ef 	.word	0xfefa39ef
 800a23c:	3fe62e42 	.word	0x3fe62e42
 800a240:	0ca86c39 	.word	0x0ca86c39
 800a244:	be205c61 	.word	0xbe205c61
 800a248:	72bea4d0 	.word	0x72bea4d0
 800a24c:	3e663769 	.word	0x3e663769
 800a250:	c5d26bf1 	.word	0xc5d26bf1
 800a254:	3ebbbd41 	.word	0x3ebbbd41
 800a258:	af25de2c 	.word	0xaf25de2c
 800a25c:	3f11566a 	.word	0x3f11566a
 800a260:	16bebd93 	.word	0x16bebd93
 800a264:	3f66c16c 	.word	0x3f66c16c
 800a268:	5555553e 	.word	0x5555553e
 800a26c:	3fc55555 	.word	0x3fc55555
 800a270:	3fe00000 	.word	0x3fe00000
 800a274:	000fffff 	.word	0x000fffff
 800a278:	3ff00000 	.word	0x3ff00000
 800a27c:	4090cbff 	.word	0x4090cbff
 800a280:	3f6f3400 	.word	0x3f6f3400
 800a284:	652b82fe 	.word	0x652b82fe
 800a288:	3c971547 	.word	0x3c971547
 800a28c:	00000000 	.word	0x00000000

0800a290 <__ieee754_rem_pio2>:
 800a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a294:	ed2d 8b02 	vpush	{d8}
 800a298:	ec55 4b10 	vmov	r4, r5, d0
 800a29c:	4bca      	ldr	r3, [pc, #808]	; (800a5c8 <__ieee754_rem_pio2+0x338>)
 800a29e:	b08b      	sub	sp, #44	; 0x2c
 800a2a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a2a4:	4598      	cmp	r8, r3
 800a2a6:	4682      	mov	sl, r0
 800a2a8:	9502      	str	r5, [sp, #8]
 800a2aa:	dc08      	bgt.n	800a2be <__ieee754_rem_pio2+0x2e>
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	ed80 0b00 	vstr	d0, [r0]
 800a2b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a2b8:	f04f 0b00 	mov.w	fp, #0
 800a2bc:	e028      	b.n	800a310 <__ieee754_rem_pio2+0x80>
 800a2be:	4bc3      	ldr	r3, [pc, #780]	; (800a5cc <__ieee754_rem_pio2+0x33c>)
 800a2c0:	4598      	cmp	r8, r3
 800a2c2:	dc78      	bgt.n	800a3b6 <__ieee754_rem_pio2+0x126>
 800a2c4:	9b02      	ldr	r3, [sp, #8]
 800a2c6:	4ec2      	ldr	r6, [pc, #776]	; (800a5d0 <__ieee754_rem_pio2+0x340>)
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	ee10 0a10 	vmov	r0, s0
 800a2ce:	a3b0      	add	r3, pc, #704	; (adr r3, 800a590 <__ieee754_rem_pio2+0x300>)
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	dd39      	ble.n	800a34c <__ieee754_rem_pio2+0xbc>
 800a2d8:	f7f5 ff86 	bl	80001e8 <__aeabi_dsub>
 800a2dc:	45b0      	cmp	r8, r6
 800a2de:	4604      	mov	r4, r0
 800a2e0:	460d      	mov	r5, r1
 800a2e2:	d01b      	beq.n	800a31c <__ieee754_rem_pio2+0x8c>
 800a2e4:	a3ac      	add	r3, pc, #688	; (adr r3, 800a598 <__ieee754_rem_pio2+0x308>)
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	f7f5 ff7d 	bl	80001e8 <__aeabi_dsub>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	e9ca 2300 	strd	r2, r3, [sl]
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	f7f5 ff75 	bl	80001e8 <__aeabi_dsub>
 800a2fe:	a3a6      	add	r3, pc, #664	; (adr r3, 800a598 <__ieee754_rem_pio2+0x308>)
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	f7f5 ff70 	bl	80001e8 <__aeabi_dsub>
 800a308:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a30c:	f04f 0b01 	mov.w	fp, #1
 800a310:	4658      	mov	r0, fp
 800a312:	b00b      	add	sp, #44	; 0x2c
 800a314:	ecbd 8b02 	vpop	{d8}
 800a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a5a0 <__ieee754_rem_pio2+0x310>)
 800a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a322:	f7f5 ff61 	bl	80001e8 <__aeabi_dsub>
 800a326:	a3a0      	add	r3, pc, #640	; (adr r3, 800a5a8 <__ieee754_rem_pio2+0x318>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	4604      	mov	r4, r0
 800a32e:	460d      	mov	r5, r1
 800a330:	f7f5 ff5a 	bl	80001e8 <__aeabi_dsub>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	e9ca 2300 	strd	r2, r3, [sl]
 800a33c:	4620      	mov	r0, r4
 800a33e:	4629      	mov	r1, r5
 800a340:	f7f5 ff52 	bl	80001e8 <__aeabi_dsub>
 800a344:	a398      	add	r3, pc, #608	; (adr r3, 800a5a8 <__ieee754_rem_pio2+0x318>)
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	e7db      	b.n	800a304 <__ieee754_rem_pio2+0x74>
 800a34c:	f7f5 ff4e 	bl	80001ec <__adddf3>
 800a350:	45b0      	cmp	r8, r6
 800a352:	4604      	mov	r4, r0
 800a354:	460d      	mov	r5, r1
 800a356:	d016      	beq.n	800a386 <__ieee754_rem_pio2+0xf6>
 800a358:	a38f      	add	r3, pc, #572	; (adr r3, 800a598 <__ieee754_rem_pio2+0x308>)
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	f7f5 ff45 	bl	80001ec <__adddf3>
 800a362:	4602      	mov	r2, r0
 800a364:	460b      	mov	r3, r1
 800a366:	e9ca 2300 	strd	r2, r3, [sl]
 800a36a:	4620      	mov	r0, r4
 800a36c:	4629      	mov	r1, r5
 800a36e:	f7f5 ff3b 	bl	80001e8 <__aeabi_dsub>
 800a372:	a389      	add	r3, pc, #548	; (adr r3, 800a598 <__ieee754_rem_pio2+0x308>)
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	f7f5 ff38 	bl	80001ec <__adddf3>
 800a37c:	f04f 3bff 	mov.w	fp, #4294967295
 800a380:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a384:	e7c4      	b.n	800a310 <__ieee754_rem_pio2+0x80>
 800a386:	a386      	add	r3, pc, #536	; (adr r3, 800a5a0 <__ieee754_rem_pio2+0x310>)
 800a388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38c:	f7f5 ff2e 	bl	80001ec <__adddf3>
 800a390:	a385      	add	r3, pc, #532	; (adr r3, 800a5a8 <__ieee754_rem_pio2+0x318>)
 800a392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a396:	4604      	mov	r4, r0
 800a398:	460d      	mov	r5, r1
 800a39a:	f7f5 ff27 	bl	80001ec <__adddf3>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	e9ca 2300 	strd	r2, r3, [sl]
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	f7f5 ff1d 	bl	80001e8 <__aeabi_dsub>
 800a3ae:	a37e      	add	r3, pc, #504	; (adr r3, 800a5a8 <__ieee754_rem_pio2+0x318>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	e7e0      	b.n	800a378 <__ieee754_rem_pio2+0xe8>
 800a3b6:	4b87      	ldr	r3, [pc, #540]	; (800a5d4 <__ieee754_rem_pio2+0x344>)
 800a3b8:	4598      	cmp	r8, r3
 800a3ba:	f300 80d9 	bgt.w	800a570 <__ieee754_rem_pio2+0x2e0>
 800a3be:	f000 ff2d 	bl	800b21c <fabs>
 800a3c2:	ec55 4b10 	vmov	r4, r5, d0
 800a3c6:	ee10 0a10 	vmov	r0, s0
 800a3ca:	a379      	add	r3, pc, #484	; (adr r3, 800a5b0 <__ieee754_rem_pio2+0x320>)
 800a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	f7f6 f8c1 	bl	8000558 <__aeabi_dmul>
 800a3d6:	4b80      	ldr	r3, [pc, #512]	; (800a5d8 <__ieee754_rem_pio2+0x348>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f7f5 ff07 	bl	80001ec <__adddf3>
 800a3de:	f7f6 fb6b 	bl	8000ab8 <__aeabi_d2iz>
 800a3e2:	4683      	mov	fp, r0
 800a3e4:	f7f6 f84e 	bl	8000484 <__aeabi_i2d>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	ec43 2b18 	vmov	d8, r2, r3
 800a3f0:	a367      	add	r3, pc, #412	; (adr r3, 800a590 <__ieee754_rem_pio2+0x300>)
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	f7f6 f8af 	bl	8000558 <__aeabi_dmul>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4620      	mov	r0, r4
 800a400:	4629      	mov	r1, r5
 800a402:	f7f5 fef1 	bl	80001e8 <__aeabi_dsub>
 800a406:	a364      	add	r3, pc, #400	; (adr r3, 800a598 <__ieee754_rem_pio2+0x308>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	4606      	mov	r6, r0
 800a40e:	460f      	mov	r7, r1
 800a410:	ec51 0b18 	vmov	r0, r1, d8
 800a414:	f7f6 f8a0 	bl	8000558 <__aeabi_dmul>
 800a418:	f1bb 0f1f 	cmp.w	fp, #31
 800a41c:	4604      	mov	r4, r0
 800a41e:	460d      	mov	r5, r1
 800a420:	dc0d      	bgt.n	800a43e <__ieee754_rem_pio2+0x1ae>
 800a422:	4b6e      	ldr	r3, [pc, #440]	; (800a5dc <__ieee754_rem_pio2+0x34c>)
 800a424:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42c:	4543      	cmp	r3, r8
 800a42e:	d006      	beq.n	800a43e <__ieee754_rem_pio2+0x1ae>
 800a430:	4622      	mov	r2, r4
 800a432:	462b      	mov	r3, r5
 800a434:	4630      	mov	r0, r6
 800a436:	4639      	mov	r1, r7
 800a438:	f7f5 fed6 	bl	80001e8 <__aeabi_dsub>
 800a43c:	e00f      	b.n	800a45e <__ieee754_rem_pio2+0x1ce>
 800a43e:	462b      	mov	r3, r5
 800a440:	4622      	mov	r2, r4
 800a442:	4630      	mov	r0, r6
 800a444:	4639      	mov	r1, r7
 800a446:	f7f5 fecf 	bl	80001e8 <__aeabi_dsub>
 800a44a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a44e:	9303      	str	r3, [sp, #12]
 800a450:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a454:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a458:	f1b8 0f10 	cmp.w	r8, #16
 800a45c:	dc02      	bgt.n	800a464 <__ieee754_rem_pio2+0x1d4>
 800a45e:	e9ca 0100 	strd	r0, r1, [sl]
 800a462:	e039      	b.n	800a4d8 <__ieee754_rem_pio2+0x248>
 800a464:	a34e      	add	r3, pc, #312	; (adr r3, 800a5a0 <__ieee754_rem_pio2+0x310>)
 800a466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46a:	ec51 0b18 	vmov	r0, r1, d8
 800a46e:	f7f6 f873 	bl	8000558 <__aeabi_dmul>
 800a472:	4604      	mov	r4, r0
 800a474:	460d      	mov	r5, r1
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4630      	mov	r0, r6
 800a47c:	4639      	mov	r1, r7
 800a47e:	f7f5 feb3 	bl	80001e8 <__aeabi_dsub>
 800a482:	4602      	mov	r2, r0
 800a484:	460b      	mov	r3, r1
 800a486:	4680      	mov	r8, r0
 800a488:	4689      	mov	r9, r1
 800a48a:	4630      	mov	r0, r6
 800a48c:	4639      	mov	r1, r7
 800a48e:	f7f5 feab 	bl	80001e8 <__aeabi_dsub>
 800a492:	4622      	mov	r2, r4
 800a494:	462b      	mov	r3, r5
 800a496:	f7f5 fea7 	bl	80001e8 <__aeabi_dsub>
 800a49a:	a343      	add	r3, pc, #268	; (adr r3, 800a5a8 <__ieee754_rem_pio2+0x318>)
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	460d      	mov	r5, r1
 800a4a4:	ec51 0b18 	vmov	r0, r1, d8
 800a4a8:	f7f6 f856 	bl	8000558 <__aeabi_dmul>
 800a4ac:	4622      	mov	r2, r4
 800a4ae:	462b      	mov	r3, r5
 800a4b0:	f7f5 fe9a 	bl	80001e8 <__aeabi_dsub>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	4640      	mov	r0, r8
 800a4be:	4649      	mov	r1, r9
 800a4c0:	f7f5 fe92 	bl	80001e8 <__aeabi_dsub>
 800a4c4:	9a03      	ldr	r2, [sp, #12]
 800a4c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	2b31      	cmp	r3, #49	; 0x31
 800a4ce:	dc24      	bgt.n	800a51a <__ieee754_rem_pio2+0x28a>
 800a4d0:	e9ca 0100 	strd	r0, r1, [sl]
 800a4d4:	4646      	mov	r6, r8
 800a4d6:	464f      	mov	r7, r9
 800a4d8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a4dc:	4630      	mov	r0, r6
 800a4de:	4642      	mov	r2, r8
 800a4e0:	464b      	mov	r3, r9
 800a4e2:	4639      	mov	r1, r7
 800a4e4:	f7f5 fe80 	bl	80001e8 <__aeabi_dsub>
 800a4e8:	462b      	mov	r3, r5
 800a4ea:	4622      	mov	r2, r4
 800a4ec:	f7f5 fe7c 	bl	80001e8 <__aeabi_dsub>
 800a4f0:	9b02      	ldr	r3, [sp, #8]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a4f8:	f6bf af0a 	bge.w	800a310 <__ieee754_rem_pio2+0x80>
 800a4fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a500:	f8ca 3004 	str.w	r3, [sl, #4]
 800a504:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a508:	f8ca 8000 	str.w	r8, [sl]
 800a50c:	f8ca 0008 	str.w	r0, [sl, #8]
 800a510:	f8ca 300c 	str.w	r3, [sl, #12]
 800a514:	f1cb 0b00 	rsb	fp, fp, #0
 800a518:	e6fa      	b.n	800a310 <__ieee754_rem_pio2+0x80>
 800a51a:	a327      	add	r3, pc, #156	; (adr r3, 800a5b8 <__ieee754_rem_pio2+0x328>)
 800a51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a520:	ec51 0b18 	vmov	r0, r1, d8
 800a524:	f7f6 f818 	bl	8000558 <__aeabi_dmul>
 800a528:	4604      	mov	r4, r0
 800a52a:	460d      	mov	r5, r1
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	4640      	mov	r0, r8
 800a532:	4649      	mov	r1, r9
 800a534:	f7f5 fe58 	bl	80001e8 <__aeabi_dsub>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	4606      	mov	r6, r0
 800a53e:	460f      	mov	r7, r1
 800a540:	4640      	mov	r0, r8
 800a542:	4649      	mov	r1, r9
 800a544:	f7f5 fe50 	bl	80001e8 <__aeabi_dsub>
 800a548:	4622      	mov	r2, r4
 800a54a:	462b      	mov	r3, r5
 800a54c:	f7f5 fe4c 	bl	80001e8 <__aeabi_dsub>
 800a550:	a31b      	add	r3, pc, #108	; (adr r3, 800a5c0 <__ieee754_rem_pio2+0x330>)
 800a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a556:	4604      	mov	r4, r0
 800a558:	460d      	mov	r5, r1
 800a55a:	ec51 0b18 	vmov	r0, r1, d8
 800a55e:	f7f5 fffb 	bl	8000558 <__aeabi_dmul>
 800a562:	4622      	mov	r2, r4
 800a564:	462b      	mov	r3, r5
 800a566:	f7f5 fe3f 	bl	80001e8 <__aeabi_dsub>
 800a56a:	4604      	mov	r4, r0
 800a56c:	460d      	mov	r5, r1
 800a56e:	e75f      	b.n	800a430 <__ieee754_rem_pio2+0x1a0>
 800a570:	4b1b      	ldr	r3, [pc, #108]	; (800a5e0 <__ieee754_rem_pio2+0x350>)
 800a572:	4598      	cmp	r8, r3
 800a574:	dd36      	ble.n	800a5e4 <__ieee754_rem_pio2+0x354>
 800a576:	ee10 2a10 	vmov	r2, s0
 800a57a:	462b      	mov	r3, r5
 800a57c:	4620      	mov	r0, r4
 800a57e:	4629      	mov	r1, r5
 800a580:	f7f5 fe32 	bl	80001e8 <__aeabi_dsub>
 800a584:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a588:	e9ca 0100 	strd	r0, r1, [sl]
 800a58c:	e694      	b.n	800a2b8 <__ieee754_rem_pio2+0x28>
 800a58e:	bf00      	nop
 800a590:	54400000 	.word	0x54400000
 800a594:	3ff921fb 	.word	0x3ff921fb
 800a598:	1a626331 	.word	0x1a626331
 800a59c:	3dd0b461 	.word	0x3dd0b461
 800a5a0:	1a600000 	.word	0x1a600000
 800a5a4:	3dd0b461 	.word	0x3dd0b461
 800a5a8:	2e037073 	.word	0x2e037073
 800a5ac:	3ba3198a 	.word	0x3ba3198a
 800a5b0:	6dc9c883 	.word	0x6dc9c883
 800a5b4:	3fe45f30 	.word	0x3fe45f30
 800a5b8:	2e000000 	.word	0x2e000000
 800a5bc:	3ba3198a 	.word	0x3ba3198a
 800a5c0:	252049c1 	.word	0x252049c1
 800a5c4:	397b839a 	.word	0x397b839a
 800a5c8:	3fe921fb 	.word	0x3fe921fb
 800a5cc:	4002d97b 	.word	0x4002d97b
 800a5d0:	3ff921fb 	.word	0x3ff921fb
 800a5d4:	413921fb 	.word	0x413921fb
 800a5d8:	3fe00000 	.word	0x3fe00000
 800a5dc:	0800b620 	.word	0x0800b620
 800a5e0:	7fefffff 	.word	0x7fefffff
 800a5e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a5e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a5ec:	ee10 0a10 	vmov	r0, s0
 800a5f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a5f4:	ee10 6a10 	vmov	r6, s0
 800a5f8:	460f      	mov	r7, r1
 800a5fa:	f7f6 fa5d 	bl	8000ab8 <__aeabi_d2iz>
 800a5fe:	f7f5 ff41 	bl	8000484 <__aeabi_i2d>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4630      	mov	r0, r6
 800a608:	4639      	mov	r1, r7
 800a60a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a60e:	f7f5 fdeb 	bl	80001e8 <__aeabi_dsub>
 800a612:	4b23      	ldr	r3, [pc, #140]	; (800a6a0 <__ieee754_rem_pio2+0x410>)
 800a614:	2200      	movs	r2, #0
 800a616:	f7f5 ff9f 	bl	8000558 <__aeabi_dmul>
 800a61a:	460f      	mov	r7, r1
 800a61c:	4606      	mov	r6, r0
 800a61e:	f7f6 fa4b 	bl	8000ab8 <__aeabi_d2iz>
 800a622:	f7f5 ff2f 	bl	8000484 <__aeabi_i2d>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	4630      	mov	r0, r6
 800a62c:	4639      	mov	r1, r7
 800a62e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a632:	f7f5 fdd9 	bl	80001e8 <__aeabi_dsub>
 800a636:	4b1a      	ldr	r3, [pc, #104]	; (800a6a0 <__ieee754_rem_pio2+0x410>)
 800a638:	2200      	movs	r2, #0
 800a63a:	f7f5 ff8d 	bl	8000558 <__aeabi_dmul>
 800a63e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a642:	ad04      	add	r5, sp, #16
 800a644:	f04f 0803 	mov.w	r8, #3
 800a648:	46a9      	mov	r9, r5
 800a64a:	2600      	movs	r6, #0
 800a64c:	2700      	movs	r7, #0
 800a64e:	4632      	mov	r2, r6
 800a650:	463b      	mov	r3, r7
 800a652:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a656:	46c3      	mov	fp, r8
 800a658:	3d08      	subs	r5, #8
 800a65a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a65e:	f7f6 f9e3 	bl	8000a28 <__aeabi_dcmpeq>
 800a662:	2800      	cmp	r0, #0
 800a664:	d1f3      	bne.n	800a64e <__ieee754_rem_pio2+0x3be>
 800a666:	4b0f      	ldr	r3, [pc, #60]	; (800a6a4 <__ieee754_rem_pio2+0x414>)
 800a668:	9301      	str	r3, [sp, #4]
 800a66a:	2302      	movs	r3, #2
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	4622      	mov	r2, r4
 800a670:	465b      	mov	r3, fp
 800a672:	4651      	mov	r1, sl
 800a674:	4648      	mov	r0, r9
 800a676:	f000 f993 	bl	800a9a0 <__kernel_rem_pio2>
 800a67a:	9b02      	ldr	r3, [sp, #8]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	4683      	mov	fp, r0
 800a680:	f6bf ae46 	bge.w	800a310 <__ieee754_rem_pio2+0x80>
 800a684:	e9da 2100 	ldrd	r2, r1, [sl]
 800a688:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a68c:	e9ca 2300 	strd	r2, r3, [sl]
 800a690:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a694:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a698:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a69c:	e73a      	b.n	800a514 <__ieee754_rem_pio2+0x284>
 800a69e:	bf00      	nop
 800a6a0:	41700000 	.word	0x41700000
 800a6a4:	0800b6a0 	.word	0x0800b6a0

0800a6a8 <__ieee754_sqrt>:
 800a6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ac:	ec55 4b10 	vmov	r4, r5, d0
 800a6b0:	4e55      	ldr	r6, [pc, #340]	; (800a808 <__ieee754_sqrt+0x160>)
 800a6b2:	43ae      	bics	r6, r5
 800a6b4:	ee10 0a10 	vmov	r0, s0
 800a6b8:	ee10 3a10 	vmov	r3, s0
 800a6bc:	462a      	mov	r2, r5
 800a6be:	4629      	mov	r1, r5
 800a6c0:	d110      	bne.n	800a6e4 <__ieee754_sqrt+0x3c>
 800a6c2:	ee10 2a10 	vmov	r2, s0
 800a6c6:	462b      	mov	r3, r5
 800a6c8:	f7f5 ff46 	bl	8000558 <__aeabi_dmul>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	f7f5 fd8a 	bl	80001ec <__adddf3>
 800a6d8:	4604      	mov	r4, r0
 800a6da:	460d      	mov	r5, r1
 800a6dc:	ec45 4b10 	vmov	d0, r4, r5
 800a6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e4:	2d00      	cmp	r5, #0
 800a6e6:	dc10      	bgt.n	800a70a <__ieee754_sqrt+0x62>
 800a6e8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a6ec:	4330      	orrs	r0, r6
 800a6ee:	d0f5      	beq.n	800a6dc <__ieee754_sqrt+0x34>
 800a6f0:	b15d      	cbz	r5, 800a70a <__ieee754_sqrt+0x62>
 800a6f2:	ee10 2a10 	vmov	r2, s0
 800a6f6:	462b      	mov	r3, r5
 800a6f8:	ee10 0a10 	vmov	r0, s0
 800a6fc:	f7f5 fd74 	bl	80001e8 <__aeabi_dsub>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	f7f6 f852 	bl	80007ac <__aeabi_ddiv>
 800a708:	e7e6      	b.n	800a6d8 <__ieee754_sqrt+0x30>
 800a70a:	1512      	asrs	r2, r2, #20
 800a70c:	d074      	beq.n	800a7f8 <__ieee754_sqrt+0x150>
 800a70e:	07d4      	lsls	r4, r2, #31
 800a710:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a714:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a71c:	bf5e      	ittt	pl
 800a71e:	0fda      	lsrpl	r2, r3, #31
 800a720:	005b      	lslpl	r3, r3, #1
 800a722:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a726:	2400      	movs	r4, #0
 800a728:	0fda      	lsrs	r2, r3, #31
 800a72a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a72e:	107f      	asrs	r7, r7, #1
 800a730:	005b      	lsls	r3, r3, #1
 800a732:	2516      	movs	r5, #22
 800a734:	4620      	mov	r0, r4
 800a736:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a73a:	1886      	adds	r6, r0, r2
 800a73c:	428e      	cmp	r6, r1
 800a73e:	bfde      	ittt	le
 800a740:	1b89      	suble	r1, r1, r6
 800a742:	18b0      	addle	r0, r6, r2
 800a744:	18a4      	addle	r4, r4, r2
 800a746:	0049      	lsls	r1, r1, #1
 800a748:	3d01      	subs	r5, #1
 800a74a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a74e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a752:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a756:	d1f0      	bne.n	800a73a <__ieee754_sqrt+0x92>
 800a758:	462a      	mov	r2, r5
 800a75a:	f04f 0e20 	mov.w	lr, #32
 800a75e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a762:	4281      	cmp	r1, r0
 800a764:	eb06 0c05 	add.w	ip, r6, r5
 800a768:	dc02      	bgt.n	800a770 <__ieee754_sqrt+0xc8>
 800a76a:	d113      	bne.n	800a794 <__ieee754_sqrt+0xec>
 800a76c:	459c      	cmp	ip, r3
 800a76e:	d811      	bhi.n	800a794 <__ieee754_sqrt+0xec>
 800a770:	f1bc 0f00 	cmp.w	ip, #0
 800a774:	eb0c 0506 	add.w	r5, ip, r6
 800a778:	da43      	bge.n	800a802 <__ieee754_sqrt+0x15a>
 800a77a:	2d00      	cmp	r5, #0
 800a77c:	db41      	blt.n	800a802 <__ieee754_sqrt+0x15a>
 800a77e:	f100 0801 	add.w	r8, r0, #1
 800a782:	1a09      	subs	r1, r1, r0
 800a784:	459c      	cmp	ip, r3
 800a786:	bf88      	it	hi
 800a788:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a78c:	eba3 030c 	sub.w	r3, r3, ip
 800a790:	4432      	add	r2, r6
 800a792:	4640      	mov	r0, r8
 800a794:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a798:	f1be 0e01 	subs.w	lr, lr, #1
 800a79c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a7a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a7a4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a7a8:	d1db      	bne.n	800a762 <__ieee754_sqrt+0xba>
 800a7aa:	430b      	orrs	r3, r1
 800a7ac:	d006      	beq.n	800a7bc <__ieee754_sqrt+0x114>
 800a7ae:	1c50      	adds	r0, r2, #1
 800a7b0:	bf13      	iteet	ne
 800a7b2:	3201      	addne	r2, #1
 800a7b4:	3401      	addeq	r4, #1
 800a7b6:	4672      	moveq	r2, lr
 800a7b8:	f022 0201 	bicne.w	r2, r2, #1
 800a7bc:	1063      	asrs	r3, r4, #1
 800a7be:	0852      	lsrs	r2, r2, #1
 800a7c0:	07e1      	lsls	r1, r4, #31
 800a7c2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a7c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a7ca:	bf48      	it	mi
 800a7cc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a7d0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	e781      	b.n	800a6dc <__ieee754_sqrt+0x34>
 800a7d8:	0ad9      	lsrs	r1, r3, #11
 800a7da:	3815      	subs	r0, #21
 800a7dc:	055b      	lsls	r3, r3, #21
 800a7de:	2900      	cmp	r1, #0
 800a7e0:	d0fa      	beq.n	800a7d8 <__ieee754_sqrt+0x130>
 800a7e2:	02cd      	lsls	r5, r1, #11
 800a7e4:	d50a      	bpl.n	800a7fc <__ieee754_sqrt+0x154>
 800a7e6:	f1c2 0420 	rsb	r4, r2, #32
 800a7ea:	fa23 f404 	lsr.w	r4, r3, r4
 800a7ee:	1e55      	subs	r5, r2, #1
 800a7f0:	4093      	lsls	r3, r2
 800a7f2:	4321      	orrs	r1, r4
 800a7f4:	1b42      	subs	r2, r0, r5
 800a7f6:	e78a      	b.n	800a70e <__ieee754_sqrt+0x66>
 800a7f8:	4610      	mov	r0, r2
 800a7fa:	e7f0      	b.n	800a7de <__ieee754_sqrt+0x136>
 800a7fc:	0049      	lsls	r1, r1, #1
 800a7fe:	3201      	adds	r2, #1
 800a800:	e7ef      	b.n	800a7e2 <__ieee754_sqrt+0x13a>
 800a802:	4680      	mov	r8, r0
 800a804:	e7bd      	b.n	800a782 <__ieee754_sqrt+0xda>
 800a806:	bf00      	nop
 800a808:	7ff00000 	.word	0x7ff00000
 800a80c:	00000000 	.word	0x00000000

0800a810 <__kernel_cos>:
 800a810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a814:	ec57 6b10 	vmov	r6, r7, d0
 800a818:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a81c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a820:	ed8d 1b00 	vstr	d1, [sp]
 800a824:	da07      	bge.n	800a836 <__kernel_cos+0x26>
 800a826:	ee10 0a10 	vmov	r0, s0
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f6 f944 	bl	8000ab8 <__aeabi_d2iz>
 800a830:	2800      	cmp	r0, #0
 800a832:	f000 8088 	beq.w	800a946 <__kernel_cos+0x136>
 800a836:	4632      	mov	r2, r6
 800a838:	463b      	mov	r3, r7
 800a83a:	4630      	mov	r0, r6
 800a83c:	4639      	mov	r1, r7
 800a83e:	f7f5 fe8b 	bl	8000558 <__aeabi_dmul>
 800a842:	4b51      	ldr	r3, [pc, #324]	; (800a988 <__kernel_cos+0x178>)
 800a844:	2200      	movs	r2, #0
 800a846:	4604      	mov	r4, r0
 800a848:	460d      	mov	r5, r1
 800a84a:	f7f5 fe85 	bl	8000558 <__aeabi_dmul>
 800a84e:	a340      	add	r3, pc, #256	; (adr r3, 800a950 <__kernel_cos+0x140>)
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	4682      	mov	sl, r0
 800a856:	468b      	mov	fp, r1
 800a858:	4620      	mov	r0, r4
 800a85a:	4629      	mov	r1, r5
 800a85c:	f7f5 fe7c 	bl	8000558 <__aeabi_dmul>
 800a860:	a33d      	add	r3, pc, #244	; (adr r3, 800a958 <__kernel_cos+0x148>)
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	f7f5 fcc1 	bl	80001ec <__adddf3>
 800a86a:	4622      	mov	r2, r4
 800a86c:	462b      	mov	r3, r5
 800a86e:	f7f5 fe73 	bl	8000558 <__aeabi_dmul>
 800a872:	a33b      	add	r3, pc, #236	; (adr r3, 800a960 <__kernel_cos+0x150>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	f7f5 fcb6 	bl	80001e8 <__aeabi_dsub>
 800a87c:	4622      	mov	r2, r4
 800a87e:	462b      	mov	r3, r5
 800a880:	f7f5 fe6a 	bl	8000558 <__aeabi_dmul>
 800a884:	a338      	add	r3, pc, #224	; (adr r3, 800a968 <__kernel_cos+0x158>)
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	f7f5 fcaf 	bl	80001ec <__adddf3>
 800a88e:	4622      	mov	r2, r4
 800a890:	462b      	mov	r3, r5
 800a892:	f7f5 fe61 	bl	8000558 <__aeabi_dmul>
 800a896:	a336      	add	r3, pc, #216	; (adr r3, 800a970 <__kernel_cos+0x160>)
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	f7f5 fca4 	bl	80001e8 <__aeabi_dsub>
 800a8a0:	4622      	mov	r2, r4
 800a8a2:	462b      	mov	r3, r5
 800a8a4:	f7f5 fe58 	bl	8000558 <__aeabi_dmul>
 800a8a8:	a333      	add	r3, pc, #204	; (adr r3, 800a978 <__kernel_cos+0x168>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f7f5 fc9d 	bl	80001ec <__adddf3>
 800a8b2:	4622      	mov	r2, r4
 800a8b4:	462b      	mov	r3, r5
 800a8b6:	f7f5 fe4f 	bl	8000558 <__aeabi_dmul>
 800a8ba:	4622      	mov	r2, r4
 800a8bc:	462b      	mov	r3, r5
 800a8be:	f7f5 fe4b 	bl	8000558 <__aeabi_dmul>
 800a8c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	460d      	mov	r5, r1
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	4639      	mov	r1, r7
 800a8ce:	f7f5 fe43 	bl	8000558 <__aeabi_dmul>
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f7f5 fc85 	bl	80001e8 <__aeabi_dsub>
 800a8de:	4b2b      	ldr	r3, [pc, #172]	; (800a98c <__kernel_cos+0x17c>)
 800a8e0:	4598      	cmp	r8, r3
 800a8e2:	4606      	mov	r6, r0
 800a8e4:	460f      	mov	r7, r1
 800a8e6:	dc10      	bgt.n	800a90a <__kernel_cos+0xfa>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	4650      	mov	r0, sl
 800a8ee:	4659      	mov	r1, fp
 800a8f0:	f7f5 fc7a 	bl	80001e8 <__aeabi_dsub>
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4926      	ldr	r1, [pc, #152]	; (800a990 <__kernel_cos+0x180>)
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	f7f5 fc74 	bl	80001e8 <__aeabi_dsub>
 800a900:	ec41 0b10 	vmov	d0, r0, r1
 800a904:	b003      	add	sp, #12
 800a906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90a:	4b22      	ldr	r3, [pc, #136]	; (800a994 <__kernel_cos+0x184>)
 800a90c:	4920      	ldr	r1, [pc, #128]	; (800a990 <__kernel_cos+0x180>)
 800a90e:	4598      	cmp	r8, r3
 800a910:	bfcc      	ite	gt
 800a912:	4d21      	ldrgt	r5, [pc, #132]	; (800a998 <__kernel_cos+0x188>)
 800a914:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a918:	2400      	movs	r4, #0
 800a91a:	4622      	mov	r2, r4
 800a91c:	462b      	mov	r3, r5
 800a91e:	2000      	movs	r0, #0
 800a920:	f7f5 fc62 	bl	80001e8 <__aeabi_dsub>
 800a924:	4622      	mov	r2, r4
 800a926:	4680      	mov	r8, r0
 800a928:	4689      	mov	r9, r1
 800a92a:	462b      	mov	r3, r5
 800a92c:	4650      	mov	r0, sl
 800a92e:	4659      	mov	r1, fp
 800a930:	f7f5 fc5a 	bl	80001e8 <__aeabi_dsub>
 800a934:	4632      	mov	r2, r6
 800a936:	463b      	mov	r3, r7
 800a938:	f7f5 fc56 	bl	80001e8 <__aeabi_dsub>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4640      	mov	r0, r8
 800a942:	4649      	mov	r1, r9
 800a944:	e7da      	b.n	800a8fc <__kernel_cos+0xec>
 800a946:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a980 <__kernel_cos+0x170>
 800a94a:	e7db      	b.n	800a904 <__kernel_cos+0xf4>
 800a94c:	f3af 8000 	nop.w
 800a950:	be8838d4 	.word	0xbe8838d4
 800a954:	bda8fae9 	.word	0xbda8fae9
 800a958:	bdb4b1c4 	.word	0xbdb4b1c4
 800a95c:	3e21ee9e 	.word	0x3e21ee9e
 800a960:	809c52ad 	.word	0x809c52ad
 800a964:	3e927e4f 	.word	0x3e927e4f
 800a968:	19cb1590 	.word	0x19cb1590
 800a96c:	3efa01a0 	.word	0x3efa01a0
 800a970:	16c15177 	.word	0x16c15177
 800a974:	3f56c16c 	.word	0x3f56c16c
 800a978:	5555554c 	.word	0x5555554c
 800a97c:	3fa55555 	.word	0x3fa55555
 800a980:	00000000 	.word	0x00000000
 800a984:	3ff00000 	.word	0x3ff00000
 800a988:	3fe00000 	.word	0x3fe00000
 800a98c:	3fd33332 	.word	0x3fd33332
 800a990:	3ff00000 	.word	0x3ff00000
 800a994:	3fe90000 	.word	0x3fe90000
 800a998:	3fd20000 	.word	0x3fd20000
 800a99c:	00000000 	.word	0x00000000

0800a9a0 <__kernel_rem_pio2>:
 800a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	ed2d 8b02 	vpush	{d8}
 800a9a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a9ac:	f112 0f14 	cmn.w	r2, #20
 800a9b0:	9308      	str	r3, [sp, #32]
 800a9b2:	9101      	str	r1, [sp, #4]
 800a9b4:	4bc4      	ldr	r3, [pc, #784]	; (800acc8 <__kernel_rem_pio2+0x328>)
 800a9b6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a9b8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a9ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9be:	9302      	str	r3, [sp, #8]
 800a9c0:	9b08      	ldr	r3, [sp, #32]
 800a9c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9c6:	bfa8      	it	ge
 800a9c8:	1ed4      	subge	r4, r2, #3
 800a9ca:	9306      	str	r3, [sp, #24]
 800a9cc:	bfb2      	itee	lt
 800a9ce:	2400      	movlt	r4, #0
 800a9d0:	2318      	movge	r3, #24
 800a9d2:	fb94 f4f3 	sdivge	r4, r4, r3
 800a9d6:	f06f 0317 	mvn.w	r3, #23
 800a9da:	fb04 3303 	mla	r3, r4, r3, r3
 800a9de:	eb03 0a02 	add.w	sl, r3, r2
 800a9e2:	9b02      	ldr	r3, [sp, #8]
 800a9e4:	9a06      	ldr	r2, [sp, #24]
 800a9e6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800acb8 <__kernel_rem_pio2+0x318>
 800a9ea:	eb03 0802 	add.w	r8, r3, r2
 800a9ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a9f0:	1aa7      	subs	r7, r4, r2
 800a9f2:	ae22      	add	r6, sp, #136	; 0x88
 800a9f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a9f8:	2500      	movs	r5, #0
 800a9fa:	4545      	cmp	r5, r8
 800a9fc:	dd13      	ble.n	800aa26 <__kernel_rem_pio2+0x86>
 800a9fe:	9b08      	ldr	r3, [sp, #32]
 800aa00:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800acb8 <__kernel_rem_pio2+0x318>
 800aa04:	aa22      	add	r2, sp, #136	; 0x88
 800aa06:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800aa0a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800aa0e:	f04f 0800 	mov.w	r8, #0
 800aa12:	9b02      	ldr	r3, [sp, #8]
 800aa14:	4598      	cmp	r8, r3
 800aa16:	dc2f      	bgt.n	800aa78 <__kernel_rem_pio2+0xd8>
 800aa18:	ed8d 8b04 	vstr	d8, [sp, #16]
 800aa1c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800aa20:	462f      	mov	r7, r5
 800aa22:	2600      	movs	r6, #0
 800aa24:	e01b      	b.n	800aa5e <__kernel_rem_pio2+0xbe>
 800aa26:	42ef      	cmn	r7, r5
 800aa28:	d407      	bmi.n	800aa3a <__kernel_rem_pio2+0x9a>
 800aa2a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aa2e:	f7f5 fd29 	bl	8000484 <__aeabi_i2d>
 800aa32:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aa36:	3501      	adds	r5, #1
 800aa38:	e7df      	b.n	800a9fa <__kernel_rem_pio2+0x5a>
 800aa3a:	ec51 0b18 	vmov	r0, r1, d8
 800aa3e:	e7f8      	b.n	800aa32 <__kernel_rem_pio2+0x92>
 800aa40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800aa48:	f7f5 fd86 	bl	8000558 <__aeabi_dmul>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa54:	f7f5 fbca 	bl	80001ec <__adddf3>
 800aa58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa5c:	3601      	adds	r6, #1
 800aa5e:	9b06      	ldr	r3, [sp, #24]
 800aa60:	429e      	cmp	r6, r3
 800aa62:	f1a7 0708 	sub.w	r7, r7, #8
 800aa66:	ddeb      	ble.n	800aa40 <__kernel_rem_pio2+0xa0>
 800aa68:	ed9d 7b04 	vldr	d7, [sp, #16]
 800aa6c:	f108 0801 	add.w	r8, r8, #1
 800aa70:	ecab 7b02 	vstmia	fp!, {d7}
 800aa74:	3508      	adds	r5, #8
 800aa76:	e7cc      	b.n	800aa12 <__kernel_rem_pio2+0x72>
 800aa78:	9b02      	ldr	r3, [sp, #8]
 800aa7a:	aa0e      	add	r2, sp, #56	; 0x38
 800aa7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa80:	930d      	str	r3, [sp, #52]	; 0x34
 800aa82:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800aa84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aa88:	9c02      	ldr	r4, [sp, #8]
 800aa8a:	930c      	str	r3, [sp, #48]	; 0x30
 800aa8c:	00e3      	lsls	r3, r4, #3
 800aa8e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa90:	ab9a      	add	r3, sp, #616	; 0x268
 800aa92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa96:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800aa9a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800aa9e:	ab72      	add	r3, sp, #456	; 0x1c8
 800aaa0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800aaa4:	46c3      	mov	fp, r8
 800aaa6:	46a1      	mov	r9, r4
 800aaa8:	f1b9 0f00 	cmp.w	r9, #0
 800aaac:	f1a5 0508 	sub.w	r5, r5, #8
 800aab0:	dc77      	bgt.n	800aba2 <__kernel_rem_pio2+0x202>
 800aab2:	ec47 6b10 	vmov	d0, r6, r7
 800aab6:	4650      	mov	r0, sl
 800aab8:	f000 fc46 	bl	800b348 <scalbn>
 800aabc:	ec57 6b10 	vmov	r6, r7, d0
 800aac0:	2200      	movs	r2, #0
 800aac2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800aac6:	ee10 0a10 	vmov	r0, s0
 800aaca:	4639      	mov	r1, r7
 800aacc:	f7f5 fd44 	bl	8000558 <__aeabi_dmul>
 800aad0:	ec41 0b10 	vmov	d0, r0, r1
 800aad4:	f000 fbb8 	bl	800b248 <floor>
 800aad8:	4b7c      	ldr	r3, [pc, #496]	; (800accc <__kernel_rem_pio2+0x32c>)
 800aada:	ec51 0b10 	vmov	r0, r1, d0
 800aade:	2200      	movs	r2, #0
 800aae0:	f7f5 fd3a 	bl	8000558 <__aeabi_dmul>
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4630      	mov	r0, r6
 800aaea:	4639      	mov	r1, r7
 800aaec:	f7f5 fb7c 	bl	80001e8 <__aeabi_dsub>
 800aaf0:	460f      	mov	r7, r1
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	f7f5 ffe0 	bl	8000ab8 <__aeabi_d2iz>
 800aaf8:	9004      	str	r0, [sp, #16]
 800aafa:	f7f5 fcc3 	bl	8000484 <__aeabi_i2d>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	4630      	mov	r0, r6
 800ab04:	4639      	mov	r1, r7
 800ab06:	f7f5 fb6f 	bl	80001e8 <__aeabi_dsub>
 800ab0a:	f1ba 0f00 	cmp.w	sl, #0
 800ab0e:	4606      	mov	r6, r0
 800ab10:	460f      	mov	r7, r1
 800ab12:	dd6d      	ble.n	800abf0 <__kernel_rem_pio2+0x250>
 800ab14:	1e62      	subs	r2, r4, #1
 800ab16:	ab0e      	add	r3, sp, #56	; 0x38
 800ab18:	9d04      	ldr	r5, [sp, #16]
 800ab1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ab1e:	f1ca 0118 	rsb	r1, sl, #24
 800ab22:	fa40 f301 	asr.w	r3, r0, r1
 800ab26:	441d      	add	r5, r3
 800ab28:	408b      	lsls	r3, r1
 800ab2a:	1ac0      	subs	r0, r0, r3
 800ab2c:	ab0e      	add	r3, sp, #56	; 0x38
 800ab2e:	9504      	str	r5, [sp, #16]
 800ab30:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ab34:	f1ca 0317 	rsb	r3, sl, #23
 800ab38:	fa40 fb03 	asr.w	fp, r0, r3
 800ab3c:	f1bb 0f00 	cmp.w	fp, #0
 800ab40:	dd65      	ble.n	800ac0e <__kernel_rem_pio2+0x26e>
 800ab42:	9b04      	ldr	r3, [sp, #16]
 800ab44:	2200      	movs	r2, #0
 800ab46:	3301      	adds	r3, #1
 800ab48:	9304      	str	r3, [sp, #16]
 800ab4a:	4615      	mov	r5, r2
 800ab4c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ab50:	4294      	cmp	r4, r2
 800ab52:	f300 809c 	bgt.w	800ac8e <__kernel_rem_pio2+0x2ee>
 800ab56:	f1ba 0f00 	cmp.w	sl, #0
 800ab5a:	dd07      	ble.n	800ab6c <__kernel_rem_pio2+0x1cc>
 800ab5c:	f1ba 0f01 	cmp.w	sl, #1
 800ab60:	f000 80c0 	beq.w	800ace4 <__kernel_rem_pio2+0x344>
 800ab64:	f1ba 0f02 	cmp.w	sl, #2
 800ab68:	f000 80c6 	beq.w	800acf8 <__kernel_rem_pio2+0x358>
 800ab6c:	f1bb 0f02 	cmp.w	fp, #2
 800ab70:	d14d      	bne.n	800ac0e <__kernel_rem_pio2+0x26e>
 800ab72:	4632      	mov	r2, r6
 800ab74:	463b      	mov	r3, r7
 800ab76:	4956      	ldr	r1, [pc, #344]	; (800acd0 <__kernel_rem_pio2+0x330>)
 800ab78:	2000      	movs	r0, #0
 800ab7a:	f7f5 fb35 	bl	80001e8 <__aeabi_dsub>
 800ab7e:	4606      	mov	r6, r0
 800ab80:	460f      	mov	r7, r1
 800ab82:	2d00      	cmp	r5, #0
 800ab84:	d043      	beq.n	800ac0e <__kernel_rem_pio2+0x26e>
 800ab86:	4650      	mov	r0, sl
 800ab88:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800acc0 <__kernel_rem_pio2+0x320>
 800ab8c:	f000 fbdc 	bl	800b348 <scalbn>
 800ab90:	4630      	mov	r0, r6
 800ab92:	4639      	mov	r1, r7
 800ab94:	ec53 2b10 	vmov	r2, r3, d0
 800ab98:	f7f5 fb26 	bl	80001e8 <__aeabi_dsub>
 800ab9c:	4606      	mov	r6, r0
 800ab9e:	460f      	mov	r7, r1
 800aba0:	e035      	b.n	800ac0e <__kernel_rem_pio2+0x26e>
 800aba2:	4b4c      	ldr	r3, [pc, #304]	; (800acd4 <__kernel_rem_pio2+0x334>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	4630      	mov	r0, r6
 800aba8:	4639      	mov	r1, r7
 800abaa:	f7f5 fcd5 	bl	8000558 <__aeabi_dmul>
 800abae:	f7f5 ff83 	bl	8000ab8 <__aeabi_d2iz>
 800abb2:	f7f5 fc67 	bl	8000484 <__aeabi_i2d>
 800abb6:	4602      	mov	r2, r0
 800abb8:	460b      	mov	r3, r1
 800abba:	ec43 2b18 	vmov	d8, r2, r3
 800abbe:	4b46      	ldr	r3, [pc, #280]	; (800acd8 <__kernel_rem_pio2+0x338>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	f7f5 fcc9 	bl	8000558 <__aeabi_dmul>
 800abc6:	4602      	mov	r2, r0
 800abc8:	460b      	mov	r3, r1
 800abca:	4630      	mov	r0, r6
 800abcc:	4639      	mov	r1, r7
 800abce:	f7f5 fb0b 	bl	80001e8 <__aeabi_dsub>
 800abd2:	f7f5 ff71 	bl	8000ab8 <__aeabi_d2iz>
 800abd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abda:	f84b 0b04 	str.w	r0, [fp], #4
 800abde:	ec51 0b18 	vmov	r0, r1, d8
 800abe2:	f7f5 fb03 	bl	80001ec <__adddf3>
 800abe6:	f109 39ff 	add.w	r9, r9, #4294967295
 800abea:	4606      	mov	r6, r0
 800abec:	460f      	mov	r7, r1
 800abee:	e75b      	b.n	800aaa8 <__kernel_rem_pio2+0x108>
 800abf0:	d106      	bne.n	800ac00 <__kernel_rem_pio2+0x260>
 800abf2:	1e63      	subs	r3, r4, #1
 800abf4:	aa0e      	add	r2, sp, #56	; 0x38
 800abf6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800abfa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800abfe:	e79d      	b.n	800ab3c <__kernel_rem_pio2+0x19c>
 800ac00:	4b36      	ldr	r3, [pc, #216]	; (800acdc <__kernel_rem_pio2+0x33c>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	f7f5 ff2e 	bl	8000a64 <__aeabi_dcmpge>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d13d      	bne.n	800ac88 <__kernel_rem_pio2+0x2e8>
 800ac0c:	4683      	mov	fp, r0
 800ac0e:	2200      	movs	r2, #0
 800ac10:	2300      	movs	r3, #0
 800ac12:	4630      	mov	r0, r6
 800ac14:	4639      	mov	r1, r7
 800ac16:	f7f5 ff07 	bl	8000a28 <__aeabi_dcmpeq>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	f000 80c0 	beq.w	800ada0 <__kernel_rem_pio2+0x400>
 800ac20:	1e65      	subs	r5, r4, #1
 800ac22:	462b      	mov	r3, r5
 800ac24:	2200      	movs	r2, #0
 800ac26:	9902      	ldr	r1, [sp, #8]
 800ac28:	428b      	cmp	r3, r1
 800ac2a:	da6c      	bge.n	800ad06 <__kernel_rem_pio2+0x366>
 800ac2c:	2a00      	cmp	r2, #0
 800ac2e:	f000 8089 	beq.w	800ad44 <__kernel_rem_pio2+0x3a4>
 800ac32:	ab0e      	add	r3, sp, #56	; 0x38
 800ac34:	f1aa 0a18 	sub.w	sl, sl, #24
 800ac38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f000 80ad 	beq.w	800ad9c <__kernel_rem_pio2+0x3fc>
 800ac42:	4650      	mov	r0, sl
 800ac44:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800acc0 <__kernel_rem_pio2+0x320>
 800ac48:	f000 fb7e 	bl	800b348 <scalbn>
 800ac4c:	ab9a      	add	r3, sp, #616	; 0x268
 800ac4e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ac52:	ec57 6b10 	vmov	r6, r7, d0
 800ac56:	00ec      	lsls	r4, r5, #3
 800ac58:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ac5c:	46aa      	mov	sl, r5
 800ac5e:	f1ba 0f00 	cmp.w	sl, #0
 800ac62:	f280 80d6 	bge.w	800ae12 <__kernel_rem_pio2+0x472>
 800ac66:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800acb8 <__kernel_rem_pio2+0x318>
 800ac6a:	462e      	mov	r6, r5
 800ac6c:	2e00      	cmp	r6, #0
 800ac6e:	f2c0 8104 	blt.w	800ae7a <__kernel_rem_pio2+0x4da>
 800ac72:	ab72      	add	r3, sp, #456	; 0x1c8
 800ac74:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ac78:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ace0 <__kernel_rem_pio2+0x340>
 800ac7c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ac80:	f04f 0800 	mov.w	r8, #0
 800ac84:	1baf      	subs	r7, r5, r6
 800ac86:	e0ea      	b.n	800ae5e <__kernel_rem_pio2+0x4be>
 800ac88:	f04f 0b02 	mov.w	fp, #2
 800ac8c:	e759      	b.n	800ab42 <__kernel_rem_pio2+0x1a2>
 800ac8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac92:	b955      	cbnz	r5, 800acaa <__kernel_rem_pio2+0x30a>
 800ac94:	b123      	cbz	r3, 800aca0 <__kernel_rem_pio2+0x300>
 800ac96:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ac9a:	f8c8 3000 	str.w	r3, [r8]
 800ac9e:	2301      	movs	r3, #1
 800aca0:	3201      	adds	r2, #1
 800aca2:	f108 0804 	add.w	r8, r8, #4
 800aca6:	461d      	mov	r5, r3
 800aca8:	e752      	b.n	800ab50 <__kernel_rem_pio2+0x1b0>
 800acaa:	1acb      	subs	r3, r1, r3
 800acac:	f8c8 3000 	str.w	r3, [r8]
 800acb0:	462b      	mov	r3, r5
 800acb2:	e7f5      	b.n	800aca0 <__kernel_rem_pio2+0x300>
 800acb4:	f3af 8000 	nop.w
	...
 800acc4:	3ff00000 	.word	0x3ff00000
 800acc8:	0800b7e8 	.word	0x0800b7e8
 800accc:	40200000 	.word	0x40200000
 800acd0:	3ff00000 	.word	0x3ff00000
 800acd4:	3e700000 	.word	0x3e700000
 800acd8:	41700000 	.word	0x41700000
 800acdc:	3fe00000 	.word	0x3fe00000
 800ace0:	0800b7a8 	.word	0x0800b7a8
 800ace4:	1e62      	subs	r2, r4, #1
 800ace6:	ab0e      	add	r3, sp, #56	; 0x38
 800ace8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800acf0:	a90e      	add	r1, sp, #56	; 0x38
 800acf2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800acf6:	e739      	b.n	800ab6c <__kernel_rem_pio2+0x1cc>
 800acf8:	1e62      	subs	r2, r4, #1
 800acfa:	ab0e      	add	r3, sp, #56	; 0x38
 800acfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ad04:	e7f4      	b.n	800acf0 <__kernel_rem_pio2+0x350>
 800ad06:	a90e      	add	r1, sp, #56	; 0x38
 800ad08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	e789      	b.n	800ac26 <__kernel_rem_pio2+0x286>
 800ad12:	3301      	adds	r3, #1
 800ad14:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ad18:	2900      	cmp	r1, #0
 800ad1a:	d0fa      	beq.n	800ad12 <__kernel_rem_pio2+0x372>
 800ad1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad1e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ad22:	446a      	add	r2, sp
 800ad24:	3a98      	subs	r2, #152	; 0x98
 800ad26:	920a      	str	r2, [sp, #40]	; 0x28
 800ad28:	9a08      	ldr	r2, [sp, #32]
 800ad2a:	18e3      	adds	r3, r4, r3
 800ad2c:	18a5      	adds	r5, r4, r2
 800ad2e:	aa22      	add	r2, sp, #136	; 0x88
 800ad30:	f104 0801 	add.w	r8, r4, #1
 800ad34:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ad38:	9304      	str	r3, [sp, #16]
 800ad3a:	9b04      	ldr	r3, [sp, #16]
 800ad3c:	4543      	cmp	r3, r8
 800ad3e:	da04      	bge.n	800ad4a <__kernel_rem_pio2+0x3aa>
 800ad40:	461c      	mov	r4, r3
 800ad42:	e6a3      	b.n	800aa8c <__kernel_rem_pio2+0xec>
 800ad44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad46:	2301      	movs	r3, #1
 800ad48:	e7e4      	b.n	800ad14 <__kernel_rem_pio2+0x374>
 800ad4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad4c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ad50:	f7f5 fb98 	bl	8000484 <__aeabi_i2d>
 800ad54:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ad58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad5a:	46ab      	mov	fp, r5
 800ad5c:	461c      	mov	r4, r3
 800ad5e:	f04f 0900 	mov.w	r9, #0
 800ad62:	2600      	movs	r6, #0
 800ad64:	2700      	movs	r7, #0
 800ad66:	9b06      	ldr	r3, [sp, #24]
 800ad68:	4599      	cmp	r9, r3
 800ad6a:	dd06      	ble.n	800ad7a <__kernel_rem_pio2+0x3da>
 800ad6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad6e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ad72:	f108 0801 	add.w	r8, r8, #1
 800ad76:	930a      	str	r3, [sp, #40]	; 0x28
 800ad78:	e7df      	b.n	800ad3a <__kernel_rem_pio2+0x39a>
 800ad7a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ad7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ad82:	f7f5 fbe9 	bl	8000558 <__aeabi_dmul>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	f7f5 fa2d 	bl	80001ec <__adddf3>
 800ad92:	f109 0901 	add.w	r9, r9, #1
 800ad96:	4606      	mov	r6, r0
 800ad98:	460f      	mov	r7, r1
 800ad9a:	e7e4      	b.n	800ad66 <__kernel_rem_pio2+0x3c6>
 800ad9c:	3d01      	subs	r5, #1
 800ad9e:	e748      	b.n	800ac32 <__kernel_rem_pio2+0x292>
 800ada0:	ec47 6b10 	vmov	d0, r6, r7
 800ada4:	f1ca 0000 	rsb	r0, sl, #0
 800ada8:	f000 face 	bl	800b348 <scalbn>
 800adac:	ec57 6b10 	vmov	r6, r7, d0
 800adb0:	4ba0      	ldr	r3, [pc, #640]	; (800b034 <__kernel_rem_pio2+0x694>)
 800adb2:	ee10 0a10 	vmov	r0, s0
 800adb6:	2200      	movs	r2, #0
 800adb8:	4639      	mov	r1, r7
 800adba:	f7f5 fe53 	bl	8000a64 <__aeabi_dcmpge>
 800adbe:	b1f8      	cbz	r0, 800ae00 <__kernel_rem_pio2+0x460>
 800adc0:	4b9d      	ldr	r3, [pc, #628]	; (800b038 <__kernel_rem_pio2+0x698>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	4630      	mov	r0, r6
 800adc6:	4639      	mov	r1, r7
 800adc8:	f7f5 fbc6 	bl	8000558 <__aeabi_dmul>
 800adcc:	f7f5 fe74 	bl	8000ab8 <__aeabi_d2iz>
 800add0:	4680      	mov	r8, r0
 800add2:	f7f5 fb57 	bl	8000484 <__aeabi_i2d>
 800add6:	4b97      	ldr	r3, [pc, #604]	; (800b034 <__kernel_rem_pio2+0x694>)
 800add8:	2200      	movs	r2, #0
 800adda:	f7f5 fbbd 	bl	8000558 <__aeabi_dmul>
 800adde:	460b      	mov	r3, r1
 800ade0:	4602      	mov	r2, r0
 800ade2:	4639      	mov	r1, r7
 800ade4:	4630      	mov	r0, r6
 800ade6:	f7f5 f9ff 	bl	80001e8 <__aeabi_dsub>
 800adea:	f7f5 fe65 	bl	8000ab8 <__aeabi_d2iz>
 800adee:	1c65      	adds	r5, r4, #1
 800adf0:	ab0e      	add	r3, sp, #56	; 0x38
 800adf2:	f10a 0a18 	add.w	sl, sl, #24
 800adf6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800adfa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800adfe:	e720      	b.n	800ac42 <__kernel_rem_pio2+0x2a2>
 800ae00:	4630      	mov	r0, r6
 800ae02:	4639      	mov	r1, r7
 800ae04:	f7f5 fe58 	bl	8000ab8 <__aeabi_d2iz>
 800ae08:	ab0e      	add	r3, sp, #56	; 0x38
 800ae0a:	4625      	mov	r5, r4
 800ae0c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ae10:	e717      	b.n	800ac42 <__kernel_rem_pio2+0x2a2>
 800ae12:	ab0e      	add	r3, sp, #56	; 0x38
 800ae14:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ae18:	f7f5 fb34 	bl	8000484 <__aeabi_i2d>
 800ae1c:	4632      	mov	r2, r6
 800ae1e:	463b      	mov	r3, r7
 800ae20:	f7f5 fb9a 	bl	8000558 <__aeabi_dmul>
 800ae24:	4b84      	ldr	r3, [pc, #528]	; (800b038 <__kernel_rem_pio2+0x698>)
 800ae26:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	4639      	mov	r1, r7
 800ae30:	f7f5 fb92 	bl	8000558 <__aeabi_dmul>
 800ae34:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae38:	4606      	mov	r6, r0
 800ae3a:	460f      	mov	r7, r1
 800ae3c:	e70f      	b.n	800ac5e <__kernel_rem_pio2+0x2be>
 800ae3e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ae42:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ae46:	f7f5 fb87 	bl	8000558 <__aeabi_dmul>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae52:	f7f5 f9cb 	bl	80001ec <__adddf3>
 800ae56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ae5a:	f108 0801 	add.w	r8, r8, #1
 800ae5e:	9b02      	ldr	r3, [sp, #8]
 800ae60:	4598      	cmp	r8, r3
 800ae62:	dc01      	bgt.n	800ae68 <__kernel_rem_pio2+0x4c8>
 800ae64:	45b8      	cmp	r8, r7
 800ae66:	ddea      	ble.n	800ae3e <__kernel_rem_pio2+0x49e>
 800ae68:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ae6c:	ab4a      	add	r3, sp, #296	; 0x128
 800ae6e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ae72:	ed87 7b00 	vstr	d7, [r7]
 800ae76:	3e01      	subs	r6, #1
 800ae78:	e6f8      	b.n	800ac6c <__kernel_rem_pio2+0x2cc>
 800ae7a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	dc0b      	bgt.n	800ae98 <__kernel_rem_pio2+0x4f8>
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	dc35      	bgt.n	800aef0 <__kernel_rem_pio2+0x550>
 800ae84:	d059      	beq.n	800af3a <__kernel_rem_pio2+0x59a>
 800ae86:	9b04      	ldr	r3, [sp, #16]
 800ae88:	f003 0007 	and.w	r0, r3, #7
 800ae8c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ae90:	ecbd 8b02 	vpop	{d8}
 800ae94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae98:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d1f3      	bne.n	800ae86 <__kernel_rem_pio2+0x4e6>
 800ae9e:	ab4a      	add	r3, sp, #296	; 0x128
 800aea0:	4423      	add	r3, r4
 800aea2:	9306      	str	r3, [sp, #24]
 800aea4:	461c      	mov	r4, r3
 800aea6:	469a      	mov	sl, r3
 800aea8:	9502      	str	r5, [sp, #8]
 800aeaa:	9b02      	ldr	r3, [sp, #8]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f1aa 0a08 	sub.w	sl, sl, #8
 800aeb2:	dc6b      	bgt.n	800af8c <__kernel_rem_pio2+0x5ec>
 800aeb4:	46aa      	mov	sl, r5
 800aeb6:	f1ba 0f01 	cmp.w	sl, #1
 800aeba:	f1a4 0408 	sub.w	r4, r4, #8
 800aebe:	f300 8085 	bgt.w	800afcc <__kernel_rem_pio2+0x62c>
 800aec2:	9c06      	ldr	r4, [sp, #24]
 800aec4:	2000      	movs	r0, #0
 800aec6:	3408      	adds	r4, #8
 800aec8:	2100      	movs	r1, #0
 800aeca:	2d01      	cmp	r5, #1
 800aecc:	f300 809d 	bgt.w	800b00a <__kernel_rem_pio2+0x66a>
 800aed0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800aed4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800aed8:	f1bb 0f00 	cmp.w	fp, #0
 800aedc:	f040 809b 	bne.w	800b016 <__kernel_rem_pio2+0x676>
 800aee0:	9b01      	ldr	r3, [sp, #4]
 800aee2:	e9c3 5600 	strd	r5, r6, [r3]
 800aee6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800aeea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800aeee:	e7ca      	b.n	800ae86 <__kernel_rem_pio2+0x4e6>
 800aef0:	3408      	adds	r4, #8
 800aef2:	ab4a      	add	r3, sp, #296	; 0x128
 800aef4:	441c      	add	r4, r3
 800aef6:	462e      	mov	r6, r5
 800aef8:	2000      	movs	r0, #0
 800aefa:	2100      	movs	r1, #0
 800aefc:	2e00      	cmp	r6, #0
 800aefe:	da36      	bge.n	800af6e <__kernel_rem_pio2+0x5ce>
 800af00:	f1bb 0f00 	cmp.w	fp, #0
 800af04:	d039      	beq.n	800af7a <__kernel_rem_pio2+0x5da>
 800af06:	4602      	mov	r2, r0
 800af08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af0c:	9c01      	ldr	r4, [sp, #4]
 800af0e:	e9c4 2300 	strd	r2, r3, [r4]
 800af12:	4602      	mov	r2, r0
 800af14:	460b      	mov	r3, r1
 800af16:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800af1a:	f7f5 f965 	bl	80001e8 <__aeabi_dsub>
 800af1e:	ae4c      	add	r6, sp, #304	; 0x130
 800af20:	2401      	movs	r4, #1
 800af22:	42a5      	cmp	r5, r4
 800af24:	da2c      	bge.n	800af80 <__kernel_rem_pio2+0x5e0>
 800af26:	f1bb 0f00 	cmp.w	fp, #0
 800af2a:	d002      	beq.n	800af32 <__kernel_rem_pio2+0x592>
 800af2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af30:	4619      	mov	r1, r3
 800af32:	9b01      	ldr	r3, [sp, #4]
 800af34:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800af38:	e7a5      	b.n	800ae86 <__kernel_rem_pio2+0x4e6>
 800af3a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800af3e:	eb0d 0403 	add.w	r4, sp, r3
 800af42:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800af46:	2000      	movs	r0, #0
 800af48:	2100      	movs	r1, #0
 800af4a:	2d00      	cmp	r5, #0
 800af4c:	da09      	bge.n	800af62 <__kernel_rem_pio2+0x5c2>
 800af4e:	f1bb 0f00 	cmp.w	fp, #0
 800af52:	d002      	beq.n	800af5a <__kernel_rem_pio2+0x5ba>
 800af54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af58:	4619      	mov	r1, r3
 800af5a:	9b01      	ldr	r3, [sp, #4]
 800af5c:	e9c3 0100 	strd	r0, r1, [r3]
 800af60:	e791      	b.n	800ae86 <__kernel_rem_pio2+0x4e6>
 800af62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800af66:	f7f5 f941 	bl	80001ec <__adddf3>
 800af6a:	3d01      	subs	r5, #1
 800af6c:	e7ed      	b.n	800af4a <__kernel_rem_pio2+0x5aa>
 800af6e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800af72:	f7f5 f93b 	bl	80001ec <__adddf3>
 800af76:	3e01      	subs	r6, #1
 800af78:	e7c0      	b.n	800aefc <__kernel_rem_pio2+0x55c>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	e7c5      	b.n	800af0c <__kernel_rem_pio2+0x56c>
 800af80:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800af84:	f7f5 f932 	bl	80001ec <__adddf3>
 800af88:	3401      	adds	r4, #1
 800af8a:	e7ca      	b.n	800af22 <__kernel_rem_pio2+0x582>
 800af8c:	e9da 8900 	ldrd	r8, r9, [sl]
 800af90:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800af94:	9b02      	ldr	r3, [sp, #8]
 800af96:	3b01      	subs	r3, #1
 800af98:	9302      	str	r3, [sp, #8]
 800af9a:	4632      	mov	r2, r6
 800af9c:	463b      	mov	r3, r7
 800af9e:	4640      	mov	r0, r8
 800afa0:	4649      	mov	r1, r9
 800afa2:	f7f5 f923 	bl	80001ec <__adddf3>
 800afa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4640      	mov	r0, r8
 800afb0:	4649      	mov	r1, r9
 800afb2:	f7f5 f919 	bl	80001e8 <__aeabi_dsub>
 800afb6:	4632      	mov	r2, r6
 800afb8:	463b      	mov	r3, r7
 800afba:	f7f5 f917 	bl	80001ec <__adddf3>
 800afbe:	ed9d 7b08 	vldr	d7, [sp, #32]
 800afc2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800afc6:	ed8a 7b00 	vstr	d7, [sl]
 800afca:	e76e      	b.n	800aeaa <__kernel_rem_pio2+0x50a>
 800afcc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800afd0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800afd4:	4640      	mov	r0, r8
 800afd6:	4632      	mov	r2, r6
 800afd8:	463b      	mov	r3, r7
 800afda:	4649      	mov	r1, r9
 800afdc:	f7f5 f906 	bl	80001ec <__adddf3>
 800afe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	4640      	mov	r0, r8
 800afea:	4649      	mov	r1, r9
 800afec:	f7f5 f8fc 	bl	80001e8 <__aeabi_dsub>
 800aff0:	4632      	mov	r2, r6
 800aff2:	463b      	mov	r3, r7
 800aff4:	f7f5 f8fa 	bl	80001ec <__adddf3>
 800aff8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800affc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b000:	ed84 7b00 	vstr	d7, [r4]
 800b004:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b008:	e755      	b.n	800aeb6 <__kernel_rem_pio2+0x516>
 800b00a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b00e:	f7f5 f8ed 	bl	80001ec <__adddf3>
 800b012:	3d01      	subs	r5, #1
 800b014:	e759      	b.n	800aeca <__kernel_rem_pio2+0x52a>
 800b016:	9b01      	ldr	r3, [sp, #4]
 800b018:	9a01      	ldr	r2, [sp, #4]
 800b01a:	601d      	str	r5, [r3, #0]
 800b01c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b020:	605c      	str	r4, [r3, #4]
 800b022:	609f      	str	r7, [r3, #8]
 800b024:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b028:	60d3      	str	r3, [r2, #12]
 800b02a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b02e:	6110      	str	r0, [r2, #16]
 800b030:	6153      	str	r3, [r2, #20]
 800b032:	e728      	b.n	800ae86 <__kernel_rem_pio2+0x4e6>
 800b034:	41700000 	.word	0x41700000
 800b038:	3e700000 	.word	0x3e700000
 800b03c:	00000000 	.word	0x00000000

0800b040 <__kernel_sin>:
 800b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	ed2d 8b04 	vpush	{d8-d9}
 800b048:	eeb0 8a41 	vmov.f32	s16, s2
 800b04c:	eef0 8a61 	vmov.f32	s17, s3
 800b050:	ec55 4b10 	vmov	r4, r5, d0
 800b054:	b083      	sub	sp, #12
 800b056:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b05a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b05e:	9001      	str	r0, [sp, #4]
 800b060:	da06      	bge.n	800b070 <__kernel_sin+0x30>
 800b062:	ee10 0a10 	vmov	r0, s0
 800b066:	4629      	mov	r1, r5
 800b068:	f7f5 fd26 	bl	8000ab8 <__aeabi_d2iz>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d051      	beq.n	800b114 <__kernel_sin+0xd4>
 800b070:	4622      	mov	r2, r4
 800b072:	462b      	mov	r3, r5
 800b074:	4620      	mov	r0, r4
 800b076:	4629      	mov	r1, r5
 800b078:	f7f5 fa6e 	bl	8000558 <__aeabi_dmul>
 800b07c:	4682      	mov	sl, r0
 800b07e:	468b      	mov	fp, r1
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	4620      	mov	r0, r4
 800b086:	4629      	mov	r1, r5
 800b088:	f7f5 fa66 	bl	8000558 <__aeabi_dmul>
 800b08c:	a341      	add	r3, pc, #260	; (adr r3, 800b194 <__kernel_sin+0x154>)
 800b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b092:	4680      	mov	r8, r0
 800b094:	4689      	mov	r9, r1
 800b096:	4650      	mov	r0, sl
 800b098:	4659      	mov	r1, fp
 800b09a:	f7f5 fa5d 	bl	8000558 <__aeabi_dmul>
 800b09e:	a33f      	add	r3, pc, #252	; (adr r3, 800b19c <__kernel_sin+0x15c>)
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f7f5 f8a0 	bl	80001e8 <__aeabi_dsub>
 800b0a8:	4652      	mov	r2, sl
 800b0aa:	465b      	mov	r3, fp
 800b0ac:	f7f5 fa54 	bl	8000558 <__aeabi_dmul>
 800b0b0:	a33c      	add	r3, pc, #240	; (adr r3, 800b1a4 <__kernel_sin+0x164>)
 800b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b6:	f7f5 f899 	bl	80001ec <__adddf3>
 800b0ba:	4652      	mov	r2, sl
 800b0bc:	465b      	mov	r3, fp
 800b0be:	f7f5 fa4b 	bl	8000558 <__aeabi_dmul>
 800b0c2:	a33a      	add	r3, pc, #232	; (adr r3, 800b1ac <__kernel_sin+0x16c>)
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	f7f5 f88e 	bl	80001e8 <__aeabi_dsub>
 800b0cc:	4652      	mov	r2, sl
 800b0ce:	465b      	mov	r3, fp
 800b0d0:	f7f5 fa42 	bl	8000558 <__aeabi_dmul>
 800b0d4:	a337      	add	r3, pc, #220	; (adr r3, 800b1b4 <__kernel_sin+0x174>)
 800b0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0da:	f7f5 f887 	bl	80001ec <__adddf3>
 800b0de:	9b01      	ldr	r3, [sp, #4]
 800b0e0:	4606      	mov	r6, r0
 800b0e2:	460f      	mov	r7, r1
 800b0e4:	b9eb      	cbnz	r3, 800b122 <__kernel_sin+0xe2>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	4650      	mov	r0, sl
 800b0ec:	4659      	mov	r1, fp
 800b0ee:	f7f5 fa33 	bl	8000558 <__aeabi_dmul>
 800b0f2:	a325      	add	r3, pc, #148	; (adr r3, 800b188 <__kernel_sin+0x148>)
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	f7f5 f876 	bl	80001e8 <__aeabi_dsub>
 800b0fc:	4642      	mov	r2, r8
 800b0fe:	464b      	mov	r3, r9
 800b100:	f7f5 fa2a 	bl	8000558 <__aeabi_dmul>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4620      	mov	r0, r4
 800b10a:	4629      	mov	r1, r5
 800b10c:	f7f5 f86e 	bl	80001ec <__adddf3>
 800b110:	4604      	mov	r4, r0
 800b112:	460d      	mov	r5, r1
 800b114:	ec45 4b10 	vmov	d0, r4, r5
 800b118:	b003      	add	sp, #12
 800b11a:	ecbd 8b04 	vpop	{d8-d9}
 800b11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b122:	4b1b      	ldr	r3, [pc, #108]	; (800b190 <__kernel_sin+0x150>)
 800b124:	ec51 0b18 	vmov	r0, r1, d8
 800b128:	2200      	movs	r2, #0
 800b12a:	f7f5 fa15 	bl	8000558 <__aeabi_dmul>
 800b12e:	4632      	mov	r2, r6
 800b130:	ec41 0b19 	vmov	d9, r0, r1
 800b134:	463b      	mov	r3, r7
 800b136:	4640      	mov	r0, r8
 800b138:	4649      	mov	r1, r9
 800b13a:	f7f5 fa0d 	bl	8000558 <__aeabi_dmul>
 800b13e:	4602      	mov	r2, r0
 800b140:	460b      	mov	r3, r1
 800b142:	ec51 0b19 	vmov	r0, r1, d9
 800b146:	f7f5 f84f 	bl	80001e8 <__aeabi_dsub>
 800b14a:	4652      	mov	r2, sl
 800b14c:	465b      	mov	r3, fp
 800b14e:	f7f5 fa03 	bl	8000558 <__aeabi_dmul>
 800b152:	ec53 2b18 	vmov	r2, r3, d8
 800b156:	f7f5 f847 	bl	80001e8 <__aeabi_dsub>
 800b15a:	a30b      	add	r3, pc, #44	; (adr r3, 800b188 <__kernel_sin+0x148>)
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	4606      	mov	r6, r0
 800b162:	460f      	mov	r7, r1
 800b164:	4640      	mov	r0, r8
 800b166:	4649      	mov	r1, r9
 800b168:	f7f5 f9f6 	bl	8000558 <__aeabi_dmul>
 800b16c:	4602      	mov	r2, r0
 800b16e:	460b      	mov	r3, r1
 800b170:	4630      	mov	r0, r6
 800b172:	4639      	mov	r1, r7
 800b174:	f7f5 f83a 	bl	80001ec <__adddf3>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4620      	mov	r0, r4
 800b17e:	4629      	mov	r1, r5
 800b180:	f7f5 f832 	bl	80001e8 <__aeabi_dsub>
 800b184:	e7c4      	b.n	800b110 <__kernel_sin+0xd0>
 800b186:	bf00      	nop
 800b188:	55555549 	.word	0x55555549
 800b18c:	3fc55555 	.word	0x3fc55555
 800b190:	3fe00000 	.word	0x3fe00000
 800b194:	5acfd57c 	.word	0x5acfd57c
 800b198:	3de5d93a 	.word	0x3de5d93a
 800b19c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b1a0:	3e5ae5e6 	.word	0x3e5ae5e6
 800b1a4:	57b1fe7d 	.word	0x57b1fe7d
 800b1a8:	3ec71de3 	.word	0x3ec71de3
 800b1ac:	19c161d5 	.word	0x19c161d5
 800b1b0:	3f2a01a0 	.word	0x3f2a01a0
 800b1b4:	1110f8a6 	.word	0x1110f8a6
 800b1b8:	3f811111 	.word	0x3f811111

0800b1bc <with_errno>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	4604      	mov	r4, r0
 800b1c0:	460d      	mov	r5, r1
 800b1c2:	4616      	mov	r6, r2
 800b1c4:	f7fe f912 	bl	80093ec <__errno>
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	6006      	str	r6, [r0, #0]
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	bd70      	pop	{r4, r5, r6, pc}

0800b1d0 <xflow>:
 800b1d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1d2:	4614      	mov	r4, r2
 800b1d4:	461d      	mov	r5, r3
 800b1d6:	b108      	cbz	r0, 800b1dc <xflow+0xc>
 800b1d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b1dc:	e9cd 2300 	strd	r2, r3, [sp]
 800b1e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	f7f5 f9b6 	bl	8000558 <__aeabi_dmul>
 800b1ec:	2222      	movs	r2, #34	; 0x22
 800b1ee:	b003      	add	sp, #12
 800b1f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1f4:	f7ff bfe2 	b.w	800b1bc <with_errno>

0800b1f8 <__math_uflow>:
 800b1f8:	b508      	push	{r3, lr}
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b200:	f7ff ffe6 	bl	800b1d0 <xflow>
 800b204:	ec41 0b10 	vmov	d0, r0, r1
 800b208:	bd08      	pop	{r3, pc}

0800b20a <__math_oflow>:
 800b20a:	b508      	push	{r3, lr}
 800b20c:	2200      	movs	r2, #0
 800b20e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b212:	f7ff ffdd 	bl	800b1d0 <xflow>
 800b216:	ec41 0b10 	vmov	d0, r0, r1
 800b21a:	bd08      	pop	{r3, pc}

0800b21c <fabs>:
 800b21c:	ec51 0b10 	vmov	r0, r1, d0
 800b220:	ee10 2a10 	vmov	r2, s0
 800b224:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b228:	ec43 2b10 	vmov	d0, r2, r3
 800b22c:	4770      	bx	lr

0800b22e <finite>:
 800b22e:	b082      	sub	sp, #8
 800b230:	ed8d 0b00 	vstr	d0, [sp]
 800b234:	9801      	ldr	r0, [sp, #4]
 800b236:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b23a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b23e:	0fc0      	lsrs	r0, r0, #31
 800b240:	b002      	add	sp, #8
 800b242:	4770      	bx	lr
 800b244:	0000      	movs	r0, r0
	...

0800b248 <floor>:
 800b248:	ec51 0b10 	vmov	r0, r1, d0
 800b24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b250:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b254:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b258:	2e13      	cmp	r6, #19
 800b25a:	ee10 5a10 	vmov	r5, s0
 800b25e:	ee10 8a10 	vmov	r8, s0
 800b262:	460c      	mov	r4, r1
 800b264:	dc32      	bgt.n	800b2cc <floor+0x84>
 800b266:	2e00      	cmp	r6, #0
 800b268:	da14      	bge.n	800b294 <floor+0x4c>
 800b26a:	a333      	add	r3, pc, #204	; (adr r3, 800b338 <floor+0xf0>)
 800b26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b270:	f7f4 ffbc 	bl	80001ec <__adddf3>
 800b274:	2200      	movs	r2, #0
 800b276:	2300      	movs	r3, #0
 800b278:	f7f5 fbfe 	bl	8000a78 <__aeabi_dcmpgt>
 800b27c:	b138      	cbz	r0, 800b28e <floor+0x46>
 800b27e:	2c00      	cmp	r4, #0
 800b280:	da57      	bge.n	800b332 <floor+0xea>
 800b282:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b286:	431d      	orrs	r5, r3
 800b288:	d001      	beq.n	800b28e <floor+0x46>
 800b28a:	4c2d      	ldr	r4, [pc, #180]	; (800b340 <floor+0xf8>)
 800b28c:	2500      	movs	r5, #0
 800b28e:	4621      	mov	r1, r4
 800b290:	4628      	mov	r0, r5
 800b292:	e025      	b.n	800b2e0 <floor+0x98>
 800b294:	4f2b      	ldr	r7, [pc, #172]	; (800b344 <floor+0xfc>)
 800b296:	4137      	asrs	r7, r6
 800b298:	ea01 0307 	and.w	r3, r1, r7
 800b29c:	4303      	orrs	r3, r0
 800b29e:	d01f      	beq.n	800b2e0 <floor+0x98>
 800b2a0:	a325      	add	r3, pc, #148	; (adr r3, 800b338 <floor+0xf0>)
 800b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a6:	f7f4 ffa1 	bl	80001ec <__adddf3>
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f7f5 fbe3 	bl	8000a78 <__aeabi_dcmpgt>
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	d0eb      	beq.n	800b28e <floor+0x46>
 800b2b6:	2c00      	cmp	r4, #0
 800b2b8:	bfbe      	ittt	lt
 800b2ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b2be:	fa43 f606 	asrlt.w	r6, r3, r6
 800b2c2:	19a4      	addlt	r4, r4, r6
 800b2c4:	ea24 0407 	bic.w	r4, r4, r7
 800b2c8:	2500      	movs	r5, #0
 800b2ca:	e7e0      	b.n	800b28e <floor+0x46>
 800b2cc:	2e33      	cmp	r6, #51	; 0x33
 800b2ce:	dd0b      	ble.n	800b2e8 <floor+0xa0>
 800b2d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b2d4:	d104      	bne.n	800b2e0 <floor+0x98>
 800b2d6:	ee10 2a10 	vmov	r2, s0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	f7f4 ff86 	bl	80001ec <__adddf3>
 800b2e0:	ec41 0b10 	vmov	d0, r0, r1
 800b2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f0:	fa23 f707 	lsr.w	r7, r3, r7
 800b2f4:	4207      	tst	r7, r0
 800b2f6:	d0f3      	beq.n	800b2e0 <floor+0x98>
 800b2f8:	a30f      	add	r3, pc, #60	; (adr r3, 800b338 <floor+0xf0>)
 800b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fe:	f7f4 ff75 	bl	80001ec <__adddf3>
 800b302:	2200      	movs	r2, #0
 800b304:	2300      	movs	r3, #0
 800b306:	f7f5 fbb7 	bl	8000a78 <__aeabi_dcmpgt>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d0bf      	beq.n	800b28e <floor+0x46>
 800b30e:	2c00      	cmp	r4, #0
 800b310:	da02      	bge.n	800b318 <floor+0xd0>
 800b312:	2e14      	cmp	r6, #20
 800b314:	d103      	bne.n	800b31e <floor+0xd6>
 800b316:	3401      	adds	r4, #1
 800b318:	ea25 0507 	bic.w	r5, r5, r7
 800b31c:	e7b7      	b.n	800b28e <floor+0x46>
 800b31e:	2301      	movs	r3, #1
 800b320:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b324:	fa03 f606 	lsl.w	r6, r3, r6
 800b328:	4435      	add	r5, r6
 800b32a:	4545      	cmp	r5, r8
 800b32c:	bf38      	it	cc
 800b32e:	18e4      	addcc	r4, r4, r3
 800b330:	e7f2      	b.n	800b318 <floor+0xd0>
 800b332:	2500      	movs	r5, #0
 800b334:	462c      	mov	r4, r5
 800b336:	e7aa      	b.n	800b28e <floor+0x46>
 800b338:	8800759c 	.word	0x8800759c
 800b33c:	7e37e43c 	.word	0x7e37e43c
 800b340:	bff00000 	.word	0xbff00000
 800b344:	000fffff 	.word	0x000fffff

0800b348 <scalbn>:
 800b348:	b570      	push	{r4, r5, r6, lr}
 800b34a:	ec55 4b10 	vmov	r4, r5, d0
 800b34e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b352:	4606      	mov	r6, r0
 800b354:	462b      	mov	r3, r5
 800b356:	b99a      	cbnz	r2, 800b380 <scalbn+0x38>
 800b358:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b35c:	4323      	orrs	r3, r4
 800b35e:	d036      	beq.n	800b3ce <scalbn+0x86>
 800b360:	4b39      	ldr	r3, [pc, #228]	; (800b448 <scalbn+0x100>)
 800b362:	4629      	mov	r1, r5
 800b364:	ee10 0a10 	vmov	r0, s0
 800b368:	2200      	movs	r2, #0
 800b36a:	f7f5 f8f5 	bl	8000558 <__aeabi_dmul>
 800b36e:	4b37      	ldr	r3, [pc, #220]	; (800b44c <scalbn+0x104>)
 800b370:	429e      	cmp	r6, r3
 800b372:	4604      	mov	r4, r0
 800b374:	460d      	mov	r5, r1
 800b376:	da10      	bge.n	800b39a <scalbn+0x52>
 800b378:	a32b      	add	r3, pc, #172	; (adr r3, 800b428 <scalbn+0xe0>)
 800b37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37e:	e03a      	b.n	800b3f6 <scalbn+0xae>
 800b380:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b384:	428a      	cmp	r2, r1
 800b386:	d10c      	bne.n	800b3a2 <scalbn+0x5a>
 800b388:	ee10 2a10 	vmov	r2, s0
 800b38c:	4620      	mov	r0, r4
 800b38e:	4629      	mov	r1, r5
 800b390:	f7f4 ff2c 	bl	80001ec <__adddf3>
 800b394:	4604      	mov	r4, r0
 800b396:	460d      	mov	r5, r1
 800b398:	e019      	b.n	800b3ce <scalbn+0x86>
 800b39a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b39e:	460b      	mov	r3, r1
 800b3a0:	3a36      	subs	r2, #54	; 0x36
 800b3a2:	4432      	add	r2, r6
 800b3a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b3a8:	428a      	cmp	r2, r1
 800b3aa:	dd08      	ble.n	800b3be <scalbn+0x76>
 800b3ac:	2d00      	cmp	r5, #0
 800b3ae:	a120      	add	r1, pc, #128	; (adr r1, 800b430 <scalbn+0xe8>)
 800b3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3b4:	da1c      	bge.n	800b3f0 <scalbn+0xa8>
 800b3b6:	a120      	add	r1, pc, #128	; (adr r1, 800b438 <scalbn+0xf0>)
 800b3b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3bc:	e018      	b.n	800b3f0 <scalbn+0xa8>
 800b3be:	2a00      	cmp	r2, #0
 800b3c0:	dd08      	ble.n	800b3d4 <scalbn+0x8c>
 800b3c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b3c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b3ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b3ce:	ec45 4b10 	vmov	d0, r4, r5
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}
 800b3d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b3d8:	da19      	bge.n	800b40e <scalbn+0xc6>
 800b3da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b3de:	429e      	cmp	r6, r3
 800b3e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b3e4:	dd0a      	ble.n	800b3fc <scalbn+0xb4>
 800b3e6:	a112      	add	r1, pc, #72	; (adr r1, 800b430 <scalbn+0xe8>)
 800b3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1e2      	bne.n	800b3b6 <scalbn+0x6e>
 800b3f0:	a30f      	add	r3, pc, #60	; (adr r3, 800b430 <scalbn+0xe8>)
 800b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f6:	f7f5 f8af 	bl	8000558 <__aeabi_dmul>
 800b3fa:	e7cb      	b.n	800b394 <scalbn+0x4c>
 800b3fc:	a10a      	add	r1, pc, #40	; (adr r1, 800b428 <scalbn+0xe0>)
 800b3fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0b8      	beq.n	800b378 <scalbn+0x30>
 800b406:	a10e      	add	r1, pc, #56	; (adr r1, 800b440 <scalbn+0xf8>)
 800b408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b40c:	e7b4      	b.n	800b378 <scalbn+0x30>
 800b40e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b412:	3236      	adds	r2, #54	; 0x36
 800b414:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b418:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b41c:	4620      	mov	r0, r4
 800b41e:	4b0c      	ldr	r3, [pc, #48]	; (800b450 <scalbn+0x108>)
 800b420:	2200      	movs	r2, #0
 800b422:	e7e8      	b.n	800b3f6 <scalbn+0xae>
 800b424:	f3af 8000 	nop.w
 800b428:	c2f8f359 	.word	0xc2f8f359
 800b42c:	01a56e1f 	.word	0x01a56e1f
 800b430:	8800759c 	.word	0x8800759c
 800b434:	7e37e43c 	.word	0x7e37e43c
 800b438:	8800759c 	.word	0x8800759c
 800b43c:	fe37e43c 	.word	0xfe37e43c
 800b440:	c2f8f359 	.word	0xc2f8f359
 800b444:	81a56e1f 	.word	0x81a56e1f
 800b448:	43500000 	.word	0x43500000
 800b44c:	ffff3cb0 	.word	0xffff3cb0
 800b450:	3c900000 	.word	0x3c900000

0800b454 <_init>:
 800b454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b456:	bf00      	nop
 800b458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b45a:	bc08      	pop	{r3}
 800b45c:	469e      	mov	lr, r3
 800b45e:	4770      	bx	lr

0800b460 <_fini>:
 800b460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b462:	bf00      	nop
 800b464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b466:	bc08      	pop	{r3}
 800b468:	469e      	mov	lr, r3
 800b46a:	4770      	bx	lr
