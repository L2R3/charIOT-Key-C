
charIOT-Key-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001250c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d338  080126a0  080126a0  000226a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f9d8  0801f9d8  000300f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801f9d8  0801f9d8  0002f9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f9e0  0801f9e0  000300f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f9e0  0801f9e0  0002f9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f9e4  0801f9e4  0002f9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0801f9e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b1f4  200000f0  0801fad8  000300f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b2e4  0801fad8  0003b2e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006a46c  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006845  00000000  00000000  0009a58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004a78  00000000  00000000  000a0dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004750  00000000  00000000  000a5850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f87  00000000  00000000  000a9fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032736  00000000  00000000  000d0f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104fa1  00000000  00000000  0010365d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  002085fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000150c4  00000000  00000000  00208648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012684 	.word	0x08012684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	08012684 	.word	0x08012684

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	78fa      	ldrb	r2, [r7, #3]
 8000f9c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4603      	mov	r3, r0
 8000fbc:	817b      	strh	r3, [r7, #10]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	813b      	strh	r3, [r7, #8]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000fc6:	897a      	ldrh	r2, [r7, #10]
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b298      	uxth	r0, r3
 8000fce:	893a      	ldrh	r2, [r7, #8]
 8000fd0:	8b3b      	ldrh	r3, [r7, #24]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	893a      	ldrh	r2, [r7, #8]
 8000fd8:	8979      	ldrh	r1, [r7, #10]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4603      	mov	r3, r0
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f001 faf0 	bl	80025c4 <u8g2_IsIntersection>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d012      	beq.n	8001010 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8000fea:	e00d      	b.n	8001008 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	893a      	ldrh	r2, [r7, #8]
 8000ff0:	8979      	ldrh	r1, [r7, #10]
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	9000      	str	r0, [sp, #0]
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f001 f9dd 	bl	80023b6 <u8g2_DrawHVLine>
    y++;    
 8000ffc:	893b      	ldrh	r3, [r7, #8]
 8000ffe:	3301      	adds	r3, #1
 8001000:	813b      	strh	r3, [r7, #8]
    h--;
 8001002:	8b3b      	ldrh	r3, [r7, #24]
 8001004:	3b01      	subs	r3, #1
 8001006:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8001008:	8b3b      	ldrh	r3, [r7, #24]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1ee      	bne.n	8000fec <u8g2_DrawBox+0x40>
 800100e:	e000      	b.n	8001012 <u8g2_DrawBox+0x66>
    return;
 8001010:	bf00      	nop
  }
}
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af02      	add	r7, sp, #8
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	4608      	mov	r0, r1
 8001022:	4611      	mov	r1, r2
 8001024:	461a      	mov	r2, r3
 8001026:	4603      	mov	r3, r0
 8001028:	817b      	strh	r3, [r7, #10]
 800102a:	460b      	mov	r3, r1
 800102c:	813b      	strh	r3, [r7, #8]
 800102e:	4613      	mov	r3, r2
 8001030:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8001032:	897b      	ldrh	r3, [r7, #10]
 8001034:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001036:	897a      	ldrh	r2, [r7, #10]
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	4413      	add	r3, r2
 800103c:	b298      	uxth	r0, r3
 800103e:	893a      	ldrh	r2, [r7, #8]
 8001040:	8c3b      	ldrh	r3, [r7, #32]
 8001042:	4413      	add	r3, r2
 8001044:	b29b      	uxth	r3, r3
 8001046:	893a      	ldrh	r2, [r7, #8]
 8001048:	8979      	ldrh	r1, [r7, #10]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4603      	mov	r3, r0
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f001 fab8 	bl	80025c4 <u8g2_IsIntersection>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d037      	beq.n	80010ca <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	893a      	ldrh	r2, [r7, #8]
 800105e:	8979      	ldrh	r1, [r7, #10]
 8001060:	2000      	movs	r0, #0
 8001062:	9000      	str	r0, [sp, #0]
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f001 f9a6 	bl	80023b6 <u8g2_DrawHVLine>
  if (h >= 2) {
 800106a:	8c3b      	ldrh	r3, [r7, #32]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d92d      	bls.n	80010cc <u8g2_DrawFrame+0xb4>
    h-=2;
 8001070:	8c3b      	ldrh	r3, [r7, #32]
 8001072:	3b02      	subs	r3, #2
 8001074:	843b      	strh	r3, [r7, #32]
    y++;
 8001076:	893b      	ldrh	r3, [r7, #8]
 8001078:	3301      	adds	r3, #1
 800107a:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 800107c:	8c3b      	ldrh	r3, [r7, #32]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d01a      	beq.n	80010b8 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001082:	8c3b      	ldrh	r3, [r7, #32]
 8001084:	893a      	ldrh	r2, [r7, #8]
 8001086:	8979      	ldrh	r1, [r7, #10]
 8001088:	2001      	movs	r0, #1
 800108a:	9000      	str	r0, [sp, #0]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f001 f992 	bl	80023b6 <u8g2_DrawHVLine>
      x+=w;
 8001092:	897a      	ldrh	r2, [r7, #10]
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	4413      	add	r3, r2
 8001098:	817b      	strh	r3, [r7, #10]
      x--;
 800109a:	897b      	ldrh	r3, [r7, #10]
 800109c:	3b01      	subs	r3, #1
 800109e:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80010a0:	8c3b      	ldrh	r3, [r7, #32]
 80010a2:	893a      	ldrh	r2, [r7, #8]
 80010a4:	8979      	ldrh	r1, [r7, #10]
 80010a6:	2001      	movs	r0, #1
 80010a8:	9000      	str	r0, [sp, #0]
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f001 f983 	bl	80023b6 <u8g2_DrawHVLine>
      y+=h;
 80010b0:	893a      	ldrh	r2, [r7, #8]
 80010b2:	8c3b      	ldrh	r3, [r7, #32]
 80010b4:	4413      	add	r3, r2
 80010b6:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	893a      	ldrh	r2, [r7, #8]
 80010bc:	8af9      	ldrh	r1, [r7, #22]
 80010be:	2000      	movs	r0, #0
 80010c0:	9000      	str	r0, [sp, #0]
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f001 f977 	bl	80023b6 <u8g2_DrawHVLine>
 80010c8:	e000      	b.n	80010cc <u8g2_DrawFrame+0xb4>
    return;
 80010ca:	bf00      	nop
  }
}
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	7c1b      	ldrb	r3, [r3, #16]
 80010e0:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010e8:	461a      	mov	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00e fcf5 	bl	800faf0 <memset>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af02      	add	r7, sp, #8
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	70fb      	strb	r3, [r7, #3]
 800111a:	4613      	mov	r3, r2
 800111c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	7c1b      	ldrb	r3, [r3, #16]
 8001124:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	b29b      	uxth	r3, r3
 8001134:	89ba      	ldrh	r2, [r7, #12]
 8001136:	fb12 f303 	smulbb	r3, r2, r3
 800113a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800113c:	89bb      	ldrh	r3, [r7, #12]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001142:	89bb      	ldrh	r3, [r7, #12]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	4413      	add	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800114a:	7bf9      	ldrb	r1, [r7, #15]
 800114c:	78ba      	ldrb	r2, [r7, #2]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	460b      	mov	r3, r1
 8001154:	2100      	movs	r1, #0
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f001 ff9d 	bl	8003096 <u8x8_DrawTile>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001176:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800117e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	7c5b      	ldrb	r3, [r3, #17]
 8001186:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001188:	7bba      	ldrb	r2, [r7, #14]
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	4619      	mov	r1, r3
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffbd 	bl	800110e <u8g2_send_tile_row>
    src_row++;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	3301      	adds	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	3301      	adds	r3, #1
 800119e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	7b7b      	ldrb	r3, [r7, #13]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d203      	bcs.n	80011b0 <u8g2_send_buffer+0x4c>
 80011a8:	7bba      	ldrb	r2, [r7, #14]
 80011aa:	7b3b      	ldrb	r3, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d3eb      	bcc.n	8001188 <u8g2_send_buffer+0x24>
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ffcf 	bl	8001164 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 ffb6 	bl	8003138 <u8x8_RefreshDisplay>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	78fa      	ldrb	r2, [r7, #3]
 80011e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	4798      	blx	r3
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff5b 	bl	80010d2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800121c:	2100      	movs	r1, #0
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffd8 	bl	80011d4 <u8g2_SetBufferCurrTileRow>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff95 	bl	8001164 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001240:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	4413      	add	r3, r2
 800124c:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	7c5b      	ldrb	r3, [r3, #17]
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	429a      	cmp	r2, r3
 8001258:	d304      	bcc.n	8001264 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f001 ff6c 	bl	8003138 <u8x8_RefreshDisplay>
    return 0;
 8001260:	2300      	movs	r3, #0
 8001262:	e00d      	b.n	8001280 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff2f 	bl	80010d2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	4619      	mov	r1, r3
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ffab 	bl	80011d4 <u8g2_SetBufferCurrTileRow>
  return 1;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af02      	add	r7, sp, #8
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4603      	mov	r3, r0
 8001298:	817b      	strh	r3, [r7, #10]
 800129a:	460b      	mov	r3, r1
 800129c:	813b      	strh	r3, [r7, #8]
 800129e:	4613      	mov	r3, r2
 80012a0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 80012a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80012a4:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 80012a6:	2308      	movs	r3, #8
 80012a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80012b8:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80012c0:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80012c8:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 80012d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012d6:	3301      	adds	r3, #1
 80012d8:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 80012da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012dc:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 80012de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012e0:	3301      	adds	r3, #1
 80012e2:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 80012e4:	897b      	ldrh	r3, [r7, #10]
 80012e6:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 80012e8:	8b7a      	ldrh	r2, [r7, #26]
 80012ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 80012f0:	8b7a      	ldrh	r2, [r7, #26]
 80012f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 80012f8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012fc:	4413      	add	r3, r2
 80012fe:	b29b      	uxth	r3, r3
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	8c3b      	ldrh	r3, [r7, #32]
 8001306:	4413      	add	r3, r2
 8001308:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 800130a:	893b      	ldrh	r3, [r7, #8]
 800130c:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	4798      	blx	r3
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	8afb      	ldrh	r3, [r7, #22]
 800131c:	4413      	add	r3, r2
 800131e:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8001320:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001324:	b29b      	uxth	r3, r3
 8001326:	8afa      	ldrh	r2, [r7, #22]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 800132c:	8afa      	ldrh	r2, [r7, #22]
 800132e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 8001334:	8afa      	ldrh	r2, [r7, #22]
 8001336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 800133c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001340:	b21a      	sxth	r2, r3
 8001342:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001346:	b21b      	sxth	r3, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	b21b      	sxth	r3, r3
 800134c:	b29a      	uxth	r2, r3
 800134e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001350:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001352:	440b      	add	r3, r1
 8001354:	b29b      	uxth	r3, r3
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	b29b      	uxth	r3, r3
 800135a:	4413      	add	r3, r2
 800135c:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 800135e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001360:	2b00      	cmp	r3, #0
 8001362:	d067      	beq.n	8001434 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 8001364:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001366:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001368:	429a      	cmp	r2, r3
 800136a:	d109      	bne.n	8001380 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 800136c:	7f7b      	ldrb	r3, [r7, #29]
 800136e:	2b00      	cmp	r3, #0
 8001370:	bf0c      	ite	eq
 8001372:	2301      	moveq	r3, #1
 8001374:	2300      	movne	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f001 f8d8 	bl	8002530 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 8001380:	8b38      	ldrh	r0, [r7, #24]
 8001382:	8afa      	ldrh	r2, [r7, #22]
 8001384:	8b79      	ldrh	r1, [r7, #26]
 8001386:	8abb      	ldrh	r3, [r7, #20]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	4603      	mov	r3, r0
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff fe43 	bl	8001018 <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001392:	7f7b      	ldrb	r3, [r7, #29]
 8001394:	4619      	mov	r1, r3
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f001 f8ca 	bl	8002530 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	f003 0318 	and.w	r3, r3, #24
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d042      	beq.n	800142c <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 80013a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d13c      	bne.n	800142c <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	10db      	asrs	r3, r3, #3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 80013be:	8a7b      	ldrh	r3, [r7, #18]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 80013c4:	2300      	movs	r3, #0
 80013c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80013c8:	e02c      	b.n	8001424 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 80013ca:	8b7a      	ldrh	r2, [r7, #26]
 80013cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013ce:	4413      	add	r3, r2
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8a7b      	ldrh	r3, [r7, #18]
 80013d4:	4413      	add	r3, r2
 80013d6:	b299      	uxth	r1, r3
 80013d8:	8afa      	ldrh	r2, [r7, #22]
 80013da:	8abb      	ldrh	r3, [r7, #20]
 80013dc:	4413      	add	r3, r2
 80013de:	b29a      	uxth	r2, r3
 80013e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013e2:	4413      	add	r3, r2
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8a7b      	ldrh	r3, [r7, #18]
 80013e8:	4413      	add	r3, r2
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	8b3b      	ldrh	r3, [r7, #24]
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f001 f86c 	bl	80024cc <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 80013f4:	8b7a      	ldrh	r2, [r7, #26]
 80013f6:	8b3b      	ldrh	r3, [r7, #24]
 80013f8:	4413      	add	r3, r2
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013fe:	4413      	add	r3, r2
 8001400:	b29a      	uxth	r2, r3
 8001402:	8a7b      	ldrh	r3, [r7, #18]
 8001404:	4413      	add	r3, r2
 8001406:	b299      	uxth	r1, r3
 8001408:	8afa      	ldrh	r2, [r7, #22]
 800140a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800140c:	4413      	add	r3, r2
 800140e:	b29a      	uxth	r2, r3
 8001410:	8a7b      	ldrh	r3, [r7, #18]
 8001412:	4413      	add	r3, r2
 8001414:	b29a      	uxth	r2, r3
 8001416:	8abb      	ldrh	r3, [r7, #20]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f001 f870 	bl	80024fe <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 800141e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001420:	3301      	adds	r3, #1
 8001422:	847b      	strh	r3, [r7, #34]	; 0x22
 8001424:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001428:	429a      	cmp	r2, r3
 800142a:	d3ce      	bcc.n	80013ca <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 800142c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800142e:	3b01      	subs	r3, #1
 8001430:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 8001432:	e757      	b.n	80012e4 <u8g2_DrawButtonFrame+0x5c>
      break;
 8001434:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	2b00      	cmp	r3, #0
 800143e:	d011      	beq.n	8001464 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 8001440:	2102      	movs	r1, #2
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f001 f874 	bl	8002530 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 8001448:	8b38      	ldrh	r0, [r7, #24]
 800144a:	8afa      	ldrh	r2, [r7, #22]
 800144c:	8b79      	ldrh	r1, [r7, #26]
 800144e:	8abb      	ldrh	r3, [r7, #20]
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	4603      	mov	r3, r0
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f7ff fda9 	bl	8000fac <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 800145a:	7f7b      	ldrb	r3, [r7, #29]
 800145c:	4619      	mov	r1, r3
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f001 f866 	bl	8002530 <u8g2_SetDrawColor>
  }
}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af04      	add	r7, sp, #16
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4603      	mov	r3, r0
 800147c:	817b      	strh	r3, [r7, #10]
 800147e:	460b      	mov	r3, r1
 8001480:	813b      	strh	r3, [r7, #8]
 8001482:	4613      	mov	r3, r2
 8001484:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 8001486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 ff11 	bl	80022b0 <u8g2_GetUTF8Width>
 800148e:	4603      	mov	r3, r0
 8001490:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8001492:	2300      	movs	r3, #0
 8001494:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149c:	2b00      	cmp	r3, #0
 800149e:	d009      	beq.n	80014b4 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 80014a0:	8afb      	ldrh	r3, [r7, #22]
 80014a2:	3301      	adds	r3, #1
 80014a4:	0fda      	lsrs	r2, r3, #31
 80014a6:	4413      	add	r3, r2
 80014a8:	105b      	asrs	r3, r3, #1
 80014aa:	425b      	negs	r3, r3
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	897b      	ldrh	r3, [r7, #10]
 80014b0:	4413      	add	r3, r2
 80014b2:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 80014b4:	8afa      	ldrh	r2, [r7, #22]
 80014b6:	8c3b      	ldrh	r3, [r7, #32]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d20d      	bcs.n	80014d8 <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 80014c6:	8c3a      	ldrh	r2, [r7, #32]
 80014c8:	8afb      	ldrh	r3, [r7, #22]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	0fda      	lsrs	r2, r3, #31
 80014ce:	4413      	add	r3, r2
 80014d0:	105b      	asrs	r3, r3, #1
 80014d2:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 80014d4:	8c3b      	ldrh	r3, [r7, #32]
 80014d6:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 80014d8:	2101      	movs	r1, #1
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 fcdc 	bl	8001e98 <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 80014e0:	893a      	ldrh	r2, [r7, #8]
 80014e2:	8979      	ldrh	r1, [r7, #10]
 80014e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 fdae 	bl	8002048 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 80014ec:	897a      	ldrh	r2, [r7, #10]
 80014ee:	8abb      	ldrh	r3, [r7, #20]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	b299      	uxth	r1, r3
 80014f4:	88f8      	ldrh	r0, [r7, #6]
 80014f6:	893a      	ldrh	r2, [r7, #8]
 80014f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	8afb      	ldrh	r3, [r7, #22]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	4603      	mov	r3, r0
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f7ff febe 	bl	8001288 <u8g2_DrawButtonFrame>
  
}
 800150c:	bf00      	nop
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fe71 	bl	8001204 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fe82 	bl	800122c <u8g2_NextPage>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f9      	bne.n	8001522 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800152e:	2100      	movs	r1, #0
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff fe4f 	bl	80011d4 <u8g2_SetBufferCurrTileRow>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2204      	movs	r2, #4
 800154c:	701a      	strb	r2, [r3, #0]
  return buf;
 800154e:	4b03      	ldr	r3, [pc, #12]	; (800155c <u8g2_m_16_4_f+0x1c>)
  #endif
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	2000010c 	.word	0x2000010c

08001560 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1305 f */
void u8g2_Setup_ssd1305_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af02      	add	r7, sp, #8
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1305_128x32_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x44>)
 8001576:	490c      	ldr	r1, [pc, #48]	; (80015a8 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x48>)
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f001 fe3d 	bl	80031f8 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 800157e:	f107 0313 	add.w	r3, r7, #19
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ffdc 	bl	8001540 <u8g2_m_16_4_f>
 8001588:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800158a:	7cfa      	ldrb	r2, [r7, #19]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x4c>)
 8001592:	6979      	ldr	r1, [r7, #20]
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f001 f8ff 	bl	8002798 <u8g2_SetupBuffer>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	08002d8d 	.word	0x08002d8d
 80015a8:	08002f4d 	.word	0x08002f4d
 80015ac:	0800261b 	.word	0x0800261b

080015b0 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	781b      	ldrb	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	81fb      	strh	r3, [r7, #14]
    font++;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3301      	adds	r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80015f4:	89fb      	ldrh	r3, [r7, #14]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	4413      	add	r3, r2
 8001604:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001606:	89fb      	ldrh	r3, [r7, #14]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800161e:	2100      	movs	r1, #0
 8001620:	6838      	ldr	r0, [r7, #0]
 8001622:	f7ff ffc5 	bl	80015b0 <u8g2_font_get_byte>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800162e:	2101      	movs	r1, #1
 8001630:	6838      	ldr	r0, [r7, #0]
 8001632:	f7ff ffbd 	bl	80015b0 <u8g2_font_get_byte>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800163e:	2102      	movs	r1, #2
 8001640:	6838      	ldr	r0, [r7, #0]
 8001642:	f7ff ffb5 	bl	80015b0 <u8g2_font_get_byte>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800164e:	2103      	movs	r1, #3
 8001650:	6838      	ldr	r0, [r7, #0]
 8001652:	f7ff ffad 	bl	80015b0 <u8g2_font_get_byte>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800165e:	2104      	movs	r1, #4
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f7ff ffa5 	bl	80015b0 <u8g2_font_get_byte>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800166e:	2105      	movs	r1, #5
 8001670:	6838      	ldr	r0, [r7, #0]
 8001672:	f7ff ff9d 	bl	80015b0 <u8g2_font_get_byte>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800167e:	2106      	movs	r1, #6
 8001680:	6838      	ldr	r0, [r7, #0]
 8001682:	f7ff ff95 	bl	80015b0 <u8g2_font_get_byte>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800168e:	2107      	movs	r1, #7
 8001690:	6838      	ldr	r0, [r7, #0]
 8001692:	f7ff ff8d 	bl	80015b0 <u8g2_font_get_byte>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800169e:	2108      	movs	r1, #8
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f7ff ff85 	bl	80015b0 <u8g2_font_get_byte>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80016ae:	2109      	movs	r1, #9
 80016b0:	6838      	ldr	r0, [r7, #0]
 80016b2:	f7ff ff7d 	bl	80015b0 <u8g2_font_get_byte>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80016be:	210a      	movs	r1, #10
 80016c0:	6838      	ldr	r0, [r7, #0]
 80016c2:	f7ff ff75 	bl	80015b0 <u8g2_font_get_byte>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b25a      	sxtb	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80016ce:	210b      	movs	r1, #11
 80016d0:	6838      	ldr	r0, [r7, #0]
 80016d2:	f7ff ff6d 	bl	80015b0 <u8g2_font_get_byte>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b25a      	sxtb	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80016de:	210c      	movs	r1, #12
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f7ff ff65 	bl	80015b0 <u8g2_font_get_byte>
 80016e6:	4603      	mov	r3, r0
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80016ee:	210d      	movs	r1, #13
 80016f0:	6838      	ldr	r0, [r7, #0]
 80016f2:	f7ff ff5d 	bl	80015b0 <u8g2_font_get_byte>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80016fe:	210e      	movs	r1, #14
 8001700:	6838      	ldr	r0, [r7, #0]
 8001702:	f7ff ff55 	bl	80015b0 <u8g2_font_get_byte>
 8001706:	4603      	mov	r3, r0
 8001708:	b25a      	sxtb	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800170e:	210f      	movs	r1, #15
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f7ff ff4d 	bl	80015b0 <u8g2_font_get_byte>
 8001716:	4603      	mov	r3, r0
 8001718:	b25a      	sxtb	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800171e:	2110      	movs	r1, #16
 8001720:	6838      	ldr	r0, [r7, #0]
 8001722:	f7ff ff45 	bl	80015b0 <u8g2_font_get_byte>
 8001726:	4603      	mov	r3, r0
 8001728:	b25a      	sxtb	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800172e:	2111      	movs	r1, #17
 8001730:	6838      	ldr	r0, [r7, #0]
 8001732:	f7ff ff4f 	bl	80015d4 <u8g2_font_get_word>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800173e:	2113      	movs	r1, #19
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f7ff ff47 	bl	80015d4 <u8g2_font_get_word>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800174e:	2115      	movs	r1, #21
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f7ff ff3f 	bl	80015d4 <u8g2_font_get_word>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	82da      	strh	r2, [r3, #22]
#endif
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001766:	b480      	push	{r7}
 8001768:	b085      	sub	sp, #20
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7b1b      	ldrb	r3, [r3, #12]
 8001776:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	7b7b      	ldrb	r3, [r7, #13]
 8001784:	fa42 f303 	asr.w	r3, r2, r3
 8001788:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800178a:	7b7b      	ldrb	r3, [r7, #13]
 800178c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800178e:	7bba      	ldrb	r2, [r7, #14]
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	4413      	add	r3, r2
 8001794:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001796:	7bbb      	ldrb	r3, [r7, #14]
 8001798:	2b07      	cmp	r3, #7
 800179a:	d91a      	bls.n	80017d2 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800179c:	2308      	movs	r3, #8
 800179e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80017a0:	7b3a      	ldrb	r2, [r7, #12]
 80017a2:	7b7b      	ldrb	r3, [r7, #13]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	7b3b      	ldrb	r3, [r7, #12]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	b25a      	sxtb	r2, r3
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80017cc:	7bbb      	ldrb	r3, [r7, #14]
 80017ce:	3b08      	subs	r3, #8
 80017d0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	4013      	ands	r3, r2
 80017e6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7bba      	ldrb	r2, [r7, #14]
 80017ec:	731a      	strb	r2, [r3, #12]
  return val;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	4619      	mov	r1, r3
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ffaa 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001816:	2301      	movs	r3, #1
 8001818:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	3b01      	subs	r3, #1
 800181e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001820:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	7bbb      	ldrb	r3, [r7, #14]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	73fb      	strb	r3, [r7, #15]
  return v;
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001842:	b490      	push	{r4, r7}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	4604      	mov	r4, r0
 800184a:	4608      	mov	r0, r1
 800184c:	4611      	mov	r1, r2
 800184e:	461a      	mov	r2, r3
 8001850:	4623      	mov	r3, r4
 8001852:	80fb      	strh	r3, [r7, #6]
 8001854:	4603      	mov	r3, r0
 8001856:	717b      	strb	r3, [r7, #5]
 8001858:	460b      	mov	r3, r1
 800185a:	713b      	strb	r3, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d014      	beq.n	8001890 <u8g2_add_vector_y+0x4e>
 8001866:	2b02      	cmp	r3, #2
 8001868:	dc19      	bgt.n	800189e <u8g2_add_vector_y+0x5c>
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <u8g2_add_vector_y+0x32>
 800186e:	2b01      	cmp	r3, #1
 8001870:	d007      	beq.n	8001882 <u8g2_add_vector_y+0x40>
 8001872:	e014      	b.n	800189e <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001874:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001878:	b29a      	uxth	r2, r3
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	4413      	add	r3, r2
 800187e:	80fb      	strh	r3, [r7, #6]
      break;
 8001880:	e014      	b.n	80018ac <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8001882:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001886:	b29a      	uxth	r2, r3
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	4413      	add	r3, r2
 800188c:	80fb      	strh	r3, [r7, #6]
      break;
 800188e:	e00d      	b.n	80018ac <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8001890:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001894:	b29b      	uxth	r3, r3
 8001896:	88fa      	ldrh	r2, [r7, #6]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	80fb      	strh	r3, [r7, #6]
      break;
 800189c:	e006      	b.n	80018ac <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800189e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	88fa      	ldrh	r2, [r7, #6]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	80fb      	strh	r3, [r7, #6]
      break;      
 80018aa:	bf00      	nop
  }
  return dy;
 80018ac:	88fb      	ldrh	r3, [r7, #6]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc90      	pop	{r4, r7}
 80018b6:	4770      	bx	lr

080018b8 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80018b8:	b490      	push	{r4, r7}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4604      	mov	r4, r0
 80018c0:	4608      	mov	r0, r1
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	4623      	mov	r3, r4
 80018c8:	80fb      	strh	r3, [r7, #6]
 80018ca:	4603      	mov	r3, r0
 80018cc:	717b      	strb	r3, [r7, #5]
 80018ce:	460b      	mov	r3, r1
 80018d0:	713b      	strb	r3, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d014      	beq.n	8001906 <u8g2_add_vector_x+0x4e>
 80018dc:	2b02      	cmp	r3, #2
 80018de:	dc19      	bgt.n	8001914 <u8g2_add_vector_x+0x5c>
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <u8g2_add_vector_x+0x32>
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d007      	beq.n	80018f8 <u8g2_add_vector_x+0x40>
 80018e8:	e014      	b.n	8001914 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80018ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	4413      	add	r3, r2
 80018f4:	80fb      	strh	r3, [r7, #6]
      break;
 80018f6:	e014      	b.n	8001922 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80018f8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	88fa      	ldrh	r2, [r7, #6]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	80fb      	strh	r3, [r7, #6]
      break;
 8001904:	e00d      	b.n	8001922 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8001906:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800190a:	b29b      	uxth	r3, r3
 800190c:	88fa      	ldrh	r2, [r7, #6]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	80fb      	strh	r3, [r7, #6]
      break;
 8001912:	e006      	b.n	8001922 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001914:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001918:	b29a      	uxth	r2, r3
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	4413      	add	r3, r2
 800191e:	80fb      	strh	r3, [r7, #6]
      break;      
 8001920:	bf00      	nop
  }
  return dx;
 8001922:	88fb      	ldrh	r3, [r7, #6]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bc90      	pop	{r4, r7}
 800192c:	4770      	bx	lr

0800192e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b088      	sub	sp, #32
 8001932:	af02      	add	r7, sp, #8
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	70fb      	strb	r3, [r7, #3]
 800193a:	4613      	mov	r3, r2
 800193c:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3360      	adds	r3, #96	; 0x60
 8001942:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800194e:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001956:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800195e:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	7d7b      	ldrb	r3, [r7, #21]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800196c:	7dfa      	ldrb	r2, [r7, #23]
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	429a      	cmp	r2, r3
 8001972:	d201      	bcs.n	8001978 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	889b      	ldrh	r3, [r3, #4]
 800197c:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	88db      	ldrh	r3, [r3, #6]
 8001982:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001984:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001988:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	7c1b      	ldrb	r3, [r3, #16]
 8001990:	89b8      	ldrh	r0, [r7, #12]
 8001992:	f7ff ff91 	bl	80018b8 <u8g2_add_vector_x>
 8001996:	4603      	mov	r3, r0
 8001998:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800199a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800199e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	7c1b      	ldrb	r3, [r3, #16]
 80019a6:	8978      	ldrh	r0, [r7, #10]
 80019a8:	f7ff ff4b 	bl	8001842 <u8g2_add_vector_y>
 80019ac:	4603      	mov	r3, r0
 80019ae:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80019b0:	78bb      	ldrb	r3, [r7, #2]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d010      	beq.n	80019d8 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	7b9a      	ldrb	r2, [r3, #14]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80019c0:	7dbb      	ldrb	r3, [r7, #22]
 80019c2:	b298      	uxth	r0, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	7c1b      	ldrb	r3, [r3, #16]
 80019c8:	897a      	ldrh	r2, [r7, #10]
 80019ca:	89b9      	ldrh	r1, [r7, #12]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	4603      	mov	r3, r0
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 fcf0 	bl	80023b6 <u8g2_DrawHVLine>
 80019d6:	e013      	b.n	8001a00 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	7b5b      	ldrb	r3, [r3, #13]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10f      	bne.n	8001a00 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	7bda      	ldrb	r2, [r3, #15]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80019ea:	7dbb      	ldrb	r3, [r7, #22]
 80019ec:	b298      	uxth	r0, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	7c1b      	ldrb	r3, [r3, #16]
 80019f2:	897a      	ldrh	r2, [r7, #10]
 80019f4:	89b9      	ldrh	r1, [r7, #12]
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	4603      	mov	r3, r0
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fcdb 	bl	80023b6 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001a00:	7dfa      	ldrb	r2, [r7, #23]
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d309      	bcc.n	8001a1c <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001a08:	7dfa      	ldrb	r2, [r7, #23]
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	757b      	strb	r3, [r7, #21]
    ly++;
 8001a14:	7d3b      	ldrb	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001a1a:	e79d      	b.n	8001958 <u8g2_font_decode_len+0x2a>
      break;
 8001a1c:	bf00      	nop
  }
  lx += cnt;
 8001a1e:	7d7a      	ldrb	r2, [r7, #21]
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	4413      	add	r3, r2
 8001a24:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001a26:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8001a2e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	725a      	strb	r2, [r3, #9]
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3360      	adds	r3, #96	; 0x60
 8001a4c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001a60:	4619      	mov	r1, r3
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f7ff fe7f 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b25a      	sxtb	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001a76:	4619      	mov	r1, r3
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f7ff fe74 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b25a      	sxtb	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	7b9b      	ldrb	r3, [r3, #14]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	73da      	strb	r2, [r3, #15]
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3360      	adds	r3, #96	; 0x60
 8001aba:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001abc:	6839      	ldr	r1, [r7, #0]
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffbd 	bl	8001a3e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001aca:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6978      	ldr	r0, [r7, #20]
 8001ad6:	f7ff fe91 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001ada:	4603      	mov	r3, r0
 8001adc:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff fe88 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001aec:	4603      	mov	r3, r0
 8001aee:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001af6:	4619      	mov	r1, r3
 8001af8:	6978      	ldr	r0, [r7, #20]
 8001afa:	f7ff fe7f 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001afe:	4603      	mov	r3, r0
 8001b00:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f340 80d7 	ble.w	8001cbc <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	8898      	ldrh	r0, [r3, #4]
 8001b12:	7cfa      	ldrb	r2, [r7, #19]
 8001b14:	7c7b      	ldrb	r3, [r7, #17]
 8001b16:	4413      	add	r3, r2
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	b25a      	sxtb	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	7c1b      	ldrb	r3, [r3, #16]
 8001b24:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001b28:	f7ff fec6 	bl	80018b8 <u8g2_add_vector_x>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	88d8      	ldrh	r0, [r3, #6]
 8001b38:	7cfa      	ldrb	r2, [r7, #19]
 8001b3a:	7c7b      	ldrb	r3, [r7, #17]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	425b      	negs	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	7c1b      	ldrb	r3, [r3, #16]
 8001b4a:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001b4e:	f7ff fe78 	bl	8001842 <u8g2_add_vector_y>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	889b      	ldrh	r3, [r3, #4]
 8001b5e:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	88db      	ldrh	r3, [r3, #6]
 8001b64:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001b66:	8bfb      	ldrh	r3, [r7, #30]
 8001b68:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001b6a:	8b7b      	ldrh	r3, [r7, #26]
 8001b6c:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	7c1b      	ldrb	r3, [r3, #16]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d85a      	bhi.n	8001c2c <u8g2_font_decode_glyph+0x180>
 8001b76:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <u8g2_font_decode_glyph+0xd0>)
 8001b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7c:	08001b8d 	.word	0x08001b8d
 8001b80:	08001ba9 	.word	0x08001ba9
 8001b84:	08001bd1 	.word	0x08001bd1
 8001b88:	08001c05 	.word	0x08001c05
      {
	case 0:
	    x1 += decode->glyph_width;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	8bbb      	ldrh	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001b9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	8b3b      	ldrh	r3, [r7, #24]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	833b      	strh	r3, [r7, #24]
	    break;
 8001ba6:	e041      	b.n	8001c2c <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001ba8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	8bfa      	ldrh	r2, [r7, #30]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bb4:	8bfb      	ldrh	r3, [r7, #30]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001bba:	8bbb      	ldrh	r3, [r7, #28]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	8b3b      	ldrh	r3, [r7, #24]
 8001bca:	4413      	add	r3, r2
 8001bcc:	833b      	strh	r3, [r7, #24]
	    break;
 8001bce:	e02d      	b.n	8001c2c <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	8bfa      	ldrh	r2, [r7, #30]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bde:	8bfb      	ldrh	r3, [r7, #30]
 8001be0:	3301      	adds	r3, #1
 8001be2:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001be4:	8bbb      	ldrh	r3, [r7, #28]
 8001be6:	3301      	adds	r3, #1
 8001be8:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001bea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	8b7a      	ldrh	r2, [r7, #26]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bf6:	8b7b      	ldrh	r3, [r7, #26]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001bfc:	8b3b      	ldrh	r3, [r7, #24]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001c02:	e013      	b.n	8001c2c <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001c04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	8bbb      	ldrh	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	8b7a      	ldrh	r2, [r7, #26]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c1e:	8b7b      	ldrh	r3, [r7, #26]
 8001c20:	3301      	adds	r3, #1
 8001c22:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001c24:	8b3b      	ldrh	r3, [r7, #24]
 8001c26:	3301      	adds	r3, #1
 8001c28:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001c2a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001c2c:	8bb8      	ldrh	r0, [r7, #28]
 8001c2e:	8b7a      	ldrh	r2, [r7, #26]
 8001c30:	8bf9      	ldrh	r1, [r7, #30]
 8001c32:	8b3b      	ldrh	r3, [r7, #24]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	4603      	mov	r3, r0
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fcc3 	bl	80025c4 <u8g2_IsIntersection>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <u8g2_font_decode_glyph+0x19e>
	return d;
 8001c44:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001c48:	e03a      	b.n	8001cc0 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2200      	movs	r2, #0
 8001c54:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff fd81 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6978      	ldr	r0, [r7, #20]
 8001c72:	f7ff fd78 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001c76:	4603      	mov	r3, r0
 8001c78:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fe54 	bl	800192e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fe4e 	bl	800192e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001c92:	2101      	movs	r1, #1
 8001c94:	6978      	ldr	r0, [r7, #20]
 8001c96:	f7ff fd66 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ec      	bne.n	8001c7a <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001ca6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dd00      	ble.n	8001cb0 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001cae:	e7d2      	b.n	8001c56 <u8g2_font_decode_glyph+0x1aa>
	break;
 8001cb0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	7b9a      	ldrb	r2, [r3, #14]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8001cbc:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3317      	adds	r3, #23
 8001cde:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	2bff      	cmp	r3, #255	; 0xff
 8001ce4:	d82a      	bhi.n	8001d3c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	2b60      	cmp	r3, #96	; 0x60
 8001cea:	d907      	bls.n	8001cfc <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e009      	b.n	8001d10 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	2b40      	cmp	r3, #64	; 0x40
 8001d00:	d906      	bls.n	8001d10 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001d08:	461a      	mov	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d04e      	beq.n	8001db8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	887a      	ldrh	r2, [r7, #2]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d102      	bne.n	8001d2c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3302      	adds	r3, #2
 8001d2a:	e049      	b.n	8001dc0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	4413      	add	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001d3a:	e7e9      	b.n	8001d10 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001d42:	461a      	mov	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	4413      	add	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	6938      	ldr	r0, [r7, #16]
 8001d52:	f7ff fc3f 	bl	80015d4 <u8g2_font_get_word>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001d60:	2102      	movs	r1, #2
 8001d62:	6938      	ldr	r0, [r7, #16]
 8001d64:	f7ff fc36 	bl	80015d4 <u8g2_font_get_word>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001d72:	89fa      	ldrh	r2, [r7, #14]
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3e9      	bcc.n	8001d4e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001d80:	89fb      	ldrh	r3, [r7, #14]
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	89fb      	ldrh	r3, [r7, #14]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001d94:	89fb      	ldrh	r3, [r7, #14]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d010      	beq.n	8001dbc <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001d9a:	89fa      	ldrh	r2, [r7, #14]
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d102      	bne.n	8001da8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3303      	adds	r3, #3
 8001da6:	e00b      	b.n	8001dc0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3302      	adds	r3, #2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	4413      	add	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001db6:	e7e0      	b.n	8001d7a <u8g2_font_get_glyph_data+0xb2>
	break;
 8001db8:	bf00      	nop
 8001dba:	e000      	b.n	8001dbe <u8g2_font_get_glyph_data+0xf6>
	break;
 8001dbc:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	817b      	strh	r3, [r7, #10]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	813b      	strh	r3, [r7, #8]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	897a      	ldrh	r2, [r7, #10]
 8001dea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	893a      	ldrh	r2, [r7, #8]
 8001df2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7ff ff64 	bl	8001cc8 <u8g2_font_get_glyph_data>
 8001e00:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f7ff fe4e 	bl	8001aac <u8g2_font_decode_glyph>
 8001e10:	4603      	mov	r3, r0
 8001e12:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001e14:	8afb      	ldrh	r3, [r7, #22]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff4a 	bl	8001cc8 <u8g2_font_get_glyph_data>
 8001e34:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e027      	b.n	8001e90 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fdfb 	bl	8001a3e <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f7ff fcd0 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001e72:	4619      	mov	r1, r3
 8001e74:	4610      	mov	r0, r2
 8001e76:	f7ff fcc1 	bl	80017fc <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001e86:	4619      	mov	r1, r3
 8001e88:	4610      	mov	r0, r2
 8001e8a:	f7ff fcb7 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001e8e:	4603      	mov	r3, r0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	817b      	strh	r3, [r7, #10]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	813b      	strh	r3, [r7, #8]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d833      	bhi.n	8001f44 <u8g2_DrawGlyph+0x8c>
 8001edc:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <u8g2_DrawGlyph+0x2c>)
 8001ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee2:	bf00      	nop
 8001ee4:	08001ef5 	.word	0x08001ef5
 8001ee8:	08001f09 	.word	0x08001f09
 8001eec:	08001f1d 	.word	0x08001f1d
 8001ef0:	08001f31 	.word	0x08001f31
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	4798      	blx	r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	461a      	mov	r2, r3
 8001f00:	893b      	ldrh	r3, [r7, #8]
 8001f02:	4413      	add	r3, r2
 8001f04:	813b      	strh	r3, [r7, #8]
      break;
 8001f06:	e01d      	b.n	8001f44 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	4798      	blx	r3
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	897b      	ldrh	r3, [r7, #10]
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	817b      	strh	r3, [r7, #10]
      break;
 8001f1a:	e013      	b.n	8001f44 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	4798      	blx	r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	893b      	ldrh	r3, [r7, #8]
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	813b      	strh	r3, [r7, #8]
      break;
 8001f2e:	e009      	b.n	8001f44 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	4798      	blx	r3
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	897b      	ldrh	r3, [r7, #10]
 8001f3e:	4413      	add	r3, r2
 8001f40:	817b      	strh	r3, [r7, #10]
      break;
 8001f42:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	893a      	ldrh	r2, [r7, #8]
 8001f48:	8979      	ldrh	r1, [r7, #10]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f7ff ff3c 	bl	8001dc8 <u8g2_font_draw_glyph>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop

08001f5c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	817b      	strh	r3, [r7, #10]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 fd59 	bl	8002a26 <u8x8_utf8_init>
  sum = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	7812      	ldrb	r2, [r2, #0]
 8001f80:	4611      	mov	r1, r2
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	4798      	blx	r3
 8001f86:	4603      	mov	r3, r0
 8001f88:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001f8a:	8abb      	ldrh	r3, [r7, #20]
 8001f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d038      	beq.n	8002006 <u8g2_draw_string+0xaa>
      break;
    str++;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001f9a:	8abb      	ldrh	r3, [r7, #20]
 8001f9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d0e9      	beq.n	8001f78 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001fa4:	8abb      	ldrh	r3, [r7, #20]
 8001fa6:	893a      	ldrh	r2, [r7, #8]
 8001fa8:	8979      	ldrh	r1, [r7, #10]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f7ff ff84 	bl	8001eb8 <u8g2_DrawGlyph>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d81e      	bhi.n	8001ffc <u8g2_draw_string+0xa0>
 8001fbe:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <u8g2_draw_string+0x68>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	08001fd5 	.word	0x08001fd5
 8001fc8:	08001fdf 	.word	0x08001fdf
 8001fcc:	08001fe9 	.word	0x08001fe9
 8001fd0:	08001ff3 	.word	0x08001ff3
      {
	case 0:
	  x += delta;
 8001fd4:	897a      	ldrh	r2, [r7, #10]
 8001fd6:	8a7b      	ldrh	r3, [r7, #18]
 8001fd8:	4413      	add	r3, r2
 8001fda:	817b      	strh	r3, [r7, #10]
	  break;
 8001fdc:	e00e      	b.n	8001ffc <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001fde:	893a      	ldrh	r2, [r7, #8]
 8001fe0:	8a7b      	ldrh	r3, [r7, #18]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	813b      	strh	r3, [r7, #8]
	  break;
 8001fe6:	e009      	b.n	8001ffc <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001fe8:	897a      	ldrh	r2, [r7, #10]
 8001fea:	8a7b      	ldrh	r3, [r7, #18]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	817b      	strh	r3, [r7, #10]
	  break;
 8001ff0:	e004      	b.n	8001ffc <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001ff2:	893a      	ldrh	r2, [r7, #8]
 8001ff4:	8a7b      	ldrh	r3, [r7, #18]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	813b      	strh	r3, [r7, #8]
	  break;
 8001ffa:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001ffc:	8afa      	ldrh	r2, [r7, #22]
 8001ffe:	8a7b      	ldrh	r3, [r7, #18]
 8002000:	4413      	add	r3, r2
 8002002:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002004:	e7b8      	b.n	8001f78 <u8g2_draw_string+0x1c>
      break;
 8002006:	bf00      	nop
    }
  }
  return sum;
 8002008:	8afb      	ldrh	r3, [r7, #22]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop

08002014 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	817b      	strh	r3, [r7, #10]
 8002022:	4613      	mov	r3, r2
 8002024:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <u8g2_DrawStr+0x30>)
 800202a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800202c:	893a      	ldrh	r2, [r7, #8]
 800202e:	8979      	ldrh	r1, [r7, #10]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff ff92 	bl	8001f5c <u8g2_draw_string>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	08002a43 	.word	0x08002a43

08002048 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	817b      	strh	r3, [r7, #10]
 8002056:	4613      	mov	r3, r2
 8002058:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4a06      	ldr	r2, [pc, #24]	; (8002078 <u8g2_DrawUTF8+0x30>)
 800205e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002060:	893a      	ldrh	r2, [r7, #8]
 8002062:	8979      	ldrh	r1, [r7, #10]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7ff ff78 	bl	8001f5c <u8g2_draw_string>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	08002a71 	.word	0x08002a71

0800207c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	2b00      	cmp	r3, #0
 800208a:	d05d      	beq.n	8002148 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d04d      	beq.n	800214a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d11c      	bne.n	80020f2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80020c4:	429a      	cmp	r2, r3
 80020c6:	da05      	bge.n	80020d4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80020e0:	429a      	cmp	r2, r3
 80020e2:	dd32      	ble.n	800214a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80020f0:	e02b      	b.n	800214a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80020f8:	461a      	mov	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002100:	4619      	mov	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002108:	440b      	add	r3, r1
 800210a:	429a      	cmp	r2, r3
 800210c:	da0d      	bge.n	800212a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002114:	b2da      	uxtb	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800211c:	b2db      	uxtb	r3, r3
 800211e:	4413      	add	r3, r2
 8002120:	b2db      	uxtb	r3, r3
 8002122:	b25a      	sxtb	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002136:	429a      	cmp	r2, r3
 8002138:	dd07      	ble.n	800214a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002146:	e000      	b.n	800214a <u8g2_UpdateRefHeight+0xce>
    return;
 8002148:	bf00      	nop
  }  
}
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  return 0;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <u8g2_SetFontPosBaseline+0x1c>)
 8002178:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	08002155 	.word	0x08002155

0800218c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d00b      	beq.n	80021b8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3374      	adds	r3, #116	; 0x74
 80021aa:	6839      	ldr	r1, [r7, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fa31 	bl	8001614 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ff62 	bl	800207c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
  int8_t initial_x_offset = -64;
 80021ca:	23c0      	movs	r3, #192	; 0xc0
 80021cc:	72fb      	strb	r3, [r7, #11]
#endif 
  
  u8g2->font_decode.glyph_width = 0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fc25 	bl	8002a26 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	81fb      	strh	r3, [r7, #14]
  dx = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	81bb      	strh	r3, [r7, #12]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	7812      	ldrb	r2, [r2, #0]
 80021ec:	4611      	mov	r1, r2
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	813b      	strh	r3, [r7, #8]
    if ( e == 0x0ffff )
 80021f6:	893b      	ldrh	r3, [r7, #8]
 80021f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d01c      	beq.n	800223a <u8g2_string_width+0x7a>
      break;
    str++;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	3301      	adds	r3, #1
 8002204:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8002206:	893b      	ldrh	r3, [r7, #8]
 8002208:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800220c:	4293      	cmp	r3, r2
 800220e:	d0e9      	beq.n	80021e4 <u8g2_string_width+0x24>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8002210:	893b      	ldrh	r3, [r7, #8]
 8002212:	4619      	mov	r1, r3
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fe02 	bl	8001e1e <u8g2_GetGlyphWidth>
 800221a:	4603      	mov	r3, r0
 800221c:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
      if ( initial_x_offset == -64 )
 800221e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002222:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8002226:	d103      	bne.n	8002230 <u8g2_string_width+0x70>
        initial_x_offset = u8g2->glyph_x_offset;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800222e:	72fb      	strb	r3, [r7, #11]
#endif 
      //printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
      w += dx;
 8002230:	89fa      	ldrh	r2, [r7, #14]
 8002232:	89bb      	ldrh	r3, [r7, #12]
 8002234:	4413      	add	r3, r2
 8002236:	81fb      	strh	r3, [r7, #14]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002238:	e7d4      	b.n	80021e4 <u8g2_string_width+0x24>
      break;
 800223a:	bf00      	nop
    }
  }
  //printf("\n");
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01b      	beq.n	800227e <u8g2_string_width+0xbe>
  {
    //printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
    w -= dx;
 8002246:	89fa      	ldrh	r2, [r7, #14]
 8002248:	89bb      	ldrh	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	81fb      	strh	r3, [r7, #14]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002254:	b29a      	uxth	r2, r3
 8002256:	89fb      	ldrh	r3, [r7, #14]
 8002258:	4413      	add	r3, r2
 800225a:	81fb      	strh	r3, [r7, #14]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 8002262:	b29a      	uxth	r2, r3
 8002264:	89fb      	ldrh	r3, [r7, #14]
 8002266:	4413      	add	r3, r2
 8002268:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
    /* https://github.com/olikraus/u8g2/issues/1561 */
    if ( initial_x_offset > 0 )
 800226a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800226e:	2b00      	cmp	r3, #0
 8002270:	dd05      	ble.n	800227e <u8g2_string_width+0xbe>
      w+=initial_x_offset;
 8002272:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002276:	b29a      	uxth	r2, r3
 8002278:	89fb      	ldrh	r3, [r7, #14]
 800227a:	4413      	add	r3, r2
 800227c:	81fb      	strh	r3, [r7, #14]
#endif 
  }
  // printf("w=%d \n", w);
  
  return w;  
 800227e:	89fb      	ldrh	r3, [r7, #14]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a05      	ldr	r2, [pc, #20]	; (80022ac <u8g2_GetStrWidth+0x24>)
 8002296:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8002298:	6839      	ldr	r1, [r7, #0]
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ff90 	bl	80021c0 <u8g2_string_width>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	08002a43 	.word	0x08002a43

080022b0 <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <u8g2_GetUTF8Width+0x24>)
 80022be:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 80022c0:	6839      	ldr	r1, [r7, #0]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ff7c 	bl	80021c0 <u8g2_string_width>
 80022c8:	4603      	mov	r3, r0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	08002a71 	.word	0x08002a71

080022d8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	4611      	mov	r1, r2
 80022e4:	461a      	mov	r2, r3
 80022e6:	460b      	mov	r3, r1
 80022e8:	80fb      	strh	r3, [r7, #6]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80022f4:	8afb      	ldrh	r3, [r7, #22]
 80022f6:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	881a      	ldrh	r2, [r3, #0]
 80022fc:	8abb      	ldrh	r3, [r7, #20]
 80022fe:	4413      	add	r3, r2
 8002300:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002302:	8afa      	ldrh	r2, [r7, #22]
 8002304:	8abb      	ldrh	r3, [r7, #20]
 8002306:	429a      	cmp	r2, r3
 8002308:	d90b      	bls.n	8002322 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800230a:	8afa      	ldrh	r2, [r7, #22]
 800230c:	88bb      	ldrh	r3, [r7, #4]
 800230e:	429a      	cmp	r2, r3
 8002310:	d205      	bcs.n	800231e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002312:	88bb      	ldrh	r3, [r7, #4]
 8002314:	82bb      	strh	r3, [r7, #20]
      b--;
 8002316:	8abb      	ldrh	r3, [r7, #20]
 8002318:	3b01      	subs	r3, #1
 800231a:	82bb      	strh	r3, [r7, #20]
 800231c:	e001      	b.n	8002322 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002322:	8afa      	ldrh	r2, [r7, #22]
 8002324:	88bb      	ldrh	r3, [r7, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	d301      	bcc.n	800232e <u8g2_clip_intersection2+0x56>
    return 0;
 800232a:	2300      	movs	r3, #0
 800232c:	e01c      	b.n	8002368 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800232e:	8aba      	ldrh	r2, [r7, #20]
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	429a      	cmp	r2, r3
 8002334:	d801      	bhi.n	800233a <u8g2_clip_intersection2+0x62>
    return 0;
 8002336:	2300      	movs	r3, #0
 8002338:	e016      	b.n	8002368 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800233a:	8afa      	ldrh	r2, [r7, #22]
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	429a      	cmp	r2, r3
 8002340:	d201      	bcs.n	8002346 <u8g2_clip_intersection2+0x6e>
    a = c;
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8002346:	8aba      	ldrh	r2, [r7, #20]
 8002348:	88bb      	ldrh	r3, [r7, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	d901      	bls.n	8002352 <u8g2_clip_intersection2+0x7a>
    b = d;
 800234e:	88bb      	ldrh	r3, [r7, #4]
 8002350:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8afa      	ldrh	r2, [r7, #22]
 8002356:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002358:	8aba      	ldrh	r2, [r7, #20]
 800235a:	8afb      	ldrh	r3, [r7, #22]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	8aba      	ldrh	r2, [r7, #20]
 8002364:	801a      	strh	r2, [r3, #0]
  return 1;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b087      	sub	sp, #28
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	4608      	mov	r0, r1
 800237e:	4611      	mov	r1, r2
 8002380:	461a      	mov	r2, r3
 8002382:	4603      	mov	r3, r0
 8002384:	817b      	strh	r3, [r7, #10]
 8002386:	460b      	mov	r3, r1
 8002388:	813b      	strh	r3, [r7, #8]
 800238a:	4613      	mov	r3, r2
 800238c:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002392:	893a      	ldrh	r2, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800239c:	88f8      	ldrh	r0, [r7, #6]
 800239e:	893a      	ldrh	r2, [r7, #8]
 80023a0:	8979      	ldrh	r1, [r7, #10]
 80023a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4603      	mov	r3, r0
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	47a0      	blx	r4
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd90      	pop	{r4, r7, pc}

080023b6 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023b6:	b590      	push	{r4, r7, lr}
 80023b8:	b087      	sub	sp, #28
 80023ba:	af02      	add	r7, sp, #8
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	4608      	mov	r0, r1
 80023c0:	4611      	mov	r1, r2
 80023c2:	461a      	mov	r2, r3
 80023c4:	4603      	mov	r3, r0
 80023c6:	817b      	strh	r3, [r7, #10]
 80023c8:	460b      	mov	r3, r1
 80023ca:	813b      	strh	r3, [r7, #8]
 80023cc:	4613      	mov	r3, r2
 80023ce:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d075      	beq.n	80024c6 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d072      	beq.n	80024c6 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d91a      	bls.n	800241c <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80023e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d109      	bne.n	8002402 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80023ee:	897a      	ldrh	r2, [r7, #10]
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	817b      	strh	r3, [r7, #10]
	  x++;
 80023f8:	897b      	ldrh	r3, [r7, #10]
 80023fa:	3301      	adds	r3, #1
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	817b      	strh	r3, [r7, #10]
 8002400:	e00c      	b.n	800241c <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002402:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d108      	bne.n	800241c <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800240a:	893a      	ldrh	r2, [r7, #8]
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b29b      	uxth	r3, r3
 8002412:	813b      	strh	r3, [r7, #8]
	  y++;
 8002414:	893b      	ldrh	r3, [r7, #8]
 8002416:	3301      	adds	r3, #1
 8002418:	b29b      	uxth	r3, r3
 800241a:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800241c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002428:	f897 3020 	ldrb.w	r3, [r7, #32]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d11a      	bne.n	8002466 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002436:	893b      	ldrh	r3, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d83b      	bhi.n	80024b4 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002442:	893b      	ldrh	r3, [r7, #8]
 8002444:	429a      	cmp	r2, r3
 8002446:	d937      	bls.n	80024b8 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002454:	1db9      	adds	r1, r7, #6
 8002456:	f107 000a 	add.w	r0, r7, #10
 800245a:	f7ff ff3d 	bl	80022d8 <u8g2_clip_intersection2>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11a      	bne.n	800249a <u8g2_DrawHVLine+0xe4>
	  return;
 8002464:	e02f      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800246c:	897b      	ldrh	r3, [r7, #10]
 800246e:	429a      	cmp	r2, r3
 8002470:	d824      	bhi.n	80024bc <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002478:	897b      	ldrh	r3, [r7, #10]
 800247a:	429a      	cmp	r2, r3
 800247c:	d920      	bls.n	80024c0 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800248a:	1db9      	adds	r1, r7, #6
 800248c:	f107 0008 	add.w	r0, r7, #8
 8002490:	f7ff ff22 	bl	80022d8 <u8g2_clip_intersection2>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d014      	beq.n	80024c4 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	689c      	ldr	r4, [r3, #8]
 80024a0:	8979      	ldrh	r1, [r7, #10]
 80024a2:	893a      	ldrh	r2, [r7, #8]
 80024a4:	88f8      	ldrh	r0, [r7, #6]
 80024a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4603      	mov	r3, r0
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	47a0      	blx	r4
 80024b2:	e008      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024b4:	bf00      	nop
 80024b6:	e006      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024b8:	bf00      	nop
 80024ba:	e004      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024bc:	bf00      	nop
 80024be:	e002      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024c0:	bf00      	nop
 80024c2:	e000      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024c4:	bf00      	nop
    }
}
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd90      	pop	{r4, r7, pc}

080024cc <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	817b      	strh	r3, [r7, #10]
 80024de:	460b      	mov	r3, r1
 80024e0:	813b      	strh	r3, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	893a      	ldrh	r2, [r7, #8]
 80024ea:	8979      	ldrh	r1, [r7, #10]
 80024ec:	2000      	movs	r0, #0
 80024ee:	9000      	str	r0, [sp, #0]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f7ff ff60 	bl	80023b6 <u8g2_DrawHVLine>
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af02      	add	r7, sp, #8
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	4608      	mov	r0, r1
 8002508:	4611      	mov	r1, r2
 800250a:	461a      	mov	r2, r3
 800250c:	4603      	mov	r3, r0
 800250e:	817b      	strh	r3, [r7, #10]
 8002510:	460b      	mov	r3, r1
 8002512:	813b      	strh	r3, [r7, #8]
 8002514:	4613      	mov	r3, r2
 8002516:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	893a      	ldrh	r2, [r7, #8]
 800251c:	8979      	ldrh	r1, [r7, #10]
 800251e:	2001      	movs	r0, #1
 8002520:	9000      	str	r0, [sp, #0]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff ff47 	bl	80023b6 <u8g2_DrawHVLine>
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d903      	bls.n	8002552 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800255e:	b490      	push	{r4, r7}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	4604      	mov	r4, r0
 8002566:	4608      	mov	r0, r1
 8002568:	4611      	mov	r1, r2
 800256a:	461a      	mov	r2, r3
 800256c:	4623      	mov	r3, r4
 800256e:	80fb      	strh	r3, [r7, #6]
 8002570:	4603      	mov	r3, r0
 8002572:	80bb      	strh	r3, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
 8002578:	4613      	mov	r3, r2
 800257a:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 800257c:	887a      	ldrh	r2, [r7, #2]
 800257e:	88bb      	ldrh	r3, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	d20d      	bcs.n	80025a0 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002584:	883a      	ldrh	r2, [r7, #0]
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	429a      	cmp	r2, r3
 800258a:	d901      	bls.n	8002590 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800258c:	2301      	movs	r3, #1
 800258e:	e014      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002590:	887a      	ldrh	r2, [r7, #2]
 8002592:	883b      	ldrh	r3, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d901      	bls.n	800259c <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002598:	2301      	movs	r3, #1
 800259a:	e00e      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800259c:	2300      	movs	r3, #0
 800259e:	e00c      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80025a0:	883a      	ldrh	r2, [r7, #0]
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d907      	bls.n	80025b8 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80025a8:	887a      	ldrh	r2, [r7, #2]
 80025aa:	883b      	ldrh	r3, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d901      	bls.n	80025b4 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e002      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80025b8:	2300      	movs	r3, #0
    }
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc90      	pop	{r4, r7}
 80025c2:	4770      	bx	lr

080025c4 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	4608      	mov	r0, r1
 80025ce:	4611      	mov	r1, r2
 80025d0:	461a      	mov	r2, r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	817b      	strh	r3, [r7, #10]
 80025d6:	460b      	mov	r3, r1
 80025d8:	813b      	strh	r3, [r7, #8]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 80025ea:	8b3b      	ldrh	r3, [r7, #24]
 80025ec:	893a      	ldrh	r2, [r7, #8]
 80025ee:	f7ff ffb6 	bl	800255e <u8g2_is_intersection_decision_tree>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <u8g2_IsIntersection+0x38>
    return 0; 
 80025f8:	2300      	movs	r3, #0
 80025fa:	e00a      	b.n	8002612 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	897a      	ldrh	r2, [r7, #10]
 800260c:	f7ff ffa7 	bl	800255e <u8g2_is_intersection_decision_tree>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800261a:	b480      	push	{r7}
 800261c:	b089      	sub	sp, #36	; 0x24
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	4608      	mov	r0, r1
 8002624:	4611      	mov	r1, r2
 8002626:	461a      	mov	r2, r3
 8002628:	4603      	mov	r3, r0
 800262a:	817b      	strh	r3, [r7, #10]
 800262c:	460b      	mov	r3, r1
 800262e:	813b      	strh	r3, [r7, #8]
 8002630:	4613      	mov	r3, r2
 8002632:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002634:	893b      	ldrh	r3, [r7, #8]
 8002636:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002638:	7efb      	ldrb	r3, [r7, #27]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002640:	2301      	movs	r3, #1
 8002642:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002644:	7e3a      	ldrb	r2, [r7, #24]
 8002646:	7efb      	ldrb	r3, [r7, #27]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800265c:	2b01      	cmp	r3, #1
 800265e:	d801      	bhi.n	8002664 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002660:	7e3b      	ldrb	r3, [r7, #24]
 8002662:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800266e:	7e3b      	ldrb	r3, [r7, #24]
 8002670:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002672:	893b      	ldrh	r3, [r7, #8]
 8002674:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002676:	8afb      	ldrh	r3, [r7, #22]
 8002678:	f023 0307 	bic.w	r3, r3, #7
 800267c:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	7c1b      	ldrb	r3, [r3, #16]
 8002684:	b29b      	uxth	r3, r3
 8002686:	8afa      	ldrh	r2, [r7, #22]
 8002688:	fb12 f303 	smulbb	r3, r2, r3
 800268c:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002694:	8afb      	ldrh	r3, [r7, #22]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800269c:	897b      	ldrh	r3, [r7, #10]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	4413      	add	r3, r2
 80026a2:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80026a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d117      	bne.n	80026dc <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	7ebb      	ldrb	r3, [r7, #26]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	7e7b      	ldrb	r3, [r7, #25]
 80026c0:	4053      	eors	r3, r2
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	701a      	strb	r2, [r3, #0]
	ptr++;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
	len--;
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e8      	bne.n	80026ac <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80026da:	e038      	b.n	800274e <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	7ebb      	ldrb	r3, [r7, #26]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	7e7b      	ldrb	r3, [r7, #25]
 80026f0:	4053      	eors	r3, r2
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80026f8:	7efb      	ldrb	r3, [r7, #27]
 80026fa:	3301      	adds	r3, #1
 80026fc:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80026fe:	7efb      	ldrb	r3, [r7, #27]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	76fb      	strb	r3, [r7, #27]
      len--;
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	3b01      	subs	r3, #1
 800270a:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800270c:	7efb      	ldrb	r3, [r7, #27]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d114      	bne.n	800273c <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002716:	461a      	mov	r2, r3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002724:	2b01      	cmp	r3, #1
 8002726:	d801      	bhi.n	800272c <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002728:	2301      	movs	r3, #1
 800272a:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002732:	2b01      	cmp	r3, #1
 8002734:	d008      	beq.n	8002748 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	767b      	strb	r3, [r7, #25]
 800273a:	e005      	b.n	8002748 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800273c:	7ebb      	ldrb	r3, [r7, #26]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002742:	7e7b      	ldrb	r3, [r7, #25]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1c6      	bne.n	80026dc <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800274e:	bf00      	nop
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002782:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	79fa      	ldrb	r2, [r7, #7]
 80027be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f7ff ffa9 	bl	800275a <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7ff fcaf 	bl	800216c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800281e:	b480      	push	{r7}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002832:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002834:	89fb      	ldrh	r3, [r7, #14]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	89fa      	ldrh	r2, [r7, #14]
 800283e:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	7c1b      	ldrb	r3, [r3, #16]
 8002844:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002846:	89fb      	ldrh	r3, [r7, #14]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	89fa      	ldrh	r2, [r7, #14]
 8002850:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002858:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800285a:	89fb      	ldrh	r3, [r7, #14]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	89fa      	ldrh	r2, [r7, #14]
 8002864:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800286c:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800286e:	89fb      	ldrh	r3, [r7, #14]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002876:	4413      	add	r3, r2
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	7c52      	ldrb	r2, [r2, #17]
 800287c:	4293      	cmp	r3, r2
 800287e:	dd08      	ble.n	8002892 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	7c5b      	ldrb	r3, [r3, #17]
 8002884:	b29a      	uxth	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800288c:	b29b      	uxth	r3, r3
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002892:	89fb      	ldrh	r3, [r7, #14]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80028b4:	89fb      	ldrh	r3, [r7, #14]
 80028b6:	4413      	add	r3, r2
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	8a9a      	ldrh	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	8ada      	ldrh	r2, [r3, #22]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	4603      	mov	r3, r0
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fe5d 	bl	80025c4 <u8g2_IsIntersection>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d104      	bne.n	800291a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002918:	e03b      	b.n	8002992 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800292e:	429a      	cmp	r2, r3
 8002930:	d205      	bcs.n	800293e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800294a:	429a      	cmp	r2, r3
 800294c:	d905      	bls.n	800295a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002966:	429a      	cmp	r2, r3
 8002968:	d205      	bcs.n	8002976 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002982:	429a      	cmp	r2, r3
 8002984:	d905      	bls.n	8002992 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ff3b 	bl	800281e <u8g2_update_dimension_common>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff7b 	bl	80028e0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af02      	add	r7, sp, #8
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	4608      	mov	r0, r1
 80029fc:	4611      	mov	r1, r2
 80029fe:	461a      	mov	r2, r3
 8002a00:	4603      	mov	r3, r0
 8002a02:	817b      	strh	r3, [r7, #10]
 8002a04:	460b      	mov	r3, r1
 8002a06:	813b      	strh	r3, [r7, #8]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002a0c:	88f8      	ldrh	r0, [r7, #6]
 8002a0e:	893a      	ldrh	r2, [r7, #8]
 8002a10:	8979      	ldrh	r1, [r7, #10]
 8002a12:	7e3b      	ldrb	r3, [r7, #24]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4603      	mov	r3, r0
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7ff fcab 	bl	8002374 <u8g2_draw_hv_line_2dir>
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <u8x8_ascii_next+0x18>
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	2b0a      	cmp	r3, #10
 8002a58:	d102      	bne.n	8002a60 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a5e:	e001      	b.n	8002a64 <u8x8_ascii_next+0x22>
  return b;
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	b29b      	uxth	r3, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <u8x8_utf8_next+0x18>
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	2b0a      	cmp	r3, #10
 8002a86:	d102      	bne.n	8002a8e <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8002a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a8c:	e06e      	b.n	8002b6c <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d145      	bne.n	8002b24 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	2bfb      	cmp	r3, #251	; 0xfb
 8002a9c:	d908      	bls.n	8002ab0 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2205      	movs	r2, #5
 8002aa2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	70fb      	strb	r3, [r7, #3]
 8002aae:	e032      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	2bf7      	cmp	r3, #247	; 0xf7
 8002ab4:	d908      	bls.n	8002ac8 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	70fb      	strb	r3, [r7, #3]
 8002ac6:	e026      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	2bef      	cmp	r3, #239	; 0xef
 8002acc:	d908      	bls.n	8002ae0 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	70fb      	strb	r3, [r7, #3]
 8002ade:	e01a      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	2bdf      	cmp	r3, #223	; 0xdf
 8002ae4:	d908      	bls.n	8002af8 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	70fb      	strb	r3, [r7, #3]
 8002af6:	e00e      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	2bbf      	cmp	r3, #191	; 0xbf
 8002afc:	d908      	bls.n	8002b10 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	70fb      	strb	r3, [r7, #3]
 8002b0e:	e002      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	e02a      	b.n	8002b6c <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8002b16:	78fb      	ldrb	r3, [r7, #3]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8002b1e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002b22:	e023      	b.n	8002b6c <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8c1b      	ldrh	r3, [r3, #32]
 8002b38:	019b      	lsls	r3, r3, #6
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b46:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8c1a      	ldrh	r2, [r3, #32]
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8002b62:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002b66:	e001      	b.n	8002b6c <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8c1b      	ldrh	r3, [r3, #32]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	460b      	mov	r3, r1
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691c      	ldr	r4, [r3, #16]
 8002b8a:	7afa      	ldrb	r2, [r7, #11]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2117      	movs	r1, #23
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	47a0      	blx	r4
 8002b94:	4603      	mov	r3, r0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}

08002b9e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002baa:	1cfb      	adds	r3, r7, #3
 8002bac:	461a      	mov	r2, r3
 8002bae:	2101      	movs	r1, #1
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ffe1 	bl	8002b78 <u8x8_byte_SendBytes>
 8002bb6:	4603      	mov	r3, r0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691c      	ldr	r4, [r3, #16]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2118      	movs	r1, #24
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	47a0      	blx	r4
 8002bd6:	4603      	mov	r3, r0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}

08002be0 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691c      	ldr	r4, [r3, #16]
 8002bec:	2300      	movs	r3, #0
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2119      	movs	r1, #25
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	47a0      	blx	r4
 8002bf6:	4603      	mov	r3, r0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd90      	pop	{r4, r7, pc}

08002c00 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68dc      	ldr	r4, [r3, #12]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	2300      	movs	r3, #0
 8002c14:	2115      	movs	r1, #21
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	47a0      	blx	r4
 8002c1a:	4603      	mov	r3, r0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}

08002c24 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68dc      	ldr	r4, [r3, #12]
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	2300      	movs	r3, #0
 8002c38:	2116      	movs	r1, #22
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	47a0      	blx	r4
 8002c3e:	4603      	mov	r3, r0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd90      	pop	{r4, r7, pc}

08002c48 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	460b      	mov	r3, r1
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	68dc      	ldr	r4, [r3, #12]
 8002c5a:	7afa      	ldrb	r2, [r7, #11]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2117      	movs	r1, #23
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	47a0      	blx	r4
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd90      	pop	{r4, r7, pc}

08002c6e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002c6e:	b590      	push	{r4, r7, lr}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68dc      	ldr	r4, [r3, #12]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2118      	movs	r1, #24
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	47a0      	blx	r4
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}

08002c8e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002c8e:	b590      	push	{r4, r7, lr}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68dc      	ldr	r4, [r3, #12]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2119      	movs	r1, #25
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	47a0      	blx	r4
 8002ca4:	4603      	mov	r3, r0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd90      	pop	{r4, r7, pc}

08002cae <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002cae:	b590      	push	{r4, r7, lr}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	73fb      	strb	r3, [r7, #15]
    data++;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2bfe      	cmp	r3, #254	; 0xfe
 8002cc8:	d031      	beq.n	8002d2e <u8x8_cad_SendSequence+0x80>
 8002cca:	2bfe      	cmp	r3, #254	; 0xfe
 8002ccc:	dc3d      	bgt.n	8002d4a <u8x8_cad_SendSequence+0x9c>
 8002cce:	2b19      	cmp	r3, #25
 8002cd0:	dc3b      	bgt.n	8002d4a <u8x8_cad_SendSequence+0x9c>
 8002cd2:	2b18      	cmp	r3, #24
 8002cd4:	da23      	bge.n	8002d1e <u8x8_cad_SendSequence+0x70>
 8002cd6:	2b16      	cmp	r3, #22
 8002cd8:	dc02      	bgt.n	8002ce0 <u8x8_cad_SendSequence+0x32>
 8002cda:	2b15      	cmp	r3, #21
 8002cdc:	da03      	bge.n	8002ce6 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002cde:	e034      	b.n	8002d4a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002ce0:	2b17      	cmp	r3, #23
 8002ce2:	d00e      	beq.n	8002d02 <u8x8_cad_SendSequence+0x54>
	return;
 8002ce4:	e031      	b.n	8002d4a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68dc      	ldr	r4, [r3, #12]
 8002cf0:	7bba      	ldrb	r2, [r7, #14]
 8002cf2:	7bf9      	ldrb	r1, [r7, #15]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	47a0      	blx	r4
	  data++;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	603b      	str	r3, [r7, #0]
	  break;
 8002d00:	e022      	b.n	8002d48 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002d08:	f107 030e 	add.w	r3, r7, #14
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2101      	movs	r1, #1
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff ff99 	bl	8002c48 <u8x8_cad_SendData>
	  data++;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	603b      	str	r3, [r7, #0]
	  break;
 8002d1c:	e014      	b.n	8002d48 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68dc      	ldr	r4, [r3, #12]
 8002d22:	7bf9      	ldrb	r1, [r7, #15]
 8002d24:	2300      	movs	r3, #0
 8002d26:	2200      	movs	r2, #0
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	47a0      	blx	r4
	  break;
 8002d2c:	e00c      	b.n	8002d48 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002d34:	7bbb      	ldrb	r3, [r7, #14]
 8002d36:	461a      	mov	r2, r3
 8002d38:	2129      	movs	r1, #41	; 0x29
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa0b 	bl	8003156 <u8x8_gpio_call>
	  data++;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	3301      	adds	r3, #1
 8002d44:	603b      	str	r3, [r7, #0]
	  break;
 8002d46:	bf00      	nop
    cmd = *data;
 8002d48:	e7b6      	b.n	8002cb8 <u8x8_cad_SendSequence+0xa>
	return;
 8002d4a:	bf00      	nop
    }
  }
}
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd90      	pop	{r4, r7, pc}

08002d52 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002d52:	b590      	push	{r4, r7, lr}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff ff2d 	bl	8002bc0 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002d66:	2140      	movs	r1, #64	; 0x40
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff ff18 	bl	8002b9e <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691c      	ldr	r4, [r3, #16]
 8002d72:	7afa      	ldrb	r2, [r7, #11]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2117      	movs	r1, #23
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff ff2f 	bl	8002be0 <u8x8_byte_EndTransfer>
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}
	...

08002d8c <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	72fb      	strb	r3, [r7, #11]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 8002d9e:	7afb      	ldrb	r3, [r7, #11]
 8002da0:	3b14      	subs	r3, #20
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d848      	bhi.n	8002e38 <u8x8_cad_ssd13xx_i2c+0xac>
 8002da6:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <u8x8_cad_ssd13xx_i2c+0x20>)
 8002da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dac:	08002e15 	.word	0x08002e15
 8002db0:	08002dc5 	.word	0x08002dc5
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002de5 	.word	0x08002de5
 8002dbc:	08002e3d 	.word	0x08002e3d
 8002dc0:	08002e3d 	.word	0x08002e3d
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f7ff fefb 	bl	8002bc0 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 8002dca:	2100      	movs	r1, #0
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff fee6 	bl	8002b9e <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002dd2:	7abb      	ldrb	r3, [r7, #10]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f7ff fee1 	bl	8002b9e <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7ff feff 	bl	8002be0 <u8x8_byte_EndTransfer>
      break;
 8002de2:	e02c      	b.n	8002e3e <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002de8:	e00a      	b.n	8002e00 <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	2118      	movs	r1, #24
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f7ff ffaf 	bl	8002d52 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002df4:	7abb      	ldrb	r3, [r7, #10]
 8002df6:	3b18      	subs	r3, #24
 8002df8:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002e00:	7abb      	ldrb	r3, [r7, #10]
 8002e02:	2b18      	cmp	r3, #24
 8002e04:	d8f1      	bhi.n	8002dea <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002e06:	7abb      	ldrb	r3, [r7, #10]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff ffa0 	bl	8002d52 <u8x8_i2c_data_transfer>
      break;
 8002e12:	e014      	b.n	8002e3e <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e1a:	2bff      	cmp	r3, #255	; 0xff
 8002e1c:	d103      	bne.n	8002e26 <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2278      	movs	r2, #120	; 0x78
 8002e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691c      	ldr	r4, [r3, #16]
 8002e2a:	7aba      	ldrb	r2, [r7, #10]
 8002e2c:	7af9      	ldrb	r1, [r7, #11]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	47a0      	blx	r4
 8002e34:	4603      	mov	r3, r0
 8002e36:	e003      	b.n	8002e40 <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e001      	b.n	8002e40 <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 8002e3c:	bf00      	nop
  }
  return 1;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}

08002e48 <u8x8_d_ssd1305_generic>:
};



static uint8_t u8x8_d_ssd1305_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	460b      	mov	r3, r1
 8002e54:	72fb      	strb	r3, [r7, #11]
 8002e56:	4613      	mov	r3, r2
 8002e58:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002e5a:	7afb      	ldrb	r3, [r7, #11]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d006      	beq.n	8002e6e <u8x8_d_ssd1305_generic+0x26>
 8002e60:	2b0f      	cmp	r3, #15
 8002e62:	dc67      	bgt.n	8002f34 <u8x8_d_ssd1305_generic+0xec>
 8002e64:	2b0b      	cmp	r3, #11
 8002e66:	d048      	beq.n	8002efa <u8x8_d_ssd1305_generic+0xb2>
 8002e68:	2b0e      	cmp	r3, #14
 8002e6a:	d053      	beq.n	8002f14 <u8x8_d_ssd1305_generic+0xcc>
 8002e6c:	e062      	b.n	8002f34 <u8x8_d_ssd1305_generic+0xec>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7ff fefd 	bl	8002c6e <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	795b      	ldrb	r3, [r3, #5]
 8002e78:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	4413      	add	r3, r2
 8002e8a:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002e8c:	2140      	movs	r1, #64	; 0x40
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f7ff feb6 	bl	8002c00 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f043 0310 	orr.w	r3, r3, #16
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f7ff feac 	bl	8002c00 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f7ff feb6 	bl	8002c24 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	799b      	ldrb	r3, [r3, #6]
 8002ebc:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff fead 	bl	8002c24 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	791b      	ldrb	r3, [r3, #4]
 8002ece:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002ed6:	7dbb      	ldrb	r3, [r7, #22]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff feb1 	bl	8002c48 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002ee6:	7abb      	ldrb	r3, [r7, #10]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002eec:	7abb      	ldrb	r3, [r7, #10]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1eb      	bne.n	8002eca <u8x8_d_ssd1305_generic+0x82>
      
      u8x8_cad_EndTransfer(u8x8);
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7ff fecb 	bl	8002c8e <u8x8_cad_EndTransfer>
      break;
 8002ef8:	e01e      	b.n	8002f38 <u8x8_d_ssd1305_generic+0xf0>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002efa:	7abb      	ldrb	r3, [r7, #10]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d104      	bne.n	8002f0a <u8x8_d_ssd1305_generic+0xc2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave0_seq);
 8002f00:	4910      	ldr	r1, [pc, #64]	; (8002f44 <u8x8_d_ssd1305_generic+0xfc>)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f7ff fed3 	bl	8002cae <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
      break;
 8002f08:	e016      	b.n	8002f38 <u8x8_d_ssd1305_generic+0xf0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
 8002f0a:	490f      	ldr	r1, [pc, #60]	; (8002f48 <u8x8_d_ssd1305_generic+0x100>)
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff fece 	bl	8002cae <u8x8_cad_SendSequence>
      break;
 8002f12:	e011      	b.n	8002f38 <u8x8_d_ssd1305_generic+0xf0>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff feaa 	bl	8002c6e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002f1a:	2181      	movs	r1, #129	; 0x81
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7ff fe6f 	bl	8002c00 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1305 has range from 0 to 255 */
 8002f22:	7abb      	ldrb	r3, [r7, #10]
 8002f24:	4619      	mov	r1, r3
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff fe7c 	bl	8002c24 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff feae 	bl	8002c8e <u8x8_cad_EndTransfer>
      break;
 8002f32:	e001      	b.n	8002f38 <u8x8_d_ssd1305_generic+0xf0>
#endif
    default:
      return 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e000      	b.n	8002f3a <u8x8_d_ssd1305_generic+0xf2>
  }
  return 1;
 8002f38:	2301      	movs	r3, #1
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	0801f56c 	.word	0x0801f56c
 8002f48:	0801f574 	.word	0x0801f574

08002f4c <u8x8_d_ssd1305_128x32_noname>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1305_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	72fb      	strb	r3, [r7, #11]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1305_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002f5e:	7aba      	ldrb	r2, [r7, #10]
 8002f60:	7af9      	ldrb	r1, [r7, #11]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff ff6f 	bl	8002e48 <u8x8_d_ssd1305_generic>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <u8x8_d_ssd1305_128x32_noname+0x28>
    return 1;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e032      	b.n	8002fda <u8x8_d_ssd1305_128x32_noname+0x8e>
  
  switch(msg)
 8002f74:	7afb      	ldrb	r3, [r7, #11]
 8002f76:	2b0d      	cmp	r3, #13
 8002f78:	d006      	beq.n	8002f88 <u8x8_d_ssd1305_128x32_noname+0x3c>
 8002f7a:	2b0d      	cmp	r3, #13
 8002f7c:	dc2a      	bgt.n	8002fd4 <u8x8_d_ssd1305_128x32_noname+0x88>
 8002f7e:	2b09      	cmp	r3, #9
 8002f80:	d023      	beq.n	8002fca <u8x8_d_ssd1305_128x32_noname+0x7e>
 8002f82:	2b0a      	cmp	r3, #10
 8002f84:	d019      	beq.n	8002fba <u8x8_d_ssd1305_128x32_noname+0x6e>
 8002f86:	e025      	b.n	8002fd4 <u8x8_d_ssd1305_128x32_noname+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002f88:	7abb      	ldrb	r3, [r7, #10]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <u8x8_d_ssd1305_128x32_noname+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip0_seq);
 8002f8e:	4915      	ldr	r1, [pc, #84]	; (8002fe4 <u8x8_d_ssd1305_128x32_noname+0x98>)
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff fe8c 	bl	8002cae <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	7c9a      	ldrb	r2, [r3, #18]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002fa2:	e019      	b.n	8002fd8 <u8x8_d_ssd1305_128x32_noname+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
 8002fa4:	4910      	ldr	r1, [pc, #64]	; (8002fe8 <u8x8_d_ssd1305_128x32_noname+0x9c>)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff fe81 	bl	8002cae <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	7cda      	ldrb	r2, [r3, #19]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002fb8:	e00e      	b.n	8002fd8 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f82e 	bl	800301c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_noname_init_seq);    
 8002fc0:	490a      	ldr	r1, [pc, #40]	; (8002fec <u8x8_d_ssd1305_128x32_noname+0xa0>)
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fe73 	bl	8002cae <u8x8_cad_SendSequence>
      break;
 8002fc8:	e006      	b.n	8002fd8 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1305_128x32_noname_display_info);
 8002fca:	4909      	ldr	r1, [pc, #36]	; (8002ff0 <u8x8_d_ssd1305_128x32_noname+0xa4>)
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f811 	bl	8002ff4 <u8x8_d_helper_display_setup_memory>
      break;
 8002fd2:	e001      	b.n	8002fd8 <u8x8_d_ssd1305_128x32_noname+0x8c>
    default:
      return 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <u8x8_d_ssd1305_128x32_noname+0x8e>
  }
  return 1;
 8002fd8:	2301      	movs	r3, #1
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	0801f57c 	.word	0x0801f57c
 8002fe8:	0801f588 	.word	0x0801f588
 8002fec:	0801f5ac 	.word	0x0801f5ac
 8002ff0:	0801f594 	.word	0x0801f594

08002ff4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	7c9a      	ldrb	r2, [r3, #18]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695c      	ldr	r4, [r3, #20]
 8003028:	2300      	movs	r3, #0
 800302a:	2200      	movs	r2, #0
 800302c:	2128      	movs	r1, #40	; 0x28
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68dc      	ldr	r4, [r3, #12]
 8003036:	2300      	movs	r3, #0
 8003038:	2200      	movs	r2, #0
 800303a:	2114      	movs	r1, #20
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003040:	2201      	movs	r2, #1
 8003042:	214b      	movs	r1, #75	; 0x4b
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f886 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	791b      	ldrb	r3, [r3, #4]
 8003050:	461a      	mov	r2, r3
 8003052:	2129      	movs	r1, #41	; 0x29
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f87e 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	214b      	movs	r1, #75	; 0x4b
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f879 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	791b      	ldrb	r3, [r3, #4]
 800306a:	461a      	mov	r2, r3
 800306c:	2129      	movs	r1, #41	; 0x29
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f871 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003074:	2201      	movs	r2, #1
 8003076:	214b      	movs	r1, #75	; 0x4b
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f86c 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	795b      	ldrb	r3, [r3, #5]
 8003084:	461a      	mov	r2, r3
 8003086:	2129      	movs	r1, #41	; 0x29
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f864 	bl	8003156 <u8x8_gpio_call>
}    
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bd90      	pop	{r4, r7, pc}

08003096 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003096:	b590      	push	{r4, r7, lr}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	4608      	mov	r0, r1
 80030a0:	4611      	mov	r1, r2
 80030a2:	461a      	mov	r2, r3
 80030a4:	4603      	mov	r3, r0
 80030a6:	70fb      	strb	r3, [r7, #3]
 80030a8:	460b      	mov	r3, r1
 80030aa:	70bb      	strb	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80030b4:	78bb      	ldrb	r3, [r7, #2]
 80030b6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80030b8:	787b      	ldrb	r3, [r7, #1]
 80030ba:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689c      	ldr	r4, [r3, #8]
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	2201      	movs	r2, #1
 80030ca:	210f      	movs	r1, #15
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	47a0      	blx	r4
 80030d0:	4603      	mov	r3, r0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd90      	pop	{r4, r7, pc}

080030da <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80030da:	b590      	push	{r4, r7, lr}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689c      	ldr	r4, [r3, #8]
 80030e6:	2300      	movs	r3, #0
 80030e8:	2200      	movs	r2, #0
 80030ea:	2109      	movs	r1, #9
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	47a0      	blx	r4
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd90      	pop	{r4, r7, pc}

080030f8 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689c      	ldr	r4, [r3, #8]
 8003104:	2300      	movs	r3, #0
 8003106:	2200      	movs	r2, #0
 8003108:	210a      	movs	r1, #10
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bd90      	pop	{r4, r7, pc}

08003116 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003116:	b590      	push	{r4, r7, lr}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689c      	ldr	r4, [r3, #8]
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	2300      	movs	r3, #0
 800312a:	210b      	movs	r1, #11
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	47a0      	blx	r4
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bd90      	pop	{r4, r7, pc}

08003138 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689c      	ldr	r4, [r3, #8]
 8003144:	2300      	movs	r3, #0
 8003146:	2200      	movs	r2, #0
 8003148:	2110      	movs	r1, #16
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	47a0      	blx	r4
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}

08003156 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003156:	b590      	push	{r4, r7, lr}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	70fb      	strb	r3, [r7, #3]
 8003162:	4613      	mov	r3, r2
 8003164:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695c      	ldr	r4, [r3, #20]
 800316a:	78ba      	ldrb	r2, [r7, #2]
 800316c:	78f9      	ldrb	r1, [r7, #3]
 800316e:	2300      	movs	r3, #0
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	47a0      	blx	r4
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}

0800317c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	72fb      	strb	r3, [r7, #11]
 800318a:	4613      	mov	r3, r2
 800318c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a11      	ldr	r2, [pc, #68]	; (80031f4 <u8x8_SetupDefaults+0x58>)
 80031ae:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <u8x8_SetupDefaults+0x58>)
 80031b4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a0e      	ldr	r2, [pc, #56]	; (80031f4 <u8x8_SetupDefaults+0x58>)
 80031ba:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <u8x8_SetupDefaults+0x58>)
 80031c0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	22ff      	movs	r2, #255	; 0xff
 80031e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	0800317d 	.word	0x0800317d

080031f8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff ffc8 	bl	800319c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7ff ff58 	bl	80030da <u8x8_SetupMemory>
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <decode>:

volatile bool HKIW = false;
volatile bool HKIE = false;

void decode(void *argument)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
    CanMsg_t RX;

    for (;;)
    {
        osMessageQueueGet(msgInQHandle, &RX, NULL, osWaitForever);
 800323c:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <decode+0x88>)
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	f107 0108 	add.w	r1, r7, #8
 8003244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003248:	2200      	movs	r2, #0
 800324a:	f008 ff0f 	bl	800c06c <osMessageQueueGet>

        if (RX.Message[0] == 'H')
 800324e:	7a3b      	ldrb	r3, [r7, #8]
 8003250:	2b48      	cmp	r3, #72	; 0x48
 8003252:	d112      	bne.n	800327a <decode+0x46>
        {

            keyboard_count += 1;
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <decode+0x8c>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	3301      	adds	r3, #1
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <decode+0x8c>)
 8003260:	701a      	strb	r2, [r3, #0]

            // termination (UNTESTED)

            if (RX.Message[1] == 'X')
 8003262:	7a7b      	ldrb	r3, [r7, #9]
 8003264:	2b58      	cmp	r3, #88	; 0x58
 8003266:	d108      	bne.n	800327a <decode+0x46>
            {

                handshakeRequest = 0; // or osEventFlagsClear
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <decode+0x90>)
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
                //                osMutexAcquire(readMutexHandle, osWaitForever);
                //                setOutMuxBit(HKOE_BIT, GPIO_PIN_SET);
                //                setOutMuxBit(HKOE_BIT, GPIO_PIN_SET);
                //                osMutexRelease(readMutexHandle);

                outbits[5] = 1;
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <decode+0x94>)
 8003270:	2201      	movs	r2, #1
 8003272:	715a      	strb	r2, [r3, #5]
                outbits[6] = 1;
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <decode+0x94>)
 8003276:	2201      	movs	r2, #1
 8003278:	719a      	strb	r2, [r3, #6]

                // HERE, insert code to (re)start everything else
            }
        }

        if (RX.Message[0] == 'C')
 800327a:	7a3b      	ldrb	r3, [r7, #8]
 800327c:	2b43      	cmp	r3, #67	; 0x43
 800327e:	d10b      	bne.n	8003298 <decode+0x64>
        {

            octave = 4 + keyboard_position - RX.Message[1];
 8003280:	4b12      	ldr	r3, [pc, #72]	; (80032cc <decode+0x98>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	b29a      	uxth	r2, r3
 8003288:	7a7b      	ldrb	r3, [r7, #9]
 800328a:	b29b      	uxth	r3, r3
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	b29b      	uxth	r3, r3
 8003290:	3304      	adds	r3, #4
 8003292:	b29a      	uxth	r2, r3
 8003294:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <decode+0x9c>)
 8003296:	801a      	strh	r2, [r3, #0]
        }

        if (RX.Message[0] == 'K')
 8003298:	7a3b      	ldrb	r3, [r7, #8]
 800329a:	2b4b      	cmp	r3, #75	; 0x4b
 800329c:	d1ce      	bne.n	800323c <decode+0x8>
        {

            uint16_t localKeys = (uint16_t)RX.Message[2] << 8 | RX.Message[1];
 800329e:	7abb      	ldrb	r3, [r7, #10]
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	b21a      	sxth	r2, r3
 80032a4:	7a7b      	ldrb	r3, [r7, #9]
 80032a6:	b21b      	sxth	r3, r3
 80032a8:	4313      	orrs	r3, r2
 80032aa:	b21b      	sxth	r3, r3
 80032ac:	82fb      	strh	r3, [r7, #22]

            allKeys[RX.Message[3]] = localKeys;
 80032ae:	7afb      	ldrb	r3, [r7, #11]
 80032b0:	4619      	mov	r1, r3
 80032b2:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <decode+0xa0>)
 80032b4:	8afb      	ldrh	r3, [r7, #22]
 80032b6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        osMessageQueueGet(msgInQHandle, &RX, NULL, osWaitForever);
 80032ba:	e7bf      	b.n	800323c <decode+0x8>
 80032bc:	20000310 	.word	0x20000310
 80032c0:	20000001 	.word	0x20000001
 80032c4:	20000000 	.word	0x20000000
 80032c8:	20000004 	.word	0x20000004
 80032cc:	2000031c 	.word	0x2000031c
 80032d0:	20000014 	.word	0x20000014
 80032d4:	20000660 	.word	0x20000660

080032d8 <CAN_Transmit>:
        }
    }
}

void CAN_Transmit(void *argument)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
    CanMsg_t TX;
    for (;;)
    {
        osMessageQueueGet(msgOutQHandle, &TX, NULL, osWaitForever);
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <CAN_Transmit+0x38>)
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	f107 010c 	add.w	r1, r7, #12
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ec:	2200      	movs	r2, #0
 80032ee:	f008 febd 	bl	800c06c <osMessageQueueGet>
        osSemaphoreAcquire(CAN_TX_SemaphoreHandle, osWaitForever);
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <CAN_Transmit+0x3c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032fa:	4618      	mov	r0, r3
 80032fc:	f008 fd4c 	bl	800bd98 <osSemaphoreAcquire>
        CAN_TX(TX.ID, TX.Message);
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f107 020c 	add.w	r2, r7, #12
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f000 f8db 	bl	80034c4 <CAN_TX>
        osMessageQueueGet(msgOutQHandle, &TX, NULL, osWaitForever);
 800330e:	e7e7      	b.n	80032e0 <CAN_Transmit+0x8>
 8003310:	20000314 	.word	0x20000314
 8003314:	2000030c 	.word	0x2000030c

08003318 <handshake>:
    }
}

void handshake(void *argument)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

    if (handshakeRequest)
 8003320:	4b44      	ldr	r3, [pc, #272]	; (8003434 <handshake+0x11c>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d048      	beq.n	80033ba <handshake+0xa2>
        // this could replaced with a flag ?
        // maybe something like osEventFlagsWait ?
        // osEventFlagsSet could be called from the task reading user inputs

        // write the outgoing handshaking signals to high
        outbits[5] = 1;
 8003328:	4b43      	ldr	r3, [pc, #268]	; (8003438 <handshake+0x120>)
 800332a:	2201      	movs	r2, #1
 800332c:	715a      	strb	r2, [r3, #5]
        outbits[6] = 1;
 800332e:	4b42      	ldr	r3, [pc, #264]	; (8003438 <handshake+0x120>)
 8003330:	2201      	movs	r2, #1
 8003332:	719a      	strb	r2, [r3, #6]

        osDelay(2000);
 8003334:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003338:	f008 fa92 	bl	800b860 <osDelay>

        // the keyboards turn off their east outgoing signal in turn
        // starting from the leftmost keyboard

        // wait for the west-side handshaking signal to go high
        while (!HKIW)
 800333c:	e002      	b.n	8003344 <handshake+0x2c>
        {
            osDelay(100);
 800333e:	2064      	movs	r0, #100	; 0x64
 8003340:	f008 fa8e 	bl	800b860 <osDelay>
        while (!HKIW)
 8003344:	4b3d      	ldr	r3, [pc, #244]	; (800343c <handshake+0x124>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f083 0301 	eor.w	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f4      	bne.n	800333e <handshake+0x26>
        }

        // keyboard_count is incremented at every received CAN message
        // -> see the decode task
        keyboard_position = keyboard_count - 1;
 8003354:	4b3a      	ldr	r3, [pc, #232]	; (8003440 <handshake+0x128>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4b39      	ldr	r3, [pc, #228]	; (8003444 <handshake+0x12c>)
 8003360:	701a      	strb	r2, [r3, #0]
        octave = keyboard_position + 4;
 8003362:	4b38      	ldr	r3, [pc, #224]	; (8003444 <handshake+0x12c>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	b29b      	uxth	r3, r3
 800336a:	3304      	adds	r3, #4
 800336c:	b29a      	uxth	r2, r3
 800336e:	4b36      	ldr	r3, [pc, #216]	; (8003448 <handshake+0x130>)
 8003370:	801a      	strh	r2, [r3, #0]
        // inform other keyboards
        // send unique ID and position as per instructions

        CanMsg_t TX;

        TX.ID = IDout;
 8003372:	f240 1323 	movw	r3, #291	; 0x123
 8003376:	61fb      	str	r3, [r7, #28]
        TX.Message[0] = 'H';
 8003378:	2348      	movs	r3, #72	; 0x48
 800337a:	753b      	strb	r3, [r7, #20]
        TX.Message[1] = (uint8_t)(UID0 & 0xF000) >> 24;
 800337c:	2300      	movs	r3, #0
 800337e:	757b      	strb	r3, [r7, #21]
        TX.Message[2] = (uint8_t)(UID0 & 0x0F00) >> 16;
 8003380:	2300      	movs	r3, #0
 8003382:	75bb      	strb	r3, [r7, #22]
        TX.Message[3] = (uint8_t)(UID0 & 0x00F0) >> 8;
 8003384:	2300      	movs	r3, #0
 8003386:	75fb      	strb	r3, [r7, #23]
        TX.Message[4] = (uint8_t)(UID0 & 0x000F);
 8003388:	4b30      	ldr	r3, [pc, #192]	; (800344c <handshake+0x134>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	b2db      	uxtb	r3, r3
 8003394:	763b      	strb	r3, [r7, #24]
        TX.Message[5] = keyboard_position;
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <handshake+0x12c>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	767b      	strb	r3, [r7, #25]

        osMessageQueuePut(msgOutQHandle, &TX, 0, 0);
 800339e:	4b2c      	ldr	r3, [pc, #176]	; (8003450 <handshake+0x138>)
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	f107 0114 	add.w	r1, r7, #20
 80033a6:	2300      	movs	r3, #0
 80033a8:	2200      	movs	r2, #0
 80033aa:	f008 fdff 	bl	800bfac <osMessageQueuePut>

        //        char posText[2];
        //        sprintf(posText, "%i", keyboard_position);
        // serialPrintln(posText);

        osDelay(100);
 80033ae:	2064      	movs	r0, #100	; 0x64
 80033b0:	f008 fa56 	bl	800b860 <osDelay>

        // turn off the east outgoing signal to inform the next keyboard

        outbits[6] = 0;
 80033b4:	4b20      	ldr	r3, [pc, #128]	; (8003438 <handshake+0x120>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	719a      	strb	r2, [r3, #6]
    }

    const TickType_t xFrequency = 1000 / portTICK_PERIOD_MS;
 80033ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
    TickType_t xLastWakeTime = xTaskGetTickCount();
 80033c0:	f00a fdd2 	bl	800df68 <xTaskGetTickCount>
 80033c4:	4603      	mov	r3, r0
 80033c6:	623b      	str	r3, [r7, #32]
    //    prev_controller = controller;

    for (;;)
    {

        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80033c8:	f107 0320 	add.w	r3, r7, #32
 80033cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ce:	4618      	mov	r0, r3
 80033d0:	f00a fbfc 	bl	800dbcc <vTaskDelayUntil>

        if (selected)
 80033d4:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <handshake+0x13c>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f5      	beq.n	80033c8 <handshake+0xb0>
        {
            controller = !controller;
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <handshake+0x140>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf14      	ite	ne
 80033e4:	2301      	movne	r3, #1
 80033e6:	2300      	moveq	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f083 0301 	eor.w	r3, r3, #1
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	4b18      	ldr	r3, [pc, #96]	; (8003458 <handshake+0x140>)
 80033f8:	701a      	strb	r2, [r3, #0]

            if (controller)
 80033fa:	4b17      	ldr	r3, [pc, #92]	; (8003458 <handshake+0x140>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d013      	beq.n	800342a <handshake+0x112>
            {
                CanMsg_t TX;
                TX.ID = 0x123;
 8003402:	f240 1323 	movw	r3, #291	; 0x123
 8003406:	613b      	str	r3, [r7, #16]
                TX.Message[0] = 'C';
 8003408:	2343      	movs	r3, #67	; 0x43
 800340a:	723b      	strb	r3, [r7, #8]
                TX.Message[1] = keyboard_position;
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <handshake+0x12c>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	727b      	strb	r3, [r7, #9]

                osMessageQueuePut(msgOutQHandle, &TX, 0, 0);
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <handshake+0x138>)
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	f107 0108 	add.w	r1, r7, #8
 800341c:	2300      	movs	r3, #0
 800341e:	2200      	movs	r2, #0
 8003420:	f008 fdc4 	bl	800bfac <osMessageQueuePut>

                octave = 4;
 8003424:	4b08      	ldr	r3, [pc, #32]	; (8003448 <handshake+0x130>)
 8003426:	2204      	movs	r2, #4
 8003428:	801a      	strh	r2, [r3, #0]
            }
            vTaskDelay(500);
 800342a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800342e:	f00a fc4b 	bl	800dcc8 <vTaskDelay>
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8003432:	e7c9      	b.n	80033c8 <handshake+0xb0>
 8003434:	20000000 	.word	0x20000000
 8003438:	20000004 	.word	0x20000004
 800343c:	2000031d 	.word	0x2000031d
 8003440:	20000001 	.word	0x20000001
 8003444:	2000031c 	.word	0x2000031c
 8003448:	20000014 	.word	0x20000014
 800344c:	20000318 	.word	0x20000318
 8003450:	20000314 	.word	0x20000314
 8003454:	20000631 	.word	0x20000631
 8003458:	20000630 	.word	0x20000630

0800345c <setCANFilter>:
        }
    }
}

uint32_t setCANFilter(uint32_t filterID, uint32_t maskID, uint32_t filterBank)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]

    CAN_FilterTypeDef filterInfo = {0};
 8003468:	f107 0310 	add.w	r3, r7, #16
 800346c:	2228      	movs	r2, #40	; 0x28
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f00c fb3d 	bl	800faf0 <memset>

    filterInfo.FilterIdHigh = (filterID << 5) & 0xffe0;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	015b      	lsls	r3, r3, #5
 800347a:	b29b      	uxth	r3, r3
 800347c:	613b      	str	r3, [r7, #16]
    filterInfo.FilterIdLow = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
    filterInfo.FilterMaskIdHigh = (maskID << 5) & 0xffe0;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	015b      	lsls	r3, r3, #5
 8003486:	b29b      	uxth	r3, r3
 8003488:	61bb      	str	r3, [r7, #24]
    filterInfo.FilterMaskIdLow = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
    filterInfo.FilterFIFOAssignment = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
    filterInfo.FilterBank = filterBank & 0xf;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
    filterInfo.FilterMode = CAN_FILTERMODE_IDMASK;
 800349a:	2300      	movs	r3, #0
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
    filterInfo.FilterScale = CAN_FILTERSCALE_32BIT;
 800349e:	2301      	movs	r3, #1
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    filterInfo.FilterActivation = CAN_FILTER_ENABLE;
 80034a2:	2301      	movs	r3, #1
 80034a4:	633b      	str	r3, [r7, #48]	; 0x30
    filterInfo.SlaveStartFilterBank = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	637b      	str	r3, [r7, #52]	; 0x34

    return (uint32_t)HAL_CAN_ConfigFilter(&hcan1, &filterInfo);
 80034aa:	f107 0310 	add.w	r3, r7, #16
 80034ae:	4619      	mov	r1, r3
 80034b0:	4803      	ldr	r0, [pc, #12]	; (80034c0 <setCANFilter+0x64>)
 80034b2:	f003 fdbc 	bl	800702e <HAL_CAN_ConfigFilter>
 80034b6:	4603      	mov	r3, r0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3738      	adds	r7, #56	; 0x38
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000384 	.word	0x20000384

080034c4 <CAN_TX>:

uint32_t CAN_TX(uint32_t ID, uint8_t data[8])
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]

    CAN_TxHeaderTypeDef txHeader = {0};
 80034ce:	f107 0308 	add.w	r3, r7, #8
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	611a      	str	r2, [r3, #16]
 80034de:	615a      	str	r2, [r3, #20]

    txHeader.StdId = ID & 0x7ff;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e6:	60bb      	str	r3, [r7, #8]
    txHeader.ExtId = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
    txHeader.IDE = CAN_ID_STD;
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
    txHeader.RTR = CAN_RTR_DATA;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
    txHeader.DLC = 8;
 80034f4:	2308      	movs	r3, #8
 80034f6:	61bb      	str	r3, [r7, #24]
    txHeader.TransmitGlobalTime = DISABLE;
 80034f8:	2300      	movs	r3, #0
 80034fa:	773b      	strb	r3, [r7, #28]

    while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1))
 80034fc:	bf00      	nop
 80034fe:	4809      	ldr	r0, [pc, #36]	; (8003524 <CAN_TX+0x60>)
 8003500:	f003 ff73 	bl	80073ea <HAL_CAN_GetTxMailboxesFreeLevel>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f9      	beq.n	80034fe <CAN_TX+0x3a>
        ;

    return (uint32_t)HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, NULL);
 800350a:	f107 0108 	add.w	r1, r7, #8
 800350e:	2300      	movs	r3, #0
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	4804      	ldr	r0, [pc, #16]	; (8003524 <CAN_TX+0x60>)
 8003514:	f003 fe99 	bl	800724a <HAL_CAN_AddTxMessage>
 8003518:	4603      	mov	r3, r0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000384 	.word	0x20000384

08003528 <CAN_RX>:

    return HAL_CAN_GetRxFifoFillLevel(&hcan1, 0);
}

uint32_t CAN_RX(uint32_t *ID, uint8_t data[8])
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]

    CAN_RxHeaderTypeDef rxHeader;

    while (!HAL_CAN_GetRxFifoFillLevel(&hcan1, 0))
 8003532:	bf00      	nop
 8003534:	2100      	movs	r1, #0
 8003536:	480b      	ldr	r0, [pc, #44]	; (8003564 <CAN_RX+0x3c>)
 8003538:	f004 f89e 	bl	8007678 <HAL_CAN_GetRxFifoFillLevel>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f8      	beq.n	8003534 <CAN_RX+0xc>
        ;

    uint32_t result = (uint32_t)HAL_CAN_GetRxMessage(&hcan1, 0, &rxHeader, data);
 8003542:	f107 0208 	add.w	r2, r7, #8
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2100      	movs	r1, #0
 800354a:	4806      	ldr	r0, [pc, #24]	; (8003564 <CAN_RX+0x3c>)
 800354c:	f003 ff82 	bl	8007454 <HAL_CAN_GetRxMessage>
 8003550:	4603      	mov	r3, r0
 8003552:	627b      	str	r3, [r7, #36]	; 0x24

    *ID = rxHeader.StdId;
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]

    return result;
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800355c:	4618      	mov	r0, r3
 800355e:	3728      	adds	r7, #40	; 0x28
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000384 	.word	0x20000384

08003568 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
    CanMsg_t RX;
    CAN_RX(&RX.ID, RX.Message);
 8003570:	f107 020c 	add.w	r2, r7, #12
 8003574:	f107 030c 	add.w	r3, r7, #12
 8003578:	3308      	adds	r3, #8
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ffd3 	bl	8003528 <CAN_RX>
    osMessageQueuePut(msgInQHandle, &RX.Message, 0, 0);
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	f107 010c 	add.w	r1, r7, #12
 800358a:	2300      	movs	r3, #0
 800358c:	2200      	movs	r2, #0
 800358e:	f008 fd0d 	bl	800bfac <osMessageQueuePut>
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000310 	.word	0x20000310

080035a0 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
    osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f008 fc45 	bl	800be3c <osSemaphoreRelease>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	2000030c 	.word	0x2000030c

080035c0 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80035c8:	4b04      	ldr	r3, [pc, #16]	; (80035dc <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f008 fc35 	bl	800be3c <osSemaphoreRelease>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000030c 	.word	0x2000030c

080035e0 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
    osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f008 fc25 	bl	800be3c <osSemaphoreRelease>
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	2000030c 	.word	0x2000030c

08003600 <MX_DMA_Init>:
UART_HandleTypeDef huart2;

DMA_HandleTypeDef hdma_memtomem_dma1_channel1;

//Enable DMA controller clock
void MX_DMA_Init(void) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003606:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <MX_DMA_Init+0xa4>)
 8003608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360a:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <MX_DMA_Init+0xa4>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6493      	str	r3, [r2, #72]	; 0x48
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <MX_DMA_Init+0xa4>)
 8003614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
	hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800361e:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003620:	4a22      	ldr	r2, [pc, #136]	; (80036ac <MX_DMA_Init+0xac>)
 8003622:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 8003624:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003626:	2200      	movs	r2, #0
 8003628:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800362a:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <MX_DMA_Init+0xa8>)
 800362c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003630:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003634:	2240      	movs	r2, #64	; 0x40
 8003636:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <MX_DMA_Init+0xa8>)
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment =
 800363e:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003644:	615a      	str	r2, [r3, #20]
			DMA_PDATAALIGN_HALFWORD;
	hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800364c:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 800364e:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003650:	2200      	movs	r2, #0
 8003652:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 8003654:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <MX_DMA_Init+0xa8>)
 8003656:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800365a:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK) {
 800365c:	4812      	ldr	r0, [pc, #72]	; (80036a8 <MX_DMA_Init+0xa8>)
 800365e:	f004 fe57 	bl	8008310 <HAL_DMA_Init>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <MX_DMA_Init+0x6c>
		Error_Handler();
 8003668:	f001 fa1c 	bl	8004aa4 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800366c:	2200      	movs	r2, #0
 800366e:	2105      	movs	r1, #5
 8003670:	200b      	movs	r0, #11
 8003672:	f004 fb19 	bl	8007ca8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003676:	200b      	movs	r0, #11
 8003678:	f004 fb32 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2105      	movs	r1, #5
 8003680:	200d      	movs	r0, #13
 8003682:	f004 fb11 	bl	8007ca8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003686:	200d      	movs	r0, #13
 8003688:	f004 fb2a 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	2105      	movs	r1, #5
 8003690:	200e      	movs	r0, #14
 8003692:	f004 fb09 	bl	8007ca8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003696:	200e      	movs	r0, #14
 8003698:	f004 fb22 	bl	8007ce0 <HAL_NVIC_EnableIRQ>

}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000
 80036a8:	200005c0 	.word	0x200005c0
 80036ac:	40020008 	.word	0x40020008

080036b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b096      	sub	sp, #88	; 0x58
 80036b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	2244      	movs	r2, #68	; 0x44
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f00c fa16 	bl	800faf0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80036c4:	463b      	mov	r3, r7
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	60da      	str	r2, [r3, #12]
 80036d0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80036d6:	f005 fe05 	bl	80092e4 <HAL_PWREx_ControlVoltageScaling>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80036e0:	f001 f9e0 	bl	8004aa4 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80036e4:	f005 fde0 	bl	80092a8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80036e8:	4b21      	ldr	r3, [pc, #132]	; (8003770 <SystemClock_Config+0xc0>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	4a20      	ldr	r2, [pc, #128]	; (8003770 <SystemClock_Config+0xc0>)
 80036f0:	f023 0318 	bic.w	r3, r3, #24
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80036f8:	2314      	movs	r3, #20
 80036fa:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80036fc:	2301      	movs	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003700:	2301      	movs	r3, #1
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003708:	2360      	movs	r3, #96	; 0x60
 800370a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800370c:	2302      	movs	r3, #2
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003710:	2301      	movs	r3, #1
 8003712:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8003714:	2301      	movs	r3, #1
 8003716:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8003718:	2328      	movs	r3, #40	; 0x28
 800371a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800371c:	2307      	movs	r3, #7
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003720:	2302      	movs	r3, #2
 8003722:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003724:	2302      	movs	r3, #2
 8003726:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4618      	mov	r0, r3
 800372e:	f005 fe2f 	bl	8009390 <HAL_RCC_OscConfig>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <SystemClock_Config+0x8c>
		Error_Handler();
 8003738:	f001 f9b4 	bl	8004aa4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800373c:	230f      	movs	r3, #15
 800373e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003740:	2303      	movs	r3, #3
 8003742:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003744:	2300      	movs	r3, #0
 8003746:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003750:	463b      	mov	r3, r7
 8003752:	2104      	movs	r1, #4
 8003754:	4618      	mov	r0, r3
 8003756:	f006 fa2f 	bl	8009bb8 <HAL_RCC_ClockConfig>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <SystemClock_Config+0xb4>
		Error_Handler();
 8003760:	f001 f9a0 	bl	8004aa4 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8003764:	f006 fe74 	bl	800a450 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003768:	bf00      	nop
 800376a:	3758      	adds	r7, #88	; 0x58
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000

08003774 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
void MX_ADC1_Init(void) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800377a:	463b      	mov	r3, r7
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	611a      	str	r2, [r3, #16]
 8003788:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800378a:	4b29      	ldr	r3, [pc, #164]	; (8003830 <MX_ADC1_Init+0xbc>)
 800378c:	4a29      	ldr	r2, [pc, #164]	; (8003834 <MX_ADC1_Init+0xc0>)
 800378e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003790:	4b27      	ldr	r3, [pc, #156]	; (8003830 <MX_ADC1_Init+0xbc>)
 8003792:	2200      	movs	r2, #0
 8003794:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <MX_ADC1_Init+0xbc>)
 8003798:	2200      	movs	r2, #0
 800379a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800379c:	4b24      	ldr	r3, [pc, #144]	; (8003830 <MX_ADC1_Init+0xbc>)
 800379e:	2200      	movs	r2, #0
 80037a0:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80037a2:	4b23      	ldr	r3, [pc, #140]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037a8:	4b21      	ldr	r3, [pc, #132]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037aa:	2204      	movs	r2, #4
 80037ac:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80037b4:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037bc:	2201      	movs	r2, #1
 80037be:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037ce:	4b18      	ldr	r3, [pc, #96]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80037d4:	4b16      	ldr	r3, [pc, #88]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037de:	2200      	movs	r2, #0
 80037e0:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80037ea:	4811      	ldr	r0, [pc, #68]	; (8003830 <MX_ADC1_Init+0xbc>)
 80037ec:	f002 fdfc 	bl	80063e8 <HAL_ADC_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_ADC1_Init+0x86>
		Error_Handler();
 80037f6:	f001 f955 	bl	8004aa4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80037fa:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <MX_ADC1_Init+0xc4>)
 80037fc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80037fe:	2306      	movs	r3, #6
 8003800:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003806:	237f      	movs	r3, #127	; 0x7f
 8003808:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800380a:	2304      	movs	r3, #4
 800380c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003812:	463b      	mov	r3, r7
 8003814:	4619      	mov	r1, r3
 8003816:	4806      	ldr	r0, [pc, #24]	; (8003830 <MX_ADC1_Init+0xbc>)
 8003818:	f002 ff2e 	bl	8006678 <HAL_ADC_ConfigChannel>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_ADC1_Init+0xb2>
		Error_Handler();
 8003822:	f001 f93f 	bl	8004aa4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8003826:	bf00      	nop
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000320 	.word	0x20000320
 8003834:	50040000 	.word	0x50040000
 8003838:	14f00020 	.word	0x14f00020

0800383c <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
void MX_CAN1_Init(void) {
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003842:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <MX_CAN1_Init+0x6c>)
 8003844:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 40;
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003848:	2228      	movs	r2, #40	; 0x28
 800384a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800384c:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <MX_CAN1_Init+0x68>)
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8003852:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003854:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003858:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <MX_CAN1_Init+0x68>)
 800385c:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003860:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003864:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003868:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <MX_CAN1_Init+0x68>)
 800386c:	2200      	movs	r2, #0
 800386e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003872:	2200      	movs	r2, #0
 8003874:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = ENABLE;
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003878:	2201      	movs	r2, #1
 800387a:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <MX_CAN1_Init+0x68>)
 800387e:	2201      	movs	r2, #1
 8003880:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <MX_CAN1_Init+0x68>)
 800388a:	2201      	movs	r2, #1
 800388c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800388e:	4805      	ldr	r0, [pc, #20]	; (80038a4 <MX_CAN1_Init+0x68>)
 8003890:	f003 fad2 	bl	8006e38 <HAL_CAN_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_CAN1_Init+0x62>
		Error_Handler();
 800389a:	f001 f903 	bl	8004aa4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000384 	.word	0x20000384
 80038a8:	40006400 	.word	0x40006400

080038ac <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
void MX_DAC1_Init(void) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80038b2:	1d3b      	adds	r3, r7, #4
 80038b4:	2224      	movs	r2, #36	; 0x24
 80038b6:	2100      	movs	r1, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f00c f919 	bl	800faf0 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80038be:	4b17      	ldr	r3, [pc, #92]	; (800391c <MX_DAC1_Init+0x70>)
 80038c0:	4a17      	ldr	r2, [pc, #92]	; (8003920 <MX_DAC1_Init+0x74>)
 80038c2:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80038c4:	4815      	ldr	r0, [pc, #84]	; (800391c <MX_DAC1_Init+0x70>)
 80038c6:	f004 fa19 	bl	8007cfc <HAL_DAC_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_DAC1_Init+0x28>
		Error_Handler();
 80038d0:	f001 f8e8 	bl	8004aa4 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80038d8:	2304      	movs	r3, #4
 80038da:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	2200      	movs	r2, #0
 80038ec:	4619      	mov	r1, r3
 80038ee:	480b      	ldr	r0, [pc, #44]	; (800391c <MX_DAC1_Init+0x70>)
 80038f0:	f004 fb60 	bl	8007fb4 <HAL_DAC_ConfigChannel>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <MX_DAC1_Init+0x52>
		Error_Handler();
 80038fa:	f001 f8d3 	bl	8004aa4 <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	2210      	movs	r2, #16
 8003902:	4619      	mov	r1, r3
 8003904:	4805      	ldr	r0, [pc, #20]	; (800391c <MX_DAC1_Init+0x70>)
 8003906:	f004 fb55 	bl	8007fb4 <HAL_DAC_ConfigChannel>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_DAC1_Init+0x68>
		Error_Handler();
 8003910:	f001 f8c8 	bl	8004aa4 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8003914:	bf00      	nop
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	200003ac 	.word	0x200003ac
 8003920:	40007400 	.word	0x40007400

08003924 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2C1_Init(void) {
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <MX_I2C1_Init+0x7c>)
 800392a:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <MX_I2C1_Init+0x80>)
 800392c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00300F33;
 800392e:	4b1c      	ldr	r3, [pc, #112]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003930:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <MX_I2C1_Init+0x84>)
 8003932:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8003934:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800393a:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <MX_I2C1_Init+0x7c>)
 800393c:	2201      	movs	r2, #1
 800393e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003940:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003946:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003948:	2200      	movs	r2, #0
 800394a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <MX_I2C1_Init+0x7c>)
 800394e:	2200      	movs	r2, #0
 8003950:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003952:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003954:	2200      	movs	r2, #0
 8003956:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <MX_I2C1_Init+0x7c>)
 800395a:	2200      	movs	r2, #0
 800395c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800395e:	4810      	ldr	r0, [pc, #64]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003960:	f005 f868 	bl	8008a34 <HAL_I2C_Init>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_I2C1_Init+0x4a>
		Error_Handler();
 800396a:	f001 f89b 	bl	8004aa4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800396e:	2100      	movs	r1, #0
 8003970:	480b      	ldr	r0, [pc, #44]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003972:	f005 fbe1 	bl	8009138 <HAL_I2CEx_ConfigAnalogFilter>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800397c:	f001 f892 	bl	8004aa4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8003980:	2100      	movs	r1, #0
 8003982:	4807      	ldr	r0, [pc, #28]	; (80039a0 <MX_I2C1_Init+0x7c>)
 8003984:	f005 fc23 	bl	80091ce <HAL_I2CEx_ConfigDigitalFilter>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_I2C1_Init+0x6e>
		Error_Handler();
 800398e:	f001 f889 	bl	8004aa4 <Error_Handler>
	}

	/** I2C Fast mode Plus enable
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8003992:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003996:	f005 fc67 	bl	8009268 <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000450 	.word	0x20000450
 80039a4:	40005400 	.word	0x40005400
 80039a8:	00300f33 	.word	0x00300f33

080039ac <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM6_Init(void) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80039b2:	1d3b      	adds	r3, r7, #4
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80039bc:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039be:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <MX_TIM6_Init+0x68>)
 80039c0:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 80039c2:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 1814 - 1;
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039d0:	f240 7215 	movw	r2, #1813	; 0x715
 80039d4:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039d8:	2200      	movs	r2, #0
 80039da:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80039dc:	480c      	ldr	r0, [pc, #48]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039de:	f006 fe39 	bl	800a654 <HAL_TIM_Base_Init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <MX_TIM6_Init+0x40>
		Error_Handler();
 80039e8:	f001 f85c 	bl	8004aa4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80039ec:	2320      	movs	r3, #32
 80039ee:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	4619      	mov	r1, r3
 80039f8:	4805      	ldr	r0, [pc, #20]	; (8003a10 <MX_TIM6_Init+0x64>)
 80039fa:	f007 f8cf 	bl	800ab9c <HAL_TIMEx_MasterConfigSynchronization>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <MX_TIM6_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8003a04:	f001 f84e 	bl	8004aa4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	200004a4 	.word	0x200004a4
 8003a14:	40001000 	.word	0x40001000

08003a18 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM7_Init(void) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a2a:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <MX_TIM7_Init+0x68>)
 8003a2c:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 80 - 1;
 8003a2e:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a30:	224f      	movs	r2, #79	; 0x4f
 8003a32:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 1000 - 1;
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a40:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a42:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003a48:	480c      	ldr	r0, [pc, #48]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a4a:	f006 fe03 	bl	800a654 <HAL_TIM_Base_Init>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <MX_TIM7_Init+0x40>
		Error_Handler();
 8003a54:	f001 f826 	bl	8004aa4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8003a60:	1d3b      	adds	r3, r7, #4
 8003a62:	4619      	mov	r1, r3
 8003a64:	4805      	ldr	r0, [pc, #20]	; (8003a7c <MX_TIM7_Init+0x64>)
 8003a66:	f007 f899 	bl	800ab9c <HAL_TIMEx_MasterConfigSynchronization>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8003a70:	f001 f818 	bl	8004aa4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200004f0 	.word	0x200004f0
 8003a80:	40001400 	.word	0x40001400

08003a84 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void) {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003a88:	4b14      	ldr	r3, [pc, #80]	; (8003adc <MX_USART2_UART_Init+0x58>)
 8003a8a:	4a15      	ldr	r2, [pc, #84]	; (8003ae0 <MX_USART2_UART_Init+0x5c>)
 8003a8c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003a8e:	4b13      	ldr	r3, [pc, #76]	; (8003adc <MX_USART2_UART_Init+0x58>)
 8003a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a94:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <MX_USART2_UART_Init+0x58>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <MX_USART2_UART_Init+0x58>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <MX_USART2_UART_Init+0x58>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <MX_USART2_UART_Init+0x58>)
 8003aaa:	220c      	movs	r2, #12
 8003aac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <MX_USART2_UART_Init+0x58>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <MX_USART2_UART_Init+0x58>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <MX_USART2_UART_Init+0x58>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <MX_USART2_UART_Init+0x58>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003ac6:	4805      	ldr	r0, [pc, #20]	; (8003adc <MX_USART2_UART_Init+0x58>)
 8003ac8:	f007 f8ec 	bl	800aca4 <HAL_UART_Init>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8003ad2:	f000 ffe7 	bl	8004aa4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	2000053c 	.word	0x2000053c
 8003ae0:	40004400 	.word	0x40004400

08003ae4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003aea:	f107 030c 	add.w	r3, r7, #12
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	605a      	str	r2, [r3, #4]
 8003af4:	609a      	str	r2, [r3, #8]
 8003af6:	60da      	str	r2, [r3, #12]
 8003af8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003afa:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <MX_GPIO_Init+0xd4>)
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	4a2e      	ldr	r2, [pc, #184]	; (8003bb8 <MX_GPIO_Init+0xd4>)
 8003b00:	f043 0304 	orr.w	r3, r3, #4
 8003b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b06:	4b2c      	ldr	r3, [pc, #176]	; (8003bb8 <MX_GPIO_Init+0xd4>)
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	60bb      	str	r3, [r7, #8]
 8003b10:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003b12:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <MX_GPIO_Init+0xd4>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	4a28      	ldr	r2, [pc, #160]	; (8003bb8 <MX_GPIO_Init+0xd4>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b1e:	4b26      	ldr	r3, [pc, #152]	; (8003bb8 <MX_GPIO_Init+0xd4>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2a:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <MX_GPIO_Init+0xd4>)
 8003b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2e:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <MX_GPIO_Init+0xd4>)
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b36:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <MX_GPIO_Init+0xd4>)
 8003b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003b42:	2200      	movs	r2, #0
 8003b44:	2140      	movs	r1, #64	; 0x40
 8003b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b4a:	f004 ff5b 	bl	8008a04 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8003b4e:	2200      	movs	r2, #0
 8003b50:	213b      	movs	r1, #59	; 0x3b
 8003b52:	481a      	ldr	r0, [pc, #104]	; (8003bbc <MX_GPIO_Init+0xd8>)
 8003b54:	f004 ff56 	bl	8008a04 <HAL_GPIO_WritePin>
			RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin | OUT_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : C0_Pin C2_Pin C1_Pin C3_Pin */
	GPIO_InitStruct.Pin = C0_Pin | C2_Pin | C1_Pin | C3_Pin;
 8003b58:	f44f 7362 	mov.w	r3, #904	; 0x388
 8003b5c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b66:	f107 030c 	add.w	r3, r7, #12
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b70:	f004 fdc6 	bl	8008700 <HAL_GPIO_Init>

	/*Configure GPIO pin : REN_Pin */
	GPIO_InitStruct.Pin = REN_Pin;
 8003b74:	2340      	movs	r3, #64	; 0x40
 8003b76:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(REN_GPIO_Port, &GPIO_InitStruct);
 8003b84:	f107 030c 	add.w	r3, r7, #12
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b8e:	f004 fdb7 	bl	8008700 <HAL_GPIO_Init>

	/*Configure GPIO pins : RA0_Pin RA1_Pin LED_BUILTIN_Pin RA2_Pin
	 OUT_Pin */
	GPIO_InitStruct.Pin = RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin
 8003b92:	233b      	movs	r3, #59	; 0x3b
 8003b94:	60fb      	str	r3, [r7, #12]
			| OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b96:	2301      	movs	r3, #1
 8003b98:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba2:	f107 030c 	add.w	r3, r7, #12
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4804      	ldr	r0, [pc, #16]	; (8003bbc <MX_GPIO_Init+0xd8>)
 8003baa:	f004 fda9 	bl	8008700 <HAL_GPIO_Init>

}
 8003bae:	bf00      	nop
 8003bb0:	3720      	adds	r7, #32
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	48000400 	.word	0x48000400

08003bc0 <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	72fb      	strb	r3, [r7, #11]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	72bb      	strb	r3, [r7, #10]
	return 1;
 8003bd2:	2301      	movs	r3, #1
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	460b      	mov	r3, r1
 8003bec:	72fb      	strb	r3, [r7, #11]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	72bb      	strb	r3, [r7, #10]
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch (msg) {
 8003bf2:	7afb      	ldrb	r3, [r7, #11]
 8003bf4:	3b14      	subs	r3, #20
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d847      	bhi.n	8003c8a <u8x8_byte_i2c+0xaa>
 8003bfa:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <u8x8_byte_i2c+0x20>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c8f 	.word	0x08003c8f
 8003c04:	08003c8b 	.word	0x08003c8b
 8003c08:	08003c8b 	.word	0x08003c8b
 8003c0c:	08003c35 	.word	0x08003c35
 8003c10:	08003c65 	.word	0x08003c65
 8003c14:	08003c6d 	.word	0x08003c6d
 8003c18:	08003c8b 	.word	0x08003c8b
 8003c1c:	08003c8b 	.word	0x08003c8b
 8003c20:	08003c8b 	.word	0x08003c8b
 8003c24:	08003c8b 	.word	0x08003c8b
 8003c28:	08003c8b 	.word	0x08003c8b
 8003c2c:	08003c8b 	.word	0x08003c8b
 8003c30:	08003c8f 	.word	0x08003c8f
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	617b      	str	r3, [r7, #20]
		while (arg_int > 0) {
 8003c38:	e010      	b.n	8003c5c <u8x8_byte_i2c+0x7c>
			buffer[buf_idx++] = *data;
 8003c3a:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <u8x8_byte_i2c+0xbc>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	b2d1      	uxtb	r1, r2
 8003c42:	4a16      	ldr	r2, [pc, #88]	; (8003c9c <u8x8_byte_i2c+0xbc>)
 8003c44:	7011      	strb	r1, [r2, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	7819      	ldrb	r1, [r3, #0]
 8003c4c:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <u8x8_byte_i2c+0xc0>)
 8003c4e:	5499      	strb	r1, [r3, r2]
			data++;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3301      	adds	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
			arg_int--;
 8003c56:	7abb      	ldrb	r3, [r7, #10]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0) {
 8003c5c:	7abb      	ldrb	r3, [r7, #10]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1eb      	bne.n	8003c3a <u8x8_byte_i2c+0x5a>
		}
		break;
 8003c62:	e015      	b.n	8003c90 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <u8x8_byte_i2c+0xbc>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	701a      	strb	r2, [r3, #0]
		break;
 8003c6a:	e011      	b.n	8003c90 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8),
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c72:	b299      	uxth	r1, r3
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <u8x8_byte_i2c+0xbc>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c7e:	9200      	str	r2, [sp, #0]
 8003c80:	4a07      	ldr	r2, [pc, #28]	; (8003ca0 <u8x8_byte_i2c+0xc0>)
 8003c82:	4808      	ldr	r0, [pc, #32]	; (8003ca4 <u8x8_byte_i2c+0xc4>)
 8003c84:	f004 ff66 	bl	8008b54 <HAL_I2C_Master_Transmit>
				(uint8_t*) buffer, buf_idx, HAL_MAX_DELAY);
		break;
 8003c88:	e002      	b.n	8003c90 <u8x8_byte_i2c+0xb0>
	default:
		return 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e001      	b.n	8003c92 <u8x8_byte_i2c+0xb2>
		break;
 8003c8e:	bf00      	nop
	}

	return 1;
 8003c90:	2301      	movs	r3, #1

}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000608 	.word	0x20000608
 8003ca0:	2000060c 	.word	0x2000060c
 8003ca4:	20000450 	.word	0x20000450

08003ca8 <main>:
void scanKnob(uint16_t localKnobs, uint16_t prev_Knobs, uint8_t knob_index, char type );
void fill_output_first_half();
void fill_output_second_half();

int main(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b092      	sub	sp, #72	; 0x48
 8003cac:	af02      	add	r7, sp, #8
    /* MCU Configuration--------------------------------------------------------*/
    // Reset of all peripherals, Initializes the Flash interface and the Systick.
    HAL_Init();
 8003cae:	f002 f9a6 	bl	8005ffe <HAL_Init>
    // Configure the system clock
    SystemClock_Config();
 8003cb2:	f7ff fcfd 	bl	80036b0 <SystemClock_Config>

    // Initialize all configured peripherals
    MX_GPIO_Init();
 8003cb6:	f7ff ff15 	bl	8003ae4 <MX_GPIO_Init>
    MX_DMA_Init();
 8003cba:	f7ff fca1 	bl	8003600 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8003cbe:	f7ff fee1 	bl	8003a84 <MX_USART2_UART_Init>
    MX_CAN1_Init();
 8003cc2:	f7ff fdbb 	bl	800383c <MX_CAN1_Init>
    MX_I2C1_Init();
 8003cc6:	f7ff fe2d 	bl	8003924 <MX_I2C1_Init>
    MX_ADC1_Init();
 8003cca:	f7ff fd53 	bl	8003774 <MX_ADC1_Init>
    MX_DAC1_Init();
 8003cce:	f7ff fded 	bl	80038ac <MX_DAC1_Init>
    MX_TIM6_Init();
 8003cd2:	f7ff fe6b 	bl	80039ac <MX_TIM6_Init>
    MX_TIM7_Init();
 8003cd6:	f7ff fe9f 	bl	8003a18 <MX_TIM7_Init>

    HAL_TIM_Base_Start(&htim7);
 8003cda:	4883      	ldr	r0, [pc, #524]	; (8003ee8 <main+0x240>)
 8003cdc:	f006 fd12 	bl	800a704 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim6);
 8003ce0:	4882      	ldr	r0, [pc, #520]	; (8003eec <main+0x244>)
 8003ce2:	f006 fd0f 	bl	800a704 <HAL_TIM_Base_Start>

    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)DDS_OUT, DDS_OUT_SAMPLES, DAC_ALIGN_12B_R);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cee:	4a80      	ldr	r2, [pc, #512]	; (8003ef0 <main+0x248>)
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4880      	ldr	r0, [pc, #512]	; (8003ef4 <main+0x24c>)
 8003cf4:	f004 f824 	bl	8007d40 <HAL_DAC_Start_DMA>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)DDS_OUT, DDS_OUT_SAMPLES, DAC_ALIGN_12B_R);
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d00:	4a7b      	ldr	r2, [pc, #492]	; (8003ef0 <main+0x248>)
 8003d02:	2110      	movs	r1, #16
 8003d04:	487b      	ldr	r0, [pc, #492]	; (8003ef4 <main+0x24c>)
 8003d06:	f004 f81b 	bl	8007d40 <HAL_DAC_Start_DMA>
    //	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
    //	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);

    setOutMuxBit(DRST_BIT, GPIO_PIN_RESET);
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	2004      	movs	r0, #4
 8003d0e:	f000 f9fd 	bl	800410c <setOutMuxBit>
    delayMicro(2);
 8003d12:	2002      	movs	r0, #2
 8003d14:	f000 f968 	bl	8003fe8 <delayMicro>
    setOutMuxBit(DRST_BIT, GPIO_PIN_SET);
 8003d18:	2101      	movs	r1, #1
 8003d1a:	2004      	movs	r0, #4
 8003d1c:	f000 f9f6 	bl	800410c <setOutMuxBit>
    u8g2_Setup_ssd1305_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_gpio_and_delay);
 8003d20:	4b75      	ldr	r3, [pc, #468]	; (8003ef8 <main+0x250>)
 8003d22:	4a76      	ldr	r2, [pc, #472]	; (8003efc <main+0x254>)
 8003d24:	4976      	ldr	r1, [pc, #472]	; (8003f00 <main+0x258>)
 8003d26:	4877      	ldr	r0, [pc, #476]	; (8003f04 <main+0x25c>)
 8003d28:	f7fd fc1a 	bl	8001560 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>
    u8g2_InitDisplay(&u8g2);
 8003d2c:	4875      	ldr	r0, [pc, #468]	; (8003f04 <main+0x25c>)
 8003d2e:	f7ff f9e3 	bl	80030f8 <u8x8_InitDisplay>
    u8g2_ClearDisplay(&u8g2);
 8003d32:	4874      	ldr	r0, [pc, #464]	; (8003f04 <main+0x25c>)
 8003d34:	f7fd fbee 	bl	8001514 <u8g2_ClearDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4872      	ldr	r0, [pc, #456]	; (8003f04 <main+0x25c>)
 8003d3c:	f7ff f9eb 	bl	8003116 <u8x8_SetPowerSave>
    setOutMuxBit(DEN_BIT, GPIO_PIN_SET);
 8003d40:	2101      	movs	r1, #1
 8003d42:	2003      	movs	r0, #3
 8003d44:	f000 f9e2 	bl	800410c <setOutMuxBit>

    setCANFilter(IDin, 0x7ff, 0);
 8003d48:	4b6f      	ldr	r3, [pc, #444]	; (8003f08 <main+0x260>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fb82 	bl	800345c <setCANFilter>
    HAL_CAN_Start(&hcan1);
 8003d58:	486c      	ldr	r0, [pc, #432]	; (8003f0c <main+0x264>)
 8003d5a:	f003 fa32 	bl	80071c2 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003d5e:	2102      	movs	r1, #2
 8003d60:	486a      	ldr	r0, [pc, #424]	; (8003f0c <main+0x264>)
 8003d62:	f003 fcb1 	bl	80076c8 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 8003d66:	2101      	movs	r1, #1
 8003d68:	4868      	ldr	r0, [pc, #416]	; (8003f0c <main+0x264>)
 8003d6a:	f003 fcad 	bl	80076c8 <HAL_CAN_ActivateNotification>

    serialPrintln("charIOT-Key-C");
 8003d6e:	4868      	ldr	r0, [pc, #416]	; (8003f10 <main+0x268>)
 8003d70:	f000 f91c 	bl	8003fac <serialPrintln>
    UID0 = HAL_GetUIDw0();
 8003d74:	f002 f9a0 	bl	80060b8 <HAL_GetUIDw0>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4a66      	ldr	r2, [pc, #408]	; (8003f14 <main+0x26c>)
 8003d7c:	6013      	str	r3, [r2, #0]

    init_lookup_tables();
 8003d7e:	f001 fa43 	bl	8005208 <init_lookup_tables>
    set_output_waveform(SAWTOOTH);
 8003d82:	2000      	movs	r0, #0
 8003d84:	f001 ff96 	bl	8005cb4 <set_output_waveform>

    // Init scheduler
    osKernelInitialize();
 8003d88:	f007 fc8e 	bl	800b6a8 <osKernelInitialize>

    // Mutex creation
    keysMutexHandle = osMutexNew(&keysMutex_attributes);
 8003d8c:	4862      	ldr	r0, [pc, #392]	; (8003f18 <main+0x270>)
 8003d8e:	f007 fe6b 	bl	800ba68 <osMutexNew>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4a61      	ldr	r2, [pc, #388]	; (8003f1c <main+0x274>)
 8003d96:	6013      	str	r3, [r2, #0]
    knobsMutexHandle = osMutexNew(&knobsMutex_attributes);
 8003d98:	4861      	ldr	r0, [pc, #388]	; (8003f20 <main+0x278>)
 8003d9a:	f007 fe65 	bl	800ba68 <osMutexNew>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4a60      	ldr	r2, [pc, #384]	; (8003f24 <main+0x27c>)
 8003da2:	6013      	str	r3, [r2, #0]
    readMutexHandle = osMutexNew(&readMutex_attributes);
 8003da4:	4860      	ldr	r0, [pc, #384]	; (8003f28 <main+0x280>)
 8003da6:	f007 fe5f 	bl	800ba68 <osMutexNew>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4a5f      	ldr	r2, [pc, #380]	; (8003f2c <main+0x284>)
 8003dae:	6013      	str	r3, [r2, #0]

    // Add mutexes
    osMutexRelease(keysMutexHandle);
 8003db0:	4b5a      	ldr	r3, [pc, #360]	; (8003f1c <main+0x274>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f007 ff28 	bl	800bc0a <osMutexRelease>
    osMutexRelease(knobsMutexHandle);
 8003dba:	4b5a      	ldr	r3, [pc, #360]	; (8003f24 <main+0x27c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f007 ff23 	bl	800bc0a <osMutexRelease>
    osMutexRelease(readMutexHandle);
 8003dc4:	4b59      	ldr	r3, [pc, #356]	; (8003f2c <main+0x284>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f007 ff1e 	bl	800bc0a <osMutexRelease>

    // Create semaphores
    const osSemaphoreAttr_t CAN_TX_Semaphore_attributes = {.name = "CAN_TX_Semaphore"};
 8003dce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	60da      	str	r2, [r3, #12]
 8003ddc:	4b54      	ldr	r3, [pc, #336]	; (8003f30 <main+0x288>)
 8003dde:	633b      	str	r3, [r7, #48]	; 0x30
    CAN_TX_SemaphoreHandle = osSemaphoreNew(3, 3, &CAN_TX_Semaphore_attributes);
 8003de0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003de4:	461a      	mov	r2, r3
 8003de6:	2103      	movs	r1, #3
 8003de8:	2003      	movs	r0, #3
 8003dea:	f007 ff4b 	bl	800bc84 <osSemaphoreNew>
 8003dee:	4603      	mov	r3, r0
 8003df0:	4a50      	ldr	r2, [pc, #320]	; (8003f34 <main+0x28c>)
 8003df2:	6013      	str	r3, [r2, #0]

    // Add semaphores
    osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 8003df4:	4b4f      	ldr	r3, [pc, #316]	; (8003f34 <main+0x28c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f008 f81f 	bl	800be3c <osSemaphoreRelease>

    // Create queues
    const osMessageQueueAttr_t msgInQ_attributes = {.name = "msgInQ"};
 8003dfe:	f107 0318 	add.w	r3, r7, #24
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	609a      	str	r2, [r3, #8]
 8003e0a:	60da      	str	r2, [r3, #12]
 8003e0c:	611a      	str	r2, [r3, #16]
 8003e0e:	615a      	str	r2, [r3, #20]
 8003e10:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <main+0x290>)
 8003e12:	61bb      	str	r3, [r7, #24]
    const osMessageQueueAttr_t msgOutQ_attributes = {.name = "msgOutQ"};
 8003e14:	463b      	mov	r3, r7
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
 8003e1e:	60da      	str	r2, [r3, #12]
 8003e20:	611a      	str	r2, [r3, #16]
 8003e22:	615a      	str	r2, [r3, #20]
 8003e24:	4b45      	ldr	r3, [pc, #276]	; (8003f3c <main+0x294>)
 8003e26:	603b      	str	r3, [r7, #0]
    msgInQHandle = osMessageQueueNew (36, sizeof(CanMsg_t), &msgInQ_attributes);
 8003e28:	f107 0318 	add.w	r3, r7, #24
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	210c      	movs	r1, #12
 8003e30:	2024      	movs	r0, #36	; 0x24
 8003e32:	f008 f847 	bl	800bec4 <osMessageQueueNew>
 8003e36:	4603      	mov	r3, r0
 8003e38:	4a41      	ldr	r2, [pc, #260]	; (8003f40 <main+0x298>)
 8003e3a:	6013      	str	r3, [r2, #0]
    msgOutQHandle = osMessageQueueNew (36, sizeof(CanMsg_t), &msgOutQ_attributes);
 8003e3c:	463b      	mov	r3, r7
 8003e3e:	461a      	mov	r2, r3
 8003e40:	210c      	movs	r1, #12
 8003e42:	2024      	movs	r0, #36	; 0x24
 8003e44:	f008 f83e 	bl	800bec4 <osMessageQueueNew>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	4a3e      	ldr	r2, [pc, #248]	; (8003f44 <main+0x29c>)
 8003e4c:	6013      	str	r3, [r2, #0]

    // Create threads
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003e4e:	4a3e      	ldr	r2, [pc, #248]	; (8003f48 <main+0x2a0>)
 8003e50:	2100      	movs	r1, #0
 8003e52:	483e      	ldr	r0, [pc, #248]	; (8003f4c <main+0x2a4>)
 8003e54:	f007 fc72 	bl	800b73c <osThreadNew>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4a3d      	ldr	r2, [pc, #244]	; (8003f50 <main+0x2a8>)
 8003e5c:	6013      	str	r3, [r2, #0]
    scanKeysHandle = osThreadNew(scanKeysTask, NULL, &scanKeys_attributes);
 8003e5e:	4a3d      	ldr	r2, [pc, #244]	; (8003f54 <main+0x2ac>)
 8003e60:	2100      	movs	r1, #0
 8003e62:	483d      	ldr	r0, [pc, #244]	; (8003f58 <main+0x2b0>)
 8003e64:	f007 fc6a 	bl	800b73c <osThreadNew>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4a3c      	ldr	r2, [pc, #240]	; (8003f5c <main+0x2b4>)
 8003e6c:	6013      	str	r3, [r2, #0]
    displayUpdateHandle = osThreadNew(displayUpdateTask, NULL, &displayUpdate_attributes);
 8003e6e:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <main+0x2b8>)
 8003e70:	2100      	movs	r1, #0
 8003e72:	483c      	ldr	r0, [pc, #240]	; (8003f64 <main+0x2bc>)
 8003e74:	f007 fc62 	bl	800b73c <osThreadNew>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4a3b      	ldr	r2, [pc, #236]	; (8003f68 <main+0x2c0>)
 8003e7c:	6013      	str	r3, [r2, #0]
    decodeTaskHandle = osThreadNew(decode, NULL, &decodeTask_attributes);
 8003e7e:	4a3b      	ldr	r2, [pc, #236]	; (8003f6c <main+0x2c4>)
 8003e80:	2100      	movs	r1, #0
 8003e82:	483b      	ldr	r0, [pc, #236]	; (8003f70 <main+0x2c8>)
 8003e84:	f007 fc5a 	bl	800b73c <osThreadNew>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4a3a      	ldr	r2, [pc, #232]	; (8003f74 <main+0x2cc>)
 8003e8c:	6013      	str	r3, [r2, #0]
    CAN_TX_TaskNameHandle = osThreadNew(CAN_Transmit, NULL, &CAN_TX_TaskName_attributes);
 8003e8e:	4a3a      	ldr	r2, [pc, #232]	; (8003f78 <main+0x2d0>)
 8003e90:	2100      	movs	r1, #0
 8003e92:	483a      	ldr	r0, [pc, #232]	; (8003f7c <main+0x2d4>)
 8003e94:	f007 fc52 	bl	800b73c <osThreadNew>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	4a39      	ldr	r2, [pc, #228]	; (8003f80 <main+0x2d8>)
 8003e9c:	6013      	str	r3, [r2, #0]
    handshakeTaskHandle = osThreadNew(handshake, NULL, &handshakeTask_attributes);
 8003e9e:	4a39      	ldr	r2, [pc, #228]	; (8003f84 <main+0x2dc>)
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4839      	ldr	r0, [pc, #228]	; (8003f88 <main+0x2e0>)
 8003ea4:	f007 fc4a 	bl	800b73c <osThreadNew>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	4a38      	ldr	r2, [pc, #224]	; (8003f8c <main+0x2e4>)
 8003eac:	6013      	str	r3, [r2, #0]
    OutputTaskFirstHalfHandle = osThreadNew(fill_output_first_half, NULL, &OutputTask_attributes);
 8003eae:	4a38      	ldr	r2, [pc, #224]	; (8003f90 <main+0x2e8>)
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4838      	ldr	r0, [pc, #224]	; (8003f94 <main+0x2ec>)
 8003eb4:	f007 fc42 	bl	800b73c <osThreadNew>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4a37      	ldr	r2, [pc, #220]	; (8003f98 <main+0x2f0>)
 8003ebc:	6013      	str	r3, [r2, #0]
    OutputTaskSecondHalfHandle = osThreadNew(fill_output_second_half, NULL, &OutputTask_attributes);
 8003ebe:	4a34      	ldr	r2, [pc, #208]	; (8003f90 <main+0x2e8>)
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4836      	ldr	r0, [pc, #216]	; (8003f9c <main+0x2f4>)
 8003ec4:	f007 fc3a 	bl	800b73c <osThreadNew>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4a35      	ldr	r2, [pc, #212]	; (8003fa0 <main+0x2f8>)
 8003ecc:	6013      	str	r3, [r2, #0]

    /* creation of outputFlag */
    outputFlagHandle = osEventFlagsNew(&outputFlag_attributes);
 8003ece:	4835      	ldr	r0, [pc, #212]	; (8003fa4 <main+0x2fc>)
 8003ed0:	f007 fce1 	bl	800b896 <osEventFlagsNew>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4a34      	ldr	r2, [pc, #208]	; (8003fa8 <main+0x300>)
 8003ed8:	6013      	str	r3, [r2, #0]

    // Start scheduler
    osKernelStart();
 8003eda:	f007 fc09 	bl	800b6f0 <osKernelStart>
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3740      	adds	r7, #64	; 0x40
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	200004f0 	.word	0x200004f0
 8003eec:	200004a4 	.word	0x200004a4
 8003ef0:	200047c0 	.word	0x200047c0
 8003ef4:	200003ac 	.word	0x200003ac
 8003ef8:	08003bc1 	.word	0x08003bc1
 8003efc:	08003be1 	.word	0x08003be1
 8003f00:	0801f560 	.word	0x0801f560
 8003f04:	20000670 	.word	0x20000670
 8003f08:	0801f5e0 	.word	0x0801f5e0
 8003f0c:	20000384 	.word	0x20000384
 8003f10:	08012764 	.word	0x08012764
 8003f14:	20000318 	.word	0x20000318
 8003f18:	0801f6e0 	.word	0x0801f6e0
 8003f1c:	20000654 	.word	0x20000654
 8003f20:	0801f6f0 	.word	0x0801f6f0
 8003f24:	20000658 	.word	0x20000658
 8003f28:	0801f700 	.word	0x0801f700
 8003f2c:	2000062c 	.word	0x2000062c
 8003f30:	08012774 	.word	0x08012774
 8003f34:	2000030c 	.word	0x2000030c
 8003f38:	08012788 	.word	0x08012788
 8003f3c:	08012790 	.word	0x08012790
 8003f40:	20000310 	.word	0x20000310
 8003f44:	20000314 	.word	0x20000314
 8003f48:	0801f5e4 	.word	0x0801f5e4
 8003f4c:	080045c1 	.word	0x080045c1
 8003f50:	20000634 	.word	0x20000634
 8003f54:	0801f608 	.word	0x0801f608
 8003f58:	0800467d 	.word	0x0800467d
 8003f5c:	20000638 	.word	0x20000638
 8003f60:	0801f62c 	.word	0x0801f62c
 8003f64:	080047b9 	.word	0x080047b9
 8003f68:	2000063c 	.word	0x2000063c
 8003f6c:	0801f650 	.word	0x0801f650
 8003f70:	08003235 	.word	0x08003235
 8003f74:	20000640 	.word	0x20000640
 8003f78:	0801f674 	.word	0x0801f674
 8003f7c:	080032d9 	.word	0x080032d9
 8003f80:	20000644 	.word	0x20000644
 8003f84:	0801f698 	.word	0x0801f698
 8003f88:	08003319 	.word	0x08003319
 8003f8c:	20000648 	.word	0x20000648
 8003f90:	0801f6bc 	.word	0x0801f6bc
 8003f94:	0800401d 	.word	0x0800401d
 8003f98:	2000064c 	.word	0x2000064c
 8003f9c:	08004075 	.word	0x08004075
 8003fa0:	20000650 	.word	0x20000650
 8003fa4:	0801f710 	.word	0x0801f710
 8003fa8:	2000065c 	.word	0x2000065c

08003fac <serialPrintln>:

void serialPrint(char val[]) {
    HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
}

void serialPrintln(char val[]) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7fc f90b 	bl	80001d0 <strlen>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	230a      	movs	r3, #10
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4808      	ldr	r0, [pc, #32]	; (8003fe4 <serialPrintln+0x38>)
 8003fc4:	f006 febc 	bl	800ad40 <HAL_UART_Transmit>
    char rn[2] = "\r\n";
 8003fc8:	f640 230d 	movw	r3, #2573	; 0xa0d
 8003fcc:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, (uint8_t*) rn, 2, 10);
 8003fce:	f107 010c 	add.w	r1, r7, #12
 8003fd2:	230a      	movs	r3, #10
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	4803      	ldr	r0, [pc, #12]	; (8003fe4 <serialPrintln+0x38>)
 8003fd8:	f006 feb2 	bl	800ad40 <HAL_UART_Transmit>
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	2000053c 	.word	0x2000053c

08003fe8 <delayMicro>:

void delayMicro(uint16_t us) {
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	80fb      	strh	r3, [r7, #6]
    htim7.Instance->CNT = 0;
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <delayMicro+0x30>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24
    while (htim7.Instance->CNT < us)
 8003ffa:	bf00      	nop
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <delayMicro+0x30>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	429a      	cmp	r2, r3
 8004006:	d3f9      	bcc.n	8003ffc <delayMicro+0x14>
            ;
}
 8004008:	bf00      	nop
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	200004f0 	.word	0x200004f0

0800401c <fill_output_first_half>:

/// Task to fill the first half of the DMA output buffer
void fill_output_first_half() {
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0

    for (;;) {
        osEventFlagsWait(outputFlagHandle, 0x1, osFlagsWaitAny, osWaitForever);
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <fill_output_first_half+0x44>)
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004028:	2200      	movs	r2, #0
 800402a:	2101      	movs	r1, #1
 800402c:	f007 fcb6 	bl	800b99c <osEventFlagsWait>
        HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 8004030:	2201      	movs	r2, #1
 8004032:	2108      	movs	r1, #8
 8004034:	480b      	ldr	r0, [pc, #44]	; (8004064 <fill_output_first_half+0x48>)
 8004036:	f004 fce5 	bl	8008a04 <HAL_GPIO_WritePin>
        synthesize_output(__atomic_load_n(&keys, __ATOMIC_RELAXED), volume, octave, true);
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <fill_output_first_half+0x4c>)
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	b298      	uxth	r0, r3
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <fill_output_first_half+0x50>)
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b2d9      	uxtb	r1, r3
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <fill_output_first_half+0x54>)
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b2da      	uxtb	r2, r3
 800404c:	2301      	movs	r3, #1
 800404e:	f001 fed9 	bl	8005e04 <synthesize_output>
        HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8004052:	2200      	movs	r2, #0
 8004054:	2108      	movs	r1, #8
 8004056:	4803      	ldr	r0, [pc, #12]	; (8004064 <fill_output_first_half+0x48>)
 8004058:	f004 fcd4 	bl	8008a04 <HAL_GPIO_WritePin>
        osEventFlagsWait(outputFlagHandle, 0x1, osFlagsWaitAny, osWaitForever);
 800405c:	e7e0      	b.n	8004020 <fill_output_first_half+0x4>
 800405e:	bf00      	nop
 8004060:	2000065c 	.word	0x2000065c
 8004064:	48000400 	.word	0x48000400
 8004068:	2000000c 	.word	0x2000000c
 800406c:	20000012 	.word	0x20000012
 8004070:	20000014 	.word	0x20000014

08004074 <fill_output_second_half>:
    }

}

void fill_output_second_half() {
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
    for (;;) {
        osEventFlagsWait(outputFlagHandle, 0x2, osFlagsWaitAny, osWaitForever);
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <fill_output_second_half+0x44>)
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004080:	2200      	movs	r2, #0
 8004082:	2102      	movs	r1, #2
 8004084:	f007 fc8a 	bl	800b99c <osEventFlagsWait>
        HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 8004088:	2201      	movs	r2, #1
 800408a:	2108      	movs	r1, #8
 800408c:	480b      	ldr	r0, [pc, #44]	; (80040bc <fill_output_second_half+0x48>)
 800408e:	f004 fcb9 	bl	8008a04 <HAL_GPIO_WritePin>
        synthesize_output(__atomic_load_n(&keys, __ATOMIC_RELAXED), volume, octave, false);
 8004092:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <fill_output_second_half+0x4c>)
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b298      	uxth	r0, r3
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <fill_output_second_half+0x50>)
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b2d9      	uxtb	r1, r3
 800409e:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <fill_output_second_half+0x54>)
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	f001 fead 	bl	8005e04 <synthesize_output>
        HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80040aa:	2200      	movs	r2, #0
 80040ac:	2108      	movs	r1, #8
 80040ae:	4803      	ldr	r0, [pc, #12]	; (80040bc <fill_output_second_half+0x48>)
 80040b0:	f004 fca8 	bl	8008a04 <HAL_GPIO_WritePin>
        osEventFlagsWait(outputFlagHandle, 0x2, osFlagsWaitAny, osWaitForever);
 80040b4:	e7e0      	b.n	8004078 <fill_output_second_half+0x4>
 80040b6:	bf00      	nop
 80040b8:	2000065c 	.word	0x2000065c
 80040bc:	48000400 	.word	0x48000400
 80040c0:	2000000c 	.word	0x2000000c
 80040c4:	20000012 	.word	0x20000012
 80040c8:	20000014 	.word	0x20000014

080040cc <HAL_DAC_ConvHalfCpltCallbackCh1>:
    }
}


void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
    osEventFlagsSet(outputFlagHandle, 0x1); 
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2101      	movs	r1, #1
 80040da:	4618      	mov	r0, r3
 80040dc:	f007 fc1a 	bl	800b914 <osEventFlagsSet>
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	2000065c 	.word	0x2000065c

080040ec <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
    osEventFlagsSet(outputFlagHandle, 0x2); 
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2102      	movs	r1, #2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f007 fc0a 	bl	800b914 <osEventFlagsSet>
}
 8004100:	bf00      	nop
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	2000065c 	.word	0x2000065c

0800410c <setOutMuxBit>:


void setOutMuxBit(const uint8_t bitIdx, const bool value) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	460a      	mov	r2, r1
 8004116:	71fb      	strb	r3, [r7, #7]
 8004118:	4613      	mov	r3, r2
 800411a:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 800411c:	2200      	movs	r2, #0
 800411e:	2140      	movs	r1, #64	; 0x40
 8004120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004124:	f004 fc6e 	bl	8008a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, bitIdx & 0x01);
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	2101      	movs	r1, #1
 8004134:	4816      	ldr	r0, [pc, #88]	; (8004190 <setOutMuxBit+0x84>)
 8004136:	f004 fc65 	bl	8008a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, bitIdx & 0x02);
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	2102      	movs	r1, #2
 8004146:	4812      	ldr	r0, [pc, #72]	; (8004190 <setOutMuxBit+0x84>)
 8004148:	f004 fc5c 	bl	8008a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, bitIdx & 0x04);
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	2110      	movs	r1, #16
 8004158:	480d      	ldr	r0, [pc, #52]	; (8004190 <setOutMuxBit+0x84>)
 800415a:	f004 fc53 	bl	8008a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, value);
 800415e:	79bb      	ldrb	r3, [r7, #6]
 8004160:	461a      	mov	r2, r3
 8004162:	2120      	movs	r1, #32
 8004164:	480a      	ldr	r0, [pc, #40]	; (8004190 <setOutMuxBit+0x84>)
 8004166:	f004 fc4d 	bl	8008a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 800416a:	2201      	movs	r2, #1
 800416c:	2140      	movs	r1, #64	; 0x40
 800416e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004172:	f004 fc47 	bl	8008a04 <HAL_GPIO_WritePin>
	delayMicro(5);
 8004176:	2005      	movs	r0, #5
 8004178:	f7ff ff36 	bl	8003fe8 <delayMicro>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 800417c:	2200      	movs	r2, #0
 800417e:	2140      	movs	r1, #64	; 0x40
 8004180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004184:	f004 fc3e 	bl	8008a04 <HAL_GPIO_WritePin>

}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	48000400 	.word	0x48000400

08004194 <selectRow>:

void selectRow(uint8_t rowIdx) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 800419e:	2200      	movs	r2, #0
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041a6:	f004 fc2d 	bl	8008a04 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, rowIdx & 0x01);
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	2101      	movs	r1, #1
 80041b6:	480c      	ldr	r0, [pc, #48]	; (80041e8 <selectRow+0x54>)
 80041b8:	f004 fc24 	bl	8008a04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, rowIdx & 0x02);
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	461a      	mov	r2, r3
 80041c6:	2102      	movs	r1, #2
 80041c8:	4807      	ldr	r0, [pc, #28]	; (80041e8 <selectRow+0x54>)
 80041ca:	f004 fc1b 	bl	8008a04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, rowIdx & 0x04);
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	2110      	movs	r1, #16
 80041da:	4803      	ldr	r0, [pc, #12]	; (80041e8 <selectRow+0x54>)
 80041dc:	f004 fc12 	bl	8008a04 <HAL_GPIO_WritePin>
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	48000400 	.word	0x48000400

080041ec <setMuxIO>:


void setMuxIO() {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0

    uint16_t local_keys = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	81fb      	strh	r3, [r7, #14]
    uint16_t local_knobs = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	81bb      	strh	r3, [r7, #12]
    bool local_HKIW = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	72fb      	strb	r3, [r7, #11]
    bool local_HKIE = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	72bb      	strb	r3, [r7, #10]


    for(int r = 0; r < 7; r++){
 8004202:	2300      	movs	r3, #0
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	e069      	b.n	80042dc <setMuxIO+0xf0>
        selectRow(r);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff ffc1 	bl	8004194 <selectRow>
        HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, outbits[r]);
 8004212:	4a3c      	ldr	r2, [pc, #240]	; (8004304 <setMuxIO+0x118>)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4413      	add	r3, r2
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	2120      	movs	r1, #32
 8004220:	4839      	ldr	r0, [pc, #228]	; (8004308 <setMuxIO+0x11c>)
 8004222:	f004 fbef 	bl	8008a04 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(REN_GPIO_Port,REN_Pin, GPIO_PIN_SET);
 8004226:	2201      	movs	r2, #1
 8004228:	2140      	movs	r1, #64	; 0x40
 800422a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800422e:	f004 fbe9 	bl	8008a04 <HAL_GPIO_WritePin>
        delayMicro(5);
 8004232:	2005      	movs	r0, #5
 8004234:	f7ff fed8 	bl	8003fe8 <delayMicro>
        if( r < 3) {
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b02      	cmp	r3, #2
 800423c:	dc0e      	bgt.n	800425c <setMuxIO+0x70>
            local_keys |= readCols() << (r * 4);
 800423e:	f000 f86f 	bl	8004320 <readCols>
 8004242:	4603      	mov	r3, r0
 8004244:	461a      	mov	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	b21a      	sxth	r2, r3
 8004250:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004254:	4313      	orrs	r3, r2
 8004256:	b21b      	sxth	r3, r3
 8004258:	81fb      	strh	r3, [r7, #14]
 800425a:	e036      	b.n	80042ca <setMuxIO+0xde>
        } else if (r < 5) {
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b04      	cmp	r3, #4
 8004260:	dc0f      	bgt.n	8004282 <setMuxIO+0x96>
            local_knobs |= (readCols() << ((r - 3) * 4));
 8004262:	f000 f85d 	bl	8004320 <readCols>
 8004266:	4603      	mov	r3, r0
 8004268:	461a      	mov	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3b03      	subs	r3, #3
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	b21a      	sxth	r2, r3
 8004276:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	b21b      	sxth	r3, r3
 800427e:	81bb      	strh	r3, [r7, #12]
 8004280:	e023      	b.n	80042ca <setMuxIO+0xde>
        } else if (r == 5) {
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b05      	cmp	r3, #5
 8004286:	d10a      	bne.n	800429e <setMuxIO+0xb2>
            local_HKIW = readCols() >> 3;
 8004288:	f000 f84a 	bl	8004320 <readCols>
 800428c:	4603      	mov	r3, r0
 800428e:	08db      	lsrs	r3, r3, #3
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	bf14      	ite	ne
 8004296:	2301      	movne	r3, #1
 8004298:	2300      	moveq	r3, #0
 800429a:	72fb      	strb	r3, [r7, #11]
 800429c:	e015      	b.n	80042ca <setMuxIO+0xde>
        } else {
            local_HKIE = readCols() >> 3;
 800429e:	f000 f83f 	bl	8004320 <readCols>
 80042a2:	4603      	mov	r3, r0
 80042a4:	08db      	lsrs	r3, r3, #3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	72bb      	strb	r3, [r7, #10]
            selected = ~readCols() & 0x01;
 80042b2:	f000 f835 	bl	8004320 <readCols>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <setMuxIO+0x120>)
 80042c8:	701a      	strb	r2, [r3, #0]
        }
        HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2140      	movs	r1, #64	; 0x40
 80042ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042d2:	f004 fb97 	bl	8008a04 <HAL_GPIO_WritePin>
    for(int r = 0; r < 7; r++){
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3301      	adds	r3, #1
 80042da:	607b      	str	r3, [r7, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b06      	cmp	r3, #6
 80042e0:	dd92      	ble.n	8004208 <setMuxIO+0x1c>
    }

    __atomic_store_n(&HKIW, local_HKIW, __ATOMIC_RELAXED);
 80042e2:	7afa      	ldrb	r2, [r7, #11]
 80042e4:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <setMuxIO+0x124>)
 80042e6:	701a      	strb	r2, [r3, #0]
    __atomic_store_n(&HKIE, local_HKIE, __ATOMIC_RELAXED);
 80042e8:	7aba      	ldrb	r2, [r7, #10]
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <setMuxIO+0x128>)
 80042ec:	701a      	strb	r2, [r3, #0]
    __atomic_store_n(&keys, local_keys, __ATOMIC_RELAXED);
 80042ee:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <setMuxIO+0x12c>)
 80042f0:	89fb      	ldrh	r3, [r7, #14]
 80042f2:	8013      	strh	r3, [r2, #0]
    __atomic_store_n(&knobs, local_knobs, __ATOMIC_RELAXED);
 80042f4:	4a09      	ldr	r2, [pc, #36]	; (800431c <setMuxIO+0x130>)
 80042f6:	89bb      	ldrh	r3, [r7, #12]
 80042f8:	8013      	strh	r3, [r2, #0]

}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000004 	.word	0x20000004
 8004308:	48000400 	.word	0x48000400
 800430c:	20000631 	.word	0x20000631
 8004310:	2000031d 	.word	0x2000031d
 8004314:	2000031e 	.word	0x2000031e
 8004318:	2000000c 	.word	0x2000000c
 800431c:	2000000e 	.word	0x2000000e

08004320 <readCols>:

uint8_t readCols() {
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0

	uint8_t C0_val = HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin);
 8004326:	2108      	movs	r1, #8
 8004328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800432c:	f004 fb52 	bl	80089d4 <HAL_GPIO_ReadPin>
 8004330:	4603      	mov	r3, r0
 8004332:	71fb      	strb	r3, [r7, #7]
	uint8_t C1_val = HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin);
 8004334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800433c:	f004 fb4a 	bl	80089d4 <HAL_GPIO_ReadPin>
 8004340:	4603      	mov	r3, r0
 8004342:	71bb      	strb	r3, [r7, #6]
	uint8_t C2_val = HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin);
 8004344:	2180      	movs	r1, #128	; 0x80
 8004346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800434a:	f004 fb43 	bl	80089d4 <HAL_GPIO_ReadPin>
 800434e:	4603      	mov	r3, r0
 8004350:	717b      	strb	r3, [r7, #5]
	uint8_t C3_val = HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin);
 8004352:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800435a:	f004 fb3b 	bl	80089d4 <HAL_GPIO_ReadPin>
 800435e:	4603      	mov	r3, r0
 8004360:	713b      	strb	r3, [r7, #4]

	return (C3_val << 3) | (C2_val << 2) | (C1_val << 1) | C0_val;
 8004362:	793b      	ldrb	r3, [r7, #4]
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	b25a      	sxtb	r2, r3
 8004368:	797b      	ldrb	r3, [r7, #5]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	b25b      	sxtb	r3, r3
 800436e:	4313      	orrs	r3, r2
 8004370:	b25a      	sxtb	r2, r3
 8004372:	79bb      	ldrb	r3, [r7, #6]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	b25b      	sxtb	r3, r3
 8004378:	4313      	orrs	r3, r2
 800437a:	b25a      	sxtb	r2, r3
 800437c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004380:	4313      	orrs	r3, r2
 8004382:	b25b      	sxtb	r3, r3
 8004384:	b2db      	uxtb	r3, r3

}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <changeKnobState>:


int16_t changeKnobState(uint8_t knob_state, uint8_t previousKnobState, uint16_t knobRotation, int8_t top_limit, int8_t bottom_limit){
 800438e:	b490      	push	{r4, r7}
 8004390:	b086      	sub	sp, #24
 8004392:	af00      	add	r7, sp, #0
 8004394:	4604      	mov	r4, r0
 8004396:	4608      	mov	r0, r1
 8004398:	4611      	mov	r1, r2
 800439a:	461a      	mov	r2, r3
 800439c:	4623      	mov	r3, r4
 800439e:	71fb      	strb	r3, [r7, #7]
 80043a0:	4603      	mov	r3, r0
 80043a2:	71bb      	strb	r3, [r7, #6]
 80043a4:	460b      	mov	r3, r1
 80043a6:	80bb      	strh	r3, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	70fb      	strb	r3, [r7, #3]
    int16_t rotation = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	82fb      	strh	r3, [r7, #22]
    int current_knob = knob_state;
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	613b      	str	r3, [r7, #16]
    int prev_knob = previousKnobState;
 80043b4:	79bb      	ldrb	r3, [r7, #6]
 80043b6:	60fb      	str	r3, [r7, #12]

    // upper and bottom levels for knob
    if ((((prev_knob == 0b11) && (current_knob == 0b10)) ||
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d102      	bne.n	80043c4 <changeKnobState+0x36>
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d005      	beq.n	80043d0 <changeKnobState+0x42>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10e      	bne.n	80043e8 <changeKnobState+0x5a>
      ((prev_knob == 0b00) && (current_knob == 0b01))) &&
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d10b      	bne.n	80043e8 <changeKnobState+0x5a>
            knobRotation < top_limit
 80043d0:	88ba      	ldrh	r2, [r7, #4]
 80043d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
      ((prev_knob == 0b00) && (current_knob == 0b01))) &&
 80043d6:	429a      	cmp	r2, r3
 80043d8:	da06      	bge.n	80043e8 <changeKnobState+0x5a>
    ){
        rotation ++;
 80043da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3301      	adds	r3, #1
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	82fb      	strh	r3, [r7, #22]
 80043e6:	e016      	b.n	8004416 <changeKnobState+0x88>
    } else
        if ((((prev_knob == 0b01) && (current_knob == 0b00)) ||
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d102      	bne.n	80043f4 <changeKnobState+0x66>
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <changeKnobState+0x72>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d10d      	bne.n	8004416 <changeKnobState+0x88>
           ((prev_knob == 0b10) && (current_knob == 0b11))) &&
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d10a      	bne.n	8004416 <changeKnobState+0x88>
                 knobRotation > bottom_limit
 8004400:	88ba      	ldrh	r2, [r7, #4]
 8004402:	f997 3020 	ldrsb.w	r3, [r7, #32]
           ((prev_knob == 0b10) && (current_knob == 0b11))) &&
 8004406:	429a      	cmp	r2, r3
 8004408:	dd05      	ble.n	8004416 <changeKnobState+0x88>
        ) {
        rotation --;
 800440a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29b      	uxth	r3, r3
 8004414:	82fb      	strh	r3, [r7, #22]
    }

    return rotation;
 8004416:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bc90      	pop	{r4, r7}
 8004422:	4770      	bx	lr

08004424 <scanKnob>:

void scanKnob(uint16_t localKnobs, uint16_t prevKnobs, uint8_t knob_index, char type ) {
 8004424:	b590      	push	{r4, r7, lr}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af02      	add	r7, sp, #8
 800442a:	4604      	mov	r4, r0
 800442c:	4608      	mov	r0, r1
 800442e:	4611      	mov	r1, r2
 8004430:	461a      	mov	r2, r3
 8004432:	4623      	mov	r3, r4
 8004434:	80fb      	strh	r3, [r7, #6]
 8004436:	4603      	mov	r3, r0
 8004438:	80bb      	strh	r3, [r7, #4]
 800443a:	460b      	mov	r3, r1
 800443c:	70fb      	strb	r3, [r7, #3]
 800443e:	4613      	mov	r3, r2
 8004440:	70bb      	strb	r3, [r7, #2]
	uint8_t shift_row = (knob_index >= 2) ? 0 : 4;
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d901      	bls.n	800444c <scanKnob+0x28>
 8004448:	2300      	movs	r3, #0
 800444a:	e000      	b.n	800444e <scanKnob+0x2a>
 800444c:	2304      	movs	r3, #4
 800444e:	75fb      	strb	r3, [r7, #23]
	uint8_t row = 0xF;
 8004450:	230f      	movs	r3, #15
 8004452:	75bb      	strb	r3, [r7, #22]
	uint8_t knob_on_row = 1 - knob_index % 2;
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf0c      	ite	eq
 800445e:	2301      	moveq	r3, #1
 8004460:	2300      	movne	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	757b      	strb	r3, [r7, #21]

	uint8_t rowKnobStates 	  = (localKnobs 	 >> shift_row) & row;
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	fa42 f303 	asr.w	r3, r2, r3
 800446e:	b25a      	sxtb	r2, r3
 8004470:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004474:	4013      	ands	r3, r2
 8004476:	b25b      	sxtb	r3, r3
 8004478:	753b      	strb	r3, [r7, #20]
	uint8_t rowPrevKnobStates = (prevKnobs >> shift_row) & row;
 800447a:	88ba      	ldrh	r2, [r7, #4]
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	fa42 f303 	asr.w	r3, r2, r3
 8004482:	b25a      	sxtb	r2, r3
 8004484:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004488:	4013      	ands	r3, r2
 800448a:	b25b      	sxtb	r3, r3
 800448c:	74fb      	strb	r3, [r7, #19]

//	char s[32];
//	sprintf(s, "rowKnobStates:%x", rowKnobStates);
//	serialPrintln(s);

	uint8_t knobState		  = (rowKnobStates 	   >> knob_on_row*2) & 0b11;
 800448e:	7d3a      	ldrb	r2, [r7, #20]
 8004490:	7d7b      	ldrb	r3, [r7, #21]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	fa42 f303 	asr.w	r3, r2, r3
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	74bb      	strb	r3, [r7, #18]
	uint8_t previousKnobState = (rowPrevKnobStates >> knob_on_row*2) & 0b11;
 80044a0:	7cfa      	ldrb	r2, [r7, #19]
 80044a2:	7d7b      	ldrb	r3, [r7, #21]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	fa42 f303 	asr.w	r3, r2, r3
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	747b      	strb	r3, [r7, #17]


//	UPDATE GLOBAL VARIABLES
	osMutexAcquire(knobsMutexHandle, osWaitForever);
 80044b2:	4b3c      	ldr	r3, [pc, #240]	; (80045a4 <scanKnob+0x180>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044ba:	4618      	mov	r0, r3
 80044bc:	f007 fb5a 	bl	800bb74 <osMutexAcquire>
	__atomic_store_n(&knobs, localKnobs, __ATOMIC_RELAXED);
 80044c0:	4a39      	ldr	r2, [pc, #228]	; (80045a8 <scanKnob+0x184>)
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	8013      	strh	r3, [r2, #0]
	osMutexRelease(knobsMutexHandle);
 80044c6:	4b37      	ldr	r3, [pc, #220]	; (80045a4 <scanKnob+0x180>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f007 fb9d 	bl	800bc0a <osMutexRelease>

	if (previousKnobState != knobState) {
 80044d0:	7c7a      	ldrb	r2, [r7, #17]
 80044d2:	7cbb      	ldrb	r3, [r7, #18]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d060      	beq.n	800459a <scanKnob+0x176>
		osMutexAcquire(knobsMutexHandle, osWaitForever);
 80044d8:	4b32      	ldr	r3, [pc, #200]	; (80045a4 <scanKnob+0x180>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044e0:	4618      	mov	r0, r3
 80044e2:	f007 fb47 	bl	800bb74 <osMutexAcquire>
		__atomic_store_n(&prev_knobs, localKnobs, __ATOMIC_RELAXED);
 80044e6:	4a31      	ldr	r2, [pc, #196]	; (80045ac <scanKnob+0x188>)
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	8013      	strh	r3, [r2, #0]
		osMutexRelease(knobsMutexHandle);
 80044ec:	4b2d      	ldr	r3, [pc, #180]	; (80045a4 <scanKnob+0x180>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f007 fb8a 	bl	800bc0a <osMutexRelease>

		if (type == 'v'){
 80044f6:	78bb      	ldrb	r3, [r7, #2]
 80044f8:	2b76      	cmp	r3, #118	; 0x76
 80044fa:	d112      	bne.n	8004522 <scanKnob+0xfe>
			int16_t change_volume = changeKnobState(knobState, previousKnobState, volume, 12, 0);
 80044fc:	4b2c      	ldr	r3, [pc, #176]	; (80045b0 <scanKnob+0x18c>)
 80044fe:	881a      	ldrh	r2, [r3, #0]
 8004500:	7c79      	ldrb	r1, [r7, #17]
 8004502:	7cb8      	ldrb	r0, [r7, #18]
 8004504:	2300      	movs	r3, #0
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	230c      	movs	r3, #12
 800450a:	f7ff ff40 	bl	800438e <changeKnobState>
 800450e:	4603      	mov	r3, r0
 8004510:	813b      	strh	r3, [r7, #8]
			volume = volume + change_volume;
 8004512:	4b27      	ldr	r3, [pc, #156]	; (80045b0 <scanKnob+0x18c>)
 8004514:	881a      	ldrh	r2, [r3, #0]
 8004516:	893b      	ldrh	r3, [r7, #8]
 8004518:	4413      	add	r3, r2
 800451a:	b29a      	uxth	r2, r3
 800451c:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <scanKnob+0x18c>)
 800451e:	801a      	strh	r2, [r3, #0]
			//
			set_output_waveform(new_wavetype);
		}
	}

}
 8004520:	e03b      	b.n	800459a <scanKnob+0x176>
		} else if (type == 'o'){
 8004522:	78bb      	ldrb	r3, [r7, #2]
 8004524:	2b6f      	cmp	r3, #111	; 0x6f
 8004526:	d112      	bne.n	800454e <scanKnob+0x12a>
			int16_t change_octave = changeKnobState(knobState, previousKnobState, octave, 8, 2); // can only go one lower than the default octave
 8004528:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <scanKnob+0x190>)
 800452a:	881a      	ldrh	r2, [r3, #0]
 800452c:	7c79      	ldrb	r1, [r7, #17]
 800452e:	7cb8      	ldrb	r0, [r7, #18]
 8004530:	2302      	movs	r3, #2
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	2308      	movs	r3, #8
 8004536:	f7ff ff2a 	bl	800438e <changeKnobState>
 800453a:	4603      	mov	r3, r0
 800453c:	817b      	strh	r3, [r7, #10]
			octave = octave + change_octave;
 800453e:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <scanKnob+0x190>)
 8004540:	881a      	ldrh	r2, [r3, #0]
 8004542:	897b      	ldrh	r3, [r7, #10]
 8004544:	4413      	add	r3, r2
 8004546:	b29a      	uxth	r2, r3
 8004548:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <scanKnob+0x190>)
 800454a:	801a      	strh	r2, [r3, #0]
}
 800454c:	e025      	b.n	800459a <scanKnob+0x176>
		} else if (type == 'w'){
 800454e:	78bb      	ldrb	r3, [r7, #2]
 8004550:	2b77      	cmp	r3, #119	; 0x77
 8004552:	d122      	bne.n	800459a <scanKnob+0x176>
			int16_t change_wave = changeKnobState(knobState, previousKnobState, output_wavetype, END_WAVETYPE-1, 0);
 8004554:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <scanKnob+0x194>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	b29a      	uxth	r2, r3
 800455a:	7c79      	ldrb	r1, [r7, #17]
 800455c:	7cb8      	ldrb	r0, [r7, #18]
 800455e:	2300      	movs	r3, #0
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	2306      	movs	r3, #6
 8004564:	f7ff ff13 	bl	800438e <changeKnobState>
 8004568:	4603      	mov	r3, r0
 800456a:	81fb      	strh	r3, [r7, #14]
			WaveType new_wavetype = (output_wavetype + change_wave) % END_WAVETYPE;
 800456c:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <scanKnob+0x194>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004576:	441a      	add	r2, r3
 8004578:	4b10      	ldr	r3, [pc, #64]	; (80045bc <scanKnob+0x198>)
 800457a:	fb83 1302 	smull	r1, r3, r3, r2
 800457e:	4413      	add	r3, r2
 8004580:	1099      	asrs	r1, r3, #2
 8004582:	17d3      	asrs	r3, r2, #31
 8004584:	1ac9      	subs	r1, r1, r3
 8004586:	460b      	mov	r3, r1
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	1a5b      	subs	r3, r3, r1
 800458c:	1ad1      	subs	r1, r2, r3
 800458e:	460b      	mov	r3, r1
 8004590:	737b      	strb	r3, [r7, #13]
			set_output_waveform(new_wavetype);
 8004592:	7b7b      	ldrb	r3, [r7, #13]
 8004594:	4618      	mov	r0, r3
 8004596:	f001 fb8d 	bl	8005cb4 <set_output_waveform>
}
 800459a:	bf00      	nop
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd90      	pop	{r4, r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000658 	.word	0x20000658
 80045a8:	2000000e 	.word	0x2000000e
 80045ac:	20000010 	.word	0x20000010
 80045b0:	20000012 	.word	0x20000012
 80045b4:	20000014 	.word	0x20000014
 80045b8:	2000007c 	.word	0x2000007c
 80045bc:	92492493 	.word	0x92492493

080045c0 <StartDefaultTask>:


void StartDefaultTask(void *argument)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08c      	sub	sp, #48	; 0x30
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
    for (;;) {
        vTaskDelay(1000);
 80045c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045cc:	f009 fb7c 	bl	800dcc8 <vTaskDelay>
        char buf[20];

        uint8_t notes_played [12];

        for (int key = 0; key < 12; key++) {
 80045d0:	2300      	movs	r3, #0
 80045d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d4:	e042      	b.n	800465c <StartDefaultTask+0x9c>
            notes_played[key] = 0;
 80045d6:	f107 0208 	add.w	r2, r7, #8
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	4413      	add	r3, r2
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
            for (int board = 0; board < keyboard_count; board++) {
 80045e2:	2300      	movs	r3, #0
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e6:	e01f      	b.n	8004628 <StartDefaultTask+0x68>
                notes_played[key] |= ((~(allKeys[board]) >> key) & 1) << board;
 80045e8:	f107 0208 	add.w	r2, r7, #8
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	4413      	add	r3, r2
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	b25a      	sxtb	r2, r3
 80045f4:	491d      	ldr	r1, [pc, #116]	; (800466c <StartDefaultTask+0xac>)
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80045fc:	43d9      	mvns	r1, r3
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	fa41 f303 	asr.w	r3, r1, r3
 8004604:	f003 0101 	and.w	r1, r3, #1
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	fa01 f303 	lsl.w	r3, r1, r3
 800460e:	b25b      	sxtb	r3, r3
 8004610:	4313      	orrs	r3, r2
 8004612:	b25b      	sxtb	r3, r3
 8004614:	b2d9      	uxtb	r1, r3
 8004616:	f107 0208 	add.w	r2, r7, #8
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	4413      	add	r3, r2
 800461e:	460a      	mov	r2, r1
 8004620:	701a      	strb	r2, [r3, #0]
            for (int board = 0; board < keyboard_count; board++) {
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	3301      	adds	r3, #1
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <StartDefaultTask+0xb0>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	461a      	mov	r2, r3
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	4293      	cmp	r3, r2
 8004634:	dbd8      	blt.n	80045e8 <StartDefaultTask+0x28>
            }
            sprintf(buf, "%i, %x", key, notes_played[key]);
 8004636:	f107 0208 	add.w	r2, r7, #8
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	4413      	add	r3, r2
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	f107 0014 	add.w	r0, r7, #20
 8004644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004646:	490b      	ldr	r1, [pc, #44]	; (8004674 <StartDefaultTask+0xb4>)
 8004648:	f00b fb68 	bl	800fd1c <siprintf>
            serialPrintln(buf);
 800464c:	f107 0314 	add.w	r3, r7, #20
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff fcab 	bl	8003fac <serialPrintln>
        for (int key = 0; key < 12; key++) {
 8004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004658:	3301      	adds	r3, #1
 800465a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800465c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465e:	2b0b      	cmp	r3, #11
 8004660:	ddb9      	ble.n	80045d6 <StartDefaultTask+0x16>
        }
        serialPrintln("\n\n");
 8004662:	4805      	ldr	r0, [pc, #20]	; (8004678 <StartDefaultTask+0xb8>)
 8004664:	f7ff fca2 	bl	8003fac <serialPrintln>
    for (;;) {
 8004668:	e7ae      	b.n	80045c8 <StartDefaultTask+0x8>
 800466a:	bf00      	nop
 800466c:	20000660 	.word	0x20000660
 8004670:	20000001 	.word	0x20000001
 8004674:	08012798 	.word	0x08012798
 8004678:	080127a0 	.word	0x080127a0

0800467c <scanKeysTask>:
    }
}

void scanKeysTask(void *argument)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08c      	sub	sp, #48	; 0x30
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
    const TickType_t xFrequency = 50 / portTICK_PERIOD_MS;
 8004684:	2332      	movs	r3, #50	; 0x32
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8004688:	f009 fc6e 	bl	800df68 <xTaskGetTickCount>
 800468c:	4603      	mov	r3, r0
 800468e:	61bb      	str	r3, [r7, #24]

    /* Infinite loop */
    for (;;) {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8004690:	f107 0318 	add.w	r3, r7, #24
 8004694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004696:	4618      	mov	r0, r3
 8004698:	f009 fa98 	bl	800dbcc <vTaskDelayUntil>

        setMuxIO();
 800469c:	f7ff fda6 	bl	80041ec <setMuxIO>
        uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 80046a0:	4b3b      	ldr	r3, [pc, #236]	; (8004790 <scanKeysTask+0x114>)
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t localKnobs = __atomic_load_n(&knobs, __ATOMIC_RELAXED);
 80046a6:	4b3b      	ldr	r3, [pc, #236]	; (8004794 <scanKeysTask+0x118>)
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	843b      	strh	r3, [r7, #32]

        allKeys[keyboard_position] = localKeys;
 80046ac:	4b3a      	ldr	r3, [pc, #232]	; (8004798 <scanKeysTask+0x11c>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	4619      	mov	r1, r3
 80046b4:	4a39      	ldr	r2, [pc, #228]	; (800479c <scanKeysTask+0x120>)
 80046b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046b8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        //
        //serialPrint("keys: ");
        //serialPrintln(key_s);
        //serialPrint("knobs: ");
        //serialPrintln(knobs_s);
        uint8_t keys_pressed = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        for (int t = 0; t < 12; t++){
 80046c2:	2300      	movs	r3, #0
 80046c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c6:	e024      	b.n	8004712 <scanKeysTask+0x96>
                bool pressed = ~localKeys & ( 1 << (t));
 80046c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046ca:	43da      	mvns	r2, r3
 80046cc:	2101      	movs	r1, #1
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	fa01 f303 	lsl.w	r3, r1, r3
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	bf14      	ite	ne
 80046da:	2301      	movne	r3, #1
 80046dc:	2300      	moveq	r3, #0
 80046de:	77fb      	strb	r3, [r7, #31]

                if (pressed) {
 80046e0:	7ffb      	ldrb	r3, [r7, #31]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00d      	beq.n	8004702 <scanKeysTask+0x86>
                        notesPressed[t] = keyNotes[t];
 80046e6:	4a2e      	ldr	r2, [pc, #184]	; (80047a0 <scanKeysTask+0x124>)
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046ee:	492d      	ldr	r1, [pc, #180]	; (80047a4 <scanKeysTask+0x128>)
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        keys_pressed += 1;
 80046f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046fa:	3301      	adds	r3, #1
 80046fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004700:	e004      	b.n	800470c <scanKeysTask+0x90>
                } else {
                        notesPressed[t] = '-';
 8004702:	4a28      	ldr	r2, [pc, #160]	; (80047a4 <scanKeysTask+0x128>)
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	212d      	movs	r1, #45	; 0x2d
 8004708:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int t = 0; t < 12; t++){
 800470c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470e:	3301      	adds	r3, #1
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	2b0b      	cmp	r3, #11
 8004716:	ddd7      	ble.n	80046c8 <scanKeysTask+0x4c>
                }
        }

        scanKnob(localKnobs, (uint16_t) prev_knobs, 3, 'v');
 8004718:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <scanKeysTask+0x12c>)
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b299      	uxth	r1, r3
 800471e:	8c38      	ldrh	r0, [r7, #32]
 8004720:	2376      	movs	r3, #118	; 0x76
 8004722:	2203      	movs	r2, #3
 8004724:	f7ff fe7e 	bl	8004424 <scanKnob>
        scanKnob(localKnobs, (uint16_t) prev_knobs, 2, 'o');
 8004728:	4b1f      	ldr	r3, [pc, #124]	; (80047a8 <scanKeysTask+0x12c>)
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b299      	uxth	r1, r3
 800472e:	8c38      	ldrh	r0, [r7, #32]
 8004730:	236f      	movs	r3, #111	; 0x6f
 8004732:	2202      	movs	r2, #2
 8004734:	f7ff fe76 	bl	8004424 <scanKnob>
        scanKnob(localKnobs, (uint16_t) prev_knobs, 1, 'w');
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <scanKeysTask+0x12c>)
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b299      	uxth	r1, r3
 800473e:	8c38      	ldrh	r0, [r7, #32]
 8004740:	2377      	movs	r3, #119	; 0x77
 8004742:	2201      	movs	r2, #1
 8004744:	f7ff fe6e 	bl	8004424 <scanKnob>

        // not working, how do we actually set volume ???
        if (!controller) {
 8004748:	4b18      	ldr	r3, [pc, #96]	; (80047ac <scanKeysTask+0x130>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	f083 0301 	eor.w	r3, r3, #1
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <scanKeysTask+0xe0>
        	volume = 0;
 8004756:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <scanKeysTask+0x134>)
 8004758:	2200      	movs	r2, #0
 800475a:	801a      	strh	r2, [r3, #0]
//        	volume = 0;
//    	}

        CanMsg_t TX;

        TX.ID = 0x123;
 800475c:	f240 1323 	movw	r3, #291	; 0x123
 8004760:	617b      	str	r3, [r7, #20]
        TX.Message[0] = 'K';
 8004762:	234b      	movs	r3, #75	; 0x4b
 8004764:	733b      	strb	r3, [r7, #12]
        TX.Message[1] = (uint8_t) (localKeys & 0x00FF);
 8004766:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004768:	b2db      	uxtb	r3, r3
 800476a:	737b      	strb	r3, [r7, #13]
        TX.Message[2] = (uint8_t) ((localKeys & 0xFF00) >> 8);
 800476c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	b29b      	uxth	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	73bb      	strb	r3, [r7, #14]
        TX.Message[3] = (uint8_t) keyboard_position;
 8004776:	4b08      	ldr	r3, [pc, #32]	; (8004798 <scanKeysTask+0x11c>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	73fb      	strb	r3, [r7, #15]

        osMessageQueuePut(msgOutQHandle, &TX, 0, 0);
 800477e:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <scanKeysTask+0x138>)
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	f107 010c 	add.w	r1, r7, #12
 8004786:	2300      	movs	r3, #0
 8004788:	2200      	movs	r2, #0
 800478a:	f007 fc0f 	bl	800bfac <osMessageQueuePut>
    for (;;) {
 800478e:	e77f      	b.n	8004690 <scanKeysTask+0x14>
 8004790:	2000000c 	.word	0x2000000c
 8004794:	2000000e 	.word	0x2000000e
 8004798:	2000031c 	.word	0x2000031c
 800479c:	20000660 	.word	0x20000660
 80047a0:	20000018 	.word	0x20000018
 80047a4:	20000048 	.word	0x20000048
 80047a8:	20000010 	.word	0x20000010
 80047ac:	20000630 	.word	0x20000630
 80047b0:	20000012 	.word	0x20000012
 80047b4:	20000314 	.word	0x20000314

080047b8 <displayUpdateTask>:

    }
}

void displayUpdateTask(void *argument)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b09c      	sub	sp, #112	; 0x70
 80047bc:	af04      	add	r7, sp, #16
 80047be:	6078      	str	r0, [r7, #4]

    const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
 80047c0:	2364      	movs	r3, #100	; 0x64
 80047c2:	657b      	str	r3, [r7, #84]	; 0x54
    TickType_t xLastWakeTime = xTaskGetTickCount();
 80047c4:	f009 fbd0 	bl	800df68 <xTaskGetTickCount>
 80047c8:	4603      	mov	r3, r0
 80047ca:	64fb      	str	r3, [r7, #76]	; 0x4c

    for (;;) {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80047cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80047d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047d2:	4618      	mov	r0, r3
 80047d4:	f009 f9fa 	bl	800dbcc <vTaskDelayUntil>

        osMutexAcquire(keysMutexHandle, osWaitForever);
 80047d8:	4b90      	ldr	r3, [pc, #576]	; (8004a1c <displayUpdateTask+0x264>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047e0:	4618      	mov	r0, r3
 80047e2:	f007 f9c7 	bl	800bb74 <osMutexAcquire>

        uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 80047e6:	4b8e      	ldr	r3, [pc, #568]	; (8004a20 <displayUpdateTask+0x268>)
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        osMutexRelease(keysMutexHandle);
 80047ee:	4b8b      	ldr	r3, [pc, #556]	; (8004a1c <displayUpdateTask+0x264>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f007 fa09 	bl	800bc0a <osMutexRelease>
        osMutexRelease(knobsMutexHandle);
 80047f8:	4b8a      	ldr	r3, [pc, #552]	; (8004a24 <displayUpdateTask+0x26c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f007 fa04 	bl	800bc0a <osMutexRelease>

        u8g2_ClearBuffer(&u8g2);
 8004802:	4889      	ldr	r0, [pc, #548]	; (8004a28 <displayUpdateTask+0x270>)
 8004804:	f7fc fc65 	bl	80010d2 <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_new3x9pixelfont_tr);
 8004808:	4988      	ldr	r1, [pc, #544]	; (8004a2c <displayUpdateTask+0x274>)
 800480a:	4887      	ldr	r0, [pc, #540]	; (8004a28 <displayUpdateTask+0x270>)
 800480c:	f7fd fcbe 	bl	800218c <u8g2_SetFont>

        //PRINTING THE NOTES PRESSED
        uint8_t string_size = 2;
 8004810:	2302      	movs	r3, #2
 8004812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        uint8_t space = 3;
 8004816:	2303      	movs	r3, #3
 8004818:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
//        char o_s[16];
//        sprintf(o_s, "|%x|", controller);
//        u8g2_DrawStr(&u8g2, string_size, 7, o_s);
        if (controller){
 800481c:	4b84      	ldr	r3, [pc, #528]	; (8004a30 <displayUpdateTask+0x278>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <displayUpdateTask+0x7e>
        	u8g2_DrawStr(&u8g2, string_size, 7, "|rcv|");
 8004824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004828:	b299      	uxth	r1, r3
 800482a:	4b82      	ldr	r3, [pc, #520]	; (8004a34 <displayUpdateTask+0x27c>)
 800482c:	2207      	movs	r2, #7
 800482e:	487e      	ldr	r0, [pc, #504]	; (8004a28 <displayUpdateTask+0x270>)
 8004830:	f7fd fbf0 	bl	8002014 <u8g2_DrawStr>
 8004834:	e007      	b.n	8004846 <displayUpdateTask+0x8e>
        } else {
        	u8g2_DrawStr(&u8g2, string_size, 7, "|snd|");
 8004836:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800483a:	b299      	uxth	r1, r3
 800483c:	4b7e      	ldr	r3, [pc, #504]	; (8004a38 <displayUpdateTask+0x280>)
 800483e:	2207      	movs	r2, #7
 8004840:	4879      	ldr	r0, [pc, #484]	; (8004a28 <displayUpdateTask+0x270>)
 8004842:	f7fd fbe7 	bl	8002014 <u8g2_DrawStr>
        }

        if (!controller){
 8004846:	4b7a      	ldr	r3, [pc, #488]	; (8004a30 <displayUpdateTask+0x278>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	f083 0301 	eor.w	r3, r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d019      	beq.n	8004888 <displayUpdateTask+0xd0>
        	u8g2_SetDrawColor(&u8g2, 1);
 8004854:	2101      	movs	r1, #1
 8004856:	4874      	ldr	r0, [pc, #464]	; (8004a28 <displayUpdateTask+0x270>)
 8004858:	f7fd fe6a 	bl	8002530 <u8g2_SetDrawColor>
        	u8g2_SetBitmapMode(&u8g2, 0);
 800485c:	2100      	movs	r1, #0
 800485e:	4872      	ldr	r0, [pc, #456]	; (8004a28 <displayUpdateTask+0x270>)
 8004860:	f7fc fb94 	bl	8000f8c <u8g2_SetBitmapMode>
        	u8g2_DrawButtonUTF8(&u8g2, 35, 16, U8G2_BTN_INV, u8g2_GetDisplayWidth(&u8g2)-35*2,  2,  1, "Knob 0 to receive" );
 8004864:	4b70      	ldr	r3, [pc, #448]	; (8004a28 <displayUpdateTask+0x270>)
 8004866:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800486a:	3b46      	subs	r3, #70	; 0x46
 800486c:	b29b      	uxth	r3, r3
 800486e:	4a73      	ldr	r2, [pc, #460]	; (8004a3c <displayUpdateTask+0x284>)
 8004870:	9203      	str	r2, [sp, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	9202      	str	r2, [sp, #8]
 8004876:	2202      	movs	r2, #2
 8004878:	9201      	str	r2, [sp, #4]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	2320      	movs	r3, #32
 800487e:	2210      	movs	r2, #16
 8004880:	2123      	movs	r1, #35	; 0x23
 8004882:	4869      	ldr	r0, [pc, #420]	; (8004a28 <displayUpdateTask+0x270>)
 8004884:	f7fc fdf2 	bl	800146c <u8g2_DrawButtonUTF8>
        }
        string_size += 19;
 8004888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800488c:	3313      	adds	r3, #19
 800488e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

        for (int t = 0; t < 12; t++){
 8004892:	2300      	movs	r3, #0
 8004894:	65bb      	str	r3, [r7, #88]	; 0x58
 8004896:	e029      	b.n	80048ec <displayUpdateTask+0x134>
                if (notesPressed[t] != '-') {
 8004898:	4a69      	ldr	r2, [pc, #420]	; (8004a40 <displayUpdateTask+0x288>)
 800489a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800489c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a0:	2b2d      	cmp	r3, #45	; 0x2d
 80048a2:	d020      	beq.n	80048e6 <displayUpdateTask+0x12e>
                        uint8_t w = u8g2_GetStrWidth(&u8g2, keyNotes[t]);
 80048a4:	4a67      	ldr	r2, [pc, #412]	; (8004a44 <displayUpdateTask+0x28c>)
 80048a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ac:	4619      	mov	r1, r3
 80048ae:	485e      	ldr	r0, [pc, #376]	; (8004a28 <displayUpdateTask+0x270>)
 80048b0:	f7fd fcea 	bl	8002288 <u8g2_GetStrWidth>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                        u8g2_DrawStr(&u8g2, string_size, 7, notesPressed[t]);
 80048ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048be:	b299      	uxth	r1, r3
 80048c0:	4a5f      	ldr	r2, [pc, #380]	; (8004a40 <displayUpdateTask+0x288>)
 80048c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c8:	2207      	movs	r2, #7
 80048ca:	4857      	ldr	r0, [pc, #348]	; (8004a28 <displayUpdateTask+0x270>)
 80048cc:	f7fd fba2 	bl	8002014 <u8g2_DrawStr>
                        string_size += w + space;
 80048d0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80048d4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80048d8:	4413      	add	r3, r2
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048e0:	4413      	add	r3, r2
 80048e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        for (int t = 0; t < 12; t++){
 80048e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e8:	3301      	adds	r3, #1
 80048ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80048ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048ee:	2b0b      	cmp	r3, #11
 80048f0:	ddd2      	ble.n	8004898 <displayUpdateTask+0xe0>
                }
        }
        //uint32_t localDMAkeys2 = __atomic_load_n(&DMAkeys2, __ATOMIC_RELAXED);

        char buf[20];
        sprintf(buf, "%x", RX.Message[1]);
 80048f2:	4b55      	ldr	r3, [pc, #340]	; (8004a48 <displayUpdateTask+0x290>)
 80048f4:	785b      	ldrb	r3, [r3, #1]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048fc:	4953      	ldr	r1, [pc, #332]	; (8004a4c <displayUpdateTask+0x294>)
 80048fe:	4618      	mov	r0, r3
 8004900:	f00b fa0c 	bl	800fd1c <siprintf>
        //serialPrintln(buf);

        //PRINTING VOLUME
        u8g2_DrawButtonUTF8(&u8g2, 105, 30, U8G2_BTN_BW1, 18,  4,  2, "Vol:");
 8004904:	4b52      	ldr	r3, [pc, #328]	; (8004a50 <displayUpdateTask+0x298>)
 8004906:	9303      	str	r3, [sp, #12]
 8004908:	2302      	movs	r3, #2
 800490a:	9302      	str	r3, [sp, #8]
 800490c:	2304      	movs	r3, #4
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	2312      	movs	r3, #18
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2301      	movs	r3, #1
 8004916:	221e      	movs	r2, #30
 8004918:	2169      	movs	r1, #105	; 0x69
 800491a:	4843      	ldr	r0, [pc, #268]	; (8004a28 <displayUpdateTask+0x270>)
 800491c:	f7fc fda6 	bl	800146c <u8g2_DrawButtonUTF8>
        char volume_s[16];
        sprintf(volume_s, "%x", volume);
 8004920:	4b4c      	ldr	r3, [pc, #304]	; (8004a54 <displayUpdateTask+0x29c>)
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800492a:	4948      	ldr	r1, [pc, #288]	; (8004a4c <displayUpdateTask+0x294>)
 800492c:	4618      	mov	r0, r3
 800492e:	f00b f9f5 	bl	800fd1c <siprintf>
        u8g2_DrawStr(&u8g2, 118, 30, volume_s);
 8004932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004936:	221e      	movs	r2, #30
 8004938:	2176      	movs	r1, #118	; 0x76
 800493a:	483b      	ldr	r0, [pc, #236]	; (8004a28 <displayUpdateTask+0x270>)
 800493c:	f7fd fb6a 	bl	8002014 <u8g2_DrawStr>

        //PRINTING Octave
        u8g2_DrawButtonUTF8(&u8g2, 75, 30, U8G2_BTN_BW1, 18,  4,  2, "Oct:");
 8004940:	4b45      	ldr	r3, [pc, #276]	; (8004a58 <displayUpdateTask+0x2a0>)
 8004942:	9303      	str	r3, [sp, #12]
 8004944:	2302      	movs	r3, #2
 8004946:	9302      	str	r3, [sp, #8]
 8004948:	2304      	movs	r3, #4
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	2312      	movs	r3, #18
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	2301      	movs	r3, #1
 8004952:	221e      	movs	r2, #30
 8004954:	214b      	movs	r1, #75	; 0x4b
 8004956:	4834      	ldr	r0, [pc, #208]	; (8004a28 <displayUpdateTask+0x270>)
 8004958:	f7fc fd88 	bl	800146c <u8g2_DrawButtonUTF8>
        char s[16];
        sprintf(s, "%x", octave);
 800495c:	4b3f      	ldr	r3, [pc, #252]	; (8004a5c <displayUpdateTask+0x2a4>)
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	f107 0318 	add.w	r3, r7, #24
 8004966:	4939      	ldr	r1, [pc, #228]	; (8004a4c <displayUpdateTask+0x294>)
 8004968:	4618      	mov	r0, r3
 800496a:	f00b f9d7 	bl	800fd1c <siprintf>
        u8g2_DrawStr(&u8g2, 89, 30, s);
 800496e:	f107 0318 	add.w	r3, r7, #24
 8004972:	221e      	movs	r2, #30
 8004974:	2159      	movs	r1, #89	; 0x59
 8004976:	482c      	ldr	r0, [pc, #176]	; (8004a28 <displayUpdateTask+0x270>)
 8004978:	f7fd fb4c 	bl	8002014 <u8g2_DrawStr>

        //PRINTING WAVE_FORM
        u8g2_DrawButtonUTF8(&u8g2, 33, 30, 0, 30,  4,  3, "Wave:");
 800497c:	4b38      	ldr	r3, [pc, #224]	; (8004a60 <displayUpdateTask+0x2a8>)
 800497e:	9303      	str	r3, [sp, #12]
 8004980:	2303      	movs	r3, #3
 8004982:	9302      	str	r3, [sp, #8]
 8004984:	2304      	movs	r3, #4
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	231e      	movs	r3, #30
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	2300      	movs	r3, #0
 800498e:	221e      	movs	r2, #30
 8004990:	2121      	movs	r1, #33	; 0x21
 8004992:	4825      	ldr	r0, [pc, #148]	; (8004a28 <displayUpdateTask+0x270>)
 8004994:	f7fc fd6a 	bl	800146c <u8g2_DrawButtonUTF8>
        char wave_s[16];
        sprintf(wave_s, "%x", output_wavetype);
 8004998:	4b32      	ldr	r3, [pc, #200]	; (8004a64 <displayUpdateTask+0x2ac>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	f107 0308 	add.w	r3, r7, #8
 80049a2:	492a      	ldr	r1, [pc, #168]	; (8004a4c <displayUpdateTask+0x294>)
 80049a4:	4618      	mov	r0, r3
 80049a6:	f00b f9b9 	bl	800fd1c <siprintf>
        //u8g2_DrawStr(&u8g2, 61, 30, wave_s);
        display_wave(&u8g2, 51, 30);
 80049aa:	221e      	movs	r2, #30
 80049ac:	2133      	movs	r1, #51	; 0x33
 80049ae:	481e      	ldr	r0, [pc, #120]	; (8004a28 <displayUpdateTask+0x270>)
 80049b0:	f001 f9a6 	bl	8005d00 <display_wave>

        //PRINTING PET
        u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
 80049b4:	492c      	ldr	r1, [pc, #176]	; (8004a68 <displayUpdateTask+0x2b0>)
 80049b6:	481c      	ldr	r0, [pc, #112]	; (8004a28 <displayUpdateTask+0x270>)
 80049b8:	f7fd fbe8 	bl	800218c <u8g2_SetFont>
        if (localKeys == 0x0FFF) {
 80049bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80049c0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d10a      	bne.n	80049de <displayUpdateTask+0x226>

                //u8g2_DrawStr(&u8g2, 70, 10, "- ^_^ -");
                u8g2_SetFont(&u8g2, u8g2_font_streamline_all_t);
 80049c8:	4928      	ldr	r1, [pc, #160]	; (8004a6c <displayUpdateTask+0x2b4>)
 80049ca:	4817      	ldr	r0, [pc, #92]	; (8004a28 <displayUpdateTask+0x270>)
 80049cc:	f7fd fbde 	bl	800218c <u8g2_SetFont>
                u8g2_DrawUTF8(&u8g2, 2, 30, " \u029a");
 80049d0:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <displayUpdateTask+0x2b8>)
 80049d2:	221e      	movs	r2, #30
 80049d4:	2102      	movs	r1, #2
 80049d6:	4814      	ldr	r0, [pc, #80]	; (8004a28 <displayUpdateTask+0x270>)
 80049d8:	f7fd fb36 	bl	8002048 <u8g2_DrawUTF8>
 80049dc:	e019      	b.n	8004a12 <displayUpdateTask+0x25a>

        } else {
                //u8g2_DrawStr(&u8g2, 70, 10, "- ^0^ -");
                u8g2_SetFont(&u8g2, u8g2_font_streamline_all_t); //21x21
 80049de:	4923      	ldr	r1, [pc, #140]	; (8004a6c <displayUpdateTask+0x2b4>)
 80049e0:	4811      	ldr	r0, [pc, #68]	; (8004a28 <displayUpdateTask+0x270>)
 80049e2:	f7fd fbd3 	bl	800218c <u8g2_SetFont>
                u8g2_DrawUTF8(&u8g2, 2, 30, " \u0299");
 80049e6:	4b23      	ldr	r3, [pc, #140]	; (8004a74 <displayUpdateTask+0x2bc>)
 80049e8:	221e      	movs	r2, #30
 80049ea:	2102      	movs	r1, #2
 80049ec:	480e      	ldr	r0, [pc, #56]	; (8004a28 <displayUpdateTask+0x270>)
 80049ee:	f7fd fb2b 	bl	8002048 <u8g2_DrawUTF8>
                u8g2_SetFont(&u8g2, u8g2_font_unifont_t_0_76); //16x16
 80049f2:	4921      	ldr	r1, [pc, #132]	; (8004a78 <displayUpdateTask+0x2c0>)
 80049f4:	480c      	ldr	r0, [pc, #48]	; (8004a28 <displayUpdateTask+0x270>)
 80049f6:	f7fd fbc9 	bl	800218c <u8g2_SetFont>
                u8g2_DrawUTF8(&u8g2, 16, 27, " \u266a");
 80049fa:	4b20      	ldr	r3, [pc, #128]	; (8004a7c <displayUpdateTask+0x2c4>)
 80049fc:	221b      	movs	r2, #27
 80049fe:	2110      	movs	r1, #16
 8004a00:	4809      	ldr	r0, [pc, #36]	; (8004a28 <displayUpdateTask+0x270>)
 8004a02:	f7fd fb21 	bl	8002048 <u8g2_DrawUTF8>
                u8g2_DrawUTF8(&u8g2, 13, 19, " \u266a");
 8004a06:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <displayUpdateTask+0x2c4>)
 8004a08:	2213      	movs	r2, #19
 8004a0a:	210d      	movs	r1, #13
 8004a0c:	4806      	ldr	r0, [pc, #24]	; (8004a28 <displayUpdateTask+0x270>)
 8004a0e:	f7fd fb1b 	bl	8002048 <u8g2_DrawUTF8>
        }

        u8g2_SendBuffer(&u8g2);
 8004a12:	4805      	ldr	r0, [pc, #20]	; (8004a28 <displayUpdateTask+0x270>)
 8004a14:	f7fc fbd0 	bl	80011b8 <u8g2_SendBuffer>
    for (;;) {
 8004a18:	e6d8      	b.n	80047cc <displayUpdateTask+0x14>
 8004a1a:	bf00      	nop
 8004a1c:	20000654 	.word	0x20000654
 8004a20:	2000000c 	.word	0x2000000c
 8004a24:	20000658 	.word	0x20000658
 8004a28:	20000670 	.word	0x20000670
 8004a2c:	0801dde8 	.word	0x0801dde8
 8004a30:	20000630 	.word	0x20000630
 8004a34:	080127a4 	.word	0x080127a4
 8004a38:	080127ac 	.word	0x080127ac
 8004a3c:	080127b4 	.word	0x080127b4
 8004a40:	20000048 	.word	0x20000048
 8004a44:	20000018 	.word	0x20000018
 8004a48:	20000704 	.word	0x20000704
 8004a4c:	080127c8 	.word	0x080127c8
 8004a50:	080127cc 	.word	0x080127cc
 8004a54:	20000012 	.word	0x20000012
 8004a58:	080127d4 	.word	0x080127d4
 8004a5c:	20000014 	.word	0x20000014
 8004a60:	080127dc 	.word	0x080127dc
 8004a64:	2000007c 	.word	0x2000007c
 8004a68:	0801f0d0 	.word	0x0801f0d0
 8004a6c:	08013e48 	.word	0x08013e48
 8004a70:	080127e4 	.word	0x080127e4
 8004a74:	080127e8 	.word	0x080127e8
 8004a78:	0801e0f4 	.word	0x0801e0f4
 8004a7c:	080127ec 	.word	0x080127ec

08004a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a04      	ldr	r2, [pc, #16]	; (8004aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8004a92:	f001 facd 	bl	8006030 <HAL_IncTick>
	}
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40014400 	.word	0x40014400

08004aa4 <Error_Handler>:

//This function is executed in case of error occurrence.
void Error_Handler(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004aa8:	b672      	cpsid	i
}
 8004aaa:	bf00      	nop
    __disable_irq();
    while (1) {
 8004aac:	e7fe      	b.n	8004aac <Error_Handler+0x8>
	...

08004ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab6:	4b11      	ldr	r3, [pc, #68]	; (8004afc <HAL_MspInit+0x4c>)
 8004ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aba:	4a10      	ldr	r2, [pc, #64]	; (8004afc <HAL_MspInit+0x4c>)
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	6613      	str	r3, [r2, #96]	; 0x60
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	; (8004afc <HAL_MspInit+0x4c>)
 8004ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ace:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <HAL_MspInit+0x4c>)
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad2:	4a0a      	ldr	r2, [pc, #40]	; (8004afc <HAL_MspInit+0x4c>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8004ada:	4b08      	ldr	r3, [pc, #32]	; (8004afc <HAL_MspInit+0x4c>)
 8004adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	210f      	movs	r1, #15
 8004aea:	f06f 0001 	mvn.w	r0, #1
 8004aee:	f003 f8db 	bl	8007ca8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004af2:	bf00      	nop
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000

08004b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b09e      	sub	sp, #120	; 0x78
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	605a      	str	r2, [r3, #4]
 8004b12:	609a      	str	r2, [r3, #8]
 8004b14:	60da      	str	r2, [r3, #12]
 8004b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b18:	f107 0310 	add.w	r3, r7, #16
 8004b1c:	2254      	movs	r2, #84	; 0x54
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f00a ffe5 	bl	800faf0 <memset>
  if(hadc->Instance==ADC1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a25      	ldr	r2, [pc, #148]	; (8004bc0 <HAL_ADC_MspInit+0xc0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d143      	bne.n	8004bb8 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004b30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004b36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b3a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004b40:	2301      	movs	r3, #1
 8004b42:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8004b44:	2310      	movs	r3, #16
 8004b46:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004b48:	2307      	movs	r3, #7
 8004b4a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004b50:	2302      	movs	r3, #2
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b5a:	f107 0310 	add.w	r3, r7, #16
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f005 fa80 	bl	800a064 <HAL_RCCEx_PeriphCLKConfig>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8004b6a:	f7ff ff9b 	bl	8004aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004b6e:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <HAL_ADC_MspInit+0xc4>)
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <HAL_ADC_MspInit+0xc4>)
 8004b74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_ADC_MspInit+0xc4>)
 8004b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_ADC_MspInit+0xc4>)
 8004b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8a:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <HAL_ADC_MspInit+0xc4>)
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <HAL_ADC_MspInit+0xc4>)
 8004b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = JOYY_Pin|JOYX_Pin;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004ba2:	230b      	movs	r3, #11
 8004ba4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004baa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bb4:	f003 fda4 	bl	8008700 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004bb8:	bf00      	nop
 8004bba:	3778      	adds	r7, #120	; 0x78
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	50040000 	.word	0x50040000
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	; 0x28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd0:	f107 0314 	add.w	r3, r7, #20
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	605a      	str	r2, [r3, #4]
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a29      	ldr	r2, [pc, #164]	; (8004c8c <HAL_CAN_MspInit+0xc4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d14b      	bne.n	8004c82 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004bea:	4b29      	ldr	r3, [pc, #164]	; (8004c90 <HAL_CAN_MspInit+0xc8>)
 8004bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bee:	4a28      	ldr	r2, [pc, #160]	; (8004c90 <HAL_CAN_MspInit+0xc8>)
 8004bf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf6:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <HAL_CAN_MspInit+0xc8>)
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c02:	4b23      	ldr	r3, [pc, #140]	; (8004c90 <HAL_CAN_MspInit+0xc8>)
 8004c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c06:	4a22      	ldr	r2, [pc, #136]	; (8004c90 <HAL_CAN_MspInit+0xc8>)
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c0e:	4b20      	ldr	r3, [pc, #128]	; (8004c90 <HAL_CAN_MspInit+0xc8>)
 8004c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004c1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c20:	2302      	movs	r3, #2
 8004c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c24:	2301      	movs	r3, #1
 8004c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004c2c:	2309      	movs	r3, #9
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c30:	f107 0314 	add.w	r3, r7, #20
 8004c34:	4619      	mov	r1, r3
 8004c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c3a:	f003 fd61 	bl	8008700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c44:	2302      	movs	r3, #2
 8004c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004c50:	2309      	movs	r3, #9
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c54:	f107 0314 	add.w	r3, r7, #20
 8004c58:	4619      	mov	r1, r3
 8004c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c5e:	f003 fd4f 	bl	8008700 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 8004c62:	2200      	movs	r2, #0
 8004c64:	2106      	movs	r1, #6
 8004c66:	2013      	movs	r0, #19
 8004c68:	f003 f81e 	bl	8007ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004c6c:	2013      	movs	r0, #19
 8004c6e:	f003 f837 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 8004c72:	2200      	movs	r2, #0
 8004c74:	2106      	movs	r1, #6
 8004c76:	2014      	movs	r0, #20
 8004c78:	f003 f816 	bl	8007ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004c7c:	2014      	movs	r0, #20
 8004c7e:	f003 f82f 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004c82:	bf00      	nop
 8004c84:	3728      	adds	r7, #40	; 0x28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40006400 	.word	0x40006400
 8004c90:	40021000 	.word	0x40021000

08004c94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	; 0x28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c9c:	f107 0314 	add.w	r3, r7, #20
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	609a      	str	r2, [r3, #8]
 8004ca8:	60da      	str	r2, [r3, #12]
 8004caa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a46      	ldr	r2, [pc, #280]	; (8004dcc <HAL_DAC_MspInit+0x138>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	f040 8085 	bne.w	8004dc2 <HAL_DAC_MspInit+0x12e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004cb8:	4b45      	ldr	r3, [pc, #276]	; (8004dd0 <HAL_DAC_MspInit+0x13c>)
 8004cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbc:	4a44      	ldr	r2, [pc, #272]	; (8004dd0 <HAL_DAC_MspInit+0x13c>)
 8004cbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc4:	4b42      	ldr	r3, [pc, #264]	; (8004dd0 <HAL_DAC_MspInit+0x13c>)
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd0:	4b3f      	ldr	r3, [pc, #252]	; (8004dd0 <HAL_DAC_MspInit+0x13c>)
 8004cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd4:	4a3e      	ldr	r2, [pc, #248]	; (8004dd0 <HAL_DAC_MspInit+0x13c>)
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cdc:	4b3c      	ldr	r3, [pc, #240]	; (8004dd0 <HAL_DAC_MspInit+0x13c>)
 8004cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = OUTR_Pin|OUTL_Pin;
 8004ce8:	2330      	movs	r3, #48	; 0x30
 8004cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cec:	2303      	movs	r3, #3
 8004cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cfe:	f003 fcff 	bl	8008700 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8004d02:	4b34      	ldr	r3, [pc, #208]	; (8004dd4 <HAL_DAC_MspInit+0x140>)
 8004d04:	4a34      	ldr	r2, [pc, #208]	; (8004dd8 <HAL_DAC_MspInit+0x144>)
 8004d06:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8004d08:	4b32      	ldr	r3, [pc, #200]	; (8004dd4 <HAL_DAC_MspInit+0x140>)
 8004d0a:	2206      	movs	r2, #6
 8004d0c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <HAL_DAC_MspInit+0x140>)
 8004d10:	2210      	movs	r2, #16
 8004d12:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d14:	4b2f      	ldr	r3, [pc, #188]	; (8004dd4 <HAL_DAC_MspInit+0x140>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004d1a:	4b2e      	ldr	r3, [pc, #184]	; (8004dd4 <HAL_DAC_MspInit+0x140>)
 8004d1c:	2280      	movs	r2, #128	; 0x80
 8004d1e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d20:	4b2c      	ldr	r3, [pc, #176]	; (8004dd4 <HAL_DAC_MspInit+0x140>)
 8004d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d26:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d28:	4b2a      	ldr	r3, [pc, #168]	; (8004dd4 <HAL_DAC_MspInit+0x140>)
 8004d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d2e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8004d30:	4b28      	ldr	r3, [pc, #160]	; (8004dd4 <HAL_DAC_MspInit+0x140>)
 8004d32:	2220      	movs	r2, #32
 8004d34:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8004d36:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <HAL_DAC_MspInit+0x140>)
 8004d38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8004d3e:	4825      	ldr	r0, [pc, #148]	; (8004dd4 <HAL_DAC_MspInit+0x140>)
 8004d40:	f003 fae6 	bl	8008310 <HAL_DMA_Init>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_DAC_MspInit+0xba>
    {
      Error_Handler();
 8004d4a:	f7ff feab 	bl	8004aa4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a20      	ldr	r2, [pc, #128]	; (8004dd4 <HAL_DAC_MspInit+0x140>)
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_DAC_MspInit+0x140>)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8004d5a:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <HAL_DAC_MspInit+0x148>)
 8004d5c:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <HAL_DAC_MspInit+0x14c>)
 8004d5e:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8004d60:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <HAL_DAC_MspInit+0x148>)
 8004d62:	2205      	movs	r2, #5
 8004d64:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d66:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <HAL_DAC_MspInit+0x148>)
 8004d68:	2210      	movs	r2, #16
 8004d6a:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <HAL_DAC_MspInit+0x148>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004d72:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <HAL_DAC_MspInit+0x148>)
 8004d74:	2280      	movs	r2, #128	; 0x80
 8004d76:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d78:	4b18      	ldr	r3, [pc, #96]	; (8004ddc <HAL_DAC_MspInit+0x148>)
 8004d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d7e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d80:	4b16      	ldr	r3, [pc, #88]	; (8004ddc <HAL_DAC_MspInit+0x148>)
 8004d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d86:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8004d88:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <HAL_DAC_MspInit+0x148>)
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8004d8e:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <HAL_DAC_MspInit+0x148>)
 8004d90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8004d96:	4811      	ldr	r0, [pc, #68]	; (8004ddc <HAL_DAC_MspInit+0x148>)
 8004d98:	f003 faba 	bl	8008310 <HAL_DMA_Init>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_DAC_MspInit+0x112>
    {
      Error_Handler();
 8004da2:	f7ff fe7f 	bl	8004aa4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a0c      	ldr	r2, [pc, #48]	; (8004ddc <HAL_DAC_MspInit+0x148>)
 8004daa:	60da      	str	r2, [r3, #12]
 8004dac:	4a0b      	ldr	r2, [pc, #44]	; (8004ddc <HAL_DAC_MspInit+0x148>)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004db2:	2200      	movs	r2, #0
 8004db4:	2105      	movs	r1, #5
 8004db6:	2036      	movs	r0, #54	; 0x36
 8004db8:	f002 ff76 	bl	8007ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004dbc:	2036      	movs	r0, #54	; 0x36
 8004dbe:	f002 ff8f 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8004dc2:	bf00      	nop
 8004dc4:	3728      	adds	r7, #40	; 0x28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40007400 	.word	0x40007400
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	200003c0 	.word	0x200003c0
 8004dd8:	40020030 	.word	0x40020030
 8004ddc:	20000408 	.word	0x20000408
 8004de0:	40020044 	.word	0x40020044

08004de4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b09e      	sub	sp, #120	; 0x78
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	609a      	str	r2, [r3, #8]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004dfc:	f107 0310 	add.w	r3, r7, #16
 8004e00:	2254      	movs	r2, #84	; 0x54
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f00a fe73 	bl	800faf0 <memset>
  if(hi2c->Instance==I2C1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <HAL_I2C_MspInit+0xa4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d135      	bne.n	8004e80 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004e14:	2340      	movs	r3, #64	; 0x40
 8004e16:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e1c:	f107 0310 	add.w	r3, r7, #16
 8004e20:	4618      	mov	r0, r3
 8004e22:	f005 f91f 	bl	800a064 <HAL_RCCEx_PeriphCLKConfig>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004e2c:	f7ff fe3a 	bl	8004aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e30:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <HAL_I2C_MspInit+0xa8>)
 8004e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e34:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <HAL_I2C_MspInit+0xa8>)
 8004e36:	f043 0302 	orr.w	r3, r3, #2
 8004e3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e3c:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <HAL_I2C_MspInit+0xa8>)
 8004e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e48:	23c0      	movs	r3, #192	; 0xc0
 8004e4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e4c:	2312      	movs	r3, #18
 8004e4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e54:	2303      	movs	r3, #3
 8004e56:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e58:	2304      	movs	r3, #4
 8004e5a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004e60:	4619      	mov	r1, r3
 8004e62:	480b      	ldr	r0, [pc, #44]	; (8004e90 <HAL_I2C_MspInit+0xac>)
 8004e64:	f003 fc4c 	bl	8008700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e68:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <HAL_I2C_MspInit+0xa8>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6c:	4a07      	ldr	r2, [pc, #28]	; (8004e8c <HAL_I2C_MspInit+0xa8>)
 8004e6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e72:	6593      	str	r3, [r2, #88]	; 0x58
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_I2C_MspInit+0xa8>)
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004e80:	bf00      	nop
 8004e82:	3778      	adds	r7, #120	; 0x78
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40005400 	.word	0x40005400
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	48000400 	.word	0x48000400

08004e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a16      	ldr	r2, [pc, #88]	; (8004efc <HAL_TIM_Base_MspInit+0x68>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d114      	bne.n	8004ed0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004ea6:	4b16      	ldr	r3, [pc, #88]	; (8004f00 <HAL_TIM_Base_MspInit+0x6c>)
 8004ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eaa:	4a15      	ldr	r2, [pc, #84]	; (8004f00 <HAL_TIM_Base_MspInit+0x6c>)
 8004eac:	f043 0310 	orr.w	r3, r3, #16
 8004eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8004eb2:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <HAL_TIM_Base_MspInit+0x6c>)
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2105      	movs	r1, #5
 8004ec2:	2036      	movs	r0, #54	; 0x36
 8004ec4:	f002 fef0 	bl	8007ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ec8:	2036      	movs	r0, #54	; 0x36
 8004eca:	f002 ff09 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004ece:	e010      	b.n	8004ef2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a0b      	ldr	r2, [pc, #44]	; (8004f04 <HAL_TIM_Base_MspInit+0x70>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d10b      	bne.n	8004ef2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004eda:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <HAL_TIM_Base_MspInit+0x6c>)
 8004edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ede:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <HAL_TIM_Base_MspInit+0x6c>)
 8004ee0:	f043 0320 	orr.w	r3, r3, #32
 8004ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ee6:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <HAL_TIM_Base_MspInit+0x6c>)
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40001000 	.word	0x40001000
 8004f00:	40021000 	.word	0x40021000
 8004f04:	40001400 	.word	0x40001400

08004f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b09e      	sub	sp, #120	; 0x78
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	609a      	str	r2, [r3, #8]
 8004f1c:	60da      	str	r2, [r3, #12]
 8004f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f20:	f107 0310 	add.w	r3, r7, #16
 8004f24:	2254      	movs	r2, #84	; 0x54
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f00a fde1 	bl	800faf0 <memset>
  if(huart->Instance==USART2)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a28      	ldr	r2, [pc, #160]	; (8004fd4 <HAL_UART_MspInit+0xcc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d148      	bne.n	8004fca <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f40:	f107 0310 	add.w	r3, r7, #16
 8004f44:	4618      	mov	r0, r3
 8004f46:	f005 f88d 	bl	800a064 <HAL_RCCEx_PeriphCLKConfig>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004f50:	f7ff fda8 	bl	8004aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f54:	4b20      	ldr	r3, [pc, #128]	; (8004fd8 <HAL_UART_MspInit+0xd0>)
 8004f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f58:	4a1f      	ldr	r2, [pc, #124]	; (8004fd8 <HAL_UART_MspInit+0xd0>)
 8004f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f60:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <HAL_UART_MspInit+0xd0>)
 8004f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <HAL_UART_MspInit+0xd0>)
 8004f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f70:	4a19      	ldr	r2, [pc, #100]	; (8004fd8 <HAL_UART_MspInit+0xd0>)
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f78:	4b17      	ldr	r3, [pc, #92]	; (8004fd8 <HAL_UART_MspInit+0xd0>)
 8004f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f84:	2304      	movs	r3, #4
 8004f86:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f90:	2303      	movs	r3, #3
 8004f92:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f94:	2307      	movs	r3, #7
 8004f96:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fa2:	f003 fbad 	bl	8008700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004faa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fac:	2302      	movs	r3, #2
 8004fae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fc6:	f003 fb9b 	bl	8008700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004fca:	bf00      	nop
 8004fcc:	3778      	adds	r7, #120	; 0x78
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40004400 	.word	0x40004400
 8004fd8:	40021000 	.word	0x40021000

08004fdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08c      	sub	sp, #48	; 0x30
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8004fea:	4b2e      	ldr	r3, [pc, #184]	; (80050a4 <HAL_InitTick+0xc8>)
 8004fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fee:	4a2d      	ldr	r2, [pc, #180]	; (80050a4 <HAL_InitTick+0xc8>)
 8004ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8004ff6:	4b2b      	ldr	r3, [pc, #172]	; (80050a4 <HAL_InitTick+0xc8>)
 8004ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffe:	60bb      	str	r3, [r7, #8]
 8005000:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005002:	f107 020c 	add.w	r2, r7, #12
 8005006:	f107 0310 	add.w	r3, r7, #16
 800500a:	4611      	mov	r1, r2
 800500c:	4618      	mov	r0, r3
 800500e:	f004 ff97 	bl	8009f40 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005012:	f004 ff7f 	bl	8009f14 <HAL_RCC_GetPCLK2Freq>
 8005016:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	4a23      	ldr	r2, [pc, #140]	; (80050a8 <HAL_InitTick+0xcc>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	0c9b      	lsrs	r3, r3, #18
 8005022:	3b01      	subs	r3, #1
 8005024:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8005026:	4b21      	ldr	r3, [pc, #132]	; (80050ac <HAL_InitTick+0xd0>)
 8005028:	4a21      	ldr	r2, [pc, #132]	; (80050b0 <HAL_InitTick+0xd4>)
 800502a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800502c:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <HAL_InitTick+0xd0>)
 800502e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005032:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8005034:	4a1d      	ldr	r2, [pc, #116]	; (80050ac <HAL_InitTick+0xd0>)
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800503a:	4b1c      	ldr	r3, [pc, #112]	; (80050ac <HAL_InitTick+0xd0>)
 800503c:	2200      	movs	r2, #0
 800503e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <HAL_InitTick+0xd0>)
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005046:	4b19      	ldr	r3, [pc, #100]	; (80050ac <HAL_InitTick+0xd0>)
 8005048:	2200      	movs	r2, #0
 800504a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 800504c:	4817      	ldr	r0, [pc, #92]	; (80050ac <HAL_InitTick+0xd0>)
 800504e:	f005 fb01 	bl	800a654 <HAL_TIM_Base_Init>
 8005052:	4603      	mov	r3, r0
 8005054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005058:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800505c:	2b00      	cmp	r3, #0
 800505e:	d11b      	bne.n	8005098 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8005060:	4812      	ldr	r0, [pc, #72]	; (80050ac <HAL_InitTick+0xd0>)
 8005062:	f005 fb9b 	bl	800a79c <HAL_TIM_Base_Start_IT>
 8005066:	4603      	mov	r3, r0
 8005068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800506c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005070:	2b00      	cmp	r3, #0
 8005072:	d111      	bne.n	8005098 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005074:	2019      	movs	r0, #25
 8005076:	f002 fe33 	bl	8007ce0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b0f      	cmp	r3, #15
 800507e:	d808      	bhi.n	8005092 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8005080:	2200      	movs	r2, #0
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	2019      	movs	r0, #25
 8005086:	f002 fe0f 	bl	8007ca8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800508a:	4a0a      	ldr	r2, [pc, #40]	; (80050b4 <HAL_InitTick+0xd8>)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	e002      	b.n	8005098 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005098:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800509c:	4618      	mov	r0, r3
 800509e:	3730      	adds	r7, #48	; 0x30
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40021000 	.word	0x40021000
 80050a8:	431bde83 	.word	0x431bde83
 80050ac:	20000710 	.word	0x20000710
 80050b0:	40014400 	.word	0x40014400
 80050b4:	20000080 	.word	0x20000080

080050b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050bc:	e7fe      	b.n	80050bc <NMI_Handler+0x4>

080050be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050be:	b480      	push	{r7}
 80050c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050c2:	e7fe      	b.n	80050c2 <HardFault_Handler+0x4>

080050c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050c8:	e7fe      	b.n	80050c8 <MemManage_Handler+0x4>

080050ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050ca:	b480      	push	{r7}
 80050cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050ce:	e7fe      	b.n	80050ce <BusFault_Handler+0x4>

080050d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050d4:	e7fe      	b.n	80050d4 <UsageFault_Handler+0x4>

080050d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050d6:	b480      	push	{r7}
 80050d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050da:	bf00      	nop
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 80050e8:	4802      	ldr	r0, [pc, #8]	; (80050f4 <DMA1_Channel1_IRQHandler+0x10>)
 80050ea:	f003 fa29 	bl	8008540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80050ee:	bf00      	nop
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	200005c0 	.word	0x200005c0

080050f8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80050fc:	4802      	ldr	r0, [pc, #8]	; (8005108 <DMA1_Channel3_IRQHandler+0x10>)
 80050fe:	f003 fa1f 	bl	8008540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005102:	bf00      	nop
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	200003c0 	.word	0x200003c0

0800510c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8005110:	4802      	ldr	r0, [pc, #8]	; (800511c <DMA1_Channel4_IRQHandler+0x10>)
 8005112:	f003 fa15 	bl	8008540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000408 	.word	0x20000408

08005120 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005124:	4802      	ldr	r0, [pc, #8]	; (8005130 <CAN1_TX_IRQHandler+0x10>)
 8005126:	f002 faf5 	bl	8007714 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000384 	.word	0x20000384

08005134 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005138:	4802      	ldr	r0, [pc, #8]	; (8005144 <CAN1_RX0_IRQHandler+0x10>)
 800513a:	f002 faeb 	bl	8007714 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000384 	.word	0x20000384

08005148 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800514c:	4802      	ldr	r0, [pc, #8]	; (8005158 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800514e:	f005 fb79 	bl	800a844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000710 	.word	0x20000710

0800515c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005160:	4803      	ldr	r0, [pc, #12]	; (8005170 <TIM6_DAC_IRQHandler+0x14>)
 8005162:	f005 fb6f 	bl	800a844 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8005166:	4803      	ldr	r0, [pc, #12]	; (8005174 <TIM6_DAC_IRQHandler+0x18>)
 8005168:	f002 feb6 	bl	8007ed8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800516c:	bf00      	nop
 800516e:	bd80      	pop	{r7, pc}
 8005170:	200004a4 	.word	0x200004a4
 8005174:	200003ac 	.word	0x200003ac

08005178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <_sbrk+0x5c>)
 8005182:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <_sbrk+0x60>)
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800518c:	4b13      	ldr	r3, [pc, #76]	; (80051dc <_sbrk+0x64>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005194:	4b11      	ldr	r3, [pc, #68]	; (80051dc <_sbrk+0x64>)
 8005196:	4a12      	ldr	r2, [pc, #72]	; (80051e0 <_sbrk+0x68>)
 8005198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <_sbrk+0x64>)
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4413      	add	r3, r2
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d207      	bcs.n	80051b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051a8:	f00a fc68 	bl	800fa7c <__errno>
 80051ac:	4603      	mov	r3, r0
 80051ae:	220c      	movs	r2, #12
 80051b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051b6:	e009      	b.n	80051cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <_sbrk+0x64>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051be:	4b07      	ldr	r3, [pc, #28]	; (80051dc <_sbrk+0x64>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	4a05      	ldr	r2, [pc, #20]	; (80051dc <_sbrk+0x64>)
 80051c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051ca:	68fb      	ldr	r3, [r7, #12]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20010000 	.word	0x20010000
 80051d8:	00000400 	.word	0x00000400
 80051dc:	2000075c 	.word	0x2000075c
 80051e0:	2000b2e8 	.word	0x2000b2e8

080051e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80051e8:	4b06      	ldr	r3, [pc, #24]	; (8005204 <SystemInit+0x20>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	4a05      	ldr	r2, [pc, #20]	; (8005204 <SystemInit+0x20>)
 80051f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80051f8:	bf00      	nop
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	e000ed00 	.word	0xe000ed00

08005208 <init_lookup_tables>:

// Initialize the contents of the all the LUTs
// This means generating the different instrument waveforms

void init_lookup_tables()
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0

    for (int t = 0; t < 12; t++)
 800520e:	2300      	movs	r3, #0
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	e03c      	b.n	800528e <init_lookup_tables+0x86>
    {
        DDS_steps[t] = 3520 * pow(2, (t - 9) / 12.0) / 44100 * 65536;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3b09      	subs	r3, #9
 8005218:	4618      	mov	r0, r3
 800521a:	f7fb f983 	bl	8000524 <__aeabi_i2d>
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <init_lookup_tables+0xd0>)
 8005224:	f7fb fb12 	bl	800084c <__aeabi_ddiv>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	ec43 2b17 	vmov	d7, r2, r3
 8005230:	eeb0 1a47 	vmov.f32	s2, s14
 8005234:	eef0 1a67 	vmov.f32	s3, s15
 8005238:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80052c8 <init_lookup_tables+0xc0>
 800523c:	f00b f970 	bl	8010520 <pow>
 8005240:	ec51 0b10 	vmov	r0, r1, d0
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	4b24      	ldr	r3, [pc, #144]	; (80052dc <init_lookup_tables+0xd4>)
 800524a:	f7fb f9d5 	bl	80005f8 <__aeabi_dmul>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4610      	mov	r0, r2
 8005254:	4619      	mov	r1, r3
 8005256:	a31e      	add	r3, pc, #120	; (adr r3, 80052d0 <init_lookup_tables+0xc8>)
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	f7fb faf6 	bl	800084c <__aeabi_ddiv>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4610      	mov	r0, r2
 8005266:	4619      	mov	r1, r3
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <init_lookup_tables+0xd8>)
 800526e:	f7fb f9c3 	bl	80005f8 <__aeabi_dmul>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4610      	mov	r0, r2
 8005278:	4619      	mov	r1, r3
 800527a:	f7fb fc95 	bl	8000ba8 <__aeabi_d2uiz>
 800527e:	4602      	mov	r2, r0
 8005280:	4918      	ldr	r1, [pc, #96]	; (80052e4 <init_lookup_tables+0xdc>)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int t = 0; t < 12; t++)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3301      	adds	r3, #1
 800528c:	607b      	str	r3, [r7, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b0b      	cmp	r3, #11
 8005292:	ddbf      	ble.n	8005214 <init_lookup_tables+0xc>
    }

    for (WaveType type = 0; type < END_WAVETYPE; type++)
 8005294:	2300      	movs	r3, #0
 8005296:	70fb      	strb	r3, [r7, #3]
 8005298:	e00b      	b.n	80052b2 <init_lookup_tables+0xaa>
    {
        generate_waveform(DDS_LUT[type], type);
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	02db      	lsls	r3, r3, #11
 800529e:	4a12      	ldr	r2, [pc, #72]	; (80052e8 <init_lookup_tables+0xe0>)
 80052a0:	4413      	add	r3, r2
 80052a2:	78fa      	ldrb	r2, [r7, #3]
 80052a4:	4611      	mov	r1, r2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f822 	bl	80052f0 <generate_waveform>
    for (WaveType type = 0; type < END_WAVETYPE; type++)
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	3301      	adds	r3, #1
 80052b0:	70fb      	strb	r3, [r7, #3]
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	2b06      	cmp	r3, #6
 80052b6:	d9f0      	bls.n	800529a <init_lookup_tables+0x92>
    }
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	f3af 8000 	nop.w
 80052c8:	00000000 	.word	0x00000000
 80052cc:	40000000 	.word	0x40000000
 80052d0:	00000000 	.word	0x00000000
 80052d4:	40e58880 	.word	0x40e58880
 80052d8:	40280000 	.word	0x40280000
 80052dc:	40ab8000 	.word	0x40ab8000
 80052e0:	40f00000 	.word	0x40f00000
 80052e4:	20004790 	.word	0x20004790
 80052e8:	20000760 	.word	0x20000760
 80052ec:	00000000 	.word	0x00000000

080052f0 <generate_waveform>:

void generate_waveform(int16_t lookup_table[DDS_LUT_SAMPLES], WaveType wave)
{
 80052f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80052f4:	b0a6      	sub	sp, #152	; 0x98
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	70fb      	strb	r3, [r7, #3]

    int half_samples = DDS_LUT_SAMPLES / 2;
 80052fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005302:	667b      	str	r3, [r7, #100]	; 0x64

    switch (wave)
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	2b06      	cmp	r3, #6
 8005308:	f200 83a6 	bhi.w	8005a58 <generate_waveform+0x768>
 800530c:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <generate_waveform+0x24>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	08005331 	.word	0x08005331
 8005318:	08005387 	.word	0x08005387
 800531c:	08005415 	.word	0x08005415
 8005320:	08005455 	.word	0x08005455
 8005324:	08005a59 	.word	0x08005a59
 8005328:	08005549 	.word	0x08005549
 800532c:	08005871 	.word	0x08005871
    {
    case SAWTOOTH: {
        // serialPrint("sawtoothgen\n");
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 8005330:	2300      	movs	r3, #0
 8005332:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005336:	e01f      	b.n	8005378 <generate_waveform+0x88>
        {
            lookup_table[i] = (i <= half_samples) ? 2048 * ((float)(i - half_samples) / (float)DDS_LUT_SAMPLES)
 8005338:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800533c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005348:	eddf 6acd 	vldr	s13, [pc, #820]	; 8005680 <generate_waveform+0x390>
 800534c:	eec7 7a26 	vdiv.f32	s15, s14, s13
                                                  : 2048 * ((float)(i - half_samples) / (float)DDS_LUT_SAMPLES);
 8005350:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8005684 <generate_waveform+0x394>
 8005354:	ee67 7a87 	vmul.f32	s15, s15, s14
            lookup_table[i] = (i <= half_samples) ? 2048 * ((float)(i - half_samples) / (float)DDS_LUT_SAMPLES)
 8005358:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	4413      	add	r3, r2
 8005362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005366:	ee17 2a90 	vmov	r2, s15
 800536a:	b212      	sxth	r2, r2
 800536c:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 800536e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005372:	3301      	adds	r3, #1
 8005374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005378:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800537c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005380:	dbda      	blt.n	8005338 <generate_waveform+0x48>
        }
    }
    break;
 8005382:	f000 bc7a 	b.w	8005c7a <generate_waveform+0x98a>
    case SINE: {
        // serialPrint("sinegen\n");
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 8005386:	2300      	movs	r3, #0
 8005388:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800538c:	e03b      	b.n	8005406 <generate_waveform+0x116>
        {
            lookup_table[i] = 2048 * sin(2.0 * M_PI * (float)i / (float)DDS_LUT_SAMPLES);
 800538e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800539a:	ee17 0a90 	vmov	r0, s15
 800539e:	f7fb f8d3 	bl	8000548 <__aeabi_f2d>
 80053a2:	a3b3      	add	r3, pc, #716	; (adr r3, 8005670 <generate_waveform+0x380>)
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	f7fb f926 	bl	80005f8 <__aeabi_dmul>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4610      	mov	r0, r2
 80053b2:	4619      	mov	r1, r3
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	4bb3      	ldr	r3, [pc, #716]	; (8005688 <generate_waveform+0x398>)
 80053ba:	f7fb fa47 	bl	800084c <__aeabi_ddiv>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	ec43 2b17 	vmov	d7, r2, r3
 80053c6:	eeb0 0a47 	vmov.f32	s0, s14
 80053ca:	eef0 0a67 	vmov.f32	s1, s15
 80053ce:	f00b f85f 	bl	8010490 <sin>
 80053d2:	ec51 0b10 	vmov	r0, r1, d0
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	4bac      	ldr	r3, [pc, #688]	; (800568c <generate_waveform+0x39c>)
 80053dc:	f7fb f90c 	bl	80005f8 <__aeabi_dmul>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4610      	mov	r0, r2
 80053e6:	4619      	mov	r1, r3
 80053e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	18d4      	adds	r4, r2, r3
 80053f2:	f7fb fbb1 	bl	8000b58 <__aeabi_d2iz>
 80053f6:	4603      	mov	r3, r0
 80053f8:	b21b      	sxth	r3, r3
 80053fa:	8023      	strh	r3, [r4, #0]
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 80053fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005400:	3301      	adds	r3, #1
 8005402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005406:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800540a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540e:	dbbe      	blt.n	800538e <generate_waveform+0x9e>
        }
    }
    break;
 8005410:	f000 bc33 	b.w	8005c7a <generate_waveform+0x98a>
    case SQUARE: {
        // serialPrint("squaregen\n");
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 8005414:	2300      	movs	r3, #0
 8005416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800541a:	e014      	b.n	8005446 <generate_waveform+0x156>
        {
            lookup_table[i] = (i <= half_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 800541c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005422:	429a      	cmp	r2, r3
 8005424:	dc02      	bgt.n	800542c <generate_waveform+0x13c>
 8005426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800542a:	e000      	b.n	800542e <generate_waveform+0x13e>
 800542c:	4998      	ldr	r1, [pc, #608]	; (8005690 <generate_waveform+0x3a0>)
 800542e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	4413      	add	r3, r2
 8005438:	460a      	mov	r2, r1
 800543a:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 800543c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005440:	3301      	adds	r3, #1
 8005442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544e:	dbe5      	blt.n	800541c <generate_waveform+0x12c>
        }
    }
    break;
 8005450:	f000 bc13 	b.w	8005c7a <generate_waveform+0x98a>
    case TRIANGLE: {
        // serialPrint("trianglegen\n");
        int half_samples = DDS_LUT_SAMPLES / 2;
 8005454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005458:	61bb      	str	r3, [r7, #24]
        int first_fourth = DDS_LUT_SAMPLES / 4;
 800545a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800545e:	617b      	str	r3, [r7, #20]
        int third_fourth = half_samples + first_fourth;
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	4413      	add	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 8005468:	2300      	movs	r3, #0
 800546a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800546e:	e065      	b.n	800553c <generate_waveform+0x24c>
        {
            lookup_table[i] = (i <= first_fourth)   ? 2048 * ((float)(-i) / (float)DDS_LUT_SAMPLES)
 8005470:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	429a      	cmp	r2, r3
 8005478:	dc14      	bgt.n	80054a4 <generate_waveform+0x1b4>
 800547a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800547e:	425b      	negs	r3, r3
 8005480:	ee07 3a90 	vmov	s15, r3
 8005484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005488:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8005680 <generate_waveform+0x390>
 800548c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005490:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8005684 <generate_waveform+0x394>
 8005494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800549c:	ee17 3a90 	vmov	r3, s15
 80054a0:	b21b      	sxth	r3, r3
 80054a2:	e02f      	b.n	8005504 <generate_waveform+0x214>
 80054a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	dc15      	bgt.n	80054da <generate_waveform+0x1ea>
                              : (i <= third_fourth) ? 2048 * ((float)(i - half_samples) / (float)DDS_LUT_SAMPLES)
 80054ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054be:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005680 <generate_waveform+0x390>
 80054c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054c6:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005684 <generate_waveform+0x394>
 80054ca:	ee67 7a87 	vmul.f32	s15, s15, s14
            lookup_table[i] = (i <= first_fourth)   ? 2048 * ((float)(-i) / (float)DDS_LUT_SAMPLES)
 80054ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054d2:	ee17 3a90 	vmov	r3, s15
 80054d6:	b21b      	sxth	r3, r3
 80054d8:	e014      	b.n	8005504 <generate_waveform+0x214>
                                                    : 2048 * ((float)(DDS_LUT_SAMPLES - i) / (float)DDS_LUT_SAMPLES);
 80054da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054de:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054ea:	eddf 6a65 	vldr	s13, [pc, #404]	; 8005680 <generate_waveform+0x390>
 80054ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054f2:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005684 <generate_waveform+0x394>
 80054f6:	ee67 7a87 	vmul.f32	s15, s15, s14
            lookup_table[i] = (i <= first_fourth)   ? 2048 * ((float)(-i) / (float)DDS_LUT_SAMPLES)
 80054fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054fe:	ee17 3a90 	vmov	r3, s15
 8005502:	b21b      	sxth	r3, r3
 8005504:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005508:	0052      	lsls	r2, r2, #1
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	440a      	add	r2, r1
 800550e:	8013      	strh	r3, [r2, #0]
            lookup_table[i] *= 4;
 8005510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4413      	add	r3, r2
 800551a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800551e:	b29b      	uxth	r3, r3
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	b299      	uxth	r1, r3
 8005524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4413      	add	r3, r2
 800552e:	b20a      	sxth	r2, r1
 8005530:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 8005532:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005536:	3301      	adds	r3, #1
 8005538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800553c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005544:	db94      	blt.n	8005470 <generate_waveform+0x180>
        }
    }
    break;
 8005546:	e398      	b.n	8005c7a <generate_waveform+0x98a>
    case RETRO1: {
        int tone1 = DDS_LUT_SAMPLES * 0.2;
 8005548:	23cc      	movs	r3, #204	; 0xcc
 800554a:	643b      	str	r3, [r7, #64]	; 0x40
        int tone2 = DDS_LUT_SAMPLES * 0.4;
 800554c:	f240 1399 	movw	r3, #409	; 0x199
 8005550:	63fb      	str	r3, [r7, #60]	; 0x3c
        int tone3 = DDS_LUT_SAMPLES * 0.3;
 8005552:	f240 1333 	movw	r3, #307	; 0x133
 8005556:	63bb      	str	r3, [r7, #56]	; 0x38
        uint32_t curr_samples = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	637b      	str	r3, [r7, #52]	; 0x34
        uint32_t step_samples = curr_samples + tone1;
 800555c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800555e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005560:	4413      	add	r3, r2
 8005562:	633b      	str	r3, [r7, #48]	; 0x30
        uint32_t half_step_samples = step_samples / 2;
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	085b      	lsrs	r3, r3, #1
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c

        for (int i = curr_samples; i < step_samples; i++)
 800556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005570:	e067      	b.n	8005642 <generate_waveform+0x352>
        {
            float wave = 2048 * sin(2.0 * M_PI * (float)i * 5 / ((float)tone1)) / 5;
 8005572:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800557e:	ee17 0a90 	vmov	r0, s15
 8005582:	f7fa ffe1 	bl	8000548 <__aeabi_f2d>
 8005586:	a33a      	add	r3, pc, #232	; (adr r3, 8005670 <generate_waveform+0x380>)
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	f7fb f834 	bl	80005f8 <__aeabi_dmul>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4610      	mov	r0, r2
 8005596:	4619      	mov	r1, r3
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	4b3d      	ldr	r3, [pc, #244]	; (8005694 <generate_waveform+0x3a4>)
 800559e:	f7fb f82b 	bl	80005f8 <__aeabi_dmul>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4614      	mov	r4, r2
 80055a8:	461d      	mov	r5, r3
 80055aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b4:	ee17 0a90 	vmov	r0, s15
 80055b8:	f7fa ffc6 	bl	8000548 <__aeabi_f2d>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4620      	mov	r0, r4
 80055c2:	4629      	mov	r1, r5
 80055c4:	f7fb f942 	bl	800084c <__aeabi_ddiv>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	ec43 2b17 	vmov	d7, r2, r3
 80055d0:	eeb0 0a47 	vmov.f32	s0, s14
 80055d4:	eef0 0a67 	vmov.f32	s1, s15
 80055d8:	f00a ff5a 	bl	8010490 <sin>
 80055dc:	ec51 0b10 	vmov	r0, r1, d0
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	4b29      	ldr	r3, [pc, #164]	; (800568c <generate_waveform+0x39c>)
 80055e6:	f7fb f807 	bl	80005f8 <__aeabi_dmul>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4610      	mov	r0, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	4b27      	ldr	r3, [pc, #156]	; (8005694 <generate_waveform+0x3a4>)
 80055f8:	f7fb f928 	bl	800084c <__aeabi_ddiv>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4610      	mov	r0, r2
 8005602:	4619      	mov	r1, r3
 8005604:	f7fb faf0 	bl	8000be8 <__aeabi_d2f>
 8005608:	4603      	mov	r3, r0
 800560a:	61fb      	str	r3, [r7, #28]
            lookup_table[i] = 0.4 * wave;
 800560c:	69f8      	ldr	r0, [r7, #28]
 800560e:	f7fa ff9b 	bl	8000548 <__aeabi_f2d>
 8005612:	a319      	add	r3, pc, #100	; (adr r3, 8005678 <generate_waveform+0x388>)
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	f7fa ffee 	bl	80005f8 <__aeabi_dmul>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	18d4      	adds	r4, r2, r3
 800562e:	f7fb fa93 	bl	8000b58 <__aeabi_d2iz>
 8005632:	4603      	mov	r3, r0
 8005634:	b21b      	sxth	r3, r3
 8005636:	8023      	strh	r3, [r4, #0]
        for (int i = curr_samples; i < step_samples; i++)
 8005638:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800563c:	3301      	adds	r3, #1
 800563e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005642:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005648:	429a      	cmp	r2, r3
 800564a:	d892      	bhi.n	8005572 <generate_waveform+0x282>
        }
        curr_samples = step_samples;
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	637b      	str	r3, [r7, #52]	; 0x34

        step_samples = curr_samples + tone2;
 8005650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005654:	4413      	add	r3, r2
 8005656:	633b      	str	r3, [r7, #48]	; 0x30
        half_step_samples = curr_samples + tone2 / 2;
 8005658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565a:	0fda      	lsrs	r2, r3, #31
 800565c:	4413      	add	r3, r2
 800565e:	105b      	asrs	r3, r3, #1
 8005660:	461a      	mov	r2, r3
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	4413      	add	r3, r2
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (int i = curr_samples; i < step_samples; i++)
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800566e:	e060      	b.n	8005732 <generate_waveform+0x442>
 8005670:	54442d18 	.word	0x54442d18
 8005674:	401921fb 	.word	0x401921fb
 8005678:	9999999a 	.word	0x9999999a
 800567c:	3fd99999 	.word	0x3fd99999
 8005680:	44800000 	.word	0x44800000
 8005684:	45000000 	.word	0x45000000
 8005688:	40900000 	.word	0x40900000
 800568c:	40a00000 	.word	0x40a00000
 8005690:	fffff800 	.word	0xfffff800
 8005694:	40140000 	.word	0x40140000
        {
            float wave = 2048 * sin(2.0 * M_PI * (float)i / ((float)tone2));
 8005698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800569c:	ee07 3a90 	vmov	s15, r3
 80056a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056a4:	ee17 0a90 	vmov	r0, s15
 80056a8:	f7fa ff4e 	bl	8000548 <__aeabi_f2d>
 80056ac:	a3ba      	add	r3, pc, #744	; (adr r3, 8005998 <generate_waveform+0x6a8>)
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f7fa ffa1 	bl	80005f8 <__aeabi_dmul>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	4614      	mov	r4, r2
 80056bc:	461d      	mov	r5, r3
 80056be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c0:	ee07 3a90 	vmov	s15, r3
 80056c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056c8:	ee17 0a90 	vmov	r0, s15
 80056cc:	f7fa ff3c 	bl	8000548 <__aeabi_f2d>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4620      	mov	r0, r4
 80056d6:	4629      	mov	r1, r5
 80056d8:	f7fb f8b8 	bl	800084c <__aeabi_ddiv>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	ec43 2b17 	vmov	d7, r2, r3
 80056e4:	eeb0 0a47 	vmov.f32	s0, s14
 80056e8:	eef0 0a67 	vmov.f32	s1, s15
 80056ec:	f00a fed0 	bl	8010490 <sin>
 80056f0:	ec51 0b10 	vmov	r0, r1, d0
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	4bad      	ldr	r3, [pc, #692]	; (80059b0 <generate_waveform+0x6c0>)
 80056fa:	f7fa ff7d 	bl	80005f8 <__aeabi_dmul>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	f7fb fa6f 	bl	8000be8 <__aeabi_d2f>
 800570a:	4603      	mov	r3, r0
 800570c:	623b      	str	r3, [r7, #32]
            lookup_table[i] = 1 * wave;
 800570e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	4413      	add	r3, r2
 8005718:	edd7 7a08 	vldr	s15, [r7, #32]
 800571c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005720:	ee17 2a90 	vmov	r2, s15
 8005724:	b212      	sxth	r2, r2
 8005726:	801a      	strh	r2, [r3, #0]
        for (int i = curr_samples; i < step_samples; i++)
 8005728:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800572c:	3301      	adds	r3, #1
 800572e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005732:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005738:	429a      	cmp	r2, r3
 800573a:	d8ad      	bhi.n	8005698 <generate_waveform+0x3a8>
        }
        curr_samples = step_samples;
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	637b      	str	r3, [r7, #52]	; 0x34

        step_samples = curr_samples + tone3;
 8005740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005744:	4413      	add	r3, r2
 8005746:	633b      	str	r3, [r7, #48]	; 0x30
        half_step_samples = curr_samples + tone3 / 2;
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	0fda      	lsrs	r2, r3, #31
 800574c:	4413      	add	r3, r2
 800574e:	105b      	asrs	r3, r3, #1
 8005750:	461a      	mov	r2, r3
 8005752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005754:	4413      	add	r3, r2
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (int i = curr_samples; i < step_samples; i++)
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800575c:	e051      	b.n	8005802 <generate_waveform+0x512>
        {
            float wave = 2048 * sin(2.0 * M_PI * (float)i / ((float)tone3));
 800575e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005768:	ee17 0a90 	vmov	r0, s15
 800576c:	f7fa feec 	bl	8000548 <__aeabi_f2d>
 8005770:	a389      	add	r3, pc, #548	; (adr r3, 8005998 <generate_waveform+0x6a8>)
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f7fa ff3f 	bl	80005f8 <__aeabi_dmul>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4614      	mov	r4, r2
 8005780:	461d      	mov	r5, r3
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	ee07 3a90 	vmov	s15, r3
 8005788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800578c:	ee17 0a90 	vmov	r0, s15
 8005790:	f7fa feda 	bl	8000548 <__aeabi_f2d>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4620      	mov	r0, r4
 800579a:	4629      	mov	r1, r5
 800579c:	f7fb f856 	bl	800084c <__aeabi_ddiv>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	ec43 2b17 	vmov	d7, r2, r3
 80057a8:	eeb0 0a47 	vmov.f32	s0, s14
 80057ac:	eef0 0a67 	vmov.f32	s1, s15
 80057b0:	f00a fe6e 	bl	8010490 <sin>
 80057b4:	ec51 0b10 	vmov	r0, r1, d0
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	4b7c      	ldr	r3, [pc, #496]	; (80059b0 <generate_waveform+0x6c0>)
 80057be:	f7fa ff1b 	bl	80005f8 <__aeabi_dmul>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4610      	mov	r0, r2
 80057c8:	4619      	mov	r1, r3
 80057ca:	f7fb fa0d 	bl	8000be8 <__aeabi_d2f>
 80057ce:	4603      	mov	r3, r0
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
            lookup_table[i] = 0.7 * wave;
 80057d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057d4:	f7fa feb8 	bl	8000548 <__aeabi_f2d>
 80057d8:	a371      	add	r3, pc, #452	; (adr r3, 80059a0 <generate_waveform+0x6b0>)
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f7fa ff0b 	bl	80005f8 <__aeabi_dmul>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4610      	mov	r0, r2
 80057e8:	4619      	mov	r1, r3
 80057ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	18d4      	adds	r4, r2, r3
 80057f2:	f7fb f9b1 	bl	8000b58 <__aeabi_d2iz>
 80057f6:	4603      	mov	r3, r0
 80057f8:	b21b      	sxth	r3, r3
 80057fa:	8023      	strh	r3, [r4, #0]
        for (int i = curr_samples; i < step_samples; i++)
 80057fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057fe:	3301      	adds	r3, #1
 8005800:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005802:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005806:	429a      	cmp	r2, r3
 8005808:	d8a9      	bhi.n	800575e <generate_waveform+0x46e>
        }
        curr_samples = step_samples;
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	637b      	str	r3, [r7, #52]	; 0x34

        half_step_samples = step_samples + (DDS_LUT_SAMPLES - step_samples) / 2;
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005818:	4413      	add	r3, r2
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (int i = curr_samples; i < DDS_LUT_SAMPLES; i++)
 800581c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005820:	e021      	b.n	8005866 <generate_waveform+0x576>
        {
            float wave = (i <= half_step_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 8005822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005826:	429a      	cmp	r2, r3
 8005828:	d302      	bcc.n	8005830 <generate_waveform+0x540>
 800582a:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 800582e:	e001      	b.n	8005834 <generate_waveform+0x544>
 8005830:	f04f 4345 	mov.w	r3, #3305111552	; 0xc5000000
 8005834:	62bb      	str	r3, [r7, #40]	; 0x28
            ;
            lookup_table[i] = 0.3 * wave;
 8005836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005838:	f7fa fe86 	bl	8000548 <__aeabi_f2d>
 800583c:	a35a      	add	r3, pc, #360	; (adr r3, 80059a8 <generate_waveform+0x6b8>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f7fa fed9 	bl	80005f8 <__aeabi_dmul>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4610      	mov	r0, r2
 800584c:	4619      	mov	r1, r3
 800584e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	18d4      	adds	r4, r2, r3
 8005856:	f7fb f97f 	bl	8000b58 <__aeabi_d2iz>
 800585a:	4603      	mov	r3, r0
 800585c:	b21b      	sxth	r3, r3
 800585e:	8023      	strh	r3, [r4, #0]
        for (int i = curr_samples; i < DDS_LUT_SAMPLES; i++)
 8005860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005862:	3301      	adds	r3, #1
 8005864:	67bb      	str	r3, [r7, #120]	; 0x78
 8005866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586c:	dbd9      	blt.n	8005822 <generate_waveform+0x532>
        }
    }
    break;
 800586e:	e204      	b.n	8005c7a <generate_waveform+0x98a>
    case RETRO2: {
        int tone1 = DDS_LUT_SAMPLES * 0.4;
 8005870:	f240 1399 	movw	r3, #409	; 0x199
 8005874:	663b      	str	r3, [r7, #96]	; 0x60
        int tone2 = DDS_LUT_SAMPLES * 0.3;
 8005876:	f240 1333 	movw	r3, #307	; 0x133
 800587a:	65fb      	str	r3, [r7, #92]	; 0x5c
        uint32_t curr_samples = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	65bb      	str	r3, [r7, #88]	; 0x58
        uint32_t step_samples = curr_samples + tone1;
 8005880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005882:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005884:	4413      	add	r3, r2
 8005886:	657b      	str	r3, [r7, #84]	; 0x54
        uint32_t half_step_samples = curr_samples + tone1 / 2;
 8005888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800588a:	0fda      	lsrs	r2, r3, #31
 800588c:	4413      	add	r3, r2
 800588e:	105b      	asrs	r3, r3, #1
 8005890:	461a      	mov	r2, r3
 8005892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005894:	4413      	add	r3, r2
 8005896:	653b      	str	r3, [r7, #80]	; 0x50
        for (int i = curr_samples; i < step_samples; i++)
 8005898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800589a:	677b      	str	r3, [r7, #116]	; 0x74
 800589c:	e05d      	b.n	800595a <generate_waveform+0x66a>
        {
            float wave = (i <= half_step_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 800589e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d302      	bcc.n	80058ac <generate_waveform+0x5bc>
 80058a6:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80058aa:	e001      	b.n	80058b0 <generate_waveform+0x5c0>
 80058ac:	f04f 4345 	mov.w	r3, #3305111552	; 0xc5000000
 80058b0:	647b      	str	r3, [r7, #68]	; 0x44
            wave += 2048 * sin(2.0 * M_PI * (float)i / ((float)tone1));
 80058b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80058b4:	f7fa fe48 	bl	8000548 <__aeabi_f2d>
 80058b8:	4604      	mov	r4, r0
 80058ba:	460d      	mov	r5, r1
 80058bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058c6:	ee17 0a90 	vmov	r0, s15
 80058ca:	f7fa fe3d 	bl	8000548 <__aeabi_f2d>
 80058ce:	a332      	add	r3, pc, #200	; (adr r3, 8005998 <generate_waveform+0x6a8>)
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	f7fa fe90 	bl	80005f8 <__aeabi_dmul>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4690      	mov	r8, r2
 80058de:	4699      	mov	r9, r3
 80058e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058ea:	ee17 0a90 	vmov	r0, s15
 80058ee:	f7fa fe2b 	bl	8000548 <__aeabi_f2d>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4640      	mov	r0, r8
 80058f8:	4649      	mov	r1, r9
 80058fa:	f7fa ffa7 	bl	800084c <__aeabi_ddiv>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	ec43 2b17 	vmov	d7, r2, r3
 8005906:	eeb0 0a47 	vmov.f32	s0, s14
 800590a:	eef0 0a67 	vmov.f32	s1, s15
 800590e:	f00a fdbf 	bl	8010490 <sin>
 8005912:	ec51 0b10 	vmov	r0, r1, d0
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	4b25      	ldr	r3, [pc, #148]	; (80059b0 <generate_waveform+0x6c0>)
 800591c:	f7fa fe6c 	bl	80005f8 <__aeabi_dmul>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4620      	mov	r0, r4
 8005926:	4629      	mov	r1, r5
 8005928:	f7fa fcb0 	bl	800028c <__adddf3>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4610      	mov	r0, r2
 8005932:	4619      	mov	r1, r3
 8005934:	f7fb f958 	bl	8000be8 <__aeabi_d2f>
 8005938:	4603      	mov	r3, r0
 800593a:	647b      	str	r3, [r7, #68]	; 0x44
            lookup_table[i] = 1 * wave;
 800593c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	4413      	add	r3, r2
 8005944:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800594c:	ee17 2a90 	vmov	r2, s15
 8005950:	b212      	sxth	r2, r2
 8005952:	801a      	strh	r2, [r3, #0]
        for (int i = curr_samples; i < step_samples; i++)
 8005954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005956:	3301      	adds	r3, #1
 8005958:	677b      	str	r3, [r7, #116]	; 0x74
 800595a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800595c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800595e:	429a      	cmp	r2, r3
 8005960:	d89d      	bhi.n	800589e <generate_waveform+0x5ae>
        }
        curr_samples = step_samples;
 8005962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005964:	65bb      	str	r3, [r7, #88]	; 0x58

        step_samples = curr_samples + tone2;
 8005966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005968:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800596a:	4413      	add	r3, r2
 800596c:	657b      	str	r3, [r7, #84]	; 0x54
        half_step_samples = curr_samples + tone2 / 2;
 800596e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005970:	0fda      	lsrs	r2, r3, #31
 8005972:	4413      	add	r3, r2
 8005974:	105b      	asrs	r3, r3, #1
 8005976:	461a      	mov	r2, r3
 8005978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800597a:	4413      	add	r3, r2
 800597c:	653b      	str	r3, [r7, #80]	; 0x50
        for (int i = curr_samples; i < step_samples; i++)
 800597e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005980:	673b      	str	r3, [r7, #112]	; 0x70
 8005982:	e032      	b.n	80059ea <generate_waveform+0x6fa>
        {
            float wave = (i <= half_step_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 8005984:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005986:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005988:	429a      	cmp	r2, r3
 800598a:	d313      	bcc.n	80059b4 <generate_waveform+0x6c4>
 800598c:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8005990:	e012      	b.n	80059b8 <generate_waveform+0x6c8>
 8005992:	bf00      	nop
 8005994:	f3af 8000 	nop.w
 8005998:	54442d18 	.word	0x54442d18
 800599c:	401921fb 	.word	0x401921fb
 80059a0:	66666666 	.word	0x66666666
 80059a4:	3fe66666 	.word	0x3fe66666
 80059a8:	33333333 	.word	0x33333333
 80059ac:	3fd33333 	.word	0x3fd33333
 80059b0:	40a00000 	.word	0x40a00000
 80059b4:	f04f 4345 	mov.w	r3, #3305111552	; 0xc5000000
 80059b8:	64bb      	str	r3, [r7, #72]	; 0x48
            lookup_table[i] = 0.7 * wave;
 80059ba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80059bc:	f7fa fdc4 	bl	8000548 <__aeabi_f2d>
 80059c0:	a3b8      	add	r3, pc, #736	; (adr r3, 8005ca4 <generate_waveform+0x9b4>)
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	f7fa fe17 	bl	80005f8 <__aeabi_dmul>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	18d4      	adds	r4, r2, r3
 80059da:	f7fb f8bd 	bl	8000b58 <__aeabi_d2iz>
 80059de:	4603      	mov	r3, r0
 80059e0:	b21b      	sxth	r3, r3
 80059e2:	8023      	strh	r3, [r4, #0]
        for (int i = curr_samples; i < step_samples; i++)
 80059e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059e6:	3301      	adds	r3, #1
 80059e8:	673b      	str	r3, [r7, #112]	; 0x70
 80059ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d8c8      	bhi.n	8005984 <generate_waveform+0x694>
        }
        curr_samples = step_samples;
 80059f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f4:	65bb      	str	r3, [r7, #88]	; 0x58

        half_step_samples = step_samples + (DDS_LUT_SAMPLES - step_samples) / 2;
 80059f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a00:	4413      	add	r3, r2
 8005a02:	653b      	str	r3, [r7, #80]	; 0x50
        for (int i = curr_samples; i < DDS_LUT_SAMPLES; i++)
 8005a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a08:	e021      	b.n	8005a4e <generate_waveform+0x75e>
        {
            float wave = (i <= half_step_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 8005a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d302      	bcc.n	8005a18 <generate_waveform+0x728>
 8005a12:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8005a16:	e001      	b.n	8005a1c <generate_waveform+0x72c>
 8005a18:	f04f 4345 	mov.w	r3, #3305111552	; 0xc5000000
 8005a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
            lookup_table[i] = 0.3 * wave;
 8005a1e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005a20:	f7fa fd92 	bl	8000548 <__aeabi_f2d>
 8005a24:	a3a1      	add	r3, pc, #644	; (adr r3, 8005cac <generate_waveform+0x9bc>)
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	f7fa fde5 	bl	80005f8 <__aeabi_dmul>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4610      	mov	r0, r2
 8005a34:	4619      	mov	r1, r3
 8005a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	18d4      	adds	r4, r2, r3
 8005a3e:	f7fb f88b 	bl	8000b58 <__aeabi_d2iz>
 8005a42:	4603      	mov	r3, r0
 8005a44:	b21b      	sxth	r3, r3
 8005a46:	8023      	strh	r3, [r4, #0]
        for (int i = curr_samples; i < DDS_LUT_SAMPLES; i++)
 8005a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a54:	dbd9      	blt.n	8005a0a <generate_waveform+0x71a>
        }
    }
    break;
 8005a56:	e110      	b.n	8005c7a <generate_waveform+0x98a>
    default:
    case CLARINET: {
        // serialPrint("clarinetgen\n");
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 8005a58:	2300      	movs	r3, #0
 8005a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a5c:	e107      	b.n	8005c6e <generate_waveform+0x97e>
        {
            float harmonic_sample = sin(2.0 * M_PI * (float)i / ((float)DDS_LUT_SAMPLES));
 8005a5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a68:	ee17 0a90 	vmov	r0, s15
 8005a6c:	f7fa fd6c 	bl	8000548 <__aeabi_f2d>
 8005a70:	a385      	add	r3, pc, #532	; (adr r3, 8005c88 <generate_waveform+0x998>)
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	f7fa fdbf 	bl	80005f8 <__aeabi_dmul>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4610      	mov	r0, r2
 8005a80:	4619      	mov	r1, r3
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	4b82      	ldr	r3, [pc, #520]	; (8005c90 <generate_waveform+0x9a0>)
 8005a88:	f7fa fee0 	bl	800084c <__aeabi_ddiv>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	ec43 2b17 	vmov	d7, r2, r3
 8005a94:	eeb0 0a47 	vmov.f32	s0, s14
 8005a98:	eef0 0a67 	vmov.f32	s1, s15
 8005a9c:	f00a fcf8 	bl	8010490 <sin>
 8005aa0:	ec53 2b10 	vmov	r2, r3, d0
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f7fb f89e 	bl	8000be8 <__aeabi_d2f>
 8005aac:	4603      	mov	r3, r0
 8005aae:	60fb      	str	r3, [r7, #12]
            harmonic_sample += sin(2.0 * M_PI * (float)i * 3 / ((float)DDS_LUT_SAMPLES)) / 3;
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7fa fd49 	bl	8000548 <__aeabi_f2d>
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	460d      	mov	r5, r1
 8005aba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005abc:	ee07 3a90 	vmov	s15, r3
 8005ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ac4:	ee17 0a90 	vmov	r0, s15
 8005ac8:	f7fa fd3e 	bl	8000548 <__aeabi_f2d>
 8005acc:	a36e      	add	r3, pc, #440	; (adr r3, 8005c88 <generate_waveform+0x998>)
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f7fa fd91 	bl	80005f8 <__aeabi_dmul>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4610      	mov	r0, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	4b6c      	ldr	r3, [pc, #432]	; (8005c94 <generate_waveform+0x9a4>)
 8005ae4:	f7fa fd88 	bl	80005f8 <__aeabi_dmul>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4610      	mov	r0, r2
 8005aee:	4619      	mov	r1, r3
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	4b66      	ldr	r3, [pc, #408]	; (8005c90 <generate_waveform+0x9a0>)
 8005af6:	f7fa fea9 	bl	800084c <__aeabi_ddiv>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	ec43 2b17 	vmov	d7, r2, r3
 8005b02:	eeb0 0a47 	vmov.f32	s0, s14
 8005b06:	eef0 0a67 	vmov.f32	s1, s15
 8005b0a:	f00a fcc1 	bl	8010490 <sin>
 8005b0e:	ec51 0b10 	vmov	r0, r1, d0
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	4b5f      	ldr	r3, [pc, #380]	; (8005c94 <generate_waveform+0x9a4>)
 8005b18:	f7fa fe98 	bl	800084c <__aeabi_ddiv>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4620      	mov	r0, r4
 8005b22:	4629      	mov	r1, r5
 8005b24:	f7fa fbb2 	bl	800028c <__adddf3>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4619      	mov	r1, r3
 8005b30:	f7fb f85a 	bl	8000be8 <__aeabi_d2f>
 8005b34:	4603      	mov	r3, r0
 8005b36:	60fb      	str	r3, [r7, #12]
            harmonic_sample += sin(2.0 * M_PI * (float)i * 7 / ((float)DDS_LUT_SAMPLES)) / 7;
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7fa fd05 	bl	8000548 <__aeabi_f2d>
 8005b3e:	4604      	mov	r4, r0
 8005b40:	460d      	mov	r5, r1
 8005b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b44:	ee07 3a90 	vmov	s15, r3
 8005b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b4c:	ee17 0a90 	vmov	r0, s15
 8005b50:	f7fa fcfa 	bl	8000548 <__aeabi_f2d>
 8005b54:	a34c      	add	r3, pc, #304	; (adr r3, 8005c88 <generate_waveform+0x998>)
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	f7fa fd4d 	bl	80005f8 <__aeabi_dmul>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4610      	mov	r0, r2
 8005b64:	4619      	mov	r1, r3
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	4b4b      	ldr	r3, [pc, #300]	; (8005c98 <generate_waveform+0x9a8>)
 8005b6c:	f7fa fd44 	bl	80005f8 <__aeabi_dmul>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4610      	mov	r0, r2
 8005b76:	4619      	mov	r1, r3
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	4b44      	ldr	r3, [pc, #272]	; (8005c90 <generate_waveform+0x9a0>)
 8005b7e:	f7fa fe65 	bl	800084c <__aeabi_ddiv>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	ec43 2b17 	vmov	d7, r2, r3
 8005b8a:	eeb0 0a47 	vmov.f32	s0, s14
 8005b8e:	eef0 0a67 	vmov.f32	s1, s15
 8005b92:	f00a fc7d 	bl	8010490 <sin>
 8005b96:	ec51 0b10 	vmov	r0, r1, d0
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	4b3e      	ldr	r3, [pc, #248]	; (8005c98 <generate_waveform+0x9a8>)
 8005ba0:	f7fa fe54 	bl	800084c <__aeabi_ddiv>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4620      	mov	r0, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	f7fa fb6e 	bl	800028c <__adddf3>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	f7fb f816 	bl	8000be8 <__aeabi_d2f>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	60fb      	str	r3, [r7, #12]
            harmonic_sample += sin(2.0 * M_PI * (float)i * 8 / ((float)DDS_LUT_SAMPLES)) / 8;
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f7fa fcc1 	bl	8000548 <__aeabi_f2d>
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	460d      	mov	r5, r1
 8005bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bcc:	ee07 3a90 	vmov	s15, r3
 8005bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bd4:	ee17 0a90 	vmov	r0, s15
 8005bd8:	f7fa fcb6 	bl	8000548 <__aeabi_f2d>
 8005bdc:	a32a      	add	r3, pc, #168	; (adr r3, 8005c88 <generate_waveform+0x998>)
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	f7fa fd09 	bl	80005f8 <__aeabi_dmul>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	4610      	mov	r0, r2
 8005bec:	4619      	mov	r1, r3
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <generate_waveform+0x9ac>)
 8005bf4:	f7fa fd00 	bl	80005f8 <__aeabi_dmul>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	4619      	mov	r1, r3
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	4b22      	ldr	r3, [pc, #136]	; (8005c90 <generate_waveform+0x9a0>)
 8005c06:	f7fa fe21 	bl	800084c <__aeabi_ddiv>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	ec43 2b17 	vmov	d7, r2, r3
 8005c12:	eeb0 0a47 	vmov.f32	s0, s14
 8005c16:	eef0 0a67 	vmov.f32	s1, s15
 8005c1a:	f00a fc39 	bl	8010490 <sin>
 8005c1e:	ec51 0b10 	vmov	r0, r1, d0
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	4b1d      	ldr	r3, [pc, #116]	; (8005c9c <generate_waveform+0x9ac>)
 8005c28:	f7fa fe10 	bl	800084c <__aeabi_ddiv>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4620      	mov	r0, r4
 8005c32:	4629      	mov	r1, r5
 8005c34:	f7fa fb2a 	bl	800028c <__adddf3>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4619      	mov	r1, r3
 8005c40:	f7fa ffd2 	bl	8000be8 <__aeabi_d2f>
 8005c44:	4603      	mov	r3, r0
 8005c46:	60fb      	str	r3, [r7, #12]
            lookup_table[i] = (2048 * harmonic_sample);
 8005c48:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c4c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005ca0 <generate_waveform+0x9b0>
 8005c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c60:	ee17 2a90 	vmov	r2, s15
 8005c64:	b212      	sxth	r2, r2
 8005c66:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < DDS_LUT_SAMPLES; i++)
 8005c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c74:	f6ff aef3 	blt.w	8005a5e <generate_waveform+0x76e>
        }
    }
    break;
 8005c78:	bf00      	nop
    }
}
 8005c7a:	bf00      	nop
 8005c7c:	3798      	adds	r7, #152	; 0x98
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c84:	f3af 8000 	nop.w
 8005c88:	54442d18 	.word	0x54442d18
 8005c8c:	401921fb 	.word	0x401921fb
 8005c90:	40900000 	.word	0x40900000
 8005c94:	40080000 	.word	0x40080000
 8005c98:	401c0000 	.word	0x401c0000
 8005c9c:	40200000 	.word	0x40200000
 8005ca0:	45000000 	.word	0x45000000
 8005ca4:	66666666 	.word	0x66666666
 8005ca8:	3fe66666 	.word	0x3fe66666
 8005cac:	33333333 	.word	0x33333333
 8005cb0:	3fd33333 	.word	0x3fd33333

08005cb4 <set_output_waveform>:

void set_output_waveform(WaveType wave)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	71fb      	strb	r3, [r7, #7]

    if (output_wavetype == wave)
 8005cbe:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <set_output_waveform+0x3c>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	79fa      	ldrb	r2, [r7, #7]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d00e      	beq.n	8005ce6 <set_output_waveform+0x32>
    {
        return;
    }
    output_wavetype = wave;
 8005cc8:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <set_output_waveform+0x3c>)
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	7013      	strb	r3, [r2, #0]

    //	for (int i = 0; i < DDS_LUT_SAMPLES; i++) {
    //		DDS_LUT_SEL[i] = DDS_LUT[wave][i];
    //	}

    HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)DDS_LUT[wave], (uint32_t)DDS_LUT_SEL, DDS_LUT_SAMPLES);
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	02db      	lsls	r3, r3, #11
 8005cd2:	4a08      	ldr	r2, [pc, #32]	; (8005cf4 <set_output_waveform+0x40>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4a07      	ldr	r2, [pc, #28]	; (8005cf8 <set_output_waveform+0x44>)
 8005cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cde:	4807      	ldr	r0, [pc, #28]	; (8005cfc <set_output_waveform+0x48>)
 8005ce0:	f002 fbce 	bl	8008480 <HAL_DMA_Start_IT>
 8005ce4:	e000      	b.n	8005ce8 <set_output_waveform+0x34>
        return;
 8005ce6:	bf00      	nop
}
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	2000007c 	.word	0x2000007c
 8005cf4:	20000760 	.word	0x20000760
 8005cf8:	20003f60 	.word	0x20003f60
 8005cfc:	200005c0 	.word	0x200005c0

08005d00 <display_wave>:

void display_wave(u8g2_t *u8g2, uint16_t x, uint16_t y)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	807b      	strh	r3, [r7, #2]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	803b      	strh	r3, [r7, #0]
    switch (output_wavetype)
 8005d10:	4b33      	ldr	r3, [pc, #204]	; (8005de0 <display_wave+0xe0>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b06      	cmp	r3, #6
 8005d16:	d853      	bhi.n	8005dc0 <display_wave+0xc0>
 8005d18:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <display_wave+0x20>)
 8005d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1e:	bf00      	nop
 8005d20:	08005d3d 	.word	0x08005d3d
 8005d24:	08005d53 	.word	0x08005d53
 8005d28:	08005d69 	.word	0x08005d69
 8005d2c:	08005d7f 	.word	0x08005d7f
 8005d30:	08005dc1 	.word	0x08005dc1
 8005d34:	08005d95 	.word	0x08005d95
 8005d38:	08005dab 	.word	0x08005dab
    {
    case SAWTOOTH: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005d3c:	4929      	ldr	r1, [pc, #164]	; (8005de4 <display_wave+0xe4>)
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fc fa24 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, "//");
 8005d44:	883a      	ldrh	r2, [r7, #0]
 8005d46:	8879      	ldrh	r1, [r7, #2]
 8005d48:	4b27      	ldr	r3, [pc, #156]	; (8005de8 <display_wave+0xe8>)
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fc f97c 	bl	8002048 <u8g2_DrawUTF8>
        break;
 8005d50:	e041      	b.n	8005dd6 <display_wave+0xd6>
    }
    break;
    case SINE: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005d52:	4924      	ldr	r1, [pc, #144]	; (8005de4 <display_wave+0xe4>)
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7fc fa19 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, "◠◡");
 8005d5a:	883a      	ldrh	r2, [r7, #0]
 8005d5c:	8879      	ldrh	r1, [r7, #2]
 8005d5e:	4b23      	ldr	r3, [pc, #140]	; (8005dec <display_wave+0xec>)
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7fc f971 	bl	8002048 <u8g2_DrawUTF8>
    }
    break;
 8005d66:	e036      	b.n	8005dd6 <display_wave+0xd6>
    case SQUARE: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005d68:	491e      	ldr	r1, [pc, #120]	; (8005de4 <display_wave+0xe4>)
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fc fa0e 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, " \u25a0");
 8005d70:	883a      	ldrh	r2, [r7, #0]
 8005d72:	8879      	ldrh	r1, [r7, #2]
 8005d74:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <display_wave+0xf0>)
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fc f966 	bl	8002048 <u8g2_DrawUTF8>
    }
    break;
 8005d7c:	e02b      	b.n	8005dd6 <display_wave+0xd6>
    case TRIANGLE: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005d7e:	4919      	ldr	r1, [pc, #100]	; (8005de4 <display_wave+0xe4>)
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7fc fa03 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, " \u25b2");
 8005d86:	883a      	ldrh	r2, [r7, #0]
 8005d88:	8879      	ldrh	r1, [r7, #2]
 8005d8a:	4b1a      	ldr	r3, [pc, #104]	; (8005df4 <display_wave+0xf4>)
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7fc f95b 	bl	8002048 <u8g2_DrawUTF8>
    }
    break;
 8005d92:	e020      	b.n	8005dd6 <display_wave+0xd6>
    case RETRO1: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005d94:	4913      	ldr	r1, [pc, #76]	; (8005de4 <display_wave+0xe4>)
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fc f9f8 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, " \u2600");
 8005d9c:	883a      	ldrh	r2, [r7, #0]
 8005d9e:	8879      	ldrh	r1, [r7, #2]
 8005da0:	4b15      	ldr	r3, [pc, #84]	; (8005df8 <display_wave+0xf8>)
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fc f950 	bl	8002048 <u8g2_DrawUTF8>
    }
    break;
 8005da8:	e015      	b.n	8005dd6 <display_wave+0xd6>
    case RETRO2: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005daa:	490e      	ldr	r1, [pc, #56]	; (8005de4 <display_wave+0xe4>)
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7fc f9ed 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, " \u2604");
 8005db2:	883a      	ldrh	r2, [r7, #0]
 8005db4:	8879      	ldrh	r1, [r7, #2]
 8005db6:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <display_wave+0xfc>)
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7fc f945 	bl	8002048 <u8g2_DrawUTF8>
    }
    break;
 8005dbe:	e00a      	b.n	8005dd6 <display_wave+0xd6>
    default:
    case CLARINET: {
        u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005dc0:	4908      	ldr	r1, [pc, #32]	; (8005de4 <display_wave+0xe4>)
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fc f9e2 	bl	800218c <u8g2_SetFont>
        u8g2_DrawUTF8(u8g2, x, y, " \u265b");
 8005dc8:	883a      	ldrh	r2, [r7, #0]
 8005dca:	8879      	ldrh	r1, [r7, #2]
 8005dcc:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <display_wave+0x100>)
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fc f93a 	bl	8002048 <u8g2_DrawUTF8>
    }
    break;
 8005dd4:	bf00      	nop
    }
}
 8005dd6:	bf00      	nop
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	2000007c 	.word	0x2000007c
 8005de4:	08012840 	.word	0x08012840
 8005de8:	080127f4 	.word	0x080127f4
 8005dec:	080127f8 	.word	0x080127f8
 8005df0:	08012800 	.word	0x08012800
 8005df4:	08012808 	.word	0x08012808
 8005df8:	08012810 	.word	0x08012810
 8005dfc:	08012818 	.word	0x08012818
 8005e00:	08012820 	.word	0x08012820

08005e04 <synthesize_output>:


inline void synthesize_output(uint16_t keys, uint8_t volume, uint8_t octave, bool first_half)
{
 8005e04:	b490      	push	{r4, r7}
 8005e06:	b08e      	sub	sp, #56	; 0x38
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	4611      	mov	r1, r2
 8005e10:	461a      	mov	r2, r3
 8005e12:	4623      	mov	r3, r4
 8005e14:	80fb      	strh	r3, [r7, #6]
 8005e16:	4603      	mov	r3, r0
 8005e18:	717b      	strb	r3, [r7, #5]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	713b      	strb	r3, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	70fb      	strb	r3, [r7, #3]

    // determine which half needs to be filled
    int sample_begin, sample_end;
    if (first_half)
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <synthesize_output+0x30>
    {
        sample_begin = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	637b      	str	r3, [r7, #52]	; 0x34
        sample_end = DDS_OUT_SAMPLES / 2;
 8005e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e30:	633b      	str	r3, [r7, #48]	; 0x30
 8005e32:	e005      	b.n	8005e40 <synthesize_output+0x3c>
    }
    else
    {
        sample_begin = DDS_OUT_SAMPLES / 2;
 8005e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
        sample_end = DDS_OUT_SAMPLES;
 8005e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e3e:	633b      	str	r3, [r7, #48]	; 0x30
        }
    }*/

    uint8_t notes_played [12];

    for (int key = 0; key < 12; key++) {
 8005e40:	2300      	movs	r3, #0
 8005e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e44:	e032      	b.n	8005eac <synthesize_output+0xa8>
        notes_played[key] = 0;
 8005e46:	f107 020c 	add.w	r2, r7, #12
 8005e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4c:	4413      	add	r3, r2
 8005e4e:	2200      	movs	r2, #0
 8005e50:	701a      	strb	r2, [r3, #0]
        for (int board = 0; board < keyboard_count; board++) {
 8005e52:	2300      	movs	r3, #0
 8005e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e56:	e01f      	b.n	8005e98 <synthesize_output+0x94>
            notes_played[key] |= ((~(allKeys[board]) >> key) & 1) << board;
 8005e58:	f107 020c 	add.w	r2, r7, #12
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	4413      	add	r3, r2
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	b25a      	sxtb	r2, r3
 8005e64:	494a      	ldr	r1, [pc, #296]	; (8005f90 <synthesize_output+0x18c>)
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005e6c:	43d9      	mvns	r1, r3
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	fa41 f303 	asr.w	r3, r1, r3
 8005e74:	f003 0101 	and.w	r1, r3, #1
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7e:	b25b      	sxtb	r3, r3
 8005e80:	4313      	orrs	r3, r2
 8005e82:	b25b      	sxtb	r3, r3
 8005e84:	b2d9      	uxtb	r1, r3
 8005e86:	f107 020c 	add.w	r2, r7, #12
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	4413      	add	r3, r2
 8005e8e:	460a      	mov	r2, r1
 8005e90:	701a      	strb	r2, [r3, #0]
        for (int board = 0; board < keyboard_count; board++) {
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	3301      	adds	r3, #1
 8005e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e98:	4b3e      	ldr	r3, [pc, #248]	; (8005f94 <synthesize_output+0x190>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	dbd8      	blt.n	8005e58 <synthesize_output+0x54>
    for (int key = 0; key < 12; key++) {
 8005ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	2b0b      	cmp	r3, #11
 8005eb0:	ddc9      	ble.n	8005e46 <synthesize_output+0x42>

    


    // synthesise the waveform by addition
    for (int i = sample_begin; i < sample_end; i++)
 8005eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb6:	e061      	b.n	8005f7c <synthesize_output+0x178>
    {
        int32_t out = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	623b      	str	r3, [r7, #32]

        for (int key = 0; key < 12; key++){
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61fb      	str	r3, [r7, #28]
 8005ec0:	e048      	b.n	8005f54 <synthesize_output+0x150>
            if(notes_played[key]) {
 8005ec2:	f107 020c 	add.w	r2, r7, #12
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d03e      	beq.n	8005f4e <synthesize_output+0x14a>

                DDS_indices[key] += DDS_steps[key];
 8005ed0:	4a31      	ldr	r2, [pc, #196]	; (8005f98 <synthesize_output+0x194>)
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ed8:	4930      	ldr	r1, [pc, #192]	; (8005f9c <synthesize_output+0x198>)
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ee0:	441a      	add	r2, r3
 8005ee2:	492d      	ldr	r1, [pc, #180]	; (8005f98 <synthesize_output+0x194>)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                for (int board = 0; board < keyboard_count; board++){
 8005eea:	2300      	movs	r3, #0
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	e027      	b.n	8005f40 <synthesize_output+0x13c>

                    if(notes_played[key] & (1 << board)){
 8005ef0:	f107 020c 	add.w	r2, r7, #12
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	fa42 f303 	asr.w	r3, r2, r3
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d017      	beq.n	8005f3a <synthesize_output+0x136>
                        out += DDS_LUT_SEL[(DDS_indices[key] >> (13 - board + keyboard_position - octave)) & 0x03FF];
 8005f0a:	4a23      	ldr	r2, [pc, #140]	; (8005f98 <synthesize_output+0x194>)
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f1c3 030d 	rsb	r3, r3, #13
 8005f18:	4921      	ldr	r1, [pc, #132]	; (8005fa0 <synthesize_output+0x19c>)
 8005f1a:	7809      	ldrb	r1, [r1, #0]
 8005f1c:	b2c9      	uxtb	r1, r1
 8005f1e:	4419      	add	r1, r3
 8005f20:	793b      	ldrb	r3, [r7, #4]
 8005f22:	1acb      	subs	r3, r1, r3
 8005f24:	fa22 f303 	lsr.w	r3, r2, r3
 8005f28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f2c:	4a1d      	ldr	r2, [pc, #116]	; (8005fa4 <synthesize_output+0x1a0>)
 8005f2e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005f32:	461a      	mov	r2, r3
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	4413      	add	r3, r2
 8005f38:	623b      	str	r3, [r7, #32]
                for (int board = 0; board < keyboard_count; board++){
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	4b14      	ldr	r3, [pc, #80]	; (8005f94 <synthesize_output+0x190>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	dbd0      	blt.n	8005ef0 <synthesize_output+0xec>
        for (int key = 0; key < 12; key++){
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	3301      	adds	r3, #1
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2b0b      	cmp	r3, #11
 8005f58:	ddb3      	ble.n	8005ec2 <synthesize_output+0xbe>
                    }
                }
            }
        }

        DDS_OUT[i] = ((uint16_t)(out >> (12 - volume))) + 2048;
 8005f5a:	797b      	ldrb	r3, [r7, #5]
 8005f5c:	f1c3 030c 	rsb	r3, r3, #12
 8005f60:	6a3a      	ldr	r2, [r7, #32]
 8005f62:	fa42 f303 	asr.w	r3, r2, r3
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6c:	b299      	uxth	r1, r3
 8005f6e:	4a0e      	ldr	r2, [pc, #56]	; (8005fa8 <synthesize_output+0x1a4>)
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = sample_begin; i < sample_end; i++)
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	3301      	adds	r3, #1
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	429a      	cmp	r2, r3
 8005f82:	db99      	blt.n	8005eb8 <synthesize_output+0xb4>
        //DDS_OUT[i] = 0;
    }
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	3738      	adds	r7, #56	; 0x38
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc90      	pop	{r4, r7}
 8005f8e:	4770      	bx	lr
 8005f90:	20000660 	.word	0x20000660
 8005f94:	20000001 	.word	0x20000001
 8005f98:	20004760 	.word	0x20004760
 8005f9c:	20004790 	.word	0x20004790
 8005fa0:	2000031c 	.word	0x2000031c
 8005fa4:	20003f60 	.word	0x20003f60
 8005fa8:	200047c0 	.word	0x200047c0

08005fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005fe4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005fb0:	f7ff f918 	bl	80051e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005fb4:	480c      	ldr	r0, [pc, #48]	; (8005fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005fb6:	490d      	ldr	r1, [pc, #52]	; (8005fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8005fb8:	4a0d      	ldr	r2, [pc, #52]	; (8005ff0 <LoopForever+0xe>)
  movs r3, #0
 8005fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005fbc:	e002      	b.n	8005fc4 <LoopCopyDataInit>

08005fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fc2:	3304      	adds	r3, #4

08005fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fc8:	d3f9      	bcc.n	8005fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fca:	4a0a      	ldr	r2, [pc, #40]	; (8005ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005fcc:	4c0a      	ldr	r4, [pc, #40]	; (8005ff8 <LoopForever+0x16>)
  movs r3, #0
 8005fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fd0:	e001      	b.n	8005fd6 <LoopFillZerobss>

08005fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fd4:	3204      	adds	r2, #4

08005fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fd8:	d3fb      	bcc.n	8005fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005fda:	f009 fd55 	bl	800fa88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005fde:	f7fd fe63 	bl	8003ca8 <main>

08005fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8005fe2:	e7fe      	b.n	8005fe2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005fe4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fec:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8005ff0:	0801f9e8 	.word	0x0801f9e8
  ldr r2, =_sbss
 8005ff4:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8005ff8:	2000b2e4 	.word	0x2000b2e4

08005ffc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ffc:	e7fe      	b.n	8005ffc <ADC1_IRQHandler>

08005ffe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006008:	2003      	movs	r0, #3
 800600a:	f001 fe42 	bl	8007c92 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800600e:	200f      	movs	r0, #15
 8006010:	f7fe ffe4 	bl	8004fdc <HAL_InitTick>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	71fb      	strb	r3, [r7, #7]
 800601e:	e001      	b.n	8006024 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006020:	f7fe fd46 	bl	8004ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006024:	79fb      	ldrb	r3, [r7, #7]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006034:	4b06      	ldr	r3, [pc, #24]	; (8006050 <HAL_IncTick+0x20>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	461a      	mov	r2, r3
 800603a:	4b06      	ldr	r3, [pc, #24]	; (8006054 <HAL_IncTick+0x24>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4413      	add	r3, r2
 8006040:	4a04      	ldr	r2, [pc, #16]	; (8006054 <HAL_IncTick+0x24>)
 8006042:	6013      	str	r3, [r2, #0]
}
 8006044:	bf00      	nop
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	20000084 	.word	0x20000084
 8006054:	200087c0 	.word	0x200087c0

08006058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
  return uwTick;
 800605c:	4b03      	ldr	r3, [pc, #12]	; (800606c <HAL_GetTick+0x14>)
 800605e:	681b      	ldr	r3, [r3, #0]
}
 8006060:	4618      	mov	r0, r3
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	200087c0 	.word	0x200087c0

08006070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006078:	f7ff ffee 	bl	8006058 <HAL_GetTick>
 800607c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006088:	d005      	beq.n	8006096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800608a:	4b0a      	ldr	r3, [pc, #40]	; (80060b4 <HAL_Delay+0x44>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006096:	bf00      	nop
 8006098:	f7ff ffde 	bl	8006058 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d8f7      	bhi.n	8006098 <HAL_Delay+0x28>
  {
  }
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000084 	.word	0x20000084

080060b8 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80060bc:	4b03      	ldr	r3, [pc, #12]	; (80060cc <HAL_GetUIDw0+0x14>)
 80060be:	681b      	ldr	r3, [r3, #0]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	1fff7590 	.word	0x1fff7590

080060d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	609a      	str	r2, [r3, #8]
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	609a      	str	r2, [r3, #8]
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3360      	adds	r3, #96	; 0x60
 800614a:	461a      	mov	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	4b08      	ldr	r3, [pc, #32]	; (800617c <LL_ADC_SetOffset+0x44>)
 800615a:	4013      	ands	r3, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	4313      	orrs	r3, r2
 8006168:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006170:	bf00      	nop
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	03fff000 	.word	0x03fff000

08006180 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3360      	adds	r3, #96	; 0x60
 800618e:	461a      	mov	r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3360      	adds	r3, #96	; 0x60
 80061bc:	461a      	mov	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	431a      	orrs	r2, r3
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80061d6:	bf00      	nop
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b087      	sub	sp, #28
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3330      	adds	r3, #48	; 0x30
 80061f2:	461a      	mov	r2, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	0a1b      	lsrs	r3, r3, #8
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	4413      	add	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f003 031f 	and.w	r3, r3, #31
 800620c:	211f      	movs	r1, #31
 800620e:	fa01 f303 	lsl.w	r3, r1, r3
 8006212:	43db      	mvns	r3, r3
 8006214:	401a      	ands	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	0e9b      	lsrs	r3, r3, #26
 800621a:	f003 011f 	and.w	r1, r3, #31
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f003 031f 	and.w	r3, r3, #31
 8006224:	fa01 f303 	lsl.w	r3, r1, r3
 8006228:	431a      	orrs	r2, r3
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800623a:	b480      	push	{r7}
 800623c:	b087      	sub	sp, #28
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3314      	adds	r3, #20
 800624a:	461a      	mov	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	0e5b      	lsrs	r3, r3, #25
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	4413      	add	r3, r2
 8006258:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	0d1b      	lsrs	r3, r3, #20
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2107      	movs	r1, #7
 8006268:	fa01 f303 	lsl.w	r3, r1, r3
 800626c:	43db      	mvns	r3, r3
 800626e:	401a      	ands	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	0d1b      	lsrs	r3, r3, #20
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	fa01 f303 	lsl.w	r3, r1, r3
 800627e:	431a      	orrs	r2, r3
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006284:	bf00      	nop
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062a8:	43db      	mvns	r3, r3
 80062aa:	401a      	ands	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f003 0318 	and.w	r3, r3, #24
 80062b2:	4908      	ldr	r1, [pc, #32]	; (80062d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80062b4:	40d9      	lsrs	r1, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	400b      	ands	r3, r1
 80062ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062be:	431a      	orrs	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	0007ffff 	.word	0x0007ffff

080062d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80062e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6093      	str	r3, [r2, #8]
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800630c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006310:	d101      	bne.n	8006316 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006338:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006360:	d101      	bne.n	8006366 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <LL_ADC_IsEnabled+0x18>
 8006388:	2301      	movs	r3, #1
 800638a:	e000      	b.n	800638e <LL_ADC_IsEnabled+0x1a>
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d101      	bne.n	80063b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d101      	bne.n	80063d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
	...

080063e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e12c      	b.n	800665c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7fe fb75 	bl	8004b00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff ff67 	bl	80062fc <LL_ADC_IsDeepPowerDownEnabled>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff ff4d 	bl	80062d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff ff82 	bl	800634c <LL_ADC_IsInternalRegulatorEnabled>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d115      	bne.n	800647a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff ff66 	bl	8006324 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006458:	4b82      	ldr	r3, [pc, #520]	; (8006664 <HAL_ADC_Init+0x27c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	099b      	lsrs	r3, r3, #6
 800645e:	4a82      	ldr	r2, [pc, #520]	; (8006668 <HAL_ADC_Init+0x280>)
 8006460:	fba2 2303 	umull	r2, r3, r2, r3
 8006464:	099b      	lsrs	r3, r3, #6
 8006466:	3301      	adds	r3, #1
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800646c:	e002      	b.n	8006474 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	3b01      	subs	r3, #1
 8006472:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f9      	bne.n	800646e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff ff64 	bl	800634c <LL_ADC_IsInternalRegulatorEnabled>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10d      	bne.n	80064a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	f043 0210 	orr.w	r2, r3, #16
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649a:	f043 0201 	orr.w	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff ff75 	bl	800639a <LL_ADC_REG_IsConversionOngoing>
 80064b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b6:	f003 0310 	and.w	r3, r3, #16
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f040 80c5 	bne.w	800664a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f040 80c1 	bne.w	800664a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80064d0:	f043 0202 	orr.w	r2, r3, #2
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff ff49 	bl	8006374 <LL_ADC_IsEnabled>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10b      	bne.n	8006500 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064e8:	4860      	ldr	r0, [pc, #384]	; (800666c <HAL_ADC_Init+0x284>)
 80064ea:	f7ff ff43 	bl	8006374 <LL_ADC_IsEnabled>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d105      	bne.n	8006500 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	4619      	mov	r1, r3
 80064fa:	485d      	ldr	r0, [pc, #372]	; (8006670 <HAL_ADC_Init+0x288>)
 80064fc:	f7ff fde8 	bl	80060d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	7e5b      	ldrb	r3, [r3, #25]
 8006504:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800650a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006510:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006516:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800651e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006520:	4313      	orrs	r3, r2
 8006522:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d106      	bne.n	800653c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	3b01      	subs	r3, #1
 8006534:	045b      	lsls	r3, r3, #17
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	4313      	orrs	r3, r2
 800653a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	2b00      	cmp	r3, #0
 8006542:	d009      	beq.n	8006558 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006548:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	4313      	orrs	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	4b45      	ldr	r3, [pc, #276]	; (8006674 <HAL_ADC_Init+0x28c>)
 8006560:	4013      	ands	r3, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	69b9      	ldr	r1, [r7, #24]
 8006568:	430b      	orrs	r3, r1
 800656a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff ff12 	bl	800639a <LL_ADC_REG_IsConversionOngoing>
 8006576:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff ff1f 	bl	80063c0 <LL_ADC_INJ_IsConversionOngoing>
 8006582:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d13d      	bne.n	8006606 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d13a      	bne.n	8006606 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006594:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800659c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800659e:	4313      	orrs	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ac:	f023 0302 	bic.w	r3, r3, #2
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6812      	ldr	r2, [r2, #0]
 80065b4:	69b9      	ldr	r1, [r7, #24]
 80065b6:	430b      	orrs	r3, r1
 80065b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d118      	bne.n	80065f6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065ce:	f023 0304 	bic.w	r3, r3, #4
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80065da:	4311      	orrs	r1, r2
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80065e0:	4311      	orrs	r1, r2
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065e6:	430a      	orrs	r2, r1
 80065e8:	431a      	orrs	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	611a      	str	r2, [r3, #16]
 80065f4:	e007      	b.n	8006606 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0201 	bic.w	r2, r2, #1
 8006604:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d10c      	bne.n	8006628 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	f023 010f 	bic.w	r1, r3, #15
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	1e5a      	subs	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	631a      	str	r2, [r3, #48]	; 0x30
 8006626:	e007      	b.n	8006638 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 020f 	bic.w	r2, r2, #15
 8006636:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663c:	f023 0303 	bic.w	r3, r3, #3
 8006640:	f043 0201 	orr.w	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	655a      	str	r2, [r3, #84]	; 0x54
 8006648:	e007      	b.n	800665a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664e:	f043 0210 	orr.w	r2, r3, #16
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800665a:	7ffb      	ldrb	r3, [r7, #31]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3720      	adds	r7, #32
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20000078 	.word	0x20000078
 8006668:	053e2d63 	.word	0x053e2d63
 800666c:	50040000 	.word	0x50040000
 8006670:	50040300 	.word	0x50040300
 8006674:	fff0c007 	.word	0xfff0c007

08006678 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b0b6      	sub	sp, #216	; 0xd8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_ADC_ConfigChannel+0x22>
 8006696:	2302      	movs	r3, #2
 8006698:	e3b9      	b.n	8006e0e <HAL_ADC_ConfigChannel+0x796>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff fe77 	bl	800639a <LL_ADC_REG_IsConversionOngoing>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f040 839e 	bne.w	8006df0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b05      	cmp	r3, #5
 80066ba:	d824      	bhi.n	8006706 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	3b02      	subs	r3, #2
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d81b      	bhi.n	80066fe <HAL_ADC_ConfigChannel+0x86>
 80066c6:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <HAL_ADC_ConfigChannel+0x54>)
 80066c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066cc:	080066dd 	.word	0x080066dd
 80066d0:	080066e5 	.word	0x080066e5
 80066d4:	080066ed 	.word	0x080066ed
 80066d8:	080066f5 	.word	0x080066f5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	220c      	movs	r2, #12
 80066e0:	605a      	str	r2, [r3, #4]
          break;
 80066e2:	e011      	b.n	8006708 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2212      	movs	r2, #18
 80066e8:	605a      	str	r2, [r3, #4]
          break;
 80066ea:	e00d      	b.n	8006708 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2218      	movs	r2, #24
 80066f0:	605a      	str	r2, [r3, #4]
          break;
 80066f2:	e009      	b.n	8006708 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066fa:	605a      	str	r2, [r3, #4]
          break;
 80066fc:	e004      	b.n	8006708 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2206      	movs	r2, #6
 8006702:	605a      	str	r2, [r3, #4]
          break;
 8006704:	e000      	b.n	8006708 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8006706:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	6859      	ldr	r1, [r3, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	461a      	mov	r2, r3
 8006716:	f7ff fd64 	bl	80061e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fe3b 	bl	800639a <LL_ADC_REG_IsConversionOngoing>
 8006724:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4618      	mov	r0, r3
 800672e:	f7ff fe47 	bl	80063c0 <LL_ADC_INJ_IsConversionOngoing>
 8006732:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006736:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800673a:	2b00      	cmp	r3, #0
 800673c:	f040 81a6 	bne.w	8006a8c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006744:	2b00      	cmp	r3, #0
 8006746:	f040 81a1 	bne.w	8006a8c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	6819      	ldr	r1, [r3, #0]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	461a      	mov	r2, r3
 8006758:	f7ff fd6f 	bl	800623a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	695a      	ldr	r2, [r3, #20]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	08db      	lsrs	r3, r3, #3
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b04      	cmp	r3, #4
 800677c:	d00a      	beq.n	8006794 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	6919      	ldr	r1, [r3, #16]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800678e:	f7ff fcd3 	bl	8006138 <LL_ADC_SetOffset>
 8006792:	e17b      	b.n	8006a8c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2100      	movs	r1, #0
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fcf0 	bl	8006180 <LL_ADC_GetOffsetChannel>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10a      	bne.n	80067c0 <HAL_ADC_ConfigChannel+0x148>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2100      	movs	r1, #0
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff fce5 	bl	8006180 <LL_ADC_GetOffsetChannel>
 80067b6:	4603      	mov	r3, r0
 80067b8:	0e9b      	lsrs	r3, r3, #26
 80067ba:	f003 021f 	and.w	r2, r3, #31
 80067be:	e01e      	b.n	80067fe <HAL_ADC_ConfigChannel+0x186>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2100      	movs	r1, #0
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff fcda 	bl	8006180 <LL_ADC_GetOffsetChannel>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067d6:	fa93 f3a3 	rbit	r3, r3
 80067da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80067de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80067e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80067ee:	2320      	movs	r3, #32
 80067f0:	e004      	b.n	80067fc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80067f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067f6:	fab3 f383 	clz	r3, r3
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006806:	2b00      	cmp	r3, #0
 8006808:	d105      	bne.n	8006816 <HAL_ADC_ConfigChannel+0x19e>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	0e9b      	lsrs	r3, r3, #26
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	e018      	b.n	8006848 <HAL_ADC_ConfigChannel+0x1d0>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800681e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006822:	fa93 f3a3 	rbit	r3, r3
 8006826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800682a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800682e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006832:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800683a:	2320      	movs	r3, #32
 800683c:	e004      	b.n	8006848 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800683e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006842:	fab3 f383 	clz	r3, r3
 8006846:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006848:	429a      	cmp	r2, r3
 800684a:	d106      	bne.n	800685a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2200      	movs	r2, #0
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff fca9 	bl	80061ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2101      	movs	r1, #1
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff fc8d 	bl	8006180 <LL_ADC_GetOffsetChannel>
 8006866:	4603      	mov	r3, r0
 8006868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <HAL_ADC_ConfigChannel+0x20e>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2101      	movs	r1, #1
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff fc82 	bl	8006180 <LL_ADC_GetOffsetChannel>
 800687c:	4603      	mov	r3, r0
 800687e:	0e9b      	lsrs	r3, r3, #26
 8006880:	f003 021f 	and.w	r2, r3, #31
 8006884:	e01e      	b.n	80068c4 <HAL_ADC_ConfigChannel+0x24c>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2101      	movs	r1, #1
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff fc77 	bl	8006180 <LL_ADC_GetOffsetChannel>
 8006892:	4603      	mov	r3, r0
 8006894:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006898:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800689c:	fa93 f3a3 	rbit	r3, r3
 80068a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80068a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80068ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80068b4:	2320      	movs	r3, #32
 80068b6:	e004      	b.n	80068c2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80068b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068bc:	fab3 f383 	clz	r3, r3
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d105      	bne.n	80068dc <HAL_ADC_ConfigChannel+0x264>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	0e9b      	lsrs	r3, r3, #26
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	e018      	b.n	800690e <HAL_ADC_ConfigChannel+0x296>
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068e8:	fa93 f3a3 	rbit	r3, r3
 80068ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80068f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80068f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80068f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8006900:	2320      	movs	r3, #32
 8006902:	e004      	b.n	800690e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8006904:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006908:	fab3 f383 	clz	r3, r3
 800690c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800690e:	429a      	cmp	r2, r3
 8006910:	d106      	bne.n	8006920 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2200      	movs	r2, #0
 8006918:	2101      	movs	r1, #1
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fc46 	bl	80061ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2102      	movs	r1, #2
 8006926:	4618      	mov	r0, r3
 8006928:	f7ff fc2a 	bl	8006180 <LL_ADC_GetOffsetChannel>
 800692c:	4603      	mov	r3, r0
 800692e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <HAL_ADC_ConfigChannel+0x2d4>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2102      	movs	r1, #2
 800693c:	4618      	mov	r0, r3
 800693e:	f7ff fc1f 	bl	8006180 <LL_ADC_GetOffsetChannel>
 8006942:	4603      	mov	r3, r0
 8006944:	0e9b      	lsrs	r3, r3, #26
 8006946:	f003 021f 	and.w	r2, r3, #31
 800694a:	e01e      	b.n	800698a <HAL_ADC_ConfigChannel+0x312>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2102      	movs	r1, #2
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff fc14 	bl	8006180 <LL_ADC_GetOffsetChannel>
 8006958:	4603      	mov	r3, r0
 800695a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800695e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006962:	fa93 f3a3 	rbit	r3, r3
 8006966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800696a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800696e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006972:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800697a:	2320      	movs	r3, #32
 800697c:	e004      	b.n	8006988 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800697e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006982:	fab3 f383 	clz	r3, r3
 8006986:	b2db      	uxtb	r3, r3
 8006988:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006992:	2b00      	cmp	r3, #0
 8006994:	d105      	bne.n	80069a2 <HAL_ADC_ConfigChannel+0x32a>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	0e9b      	lsrs	r3, r3, #26
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	e016      	b.n	80069d0 <HAL_ADC_ConfigChannel+0x358>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069ae:	fa93 f3a3 	rbit	r3, r3
 80069b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80069b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80069ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80069c2:	2320      	movs	r3, #32
 80069c4:	e004      	b.n	80069d0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80069c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069ca:	fab3 f383 	clz	r3, r3
 80069ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d106      	bne.n	80069e2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2200      	movs	r2, #0
 80069da:	2102      	movs	r1, #2
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff fbe5 	bl	80061ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2103      	movs	r1, #3
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff fbc9 	bl	8006180 <LL_ADC_GetOffsetChannel>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <HAL_ADC_ConfigChannel+0x396>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2103      	movs	r1, #3
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fbbe 	bl	8006180 <LL_ADC_GetOffsetChannel>
 8006a04:	4603      	mov	r3, r0
 8006a06:	0e9b      	lsrs	r3, r3, #26
 8006a08:	f003 021f 	and.w	r2, r3, #31
 8006a0c:	e017      	b.n	8006a3e <HAL_ADC_ConfigChannel+0x3c6>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2103      	movs	r1, #3
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff fbb3 	bl	8006180 <LL_ADC_GetOffsetChannel>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a20:	fa93 f3a3 	rbit	r3, r3
 8006a24:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a28:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006a2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8006a30:	2320      	movs	r3, #32
 8006a32:	e003      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8006a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a36:	fab3 f383 	clz	r3, r3
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d105      	bne.n	8006a56 <HAL_ADC_ConfigChannel+0x3de>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	0e9b      	lsrs	r3, r3, #26
 8006a50:	f003 031f 	and.w	r3, r3, #31
 8006a54:	e011      	b.n	8006a7a <HAL_ADC_ConfigChannel+0x402>
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a5e:	fa93 f3a3 	rbit	r3, r3
 8006a62:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a66:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8006a6e:	2320      	movs	r3, #32
 8006a70:	e003      	b.n	8006a7a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8006a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a74:	fab3 f383 	clz	r3, r3
 8006a78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d106      	bne.n	8006a8c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2200      	movs	r2, #0
 8006a84:	2103      	movs	r1, #3
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff fb90 	bl	80061ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff fc6f 	bl	8006374 <LL_ADC_IsEnabled>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f040 813f 	bne.w	8006d1c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	6819      	ldr	r1, [r3, #0]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f7ff fbf0 	bl	8006290 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	4a8e      	ldr	r2, [pc, #568]	; (8006cf0 <HAL_ADC_ConfigChannel+0x678>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	f040 8130 	bne.w	8006d1c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <HAL_ADC_ConfigChannel+0x46c>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	0e9b      	lsrs	r3, r3, #26
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	2b09      	cmp	r3, #9
 8006ada:	bf94      	ite	ls
 8006adc:	2301      	movls	r3, #1
 8006ade:	2300      	movhi	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	e019      	b.n	8006b18 <HAL_ADC_ConfigChannel+0x4a0>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aec:	fa93 f3a3 	rbit	r3, r3
 8006af0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006af4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006afc:	2320      	movs	r3, #32
 8006afe:	e003      	b.n	8006b08 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8006b00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b02:	fab3 f383 	clz	r3, r3
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	3301      	adds	r3, #1
 8006b0a:	f003 031f 	and.w	r3, r3, #31
 8006b0e:	2b09      	cmp	r3, #9
 8006b10:	bf94      	ite	ls
 8006b12:	2301      	movls	r3, #1
 8006b14:	2300      	movhi	r3, #0
 8006b16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d079      	beq.n	8006c10 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d107      	bne.n	8006b38 <HAL_ADC_ConfigChannel+0x4c0>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	0e9b      	lsrs	r3, r3, #26
 8006b2e:	3301      	adds	r3, #1
 8006b30:	069b      	lsls	r3, r3, #26
 8006b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b36:	e015      	b.n	8006b64 <HAL_ADC_ConfigChannel+0x4ec>
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b40:	fa93 f3a3 	rbit	r3, r3
 8006b44:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b48:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8006b50:	2320      	movs	r3, #32
 8006b52:	e003      	b.n	8006b5c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8006b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b56:	fab3 f383 	clz	r3, r3
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	069b      	lsls	r3, r3, #26
 8006b60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <HAL_ADC_ConfigChannel+0x50c>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	0e9b      	lsrs	r3, r3, #26
 8006b76:	3301      	adds	r3, #1
 8006b78:	f003 031f 	and.w	r3, r3, #31
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b82:	e017      	b.n	8006bb4 <HAL_ADC_ConfigChannel+0x53c>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b8c:	fa93 f3a3 	rbit	r3, r3
 8006b90:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b94:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8006b9c:	2320      	movs	r3, #32
 8006b9e:	e003      	b.n	8006ba8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8006ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba2:	fab3 f383 	clz	r3, r3
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	3301      	adds	r3, #1
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	2101      	movs	r1, #1
 8006bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb4:	ea42 0103 	orr.w	r1, r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10a      	bne.n	8006bda <HAL_ADC_ConfigChannel+0x562>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	0e9b      	lsrs	r3, r3, #26
 8006bca:	3301      	adds	r3, #1
 8006bcc:	f003 021f 	and.w	r2, r3, #31
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	4413      	add	r3, r2
 8006bd6:	051b      	lsls	r3, r3, #20
 8006bd8:	e018      	b.n	8006c0c <HAL_ADC_ConfigChannel+0x594>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	fa93 f3a3 	rbit	r3, r3
 8006be6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8006bf2:	2320      	movs	r3, #32
 8006bf4:	e003      	b.n	8006bfe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8006bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf8:	fab3 f383 	clz	r3, r3
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	3301      	adds	r3, #1
 8006c00:	f003 021f 	and.w	r2, r3, #31
 8006c04:	4613      	mov	r3, r2
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	4413      	add	r3, r2
 8006c0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	e080      	b.n	8006d12 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d107      	bne.n	8006c2c <HAL_ADC_ConfigChannel+0x5b4>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	0e9b      	lsrs	r3, r3, #26
 8006c22:	3301      	adds	r3, #1
 8006c24:	069b      	lsls	r3, r3, #26
 8006c26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c2a:	e015      	b.n	8006c58 <HAL_ADC_ConfigChannel+0x5e0>
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	fa93 f3a3 	rbit	r3, r3
 8006c38:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8006c44:	2320      	movs	r3, #32
 8006c46:	e003      	b.n	8006c50 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	fab3 f383 	clz	r3, r3
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	3301      	adds	r3, #1
 8006c52:	069b      	lsls	r3, r3, #26
 8006c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d109      	bne.n	8006c78 <HAL_ADC_ConfigChannel+0x600>
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	0e9b      	lsrs	r3, r3, #26
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	2101      	movs	r1, #1
 8006c72:	fa01 f303 	lsl.w	r3, r1, r3
 8006c76:	e017      	b.n	8006ca8 <HAL_ADC_ConfigChannel+0x630>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	fa93 f3a3 	rbit	r3, r3
 8006c84:	61fb      	str	r3, [r7, #28]
  return result;
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8006c90:	2320      	movs	r3, #32
 8006c92:	e003      	b.n	8006c9c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	fab3 f383 	clz	r3, r3
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca8:	ea42 0103 	orr.w	r1, r2, r3
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10d      	bne.n	8006cd4 <HAL_ADC_ConfigChannel+0x65c>
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	0e9b      	lsrs	r3, r3, #26
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	f003 021f 	and.w	r2, r3, #31
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	4413      	add	r3, r2
 8006cca:	3b1e      	subs	r3, #30
 8006ccc:	051b      	lsls	r3, r3, #20
 8006cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cd2:	e01d      	b.n	8006d10 <HAL_ADC_ConfigChannel+0x698>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	fa93 f3a3 	rbit	r3, r3
 8006ce0:	613b      	str	r3, [r7, #16]
  return result;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d103      	bne.n	8006cf4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8006cec:	2320      	movs	r3, #32
 8006cee:	e005      	b.n	8006cfc <HAL_ADC_ConfigChannel+0x684>
 8006cf0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	fab3 f383 	clz	r3, r3
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	f003 021f 	and.w	r2, r3, #31
 8006d02:	4613      	mov	r3, r2
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4413      	add	r3, r2
 8006d08:	3b1e      	subs	r3, #30
 8006d0a:	051b      	lsls	r3, r3, #20
 8006d0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d10:	430b      	orrs	r3, r1
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	6892      	ldr	r2, [r2, #8]
 8006d16:	4619      	mov	r1, r3
 8006d18:	f7ff fa8f 	bl	800623a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	4b3d      	ldr	r3, [pc, #244]	; (8006e18 <HAL_ADC_ConfigChannel+0x7a0>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d06c      	beq.n	8006e02 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d28:	483c      	ldr	r0, [pc, #240]	; (8006e1c <HAL_ADC_ConfigChannel+0x7a4>)
 8006d2a:	f7ff f9f7 	bl	800611c <LL_ADC_GetCommonPathInternalCh>
 8006d2e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a3a      	ldr	r2, [pc, #232]	; (8006e20 <HAL_ADC_ConfigChannel+0x7a8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d127      	bne.n	8006d8c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006d3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d121      	bne.n	8006d8c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a35      	ldr	r2, [pc, #212]	; (8006e24 <HAL_ADC_ConfigChannel+0x7ac>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d157      	bne.n	8006e02 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	482f      	ldr	r0, [pc, #188]	; (8006e1c <HAL_ADC_ConfigChannel+0x7a4>)
 8006d5e:	f7ff f9ca 	bl	80060f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d62:	4b31      	ldr	r3, [pc, #196]	; (8006e28 <HAL_ADC_ConfigChannel+0x7b0>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	099b      	lsrs	r3, r3, #6
 8006d68:	4a30      	ldr	r2, [pc, #192]	; (8006e2c <HAL_ADC_ConfigChannel+0x7b4>)
 8006d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6e:	099b      	lsrs	r3, r3, #6
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	4613      	mov	r3, r2
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006d7c:	e002      	b.n	8006d84 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f9      	bne.n	8006d7e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d8a:	e03a      	b.n	8006e02 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a27      	ldr	r2, [pc, #156]	; (8006e30 <HAL_ADC_ConfigChannel+0x7b8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d113      	bne.n	8006dbe <HAL_ADC_ConfigChannel+0x746>
 8006d96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10d      	bne.n	8006dbe <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1f      	ldr	r2, [pc, #124]	; (8006e24 <HAL_ADC_ConfigChannel+0x7ac>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d12a      	bne.n	8006e02 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006db4:	4619      	mov	r1, r3
 8006db6:	4819      	ldr	r0, [pc, #100]	; (8006e1c <HAL_ADC_ConfigChannel+0x7a4>)
 8006db8:	f7ff f99d 	bl	80060f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006dbc:	e021      	b.n	8006e02 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a1c      	ldr	r2, [pc, #112]	; (8006e34 <HAL_ADC_ConfigChannel+0x7bc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d11c      	bne.n	8006e02 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006dc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d116      	bne.n	8006e02 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a12      	ldr	r2, [pc, #72]	; (8006e24 <HAL_ADC_ConfigChannel+0x7ac>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d111      	bne.n	8006e02 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006dde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006de2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006de6:	4619      	mov	r1, r3
 8006de8:	480c      	ldr	r0, [pc, #48]	; (8006e1c <HAL_ADC_ConfigChannel+0x7a4>)
 8006dea:	f7ff f984 	bl	80060f6 <LL_ADC_SetCommonPathInternalCh>
 8006dee:	e008      	b.n	8006e02 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df4:	f043 0220 	orr.w	r2, r3, #32
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006e0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	37d8      	adds	r7, #216	; 0xd8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	80080000 	.word	0x80080000
 8006e1c:	50040300 	.word	0x50040300
 8006e20:	c7520000 	.word	0xc7520000
 8006e24:	50040000 	.word	0x50040000
 8006e28:	20000078 	.word	0x20000078
 8006e2c:	053e2d63 	.word	0x053e2d63
 8006e30:	cb840000 	.word	0xcb840000
 8006e34:	80000001 	.word	0x80000001

08006e38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e0ed      	b.n	8007026 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d102      	bne.n	8006e5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fd feb6 	bl	8004bc8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e6c:	f7ff f8f4 	bl	8006058 <HAL_GetTick>
 8006e70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e72:	e012      	b.n	8006e9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006e74:	f7ff f8f0 	bl	8006058 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b0a      	cmp	r3, #10
 8006e80:	d90b      	bls.n	8006e9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2205      	movs	r2, #5
 8006e92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e0c5      	b.n	8007026 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d0e5      	beq.n	8006e74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f022 0202 	bic.w	r2, r2, #2
 8006eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006eb8:	f7ff f8ce 	bl	8006058 <HAL_GetTick>
 8006ebc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006ebe:	e012      	b.n	8006ee6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ec0:	f7ff f8ca 	bl	8006058 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b0a      	cmp	r3, #10
 8006ecc:	d90b      	bls.n	8006ee6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2205      	movs	r2, #5
 8006ede:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e09f      	b.n	8007026 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e5      	bne.n	8006ec0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	7e1b      	ldrb	r3, [r3, #24]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d108      	bne.n	8006f0e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	e007      	b.n	8006f1e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	7e5b      	ldrb	r3, [r3, #25]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d108      	bne.n	8006f38 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	e007      	b.n	8006f48 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7e9b      	ldrb	r3, [r3, #26]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d108      	bne.n	8006f62 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 0220 	orr.w	r2, r2, #32
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e007      	b.n	8006f72 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0220 	bic.w	r2, r2, #32
 8006f70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	7edb      	ldrb	r3, [r3, #27]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d108      	bne.n	8006f8c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0210 	bic.w	r2, r2, #16
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e007      	b.n	8006f9c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0210 	orr.w	r2, r2, #16
 8006f9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	7f1b      	ldrb	r3, [r3, #28]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d108      	bne.n	8006fb6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0208 	orr.w	r2, r2, #8
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	e007      	b.n	8006fc6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0208 	bic.w	r2, r2, #8
 8006fc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	7f5b      	ldrb	r3, [r3, #29]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d108      	bne.n	8006fe0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f042 0204 	orr.w	r2, r2, #4
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e007      	b.n	8006ff0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0204 	bic.w	r2, r2, #4
 8006fee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	431a      	orrs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	ea42 0103 	orr.w	r1, r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	1e5a      	subs	r2, r3, #1
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800702e:	b480      	push	{r7}
 8007030:	b087      	sub	sp, #28
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007044:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007046:	7cfb      	ldrb	r3, [r7, #19]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d003      	beq.n	8007054 <HAL_CAN_ConfigFilter+0x26>
 800704c:	7cfb      	ldrb	r3, [r7, #19]
 800704e:	2b02      	cmp	r3, #2
 8007050:	f040 80aa 	bne.w	80071a8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800705a:	f043 0201 	orr.w	r2, r3, #1
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	f003 031f 	and.w	r3, r3, #31
 800706c:	2201      	movs	r2, #1
 800706e:	fa02 f303 	lsl.w	r3, r2, r3
 8007072:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	43db      	mvns	r3, r3
 800707e:	401a      	ands	r2, r3
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d123      	bne.n	80070d6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	43db      	mvns	r3, r3
 8007098:	401a      	ands	r2, r3
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80070b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	3248      	adds	r2, #72	; 0x48
 80070b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80070cc:	6979      	ldr	r1, [r7, #20]
 80070ce:	3348      	adds	r3, #72	; 0x48
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	440b      	add	r3, r1
 80070d4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d122      	bne.n	8007124 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80070fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	3248      	adds	r2, #72	; 0x48
 8007104:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007118:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800711a:	6979      	ldr	r1, [r7, #20]
 800711c:	3348      	adds	r3, #72	; 0x48
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	440b      	add	r3, r1
 8007122:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d109      	bne.n	8007140 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	43db      	mvns	r3, r3
 8007136:	401a      	ands	r2, r3
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800713e:	e007      	b.n	8007150 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	431a      	orrs	r2, r3
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d109      	bne.n	800716c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	43db      	mvns	r3, r3
 8007162:	401a      	ands	r2, r3
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800716a:	e007      	b.n	800717c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	431a      	orrs	r2, r3
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d107      	bne.n	8007194 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	431a      	orrs	r2, r3
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800719a:	f023 0201 	bic.w	r2, r3, #1
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	e006      	b.n	80071b6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
  }
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d12e      	bne.n	8007234 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2202      	movs	r2, #2
 80071da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0201 	bic.w	r2, r2, #1
 80071ec:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071ee:	f7fe ff33 	bl	8006058 <HAL_GetTick>
 80071f2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80071f4:	e012      	b.n	800721c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80071f6:	f7fe ff2f 	bl	8006058 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b0a      	cmp	r3, #10
 8007202:	d90b      	bls.n	800721c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2205      	movs	r2, #5
 8007214:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e012      	b.n	8007242 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e5      	bne.n	80071f6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	e006      	b.n	8007242 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
  }
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800724a:	b480      	push	{r7}
 800724c:	b089      	sub	sp, #36	; 0x24
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	607a      	str	r2, [r7, #4]
 8007256:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800725e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007268:	7ffb      	ldrb	r3, [r7, #31]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d003      	beq.n	8007276 <HAL_CAN_AddTxMessage+0x2c>
 800726e:	7ffb      	ldrb	r3, [r7, #31]
 8007270:	2b02      	cmp	r3, #2
 8007272:	f040 80ad 	bne.w	80073d0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10a      	bne.n	8007296 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007286:	2b00      	cmp	r3, #0
 8007288:	d105      	bne.n	8007296 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 8095 	beq.w	80073c0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	0e1b      	lsrs	r3, r3, #24
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80072a0:	2201      	movs	r2, #1
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	409a      	lsls	r2, r3
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10d      	bne.n	80072ce <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072bc:	68f9      	ldr	r1, [r7, #12]
 80072be:	6809      	ldr	r1, [r1, #0]
 80072c0:	431a      	orrs	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	3318      	adds	r3, #24
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	440b      	add	r3, r1
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	e00f      	b.n	80072ee <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072d8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072de:	68f9      	ldr	r1, [r7, #12]
 80072e0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80072e2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	3318      	adds	r3, #24
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	440b      	add	r3, r1
 80072ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6819      	ldr	r1, [r3, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	691a      	ldr	r2, [r3, #16]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	3318      	adds	r3, #24
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	440b      	add	r3, r1
 80072fe:	3304      	adds	r3, #4
 8007300:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	7d1b      	ldrb	r3, [r3, #20]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d111      	bne.n	800732e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	3318      	adds	r3, #24
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	4413      	add	r3, r2
 8007316:	3304      	adds	r3, #4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	6811      	ldr	r1, [r2, #0]
 800731e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	3318      	adds	r3, #24
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	440b      	add	r3, r1
 800732a:	3304      	adds	r3, #4
 800732c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3307      	adds	r3, #7
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	061a      	lsls	r2, r3, #24
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3306      	adds	r3, #6
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	041b      	lsls	r3, r3, #16
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3305      	adds	r3, #5
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	021b      	lsls	r3, r3, #8
 8007348:	4313      	orrs	r3, r2
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	3204      	adds	r2, #4
 800734e:	7812      	ldrb	r2, [r2, #0]
 8007350:	4610      	mov	r0, r2
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	6811      	ldr	r1, [r2, #0]
 8007356:	ea43 0200 	orr.w	r2, r3, r0
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	011b      	lsls	r3, r3, #4
 800735e:	440b      	add	r3, r1
 8007360:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007364:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3303      	adds	r3, #3
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	061a      	lsls	r2, r3, #24
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3302      	adds	r3, #2
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	041b      	lsls	r3, r3, #16
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3301      	adds	r3, #1
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	021b      	lsls	r3, r3, #8
 8007380:	4313      	orrs	r3, r2
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	7812      	ldrb	r2, [r2, #0]
 8007386:	4610      	mov	r0, r2
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	6811      	ldr	r1, [r2, #0]
 800738c:	ea43 0200 	orr.w	r2, r3, r0
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	440b      	add	r3, r1
 8007396:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800739a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	3318      	adds	r3, #24
 80073a4:	011b      	lsls	r3, r3, #4
 80073a6:	4413      	add	r3, r2
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	6811      	ldr	r1, [r2, #0]
 80073ae:	f043 0201 	orr.w	r2, r3, #1
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	3318      	adds	r3, #24
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	440b      	add	r3, r1
 80073ba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	e00e      	b.n	80073de <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e006      	b.n	80073de <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
  }
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3724      	adds	r7, #36	; 0x24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b085      	sub	sp, #20
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073fc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80073fe:	7afb      	ldrb	r3, [r7, #11]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d002      	beq.n	800740a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007404:	7afb      	ldrb	r3, [r7, #11]
 8007406:	2b02      	cmp	r3, #2
 8007408:	d11d      	bne.n	8007446 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3301      	adds	r3, #1
 800741c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3301      	adds	r3, #1
 8007444:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007446:	68fb      	ldr	r3, [r7, #12]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007468:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d003      	beq.n	8007478 <HAL_CAN_GetRxMessage+0x24>
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	2b02      	cmp	r3, #2
 8007474:	f040 80f3 	bne.w	800765e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10e      	bne.n	800749c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0303 	and.w	r3, r3, #3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d116      	bne.n	80074ba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e0e7      	b.n	800766c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d107      	bne.n	80074ba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e0d8      	b.n	800766c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	331b      	adds	r3, #27
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	4413      	add	r3, r2
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0204 	and.w	r2, r3, #4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10c      	bne.n	80074f2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	331b      	adds	r3, #27
 80074e0:	011b      	lsls	r3, r3, #4
 80074e2:	4413      	add	r3, r2
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	0d5b      	lsrs	r3, r3, #21
 80074e8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	e00b      	b.n	800750a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	331b      	adds	r3, #27
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	4413      	add	r3, r2
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	08db      	lsrs	r3, r3, #3
 8007502:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	331b      	adds	r3, #27
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	4413      	add	r3, r2
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0202 	and.w	r2, r3, #2
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	331b      	adds	r3, #27
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	4413      	add	r3, r2
 800752c:	3304      	adds	r3, #4
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 020f 	and.w	r2, r3, #15
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	331b      	adds	r3, #27
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	4413      	add	r3, r2
 8007544:	3304      	adds	r3, #4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	0a1b      	lsrs	r3, r3, #8
 800754a:	b2da      	uxtb	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	331b      	adds	r3, #27
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	4413      	add	r3, r2
 800755c:	3304      	adds	r3, #4
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	0c1b      	lsrs	r3, r3, #16
 8007562:	b29a      	uxth	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	011b      	lsls	r3, r3, #4
 8007570:	4413      	add	r3, r2
 8007572:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	b2da      	uxtb	r2, r3
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	4413      	add	r3, r2
 8007588:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	0a1a      	lsrs	r2, r3, #8
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	3301      	adds	r3, #1
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	0c1a      	lsrs	r2, r3, #16
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	3302      	adds	r3, #2
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	011b      	lsls	r3, r3, #4
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	0e1a      	lsrs	r2, r3, #24
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	3303      	adds	r3, #3
 80075c8:	b2d2      	uxtb	r2, r2
 80075ca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	3304      	adds	r3, #4
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	0a1a      	lsrs	r2, r3, #8
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	3305      	adds	r3, #5
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	4413      	add	r3, r2
 8007608:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	0c1a      	lsrs	r2, r3, #16
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	3306      	adds	r3, #6
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	4413      	add	r3, r2
 8007622:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	0e1a      	lsrs	r2, r3, #24
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	3307      	adds	r3, #7
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d108      	bne.n	800764a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0220 	orr.w	r2, r2, #32
 8007646:	60da      	str	r2, [r3, #12]
 8007648:	e007      	b.n	800765a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0220 	orr.w	r2, r2, #32
 8007658:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	e006      	b.n	800766c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
  }
}
 800766c:	4618      	mov	r0, r3
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800768c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800768e:	7afb      	ldrb	r3, [r7, #11]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d002      	beq.n	800769a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8007694:	7afb      	ldrb	r3, [r7, #11]
 8007696:	2b02      	cmp	r3, #2
 8007698:	d10f      	bne.n	80076ba <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d106      	bne.n	80076ae <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	e005      	b.n	80076ba <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	f003 0303 	and.w	r3, r3, #3
 80076b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80076ba:	68fb      	ldr	r3, [r7, #12]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076d8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d002      	beq.n	80076e6 <HAL_CAN_ActivateNotification+0x1e>
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d109      	bne.n	80076fa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6959      	ldr	r1, [r3, #20]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	e006      	b.n	8007708 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
  }
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b08a      	sub	sp, #40	; 0x28
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800771c:	2300      	movs	r3, #0
 800771e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d07c      	beq.n	8007854 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	d023      	beq.n	80077ac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2201      	movs	r2, #1
 800776a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7fb ff12 	bl	80035a0 <HAL_CAN_TxMailbox0CompleteCallback>
 800777c:	e016      	b.n	80077ac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
 8007790:	e00c      	b.n	80077ac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d004      	beq.n	80077a6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
 80077a4:	e002      	b.n	80077ac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f96b 	bl	8007a82 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d024      	beq.n	8007800 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7fb fef8 	bl	80035c0 <HAL_CAN_TxMailbox1CompleteCallback>
 80077d0:	e016      	b.n	8007800 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d004      	beq.n	80077e6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
 80077e4:	e00c      	b.n	8007800 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d004      	beq.n	80077fa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
 80077f8:	e002      	b.n	8007800 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f94b 	bl	8007a96 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d024      	beq.n	8007854 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007812:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7fb fede 	bl	80035e0 <HAL_CAN_TxMailbox2CompleteCallback>
 8007824:	e016      	b.n	8007854 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d004      	beq.n	800783a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
 8007838:	e00c      	b.n	8007854 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d004      	beq.n	800784e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
 800784c:	e002      	b.n	8007854 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f92b 	bl	8007aaa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	f003 0308 	and.w	r3, r3, #8
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00c      	beq.n	8007878 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f003 0310 	and.w	r3, r3, #16
 8007864:	2b00      	cmp	r3, #0
 8007866:	d007      	beq.n	8007878 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800786e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2210      	movs	r2, #16
 8007876:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00b      	beq.n	800789a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f003 0308 	and.w	r3, r3, #8
 8007888:	2b00      	cmp	r3, #0
 800788a:	d006      	beq.n	800789a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2208      	movs	r2, #8
 8007892:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f912 	bl	8007abe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d009      	beq.n	80078b8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7fb fe58 	bl	8003568 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00c      	beq.n	80078dc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f003 0310 	and.w	r3, r3, #16
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d007      	beq.n	80078dc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2210      	movs	r2, #16
 80078da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d006      	beq.n	80078fe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2208      	movs	r2, #8
 80078f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f8f4 	bl	8007ae6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	f003 0310 	and.w	r3, r3, #16
 8007904:	2b00      	cmp	r3, #0
 8007906:	d009      	beq.n	800791c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f003 0303 	and.w	r3, r3, #3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f8db 	bl	8007ad2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00b      	beq.n	800793e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b00      	cmp	r3, #0
 800792e:	d006      	beq.n	800793e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2210      	movs	r2, #16
 8007936:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f8de 	bl	8007afa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d006      	beq.n	8007960 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2208      	movs	r2, #8
 8007958:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f8d7 	bl	8007b0e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d07b      	beq.n	8007a62 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	f003 0304 	and.w	r3, r3, #4
 8007970:	2b00      	cmp	r3, #0
 8007972:	d072      	beq.n	8007a5a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797a:	2b00      	cmp	r3, #0
 800797c:	d008      	beq.n	8007990 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	f043 0301 	orr.w	r3, r3, #1
 800798e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007996:	2b00      	cmp	r3, #0
 8007998:	d008      	beq.n	80079ac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	f043 0302 	orr.w	r3, r3, #2
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d008      	beq.n	80079c8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	f043 0304 	orr.w	r3, r3, #4
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d043      	beq.n	8007a5a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d03e      	beq.n	8007a5a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079e2:	2b60      	cmp	r3, #96	; 0x60
 80079e4:	d02b      	beq.n	8007a3e <HAL_CAN_IRQHandler+0x32a>
 80079e6:	2b60      	cmp	r3, #96	; 0x60
 80079e8:	d82e      	bhi.n	8007a48 <HAL_CAN_IRQHandler+0x334>
 80079ea:	2b50      	cmp	r3, #80	; 0x50
 80079ec:	d022      	beq.n	8007a34 <HAL_CAN_IRQHandler+0x320>
 80079ee:	2b50      	cmp	r3, #80	; 0x50
 80079f0:	d82a      	bhi.n	8007a48 <HAL_CAN_IRQHandler+0x334>
 80079f2:	2b40      	cmp	r3, #64	; 0x40
 80079f4:	d019      	beq.n	8007a2a <HAL_CAN_IRQHandler+0x316>
 80079f6:	2b40      	cmp	r3, #64	; 0x40
 80079f8:	d826      	bhi.n	8007a48 <HAL_CAN_IRQHandler+0x334>
 80079fa:	2b30      	cmp	r3, #48	; 0x30
 80079fc:	d010      	beq.n	8007a20 <HAL_CAN_IRQHandler+0x30c>
 80079fe:	2b30      	cmp	r3, #48	; 0x30
 8007a00:	d822      	bhi.n	8007a48 <HAL_CAN_IRQHandler+0x334>
 8007a02:	2b10      	cmp	r3, #16
 8007a04:	d002      	beq.n	8007a0c <HAL_CAN_IRQHandler+0x2f8>
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d005      	beq.n	8007a16 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007a0a:	e01d      	b.n	8007a48 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	f043 0308 	orr.w	r3, r3, #8
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a14:	e019      	b.n	8007a4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	f043 0310 	orr.w	r3, r3, #16
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a1e:	e014      	b.n	8007a4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	f043 0320 	orr.w	r3, r3, #32
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a28:	e00f      	b.n	8007a4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a32:	e00a      	b.n	8007a4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a3c:	e005      	b.n	8007a4a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a46:	e000      	b.n	8007a4a <HAL_CAN_IRQHandler+0x336>
            break;
 8007a48:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	699a      	ldr	r2, [r3, #24]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a58:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2204      	movs	r2, #4
 8007a60:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d008      	beq.n	8007a7a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f854 	bl	8007b22 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	3728      	adds	r7, #40	; 0x28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
	...

08007b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b48:	4b0c      	ldr	r3, [pc, #48]	; (8007b7c <__NVIC_SetPriorityGrouping+0x44>)
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b54:	4013      	ands	r3, r2
 8007b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b6a:	4a04      	ldr	r2, [pc, #16]	; (8007b7c <__NVIC_SetPriorityGrouping+0x44>)
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	60d3      	str	r3, [r2, #12]
}
 8007b70:	bf00      	nop
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	e000ed00 	.word	0xe000ed00

08007b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b84:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <__NVIC_GetPriorityGrouping+0x18>)
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	0a1b      	lsrs	r3, r3, #8
 8007b8a:	f003 0307 	and.w	r3, r3, #7
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	e000ed00 	.word	0xe000ed00

08007b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	db0b      	blt.n	8007bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	f003 021f 	and.w	r2, r3, #31
 8007bb4:	4907      	ldr	r1, [pc, #28]	; (8007bd4 <__NVIC_EnableIRQ+0x38>)
 8007bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bba:	095b      	lsrs	r3, r3, #5
 8007bbc:	2001      	movs	r0, #1
 8007bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8007bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	e000e100 	.word	0xe000e100

08007bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4603      	mov	r3, r0
 8007be0:	6039      	str	r1, [r7, #0]
 8007be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	db0a      	blt.n	8007c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	490c      	ldr	r1, [pc, #48]	; (8007c24 <__NVIC_SetPriority+0x4c>)
 8007bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bf6:	0112      	lsls	r2, r2, #4
 8007bf8:	b2d2      	uxtb	r2, r2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c00:	e00a      	b.n	8007c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	4908      	ldr	r1, [pc, #32]	; (8007c28 <__NVIC_SetPriority+0x50>)
 8007c08:	79fb      	ldrb	r3, [r7, #7]
 8007c0a:	f003 030f 	and.w	r3, r3, #15
 8007c0e:	3b04      	subs	r3, #4
 8007c10:	0112      	lsls	r2, r2, #4
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	440b      	add	r3, r1
 8007c16:	761a      	strb	r2, [r3, #24]
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	e000e100 	.word	0xe000e100
 8007c28:	e000ed00 	.word	0xe000ed00

08007c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b089      	sub	sp, #36	; 0x24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	f1c3 0307 	rsb	r3, r3, #7
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	bf28      	it	cs
 8007c4a:	2304      	movcs	r3, #4
 8007c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	3304      	adds	r3, #4
 8007c52:	2b06      	cmp	r3, #6
 8007c54:	d902      	bls.n	8007c5c <NVIC_EncodePriority+0x30>
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	3b03      	subs	r3, #3
 8007c5a:	e000      	b.n	8007c5e <NVIC_EncodePriority+0x32>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	43da      	mvns	r2, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	401a      	ands	r2, r3
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7e:	43d9      	mvns	r1, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c84:	4313      	orrs	r3, r2
         );
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3724      	adds	r7, #36	; 0x24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff ff4c 	bl	8007b38 <__NVIC_SetPriorityGrouping>
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007cba:	f7ff ff61 	bl	8007b80 <__NVIC_GetPriorityGrouping>
 8007cbe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	68b9      	ldr	r1, [r7, #8]
 8007cc4:	6978      	ldr	r0, [r7, #20]
 8007cc6:	f7ff ffb1 	bl	8007c2c <NVIC_EncodePriority>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff ff80 	bl	8007bd8 <__NVIC_SetPriority>
}
 8007cd8:	bf00      	nop
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff ff54 	bl	8007b9c <__NVIC_EnableIRQ>
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e014      	b.n	8007d38 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	791b      	ldrb	r3, [r3, #4]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d105      	bne.n	8007d24 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7fc ffb8 	bl	8004c94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	795b      	ldrb	r3, [r3, #5]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <HAL_DAC_Start_DMA+0x1e>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e0ab      	b.n	8007eb6 <HAL_DAC_Start_DMA+0x176>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2202      	movs	r2, #2
 8007d68:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d12f      	bne.n	8007dd0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	4a52      	ldr	r2, [pc, #328]	; (8007ec0 <HAL_DAC_Start_DMA+0x180>)
 8007d76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	4a51      	ldr	r2, [pc, #324]	; (8007ec4 <HAL_DAC_Start_DMA+0x184>)
 8007d7e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	4a50      	ldr	r2, [pc, #320]	; (8007ec8 <HAL_DAC_Start_DMA+0x188>)
 8007d86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d96:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	2b08      	cmp	r3, #8
 8007d9c:	d013      	beq.n	8007dc6 <HAL_DAC_Start_DMA+0x86>
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	d845      	bhi.n	8007e30 <HAL_DAC_Start_DMA+0xf0>
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <HAL_DAC_Start_DMA+0x72>
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d005      	beq.n	8007dbc <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8007db0:	e03e      	b.n	8007e30 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3308      	adds	r3, #8
 8007db8:	613b      	str	r3, [r7, #16]
        break;
 8007dba:	e03c      	b.n	8007e36 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	613b      	str	r3, [r7, #16]
        break;
 8007dc4:	e037      	b.n	8007e36 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3310      	adds	r3, #16
 8007dcc:	613b      	str	r3, [r7, #16]
        break;
 8007dce:	e032      	b.n	8007e36 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	4a3d      	ldr	r2, [pc, #244]	; (8007ecc <HAL_DAC_Start_DMA+0x18c>)
 8007dd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	4a3c      	ldr	r2, [pc, #240]	; (8007ed0 <HAL_DAC_Start_DMA+0x190>)
 8007dde:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	4a3b      	ldr	r2, [pc, #236]	; (8007ed4 <HAL_DAC_Start_DMA+0x194>)
 8007de6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007df6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	2b08      	cmp	r3, #8
 8007dfc:	d013      	beq.n	8007e26 <HAL_DAC_Start_DMA+0xe6>
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	2b08      	cmp	r3, #8
 8007e02:	d817      	bhi.n	8007e34 <HAL_DAC_Start_DMA+0xf4>
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_DAC_Start_DMA+0xd2>
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d005      	beq.n	8007e1c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8007e10:	e010      	b.n	8007e34 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3314      	adds	r3, #20
 8007e18:	613b      	str	r3, [r7, #16]
        break;
 8007e1a:	e00c      	b.n	8007e36 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3318      	adds	r3, #24
 8007e22:	613b      	str	r3, [r7, #16]
        break;
 8007e24:	e007      	b.n	8007e36 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	331c      	adds	r3, #28
 8007e2c:	613b      	str	r3, [r7, #16]
        break;
 8007e2e:	e002      	b.n	8007e36 <HAL_DAC_Start_DMA+0xf6>
        break;
 8007e30:	bf00      	nop
 8007e32:	e000      	b.n	8007e36 <HAL_DAC_Start_DMA+0xf6>
        break;
 8007e34:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d111      	bne.n	8007e60 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e4a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6898      	ldr	r0, [r3, #8]
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	f000 fb13 	bl	8008480 <HAL_DMA_Start_IT>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	75fb      	strb	r3, [r7, #23]
 8007e5e:	e010      	b.n	8007e82 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007e6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	68d8      	ldr	r0, [r3, #12]
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	f000 fb01 	bl	8008480 <HAL_DMA_Start_IT>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007e88:	7dfb      	ldrb	r3, [r7, #23]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10c      	bne.n	8007ea8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6819      	ldr	r1, [r3, #0]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f003 0310 	and.w	r3, r3, #16
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	409a      	lsls	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	e005      	b.n	8007eb4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	f043 0204 	orr.w	r2, r3, #4
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	080081e9 	.word	0x080081e9
 8007ec4:	0800820b 	.word	0x0800820b
 8007ec8:	08008227 	.word	0x08008227
 8007ecc:	080082a5 	.word	0x080082a5
 8007ed0:	080082c7 	.word	0x080082c7
 8007ed4:	080082e3 	.word	0x080082e3

08007ed8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eee:	d120      	bne.n	8007f32 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007efe:	d118      	bne.n	8007f32 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2204      	movs	r2, #4
 8007f04:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	f043 0201 	orr.w	r2, r3, #1
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f2a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f837 	bl	8007fa0 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f40:	d120      	bne.n	8007f84 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f50:	d118      	bne.n	8007f84 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2204      	movs	r2, #4
 8007f56:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	f043 0202 	orr.w	r2, r3, #2
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007f6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007f7c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f986 	bl	8008290 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	795b      	ldrb	r3, [r3, #5]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d101      	bne.n	8007fd0 <HAL_DAC_ConfigChannel+0x1c>
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e107      	b.n	80081e0 <HAL_DAC_ConfigChannel+0x22c>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d174      	bne.n	80080ce <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007fe4:	f7fe f838 	bl	8006058 <HAL_GetTick>
 8007fe8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d134      	bne.n	800805a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007ff0:	e011      	b.n	8008016 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007ff2:	f7fe f831 	bl	8006058 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d90a      	bls.n	8008016 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	f043 0208 	orr.w	r2, r3, #8
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2203      	movs	r2, #3
 8008010:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e0e4      	b.n	80081e0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1e6      	bne.n	8007ff2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8008024:	2001      	movs	r0, #1
 8008026:	f7fe f823 	bl	8006070 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	6992      	ldr	r2, [r2, #24]
 8008032:	641a      	str	r2, [r3, #64]	; 0x40
 8008034:	e01e      	b.n	8008074 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008036:	f7fe f80f 	bl	8006058 <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	2b01      	cmp	r3, #1
 8008042:	d90a      	bls.n	800805a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	f043 0208 	orr.w	r2, r3, #8
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2203      	movs	r2, #3
 8008054:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e0c2      	b.n	80081e0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008060:	2b00      	cmp	r3, #0
 8008062:	dbe8      	blt.n	8008036 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8008064:	2001      	movs	r0, #1
 8008066:	f7fe f803 	bl	8006070 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	6992      	ldr	r2, [r2, #24]
 8008072:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008084:	fa01 f303 	lsl.w	r3, r1, r3
 8008088:	43db      	mvns	r3, r3
 800808a:	ea02 0103 	and.w	r1, r2, r3
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	69da      	ldr	r2, [r3, #28]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f003 0310 	and.w	r3, r3, #16
 8008098:	409a      	lsls	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f003 0310 	and.w	r3, r3, #16
 80080ae:	21ff      	movs	r1, #255	; 0xff
 80080b0:	fa01 f303 	lsl.w	r3, r1, r3
 80080b4:	43db      	mvns	r3, r3
 80080b6:	ea02 0103 	and.w	r1, r2, r3
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	6a1a      	ldr	r2, [r3, #32]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f003 0310 	and.w	r3, r3, #16
 80080c4:	409a      	lsls	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d11d      	bne.n	8008112 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080dc:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	221f      	movs	r2, #31
 80080e6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ea:	43db      	mvns	r3, r3
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	4013      	ands	r3, r2
 80080f0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f003 0310 	and.w	r3, r3, #16
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	fa02 f303 	lsl.w	r3, r2, r3
 8008104:	69ba      	ldr	r2, [r7, #24]
 8008106:	4313      	orrs	r3, r2
 8008108:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008118:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f003 0310 	and.w	r3, r3, #16
 8008120:	2207      	movs	r2, #7
 8008122:	fa02 f303 	lsl.w	r3, r2, r3
 8008126:	43db      	mvns	r3, r3
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	4013      	ands	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	431a      	orrs	r2, r3
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	4313      	orrs	r3, r2
 800813e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f003 0310 	and.w	r3, r3, #16
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	fa02 f303 	lsl.w	r3, r2, r3
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	4313      	orrs	r3, r2
 8008150:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6819      	ldr	r1, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f003 0310 	and.w	r3, r3, #16
 8008166:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800816a:	fa02 f303 	lsl.w	r3, r2, r3
 800816e:	43da      	mvns	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	400a      	ands	r2, r1
 8008176:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f003 0310 	and.w	r3, r3, #16
 8008186:	f640 72fc 	movw	r2, #4092	; 0xffc
 800818a:	fa02 f303 	lsl.w	r3, r2, r3
 800818e:	43db      	mvns	r3, r3
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	4013      	ands	r3, r2
 8008194:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f003 0310 	and.w	r3, r3, #16
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	fa02 f303 	lsl.w	r3, r2, r3
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6819      	ldr	r1, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f003 0310 	and.w	r3, r3, #16
 80081c2:	22c0      	movs	r2, #192	; 0xc0
 80081c4:	fa02 f303 	lsl.w	r3, r2, r3
 80081c8:	43da      	mvns	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	400a      	ands	r2, r1
 80081d0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3720      	adds	r7, #32
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f7fb ff78 	bl	80040ec <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	711a      	strb	r2, [r3, #4]
}
 8008202:	bf00      	nop
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008216:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7fb ff57 	bl	80040cc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008232:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	f043 0204 	orr.w	r2, r3, #4
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f7ff fea3 	bl	8007f8c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	711a      	strb	r2, [r3, #4]
}
 800824c:	bf00      	nop
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f7ff ffce 	bl	8008254 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2201      	movs	r2, #1
 80082bc:	711a      	strb	r2, [r3, #4]
}
 80082be:	bf00      	nop
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f7ff ffc7 	bl	8008268 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80082da:	bf00      	nop
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	f043 0204 	orr.w	r2, r3, #4
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f7ff ffbd 	bl	800827c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	711a      	strb	r2, [r3, #4]
}
 8008308:	bf00      	nop
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e098      	b.n	8008454 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	4b4d      	ldr	r3, [pc, #308]	; (8008460 <HAL_DMA_Init+0x150>)
 800832a:	429a      	cmp	r2, r3
 800832c:	d80f      	bhi.n	800834e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	4b4b      	ldr	r3, [pc, #300]	; (8008464 <HAL_DMA_Init+0x154>)
 8008336:	4413      	add	r3, r2
 8008338:	4a4b      	ldr	r2, [pc, #300]	; (8008468 <HAL_DMA_Init+0x158>)
 800833a:	fba2 2303 	umull	r2, r3, r2, r3
 800833e:	091b      	lsrs	r3, r3, #4
 8008340:	009a      	lsls	r2, r3, #2
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a48      	ldr	r2, [pc, #288]	; (800846c <HAL_DMA_Init+0x15c>)
 800834a:	641a      	str	r2, [r3, #64]	; 0x40
 800834c:	e00e      	b.n	800836c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	4b46      	ldr	r3, [pc, #280]	; (8008470 <HAL_DMA_Init+0x160>)
 8008356:	4413      	add	r3, r2
 8008358:	4a43      	ldr	r2, [pc, #268]	; (8008468 <HAL_DMA_Init+0x158>)
 800835a:	fba2 2303 	umull	r2, r3, r2, r3
 800835e:	091b      	lsrs	r3, r3, #4
 8008360:	009a      	lsls	r2, r3, #2
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a42      	ldr	r2, [pc, #264]	; (8008474 <HAL_DMA_Init+0x164>)
 800836a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008386:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008390:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800839c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083c6:	d039      	beq.n	800843c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083cc:	4a27      	ldr	r2, [pc, #156]	; (800846c <HAL_DMA_Init+0x15c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d11a      	bne.n	8008408 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80083d2:	4b29      	ldr	r3, [pc, #164]	; (8008478 <HAL_DMA_Init+0x168>)
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083da:	f003 031c 	and.w	r3, r3, #28
 80083de:	210f      	movs	r1, #15
 80083e0:	fa01 f303 	lsl.w	r3, r1, r3
 80083e4:	43db      	mvns	r3, r3
 80083e6:	4924      	ldr	r1, [pc, #144]	; (8008478 <HAL_DMA_Init+0x168>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80083ec:	4b22      	ldr	r3, [pc, #136]	; (8008478 <HAL_DMA_Init+0x168>)
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6859      	ldr	r1, [r3, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f8:	f003 031c 	and.w	r3, r3, #28
 80083fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008400:	491d      	ldr	r1, [pc, #116]	; (8008478 <HAL_DMA_Init+0x168>)
 8008402:	4313      	orrs	r3, r2
 8008404:	600b      	str	r3, [r1, #0]
 8008406:	e019      	b.n	800843c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008408:	4b1c      	ldr	r3, [pc, #112]	; (800847c <HAL_DMA_Init+0x16c>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008410:	f003 031c 	and.w	r3, r3, #28
 8008414:	210f      	movs	r1, #15
 8008416:	fa01 f303 	lsl.w	r3, r1, r3
 800841a:	43db      	mvns	r3, r3
 800841c:	4917      	ldr	r1, [pc, #92]	; (800847c <HAL_DMA_Init+0x16c>)
 800841e:	4013      	ands	r3, r2
 8008420:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008422:	4b16      	ldr	r3, [pc, #88]	; (800847c <HAL_DMA_Init+0x16c>)
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6859      	ldr	r1, [r3, #4]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842e:	f003 031c 	and.w	r3, r3, #28
 8008432:	fa01 f303 	lsl.w	r3, r1, r3
 8008436:	4911      	ldr	r1, [pc, #68]	; (800847c <HAL_DMA_Init+0x16c>)
 8008438:	4313      	orrs	r3, r2
 800843a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	40020407 	.word	0x40020407
 8008464:	bffdfff8 	.word	0xbffdfff8
 8008468:	cccccccd 	.word	0xcccccccd
 800846c:	40020000 	.word	0x40020000
 8008470:	bffdfbf8 	.word	0xbffdfbf8
 8008474:	40020400 	.word	0x40020400
 8008478:	400200a8 	.word	0x400200a8
 800847c:	400204a8 	.word	0x400204a8

08008480 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <HAL_DMA_Start_IT+0x20>
 800849c:	2302      	movs	r3, #2
 800849e:	e04b      	b.n	8008538 <HAL_DMA_Start_IT+0xb8>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d13a      	bne.n	800852a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f022 0201 	bic.w	r2, r2, #1
 80084d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	68b9      	ldr	r1, [r7, #8]
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 f8e0 	bl	800869e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d008      	beq.n	80084f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f042 020e 	orr.w	r2, r2, #14
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	e00f      	b.n	8008518 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 0204 	bic.w	r2, r2, #4
 8008506:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f042 020a 	orr.w	r2, r2, #10
 8008516:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0201 	orr.w	r2, r2, #1
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	e005      	b.n	8008536 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008532:	2302      	movs	r3, #2
 8008534:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008536:	7dfb      	ldrb	r3, [r7, #23]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855c:	f003 031c 	and.w	r3, r3, #28
 8008560:	2204      	movs	r2, #4
 8008562:	409a      	lsls	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4013      	ands	r3, r2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d026      	beq.n	80085ba <HAL_DMA_IRQHandler+0x7a>
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f003 0304 	and.w	r3, r3, #4
 8008572:	2b00      	cmp	r3, #0
 8008574:	d021      	beq.n	80085ba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0320 	and.w	r3, r3, #32
 8008580:	2b00      	cmp	r3, #0
 8008582:	d107      	bne.n	8008594 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0204 	bic.w	r2, r2, #4
 8008592:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008598:	f003 021c 	and.w	r2, r3, #28
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a0:	2104      	movs	r1, #4
 80085a2:	fa01 f202 	lsl.w	r2, r1, r2
 80085a6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d071      	beq.n	8008694 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80085b8:	e06c      	b.n	8008694 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085be:	f003 031c 	and.w	r3, r3, #28
 80085c2:	2202      	movs	r2, #2
 80085c4:	409a      	lsls	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4013      	ands	r3, r2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d02e      	beq.n	800862c <HAL_DMA_IRQHandler+0xec>
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d029      	beq.n	800862c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10b      	bne.n	80085fe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f022 020a 	bic.w	r2, r2, #10
 80085f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008602:	f003 021c 	and.w	r2, r3, #28
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	2102      	movs	r1, #2
 800860c:	fa01 f202 	lsl.w	r2, r1, r2
 8008610:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d038      	beq.n	8008694 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800862a:	e033      	b.n	8008694 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008630:	f003 031c 	and.w	r3, r3, #28
 8008634:	2208      	movs	r2, #8
 8008636:	409a      	lsls	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4013      	ands	r3, r2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d02a      	beq.n	8008696 <HAL_DMA_IRQHandler+0x156>
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f003 0308 	and.w	r3, r3, #8
 8008646:	2b00      	cmp	r3, #0
 8008648:	d025      	beq.n	8008696 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 020e 	bic.w	r2, r2, #14
 8008658:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800865e:	f003 021c 	and.w	r2, r3, #28
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008666:	2101      	movs	r1, #1
 8008668:	fa01 f202 	lsl.w	r2, r1, r2
 800866c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008694:	bf00      	nop
 8008696:	bf00      	nop
}
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800869e:	b480      	push	{r7}
 80086a0:	b085      	sub	sp, #20
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	607a      	str	r2, [r7, #4]
 80086aa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b0:	f003 021c 	and.w	r2, r3, #28
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b8:	2101      	movs	r1, #1
 80086ba:	fa01 f202 	lsl.w	r2, r1, r2
 80086be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	d108      	bne.n	80086e2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80086e0:	e007      	b.n	80086f2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	60da      	str	r2, [r3, #12]
}
 80086f2:	bf00      	nop
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
	...

08008700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800870e:	e148      	b.n	80089a2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	2101      	movs	r1, #1
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	fa01 f303 	lsl.w	r3, r1, r3
 800871c:	4013      	ands	r3, r2
 800871e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 813a 	beq.w	800899c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f003 0303 	and.w	r3, r3, #3
 8008730:	2b01      	cmp	r3, #1
 8008732:	d005      	beq.n	8008740 <HAL_GPIO_Init+0x40>
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f003 0303 	and.w	r3, r3, #3
 800873c:	2b02      	cmp	r3, #2
 800873e:	d130      	bne.n	80087a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	2203      	movs	r2, #3
 800874c:	fa02 f303 	lsl.w	r3, r2, r3
 8008750:	43db      	mvns	r3, r3
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	4013      	ands	r3, r2
 8008756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	fa02 f303 	lsl.w	r3, r2, r3
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	4313      	orrs	r3, r2
 8008768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008776:	2201      	movs	r2, #1
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	fa02 f303 	lsl.w	r3, r2, r3
 800877e:	43db      	mvns	r3, r3
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	4013      	ands	r3, r2
 8008784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	091b      	lsrs	r3, r3, #4
 800878c:	f003 0201 	and.w	r2, r3, #1
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	fa02 f303 	lsl.w	r3, r2, r3
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d017      	beq.n	80087de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	2203      	movs	r2, #3
 80087ba:	fa02 f303 	lsl.w	r3, r2, r3
 80087be:	43db      	mvns	r3, r3
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4013      	ands	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	689a      	ldr	r2, [r3, #8]
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	fa02 f303 	lsl.w	r3, r2, r3
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f003 0303 	and.w	r3, r3, #3
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d123      	bne.n	8008832 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	08da      	lsrs	r2, r3, #3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3208      	adds	r2, #8
 80087f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f003 0307 	and.w	r3, r3, #7
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	220f      	movs	r2, #15
 8008802:	fa02 f303 	lsl.w	r3, r2, r3
 8008806:	43db      	mvns	r3, r3
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4013      	ands	r3, r2
 800880c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	691a      	ldr	r2, [r3, #16]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f003 0307 	and.w	r3, r3, #7
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	fa02 f303 	lsl.w	r3, r2, r3
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	4313      	orrs	r3, r2
 8008822:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	08da      	lsrs	r2, r3, #3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3208      	adds	r2, #8
 800882c:	6939      	ldr	r1, [r7, #16]
 800882e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	2203      	movs	r2, #3
 800883e:	fa02 f303 	lsl.w	r3, r2, r3
 8008842:	43db      	mvns	r3, r3
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	4013      	ands	r3, r2
 8008848:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f003 0203 	and.w	r2, r3, #3
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	005b      	lsls	r3, r3, #1
 8008856:	fa02 f303 	lsl.w	r3, r2, r3
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	4313      	orrs	r3, r2
 800885e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 8094 	beq.w	800899c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008874:	4b52      	ldr	r3, [pc, #328]	; (80089c0 <HAL_GPIO_Init+0x2c0>)
 8008876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008878:	4a51      	ldr	r2, [pc, #324]	; (80089c0 <HAL_GPIO_Init+0x2c0>)
 800887a:	f043 0301 	orr.w	r3, r3, #1
 800887e:	6613      	str	r3, [r2, #96]	; 0x60
 8008880:	4b4f      	ldr	r3, [pc, #316]	; (80089c0 <HAL_GPIO_Init+0x2c0>)
 8008882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	60bb      	str	r3, [r7, #8]
 800888a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800888c:	4a4d      	ldr	r2, [pc, #308]	; (80089c4 <HAL_GPIO_Init+0x2c4>)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	089b      	lsrs	r3, r3, #2
 8008892:	3302      	adds	r3, #2
 8008894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008898:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f003 0303 	and.w	r3, r3, #3
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	220f      	movs	r2, #15
 80088a4:	fa02 f303 	lsl.w	r3, r2, r3
 80088a8:	43db      	mvns	r3, r3
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	4013      	ands	r3, r2
 80088ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80088b6:	d00d      	beq.n	80088d4 <HAL_GPIO_Init+0x1d4>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a43      	ldr	r2, [pc, #268]	; (80089c8 <HAL_GPIO_Init+0x2c8>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d007      	beq.n	80088d0 <HAL_GPIO_Init+0x1d0>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a42      	ldr	r2, [pc, #264]	; (80089cc <HAL_GPIO_Init+0x2cc>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d101      	bne.n	80088cc <HAL_GPIO_Init+0x1cc>
 80088c8:	2302      	movs	r3, #2
 80088ca:	e004      	b.n	80088d6 <HAL_GPIO_Init+0x1d6>
 80088cc:	2307      	movs	r3, #7
 80088ce:	e002      	b.n	80088d6 <HAL_GPIO_Init+0x1d6>
 80088d0:	2301      	movs	r3, #1
 80088d2:	e000      	b.n	80088d6 <HAL_GPIO_Init+0x1d6>
 80088d4:	2300      	movs	r3, #0
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	f002 0203 	and.w	r2, r2, #3
 80088dc:	0092      	lsls	r2, r2, #2
 80088de:	4093      	lsls	r3, r2
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80088e6:	4937      	ldr	r1, [pc, #220]	; (80089c4 <HAL_GPIO_Init+0x2c4>)
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	089b      	lsrs	r3, r3, #2
 80088ec:	3302      	adds	r3, #2
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80088f4:	4b36      	ldr	r3, [pc, #216]	; (80089d0 <HAL_GPIO_Init+0x2d0>)
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	43db      	mvns	r3, r3
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	4013      	ands	r3, r2
 8008902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d003      	beq.n	8008918 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4313      	orrs	r3, r2
 8008916:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008918:	4a2d      	ldr	r2, [pc, #180]	; (80089d0 <HAL_GPIO_Init+0x2d0>)
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800891e:	4b2c      	ldr	r3, [pc, #176]	; (80089d0 <HAL_GPIO_Init+0x2d0>)
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	43db      	mvns	r3, r3
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	4013      	ands	r3, r2
 800892c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4313      	orrs	r3, r2
 8008940:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008942:	4a23      	ldr	r2, [pc, #140]	; (80089d0 <HAL_GPIO_Init+0x2d0>)
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008948:	4b21      	ldr	r3, [pc, #132]	; (80089d0 <HAL_GPIO_Init+0x2d0>)
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	43db      	mvns	r3, r3
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	4013      	ands	r3, r2
 8008956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d003      	beq.n	800896c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4313      	orrs	r3, r2
 800896a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800896c:	4a18      	ldr	r2, [pc, #96]	; (80089d0 <HAL_GPIO_Init+0x2d0>)
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008972:	4b17      	ldr	r3, [pc, #92]	; (80089d0 <HAL_GPIO_Init+0x2d0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	43db      	mvns	r3, r3
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	4013      	ands	r3, r2
 8008980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800898e:	693a      	ldr	r2, [r7, #16]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4313      	orrs	r3, r2
 8008994:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008996:	4a0e      	ldr	r2, [pc, #56]	; (80089d0 <HAL_GPIO_Init+0x2d0>)
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	3301      	adds	r3, #1
 80089a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f47f aeaf 	bne.w	8008710 <HAL_GPIO_Init+0x10>
  }
}
 80089b2:	bf00      	nop
 80089b4:	bf00      	nop
 80089b6:	371c      	adds	r7, #28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	40021000 	.word	0x40021000
 80089c4:	40010000 	.word	0x40010000
 80089c8:	48000400 	.word	0x48000400
 80089cc:	48000800 	.word	0x48000800
 80089d0:	40010400 	.word	0x40010400

080089d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	691a      	ldr	r2, [r3, #16]
 80089e4:	887b      	ldrh	r3, [r7, #2]
 80089e6:	4013      	ands	r3, r2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80089ec:	2301      	movs	r3, #1
 80089ee:	73fb      	strb	r3, [r7, #15]
 80089f0:	e001      	b.n	80089f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	807b      	strh	r3, [r7, #2]
 8008a10:	4613      	mov	r3, r2
 8008a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008a14:	787b      	ldrb	r3, [r7, #1]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008a1a:	887a      	ldrh	r2, [r7, #2]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008a20:	e002      	b.n	8008a28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008a22:	887a      	ldrh	r2, [r7, #2]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e081      	b.n	8008b4a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d106      	bne.n	8008a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7fc f9c2 	bl	8004de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2224      	movs	r2, #36	; 0x24
 8008a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0201 	bic.w	r2, r2, #1
 8008a76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008a84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d107      	bne.n	8008aae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689a      	ldr	r2, [r3, #8]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008aaa:	609a      	str	r2, [r3, #8]
 8008aac:	e006      	b.n	8008abc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	689a      	ldr	r2, [r3, #8]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008aba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d104      	bne.n	8008ace <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008acc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	6812      	ldr	r2, [r2, #0]
 8008ad8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ae0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008af0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	691a      	ldr	r2, [r3, #16]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	69d9      	ldr	r1, [r3, #28]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a1a      	ldr	r2, [r3, #32]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f042 0201 	orr.w	r2, r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2220      	movs	r2, #32
 8008b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
	...

08008b54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b088      	sub	sp, #32
 8008b58:	af02      	add	r7, sp, #8
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	607a      	str	r2, [r7, #4]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	460b      	mov	r3, r1
 8008b62:	817b      	strh	r3, [r7, #10]
 8008b64:	4613      	mov	r3, r2
 8008b66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	2b20      	cmp	r3, #32
 8008b72:	f040 80da 	bne.w	8008d2a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d101      	bne.n	8008b84 <HAL_I2C_Master_Transmit+0x30>
 8008b80:	2302      	movs	r3, #2
 8008b82:	e0d3      	b.n	8008d2c <HAL_I2C_Master_Transmit+0x1d8>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b8c:	f7fd fa64 	bl	8006058 <HAL_GetTick>
 8008b90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	2319      	movs	r3, #25
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 f8f0 	bl	8008d84 <I2C_WaitOnFlagUntilTimeout>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e0be      	b.n	8008d2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2221      	movs	r2, #33	; 0x21
 8008bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2210      	movs	r2, #16
 8008bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	893a      	ldrh	r2, [r7, #8]
 8008bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	2bff      	cmp	r3, #255	; 0xff
 8008bde:	d90e      	bls.n	8008bfe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	22ff      	movs	r2, #255	; 0xff
 8008be4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	8979      	ldrh	r1, [r7, #10]
 8008bee:	4b51      	ldr	r3, [pc, #324]	; (8008d34 <HAL_I2C_Master_Transmit+0x1e0>)
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 fa6c 	bl	80090d4 <I2C_TransferConfig>
 8008bfc:	e06c      	b.n	8008cd8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	8979      	ldrh	r1, [r7, #10]
 8008c10:	4b48      	ldr	r3, [pc, #288]	; (8008d34 <HAL_I2C_Master_Transmit+0x1e0>)
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 fa5b 	bl	80090d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008c1e:	e05b      	b.n	8008cd8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	6a39      	ldr	r1, [r7, #32]
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 f8ed 	bl	8008e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e07b      	b.n	8008d2c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c44:	1c5a      	adds	r2, r3, #1
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	3b01      	subs	r3, #1
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d034      	beq.n	8008cd8 <HAL_I2C_Master_Transmit+0x184>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d130      	bne.n	8008cd8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2180      	movs	r1, #128	; 0x80
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 f87f 	bl	8008d84 <I2C_WaitOnFlagUntilTimeout>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e04d      	b.n	8008d2c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	2bff      	cmp	r3, #255	; 0xff
 8008c98:	d90e      	bls.n	8008cb8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	22ff      	movs	r2, #255	; 0xff
 8008c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	8979      	ldrh	r1, [r7, #10]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 fa0f 	bl	80090d4 <I2C_TransferConfig>
 8008cb6:	e00f      	b.n	8008cd8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	8979      	ldrh	r1, [r7, #10]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 f9fe 	bl	80090d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d19e      	bne.n	8008c20 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	6a39      	ldr	r1, [r7, #32]
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 f8cc 	bl	8008e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e01a      	b.n	8008d2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6859      	ldr	r1, [r3, #4]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	4b0b      	ldr	r3, [pc, #44]	; (8008d38 <HAL_I2C_Master_Transmit+0x1e4>)
 8008d0a:	400b      	ands	r3, r1
 8008d0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	e000      	b.n	8008d2c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008d2a:	2302      	movs	r3, #2
  }
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3718      	adds	r7, #24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	80002000 	.word	0x80002000
 8008d38:	fe00e800 	.word	0xfe00e800

08008d3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d103      	bne.n	8008d5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2200      	movs	r2, #0
 8008d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d007      	beq.n	8008d78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	699a      	ldr	r2, [r3, #24]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f042 0201 	orr.w	r2, r2, #1
 8008d76:	619a      	str	r2, [r3, #24]
  }
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	603b      	str	r3, [r7, #0]
 8008d90:	4613      	mov	r3, r2
 8008d92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d94:	e022      	b.n	8008ddc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d9c:	d01e      	beq.n	8008ddc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d9e:	f7fd f95b 	bl	8006058 <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	683a      	ldr	r2, [r7, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d302      	bcc.n	8008db4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d113      	bne.n	8008ddc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db8:	f043 0220 	orr.w	r2, r3, #32
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e00f      	b.n	8008dfc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699a      	ldr	r2, [r3, #24]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	4013      	ands	r3, r2
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	bf0c      	ite	eq
 8008dec:	2301      	moveq	r3, #1
 8008dee:	2300      	movne	r3, #0
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	461a      	mov	r2, r3
 8008df4:	79fb      	ldrb	r3, [r7, #7]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d0cd      	beq.n	8008d96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008e10:	e02c      	b.n	8008e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	68b9      	ldr	r1, [r7, #8]
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 f870 	bl	8008efc <I2C_IsErrorOccurred>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e02a      	b.n	8008e7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e2c:	d01e      	beq.n	8008e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e2e:	f7fd f913 	bl	8006058 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d302      	bcc.n	8008e44 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d113      	bne.n	8008e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e48:	f043 0220 	orr.w	r2, r3, #32
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e007      	b.n	8008e7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	f003 0302 	and.w	r3, r3, #2
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d1cb      	bne.n	8008e12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e90:	e028      	b.n	8008ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	68b9      	ldr	r1, [r7, #8]
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f000 f830 	bl	8008efc <I2C_IsErrorOccurred>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e026      	b.n	8008ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ea6:	f7fd f8d7 	bl	8006058 <HAL_GetTick>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d302      	bcc.n	8008ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d113      	bne.n	8008ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec0:	f043 0220 	orr.w	r2, r3, #32
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e007      	b.n	8008ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	f003 0320 	and.w	r3, r3, #32
 8008eee:	2b20      	cmp	r3, #32
 8008ef0:	d1cf      	bne.n	8008e92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08a      	sub	sp, #40	; 0x28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	f003 0310 	and.w	r3, r3, #16
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d075      	beq.n	8009014 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2210      	movs	r2, #16
 8008f2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008f30:	e056      	b.n	8008fe0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f38:	d052      	beq.n	8008fe0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f3a:	f7fd f88d 	bl	8006058 <HAL_GetTick>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d302      	bcc.n	8008f50 <I2C_IsErrorOccurred+0x54>
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d147      	bne.n	8008fe0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f72:	d12e      	bne.n	8008fd2 <I2C_IsErrorOccurred+0xd6>
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f7a:	d02a      	beq.n	8008fd2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008f7c:	7cfb      	ldrb	r3, [r7, #19]
 8008f7e:	2b20      	cmp	r3, #32
 8008f80:	d027      	beq.n	8008fd2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008f92:	f7fd f861 	bl	8006058 <HAL_GetTick>
 8008f96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f98:	e01b      	b.n	8008fd2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008f9a:	f7fd f85d 	bl	8006058 <HAL_GetTick>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	2b19      	cmp	r3, #25
 8008fa6:	d914      	bls.n	8008fd2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fac:	f043 0220 	orr.w	r2, r3, #32
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b20      	cmp	r3, #32
 8008fde:	d1dc      	bne.n	8008f9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	f003 0320 	and.w	r3, r3, #32
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	d003      	beq.n	8008ff6 <I2C_IsErrorOccurred+0xfa>
 8008fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d09d      	beq.n	8008f32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d103      	bne.n	8009006 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2220      	movs	r2, #32
 8009004:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	f043 0304 	orr.w	r3, r3, #4
 800900c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	f043 0301 	orr.w	r3, r3, #1
 800902c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009036:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00b      	beq.n	8009060 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	f043 0308 	orr.w	r3, r3, #8
 800904e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009058:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00b      	beq.n	8009082 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	f043 0302 	orr.w	r3, r3, #2
 8009070:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800907a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009086:	2b00      	cmp	r3, #0
 8009088:	d01c      	beq.n	80090c4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f7ff fe56 	bl	8008d3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6859      	ldr	r1, [r3, #4]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <I2C_IsErrorOccurred+0x1d4>)
 800909c:	400b      	ands	r3, r1
 800909e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	431a      	orrs	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2220      	movs	r2, #32
 80090b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80090c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3728      	adds	r7, #40	; 0x28
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	fe00e800 	.word	0xfe00e800

080090d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	607b      	str	r3, [r7, #4]
 80090de:	460b      	mov	r3, r1
 80090e0:	817b      	strh	r3, [r7, #10]
 80090e2:	4613      	mov	r3, r2
 80090e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090e6:	897b      	ldrh	r3, [r7, #10]
 80090e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80090ec:	7a7b      	ldrb	r3, [r7, #9]
 80090ee:	041b      	lsls	r3, r3, #16
 80090f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009102:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685a      	ldr	r2, [r3, #4]
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	0d5b      	lsrs	r3, r3, #21
 800910e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009112:	4b08      	ldr	r3, [pc, #32]	; (8009134 <I2C_TransferConfig+0x60>)
 8009114:	430b      	orrs	r3, r1
 8009116:	43db      	mvns	r3, r3
 8009118:	ea02 0103 	and.w	r1, r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	430a      	orrs	r2, r1
 8009124:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009126:	bf00      	nop
 8009128:	371c      	adds	r7, #28
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	03ff63ff 	.word	0x03ff63ff

08009138 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b20      	cmp	r3, #32
 800914c:	d138      	bne.n	80091c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009154:	2b01      	cmp	r3, #1
 8009156:	d101      	bne.n	800915c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009158:	2302      	movs	r3, #2
 800915a:	e032      	b.n	80091c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2224      	movs	r2, #36	; 0x24
 8009168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f022 0201 	bic.w	r2, r2, #1
 800917a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800918a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6819      	ldr	r1, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0201 	orr.w	r2, r2, #1
 80091aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2220      	movs	r2, #32
 80091b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	e000      	b.n	80091c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80091c0:	2302      	movs	r3, #2
  }
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b085      	sub	sp, #20
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b20      	cmp	r3, #32
 80091e2:	d139      	bne.n	8009258 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d101      	bne.n	80091f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80091ee:	2302      	movs	r3, #2
 80091f0:	e033      	b.n	800925a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2224      	movs	r2, #36	; 0x24
 80091fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f022 0201 	bic.w	r2, r2, #1
 8009210:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009220:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	021b      	lsls	r3, r3, #8
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	4313      	orrs	r3, r2
 800922a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f042 0201 	orr.w	r2, r2, #1
 8009242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2220      	movs	r2, #32
 8009248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	e000      	b.n	800925a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009258:	2302      	movs	r3, #2
  }
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
	...

08009268 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009270:	4b0b      	ldr	r3, [pc, #44]	; (80092a0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009274:	4a0a      	ldr	r2, [pc, #40]	; (80092a0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009276:	f043 0301 	orr.w	r3, r3, #1
 800927a:	6613      	str	r3, [r2, #96]	; 0x60
 800927c:	4b08      	ldr	r3, [pc, #32]	; (80092a0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800927e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	60fb      	str	r3, [r7, #12]
 8009286:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009288:	4b06      	ldr	r3, [pc, #24]	; (80092a4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	4905      	ldr	r1, [pc, #20]	; (80092a4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4313      	orrs	r3, r2
 8009292:	604b      	str	r3, [r1, #4]
}
 8009294:	bf00      	nop
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	40021000 	.word	0x40021000
 80092a4:	40010000 	.word	0x40010000

080092a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80092a8:	b480      	push	{r7}
 80092aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092ac:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a04      	ldr	r2, [pc, #16]	; (80092c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80092b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092b6:	6013      	str	r3, [r2, #0]
}
 80092b8:	bf00      	nop
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	40007000 	.word	0x40007000

080092c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80092c8:	b480      	push	{r7}
 80092ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80092cc:	4b04      	ldr	r3, [pc, #16]	; (80092e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	40007000 	.word	0x40007000

080092e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092f2:	d130      	bne.n	8009356 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80092f4:	4b23      	ldr	r3, [pc, #140]	; (8009384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009300:	d038      	beq.n	8009374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009302:	4b20      	ldr	r3, [pc, #128]	; (8009384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800930a:	4a1e      	ldr	r2, [pc, #120]	; (8009384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800930c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009310:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009312:	4b1d      	ldr	r3, [pc, #116]	; (8009388 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2232      	movs	r2, #50	; 0x32
 8009318:	fb02 f303 	mul.w	r3, r2, r3
 800931c:	4a1b      	ldr	r2, [pc, #108]	; (800938c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800931e:	fba2 2303 	umull	r2, r3, r2, r3
 8009322:	0c9b      	lsrs	r3, r3, #18
 8009324:	3301      	adds	r3, #1
 8009326:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009328:	e002      	b.n	8009330 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3b01      	subs	r3, #1
 800932e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009330:	4b14      	ldr	r3, [pc, #80]	; (8009384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800933c:	d102      	bne.n	8009344 <HAL_PWREx_ControlVoltageScaling+0x60>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1f2      	bne.n	800932a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009344:	4b0f      	ldr	r3, [pc, #60]	; (8009384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800934c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009350:	d110      	bne.n	8009374 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e00f      	b.n	8009376 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009356:	4b0b      	ldr	r3, [pc, #44]	; (8009384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800935e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009362:	d007      	beq.n	8009374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009364:	4b07      	ldr	r3, [pc, #28]	; (8009384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800936c:	4a05      	ldr	r2, [pc, #20]	; (8009384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800936e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009372:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	40007000 	.word	0x40007000
 8009388:	20000078 	.word	0x20000078
 800938c:	431bde83 	.word	0x431bde83

08009390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d102      	bne.n	80093a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	f000 bc02 	b.w	8009ba8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093a4:	4b96      	ldr	r3, [pc, #600]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f003 030c 	and.w	r3, r3, #12
 80093ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80093ae:	4b94      	ldr	r3, [pc, #592]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f003 0303 	and.w	r3, r3, #3
 80093b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0310 	and.w	r3, r3, #16
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 80e4 	beq.w	800958e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d007      	beq.n	80093dc <HAL_RCC_OscConfig+0x4c>
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	2b0c      	cmp	r3, #12
 80093d0:	f040 808b 	bne.w	80094ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	f040 8087 	bne.w	80094ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80093dc:	4b88      	ldr	r3, [pc, #544]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0302 	and.w	r3, r3, #2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <HAL_RCC_OscConfig+0x64>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e3d9      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a1a      	ldr	r2, [r3, #32]
 80093f8:	4b81      	ldr	r3, [pc, #516]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <HAL_RCC_OscConfig+0x7e>
 8009404:	4b7e      	ldr	r3, [pc, #504]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800940c:	e005      	b.n	800941a <HAL_RCC_OscConfig+0x8a>
 800940e:	4b7c      	ldr	r3, [pc, #496]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009414:	091b      	lsrs	r3, r3, #4
 8009416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800941a:	4293      	cmp	r3, r2
 800941c:	d223      	bcs.n	8009466 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	4618      	mov	r0, r3
 8009424:	f000 fdbe 	bl	8009fa4 <RCC_SetFlashLatencyFromMSIRange>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e3ba      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009432:	4b73      	ldr	r3, [pc, #460]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a72      	ldr	r2, [pc, #456]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009438:	f043 0308 	orr.w	r3, r3, #8
 800943c:	6013      	str	r3, [r2, #0]
 800943e:	4b70      	ldr	r3, [pc, #448]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	496d      	ldr	r1, [pc, #436]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 800944c:	4313      	orrs	r3, r2
 800944e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009450:	4b6b      	ldr	r3, [pc, #428]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	69db      	ldr	r3, [r3, #28]
 800945c:	021b      	lsls	r3, r3, #8
 800945e:	4968      	ldr	r1, [pc, #416]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009460:	4313      	orrs	r3, r2
 8009462:	604b      	str	r3, [r1, #4]
 8009464:	e025      	b.n	80094b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009466:	4b66      	ldr	r3, [pc, #408]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a65      	ldr	r2, [pc, #404]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 800946c:	f043 0308 	orr.w	r3, r3, #8
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	4b63      	ldr	r3, [pc, #396]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	4960      	ldr	r1, [pc, #384]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009480:	4313      	orrs	r3, r2
 8009482:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009484:	4b5e      	ldr	r3, [pc, #376]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	021b      	lsls	r3, r3, #8
 8009492:	495b      	ldr	r1, [pc, #364]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009494:	4313      	orrs	r3, r2
 8009496:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d109      	bne.n	80094b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fd7e 	bl	8009fa4 <RCC_SetFlashLatencyFromMSIRange>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e37a      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80094b2:	f000 fc81 	bl	8009db8 <HAL_RCC_GetSysClockFreq>
 80094b6:	4602      	mov	r2, r0
 80094b8:	4b51      	ldr	r3, [pc, #324]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	091b      	lsrs	r3, r3, #4
 80094be:	f003 030f 	and.w	r3, r3, #15
 80094c2:	4950      	ldr	r1, [pc, #320]	; (8009604 <HAL_RCC_OscConfig+0x274>)
 80094c4:	5ccb      	ldrb	r3, [r1, r3]
 80094c6:	f003 031f 	and.w	r3, r3, #31
 80094ca:	fa22 f303 	lsr.w	r3, r2, r3
 80094ce:	4a4e      	ldr	r2, [pc, #312]	; (8009608 <HAL_RCC_OscConfig+0x278>)
 80094d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80094d2:	4b4e      	ldr	r3, [pc, #312]	; (800960c <HAL_RCC_OscConfig+0x27c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fb fd80 	bl	8004fdc <HAL_InitTick>
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d052      	beq.n	800958c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	e35e      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d032      	beq.n	8009558 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80094f2:	4b43      	ldr	r3, [pc, #268]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a42      	ldr	r2, [pc, #264]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80094f8:	f043 0301 	orr.w	r3, r3, #1
 80094fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80094fe:	f7fc fdab 	bl	8006058 <HAL_GetTick>
 8009502:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009504:	e008      	b.n	8009518 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009506:	f7fc fda7 	bl	8006058 <HAL_GetTick>
 800950a:	4602      	mov	r2, r0
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	2b02      	cmp	r3, #2
 8009512:	d901      	bls.n	8009518 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e347      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009518:	4b39      	ldr	r3, [pc, #228]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0f0      	beq.n	8009506 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009524:	4b36      	ldr	r3, [pc, #216]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a35      	ldr	r2, [pc, #212]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 800952a:	f043 0308 	orr.w	r3, r3, #8
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	4b33      	ldr	r3, [pc, #204]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	4930      	ldr	r1, [pc, #192]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 800953e:	4313      	orrs	r3, r2
 8009540:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009542:	4b2f      	ldr	r3, [pc, #188]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	021b      	lsls	r3, r3, #8
 8009550:	492b      	ldr	r1, [pc, #172]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009552:	4313      	orrs	r3, r2
 8009554:	604b      	str	r3, [r1, #4]
 8009556:	e01a      	b.n	800958e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009558:	4b29      	ldr	r3, [pc, #164]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a28      	ldr	r2, [pc, #160]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 800955e:	f023 0301 	bic.w	r3, r3, #1
 8009562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009564:	f7fc fd78 	bl	8006058 <HAL_GetTick>
 8009568:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800956a:	e008      	b.n	800957e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800956c:	f7fc fd74 	bl	8006058 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	2b02      	cmp	r3, #2
 8009578:	d901      	bls.n	800957e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e314      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800957e:	4b20      	ldr	r3, [pc, #128]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 0302 	and.w	r3, r3, #2
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1f0      	bne.n	800956c <HAL_RCC_OscConfig+0x1dc>
 800958a:	e000      	b.n	800958e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800958c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	d073      	beq.n	8009682 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	2b08      	cmp	r3, #8
 800959e:	d005      	beq.n	80095ac <HAL_RCC_OscConfig+0x21c>
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	2b0c      	cmp	r3, #12
 80095a4:	d10e      	bne.n	80095c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	d10b      	bne.n	80095c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095ac:	4b14      	ldr	r3, [pc, #80]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d063      	beq.n	8009680 <HAL_RCC_OscConfig+0x2f0>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d15f      	bne.n	8009680 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e2f1      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095cc:	d106      	bne.n	80095dc <HAL_RCC_OscConfig+0x24c>
 80095ce:	4b0c      	ldr	r3, [pc, #48]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a0b      	ldr	r2, [pc, #44]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80095d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	e025      	b.n	8009628 <HAL_RCC_OscConfig+0x298>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095e4:	d114      	bne.n	8009610 <HAL_RCC_OscConfig+0x280>
 80095e6:	4b06      	ldr	r3, [pc, #24]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a05      	ldr	r2, [pc, #20]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80095ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	4b03      	ldr	r3, [pc, #12]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a02      	ldr	r2, [pc, #8]	; (8009600 <HAL_RCC_OscConfig+0x270>)
 80095f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	e013      	b.n	8009628 <HAL_RCC_OscConfig+0x298>
 8009600:	40021000 	.word	0x40021000
 8009604:	0801f720 	.word	0x0801f720
 8009608:	20000078 	.word	0x20000078
 800960c:	20000080 	.word	0x20000080
 8009610:	4ba0      	ldr	r3, [pc, #640]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a9f      	ldr	r2, [pc, #636]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800961a:	6013      	str	r3, [r2, #0]
 800961c:	4b9d      	ldr	r3, [pc, #628]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a9c      	ldr	r2, [pc, #624]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d013      	beq.n	8009658 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009630:	f7fc fd12 	bl	8006058 <HAL_GetTick>
 8009634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009636:	e008      	b.n	800964a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009638:	f7fc fd0e 	bl	8006058 <HAL_GetTick>
 800963c:	4602      	mov	r2, r0
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	2b64      	cmp	r3, #100	; 0x64
 8009644:	d901      	bls.n	800964a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	e2ae      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800964a:	4b92      	ldr	r3, [pc, #584]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009652:	2b00      	cmp	r3, #0
 8009654:	d0f0      	beq.n	8009638 <HAL_RCC_OscConfig+0x2a8>
 8009656:	e014      	b.n	8009682 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009658:	f7fc fcfe 	bl	8006058 <HAL_GetTick>
 800965c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800965e:	e008      	b.n	8009672 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009660:	f7fc fcfa 	bl	8006058 <HAL_GetTick>
 8009664:	4602      	mov	r2, r0
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	2b64      	cmp	r3, #100	; 0x64
 800966c:	d901      	bls.n	8009672 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e29a      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009672:	4b88      	ldr	r3, [pc, #544]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1f0      	bne.n	8009660 <HAL_RCC_OscConfig+0x2d0>
 800967e:	e000      	b.n	8009682 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0302 	and.w	r3, r3, #2
 800968a:	2b00      	cmp	r3, #0
 800968c:	d060      	beq.n	8009750 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	2b04      	cmp	r3, #4
 8009692:	d005      	beq.n	80096a0 <HAL_RCC_OscConfig+0x310>
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	2b0c      	cmp	r3, #12
 8009698:	d119      	bne.n	80096ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b02      	cmp	r3, #2
 800969e:	d116      	bne.n	80096ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80096a0:	4b7c      	ldr	r3, [pc, #496]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d005      	beq.n	80096b8 <HAL_RCC_OscConfig+0x328>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e277      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096b8:	4b76      	ldr	r3, [pc, #472]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	061b      	lsls	r3, r3, #24
 80096c6:	4973      	ldr	r1, [pc, #460]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 80096c8:	4313      	orrs	r3, r2
 80096ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80096cc:	e040      	b.n	8009750 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d023      	beq.n	800971e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80096d6:	4b6f      	ldr	r3, [pc, #444]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a6e      	ldr	r2, [pc, #440]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 80096dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e2:	f7fc fcb9 	bl	8006058 <HAL_GetTick>
 80096e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096e8:	e008      	b.n	80096fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096ea:	f7fc fcb5 	bl	8006058 <HAL_GetTick>
 80096ee:	4602      	mov	r2, r0
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d901      	bls.n	80096fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e255      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096fc:	4b65      	ldr	r3, [pc, #404]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0f0      	beq.n	80096ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009708:	4b62      	ldr	r3, [pc, #392]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	061b      	lsls	r3, r3, #24
 8009716:	495f      	ldr	r1, [pc, #380]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009718:	4313      	orrs	r3, r2
 800971a:	604b      	str	r3, [r1, #4]
 800971c:	e018      	b.n	8009750 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800971e:	4b5d      	ldr	r3, [pc, #372]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a5c      	ldr	r2, [pc, #368]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800972a:	f7fc fc95 	bl	8006058 <HAL_GetTick>
 800972e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009730:	e008      	b.n	8009744 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009732:	f7fc fc91 	bl	8006058 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	2b02      	cmp	r3, #2
 800973e:	d901      	bls.n	8009744 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e231      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009744:	4b53      	ldr	r3, [pc, #332]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1f0      	bne.n	8009732 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 0308 	and.w	r3, r3, #8
 8009758:	2b00      	cmp	r3, #0
 800975a:	d03c      	beq.n	80097d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01c      	beq.n	800979e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009764:	4b4b      	ldr	r3, [pc, #300]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800976a:	4a4a      	ldr	r2, [pc, #296]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 800976c:	f043 0301 	orr.w	r3, r3, #1
 8009770:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009774:	f7fc fc70 	bl	8006058 <HAL_GetTick>
 8009778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800977a:	e008      	b.n	800978e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800977c:	f7fc fc6c 	bl	8006058 <HAL_GetTick>
 8009780:	4602      	mov	r2, r0
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	2b02      	cmp	r3, #2
 8009788:	d901      	bls.n	800978e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e20c      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800978e:	4b41      	ldr	r3, [pc, #260]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009794:	f003 0302 	and.w	r3, r3, #2
 8009798:	2b00      	cmp	r3, #0
 800979a:	d0ef      	beq.n	800977c <HAL_RCC_OscConfig+0x3ec>
 800979c:	e01b      	b.n	80097d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800979e:	4b3d      	ldr	r3, [pc, #244]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 80097a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097a4:	4a3b      	ldr	r2, [pc, #236]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 80097a6:	f023 0301 	bic.w	r3, r3, #1
 80097aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097ae:	f7fc fc53 	bl	8006058 <HAL_GetTick>
 80097b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80097b4:	e008      	b.n	80097c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097b6:	f7fc fc4f 	bl	8006058 <HAL_GetTick>
 80097ba:	4602      	mov	r2, r0
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d901      	bls.n	80097c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80097c4:	2303      	movs	r3, #3
 80097c6:	e1ef      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80097c8:	4b32      	ldr	r3, [pc, #200]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 80097ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097ce:	f003 0302 	and.w	r3, r3, #2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1ef      	bne.n	80097b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0304 	and.w	r3, r3, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 80a6 	beq.w	8009930 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80097e4:	2300      	movs	r3, #0
 80097e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80097e8:	4b2a      	ldr	r3, [pc, #168]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 80097ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10d      	bne.n	8009810 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097f4:	4b27      	ldr	r3, [pc, #156]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 80097f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f8:	4a26      	ldr	r2, [pc, #152]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 80097fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097fe:	6593      	str	r3, [r2, #88]	; 0x58
 8009800:	4b24      	ldr	r3, [pc, #144]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009808:	60bb      	str	r3, [r7, #8]
 800980a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800980c:	2301      	movs	r3, #1
 800980e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009810:	4b21      	ldr	r3, [pc, #132]	; (8009898 <HAL_RCC_OscConfig+0x508>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009818:	2b00      	cmp	r3, #0
 800981a:	d118      	bne.n	800984e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800981c:	4b1e      	ldr	r3, [pc, #120]	; (8009898 <HAL_RCC_OscConfig+0x508>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a1d      	ldr	r2, [pc, #116]	; (8009898 <HAL_RCC_OscConfig+0x508>)
 8009822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009826:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009828:	f7fc fc16 	bl	8006058 <HAL_GetTick>
 800982c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800982e:	e008      	b.n	8009842 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009830:	f7fc fc12 	bl	8006058 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	2b02      	cmp	r3, #2
 800983c:	d901      	bls.n	8009842 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e1b2      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009842:	4b15      	ldr	r3, [pc, #84]	; (8009898 <HAL_RCC_OscConfig+0x508>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0f0      	beq.n	8009830 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d108      	bne.n	8009868 <HAL_RCC_OscConfig+0x4d8>
 8009856:	4b0f      	ldr	r3, [pc, #60]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800985c:	4a0d      	ldr	r2, [pc, #52]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 800985e:	f043 0301 	orr.w	r3, r3, #1
 8009862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009866:	e029      	b.n	80098bc <HAL_RCC_OscConfig+0x52c>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	2b05      	cmp	r3, #5
 800986e:	d115      	bne.n	800989c <HAL_RCC_OscConfig+0x50c>
 8009870:	4b08      	ldr	r3, [pc, #32]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009876:	4a07      	ldr	r2, [pc, #28]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009878:	f043 0304 	orr.w	r3, r3, #4
 800987c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009880:	4b04      	ldr	r3, [pc, #16]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009886:	4a03      	ldr	r2, [pc, #12]	; (8009894 <HAL_RCC_OscConfig+0x504>)
 8009888:	f043 0301 	orr.w	r3, r3, #1
 800988c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009890:	e014      	b.n	80098bc <HAL_RCC_OscConfig+0x52c>
 8009892:	bf00      	nop
 8009894:	40021000 	.word	0x40021000
 8009898:	40007000 	.word	0x40007000
 800989c:	4b9a      	ldr	r3, [pc, #616]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 800989e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098a2:	4a99      	ldr	r2, [pc, #612]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 80098a4:	f023 0301 	bic.w	r3, r3, #1
 80098a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80098ac:	4b96      	ldr	r3, [pc, #600]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 80098ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098b2:	4a95      	ldr	r2, [pc, #596]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 80098b4:	f023 0304 	bic.w	r3, r3, #4
 80098b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d016      	beq.n	80098f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098c4:	f7fc fbc8 	bl	8006058 <HAL_GetTick>
 80098c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098ca:	e00a      	b.n	80098e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098cc:	f7fc fbc4 	bl	8006058 <HAL_GetTick>
 80098d0:	4602      	mov	r2, r0
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80098da:	4293      	cmp	r3, r2
 80098dc:	d901      	bls.n	80098e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	e162      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098e2:	4b89      	ldr	r3, [pc, #548]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 80098e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098e8:	f003 0302 	and.w	r3, r3, #2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d0ed      	beq.n	80098cc <HAL_RCC_OscConfig+0x53c>
 80098f0:	e015      	b.n	800991e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098f2:	f7fc fbb1 	bl	8006058 <HAL_GetTick>
 80098f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80098f8:	e00a      	b.n	8009910 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098fa:	f7fc fbad 	bl	8006058 <HAL_GetTick>
 80098fe:	4602      	mov	r2, r0
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	f241 3288 	movw	r2, #5000	; 0x1388
 8009908:	4293      	cmp	r3, r2
 800990a:	d901      	bls.n	8009910 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800990c:	2303      	movs	r3, #3
 800990e:	e14b      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009910:	4b7d      	ldr	r3, [pc, #500]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1ed      	bne.n	80098fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800991e:	7ffb      	ldrb	r3, [r7, #31]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d105      	bne.n	8009930 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009924:	4b78      	ldr	r3, [pc, #480]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009928:	4a77      	ldr	r2, [pc, #476]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 800992a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800992e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0320 	and.w	r3, r3, #32
 8009938:	2b00      	cmp	r3, #0
 800993a:	d03c      	beq.n	80099b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009940:	2b00      	cmp	r3, #0
 8009942:	d01c      	beq.n	800997e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009944:	4b70      	ldr	r3, [pc, #448]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800994a:	4a6f      	ldr	r2, [pc, #444]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 800994c:	f043 0301 	orr.w	r3, r3, #1
 8009950:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009954:	f7fc fb80 	bl	8006058 <HAL_GetTick>
 8009958:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800995a:	e008      	b.n	800996e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800995c:	f7fc fb7c 	bl	8006058 <HAL_GetTick>
 8009960:	4602      	mov	r2, r0
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	2b02      	cmp	r3, #2
 8009968:	d901      	bls.n	800996e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e11c      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800996e:	4b66      	ldr	r3, [pc, #408]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009974:	f003 0302 	and.w	r3, r3, #2
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0ef      	beq.n	800995c <HAL_RCC_OscConfig+0x5cc>
 800997c:	e01b      	b.n	80099b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800997e:	4b62      	ldr	r3, [pc, #392]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009984:	4a60      	ldr	r2, [pc, #384]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009986:	f023 0301 	bic.w	r3, r3, #1
 800998a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800998e:	f7fc fb63 	bl	8006058 <HAL_GetTick>
 8009992:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009994:	e008      	b.n	80099a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009996:	f7fc fb5f 	bl	8006058 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d901      	bls.n	80099a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e0ff      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80099a8:	4b57      	ldr	r3, [pc, #348]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 80099aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099ae:	f003 0302 	and.w	r3, r3, #2
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1ef      	bne.n	8009996 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f000 80f3 	beq.w	8009ba6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	f040 80c9 	bne.w	8009b5c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80099ca:	4b4f      	ldr	r3, [pc, #316]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f003 0203 	and.w	r2, r3, #3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099da:	429a      	cmp	r2, r3
 80099dc:	d12c      	bne.n	8009a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e8:	3b01      	subs	r3, #1
 80099ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d123      	bne.n	8009a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d11b      	bne.n	8009a38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d113      	bne.n	8009a38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a1a:	085b      	lsrs	r3, r3, #1
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d109      	bne.n	8009a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2e:	085b      	lsrs	r3, r3, #1
 8009a30:	3b01      	subs	r3, #1
 8009a32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d06b      	beq.n	8009b10 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	2b0c      	cmp	r3, #12
 8009a3c:	d062      	beq.n	8009b04 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009a3e:	4b32      	ldr	r3, [pc, #200]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e0ac      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009a4e:	4b2e      	ldr	r3, [pc, #184]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a2d      	ldr	r2, [pc, #180]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009a54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009a5a:	f7fc fafd 	bl	8006058 <HAL_GetTick>
 8009a5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a60:	e008      	b.n	8009a74 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a62:	f7fc faf9 	bl	8006058 <HAL_GetTick>
 8009a66:	4602      	mov	r2, r0
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d901      	bls.n	8009a74 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e099      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a74:	4b24      	ldr	r3, [pc, #144]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1f0      	bne.n	8009a62 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a80:	4b21      	ldr	r3, [pc, #132]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009a82:	68da      	ldr	r2, [r3, #12]
 8009a84:	4b21      	ldr	r3, [pc, #132]	; (8009b0c <HAL_RCC_OscConfig+0x77c>)
 8009a86:	4013      	ands	r3, r2
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009a90:	3a01      	subs	r2, #1
 8009a92:	0112      	lsls	r2, r2, #4
 8009a94:	4311      	orrs	r1, r2
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009a9a:	0212      	lsls	r2, r2, #8
 8009a9c:	4311      	orrs	r1, r2
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009aa2:	0852      	lsrs	r2, r2, #1
 8009aa4:	3a01      	subs	r2, #1
 8009aa6:	0552      	lsls	r2, r2, #21
 8009aa8:	4311      	orrs	r1, r2
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009aae:	0852      	lsrs	r2, r2, #1
 8009ab0:	3a01      	subs	r2, #1
 8009ab2:	0652      	lsls	r2, r2, #25
 8009ab4:	4311      	orrs	r1, r2
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009aba:	06d2      	lsls	r2, r2, #27
 8009abc:	430a      	orrs	r2, r1
 8009abe:	4912      	ldr	r1, [pc, #72]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009ac4:	4b10      	ldr	r3, [pc, #64]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a0f      	ldr	r2, [pc, #60]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ace:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009ad0:	4b0d      	ldr	r3, [pc, #52]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	4a0c      	ldr	r2, [pc, #48]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ada:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009adc:	f7fc fabc 	bl	8006058 <HAL_GetTick>
 8009ae0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ae2:	e008      	b.n	8009af6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ae4:	f7fc fab8 	bl	8006058 <HAL_GetTick>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d901      	bls.n	8009af6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e058      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009af6:	4b04      	ldr	r3, [pc, #16]	; (8009b08 <HAL_RCC_OscConfig+0x778>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0f0      	beq.n	8009ae4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b02:	e050      	b.n	8009ba6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e04f      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
 8009b08:	40021000 	.word	0x40021000
 8009b0c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b10:	4b27      	ldr	r3, [pc, #156]	; (8009bb0 <HAL_RCC_OscConfig+0x820>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d144      	bne.n	8009ba6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009b1c:	4b24      	ldr	r3, [pc, #144]	; (8009bb0 <HAL_RCC_OscConfig+0x820>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a23      	ldr	r2, [pc, #140]	; (8009bb0 <HAL_RCC_OscConfig+0x820>)
 8009b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009b28:	4b21      	ldr	r3, [pc, #132]	; (8009bb0 <HAL_RCC_OscConfig+0x820>)
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	4a20      	ldr	r2, [pc, #128]	; (8009bb0 <HAL_RCC_OscConfig+0x820>)
 8009b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009b34:	f7fc fa90 	bl	8006058 <HAL_GetTick>
 8009b38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b3a:	e008      	b.n	8009b4e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b3c:	f7fc fa8c 	bl	8006058 <HAL_GetTick>
 8009b40:	4602      	mov	r2, r0
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d901      	bls.n	8009b4e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	e02c      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b4e:	4b18      	ldr	r3, [pc, #96]	; (8009bb0 <HAL_RCC_OscConfig+0x820>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d0f0      	beq.n	8009b3c <HAL_RCC_OscConfig+0x7ac>
 8009b5a:	e024      	b.n	8009ba6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	2b0c      	cmp	r3, #12
 8009b60:	d01f      	beq.n	8009ba2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b62:	4b13      	ldr	r3, [pc, #76]	; (8009bb0 <HAL_RCC_OscConfig+0x820>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a12      	ldr	r2, [pc, #72]	; (8009bb0 <HAL_RCC_OscConfig+0x820>)
 8009b68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b6e:	f7fc fa73 	bl	8006058 <HAL_GetTick>
 8009b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b74:	e008      	b.n	8009b88 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b76:	f7fc fa6f 	bl	8006058 <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d901      	bls.n	8009b88 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e00f      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b88:	4b09      	ldr	r3, [pc, #36]	; (8009bb0 <HAL_RCC_OscConfig+0x820>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1f0      	bne.n	8009b76 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8009b94:	4b06      	ldr	r3, [pc, #24]	; (8009bb0 <HAL_RCC_OscConfig+0x820>)
 8009b96:	68da      	ldr	r2, [r3, #12]
 8009b98:	4905      	ldr	r1, [pc, #20]	; (8009bb0 <HAL_RCC_OscConfig+0x820>)
 8009b9a:	4b06      	ldr	r3, [pc, #24]	; (8009bb4 <HAL_RCC_OscConfig+0x824>)
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	60cb      	str	r3, [r1, #12]
 8009ba0:	e001      	b.n	8009ba6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e000      	b.n	8009ba8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3720      	adds	r7, #32
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	40021000 	.word	0x40021000
 8009bb4:	feeefffc 	.word	0xfeeefffc

08009bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e0e7      	b.n	8009d9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009bcc:	4b75      	ldr	r3, [pc, #468]	; (8009da4 <HAL_RCC_ClockConfig+0x1ec>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 0307 	and.w	r3, r3, #7
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d910      	bls.n	8009bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bda:	4b72      	ldr	r3, [pc, #456]	; (8009da4 <HAL_RCC_ClockConfig+0x1ec>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f023 0207 	bic.w	r2, r3, #7
 8009be2:	4970      	ldr	r1, [pc, #448]	; (8009da4 <HAL_RCC_ClockConfig+0x1ec>)
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bea:	4b6e      	ldr	r3, [pc, #440]	; (8009da4 <HAL_RCC_ClockConfig+0x1ec>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0307 	and.w	r3, r3, #7
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d001      	beq.n	8009bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e0cf      	b.n	8009d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 0302 	and.w	r3, r3, #2
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d010      	beq.n	8009c2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	689a      	ldr	r2, [r3, #8]
 8009c0c:	4b66      	ldr	r3, [pc, #408]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d908      	bls.n	8009c2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c18:	4b63      	ldr	r3, [pc, #396]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	4960      	ldr	r1, [pc, #384]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d04c      	beq.n	8009cd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	2b03      	cmp	r3, #3
 8009c3c:	d107      	bne.n	8009c4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c3e:	4b5a      	ldr	r3, [pc, #360]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d121      	bne.n	8009c8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e0a6      	b.n	8009d9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d107      	bne.n	8009c66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c56:	4b54      	ldr	r3, [pc, #336]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d115      	bne.n	8009c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e09a      	b.n	8009d9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d107      	bne.n	8009c7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009c6e:	4b4e      	ldr	r3, [pc, #312]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d109      	bne.n	8009c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e08e      	b.n	8009d9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c7e:	4b4a      	ldr	r3, [pc, #296]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e086      	b.n	8009d9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009c8e:	4b46      	ldr	r3, [pc, #280]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	f023 0203 	bic.w	r2, r3, #3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	4943      	ldr	r1, [pc, #268]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ca0:	f7fc f9da 	bl	8006058 <HAL_GetTick>
 8009ca4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ca6:	e00a      	b.n	8009cbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ca8:	f7fc f9d6 	bl	8006058 <HAL_GetTick>
 8009cac:	4602      	mov	r2, r0
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d901      	bls.n	8009cbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e06e      	b.n	8009d9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cbe:	4b3a      	ldr	r3, [pc, #232]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	f003 020c 	and.w	r2, r3, #12
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d1eb      	bne.n	8009ca8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0302 	and.w	r3, r3, #2
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d010      	beq.n	8009cfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689a      	ldr	r2, [r3, #8]
 8009ce0:	4b31      	ldr	r3, [pc, #196]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d208      	bcs.n	8009cfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cec:	4b2e      	ldr	r3, [pc, #184]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	492b      	ldr	r1, [pc, #172]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009cfe:	4b29      	ldr	r3, [pc, #164]	; (8009da4 <HAL_RCC_ClockConfig+0x1ec>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0307 	and.w	r3, r3, #7
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d210      	bcs.n	8009d2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d0c:	4b25      	ldr	r3, [pc, #148]	; (8009da4 <HAL_RCC_ClockConfig+0x1ec>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f023 0207 	bic.w	r2, r3, #7
 8009d14:	4923      	ldr	r1, [pc, #140]	; (8009da4 <HAL_RCC_ClockConfig+0x1ec>)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d1c:	4b21      	ldr	r3, [pc, #132]	; (8009da4 <HAL_RCC_ClockConfig+0x1ec>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0307 	and.w	r3, r3, #7
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d001      	beq.n	8009d2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e036      	b.n	8009d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d008      	beq.n	8009d4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d3a:	4b1b      	ldr	r3, [pc, #108]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	4918      	ldr	r1, [pc, #96]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0308 	and.w	r3, r3, #8
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d009      	beq.n	8009d6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d58:	4b13      	ldr	r3, [pc, #76]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	00db      	lsls	r3, r3, #3
 8009d66:	4910      	ldr	r1, [pc, #64]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009d6c:	f000 f824 	bl	8009db8 <HAL_RCC_GetSysClockFreq>
 8009d70:	4602      	mov	r2, r0
 8009d72:	4b0d      	ldr	r3, [pc, #52]	; (8009da8 <HAL_RCC_ClockConfig+0x1f0>)
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	091b      	lsrs	r3, r3, #4
 8009d78:	f003 030f 	and.w	r3, r3, #15
 8009d7c:	490b      	ldr	r1, [pc, #44]	; (8009dac <HAL_RCC_ClockConfig+0x1f4>)
 8009d7e:	5ccb      	ldrb	r3, [r1, r3]
 8009d80:	f003 031f 	and.w	r3, r3, #31
 8009d84:	fa22 f303 	lsr.w	r3, r2, r3
 8009d88:	4a09      	ldr	r2, [pc, #36]	; (8009db0 <HAL_RCC_ClockConfig+0x1f8>)
 8009d8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009d8c:	4b09      	ldr	r3, [pc, #36]	; (8009db4 <HAL_RCC_ClockConfig+0x1fc>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fb f923 	bl	8004fdc <HAL_InitTick>
 8009d96:	4603      	mov	r3, r0
 8009d98:	72fb      	strb	r3, [r7, #11]

  return status;
 8009d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	40022000 	.word	0x40022000
 8009da8:	40021000 	.word	0x40021000
 8009dac:	0801f720 	.word	0x0801f720
 8009db0:	20000078 	.word	0x20000078
 8009db4:	20000080 	.word	0x20000080

08009db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b089      	sub	sp, #36	; 0x24
 8009dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	61fb      	str	r3, [r7, #28]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dc6:	4b3e      	ldr	r3, [pc, #248]	; (8009ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	f003 030c 	and.w	r3, r3, #12
 8009dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009dd0:	4b3b      	ldr	r3, [pc, #236]	; (8009ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	f003 0303 	and.w	r3, r3, #3
 8009dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d005      	beq.n	8009dec <HAL_RCC_GetSysClockFreq+0x34>
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	2b0c      	cmp	r3, #12
 8009de4:	d121      	bne.n	8009e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d11e      	bne.n	8009e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009dec:	4b34      	ldr	r3, [pc, #208]	; (8009ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 0308 	and.w	r3, r3, #8
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d107      	bne.n	8009e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009df8:	4b31      	ldr	r3, [pc, #196]	; (8009ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dfe:	0a1b      	lsrs	r3, r3, #8
 8009e00:	f003 030f 	and.w	r3, r3, #15
 8009e04:	61fb      	str	r3, [r7, #28]
 8009e06:	e005      	b.n	8009e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009e08:	4b2d      	ldr	r3, [pc, #180]	; (8009ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	091b      	lsrs	r3, r3, #4
 8009e0e:	f003 030f 	and.w	r3, r3, #15
 8009e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009e14:	4a2b      	ldr	r2, [pc, #172]	; (8009ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10d      	bne.n	8009e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009e28:	e00a      	b.n	8009e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	2b04      	cmp	r3, #4
 8009e2e:	d102      	bne.n	8009e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009e30:	4b25      	ldr	r3, [pc, #148]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009e32:	61bb      	str	r3, [r7, #24]
 8009e34:	e004      	b.n	8009e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	2b08      	cmp	r3, #8
 8009e3a:	d101      	bne.n	8009e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009e3c:	4b23      	ldr	r3, [pc, #140]	; (8009ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8009e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	2b0c      	cmp	r3, #12
 8009e44:	d134      	bne.n	8009eb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009e46:	4b1e      	ldr	r3, [pc, #120]	; (8009ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f003 0303 	and.w	r3, r3, #3
 8009e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d003      	beq.n	8009e5e <HAL_RCC_GetSysClockFreq+0xa6>
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d003      	beq.n	8009e64 <HAL_RCC_GetSysClockFreq+0xac>
 8009e5c:	e005      	b.n	8009e6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009e5e:	4b1a      	ldr	r3, [pc, #104]	; (8009ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009e60:	617b      	str	r3, [r7, #20]
      break;
 8009e62:	e005      	b.n	8009e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009e64:	4b19      	ldr	r3, [pc, #100]	; (8009ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8009e66:	617b      	str	r3, [r7, #20]
      break;
 8009e68:	e002      	b.n	8009e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	617b      	str	r3, [r7, #20]
      break;
 8009e6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e70:	4b13      	ldr	r3, [pc, #76]	; (8009ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	091b      	lsrs	r3, r3, #4
 8009e76:	f003 0307 	and.w	r3, r3, #7
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009e7e:	4b10      	ldr	r3, [pc, #64]	; (8009ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	0a1b      	lsrs	r3, r3, #8
 8009e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	fb03 f202 	mul.w	r2, r3, r2
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009e96:	4b0a      	ldr	r3, [pc, #40]	; (8009ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	0e5b      	lsrs	r3, r3, #25
 8009e9c:	f003 0303 	and.w	r3, r3, #3
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009eb0:	69bb      	ldr	r3, [r7, #24]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3724      	adds	r7, #36	; 0x24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	40021000 	.word	0x40021000
 8009ec4:	0801f738 	.word	0x0801f738
 8009ec8:	00f42400 	.word	0x00f42400
 8009ecc:	007a1200 	.word	0x007a1200

08009ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ed4:	4b03      	ldr	r3, [pc, #12]	; (8009ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	20000078 	.word	0x20000078

08009ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009eec:	f7ff fff0 	bl	8009ed0 <HAL_RCC_GetHCLKFreq>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	4b06      	ldr	r3, [pc, #24]	; (8009f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	0a1b      	lsrs	r3, r3, #8
 8009ef8:	f003 0307 	and.w	r3, r3, #7
 8009efc:	4904      	ldr	r1, [pc, #16]	; (8009f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009efe:	5ccb      	ldrb	r3, [r1, r3]
 8009f00:	f003 031f 	and.w	r3, r3, #31
 8009f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	40021000 	.word	0x40021000
 8009f10:	0801f730 	.word	0x0801f730

08009f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009f18:	f7ff ffda 	bl	8009ed0 <HAL_RCC_GetHCLKFreq>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	4b06      	ldr	r3, [pc, #24]	; (8009f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	0adb      	lsrs	r3, r3, #11
 8009f24:	f003 0307 	and.w	r3, r3, #7
 8009f28:	4904      	ldr	r1, [pc, #16]	; (8009f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009f2a:	5ccb      	ldrb	r3, [r1, r3]
 8009f2c:	f003 031f 	and.w	r3, r3, #31
 8009f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	40021000 	.word	0x40021000
 8009f3c:	0801f730 	.word	0x0801f730

08009f40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	220f      	movs	r2, #15
 8009f4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009f50:	4b12      	ldr	r3, [pc, #72]	; (8009f9c <HAL_RCC_GetClockConfig+0x5c>)
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f003 0203 	and.w	r2, r3, #3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009f5c:	4b0f      	ldr	r3, [pc, #60]	; (8009f9c <HAL_RCC_GetClockConfig+0x5c>)
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009f68:	4b0c      	ldr	r3, [pc, #48]	; (8009f9c <HAL_RCC_GetClockConfig+0x5c>)
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009f74:	4b09      	ldr	r3, [pc, #36]	; (8009f9c <HAL_RCC_GetClockConfig+0x5c>)
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	08db      	lsrs	r3, r3, #3
 8009f7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009f82:	4b07      	ldr	r3, [pc, #28]	; (8009fa0 <HAL_RCC_GetClockConfig+0x60>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0207 	and.w	r2, r3, #7
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	601a      	str	r2, [r3, #0]
}
 8009f8e:	bf00      	nop
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	40021000 	.word	0x40021000
 8009fa0:	40022000 	.word	0x40022000

08009fa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b086      	sub	sp, #24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009fac:	2300      	movs	r3, #0
 8009fae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009fb0:	4b2a      	ldr	r3, [pc, #168]	; (800a05c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009fbc:	f7ff f984 	bl	80092c8 <HAL_PWREx_GetVoltageRange>
 8009fc0:	6178      	str	r0, [r7, #20]
 8009fc2:	e014      	b.n	8009fee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009fc4:	4b25      	ldr	r3, [pc, #148]	; (800a05c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc8:	4a24      	ldr	r2, [pc, #144]	; (800a05c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fce:	6593      	str	r3, [r2, #88]	; 0x58
 8009fd0:	4b22      	ldr	r3, [pc, #136]	; (800a05c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009fdc:	f7ff f974 	bl	80092c8 <HAL_PWREx_GetVoltageRange>
 8009fe0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009fe2:	4b1e      	ldr	r3, [pc, #120]	; (800a05c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe6:	4a1d      	ldr	r2, [pc, #116]	; (800a05c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff4:	d10b      	bne.n	800a00e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b80      	cmp	r3, #128	; 0x80
 8009ffa:	d919      	bls.n	800a030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2ba0      	cmp	r3, #160	; 0xa0
 800a000:	d902      	bls.n	800a008 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a002:	2302      	movs	r3, #2
 800a004:	613b      	str	r3, [r7, #16]
 800a006:	e013      	b.n	800a030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a008:	2301      	movs	r3, #1
 800a00a:	613b      	str	r3, [r7, #16]
 800a00c:	e010      	b.n	800a030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b80      	cmp	r3, #128	; 0x80
 800a012:	d902      	bls.n	800a01a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a014:	2303      	movs	r3, #3
 800a016:	613b      	str	r3, [r7, #16]
 800a018:	e00a      	b.n	800a030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b80      	cmp	r3, #128	; 0x80
 800a01e:	d102      	bne.n	800a026 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a020:	2302      	movs	r3, #2
 800a022:	613b      	str	r3, [r7, #16]
 800a024:	e004      	b.n	800a030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b70      	cmp	r3, #112	; 0x70
 800a02a:	d101      	bne.n	800a030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a02c:	2301      	movs	r3, #1
 800a02e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a030:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f023 0207 	bic.w	r2, r3, #7
 800a038:	4909      	ldr	r1, [pc, #36]	; (800a060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a040:	4b07      	ldr	r3, [pc, #28]	; (800a060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0307 	and.w	r3, r3, #7
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d001      	beq.n	800a052 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e000      	b.n	800a054 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3718      	adds	r7, #24
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	40021000 	.word	0x40021000
 800a060:	40022000 	.word	0x40022000

0800a064 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a06c:	2300      	movs	r3, #0
 800a06e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a070:	2300      	movs	r3, #0
 800a072:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d031      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a084:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a088:	d01a      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a08a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a08e:	d814      	bhi.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a090:	2b00      	cmp	r3, #0
 800a092:	d009      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a094:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a098:	d10f      	bne.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800a09a:	4b5d      	ldr	r3, [pc, #372]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	4a5c      	ldr	r2, [pc, #368]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a0a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a0a6:	e00c      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 f9de 	bl	800a470 <RCCEx_PLLSAI1_Config>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a0b8:	e003      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	74fb      	strb	r3, [r7, #19]
      break;
 800a0be:	e000      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800a0c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0c2:	7cfb      	ldrb	r3, [r7, #19]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10b      	bne.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a0c8:	4b51      	ldr	r3, [pc, #324]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d6:	494e      	ldr	r1, [pc, #312]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a0de:	e001      	b.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e0:	7cfb      	ldrb	r3, [r7, #19]
 800a0e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 809e 	beq.w	800a22e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a0f6:	4b46      	ldr	r3, [pc, #280]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800a102:	2301      	movs	r3, #1
 800a104:	e000      	b.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800a106:	2300      	movs	r3, #0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00d      	beq.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a10c:	4b40      	ldr	r3, [pc, #256]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a10e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a110:	4a3f      	ldr	r2, [pc, #252]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a116:	6593      	str	r3, [r2, #88]	; 0x58
 800a118:	4b3d      	ldr	r3, [pc, #244]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a11a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a11c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a120:	60bb      	str	r3, [r7, #8]
 800a122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a124:	2301      	movs	r3, #1
 800a126:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a128:	4b3a      	ldr	r3, [pc, #232]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a39      	ldr	r2, [pc, #228]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a12e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a132:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a134:	f7fb ff90 	bl	8006058 <HAL_GetTick>
 800a138:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a13a:	e009      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a13c:	f7fb ff8c 	bl	8006058 <HAL_GetTick>
 800a140:	4602      	mov	r2, r0
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	2b02      	cmp	r3, #2
 800a148:	d902      	bls.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	74fb      	strb	r3, [r7, #19]
        break;
 800a14e:	e005      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a150:	4b30      	ldr	r3, [pc, #192]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d0ef      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800a15c:	7cfb      	ldrb	r3, [r7, #19]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d15a      	bne.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a162:	4b2b      	ldr	r3, [pc, #172]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a16c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d01e      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d019      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a17e:	4b24      	ldr	r3, [pc, #144]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a188:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a18a:	4b21      	ldr	r3, [pc, #132]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a18c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a190:	4a1f      	ldr	r2, [pc, #124]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a19a:	4b1d      	ldr	r3, [pc, #116]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1a0:	4a1b      	ldr	r2, [pc, #108]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a1a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a1aa:	4a19      	ldr	r2, [pc, #100]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	f003 0301 	and.w	r3, r3, #1
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d016      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1bc:	f7fb ff4c 	bl	8006058 <HAL_GetTick>
 800a1c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1c2:	e00b      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1c4:	f7fb ff48 	bl	8006058 <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d902      	bls.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	74fb      	strb	r3, [r7, #19]
            break;
 800a1da:	e006      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1dc:	4b0c      	ldr	r3, [pc, #48]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a1de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d0ec      	beq.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800a1ea:	7cfb      	ldrb	r3, [r7, #19]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10b      	bne.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a1f0:	4b07      	ldr	r3, [pc, #28]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1fe:	4904      	ldr	r1, [pc, #16]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a200:	4313      	orrs	r3, r2
 800a202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a206:	e009      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a208:	7cfb      	ldrb	r3, [r7, #19]
 800a20a:	74bb      	strb	r3, [r7, #18]
 800a20c:	e006      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800a20e:	bf00      	nop
 800a210:	40021000 	.word	0x40021000
 800a214:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a218:	7cfb      	ldrb	r3, [r7, #19]
 800a21a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a21c:	7c7b      	ldrb	r3, [r7, #17]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d105      	bne.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a222:	4b8a      	ldr	r3, [pc, #552]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a226:	4a89      	ldr	r2, [pc, #548]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a22c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00a      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a23a:	4b84      	ldr	r3, [pc, #528]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a23c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a240:	f023 0203 	bic.w	r2, r3, #3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a1b      	ldr	r3, [r3, #32]
 800a248:	4980      	ldr	r1, [pc, #512]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a24a:	4313      	orrs	r3, r2
 800a24c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 0302 	and.w	r3, r3, #2
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00a      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a25c:	4b7b      	ldr	r3, [pc, #492]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a262:	f023 020c 	bic.w	r2, r3, #12
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26a:	4978      	ldr	r1, [pc, #480]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a26c:	4313      	orrs	r3, r2
 800a26e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 0320 	and.w	r3, r3, #32
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00a      	beq.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a27e:	4b73      	ldr	r3, [pc, #460]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a284:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28c:	496f      	ldr	r1, [pc, #444]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a28e:	4313      	orrs	r3, r2
 800a290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00a      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2a0:	4b6a      	ldr	r3, [pc, #424]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ae:	4967      	ldr	r1, [pc, #412]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00a      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a2c2:	4b62      	ldr	r3, [pc, #392]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d0:	495e      	ldr	r1, [pc, #376]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00a      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a2e4:	4b59      	ldr	r3, [pc, #356]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a2e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f2:	4956      	ldr	r1, [pc, #344]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00a      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a306:	4b51      	ldr	r3, [pc, #324]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a314:	494d      	ldr	r1, [pc, #308]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a316:	4313      	orrs	r3, r2
 800a318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d028      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a328:	4b48      	ldr	r3, [pc, #288]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a32e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	4945      	ldr	r1, [pc, #276]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a338:	4313      	orrs	r3, r2
 800a33a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a346:	d106      	bne.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a348:	4b40      	ldr	r3, [pc, #256]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	4a3f      	ldr	r2, [pc, #252]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a34e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a352:	60d3      	str	r3, [r2, #12]
 800a354:	e011      	b.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a35e:	d10c      	bne.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	3304      	adds	r3, #4
 800a364:	2101      	movs	r1, #1
 800a366:	4618      	mov	r0, r3
 800a368:	f000 f882 	bl	800a470 <RCCEx_PLLSAI1_Config>
 800a36c:	4603      	mov	r3, r0
 800a36e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a370:	7cfb      	ldrb	r3, [r7, #19]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800a376:	7cfb      	ldrb	r3, [r7, #19]
 800a378:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d028      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a386:	4b31      	ldr	r3, [pc, #196]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a38c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a394:	492d      	ldr	r1, [pc, #180]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a396:	4313      	orrs	r3, r2
 800a398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3a4:	d106      	bne.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a3a6:	4b29      	ldr	r3, [pc, #164]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	4a28      	ldr	r2, [pc, #160]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a3ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3b0:	60d3      	str	r3, [r2, #12]
 800a3b2:	e011      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3bc:	d10c      	bne.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 f853 	bl	800a470 <RCCEx_PLLSAI1_Config>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a3ce:	7cfb      	ldrb	r3, [r7, #19]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800a3d4:	7cfb      	ldrb	r3, [r7, #19]
 800a3d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d01c      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a3e4:	4b19      	ldr	r3, [pc, #100]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3f2:	4916      	ldr	r1, [pc, #88]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a402:	d10c      	bne.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3304      	adds	r3, #4
 800a408:	2102      	movs	r1, #2
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 f830 	bl	800a470 <RCCEx_PLLSAI1_Config>
 800a410:	4603      	mov	r3, r0
 800a412:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a414:	7cfb      	ldrb	r3, [r7, #19]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800a41a:	7cfb      	ldrb	r3, [r7, #19]
 800a41c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00a      	beq.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a42a:	4b08      	ldr	r3, [pc, #32]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a42c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a430:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a438:	4904      	ldr	r1, [pc, #16]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a440:	7cbb      	ldrb	r3, [r7, #18]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3718      	adds	r7, #24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	40021000 	.word	0x40021000

0800a450 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a450:	b480      	push	{r7}
 800a452:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a454:	4b05      	ldr	r3, [pc, #20]	; (800a46c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a04      	ldr	r2, [pc, #16]	; (800a46c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a45a:	f043 0304 	orr.w	r3, r3, #4
 800a45e:	6013      	str	r3, [r2, #0]
}
 800a460:	bf00      	nop
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	40021000 	.word	0x40021000

0800a470 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a47e:	4b74      	ldr	r3, [pc, #464]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	f003 0303 	and.w	r3, r3, #3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d018      	beq.n	800a4bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a48a:	4b71      	ldr	r3, [pc, #452]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	f003 0203 	and.w	r2, r3, #3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d10d      	bne.n	800a4b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
       ||
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d009      	beq.n	800a4b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a4a2:	4b6b      	ldr	r3, [pc, #428]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	091b      	lsrs	r3, r3, #4
 800a4a8:	f003 0307 	and.w	r3, r3, #7
 800a4ac:	1c5a      	adds	r2, r3, #1
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	685b      	ldr	r3, [r3, #4]
       ||
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d047      	beq.n	800a546 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	73fb      	strb	r3, [r7, #15]
 800a4ba:	e044      	b.n	800a546 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b03      	cmp	r3, #3
 800a4c2:	d018      	beq.n	800a4f6 <RCCEx_PLLSAI1_Config+0x86>
 800a4c4:	2b03      	cmp	r3, #3
 800a4c6:	d825      	bhi.n	800a514 <RCCEx_PLLSAI1_Config+0xa4>
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d002      	beq.n	800a4d2 <RCCEx_PLLSAI1_Config+0x62>
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d009      	beq.n	800a4e4 <RCCEx_PLLSAI1_Config+0x74>
 800a4d0:	e020      	b.n	800a514 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a4d2:	4b5f      	ldr	r3, [pc, #380]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d11d      	bne.n	800a51a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4e2:	e01a      	b.n	800a51a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a4e4:	4b5a      	ldr	r3, [pc, #360]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d116      	bne.n	800a51e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4f4:	e013      	b.n	800a51e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a4f6:	4b56      	ldr	r3, [pc, #344]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10f      	bne.n	800a522 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a502:	4b53      	ldr	r3, [pc, #332]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d109      	bne.n	800a522 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a512:	e006      	b.n	800a522 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	73fb      	strb	r3, [r7, #15]
      break;
 800a518:	e004      	b.n	800a524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a51a:	bf00      	nop
 800a51c:	e002      	b.n	800a524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a51e:	bf00      	nop
 800a520:	e000      	b.n	800a524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a522:	bf00      	nop
    }

    if(status == HAL_OK)
 800a524:	7bfb      	ldrb	r3, [r7, #15]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10d      	bne.n	800a546 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a52a:	4b49      	ldr	r3, [pc, #292]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6819      	ldr	r1, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	3b01      	subs	r3, #1
 800a53c:	011b      	lsls	r3, r3, #4
 800a53e:	430b      	orrs	r3, r1
 800a540:	4943      	ldr	r1, [pc, #268]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a542:	4313      	orrs	r3, r2
 800a544:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a546:	7bfb      	ldrb	r3, [r7, #15]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d17c      	bne.n	800a646 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a54c:	4b40      	ldr	r3, [pc, #256]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a3f      	ldr	r2, [pc, #252]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a552:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a558:	f7fb fd7e 	bl	8006058 <HAL_GetTick>
 800a55c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a55e:	e009      	b.n	800a574 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a560:	f7fb fd7a 	bl	8006058 <HAL_GetTick>
 800a564:	4602      	mov	r2, r0
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d902      	bls.n	800a574 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a56e:	2303      	movs	r3, #3
 800a570:	73fb      	strb	r3, [r7, #15]
        break;
 800a572:	e005      	b.n	800a580 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a574:	4b36      	ldr	r3, [pc, #216]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1ef      	bne.n	800a560 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a580:	7bfb      	ldrb	r3, [r7, #15]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d15f      	bne.n	800a646 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d110      	bne.n	800a5ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a58c:	4b30      	ldr	r3, [pc, #192]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a594:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	6892      	ldr	r2, [r2, #8]
 800a59c:	0211      	lsls	r1, r2, #8
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	68d2      	ldr	r2, [r2, #12]
 800a5a2:	06d2      	lsls	r2, r2, #27
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	492a      	ldr	r1, [pc, #168]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	610b      	str	r3, [r1, #16]
 800a5ac:	e027      	b.n	800a5fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d112      	bne.n	800a5da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a5b4:	4b26      	ldr	r3, [pc, #152]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a5bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	6892      	ldr	r2, [r2, #8]
 800a5c4:	0211      	lsls	r1, r2, #8
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	6912      	ldr	r2, [r2, #16]
 800a5ca:	0852      	lsrs	r2, r2, #1
 800a5cc:	3a01      	subs	r2, #1
 800a5ce:	0552      	lsls	r2, r2, #21
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	491f      	ldr	r1, [pc, #124]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	610b      	str	r3, [r1, #16]
 800a5d8:	e011      	b.n	800a5fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a5da:	4b1d      	ldr	r3, [pc, #116]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a5e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	6892      	ldr	r2, [r2, #8]
 800a5ea:	0211      	lsls	r1, r2, #8
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	6952      	ldr	r2, [r2, #20]
 800a5f0:	0852      	lsrs	r2, r2, #1
 800a5f2:	3a01      	subs	r2, #1
 800a5f4:	0652      	lsls	r2, r2, #25
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	4915      	ldr	r1, [pc, #84]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a5fe:	4b14      	ldr	r3, [pc, #80]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a13      	ldr	r2, [pc, #76]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a604:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a608:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a60a:	f7fb fd25 	bl	8006058 <HAL_GetTick>
 800a60e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a610:	e009      	b.n	800a626 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a612:	f7fb fd21 	bl	8006058 <HAL_GetTick>
 800a616:	4602      	mov	r2, r0
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d902      	bls.n	800a626 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a620:	2303      	movs	r3, #3
 800a622:	73fb      	strb	r3, [r7, #15]
          break;
 800a624:	e005      	b.n	800a632 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a626:	4b0a      	ldr	r3, [pc, #40]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d0ef      	beq.n	800a612 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a632:	7bfb      	ldrb	r3, [r7, #15]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d106      	bne.n	800a646 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a638:	4b05      	ldr	r3, [pc, #20]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a63a:	691a      	ldr	r2, [r3, #16]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	699b      	ldr	r3, [r3, #24]
 800a640:	4903      	ldr	r1, [pc, #12]	; (800a650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a642:	4313      	orrs	r3, r2
 800a644:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a646:	7bfb      	ldrb	r3, [r7, #15]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	40021000 	.word	0x40021000

0800a654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d101      	bne.n	800a666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e049      	b.n	800a6fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d106      	bne.n	800a680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7fa fc0a 	bl	8004e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2202      	movs	r2, #2
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3304      	adds	r3, #4
 800a690:	4619      	mov	r1, r3
 800a692:	4610      	mov	r0, r2
 800a694:	f000 fa1e 	bl	800aad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
	...

0800a704 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b01      	cmp	r3, #1
 800a716:	d001      	beq.n	800a71c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e033      	b.n	800a784 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2202      	movs	r2, #2
 800a720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a19      	ldr	r2, [pc, #100]	; (800a790 <HAL_TIM_Base_Start+0x8c>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d009      	beq.n	800a742 <HAL_TIM_Base_Start+0x3e>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a736:	d004      	beq.n	800a742 <HAL_TIM_Base_Start+0x3e>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a15      	ldr	r2, [pc, #84]	; (800a794 <HAL_TIM_Base_Start+0x90>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d115      	bne.n	800a76e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689a      	ldr	r2, [r3, #8]
 800a748:	4b13      	ldr	r3, [pc, #76]	; (800a798 <HAL_TIM_Base_Start+0x94>)
 800a74a:	4013      	ands	r3, r2
 800a74c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2b06      	cmp	r3, #6
 800a752:	d015      	beq.n	800a780 <HAL_TIM_Base_Start+0x7c>
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a75a:	d011      	beq.n	800a780 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f042 0201 	orr.w	r2, r2, #1
 800a76a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a76c:	e008      	b.n	800a780 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f042 0201 	orr.w	r2, r2, #1
 800a77c:	601a      	str	r2, [r3, #0]
 800a77e:	e000      	b.n	800a782 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a780:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	40012c00 	.word	0x40012c00
 800a794:	40014000 	.word	0x40014000
 800a798:	00010007 	.word	0x00010007

0800a79c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d001      	beq.n	800a7b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e03b      	b.n	800a82c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f042 0201 	orr.w	r2, r2, #1
 800a7ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a19      	ldr	r2, [pc, #100]	; (800a838 <HAL_TIM_Base_Start_IT+0x9c>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d009      	beq.n	800a7ea <HAL_TIM_Base_Start_IT+0x4e>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7de:	d004      	beq.n	800a7ea <HAL_TIM_Base_Start_IT+0x4e>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a15      	ldr	r2, [pc, #84]	; (800a83c <HAL_TIM_Base_Start_IT+0xa0>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d115      	bne.n	800a816 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	689a      	ldr	r2, [r3, #8]
 800a7f0:	4b13      	ldr	r3, [pc, #76]	; (800a840 <HAL_TIM_Base_Start_IT+0xa4>)
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b06      	cmp	r3, #6
 800a7fa:	d015      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x8c>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a802:	d011      	beq.n	800a828 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0201 	orr.w	r2, r2, #1
 800a812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a814:	e008      	b.n	800a828 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f042 0201 	orr.w	r2, r2, #1
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	e000      	b.n	800a82a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a828:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3714      	adds	r7, #20
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	40012c00 	.word	0x40012c00
 800a83c:	40014000 	.word	0x40014000
 800a840:	00010007 	.word	0x00010007

0800a844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	f003 0302 	and.w	r3, r3, #2
 800a856:	2b02      	cmp	r3, #2
 800a858:	d122      	bne.n	800a8a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	f003 0302 	and.w	r3, r3, #2
 800a864:	2b02      	cmp	r3, #2
 800a866:	d11b      	bne.n	800a8a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f06f 0202 	mvn.w	r2, #2
 800a870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	f003 0303 	and.w	r3, r3, #3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f905 	bl	800aa96 <HAL_TIM_IC_CaptureCallback>
 800a88c:	e005      	b.n	800a89a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f8f7 	bl	800aa82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f908 	bl	800aaaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	f003 0304 	and.w	r3, r3, #4
 800a8aa:	2b04      	cmp	r3, #4
 800a8ac:	d122      	bne.n	800a8f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	f003 0304 	and.w	r3, r3, #4
 800a8b8:	2b04      	cmp	r3, #4
 800a8ba:	d11b      	bne.n	800a8f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f06f 0204 	mvn.w	r2, #4
 800a8c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f8db 	bl	800aa96 <HAL_TIM_IC_CaptureCallback>
 800a8e0:	e005      	b.n	800a8ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f8cd 	bl	800aa82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f8de 	bl	800aaaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	f003 0308 	and.w	r3, r3, #8
 800a8fe:	2b08      	cmp	r3, #8
 800a900:	d122      	bne.n	800a948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	f003 0308 	and.w	r3, r3, #8
 800a90c:	2b08      	cmp	r3, #8
 800a90e:	d11b      	bne.n	800a948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f06f 0208 	mvn.w	r2, #8
 800a918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2204      	movs	r2, #4
 800a91e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	f003 0303 	and.w	r3, r3, #3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f8b1 	bl	800aa96 <HAL_TIM_IC_CaptureCallback>
 800a934:	e005      	b.n	800a942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f8a3 	bl	800aa82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f8b4 	bl	800aaaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	f003 0310 	and.w	r3, r3, #16
 800a952:	2b10      	cmp	r3, #16
 800a954:	d122      	bne.n	800a99c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	f003 0310 	and.w	r3, r3, #16
 800a960:	2b10      	cmp	r3, #16
 800a962:	d11b      	bne.n	800a99c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f06f 0210 	mvn.w	r2, #16
 800a96c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2208      	movs	r2, #8
 800a972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	69db      	ldr	r3, [r3, #28]
 800a97a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f887 	bl	800aa96 <HAL_TIM_IC_CaptureCallback>
 800a988:	e005      	b.n	800a996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 f879 	bl	800aa82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f88a 	bl	800aaaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d10e      	bne.n	800a9c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f003 0301 	and.w	r3, r3, #1
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d107      	bne.n	800a9c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f06f 0201 	mvn.w	r2, #1
 800a9c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7fa f85c 	bl	8004a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9d2:	2b80      	cmp	r3, #128	; 0x80
 800a9d4:	d10e      	bne.n	800a9f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e0:	2b80      	cmp	r3, #128	; 0x80
 800a9e2:	d107      	bne.n	800a9f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f944 	bl	800ac7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa02:	d10e      	bne.n	800aa22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa0e:	2b80      	cmp	r3, #128	; 0x80
 800aa10:	d107      	bne.n	800aa22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f937 	bl	800ac90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa2c:	2b40      	cmp	r3, #64	; 0x40
 800aa2e:	d10e      	bne.n	800aa4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3a:	2b40      	cmp	r3, #64	; 0x40
 800aa3c:	d107      	bne.n	800aa4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 f838 	bl	800aabe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	f003 0320 	and.w	r3, r3, #32
 800aa58:	2b20      	cmp	r3, #32
 800aa5a:	d10e      	bne.n	800aa7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	f003 0320 	and.w	r3, r3, #32
 800aa66:	2b20      	cmp	r3, #32
 800aa68:	d107      	bne.n	800aa7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f06f 0220 	mvn.w	r2, #32
 800aa72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f8f7 	bl	800ac68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa7a:	bf00      	nop
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa82:	b480      	push	{r7}
 800aa84:	b083      	sub	sp, #12
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa8a:	bf00      	nop
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b083      	sub	sp, #12
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa9e:	bf00      	nop
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aab2:	bf00      	nop
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aabe:	b480      	push	{r7}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aac6:	bf00      	nop
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
	...

0800aad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a2a      	ldr	r2, [pc, #168]	; (800ab90 <TIM_Base_SetConfig+0xbc>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d003      	beq.n	800aaf4 <TIM_Base_SetConfig+0x20>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaf2:	d108      	bne.n	800ab06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aafa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a21      	ldr	r2, [pc, #132]	; (800ab90 <TIM_Base_SetConfig+0xbc>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d00b      	beq.n	800ab26 <TIM_Base_SetConfig+0x52>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab14:	d007      	beq.n	800ab26 <TIM_Base_SetConfig+0x52>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a1e      	ldr	r2, [pc, #120]	; (800ab94 <TIM_Base_SetConfig+0xc0>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d003      	beq.n	800ab26 <TIM_Base_SetConfig+0x52>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a1d      	ldr	r2, [pc, #116]	; (800ab98 <TIM_Base_SetConfig+0xc4>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d108      	bne.n	800ab38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	689a      	ldr	r2, [r3, #8]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a0c      	ldr	r2, [pc, #48]	; (800ab90 <TIM_Base_SetConfig+0xbc>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d007      	beq.n	800ab74 <TIM_Base_SetConfig+0xa0>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a0b      	ldr	r2, [pc, #44]	; (800ab94 <TIM_Base_SetConfig+0xc0>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d003      	beq.n	800ab74 <TIM_Base_SetConfig+0xa0>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a0a      	ldr	r2, [pc, #40]	; (800ab98 <TIM_Base_SetConfig+0xc4>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d103      	bne.n	800ab7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	691a      	ldr	r2, [r3, #16]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	615a      	str	r2, [r3, #20]
}
 800ab82:	bf00      	nop
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	40012c00 	.word	0x40012c00
 800ab94:	40014000 	.word	0x40014000
 800ab98:	40014400 	.word	0x40014400

0800ab9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abac:	2b01      	cmp	r3, #1
 800abae:	d101      	bne.n	800abb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abb0:	2302      	movs	r3, #2
 800abb2:	e04f      	b.n	800ac54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2202      	movs	r2, #2
 800abc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a21      	ldr	r2, [pc, #132]	; (800ac60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d108      	bne.n	800abf0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800abe4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4313      	orrs	r3, r2
 800abee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a14      	ldr	r2, [pc, #80]	; (800ac60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d009      	beq.n	800ac28 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac1c:	d004      	beq.n	800ac28 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a10      	ldr	r2, [pc, #64]	; (800ac64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d10c      	bne.n	800ac42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	40012c00 	.word	0x40012c00
 800ac64:	40014000 	.word	0x40014000

0800ac68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d101      	bne.n	800acb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e040      	b.n	800ad38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d106      	bne.n	800accc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7fa f91e 	bl	8004f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2224      	movs	r2, #36	; 0x24
 800acd0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f022 0201 	bic.w	r2, r2, #1
 800ace0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f8c0 	bl	800ae68 <UART_SetConfig>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b01      	cmp	r3, #1
 800acec:	d101      	bne.n	800acf2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e022      	b.n	800ad38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d002      	beq.n	800ad00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fae0 	bl	800b2c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	685a      	ldr	r2, [r3, #4]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	689a      	ldr	r2, [r3, #8]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f042 0201 	orr.w	r2, r2, #1
 800ad2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fb67 	bl	800b404 <UART_CheckIdleState>
 800ad36:	4603      	mov	r3, r0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b08a      	sub	sp, #40	; 0x28
 800ad44:	af02      	add	r7, sp, #8
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	603b      	str	r3, [r7, #0]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad54:	2b20      	cmp	r3, #32
 800ad56:	f040 8082 	bne.w	800ae5e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d002      	beq.n	800ad66 <HAL_UART_Transmit+0x26>
 800ad60:	88fb      	ldrh	r3, [r7, #6]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e07a      	b.n	800ae60 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d101      	bne.n	800ad78 <HAL_UART_Transmit+0x38>
 800ad74:	2302      	movs	r3, #2
 800ad76:	e073      	b.n	800ae60 <HAL_UART_Transmit+0x120>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2221      	movs	r2, #33	; 0x21
 800ad8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad8e:	f7fb f963 	bl	8006058 <HAL_GetTick>
 800ad92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	88fa      	ldrh	r2, [r7, #6]
 800ad98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	88fa      	ldrh	r2, [r7, #6]
 800ada0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adac:	d108      	bne.n	800adc0 <HAL_UART_Transmit+0x80>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d104      	bne.n	800adc0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800adb6:	2300      	movs	r3, #0
 800adb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	61bb      	str	r3, [r7, #24]
 800adbe:	e003      	b.n	800adc8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800adc4:	2300      	movs	r3, #0
 800adc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800add0:	e02d      	b.n	800ae2e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	2200      	movs	r2, #0
 800adda:	2180      	movs	r1, #128	; 0x80
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f000 fb5a 	bl	800b496 <UART_WaitOnFlagUntilTimeout>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d001      	beq.n	800adec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800ade8:	2303      	movs	r3, #3
 800adea:	e039      	b.n	800ae60 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d10b      	bne.n	800ae0a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	881a      	ldrh	r2, [r3, #0]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adfe:	b292      	uxth	r2, r2
 800ae00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	3302      	adds	r3, #2
 800ae06:	61bb      	str	r3, [r7, #24]
 800ae08:	e008      	b.n	800ae1c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	781a      	ldrb	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	b292      	uxth	r2, r2
 800ae14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	3b01      	subs	r3, #1
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1cb      	bne.n	800add2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	2200      	movs	r2, #0
 800ae42:	2140      	movs	r1, #64	; 0x40
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f000 fb26 	bl	800b496 <UART_WaitOnFlagUntilTimeout>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800ae50:	2303      	movs	r3, #3
 800ae52:	e005      	b.n	800ae60 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2220      	movs	r2, #32
 800ae58:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e000      	b.n	800ae60 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800ae5e:	2302      	movs	r3, #2
  }
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3720      	adds	r7, #32
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae6c:	b08a      	sub	sp, #40	; 0x28
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	689a      	ldr	r2, [r3, #8]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	431a      	orrs	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	431a      	orrs	r2, r3
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	69db      	ldr	r3, [r3, #28]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	4bb4      	ldr	r3, [pc, #720]	; (800b168 <UART_SetConfig+0x300>)
 800ae98:	4013      	ands	r3, r2
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	6812      	ldr	r2, [r2, #0]
 800ae9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aea0:	430b      	orrs	r3, r1
 800aea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	68da      	ldr	r2, [r3, #12]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	430a      	orrs	r2, r1
 800aeb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	699b      	ldr	r3, [r3, #24]
 800aebe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4aa9      	ldr	r2, [pc, #676]	; (800b16c <UART_SetConfig+0x304>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d004      	beq.n	800aed4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aed0:	4313      	orrs	r3, r2
 800aed2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aee4:	430a      	orrs	r2, r1
 800aee6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4aa0      	ldr	r2, [pc, #640]	; (800b170 <UART_SetConfig+0x308>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d126      	bne.n	800af40 <UART_SetConfig+0xd8>
 800aef2:	4ba0      	ldr	r3, [pc, #640]	; (800b174 <UART_SetConfig+0x30c>)
 800aef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef8:	f003 0303 	and.w	r3, r3, #3
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d81b      	bhi.n	800af38 <UART_SetConfig+0xd0>
 800af00:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <UART_SetConfig+0xa0>)
 800af02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af06:	bf00      	nop
 800af08:	0800af19 	.word	0x0800af19
 800af0c:	0800af29 	.word	0x0800af29
 800af10:	0800af21 	.word	0x0800af21
 800af14:	0800af31 	.word	0x0800af31
 800af18:	2301      	movs	r3, #1
 800af1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af1e:	e080      	b.n	800b022 <UART_SetConfig+0x1ba>
 800af20:	2302      	movs	r3, #2
 800af22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af26:	e07c      	b.n	800b022 <UART_SetConfig+0x1ba>
 800af28:	2304      	movs	r3, #4
 800af2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af2e:	e078      	b.n	800b022 <UART_SetConfig+0x1ba>
 800af30:	2308      	movs	r3, #8
 800af32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af36:	e074      	b.n	800b022 <UART_SetConfig+0x1ba>
 800af38:	2310      	movs	r3, #16
 800af3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af3e:	e070      	b.n	800b022 <UART_SetConfig+0x1ba>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a8c      	ldr	r2, [pc, #560]	; (800b178 <UART_SetConfig+0x310>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d138      	bne.n	800afbc <UART_SetConfig+0x154>
 800af4a:	4b8a      	ldr	r3, [pc, #552]	; (800b174 <UART_SetConfig+0x30c>)
 800af4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af50:	f003 030c 	and.w	r3, r3, #12
 800af54:	2b0c      	cmp	r3, #12
 800af56:	d82d      	bhi.n	800afb4 <UART_SetConfig+0x14c>
 800af58:	a201      	add	r2, pc, #4	; (adr r2, 800af60 <UART_SetConfig+0xf8>)
 800af5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5e:	bf00      	nop
 800af60:	0800af95 	.word	0x0800af95
 800af64:	0800afb5 	.word	0x0800afb5
 800af68:	0800afb5 	.word	0x0800afb5
 800af6c:	0800afb5 	.word	0x0800afb5
 800af70:	0800afa5 	.word	0x0800afa5
 800af74:	0800afb5 	.word	0x0800afb5
 800af78:	0800afb5 	.word	0x0800afb5
 800af7c:	0800afb5 	.word	0x0800afb5
 800af80:	0800af9d 	.word	0x0800af9d
 800af84:	0800afb5 	.word	0x0800afb5
 800af88:	0800afb5 	.word	0x0800afb5
 800af8c:	0800afb5 	.word	0x0800afb5
 800af90:	0800afad 	.word	0x0800afad
 800af94:	2300      	movs	r3, #0
 800af96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af9a:	e042      	b.n	800b022 <UART_SetConfig+0x1ba>
 800af9c:	2302      	movs	r3, #2
 800af9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800afa2:	e03e      	b.n	800b022 <UART_SetConfig+0x1ba>
 800afa4:	2304      	movs	r3, #4
 800afa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800afaa:	e03a      	b.n	800b022 <UART_SetConfig+0x1ba>
 800afac:	2308      	movs	r3, #8
 800afae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800afb2:	e036      	b.n	800b022 <UART_SetConfig+0x1ba>
 800afb4:	2310      	movs	r3, #16
 800afb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800afba:	e032      	b.n	800b022 <UART_SetConfig+0x1ba>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a6a      	ldr	r2, [pc, #424]	; (800b16c <UART_SetConfig+0x304>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d12a      	bne.n	800b01c <UART_SetConfig+0x1b4>
 800afc6:	4b6b      	ldr	r3, [pc, #428]	; (800b174 <UART_SetConfig+0x30c>)
 800afc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800afd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800afd4:	d01a      	beq.n	800b00c <UART_SetConfig+0x1a4>
 800afd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800afda:	d81b      	bhi.n	800b014 <UART_SetConfig+0x1ac>
 800afdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afe0:	d00c      	beq.n	800affc <UART_SetConfig+0x194>
 800afe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afe6:	d815      	bhi.n	800b014 <UART_SetConfig+0x1ac>
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d003      	beq.n	800aff4 <UART_SetConfig+0x18c>
 800afec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aff0:	d008      	beq.n	800b004 <UART_SetConfig+0x19c>
 800aff2:	e00f      	b.n	800b014 <UART_SetConfig+0x1ac>
 800aff4:	2300      	movs	r3, #0
 800aff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800affa:	e012      	b.n	800b022 <UART_SetConfig+0x1ba>
 800affc:	2302      	movs	r3, #2
 800affe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b002:	e00e      	b.n	800b022 <UART_SetConfig+0x1ba>
 800b004:	2304      	movs	r3, #4
 800b006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b00a:	e00a      	b.n	800b022 <UART_SetConfig+0x1ba>
 800b00c:	2308      	movs	r3, #8
 800b00e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b012:	e006      	b.n	800b022 <UART_SetConfig+0x1ba>
 800b014:	2310      	movs	r3, #16
 800b016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b01a:	e002      	b.n	800b022 <UART_SetConfig+0x1ba>
 800b01c:	2310      	movs	r3, #16
 800b01e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a51      	ldr	r2, [pc, #324]	; (800b16c <UART_SetConfig+0x304>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d17a      	bne.n	800b122 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b02c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b030:	2b08      	cmp	r3, #8
 800b032:	d824      	bhi.n	800b07e <UART_SetConfig+0x216>
 800b034:	a201      	add	r2, pc, #4	; (adr r2, 800b03c <UART_SetConfig+0x1d4>)
 800b036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03a:	bf00      	nop
 800b03c:	0800b061 	.word	0x0800b061
 800b040:	0800b07f 	.word	0x0800b07f
 800b044:	0800b069 	.word	0x0800b069
 800b048:	0800b07f 	.word	0x0800b07f
 800b04c:	0800b06f 	.word	0x0800b06f
 800b050:	0800b07f 	.word	0x0800b07f
 800b054:	0800b07f 	.word	0x0800b07f
 800b058:	0800b07f 	.word	0x0800b07f
 800b05c:	0800b077 	.word	0x0800b077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b060:	f7fe ff42 	bl	8009ee8 <HAL_RCC_GetPCLK1Freq>
 800b064:	61f8      	str	r0, [r7, #28]
        break;
 800b066:	e010      	b.n	800b08a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b068:	4b44      	ldr	r3, [pc, #272]	; (800b17c <UART_SetConfig+0x314>)
 800b06a:	61fb      	str	r3, [r7, #28]
        break;
 800b06c:	e00d      	b.n	800b08a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b06e:	f7fe fea3 	bl	8009db8 <HAL_RCC_GetSysClockFreq>
 800b072:	61f8      	str	r0, [r7, #28]
        break;
 800b074:	e009      	b.n	800b08a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b07a:	61fb      	str	r3, [r7, #28]
        break;
 800b07c:	e005      	b.n	800b08a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800b07e:	2300      	movs	r3, #0
 800b080:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b088:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 8107 	beq.w	800b2a0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	685a      	ldr	r2, [r3, #4]
 800b096:	4613      	mov	r3, r2
 800b098:	005b      	lsls	r3, r3, #1
 800b09a:	4413      	add	r3, r2
 800b09c:	69fa      	ldr	r2, [r7, #28]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d305      	bcc.n	800b0ae <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b0a8:	69fa      	ldr	r2, [r7, #28]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d903      	bls.n	800b0b6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b0b4:	e0f4      	b.n	800b2a0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	461c      	mov	r4, r3
 800b0bc:	4615      	mov	r5, r2
 800b0be:	f04f 0200 	mov.w	r2, #0
 800b0c2:	f04f 0300 	mov.w	r3, #0
 800b0c6:	022b      	lsls	r3, r5, #8
 800b0c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b0cc:	0222      	lsls	r2, r4, #8
 800b0ce:	68f9      	ldr	r1, [r7, #12]
 800b0d0:	6849      	ldr	r1, [r1, #4]
 800b0d2:	0849      	lsrs	r1, r1, #1
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	4688      	mov	r8, r1
 800b0d8:	4681      	mov	r9, r0
 800b0da:	eb12 0a08 	adds.w	sl, r2, r8
 800b0de:	eb43 0b09 	adc.w	fp, r3, r9
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	603b      	str	r3, [r7, #0]
 800b0ea:	607a      	str	r2, [r7, #4]
 800b0ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0f0:	4650      	mov	r0, sl
 800b0f2:	4659      	mov	r1, fp
 800b0f4:	f7f5 fdc8 	bl	8000c88 <__aeabi_uldivmod>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b106:	d308      	bcc.n	800b11a <UART_SetConfig+0x2b2>
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b10e:	d204      	bcs.n	800b11a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	69ba      	ldr	r2, [r7, #24]
 800b116:	60da      	str	r2, [r3, #12]
 800b118:	e0c2      	b.n	800b2a0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b120:	e0be      	b.n	800b2a0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	69db      	ldr	r3, [r3, #28]
 800b126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b12a:	d16a      	bne.n	800b202 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800b12c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b130:	2b08      	cmp	r3, #8
 800b132:	d834      	bhi.n	800b19e <UART_SetConfig+0x336>
 800b134:	a201      	add	r2, pc, #4	; (adr r2, 800b13c <UART_SetConfig+0x2d4>)
 800b136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13a:	bf00      	nop
 800b13c:	0800b161 	.word	0x0800b161
 800b140:	0800b181 	.word	0x0800b181
 800b144:	0800b189 	.word	0x0800b189
 800b148:	0800b19f 	.word	0x0800b19f
 800b14c:	0800b18f 	.word	0x0800b18f
 800b150:	0800b19f 	.word	0x0800b19f
 800b154:	0800b19f 	.word	0x0800b19f
 800b158:	0800b19f 	.word	0x0800b19f
 800b15c:	0800b197 	.word	0x0800b197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b160:	f7fe fec2 	bl	8009ee8 <HAL_RCC_GetPCLK1Freq>
 800b164:	61f8      	str	r0, [r7, #28]
        break;
 800b166:	e020      	b.n	800b1aa <UART_SetConfig+0x342>
 800b168:	efff69f3 	.word	0xefff69f3
 800b16c:	40008000 	.word	0x40008000
 800b170:	40013800 	.word	0x40013800
 800b174:	40021000 	.word	0x40021000
 800b178:	40004400 	.word	0x40004400
 800b17c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b180:	f7fe fec8 	bl	8009f14 <HAL_RCC_GetPCLK2Freq>
 800b184:	61f8      	str	r0, [r7, #28]
        break;
 800b186:	e010      	b.n	800b1aa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b188:	4b4c      	ldr	r3, [pc, #304]	; (800b2bc <UART_SetConfig+0x454>)
 800b18a:	61fb      	str	r3, [r7, #28]
        break;
 800b18c:	e00d      	b.n	800b1aa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b18e:	f7fe fe13 	bl	8009db8 <HAL_RCC_GetSysClockFreq>
 800b192:	61f8      	str	r0, [r7, #28]
        break;
 800b194:	e009      	b.n	800b1aa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b19a:	61fb      	str	r3, [r7, #28]
        break;
 800b19c:	e005      	b.n	800b1aa <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b1a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d077      	beq.n	800b2a0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	005a      	lsls	r2, r3, #1
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	085b      	lsrs	r3, r3, #1
 800b1ba:	441a      	add	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	2b0f      	cmp	r3, #15
 800b1ca:	d916      	bls.n	800b1fa <UART_SetConfig+0x392>
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1d2:	d212      	bcs.n	800b1fa <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	f023 030f 	bic.w	r3, r3, #15
 800b1dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	085b      	lsrs	r3, r3, #1
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	f003 0307 	and.w	r3, r3, #7
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	8afb      	ldrh	r3, [r7, #22]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	8afa      	ldrh	r2, [r7, #22]
 800b1f6:	60da      	str	r2, [r3, #12]
 800b1f8:	e052      	b.n	800b2a0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b200:	e04e      	b.n	800b2a0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b202:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b206:	2b08      	cmp	r3, #8
 800b208:	d827      	bhi.n	800b25a <UART_SetConfig+0x3f2>
 800b20a:	a201      	add	r2, pc, #4	; (adr r2, 800b210 <UART_SetConfig+0x3a8>)
 800b20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b210:	0800b235 	.word	0x0800b235
 800b214:	0800b23d 	.word	0x0800b23d
 800b218:	0800b245 	.word	0x0800b245
 800b21c:	0800b25b 	.word	0x0800b25b
 800b220:	0800b24b 	.word	0x0800b24b
 800b224:	0800b25b 	.word	0x0800b25b
 800b228:	0800b25b 	.word	0x0800b25b
 800b22c:	0800b25b 	.word	0x0800b25b
 800b230:	0800b253 	.word	0x0800b253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b234:	f7fe fe58 	bl	8009ee8 <HAL_RCC_GetPCLK1Freq>
 800b238:	61f8      	str	r0, [r7, #28]
        break;
 800b23a:	e014      	b.n	800b266 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b23c:	f7fe fe6a 	bl	8009f14 <HAL_RCC_GetPCLK2Freq>
 800b240:	61f8      	str	r0, [r7, #28]
        break;
 800b242:	e010      	b.n	800b266 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b244:	4b1d      	ldr	r3, [pc, #116]	; (800b2bc <UART_SetConfig+0x454>)
 800b246:	61fb      	str	r3, [r7, #28]
        break;
 800b248:	e00d      	b.n	800b266 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b24a:	f7fe fdb5 	bl	8009db8 <HAL_RCC_GetSysClockFreq>
 800b24e:	61f8      	str	r0, [r7, #28]
        break;
 800b250:	e009      	b.n	800b266 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b256:	61fb      	str	r3, [r7, #28]
        break;
 800b258:	e005      	b.n	800b266 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800b25a:	2300      	movs	r3, #0
 800b25c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b264:	bf00      	nop
    }

    if (pclk != 0U)
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d019      	beq.n	800b2a0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	085a      	lsrs	r2, r3, #1
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	441a      	add	r2, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	2b0f      	cmp	r3, #15
 800b284:	d909      	bls.n	800b29a <UART_SetConfig+0x432>
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b28c:	d205      	bcs.n	800b29a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	b29a      	uxth	r2, r3
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	60da      	str	r2, [r3, #12]
 800b298:	e002      	b.n	800b2a0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b2ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3728      	adds	r7, #40	; 0x28
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2ba:	bf00      	nop
 800b2bc:	00f42400 	.word	0x00f42400

0800b2c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2cc:	f003 0301 	and.w	r3, r3, #1
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00a      	beq.n	800b2ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	430a      	orrs	r2, r1
 800b2e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ee:	f003 0302 	and.w	r3, r3, #2
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00a      	beq.n	800b30c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	430a      	orrs	r2, r1
 800b30a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b310:	f003 0304 	and.w	r3, r3, #4
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00a      	beq.n	800b32e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	430a      	orrs	r2, r1
 800b32c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b332:	f003 0308 	and.w	r3, r3, #8
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00a      	beq.n	800b350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	430a      	orrs	r2, r1
 800b34e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b354:	f003 0310 	and.w	r3, r3, #16
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00a      	beq.n	800b372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	430a      	orrs	r2, r1
 800b370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b376:	f003 0320 	and.w	r3, r3, #32
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00a      	beq.n	800b394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	430a      	orrs	r2, r1
 800b392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d01a      	beq.n	800b3d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	430a      	orrs	r2, r1
 800b3b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3be:	d10a      	bne.n	800b3d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00a      	beq.n	800b3f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	605a      	str	r2, [r3, #4]
  }
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b086      	sub	sp, #24
 800b408:	af02      	add	r7, sp, #8
 800b40a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b414:	f7fa fe20 	bl	8006058 <HAL_GetTick>
 800b418:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0308 	and.w	r3, r3, #8
 800b424:	2b08      	cmp	r3, #8
 800b426:	d10e      	bne.n	800b446 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f82d 	bl	800b496 <UART_WaitOnFlagUntilTimeout>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b442:	2303      	movs	r3, #3
 800b444:	e023      	b.n	800b48e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 0304 	and.w	r3, r3, #4
 800b450:	2b04      	cmp	r3, #4
 800b452:	d10e      	bne.n	800b472 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f817 	bl	800b496 <UART_WaitOnFlagUntilTimeout>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b46e:	2303      	movs	r3, #3
 800b470:	e00d      	b.n	800b48e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2220      	movs	r2, #32
 800b476:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2220      	movs	r2, #32
 800b47c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b09c      	sub	sp, #112	; 0x70
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	60f8      	str	r0, [r7, #12]
 800b49e:	60b9      	str	r1, [r7, #8]
 800b4a0:	603b      	str	r3, [r7, #0]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4a6:	e0a5      	b.n	800b5f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4ae:	f000 80a1 	beq.w	800b5f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4b2:	f7fa fdd1 	bl	8006058 <HAL_GetTick>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d302      	bcc.n	800b4c8 <UART_WaitOnFlagUntilTimeout+0x32>
 800b4c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d13e      	bne.n	800b546 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4d0:	e853 3f00 	ldrex	r3, [r3]
 800b4d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b4d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b4dc:	667b      	str	r3, [r7, #100]	; 0x64
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b4ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4ee:	e841 2300 	strex	r3, r2, [r1]
 800b4f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b4f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1e6      	bne.n	800b4c8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	3308      	adds	r3, #8
 800b500:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b504:	e853 3f00 	ldrex	r3, [r3]
 800b508:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50c:	f023 0301 	bic.w	r3, r3, #1
 800b510:	663b      	str	r3, [r7, #96]	; 0x60
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3308      	adds	r3, #8
 800b518:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b51a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b51c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b522:	e841 2300 	strex	r3, r2, [r1]
 800b526:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1e5      	bne.n	800b4fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2220      	movs	r2, #32
 800b532:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2220      	movs	r2, #32
 800b538:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	e067      	b.n	800b616 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 0304 	and.w	r3, r3, #4
 800b550:	2b00      	cmp	r3, #0
 800b552:	d04f      	beq.n	800b5f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	69db      	ldr	r3, [r3, #28]
 800b55a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b55e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b562:	d147      	bne.n	800b5f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b56c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b576:	e853 3f00 	ldrex	r3, [r3]
 800b57a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b582:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	461a      	mov	r2, r3
 800b58a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b58c:	637b      	str	r3, [r7, #52]	; 0x34
 800b58e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b590:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b594:	e841 2300 	strex	r3, r2, [r1]
 800b598:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1e6      	bne.n	800b56e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3308      	adds	r3, #8
 800b5a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	e853 3f00 	ldrex	r3, [r3]
 800b5ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	f023 0301 	bic.w	r3, r3, #1
 800b5b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3308      	adds	r3, #8
 800b5be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5c0:	623a      	str	r2, [r7, #32]
 800b5c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c4:	69f9      	ldr	r1, [r7, #28]
 800b5c6:	6a3a      	ldr	r2, [r7, #32]
 800b5c8:	e841 2300 	strex	r3, r2, [r1]
 800b5cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1e5      	bne.n	800b5a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2220      	movs	r2, #32
 800b5de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2220      	movs	r2, #32
 800b5e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	e010      	b.n	800b616 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	69da      	ldr	r2, [r3, #28]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	429a      	cmp	r2, r3
 800b602:	bf0c      	ite	eq
 800b604:	2301      	moveq	r3, #1
 800b606:	2300      	movne	r3, #0
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	461a      	mov	r2, r3
 800b60c:	79fb      	ldrb	r3, [r7, #7]
 800b60e:	429a      	cmp	r2, r3
 800b610:	f43f af4a 	beq.w	800b4a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3770      	adds	r7, #112	; 0x70
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <__NVIC_SetPriority>:
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	4603      	mov	r3, r0
 800b628:	6039      	str	r1, [r7, #0]
 800b62a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b62c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b630:	2b00      	cmp	r3, #0
 800b632:	db0a      	blt.n	800b64a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	b2da      	uxtb	r2, r3
 800b638:	490c      	ldr	r1, [pc, #48]	; (800b66c <__NVIC_SetPriority+0x4c>)
 800b63a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b63e:	0112      	lsls	r2, r2, #4
 800b640:	b2d2      	uxtb	r2, r2
 800b642:	440b      	add	r3, r1
 800b644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b648:	e00a      	b.n	800b660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	b2da      	uxtb	r2, r3
 800b64e:	4908      	ldr	r1, [pc, #32]	; (800b670 <__NVIC_SetPriority+0x50>)
 800b650:	79fb      	ldrb	r3, [r7, #7]
 800b652:	f003 030f 	and.w	r3, r3, #15
 800b656:	3b04      	subs	r3, #4
 800b658:	0112      	lsls	r2, r2, #4
 800b65a:	b2d2      	uxtb	r2, r2
 800b65c:	440b      	add	r3, r1
 800b65e:	761a      	strb	r2, [r3, #24]
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	e000e100 	.word	0xe000e100
 800b670:	e000ed00 	.word	0xe000ed00

0800b674 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b674:	b580      	push	{r7, lr}
 800b676:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b678:	4b05      	ldr	r3, [pc, #20]	; (800b690 <SysTick_Handler+0x1c>)
 800b67a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b67c:	f003 f862 	bl	800e744 <xTaskGetSchedulerState>
 800b680:	4603      	mov	r3, r0
 800b682:	2b01      	cmp	r3, #1
 800b684:	d001      	beq.n	800b68a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b686:	f003 ff7f 	bl	800f588 <xPortSysTickHandler>
  }
}
 800b68a:	bf00      	nop
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	e000e010 	.word	0xe000e010

0800b694 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b694:	b580      	push	{r7, lr}
 800b696:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b698:	2100      	movs	r1, #0
 800b69a:	f06f 0004 	mvn.w	r0, #4
 800b69e:	f7ff ffbf 	bl	800b620 <__NVIC_SetPriority>
#endif
}
 800b6a2:	bf00      	nop
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6ae:	f3ef 8305 	mrs	r3, IPSR
 800b6b2:	603b      	str	r3, [r7, #0]
  return(result);
 800b6b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d003      	beq.n	800b6c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b6ba:	f06f 0305 	mvn.w	r3, #5
 800b6be:	607b      	str	r3, [r7, #4]
 800b6c0:	e00c      	b.n	800b6dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b6c2:	4b0a      	ldr	r3, [pc, #40]	; (800b6ec <osKernelInitialize+0x44>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d105      	bne.n	800b6d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b6ca:	4b08      	ldr	r3, [pc, #32]	; (800b6ec <osKernelInitialize+0x44>)
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	607b      	str	r3, [r7, #4]
 800b6d4:	e002      	b.n	800b6dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b6d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b6dc:	687b      	ldr	r3, [r7, #4]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	200087c4 	.word	0x200087c4

0800b6f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6f6:	f3ef 8305 	mrs	r3, IPSR
 800b6fa:	603b      	str	r3, [r7, #0]
  return(result);
 800b6fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b702:	f06f 0305 	mvn.w	r3, #5
 800b706:	607b      	str	r3, [r7, #4]
 800b708:	e010      	b.n	800b72c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b70a:	4b0b      	ldr	r3, [pc, #44]	; (800b738 <osKernelStart+0x48>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d109      	bne.n	800b726 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b712:	f7ff ffbf 	bl	800b694 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b716:	4b08      	ldr	r3, [pc, #32]	; (800b738 <osKernelStart+0x48>)
 800b718:	2202      	movs	r2, #2
 800b71a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b71c:	f002 fb08 	bl	800dd30 <vTaskStartScheduler>
      stat = osOK;
 800b720:	2300      	movs	r3, #0
 800b722:	607b      	str	r3, [r7, #4]
 800b724:	e002      	b.n	800b72c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b72a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b72c:	687b      	ldr	r3, [r7, #4]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	200087c4 	.word	0x200087c4

0800b73c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08e      	sub	sp, #56	; 0x38
 800b740:	af04      	add	r7, sp, #16
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b748:	2300      	movs	r3, #0
 800b74a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b74c:	f3ef 8305 	mrs	r3, IPSR
 800b750:	617b      	str	r3, [r7, #20]
  return(result);
 800b752:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b754:	2b00      	cmp	r3, #0
 800b756:	d17e      	bne.n	800b856 <osThreadNew+0x11a>
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d07b      	beq.n	800b856 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b75e:	2340      	movs	r3, #64	; 0x40
 800b760:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b762:	2318      	movs	r3, #24
 800b764:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b766:	2300      	movs	r3, #0
 800b768:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b76a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b76e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d045      	beq.n	800b802 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d002      	beq.n	800b784 <osThreadNew+0x48>
        name = attr->name;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	699b      	ldr	r3, [r3, #24]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d002      	beq.n	800b792 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	699b      	ldr	r3, [r3, #24]
 800b790:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d008      	beq.n	800b7aa <osThreadNew+0x6e>
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	2b38      	cmp	r3, #56	; 0x38
 800b79c:	d805      	bhi.n	800b7aa <osThreadNew+0x6e>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	f003 0301 	and.w	r3, r3, #1
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d001      	beq.n	800b7ae <osThreadNew+0x72>
        return (NULL);
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	e054      	b.n	800b858 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	695b      	ldr	r3, [r3, #20]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d003      	beq.n	800b7be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	089b      	lsrs	r3, r3, #2
 800b7bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00e      	beq.n	800b7e4 <osThreadNew+0xa8>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	2bbb      	cmp	r3, #187	; 0xbb
 800b7cc:	d90a      	bls.n	800b7e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d006      	beq.n	800b7e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <osThreadNew+0xa8>
        mem = 1;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	61bb      	str	r3, [r7, #24]
 800b7e2:	e010      	b.n	800b806 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10c      	bne.n	800b806 <osThreadNew+0xca>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d108      	bne.n	800b806 <osThreadNew+0xca>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d104      	bne.n	800b806 <osThreadNew+0xca>
          mem = 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	61bb      	str	r3, [r7, #24]
 800b800:	e001      	b.n	800b806 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d110      	bne.n	800b82e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b814:	9202      	str	r2, [sp, #8]
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	6a3a      	ldr	r2, [r7, #32]
 800b820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f002 f81a 	bl	800d85c <xTaskCreateStatic>
 800b828:	4603      	mov	r3, r0
 800b82a:	613b      	str	r3, [r7, #16]
 800b82c:	e013      	b.n	800b856 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d110      	bne.n	800b856 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b834:	6a3b      	ldr	r3, [r7, #32]
 800b836:	b29a      	uxth	r2, r3
 800b838:	f107 0310 	add.w	r3, r7, #16
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	9300      	str	r3, [sp, #0]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f002 f865 	bl	800d916 <xTaskCreate>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d001      	beq.n	800b856 <osThreadNew+0x11a>
            hTask = NULL;
 800b852:	2300      	movs	r3, #0
 800b854:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b856:	693b      	ldr	r3, [r7, #16]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3728      	adds	r7, #40	; 0x28
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b868:	f3ef 8305 	mrs	r3, IPSR
 800b86c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b86e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b870:	2b00      	cmp	r3, #0
 800b872:	d003      	beq.n	800b87c <osDelay+0x1c>
    stat = osErrorISR;
 800b874:	f06f 0305 	mvn.w	r3, #5
 800b878:	60fb      	str	r3, [r7, #12]
 800b87a:	e007      	b.n	800b88c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d002      	beq.n	800b88c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f002 fa1e 	bl	800dcc8 <vTaskDelay>
    }
  }

  return (stat);
 800b88c:	68fb      	ldr	r3, [r7, #12]
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800b896:	b580      	push	{r7, lr}
 800b898:	b086      	sub	sp, #24
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8a2:	f3ef 8305 	mrs	r3, IPSR
 800b8a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8a8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d12d      	bne.n	800b90a <osEventFlagsNew+0x74>
    mem = -1;
 800b8ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8b2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d015      	beq.n	800b8e6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d006      	beq.n	800b8d0 <osEventFlagsNew+0x3a>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	2b1f      	cmp	r3, #31
 800b8c8:	d902      	bls.n	800b8d0 <osEventFlagsNew+0x3a>
        mem = 1;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	613b      	str	r3, [r7, #16]
 800b8ce:	e00c      	b.n	800b8ea <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d108      	bne.n	800b8ea <osEventFlagsNew+0x54>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d104      	bne.n	800b8ea <osEventFlagsNew+0x54>
          mem = 0;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	613b      	str	r3, [r7, #16]
 800b8e4:	e001      	b.n	800b8ea <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d106      	bne.n	800b8fe <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 fc4b 	bl	800c190 <xEventGroupCreateStatic>
 800b8fa:	6178      	str	r0, [r7, #20]
 800b8fc:	e005      	b.n	800b90a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d102      	bne.n	800b90a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800b904:	f000 fc7b 	bl	800c1fe <xEventGroupCreate>
 800b908:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800b90a:	697b      	ldr	r3, [r7, #20]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3718      	adds	r7, #24
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d004      	beq.n	800b932 <osEventFlagsSet+0x1e>
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d003      	beq.n	800b93a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800b932:	f06f 0303 	mvn.w	r3, #3
 800b936:	617b      	str	r3, [r7, #20]
 800b938:	e028      	b.n	800b98c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b93a:	f3ef 8305 	mrs	r3, IPSR
 800b93e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b940:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b942:	2b00      	cmp	r3, #0
 800b944:	d01d      	beq.n	800b982 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800b946:	2300      	movs	r3, #0
 800b948:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800b94a:	f107 0308 	add.w	r3, r7, #8
 800b94e:	461a      	mov	r2, r3
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	6938      	ldr	r0, [r7, #16]
 800b954:	f000 fdf6 	bl	800c544 <xEventGroupSetBitsFromISR>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d103      	bne.n	800b966 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800b95e:	f06f 0302 	mvn.w	r3, #2
 800b962:	617b      	str	r3, [r7, #20]
 800b964:	e012      	b.n	800b98c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00d      	beq.n	800b98c <osEventFlagsSet+0x78>
 800b970:	4b09      	ldr	r3, [pc, #36]	; (800b998 <osEventFlagsSet+0x84>)
 800b972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b976:	601a      	str	r2, [r3, #0]
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	e004      	b.n	800b98c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800b982:	6839      	ldr	r1, [r7, #0]
 800b984:	6938      	ldr	r0, [r7, #16]
 800b986:	f000 fd23 	bl	800c3d0 <xEventGroupSetBits>
 800b98a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800b98c:	697b      	ldr	r3, [r7, #20]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3718      	adds	r7, #24
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	e000ed04 	.word	0xe000ed04

0800b99c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b08c      	sub	sp, #48	; 0x30
 800b9a0:	af02      	add	r7, sp, #8
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d004      	beq.n	800b9be <osEventFlagsWait+0x22>
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d003      	beq.n	800b9c6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800b9be:	f06f 0303 	mvn.w	r3, #3
 800b9c2:	61fb      	str	r3, [r7, #28]
 800b9c4:	e04b      	b.n	800ba5e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9c6:	f3ef 8305 	mrs	r3, IPSR
 800b9ca:	617b      	str	r3, [r7, #20]
  return(result);
 800b9cc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d003      	beq.n	800b9da <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800b9d2:	f06f 0305 	mvn.w	r3, #5
 800b9d6:	61fb      	str	r3, [r7, #28]
 800b9d8:	e041      	b.n	800ba5e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	627b      	str	r3, [r7, #36]	; 0x24
 800b9e8:	e001      	b.n	800b9ee <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f003 0302 	and.w	r3, r3, #2
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	623b      	str	r3, [r7, #32]
 800b9fc:	e001      	b.n	800ba02 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba08:	6a3a      	ldr	r2, [r7, #32]
 800ba0a:	68b9      	ldr	r1, [r7, #8]
 800ba0c:	69b8      	ldr	r0, [r7, #24]
 800ba0e:	f000 fc11 	bl	800c234 <xEventGroupWaitBits>
 800ba12:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d010      	beq.n	800ba40 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	4013      	ands	r3, r2
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d019      	beq.n	800ba5e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d003      	beq.n	800ba38 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800ba30:	f06f 0301 	mvn.w	r3, #1
 800ba34:	61fb      	str	r3, [r7, #28]
 800ba36:	e012      	b.n	800ba5e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800ba38:	f06f 0302 	mvn.w	r3, #2
 800ba3c:	61fb      	str	r3, [r7, #28]
 800ba3e:	e00e      	b.n	800ba5e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	4013      	ands	r3, r2
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d109      	bne.n	800ba5e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d003      	beq.n	800ba58 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800ba50:	f06f 0301 	mvn.w	r3, #1
 800ba54:	61fb      	str	r3, [r7, #28]
 800ba56:	e002      	b.n	800ba5e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800ba58:	f06f 0302 	mvn.w	r3, #2
 800ba5c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800ba5e:	69fb      	ldr	r3, [r7, #28]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3728      	adds	r7, #40	; 0x28
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b088      	sub	sp, #32
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ba70:	2300      	movs	r3, #0
 800ba72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba74:	f3ef 8305 	mrs	r3, IPSR
 800ba78:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba7a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d174      	bne.n	800bb6a <osMutexNew+0x102>
    if (attr != NULL) {
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <osMutexNew+0x26>
      type = attr->attr_bits;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	61bb      	str	r3, [r7, #24]
 800ba8c:	e001      	b.n	800ba92 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <osMutexNew+0x3a>
      rmtx = 1U;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	617b      	str	r3, [r7, #20]
 800baa0:	e001      	b.n	800baa6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800baa2:	2300      	movs	r3, #0
 800baa4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	f003 0308 	and.w	r3, r3, #8
 800baac:	2b00      	cmp	r3, #0
 800baae:	d15c      	bne.n	800bb6a <osMutexNew+0x102>
      mem = -1;
 800bab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bab4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d015      	beq.n	800bae8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d006      	beq.n	800bad2 <osMutexNew+0x6a>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	2b4f      	cmp	r3, #79	; 0x4f
 800baca:	d902      	bls.n	800bad2 <osMutexNew+0x6a>
          mem = 1;
 800bacc:	2301      	movs	r3, #1
 800bace:	613b      	str	r3, [r7, #16]
 800bad0:	e00c      	b.n	800baec <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d108      	bne.n	800baec <osMutexNew+0x84>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d104      	bne.n	800baec <osMutexNew+0x84>
            mem = 0;
 800bae2:	2300      	movs	r3, #0
 800bae4:	613b      	str	r3, [r7, #16]
 800bae6:	e001      	b.n	800baec <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800bae8:	2300      	movs	r3, #0
 800baea:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d112      	bne.n	800bb18 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d007      	beq.n	800bb08 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	4619      	mov	r1, r3
 800bafe:	2004      	movs	r0, #4
 800bb00:	f000 ff57 	bl	800c9b2 <xQueueCreateMutexStatic>
 800bb04:	61f8      	str	r0, [r7, #28]
 800bb06:	e016      	b.n	800bb36 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	2001      	movs	r0, #1
 800bb10:	f000 ff4f 	bl	800c9b2 <xQueueCreateMutexStatic>
 800bb14:	61f8      	str	r0, [r7, #28]
 800bb16:	e00e      	b.n	800bb36 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10b      	bne.n	800bb36 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d004      	beq.n	800bb2e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800bb24:	2004      	movs	r0, #4
 800bb26:	f000 ff2c 	bl	800c982 <xQueueCreateMutex>
 800bb2a:	61f8      	str	r0, [r7, #28]
 800bb2c:	e003      	b.n	800bb36 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800bb2e:	2001      	movs	r0, #1
 800bb30:	f000 ff27 	bl	800c982 <xQueueCreateMutex>
 800bb34:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00c      	beq.n	800bb56 <osMutexNew+0xee>
        if (attr != NULL) {
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d003      	beq.n	800bb4a <osMutexNew+0xe2>
          name = attr->name;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60fb      	str	r3, [r7, #12]
 800bb48:	e001      	b.n	800bb4e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800bb4e:	68f9      	ldr	r1, [r7, #12]
 800bb50:	69f8      	ldr	r0, [r7, #28]
 800bb52:	f001 fdfb 	bl	800d74c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d006      	beq.n	800bb6a <osMutexNew+0x102>
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d003      	beq.n	800bb6a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	f043 0301 	orr.w	r3, r3, #1
 800bb68:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800bb6a:	69fb      	ldr	r3, [r7, #28]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3720      	adds	r7, #32
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f023 0301 	bic.w	r3, r3, #1
 800bb84:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f003 0301 	and.w	r3, r3, #1
 800bb8c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb92:	f3ef 8305 	mrs	r3, IPSR
 800bb96:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb98:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d003      	beq.n	800bba6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800bb9e:	f06f 0305 	mvn.w	r3, #5
 800bba2:	617b      	str	r3, [r7, #20]
 800bba4:	e02c      	b.n	800bc00 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d103      	bne.n	800bbb4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800bbac:	f06f 0303 	mvn.w	r3, #3
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	e025      	b.n	800bc00 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d011      	beq.n	800bbde <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800bbba:	6839      	ldr	r1, [r7, #0]
 800bbbc:	6938      	ldr	r0, [r7, #16]
 800bbbe:	f000 ff47 	bl	800ca50 <xQueueTakeMutexRecursive>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d01b      	beq.n	800bc00 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d003      	beq.n	800bbd6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800bbce:	f06f 0301 	mvn.w	r3, #1
 800bbd2:	617b      	str	r3, [r7, #20]
 800bbd4:	e014      	b.n	800bc00 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800bbd6:	f06f 0302 	mvn.w	r3, #2
 800bbda:	617b      	str	r3, [r7, #20]
 800bbdc:	e010      	b.n	800bc00 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800bbde:	6839      	ldr	r1, [r7, #0]
 800bbe0:	6938      	ldr	r0, [r7, #16]
 800bbe2:	f001 fadb 	bl	800d19c <xQueueSemaphoreTake>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d009      	beq.n	800bc00 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d003      	beq.n	800bbfa <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800bbf2:	f06f 0301 	mvn.w	r3, #1
 800bbf6:	617b      	str	r3, [r7, #20]
 800bbf8:	e002      	b.n	800bc00 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800bbfa:	f06f 0302 	mvn.w	r3, #2
 800bbfe:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800bc00:	697b      	ldr	r3, [r7, #20]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3718      	adds	r7, #24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b086      	sub	sp, #24
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f023 0301 	bic.w	r3, r3, #1
 800bc18:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f003 0301 	and.w	r3, r3, #1
 800bc20:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc26:	f3ef 8305 	mrs	r3, IPSR
 800bc2a:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc2c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d003      	beq.n	800bc3a <osMutexRelease+0x30>
    stat = osErrorISR;
 800bc32:	f06f 0305 	mvn.w	r3, #5
 800bc36:	617b      	str	r3, [r7, #20]
 800bc38:	e01f      	b.n	800bc7a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d103      	bne.n	800bc48 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800bc40:	f06f 0303 	mvn.w	r3, #3
 800bc44:	617b      	str	r3, [r7, #20]
 800bc46:	e018      	b.n	800bc7a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d009      	beq.n	800bc62 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800bc4e:	6938      	ldr	r0, [r7, #16]
 800bc50:	f000 feca 	bl	800c9e8 <xQueueGiveMutexRecursive>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d00f      	beq.n	800bc7a <osMutexRelease+0x70>
        stat = osErrorResource;
 800bc5a:	f06f 0302 	mvn.w	r3, #2
 800bc5e:	617b      	str	r3, [r7, #20]
 800bc60:	e00b      	b.n	800bc7a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800bc62:	2300      	movs	r3, #0
 800bc64:	2200      	movs	r2, #0
 800bc66:	2100      	movs	r1, #0
 800bc68:	6938      	ldr	r0, [r7, #16]
 800bc6a:	f000 ff91 	bl	800cb90 <xQueueGenericSend>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d002      	beq.n	800bc7a <osMutexRelease+0x70>
        stat = osErrorResource;
 800bc74:	f06f 0302 	mvn.w	r3, #2
 800bc78:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bc7a:	697b      	ldr	r3, [r7, #20]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3718      	adds	r7, #24
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b08a      	sub	sp, #40	; 0x28
 800bc88:	af02      	add	r7, sp, #8
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800bc90:	2300      	movs	r3, #0
 800bc92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc94:	f3ef 8305 	mrs	r3, IPSR
 800bc98:	613b      	str	r3, [r7, #16]
  return(result);
 800bc9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d175      	bne.n	800bd8c <osSemaphoreNew+0x108>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d072      	beq.n	800bd8c <osSemaphoreNew+0x108>
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d86e      	bhi.n	800bd8c <osSemaphoreNew+0x108>
    mem = -1;
 800bcae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcb2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d015      	beq.n	800bce6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d006      	beq.n	800bcd0 <osSemaphoreNew+0x4c>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	2b4f      	cmp	r3, #79	; 0x4f
 800bcc8:	d902      	bls.n	800bcd0 <osSemaphoreNew+0x4c>
        mem = 1;
 800bcca:	2301      	movs	r3, #1
 800bccc:	61bb      	str	r3, [r7, #24]
 800bcce:	e00c      	b.n	800bcea <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d108      	bne.n	800bcea <osSemaphoreNew+0x66>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d104      	bne.n	800bcea <osSemaphoreNew+0x66>
          mem = 0;
 800bce0:	2300      	movs	r3, #0
 800bce2:	61bb      	str	r3, [r7, #24]
 800bce4:	e001      	b.n	800bcea <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcf0:	d04c      	beq.n	800bd8c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d128      	bne.n	800bd4a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d10a      	bne.n	800bd14 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	2203      	movs	r2, #3
 800bd04:	9200      	str	r2, [sp, #0]
 800bd06:	2200      	movs	r2, #0
 800bd08:	2100      	movs	r1, #0
 800bd0a:	2001      	movs	r0, #1
 800bd0c:	f000 fd4a 	bl	800c7a4 <xQueueGenericCreateStatic>
 800bd10:	61f8      	str	r0, [r7, #28]
 800bd12:	e005      	b.n	800bd20 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bd14:	2203      	movs	r2, #3
 800bd16:	2100      	movs	r1, #0
 800bd18:	2001      	movs	r0, #1
 800bd1a:	f000 fdbb 	bl	800c894 <xQueueGenericCreate>
 800bd1e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d022      	beq.n	800bd6c <osSemaphoreNew+0xe8>
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d01f      	beq.n	800bd6c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	2200      	movs	r2, #0
 800bd30:	2100      	movs	r1, #0
 800bd32:	69f8      	ldr	r0, [r7, #28]
 800bd34:	f000 ff2c 	bl	800cb90 <xQueueGenericSend>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d016      	beq.n	800bd6c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800bd3e:	69f8      	ldr	r0, [r7, #28]
 800bd40:	f001 fbb8 	bl	800d4b4 <vQueueDelete>
            hSemaphore = NULL;
 800bd44:	2300      	movs	r3, #0
 800bd46:	61fb      	str	r3, [r7, #28]
 800bd48:	e010      	b.n	800bd6c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d108      	bne.n	800bd62 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	461a      	mov	r2, r3
 800bd56:	68b9      	ldr	r1, [r7, #8]
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f000 feaf 	bl	800cabc <xQueueCreateCountingSemaphoreStatic>
 800bd5e:	61f8      	str	r0, [r7, #28]
 800bd60:	e004      	b.n	800bd6c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bd62:	68b9      	ldr	r1, [r7, #8]
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f000 fee0 	bl	800cb2a <xQueueCreateCountingSemaphore>
 800bd6a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00c      	beq.n	800bd8c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d003      	beq.n	800bd80 <osSemaphoreNew+0xfc>
          name = attr->name;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	617b      	str	r3, [r7, #20]
 800bd7e:	e001      	b.n	800bd84 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800bd80:	2300      	movs	r3, #0
 800bd82:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bd84:	6979      	ldr	r1, [r7, #20]
 800bd86:	69f8      	ldr	r0, [r7, #28]
 800bd88:	f001 fce0 	bl	800d74c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800bd8c:	69fb      	ldr	r3, [r7, #28]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3720      	adds	r7, #32
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
	...

0800bd98 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d103      	bne.n	800bdb8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bdb0:	f06f 0303 	mvn.w	r3, #3
 800bdb4:	617b      	str	r3, [r7, #20]
 800bdb6:	e039      	b.n	800be2c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdb8:	f3ef 8305 	mrs	r3, IPSR
 800bdbc:	60fb      	str	r3, [r7, #12]
  return(result);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d022      	beq.n	800be0a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d003      	beq.n	800bdd2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800bdca:	f06f 0303 	mvn.w	r3, #3
 800bdce:	617b      	str	r3, [r7, #20]
 800bdd0:	e02c      	b.n	800be2c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bdd6:	f107 0308 	add.w	r3, r7, #8
 800bdda:	461a      	mov	r2, r3
 800bddc:	2100      	movs	r1, #0
 800bdde:	6938      	ldr	r0, [r7, #16]
 800bde0:	f001 fae8 	bl	800d3b4 <xQueueReceiveFromISR>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d003      	beq.n	800bdf2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800bdea:	f06f 0302 	mvn.w	r3, #2
 800bdee:	617b      	str	r3, [r7, #20]
 800bdf0:	e01c      	b.n	800be2c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d019      	beq.n	800be2c <osSemaphoreAcquire+0x94>
 800bdf8:	4b0f      	ldr	r3, [pc, #60]	; (800be38 <osSemaphoreAcquire+0xa0>)
 800bdfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdfe:	601a      	str	r2, [r3, #0]
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	e010      	b.n	800be2c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800be0a:	6839      	ldr	r1, [r7, #0]
 800be0c:	6938      	ldr	r0, [r7, #16]
 800be0e:	f001 f9c5 	bl	800d19c <xQueueSemaphoreTake>
 800be12:	4603      	mov	r3, r0
 800be14:	2b01      	cmp	r3, #1
 800be16:	d009      	beq.n	800be2c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d003      	beq.n	800be26 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800be1e:	f06f 0301 	mvn.w	r3, #1
 800be22:	617b      	str	r3, [r7, #20]
 800be24:	e002      	b.n	800be2c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800be26:	f06f 0302 	mvn.w	r3, #2
 800be2a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800be2c:	697b      	ldr	r3, [r7, #20]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3718      	adds	r7, #24
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	e000ed04 	.word	0xe000ed04

0800be3c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b086      	sub	sp, #24
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800be48:	2300      	movs	r3, #0
 800be4a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d103      	bne.n	800be5a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800be52:	f06f 0303 	mvn.w	r3, #3
 800be56:	617b      	str	r3, [r7, #20]
 800be58:	e02c      	b.n	800beb4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be5a:	f3ef 8305 	mrs	r3, IPSR
 800be5e:	60fb      	str	r3, [r7, #12]
  return(result);
 800be60:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800be62:	2b00      	cmp	r3, #0
 800be64:	d01a      	beq.n	800be9c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800be66:	2300      	movs	r3, #0
 800be68:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800be6a:	f107 0308 	add.w	r3, r7, #8
 800be6e:	4619      	mov	r1, r3
 800be70:	6938      	ldr	r0, [r7, #16]
 800be72:	f001 f826 	bl	800cec2 <xQueueGiveFromISR>
 800be76:	4603      	mov	r3, r0
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d003      	beq.n	800be84 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800be7c:	f06f 0302 	mvn.w	r3, #2
 800be80:	617b      	str	r3, [r7, #20]
 800be82:	e017      	b.n	800beb4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d014      	beq.n	800beb4 <osSemaphoreRelease+0x78>
 800be8a:	4b0d      	ldr	r3, [pc, #52]	; (800bec0 <osSemaphoreRelease+0x84>)
 800be8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be90:	601a      	str	r2, [r3, #0]
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	e00b      	b.n	800beb4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800be9c:	2300      	movs	r3, #0
 800be9e:	2200      	movs	r2, #0
 800bea0:	2100      	movs	r1, #0
 800bea2:	6938      	ldr	r0, [r7, #16]
 800bea4:	f000 fe74 	bl	800cb90 <xQueueGenericSend>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d002      	beq.n	800beb4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800beae:	f06f 0302 	mvn.w	r3, #2
 800beb2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800beb4:	697b      	ldr	r3, [r7, #20]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3718      	adds	r7, #24
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	e000ed04 	.word	0xe000ed04

0800bec4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b08a      	sub	sp, #40	; 0x28
 800bec8:	af02      	add	r7, sp, #8
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bed0:	2300      	movs	r3, #0
 800bed2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bed4:	f3ef 8305 	mrs	r3, IPSR
 800bed8:	613b      	str	r3, [r7, #16]
  return(result);
 800beda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d15f      	bne.n	800bfa0 <osMessageQueueNew+0xdc>
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d05c      	beq.n	800bfa0 <osMessageQueueNew+0xdc>
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d059      	beq.n	800bfa0 <osMessageQueueNew+0xdc>
    mem = -1;
 800beec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bef0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d029      	beq.n	800bf4c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d012      	beq.n	800bf26 <osMessageQueueNew+0x62>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	2b4f      	cmp	r3, #79	; 0x4f
 800bf06:	d90e      	bls.n	800bf26 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00a      	beq.n	800bf26 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	695a      	ldr	r2, [r3, #20]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	68b9      	ldr	r1, [r7, #8]
 800bf18:	fb01 f303 	mul.w	r3, r1, r3
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d302      	bcc.n	800bf26 <osMessageQueueNew+0x62>
        mem = 1;
 800bf20:	2301      	movs	r3, #1
 800bf22:	61bb      	str	r3, [r7, #24]
 800bf24:	e014      	b.n	800bf50 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d110      	bne.n	800bf50 <osMessageQueueNew+0x8c>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d10c      	bne.n	800bf50 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d108      	bne.n	800bf50 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	695b      	ldr	r3, [r3, #20]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d104      	bne.n	800bf50 <osMessageQueueNew+0x8c>
          mem = 0;
 800bf46:	2300      	movs	r3, #0
 800bf48:	61bb      	str	r3, [r7, #24]
 800bf4a:	e001      	b.n	800bf50 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d10b      	bne.n	800bf6e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	691a      	ldr	r2, [r3, #16]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	2100      	movs	r1, #0
 800bf60:	9100      	str	r1, [sp, #0]
 800bf62:	68b9      	ldr	r1, [r7, #8]
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f000 fc1d 	bl	800c7a4 <xQueueGenericCreateStatic>
 800bf6a:	61f8      	str	r0, [r7, #28]
 800bf6c:	e008      	b.n	800bf80 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d105      	bne.n	800bf80 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bf74:	2200      	movs	r2, #0
 800bf76:	68b9      	ldr	r1, [r7, #8]
 800bf78:	68f8      	ldr	r0, [r7, #12]
 800bf7a:	f000 fc8b 	bl	800c894 <xQueueGenericCreate>
 800bf7e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00c      	beq.n	800bfa0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d003      	beq.n	800bf94 <osMessageQueueNew+0xd0>
        name = attr->name;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	617b      	str	r3, [r7, #20]
 800bf92:	e001      	b.n	800bf98 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bf94:	2300      	movs	r3, #0
 800bf96:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bf98:	6979      	ldr	r1, [r7, #20]
 800bf9a:	69f8      	ldr	r0, [r7, #28]
 800bf9c:	f001 fbd6 	bl	800d74c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bfa0:	69fb      	ldr	r3, [r7, #28]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3720      	adds	r7, #32
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
	...

0800bfac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b088      	sub	sp, #32
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	603b      	str	r3, [r7, #0]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfc4:	f3ef 8305 	mrs	r3, IPSR
 800bfc8:	617b      	str	r3, [r7, #20]
  return(result);
 800bfca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d028      	beq.n	800c022 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d005      	beq.n	800bfe2 <osMessageQueuePut+0x36>
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <osMessageQueuePut+0x36>
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d003      	beq.n	800bfea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bfe2:	f06f 0303 	mvn.w	r3, #3
 800bfe6:	61fb      	str	r3, [r7, #28]
 800bfe8:	e038      	b.n	800c05c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800bfea:	2300      	movs	r3, #0
 800bfec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bfee:	f107 0210 	add.w	r2, r7, #16
 800bff2:	2300      	movs	r3, #0
 800bff4:	68b9      	ldr	r1, [r7, #8]
 800bff6:	69b8      	ldr	r0, [r7, #24]
 800bff8:	f000 fec8 	bl	800cd8c <xQueueGenericSendFromISR>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d003      	beq.n	800c00a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c002:	f06f 0302 	mvn.w	r3, #2
 800c006:	61fb      	str	r3, [r7, #28]
 800c008:	e028      	b.n	800c05c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d025      	beq.n	800c05c <osMessageQueuePut+0xb0>
 800c010:	4b15      	ldr	r3, [pc, #84]	; (800c068 <osMessageQueuePut+0xbc>)
 800c012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c016:	601a      	str	r2, [r3, #0]
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	e01c      	b.n	800c05c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <osMessageQueuePut+0x82>
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d103      	bne.n	800c036 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c02e:	f06f 0303 	mvn.w	r3, #3
 800c032:	61fb      	str	r3, [r7, #28]
 800c034:	e012      	b.n	800c05c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c036:	2300      	movs	r3, #0
 800c038:	683a      	ldr	r2, [r7, #0]
 800c03a:	68b9      	ldr	r1, [r7, #8]
 800c03c:	69b8      	ldr	r0, [r7, #24]
 800c03e:	f000 fda7 	bl	800cb90 <xQueueGenericSend>
 800c042:	4603      	mov	r3, r0
 800c044:	2b01      	cmp	r3, #1
 800c046:	d009      	beq.n	800c05c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d003      	beq.n	800c056 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c04e:	f06f 0301 	mvn.w	r3, #1
 800c052:	61fb      	str	r3, [r7, #28]
 800c054:	e002      	b.n	800c05c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c056:	f06f 0302 	mvn.w	r3, #2
 800c05a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c05c:	69fb      	ldr	r3, [r7, #28]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3720      	adds	r7, #32
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	e000ed04 	.word	0xe000ed04

0800c06c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
 800c078:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c07e:	2300      	movs	r3, #0
 800c080:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c082:	f3ef 8305 	mrs	r3, IPSR
 800c086:	617b      	str	r3, [r7, #20]
  return(result);
 800c088:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d028      	beq.n	800c0e0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d005      	beq.n	800c0a0 <osMessageQueueGet+0x34>
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d002      	beq.n	800c0a0 <osMessageQueueGet+0x34>
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d003      	beq.n	800c0a8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c0a0:	f06f 0303 	mvn.w	r3, #3
 800c0a4:	61fb      	str	r3, [r7, #28]
 800c0a6:	e037      	b.n	800c118 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c0ac:	f107 0310 	add.w	r3, r7, #16
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	68b9      	ldr	r1, [r7, #8]
 800c0b4:	69b8      	ldr	r0, [r7, #24]
 800c0b6:	f001 f97d 	bl	800d3b4 <xQueueReceiveFromISR>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d003      	beq.n	800c0c8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c0c0:	f06f 0302 	mvn.w	r3, #2
 800c0c4:	61fb      	str	r3, [r7, #28]
 800c0c6:	e027      	b.n	800c118 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d024      	beq.n	800c118 <osMessageQueueGet+0xac>
 800c0ce:	4b15      	ldr	r3, [pc, #84]	; (800c124 <osMessageQueueGet+0xb8>)
 800c0d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0d4:	601a      	str	r2, [r3, #0]
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	e01b      	b.n	800c118 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d002      	beq.n	800c0ec <osMessageQueueGet+0x80>
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d103      	bne.n	800c0f4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c0ec:	f06f 0303 	mvn.w	r3, #3
 800c0f0:	61fb      	str	r3, [r7, #28]
 800c0f2:	e011      	b.n	800c118 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	68b9      	ldr	r1, [r7, #8]
 800c0f8:	69b8      	ldr	r0, [r7, #24]
 800c0fa:	f000 ff6f 	bl	800cfdc <xQueueReceive>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b01      	cmp	r3, #1
 800c102:	d009      	beq.n	800c118 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d003      	beq.n	800c112 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c10a:	f06f 0301 	mvn.w	r3, #1
 800c10e:	61fb      	str	r3, [r7, #28]
 800c110:	e002      	b.n	800c118 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c112:	f06f 0302 	mvn.w	r3, #2
 800c116:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c118:	69fb      	ldr	r3, [r7, #28]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3720      	adds	r7, #32
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	e000ed04 	.word	0xe000ed04

0800c128 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	4a07      	ldr	r2, [pc, #28]	; (800c154 <vApplicationGetIdleTaskMemory+0x2c>)
 800c138:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	4a06      	ldr	r2, [pc, #24]	; (800c158 <vApplicationGetIdleTaskMemory+0x30>)
 800c13e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2240      	movs	r2, #64	; 0x40
 800c144:	601a      	str	r2, [r3, #0]
}
 800c146:	bf00      	nop
 800c148:	3714      	adds	r7, #20
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop
 800c154:	200087c8 	.word	0x200087c8
 800c158:	20008884 	.word	0x20008884

0800c15c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c15c:	b480      	push	{r7}
 800c15e:	b085      	sub	sp, #20
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	4a07      	ldr	r2, [pc, #28]	; (800c188 <vApplicationGetTimerTaskMemory+0x2c>)
 800c16c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	4a06      	ldr	r2, [pc, #24]	; (800c18c <vApplicationGetTimerTaskMemory+0x30>)
 800c172:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2280      	movs	r2, #128	; 0x80
 800c178:	601a      	str	r2, [r3, #0]
}
 800c17a:	bf00      	nop
 800c17c:	3714      	adds	r7, #20
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	20008984 	.word	0x20008984
 800c18c:	20008a40 	.word	0x20008a40

0800c190 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10a      	bne.n	800c1b4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c1b0:	bf00      	nop
 800c1b2:	e7fe      	b.n	800c1b2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c1b4:	2320      	movs	r3, #32
 800c1b6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2b20      	cmp	r3, #32
 800c1bc:	d00a      	beq.n	800c1d4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	60fb      	str	r3, [r7, #12]
}
 800c1d0:	bf00      	nop
 800c1d2:	e7fe      	b.n	800c1d2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00a      	beq.n	800c1f4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f000 f9bf 	bl	800c56c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c1f4:	697b      	ldr	r3, [r7, #20]
	}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b082      	sub	sp, #8
 800c202:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c204:	2020      	movs	r0, #32
 800c206:	f003 fa4f 	bl	800f6a8 <pvPortMalloc>
 800c20a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00a      	beq.n	800c228 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	3304      	adds	r3, #4
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 f9a5 	bl	800c56c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c228:	687b      	ldr	r3, [r7, #4]
	}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3708      	adds	r7, #8
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
	...

0800c234 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b090      	sub	sp, #64	; 0x40
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	607a      	str	r2, [r7, #4]
 800c240:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c246:	2300      	movs	r3, #0
 800c248:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c24a:	2300      	movs	r3, #0
 800c24c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10a      	bne.n	800c26a <xEventGroupWaitBits+0x36>
	__asm volatile
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	623b      	str	r3, [r7, #32]
}
 800c266:	bf00      	nop
 800c268:	e7fe      	b.n	800c268 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00a      	beq.n	800c28a <xEventGroupWaitBits+0x56>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	61fb      	str	r3, [r7, #28]
}
 800c286:	bf00      	nop
 800c288:	e7fe      	b.n	800c288 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10a      	bne.n	800c2a6 <xEventGroupWaitBits+0x72>
	__asm volatile
 800c290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	61bb      	str	r3, [r7, #24]
}
 800c2a2:	bf00      	nop
 800c2a4:	e7fe      	b.n	800c2a4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2a6:	f002 fa4d 	bl	800e744 <xTaskGetSchedulerState>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d102      	bne.n	800c2b6 <xEventGroupWaitBits+0x82>
 800c2b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d101      	bne.n	800c2ba <xEventGroupWaitBits+0x86>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e000      	b.n	800c2bc <xEventGroupWaitBits+0x88>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10a      	bne.n	800c2d6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800c2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c4:	f383 8811 	msr	BASEPRI, r3
 800c2c8:	f3bf 8f6f 	isb	sy
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	617b      	str	r3, [r7, #20]
}
 800c2d2:	bf00      	nop
 800c2d4:	e7fe      	b.n	800c2d4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800c2d6:	f001 fd9b 	bl	800de10 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c2e0:	683a      	ldr	r2, [r7, #0]
 800c2e2:	68b9      	ldr	r1, [r7, #8]
 800c2e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2e6:	f000 f90b 	bl	800c500 <prvTestWaitCondition>
 800c2ea:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800c2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00e      	beq.n	800c310 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d028      	beq.n	800c352 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	43db      	mvns	r3, r3
 800c308:	401a      	ands	r2, r3
 800c30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c30c:	601a      	str	r2, [r3, #0]
 800c30e:	e020      	b.n	800c352 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c312:	2b00      	cmp	r3, #0
 800c314:	d104      	bne.n	800c320 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800c31a:	2301      	movs	r3, #1
 800c31c:	633b      	str	r3, [r7, #48]	; 0x30
 800c31e:	e018      	b.n	800c352 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c328:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c32c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d003      	beq.n	800c33c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c336:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c33a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c33e:	1d18      	adds	r0, r3, #4
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c344:	4313      	orrs	r3, r2
 800c346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c348:	4619      	mov	r1, r3
 800c34a:	f001 ff5f 	bl	800e20c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c34e:	2300      	movs	r3, #0
 800c350:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c352:	f001 fd6b 	bl	800de2c <xTaskResumeAll>
 800c356:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d031      	beq.n	800c3c2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800c35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c360:	2b00      	cmp	r3, #0
 800c362:	d107      	bne.n	800c374 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800c364:	4b19      	ldr	r3, [pc, #100]	; (800c3cc <xEventGroupWaitBits+0x198>)
 800c366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c36a:	601a      	str	r2, [r3, #0]
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c374:	f002 fb5c 	bl	800ea30 <uxTaskResetEventItemValue>
 800c378:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c37c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c380:	2b00      	cmp	r3, #0
 800c382:	d11a      	bne.n	800c3ba <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800c384:	f003 f86e 	bl	800f464 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c38e:	683a      	ldr	r2, [r7, #0]
 800c390:	68b9      	ldr	r1, [r7, #8]
 800c392:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c394:	f000 f8b4 	bl	800c500 <prvTestWaitCondition>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d009      	beq.n	800c3b2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d006      	beq.n	800c3b2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	43db      	mvns	r3, r3
 800c3ac:	401a      	ands	r2, r3
 800c3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3b0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800c3b6:	f003 f885 	bl	800f4c4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3740      	adds	r7, #64	; 0x40
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	e000ed04 	.word	0xe000ed04

0800c3d0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b08e      	sub	sp, #56	; 0x38
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10a      	bne.n	800c402 <xEventGroupSetBits+0x32>
	__asm volatile
 800c3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	613b      	str	r3, [r7, #16]
}
 800c3fe:	bf00      	nop
 800c400:	e7fe      	b.n	800c400 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00a      	beq.n	800c422 <xEventGroupSetBits+0x52>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	60fb      	str	r3, [r7, #12]
}
 800c41e:	bf00      	nop
 800c420:	e7fe      	b.n	800c420 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c424:	3304      	adds	r3, #4
 800c426:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42a:	3308      	adds	r3, #8
 800c42c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c42e:	f001 fcef 	bl	800de10 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	431a      	orrs	r2, r3
 800c440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c442:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c444:	e03c      	b.n	800c4c0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c452:	2300      	movs	r3, #0
 800c454:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c45c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c464:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d108      	bne.n	800c482 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	4013      	ands	r3, r2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00b      	beq.n	800c494 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800c47c:	2301      	movs	r3, #1
 800c47e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c480:	e008      	b.n	800c494 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	4013      	ands	r3, r2
 800c48a:	69ba      	ldr	r2, [r7, #24]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d101      	bne.n	800c494 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c490:	2301      	movs	r3, #1
 800c492:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c496:	2b00      	cmp	r3, #0
 800c498:	d010      	beq.n	800c4bc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d003      	beq.n	800c4ac <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c4b8:	f001 ff74 	bl	800e3a4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800c4c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4c2:	6a3b      	ldr	r3, [r7, #32]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d1be      	bne.n	800c446 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ce:	43db      	mvns	r3, r3
 800c4d0:	401a      	ands	r2, r3
 800c4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c4d6:	f001 fca9 	bl	800de2c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4dc:	681b      	ldr	r3, [r3, #0]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3738      	adds	r7, #56	; 0x38
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7ff ff6c 	bl	800c3d0 <xEventGroupSetBits>
}
 800c4f8:	bf00      	nop
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c500:	b480      	push	{r7}
 800c502:	b087      	sub	sp, #28
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c50c:	2300      	movs	r3, #0
 800c50e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d107      	bne.n	800c526 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	4013      	ands	r3, r2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00a      	beq.n	800c536 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c520:	2301      	movs	r3, #1
 800c522:	617b      	str	r3, [r7, #20]
 800c524:	e007      	b.n	800c536 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	4013      	ands	r3, r2
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d101      	bne.n	800c536 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c532:	2301      	movs	r3, #1
 800c534:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c536:	697b      	ldr	r3, [r7, #20]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	371c      	adds	r7, #28
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c544:	b580      	push	{r7, lr}
 800c546:	b086      	sub	sp, #24
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	68f9      	ldr	r1, [r7, #12]
 800c556:	4804      	ldr	r0, [pc, #16]	; (800c568 <xEventGroupSetBitsFromISR+0x24>)
 800c558:	f002 fe38 	bl	800f1cc <xTimerPendFunctionCallFromISR>
 800c55c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c55e:	697b      	ldr	r3, [r7, #20]
	}
 800c560:	4618      	mov	r0, r3
 800c562:	3718      	adds	r7, #24
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	0800c4e7 	.word	0x0800c4e7

0800c56c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f103 0208 	add.w	r2, r3, #8
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c584:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f103 0208 	add.w	r2, r3, #8
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f103 0208 	add.w	r2, r3, #8
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c5a0:	bf00      	nop
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c5ba:	bf00      	nop
 800c5bc:	370c      	adds	r7, #12
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b085      	sub	sp, #20
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	683a      	ldr	r2, [r7, #0]
 800c5f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	1c5a      	adds	r2, r3, #1
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	601a      	str	r2, [r3, #0]
}
 800c602:	bf00      	nop
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr

0800c60e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c60e:	b480      	push	{r7}
 800c610:	b085      	sub	sp, #20
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
 800c616:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c624:	d103      	bne.n	800c62e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	60fb      	str	r3, [r7, #12]
 800c62c:	e00c      	b.n	800c648 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	3308      	adds	r3, #8
 800c632:	60fb      	str	r3, [r7, #12]
 800c634:	e002      	b.n	800c63c <vListInsert+0x2e>
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	60fb      	str	r3, [r7, #12]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	429a      	cmp	r2, r3
 800c646:	d2f6      	bcs.n	800c636 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	685a      	ldr	r2, [r3, #4]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	683a      	ldr	r2, [r7, #0]
 800c656:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	683a      	ldr	r2, [r7, #0]
 800c662:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	1c5a      	adds	r2, r3, #1
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	601a      	str	r2, [r3, #0]
}
 800c674:	bf00      	nop
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	6892      	ldr	r2, [r2, #8]
 800c696:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	6852      	ldr	r2, [r2, #4]
 800c6a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d103      	bne.n	800c6b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	689a      	ldr	r2, [r3, #8]
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	1e5a      	subs	r2, r3, #1
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3714      	adds	r7, #20
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10a      	bne.n	800c6fe <xQueueGenericReset+0x2a>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	60bb      	str	r3, [r7, #8]
}
 800c6fa:	bf00      	nop
 800c6fc:	e7fe      	b.n	800c6fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c6fe:	f002 feb1 	bl	800f464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c70a:	68f9      	ldr	r1, [r7, #12]
 800c70c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c70e:	fb01 f303 	mul.w	r3, r1, r3
 800c712:	441a      	add	r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c72e:	3b01      	subs	r3, #1
 800c730:	68f9      	ldr	r1, [r7, #12]
 800c732:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c734:	fb01 f303 	mul.w	r3, r1, r3
 800c738:	441a      	add	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	22ff      	movs	r2, #255	; 0xff
 800c742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	22ff      	movs	r2, #255	; 0xff
 800c74a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d114      	bne.n	800c77e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	691b      	ldr	r3, [r3, #16]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d01a      	beq.n	800c792 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	3310      	adds	r3, #16
 800c760:	4618      	mov	r0, r3
 800c762:	f001 fdbb 	bl	800e2dc <xTaskRemoveFromEventList>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d012      	beq.n	800c792 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c76c:	4b0c      	ldr	r3, [pc, #48]	; (800c7a0 <xQueueGenericReset+0xcc>)
 800c76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c772:	601a      	str	r2, [r3, #0]
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	e009      	b.n	800c792 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	3310      	adds	r3, #16
 800c782:	4618      	mov	r0, r3
 800c784:	f7ff fef2 	bl	800c56c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	3324      	adds	r3, #36	; 0x24
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7ff feed 	bl	800c56c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c792:	f002 fe97 	bl	800f4c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c796:	2301      	movs	r3, #1
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3710      	adds	r7, #16
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	e000ed04 	.word	0xe000ed04

0800c7a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b08e      	sub	sp, #56	; 0x38
 800c7a8:	af02      	add	r7, sp, #8
 800c7aa:	60f8      	str	r0, [r7, #12]
 800c7ac:	60b9      	str	r1, [r7, #8]
 800c7ae:	607a      	str	r2, [r7, #4]
 800c7b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d10a      	bne.n	800c7ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7bc:	f383 8811 	msr	BASEPRI, r3
 800c7c0:	f3bf 8f6f 	isb	sy
 800c7c4:	f3bf 8f4f 	dsb	sy
 800c7c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c7ca:	bf00      	nop
 800c7cc:	e7fe      	b.n	800c7cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10a      	bne.n	800c7ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c7e6:	bf00      	nop
 800c7e8:	e7fe      	b.n	800c7e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d002      	beq.n	800c7f6 <xQueueGenericCreateStatic+0x52>
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d001      	beq.n	800c7fa <xQueueGenericCreateStatic+0x56>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e000      	b.n	800c7fc <xQueueGenericCreateStatic+0x58>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10a      	bne.n	800c816 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	623b      	str	r3, [r7, #32]
}
 800c812:	bf00      	nop
 800c814:	e7fe      	b.n	800c814 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d102      	bne.n	800c822 <xQueueGenericCreateStatic+0x7e>
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d101      	bne.n	800c826 <xQueueGenericCreateStatic+0x82>
 800c822:	2301      	movs	r3, #1
 800c824:	e000      	b.n	800c828 <xQueueGenericCreateStatic+0x84>
 800c826:	2300      	movs	r3, #0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10a      	bne.n	800c842 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c830:	f383 8811 	msr	BASEPRI, r3
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	61fb      	str	r3, [r7, #28]
}
 800c83e:	bf00      	nop
 800c840:	e7fe      	b.n	800c840 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c842:	2350      	movs	r3, #80	; 0x50
 800c844:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	2b50      	cmp	r3, #80	; 0x50
 800c84a:	d00a      	beq.n	800c862 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c850:	f383 8811 	msr	BASEPRI, r3
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	61bb      	str	r3, [r7, #24]
}
 800c85e:	bf00      	nop
 800c860:	e7fe      	b.n	800c860 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c862:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00d      	beq.n	800c88a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c870:	2201      	movs	r2, #1
 800c872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c876:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	4613      	mov	r3, r2
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	68b9      	ldr	r1, [r7, #8]
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f000 f83f 	bl	800c908 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3730      	adds	r7, #48	; 0x30
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c894:	b580      	push	{r7, lr}
 800c896:	b08a      	sub	sp, #40	; 0x28
 800c898:	af02      	add	r7, sp, #8
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d10a      	bne.n	800c8be <xQueueGenericCreate+0x2a>
	__asm volatile
 800c8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ac:	f383 8811 	msr	BASEPRI, r3
 800c8b0:	f3bf 8f6f 	isb	sy
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	613b      	str	r3, [r7, #16]
}
 800c8ba:	bf00      	nop
 800c8bc:	e7fe      	b.n	800c8bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	fb02 f303 	mul.w	r3, r2, r3
 800c8c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	3350      	adds	r3, #80	; 0x50
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f002 feeb 	bl	800f6a8 <pvPortMalloc>
 800c8d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d011      	beq.n	800c8fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	3350      	adds	r3, #80	; 0x50
 800c8e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8ec:	79fa      	ldrb	r2, [r7, #7]
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	697a      	ldr	r2, [r7, #20]
 800c8f6:	68b9      	ldr	r1, [r7, #8]
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f000 f805 	bl	800c908 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8fe:	69bb      	ldr	r3, [r7, #24]
	}
 800c900:	4618      	mov	r0, r3
 800c902:	3720      	adds	r7, #32
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
 800c914:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d103      	bne.n	800c924 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	69ba      	ldr	r2, [r7, #24]
 800c920:	601a      	str	r2, [r3, #0]
 800c922:	e002      	b.n	800c92a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	68ba      	ldr	r2, [r7, #8]
 800c934:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c936:	2101      	movs	r1, #1
 800c938:	69b8      	ldr	r0, [r7, #24]
 800c93a:	f7ff fecb 	bl	800c6d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	78fa      	ldrb	r2, [r7, #3]
 800c942:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c946:	bf00      	nop
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b082      	sub	sp, #8
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00e      	beq.n	800c97a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c96e:	2300      	movs	r3, #0
 800c970:	2200      	movs	r2, #0
 800c972:	2100      	movs	r1, #0
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 f90b 	bl	800cb90 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c97a:	bf00      	nop
 800c97c:	3708      	adds	r7, #8
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c982:	b580      	push	{r7, lr}
 800c984:	b086      	sub	sp, #24
 800c986:	af00      	add	r7, sp, #0
 800c988:	4603      	mov	r3, r0
 800c98a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c98c:	2301      	movs	r3, #1
 800c98e:	617b      	str	r3, [r7, #20]
 800c990:	2300      	movs	r3, #0
 800c992:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c994:	79fb      	ldrb	r3, [r7, #7]
 800c996:	461a      	mov	r2, r3
 800c998:	6939      	ldr	r1, [r7, #16]
 800c99a:	6978      	ldr	r0, [r7, #20]
 800c99c:	f7ff ff7a 	bl	800c894 <xQueueGenericCreate>
 800c9a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	f7ff ffd3 	bl	800c94e <prvInitialiseMutex>

		return xNewQueue;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
	}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3718      	adds	r7, #24
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b088      	sub	sp, #32
 800c9b6:	af02      	add	r7, sp, #8
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	6039      	str	r1, [r7, #0]
 800c9bc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	617b      	str	r3, [r7, #20]
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c9c6:	79fb      	ldrb	r3, [r7, #7]
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	6939      	ldr	r1, [r7, #16]
 800c9d0:	6978      	ldr	r0, [r7, #20]
 800c9d2:	f7ff fee7 	bl	800c7a4 <xQueueGenericCreateStatic>
 800c9d6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	f7ff ffb8 	bl	800c94e <prvInitialiseMutex>

		return xNewQueue;
 800c9de:	68fb      	ldr	r3, [r7, #12]
	}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3718      	adds	r7, #24
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c9e8:	b590      	push	{r4, r7, lr}
 800c9ea:	b087      	sub	sp, #28
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10a      	bne.n	800ca10 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800c9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	60fb      	str	r3, [r7, #12]
}
 800ca0c:	bf00      	nop
 800ca0e:	e7fe      	b.n	800ca0e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	689c      	ldr	r4, [r3, #8]
 800ca14:	f001 fe86 	bl	800e724 <xTaskGetCurrentTaskHandle>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	429c      	cmp	r4, r3
 800ca1c:	d111      	bne.n	800ca42 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	1e5a      	subs	r2, r3, #1
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d105      	bne.n	800ca3c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ca30:	2300      	movs	r3, #0
 800ca32:	2200      	movs	r2, #0
 800ca34:	2100      	movs	r1, #0
 800ca36:	6938      	ldr	r0, [r7, #16]
 800ca38:	f000 f8aa 	bl	800cb90 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	617b      	str	r3, [r7, #20]
 800ca40:	e001      	b.n	800ca46 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ca42:	2300      	movs	r3, #0
 800ca44:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ca46:	697b      	ldr	r3, [r7, #20]
	}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	371c      	adds	r7, #28
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd90      	pop	{r4, r7, pc}

0800ca50 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ca50:	b590      	push	{r4, r7, lr}
 800ca52:	b087      	sub	sp, #28
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10a      	bne.n	800ca7a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	60fb      	str	r3, [r7, #12]
}
 800ca76:	bf00      	nop
 800ca78:	e7fe      	b.n	800ca78 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	689c      	ldr	r4, [r3, #8]
 800ca7e:	f001 fe51 	bl	800e724 <xTaskGetCurrentTaskHandle>
 800ca82:	4603      	mov	r3, r0
 800ca84:	429c      	cmp	r4, r3
 800ca86:	d107      	bne.n	800ca98 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	1c5a      	adds	r2, r3, #1
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ca92:	2301      	movs	r3, #1
 800ca94:	617b      	str	r3, [r7, #20]
 800ca96:	e00c      	b.n	800cab2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ca98:	6839      	ldr	r1, [r7, #0]
 800ca9a:	6938      	ldr	r0, [r7, #16]
 800ca9c:	f000 fb7e 	bl	800d19c <xQueueSemaphoreTake>
 800caa0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d004      	beq.n	800cab2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	1c5a      	adds	r2, r3, #1
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cab2:	697b      	ldr	r3, [r7, #20]
	}
 800cab4:	4618      	mov	r0, r3
 800cab6:	371c      	adds	r7, #28
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd90      	pop	{r4, r7, pc}

0800cabc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08a      	sub	sp, #40	; 0x28
 800cac0:	af02      	add	r7, sp, #8
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d10a      	bne.n	800cae4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	61bb      	str	r3, [r7, #24]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d90a      	bls.n	800cb02 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	617b      	str	r3, [r7, #20]
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cb02:	2302      	movs	r3, #2
 800cb04:	9300      	str	r3, [sp, #0]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f7ff fe49 	bl	800c7a4 <xQueueGenericCreateStatic>
 800cb12:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d002      	beq.n	800cb20 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cb20:	69fb      	ldr	r3, [r7, #28]
	}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3720      	adds	r7, #32
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b086      	sub	sp, #24
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d10a      	bne.n	800cb50 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	613b      	str	r3, [r7, #16]
}
 800cb4c:	bf00      	nop
 800cb4e:	e7fe      	b.n	800cb4e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cb50:	683a      	ldr	r2, [r7, #0]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d90a      	bls.n	800cb6e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5c:	f383 8811 	msr	BASEPRI, r3
 800cb60:	f3bf 8f6f 	isb	sy
 800cb64:	f3bf 8f4f 	dsb	sy
 800cb68:	60fb      	str	r3, [r7, #12]
}
 800cb6a:	bf00      	nop
 800cb6c:	e7fe      	b.n	800cb6c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cb6e:	2202      	movs	r2, #2
 800cb70:	2100      	movs	r1, #0
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7ff fe8e 	bl	800c894 <xQueueGenericCreate>
 800cb78:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d002      	beq.n	800cb86 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	683a      	ldr	r2, [r7, #0]
 800cb84:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cb86:	697b      	ldr	r3, [r7, #20]
	}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3718      	adds	r7, #24
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b08e      	sub	sp, #56	; 0x38
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
 800cb9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10a      	bne.n	800cbc2 <xQueueGenericSend+0x32>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbbe:	bf00      	nop
 800cbc0:	e7fe      	b.n	800cbc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d103      	bne.n	800cbd0 <xQueueGenericSend+0x40>
 800cbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d101      	bne.n	800cbd4 <xQueueGenericSend+0x44>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e000      	b.n	800cbd6 <xQueueGenericSend+0x46>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d10a      	bne.n	800cbf0 <xQueueGenericSend+0x60>
	__asm volatile
 800cbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbde:	f383 8811 	msr	BASEPRI, r3
 800cbe2:	f3bf 8f6f 	isb	sy
 800cbe6:	f3bf 8f4f 	dsb	sy
 800cbea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbec:	bf00      	nop
 800cbee:	e7fe      	b.n	800cbee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	2b02      	cmp	r3, #2
 800cbf4:	d103      	bne.n	800cbfe <xQueueGenericSend+0x6e>
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d101      	bne.n	800cc02 <xQueueGenericSend+0x72>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e000      	b.n	800cc04 <xQueueGenericSend+0x74>
 800cc02:	2300      	movs	r3, #0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10a      	bne.n	800cc1e <xQueueGenericSend+0x8e>
	__asm volatile
 800cc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	623b      	str	r3, [r7, #32]
}
 800cc1a:	bf00      	nop
 800cc1c:	e7fe      	b.n	800cc1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc1e:	f001 fd91 	bl	800e744 <xTaskGetSchedulerState>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d102      	bne.n	800cc2e <xQueueGenericSend+0x9e>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d101      	bne.n	800cc32 <xQueueGenericSend+0xa2>
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e000      	b.n	800cc34 <xQueueGenericSend+0xa4>
 800cc32:	2300      	movs	r3, #0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10a      	bne.n	800cc4e <xQueueGenericSend+0xbe>
	__asm volatile
 800cc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3c:	f383 8811 	msr	BASEPRI, r3
 800cc40:	f3bf 8f6f 	isb	sy
 800cc44:	f3bf 8f4f 	dsb	sy
 800cc48:	61fb      	str	r3, [r7, #28]
}
 800cc4a:	bf00      	nop
 800cc4c:	e7fe      	b.n	800cc4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc4e:	f002 fc09 	bl	800f464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d302      	bcc.n	800cc64 <xQueueGenericSend+0xd4>
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d129      	bne.n	800ccb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	68b9      	ldr	r1, [r7, #8]
 800cc68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc6a:	f000 fc5e 	bl	800d52a <prvCopyDataToQueue>
 800cc6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d010      	beq.n	800cc9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7a:	3324      	adds	r3, #36	; 0x24
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f001 fb2d 	bl	800e2dc <xTaskRemoveFromEventList>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d013      	beq.n	800ccb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc88:	4b3f      	ldr	r3, [pc, #252]	; (800cd88 <xQueueGenericSend+0x1f8>)
 800cc8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc8e:	601a      	str	r2, [r3, #0]
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	f3bf 8f6f 	isb	sy
 800cc98:	e00a      	b.n	800ccb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d007      	beq.n	800ccb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cca0:	4b39      	ldr	r3, [pc, #228]	; (800cd88 <xQueueGenericSend+0x1f8>)
 800cca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cca6:	601a      	str	r2, [r3, #0]
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ccb0:	f002 fc08 	bl	800f4c4 <vPortExitCritical>
				return pdPASS;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e063      	b.n	800cd80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d103      	bne.n	800ccc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ccbe:	f002 fc01 	bl	800f4c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	e05c      	b.n	800cd80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ccc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d106      	bne.n	800ccda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cccc:	f107 0314 	add.w	r3, r7, #20
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f001 fbc9 	bl	800e468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ccda:	f002 fbf3 	bl	800f4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ccde:	f001 f897 	bl	800de10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cce2:	f002 fbbf 	bl	800f464 <vPortEnterCritical>
 800cce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccec:	b25b      	sxtb	r3, r3
 800ccee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccf2:	d103      	bne.n	800ccfc <xQueueGenericSend+0x16c>
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd02:	b25b      	sxtb	r3, r3
 800cd04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd08:	d103      	bne.n	800cd12 <xQueueGenericSend+0x182>
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd12:	f002 fbd7 	bl	800f4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd16:	1d3a      	adds	r2, r7, #4
 800cd18:	f107 0314 	add.w	r3, r7, #20
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f001 fbb8 	bl	800e494 <xTaskCheckForTimeOut>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d124      	bne.n	800cd74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cd2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd2c:	f000 fcf5 	bl	800d71a <prvIsQueueFull>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d018      	beq.n	800cd68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd38:	3310      	adds	r3, #16
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f001 fa40 	bl	800e1c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd46:	f000 fc80 	bl	800d64a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd4a:	f001 f86f 	bl	800de2c <xTaskResumeAll>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f47f af7c 	bne.w	800cc4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cd56:	4b0c      	ldr	r3, [pc, #48]	; (800cd88 <xQueueGenericSend+0x1f8>)
 800cd58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	f3bf 8f6f 	isb	sy
 800cd66:	e772      	b.n	800cc4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd6a:	f000 fc6e 	bl	800d64a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd6e:	f001 f85d 	bl	800de2c <xTaskResumeAll>
 800cd72:	e76c      	b.n	800cc4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd76:	f000 fc68 	bl	800d64a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd7a:	f001 f857 	bl	800de2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3738      	adds	r7, #56	; 0x38
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	e000ed04 	.word	0xe000ed04

0800cd8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b090      	sub	sp, #64	; 0x40
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
 800cd98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10a      	bne.n	800cdba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cdb6:	bf00      	nop
 800cdb8:	e7fe      	b.n	800cdb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d103      	bne.n	800cdc8 <xQueueGenericSendFromISR+0x3c>
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d101      	bne.n	800cdcc <xQueueGenericSendFromISR+0x40>
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e000      	b.n	800cdce <xQueueGenericSendFromISR+0x42>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10a      	bne.n	800cde8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cde4:	bf00      	nop
 800cde6:	e7fe      	b.n	800cde6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	d103      	bne.n	800cdf6 <xQueueGenericSendFromISR+0x6a>
 800cdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d101      	bne.n	800cdfa <xQueueGenericSendFromISR+0x6e>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e000      	b.n	800cdfc <xQueueGenericSendFromISR+0x70>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d10a      	bne.n	800ce16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ce00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce04:	f383 8811 	msr	BASEPRI, r3
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	623b      	str	r3, [r7, #32]
}
 800ce12:	bf00      	nop
 800ce14:	e7fe      	b.n	800ce14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce16:	f002 fc07 	bl	800f628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ce1a:	f3ef 8211 	mrs	r2, BASEPRI
 800ce1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	61fa      	str	r2, [r7, #28]
 800ce30:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ce32:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce34:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d302      	bcc.n	800ce48 <xQueueGenericSendFromISR+0xbc>
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	d12f      	bne.n	800cea8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce56:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce58:	683a      	ldr	r2, [r7, #0]
 800ce5a:	68b9      	ldr	r1, [r7, #8]
 800ce5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce5e:	f000 fb64 	bl	800d52a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ce66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce6a:	d112      	bne.n	800ce92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d016      	beq.n	800cea2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce76:	3324      	adds	r3, #36	; 0x24
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f001 fa2f 	bl	800e2dc <xTaskRemoveFromEventList>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d00e      	beq.n	800cea2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00b      	beq.n	800cea2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	601a      	str	r2, [r3, #0]
 800ce90:	e007      	b.n	800cea2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce96:	3301      	adds	r3, #1
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	b25a      	sxtb	r2, r3
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cea2:	2301      	movs	r3, #1
 800cea4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cea6:	e001      	b.n	800ceac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ceac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ceb6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ceb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3740      	adds	r7, #64	; 0x40
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b08e      	sub	sp, #56	; 0x38
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ced0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10a      	bne.n	800ceec <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ced6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceda:	f383 8811 	msr	BASEPRI, r3
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	623b      	str	r3, [r7, #32]
}
 800cee8:	bf00      	nop
 800ceea:	e7fe      	b.n	800ceea <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ceec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00a      	beq.n	800cf0a <xQueueGiveFromISR+0x48>
	__asm volatile
 800cef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef8:	f383 8811 	msr	BASEPRI, r3
 800cefc:	f3bf 8f6f 	isb	sy
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	61fb      	str	r3, [r7, #28]
}
 800cf06:	bf00      	nop
 800cf08:	e7fe      	b.n	800cf08 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d103      	bne.n	800cf1a <xQueueGiveFromISR+0x58>
 800cf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d101      	bne.n	800cf1e <xQueueGiveFromISR+0x5c>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e000      	b.n	800cf20 <xQueueGiveFromISR+0x5e>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10a      	bne.n	800cf3a <xQueueGiveFromISR+0x78>
	__asm volatile
 800cf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf28:	f383 8811 	msr	BASEPRI, r3
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	61bb      	str	r3, [r7, #24]
}
 800cf36:	bf00      	nop
 800cf38:	e7fe      	b.n	800cf38 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf3a:	f002 fb75 	bl	800f628 <vPortValidateInterruptPriority>
	__asm volatile
 800cf3e:	f3ef 8211 	mrs	r2, BASEPRI
 800cf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	617a      	str	r2, [r7, #20]
 800cf54:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cf56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d22b      	bcs.n	800cfc2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf76:	1c5a      	adds	r2, r3, #1
 800cf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf84:	d112      	bne.n	800cfac <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d016      	beq.n	800cfbc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf90:	3324      	adds	r3, #36	; 0x24
 800cf92:	4618      	mov	r0, r3
 800cf94:	f001 f9a2 	bl	800e2dc <xTaskRemoveFromEventList>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00e      	beq.n	800cfbc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00b      	beq.n	800cfbc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	601a      	str	r2, [r3, #0]
 800cfaa:	e007      	b.n	800cfbc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cfac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	b25a      	sxtb	r2, r3
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	637b      	str	r3, [r7, #52]	; 0x34
 800cfc0:	e001      	b.n	800cfc6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	637b      	str	r3, [r7, #52]	; 0x34
 800cfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f383 8811 	msr	BASEPRI, r3
}
 800cfd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cfd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3738      	adds	r7, #56	; 0x38
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b08c      	sub	sp, #48	; 0x30
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d10a      	bne.n	800d00c <xQueueReceive+0x30>
	__asm volatile
 800cff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffa:	f383 8811 	msr	BASEPRI, r3
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f3bf 8f4f 	dsb	sy
 800d006:	623b      	str	r3, [r7, #32]
}
 800d008:	bf00      	nop
 800d00a:	e7fe      	b.n	800d00a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d103      	bne.n	800d01a <xQueueReceive+0x3e>
 800d012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d016:	2b00      	cmp	r3, #0
 800d018:	d101      	bne.n	800d01e <xQueueReceive+0x42>
 800d01a:	2301      	movs	r3, #1
 800d01c:	e000      	b.n	800d020 <xQueueReceive+0x44>
 800d01e:	2300      	movs	r3, #0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10a      	bne.n	800d03a <xQueueReceive+0x5e>
	__asm volatile
 800d024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d028:	f383 8811 	msr	BASEPRI, r3
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	61fb      	str	r3, [r7, #28]
}
 800d036:	bf00      	nop
 800d038:	e7fe      	b.n	800d038 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d03a:	f001 fb83 	bl	800e744 <xTaskGetSchedulerState>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d102      	bne.n	800d04a <xQueueReceive+0x6e>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d101      	bne.n	800d04e <xQueueReceive+0x72>
 800d04a:	2301      	movs	r3, #1
 800d04c:	e000      	b.n	800d050 <xQueueReceive+0x74>
 800d04e:	2300      	movs	r3, #0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d10a      	bne.n	800d06a <xQueueReceive+0x8e>
	__asm volatile
 800d054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d058:	f383 8811 	msr	BASEPRI, r3
 800d05c:	f3bf 8f6f 	isb	sy
 800d060:	f3bf 8f4f 	dsb	sy
 800d064:	61bb      	str	r3, [r7, #24]
}
 800d066:	bf00      	nop
 800d068:	e7fe      	b.n	800d068 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d06a:	f002 f9fb 	bl	800f464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d072:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	2b00      	cmp	r3, #0
 800d078:	d01f      	beq.n	800d0ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d07a:	68b9      	ldr	r1, [r7, #8]
 800d07c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d07e:	f000 fabe 	bl	800d5fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d084:	1e5a      	subs	r2, r3, #1
 800d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d088:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08c:	691b      	ldr	r3, [r3, #16]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00f      	beq.n	800d0b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d094:	3310      	adds	r3, #16
 800d096:	4618      	mov	r0, r3
 800d098:	f001 f920 	bl	800e2dc <xTaskRemoveFromEventList>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d007      	beq.n	800d0b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d0a2:	4b3d      	ldr	r3, [pc, #244]	; (800d198 <xQueueReceive+0x1bc>)
 800d0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0a8:	601a      	str	r2, [r3, #0]
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d0b2:	f002 fa07 	bl	800f4c4 <vPortExitCritical>
				return pdPASS;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e069      	b.n	800d18e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d103      	bne.n	800d0c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d0c0:	f002 fa00 	bl	800f4c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	e062      	b.n	800d18e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d106      	bne.n	800d0dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0ce:	f107 0310 	add.w	r3, r7, #16
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f001 f9c8 	bl	800e468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0dc:	f002 f9f2 	bl	800f4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0e0:	f000 fe96 	bl	800de10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0e4:	f002 f9be 	bl	800f464 <vPortEnterCritical>
 800d0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0ee:	b25b      	sxtb	r3, r3
 800d0f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0f4:	d103      	bne.n	800d0fe <xQueueReceive+0x122>
 800d0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d104:	b25b      	sxtb	r3, r3
 800d106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d10a:	d103      	bne.n	800d114 <xQueueReceive+0x138>
 800d10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10e:	2200      	movs	r2, #0
 800d110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d114:	f002 f9d6 	bl	800f4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d118:	1d3a      	adds	r2, r7, #4
 800d11a:	f107 0310 	add.w	r3, r7, #16
 800d11e:	4611      	mov	r1, r2
 800d120:	4618      	mov	r0, r3
 800d122:	f001 f9b7 	bl	800e494 <xTaskCheckForTimeOut>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d123      	bne.n	800d174 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d12c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d12e:	f000 fade 	bl	800d6ee <prvIsQueueEmpty>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	d017      	beq.n	800d168 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13a:	3324      	adds	r3, #36	; 0x24
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	4611      	mov	r1, r2
 800d140:	4618      	mov	r0, r3
 800d142:	f001 f83f 	bl	800e1c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d148:	f000 fa7f 	bl	800d64a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d14c:	f000 fe6e 	bl	800de2c <xTaskResumeAll>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d189      	bne.n	800d06a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d156:	4b10      	ldr	r3, [pc, #64]	; (800d198 <xQueueReceive+0x1bc>)
 800d158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d15c:	601a      	str	r2, [r3, #0]
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	f3bf 8f6f 	isb	sy
 800d166:	e780      	b.n	800d06a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d16a:	f000 fa6e 	bl	800d64a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d16e:	f000 fe5d 	bl	800de2c <xTaskResumeAll>
 800d172:	e77a      	b.n	800d06a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d176:	f000 fa68 	bl	800d64a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d17a:	f000 fe57 	bl	800de2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d180:	f000 fab5 	bl	800d6ee <prvIsQueueEmpty>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	f43f af6f 	beq.w	800d06a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d18c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3730      	adds	r7, #48	; 0x30
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	e000ed04 	.word	0xe000ed04

0800d19c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b08e      	sub	sp, #56	; 0x38
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d10a      	bne.n	800d1ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	623b      	str	r3, [r7, #32]
}
 800d1ca:	bf00      	nop
 800d1cc:	e7fe      	b.n	800d1cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d00a      	beq.n	800d1ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1da:	f383 8811 	msr	BASEPRI, r3
 800d1de:	f3bf 8f6f 	isb	sy
 800d1e2:	f3bf 8f4f 	dsb	sy
 800d1e6:	61fb      	str	r3, [r7, #28]
}
 800d1e8:	bf00      	nop
 800d1ea:	e7fe      	b.n	800d1ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1ec:	f001 faaa 	bl	800e744 <xTaskGetSchedulerState>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d102      	bne.n	800d1fc <xQueueSemaphoreTake+0x60>
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d101      	bne.n	800d200 <xQueueSemaphoreTake+0x64>
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e000      	b.n	800d202 <xQueueSemaphoreTake+0x66>
 800d200:	2300      	movs	r3, #0
 800d202:	2b00      	cmp	r3, #0
 800d204:	d10a      	bne.n	800d21c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20a:	f383 8811 	msr	BASEPRI, r3
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	61bb      	str	r3, [r7, #24]
}
 800d218:	bf00      	nop
 800d21a:	e7fe      	b.n	800d21a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d21c:	f002 f922 	bl	800f464 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d224:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d024      	beq.n	800d276 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22e:	1e5a      	subs	r2, r3, #1
 800d230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d232:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d104      	bne.n	800d246 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d23c:	f001 fc10 	bl	800ea60 <pvTaskIncrementMutexHeldCount>
 800d240:	4602      	mov	r2, r0
 800d242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d244:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00f      	beq.n	800d26e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d250:	3310      	adds	r3, #16
 800d252:	4618      	mov	r0, r3
 800d254:	f001 f842 	bl	800e2dc <xTaskRemoveFromEventList>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d007      	beq.n	800d26e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d25e:	4b54      	ldr	r3, [pc, #336]	; (800d3b0 <xQueueSemaphoreTake+0x214>)
 800d260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d264:	601a      	str	r2, [r3, #0]
 800d266:	f3bf 8f4f 	dsb	sy
 800d26a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d26e:	f002 f929 	bl	800f4c4 <vPortExitCritical>
				return pdPASS;
 800d272:	2301      	movs	r3, #1
 800d274:	e097      	b.n	800d3a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d111      	bne.n	800d2a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00a      	beq.n	800d298 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d286:	f383 8811 	msr	BASEPRI, r3
 800d28a:	f3bf 8f6f 	isb	sy
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	617b      	str	r3, [r7, #20]
}
 800d294:	bf00      	nop
 800d296:	e7fe      	b.n	800d296 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d298:	f002 f914 	bl	800f4c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d29c:	2300      	movs	r3, #0
 800d29e:	e082      	b.n	800d3a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d106      	bne.n	800d2b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2a6:	f107 030c 	add.w	r3, r7, #12
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f001 f8dc 	bl	800e468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2b4:	f002 f906 	bl	800f4c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2b8:	f000 fdaa 	bl	800de10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2bc:	f002 f8d2 	bl	800f464 <vPortEnterCritical>
 800d2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2c6:	b25b      	sxtb	r3, r3
 800d2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2cc:	d103      	bne.n	800d2d6 <xQueueSemaphoreTake+0x13a>
 800d2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2dc:	b25b      	sxtb	r3, r3
 800d2de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2e2:	d103      	bne.n	800d2ec <xQueueSemaphoreTake+0x150>
 800d2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2ec:	f002 f8ea 	bl	800f4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2f0:	463a      	mov	r2, r7
 800d2f2:	f107 030c 	add.w	r3, r7, #12
 800d2f6:	4611      	mov	r1, r2
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f001 f8cb 	bl	800e494 <xTaskCheckForTimeOut>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d132      	bne.n	800d36a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d304:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d306:	f000 f9f2 	bl	800d6ee <prvIsQueueEmpty>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d026      	beq.n	800d35e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d109      	bne.n	800d32c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d318:	f002 f8a4 	bl	800f464 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31e:	689b      	ldr	r3, [r3, #8]
 800d320:	4618      	mov	r0, r3
 800d322:	f001 fa2d 	bl	800e780 <xTaskPriorityInherit>
 800d326:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d328:	f002 f8cc 	bl	800f4c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32e:	3324      	adds	r3, #36	; 0x24
 800d330:	683a      	ldr	r2, [r7, #0]
 800d332:	4611      	mov	r1, r2
 800d334:	4618      	mov	r0, r3
 800d336:	f000 ff45 	bl	800e1c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d33a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d33c:	f000 f985 	bl	800d64a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d340:	f000 fd74 	bl	800de2c <xTaskResumeAll>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	f47f af68 	bne.w	800d21c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d34c:	4b18      	ldr	r3, [pc, #96]	; (800d3b0 <xQueueSemaphoreTake+0x214>)
 800d34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d352:	601a      	str	r2, [r3, #0]
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	e75e      	b.n	800d21c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d35e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d360:	f000 f973 	bl	800d64a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d364:	f000 fd62 	bl	800de2c <xTaskResumeAll>
 800d368:	e758      	b.n	800d21c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d36a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d36c:	f000 f96d 	bl	800d64a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d370:	f000 fd5c 	bl	800de2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d376:	f000 f9ba 	bl	800d6ee <prvIsQueueEmpty>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f43f af4d 	beq.w	800d21c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d384:	2b00      	cmp	r3, #0
 800d386:	d00d      	beq.n	800d3a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d388:	f002 f86c 	bl	800f464 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d38c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d38e:	f000 f8b4 	bl	800d4fa <prvGetDisinheritPriorityAfterTimeout>
 800d392:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d39a:	4618      	mov	r0, r3
 800d39c:	f001 fac6 	bl	800e92c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d3a0:	f002 f890 	bl	800f4c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d3a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3738      	adds	r7, #56	; 0x38
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	e000ed04 	.word	0xe000ed04

0800d3b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b08e      	sub	sp, #56	; 0x38
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d10a      	bne.n	800d3e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ce:	f383 8811 	msr	BASEPRI, r3
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	f3bf 8f4f 	dsb	sy
 800d3da:	623b      	str	r3, [r7, #32]
}
 800d3dc:	bf00      	nop
 800d3de:	e7fe      	b.n	800d3de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d103      	bne.n	800d3ee <xQueueReceiveFromISR+0x3a>
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d101      	bne.n	800d3f2 <xQueueReceiveFromISR+0x3e>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e000      	b.n	800d3f4 <xQueueReceiveFromISR+0x40>
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d10a      	bne.n	800d40e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	61fb      	str	r3, [r7, #28]
}
 800d40a:	bf00      	nop
 800d40c:	e7fe      	b.n	800d40c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d40e:	f002 f90b 	bl	800f628 <vPortValidateInterruptPriority>
	__asm volatile
 800d412:	f3ef 8211 	mrs	r2, BASEPRI
 800d416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d41a:	f383 8811 	msr	BASEPRI, r3
 800d41e:	f3bf 8f6f 	isb	sy
 800d422:	f3bf 8f4f 	dsb	sy
 800d426:	61ba      	str	r2, [r7, #24]
 800d428:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d42a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d42c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d432:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d436:	2b00      	cmp	r3, #0
 800d438:	d02f      	beq.n	800d49a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d444:	68b9      	ldr	r1, [r7, #8]
 800d446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d448:	f000 f8d9 	bl	800d5fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44e:	1e5a      	subs	r2, r3, #1
 800d450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d452:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d454:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d45c:	d112      	bne.n	800d484 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d016      	beq.n	800d494 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d468:	3310      	adds	r3, #16
 800d46a:	4618      	mov	r0, r3
 800d46c:	f000 ff36 	bl	800e2dc <xTaskRemoveFromEventList>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00e      	beq.n	800d494 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00b      	beq.n	800d494 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	601a      	str	r2, [r3, #0]
 800d482:	e007      	b.n	800d494 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d488:	3301      	adds	r3, #1
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	b25a      	sxtb	r2, r3
 800d48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d494:	2301      	movs	r3, #1
 800d496:	637b      	str	r3, [r7, #52]	; 0x34
 800d498:	e001      	b.n	800d49e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d49a:	2300      	movs	r3, #0
 800d49c:	637b      	str	r3, [r7, #52]	; 0x34
 800d49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	f383 8811 	msr	BASEPRI, r3
}
 800d4a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3738      	adds	r7, #56	; 0x38
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10a      	bne.n	800d4dc <vQueueDelete+0x28>
	__asm volatile
 800d4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ca:	f383 8811 	msr	BASEPRI, r3
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	60bb      	str	r3, [r7, #8]
}
 800d4d8:	bf00      	nop
 800d4da:	e7fe      	b.n	800d4da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f000 f95f 	bl	800d7a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d102      	bne.n	800d4f2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	f002 f9a7 	bl	800f840 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d4f2:	bf00      	nop
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d4fa:	b480      	push	{r7}
 800d4fc:	b085      	sub	sp, #20
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d506:	2b00      	cmp	r3, #0
 800d508:	d006      	beq.n	800d518 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d514:	60fb      	str	r3, [r7, #12]
 800d516:	e001      	b.n	800d51c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d518:	2300      	movs	r3, #0
 800d51a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d51c:	68fb      	ldr	r3, [r7, #12]
	}
 800d51e:	4618      	mov	r0, r3
 800d520:	3714      	adds	r7, #20
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b086      	sub	sp, #24
 800d52e:	af00      	add	r7, sp, #0
 800d530:	60f8      	str	r0, [r7, #12]
 800d532:	60b9      	str	r1, [r7, #8]
 800d534:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d536:	2300      	movs	r3, #0
 800d538:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d53e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d544:	2b00      	cmp	r3, #0
 800d546:	d10d      	bne.n	800d564 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d14d      	bne.n	800d5ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	4618      	mov	r0, r3
 800d556:	f001 f97b 	bl	800e850 <xTaskPriorityDisinherit>
 800d55a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2200      	movs	r2, #0
 800d560:	609a      	str	r2, [r3, #8]
 800d562:	e043      	b.n	800d5ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d119      	bne.n	800d59e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6858      	ldr	r0, [r3, #4]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d572:	461a      	mov	r2, r3
 800d574:	68b9      	ldr	r1, [r7, #8]
 800d576:	f002 faad 	bl	800fad4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	685a      	ldr	r2, [r3, #4]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d582:	441a      	add	r2, r3
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	685a      	ldr	r2, [r3, #4]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	429a      	cmp	r2, r3
 800d592:	d32b      	bcc.n	800d5ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	605a      	str	r2, [r3, #4]
 800d59c:	e026      	b.n	800d5ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	68d8      	ldr	r0, [r3, #12]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	68b9      	ldr	r1, [r7, #8]
 800d5aa:	f002 fa93 	bl	800fad4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	68da      	ldr	r2, [r3, #12]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b6:	425b      	negs	r3, r3
 800d5b8:	441a      	add	r2, r3
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	68da      	ldr	r2, [r3, #12]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d207      	bcs.n	800d5da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	689a      	ldr	r2, [r3, #8]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d2:	425b      	negs	r3, r3
 800d5d4:	441a      	add	r2, r3
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b02      	cmp	r3, #2
 800d5de:	d105      	bne.n	800d5ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d002      	beq.n	800d5ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	3b01      	subs	r3, #1
 800d5ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	1c5a      	adds	r2, r3, #1
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d5f4:	697b      	ldr	r3, [r7, #20]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3718      	adds	r7, #24
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b082      	sub	sp, #8
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d018      	beq.n	800d642 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	68da      	ldr	r2, [r3, #12]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d618:	441a      	add	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	68da      	ldr	r2, [r3, #12]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	689b      	ldr	r3, [r3, #8]
 800d626:	429a      	cmp	r2, r3
 800d628:	d303      	bcc.n	800d632 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68d9      	ldr	r1, [r3, #12]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63a:	461a      	mov	r2, r3
 800d63c:	6838      	ldr	r0, [r7, #0]
 800d63e:	f002 fa49 	bl	800fad4 <memcpy>
	}
}
 800d642:	bf00      	nop
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b084      	sub	sp, #16
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d652:	f001 ff07 	bl	800f464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d65c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d65e:	e011      	b.n	800d684 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d664:	2b00      	cmp	r3, #0
 800d666:	d012      	beq.n	800d68e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	3324      	adds	r3, #36	; 0x24
 800d66c:	4618      	mov	r0, r3
 800d66e:	f000 fe35 	bl	800e2dc <xTaskRemoveFromEventList>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d001      	beq.n	800d67c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d678:	f000 ff6e 	bl	800e558 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d67c:	7bfb      	ldrb	r3, [r7, #15]
 800d67e:	3b01      	subs	r3, #1
 800d680:	b2db      	uxtb	r3, r3
 800d682:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	dce9      	bgt.n	800d660 <prvUnlockQueue+0x16>
 800d68c:	e000      	b.n	800d690 <prvUnlockQueue+0x46>
					break;
 800d68e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	22ff      	movs	r2, #255	; 0xff
 800d694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d698:	f001 ff14 	bl	800f4c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d69c:	f001 fee2 	bl	800f464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6a8:	e011      	b.n	800d6ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	691b      	ldr	r3, [r3, #16]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d012      	beq.n	800d6d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	3310      	adds	r3, #16
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f000 fe10 	bl	800e2dc <xTaskRemoveFromEventList>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d001      	beq.n	800d6c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d6c2:	f000 ff49 	bl	800e558 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d6c6:	7bbb      	ldrb	r3, [r7, #14]
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	dce9      	bgt.n	800d6aa <prvUnlockQueue+0x60>
 800d6d6:	e000      	b.n	800d6da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d6d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	22ff      	movs	r2, #255	; 0xff
 800d6de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d6e2:	f001 feef 	bl	800f4c4 <vPortExitCritical>
}
 800d6e6:	bf00      	nop
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b084      	sub	sp, #16
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d6f6:	f001 feb5 	bl	800f464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d102      	bne.n	800d708 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d702:	2301      	movs	r3, #1
 800d704:	60fb      	str	r3, [r7, #12]
 800d706:	e001      	b.n	800d70c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d708:	2300      	movs	r3, #0
 800d70a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d70c:	f001 feda 	bl	800f4c4 <vPortExitCritical>

	return xReturn;
 800d710:	68fb      	ldr	r3, [r7, #12]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b084      	sub	sp, #16
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d722:	f001 fe9f 	bl	800f464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d72e:	429a      	cmp	r2, r3
 800d730:	d102      	bne.n	800d738 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d732:	2301      	movs	r3, #1
 800d734:	60fb      	str	r3, [r7, #12]
 800d736:	e001      	b.n	800d73c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d738:	2300      	movs	r3, #0
 800d73a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d73c:	f001 fec2 	bl	800f4c4 <vPortExitCritical>

	return xReturn;
 800d740:	68fb      	ldr	r3, [r7, #12]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
	...

0800d74c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d756:	2300      	movs	r3, #0
 800d758:	60fb      	str	r3, [r7, #12]
 800d75a:	e014      	b.n	800d786 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d75c:	4a0f      	ldr	r2, [pc, #60]	; (800d79c <vQueueAddToRegistry+0x50>)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d10b      	bne.n	800d780 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d768:	490c      	ldr	r1, [pc, #48]	; (800d79c <vQueueAddToRegistry+0x50>)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	683a      	ldr	r2, [r7, #0]
 800d76e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d772:	4a0a      	ldr	r2, [pc, #40]	; (800d79c <vQueueAddToRegistry+0x50>)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	00db      	lsls	r3, r3, #3
 800d778:	4413      	add	r3, r2
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d77e:	e006      	b.n	800d78e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	3301      	adds	r3, #1
 800d784:	60fb      	str	r3, [r7, #12]
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2b07      	cmp	r3, #7
 800d78a:	d9e7      	bls.n	800d75c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d78c:	bf00      	nop
 800d78e:	bf00      	nop
 800d790:	3714      	adds	r7, #20
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop
 800d79c:	20008c40 	.word	0x20008c40

0800d7a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b085      	sub	sp, #20
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	60fb      	str	r3, [r7, #12]
 800d7ac:	e016      	b.n	800d7dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d7ae:	4a10      	ldr	r2, [pc, #64]	; (800d7f0 <vQueueUnregisterQueue+0x50>)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	00db      	lsls	r3, r3, #3
 800d7b4:	4413      	add	r3, r2
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d10b      	bne.n	800d7d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d7be:	4a0c      	ldr	r2, [pc, #48]	; (800d7f0 <vQueueUnregisterQueue+0x50>)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d7c8:	4a09      	ldr	r2, [pc, #36]	; (800d7f0 <vQueueUnregisterQueue+0x50>)
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	00db      	lsls	r3, r3, #3
 800d7ce:	4413      	add	r3, r2
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	605a      	str	r2, [r3, #4]
				break;
 800d7d4:	e006      	b.n	800d7e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	60fb      	str	r3, [r7, #12]
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2b07      	cmp	r3, #7
 800d7e0:	d9e5      	bls.n	800d7ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d7e2:	bf00      	nop
 800d7e4:	bf00      	nop
 800d7e6:	3714      	adds	r7, #20
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr
 800d7f0:	20008c40 	.word	0x20008c40

0800d7f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d804:	f001 fe2e 	bl	800f464 <vPortEnterCritical>
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d80e:	b25b      	sxtb	r3, r3
 800d810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d814:	d103      	bne.n	800d81e <vQueueWaitForMessageRestricted+0x2a>
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	2200      	movs	r2, #0
 800d81a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d824:	b25b      	sxtb	r3, r3
 800d826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d82a:	d103      	bne.n	800d834 <vQueueWaitForMessageRestricted+0x40>
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	2200      	movs	r2, #0
 800d830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d834:	f001 fe46 	bl	800f4c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d106      	bne.n	800d84e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	3324      	adds	r3, #36	; 0x24
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	68b9      	ldr	r1, [r7, #8]
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 fd1b 	bl	800e284 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d84e:	6978      	ldr	r0, [r7, #20]
 800d850:	f7ff fefb 	bl	800d64a <prvUnlockQueue>
	}
 800d854:	bf00      	nop
 800d856:	3718      	adds	r7, #24
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b08e      	sub	sp, #56	; 0x38
 800d860:	af04      	add	r7, sp, #16
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	607a      	str	r2, [r7, #4]
 800d868:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d10a      	bne.n	800d886 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d874:	f383 8811 	msr	BASEPRI, r3
 800d878:	f3bf 8f6f 	isb	sy
 800d87c:	f3bf 8f4f 	dsb	sy
 800d880:	623b      	str	r3, [r7, #32]
}
 800d882:	bf00      	nop
 800d884:	e7fe      	b.n	800d884 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d10a      	bne.n	800d8a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800d88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	61fb      	str	r3, [r7, #28]
}
 800d89e:	bf00      	nop
 800d8a0:	e7fe      	b.n	800d8a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d8a2:	23bc      	movs	r3, #188	; 0xbc
 800d8a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	2bbc      	cmp	r3, #188	; 0xbc
 800d8aa:	d00a      	beq.n	800d8c2 <xTaskCreateStatic+0x66>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	61bb      	str	r3, [r7, #24]
}
 800d8be:	bf00      	nop
 800d8c0:	e7fe      	b.n	800d8c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d8c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d01e      	beq.n	800d908 <xTaskCreateStatic+0xac>
 800d8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d01b      	beq.n	800d908 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	2202      	movs	r2, #2
 800d8de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	9303      	str	r3, [sp, #12]
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e8:	9302      	str	r3, [sp, #8]
 800d8ea:	f107 0314 	add.w	r3, r7, #20
 800d8ee:	9301      	str	r3, [sp, #4]
 800d8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	68b9      	ldr	r1, [r7, #8]
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f000 f850 	bl	800d9a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d902:	f000 f8f3 	bl	800daec <prvAddNewTaskToReadyList>
 800d906:	e001      	b.n	800d90c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d908:	2300      	movs	r3, #0
 800d90a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d90c:	697b      	ldr	r3, [r7, #20]
	}
 800d90e:	4618      	mov	r0, r3
 800d910:	3728      	adds	r7, #40	; 0x28
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d916:	b580      	push	{r7, lr}
 800d918:	b08c      	sub	sp, #48	; 0x30
 800d91a:	af04      	add	r7, sp, #16
 800d91c:	60f8      	str	r0, [r7, #12]
 800d91e:	60b9      	str	r1, [r7, #8]
 800d920:	603b      	str	r3, [r7, #0]
 800d922:	4613      	mov	r3, r2
 800d924:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d926:	88fb      	ldrh	r3, [r7, #6]
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	4618      	mov	r0, r3
 800d92c:	f001 febc 	bl	800f6a8 <pvPortMalloc>
 800d930:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00e      	beq.n	800d956 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d938:	20bc      	movs	r0, #188	; 0xbc
 800d93a:	f001 feb5 	bl	800f6a8 <pvPortMalloc>
 800d93e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d003      	beq.n	800d94e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	697a      	ldr	r2, [r7, #20]
 800d94a:	631a      	str	r2, [r3, #48]	; 0x30
 800d94c:	e005      	b.n	800d95a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d94e:	6978      	ldr	r0, [r7, #20]
 800d950:	f001 ff76 	bl	800f840 <vPortFree>
 800d954:	e001      	b.n	800d95a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d956:	2300      	movs	r3, #0
 800d958:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d017      	beq.n	800d990 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	2200      	movs	r2, #0
 800d964:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d968:	88fa      	ldrh	r2, [r7, #6]
 800d96a:	2300      	movs	r3, #0
 800d96c:	9303      	str	r3, [sp, #12]
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	9302      	str	r3, [sp, #8]
 800d972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	68b9      	ldr	r1, [r7, #8]
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f000 f80e 	bl	800d9a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d984:	69f8      	ldr	r0, [r7, #28]
 800d986:	f000 f8b1 	bl	800daec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d98a:	2301      	movs	r3, #1
 800d98c:	61bb      	str	r3, [r7, #24]
 800d98e:	e002      	b.n	800d996 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d994:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d996:	69bb      	ldr	r3, [r7, #24]
	}
 800d998:	4618      	mov	r0, r3
 800d99a:	3720      	adds	r7, #32
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b088      	sub	sp, #32
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	60f8      	str	r0, [r7, #12]
 800d9a8:	60b9      	str	r1, [r7, #8]
 800d9aa:	607a      	str	r2, [r7, #4]
 800d9ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	21a5      	movs	r1, #165	; 0xa5
 800d9ba:	f002 f899 	bl	800faf0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d9c8:	3b01      	subs	r3, #1
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	4413      	add	r3, r2
 800d9ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	f023 0307 	bic.w	r3, r3, #7
 800d9d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	f003 0307 	and.w	r3, r3, #7
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00a      	beq.n	800d9f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e6:	f383 8811 	msr	BASEPRI, r3
 800d9ea:	f3bf 8f6f 	isb	sy
 800d9ee:	f3bf 8f4f 	dsb	sy
 800d9f2:	617b      	str	r3, [r7, #20]
}
 800d9f4:	bf00      	nop
 800d9f6:	e7fe      	b.n	800d9f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d01f      	beq.n	800da3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9fe:	2300      	movs	r3, #0
 800da00:	61fb      	str	r3, [r7, #28]
 800da02:	e012      	b.n	800da2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800da04:	68ba      	ldr	r2, [r7, #8]
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	4413      	add	r3, r2
 800da0a:	7819      	ldrb	r1, [r3, #0]
 800da0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	4413      	add	r3, r2
 800da12:	3334      	adds	r3, #52	; 0x34
 800da14:	460a      	mov	r2, r1
 800da16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800da18:	68ba      	ldr	r2, [r7, #8]
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	4413      	add	r3, r2
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d006      	beq.n	800da32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	3301      	adds	r3, #1
 800da28:	61fb      	str	r3, [r7, #28]
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	2b0f      	cmp	r3, #15
 800da2e:	d9e9      	bls.n	800da04 <prvInitialiseNewTask+0x64>
 800da30:	e000      	b.n	800da34 <prvInitialiseNewTask+0x94>
			{
				break;
 800da32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800da34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da36:	2200      	movs	r2, #0
 800da38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800da3c:	e003      	b.n	800da46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	2200      	movs	r2, #0
 800da42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800da46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da48:	2b37      	cmp	r3, #55	; 0x37
 800da4a:	d901      	bls.n	800da50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da4c:	2337      	movs	r3, #55	; 0x37
 800da4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800da50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800da5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5e:	2200      	movs	r2, #0
 800da60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da64:	3304      	adds	r3, #4
 800da66:	4618      	mov	r0, r3
 800da68:	f7fe fda0 	bl	800c5ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6e:	3318      	adds	r3, #24
 800da70:	4618      	mov	r0, r3
 800da72:	f7fe fd9b 	bl	800c5ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8e:	2200      	movs	r2, #0
 800da90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da96:	2200      	movs	r2, #0
 800da98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800da9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9e:	3354      	adds	r3, #84	; 0x54
 800daa0:	2260      	movs	r2, #96	; 0x60
 800daa2:	2100      	movs	r1, #0
 800daa4:	4618      	mov	r0, r3
 800daa6:	f002 f823 	bl	800faf0 <memset>
 800daaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daac:	4a0c      	ldr	r2, [pc, #48]	; (800dae0 <prvInitialiseNewTask+0x140>)
 800daae:	659a      	str	r2, [r3, #88]	; 0x58
 800dab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab2:	4a0c      	ldr	r2, [pc, #48]	; (800dae4 <prvInitialiseNewTask+0x144>)
 800dab4:	65da      	str	r2, [r3, #92]	; 0x5c
 800dab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab8:	4a0b      	ldr	r2, [pc, #44]	; (800dae8 <prvInitialiseNewTask+0x148>)
 800daba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dabc:	683a      	ldr	r2, [r7, #0]
 800dabe:	68f9      	ldr	r1, [r7, #12]
 800dac0:	69b8      	ldr	r0, [r7, #24]
 800dac2:	f001 fba3 	bl	800f20c <pxPortInitialiseStack>
 800dac6:	4602      	mov	r2, r0
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d002      	beq.n	800dad8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dad6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dad8:	bf00      	nop
 800dada:	3720      	adds	r7, #32
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	0801f788 	.word	0x0801f788
 800dae4:	0801f7a8 	.word	0x0801f7a8
 800dae8:	0801f768 	.word	0x0801f768

0800daec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800daf4:	f001 fcb6 	bl	800f464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800daf8:	4b2d      	ldr	r3, [pc, #180]	; (800dbb0 <prvAddNewTaskToReadyList+0xc4>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	3301      	adds	r3, #1
 800dafe:	4a2c      	ldr	r2, [pc, #176]	; (800dbb0 <prvAddNewTaskToReadyList+0xc4>)
 800db00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db02:	4b2c      	ldr	r3, [pc, #176]	; (800dbb4 <prvAddNewTaskToReadyList+0xc8>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d109      	bne.n	800db1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db0a:	4a2a      	ldr	r2, [pc, #168]	; (800dbb4 <prvAddNewTaskToReadyList+0xc8>)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db10:	4b27      	ldr	r3, [pc, #156]	; (800dbb0 <prvAddNewTaskToReadyList+0xc4>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2b01      	cmp	r3, #1
 800db16:	d110      	bne.n	800db3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db18:	f000 fd42 	bl	800e5a0 <prvInitialiseTaskLists>
 800db1c:	e00d      	b.n	800db3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800db1e:	4b26      	ldr	r3, [pc, #152]	; (800dbb8 <prvAddNewTaskToReadyList+0xcc>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d109      	bne.n	800db3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800db26:	4b23      	ldr	r3, [pc, #140]	; (800dbb4 <prvAddNewTaskToReadyList+0xc8>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db30:	429a      	cmp	r2, r3
 800db32:	d802      	bhi.n	800db3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800db34:	4a1f      	ldr	r2, [pc, #124]	; (800dbb4 <prvAddNewTaskToReadyList+0xc8>)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800db3a:	4b20      	ldr	r3, [pc, #128]	; (800dbbc <prvAddNewTaskToReadyList+0xd0>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	3301      	adds	r3, #1
 800db40:	4a1e      	ldr	r2, [pc, #120]	; (800dbbc <prvAddNewTaskToReadyList+0xd0>)
 800db42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db44:	4b1d      	ldr	r3, [pc, #116]	; (800dbbc <prvAddNewTaskToReadyList+0xd0>)
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db50:	4b1b      	ldr	r3, [pc, #108]	; (800dbc0 <prvAddNewTaskToReadyList+0xd4>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	429a      	cmp	r2, r3
 800db56:	d903      	bls.n	800db60 <prvAddNewTaskToReadyList+0x74>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5c:	4a18      	ldr	r2, [pc, #96]	; (800dbc0 <prvAddNewTaskToReadyList+0xd4>)
 800db5e:	6013      	str	r3, [r2, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db64:	4613      	mov	r3, r2
 800db66:	009b      	lsls	r3, r3, #2
 800db68:	4413      	add	r3, r2
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	4a15      	ldr	r2, [pc, #84]	; (800dbc4 <prvAddNewTaskToReadyList+0xd8>)
 800db6e:	441a      	add	r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	3304      	adds	r3, #4
 800db74:	4619      	mov	r1, r3
 800db76:	4610      	mov	r0, r2
 800db78:	f7fe fd25 	bl	800c5c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800db7c:	f001 fca2 	bl	800f4c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db80:	4b0d      	ldr	r3, [pc, #52]	; (800dbb8 <prvAddNewTaskToReadyList+0xcc>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d00e      	beq.n	800dba6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db88:	4b0a      	ldr	r3, [pc, #40]	; (800dbb4 <prvAddNewTaskToReadyList+0xc8>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db92:	429a      	cmp	r2, r3
 800db94:	d207      	bcs.n	800dba6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800db96:	4b0c      	ldr	r3, [pc, #48]	; (800dbc8 <prvAddNewTaskToReadyList+0xdc>)
 800db98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db9c:	601a      	str	r2, [r3, #0]
 800db9e:	f3bf 8f4f 	dsb	sy
 800dba2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dba6:	bf00      	nop
 800dba8:	3708      	adds	r7, #8
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	20009154 	.word	0x20009154
 800dbb4:	20008c80 	.word	0x20008c80
 800dbb8:	20009160 	.word	0x20009160
 800dbbc:	20009170 	.word	0x20009170
 800dbc0:	2000915c 	.word	0x2000915c
 800dbc4:	20008c84 	.word	0x20008c84
 800dbc8:	e000ed04 	.word	0xe000ed04

0800dbcc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b08a      	sub	sp, #40	; 0x28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d10a      	bne.n	800dbf6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800dbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	617b      	str	r3, [r7, #20]
}
 800dbf2:	bf00      	nop
 800dbf4:	e7fe      	b.n	800dbf4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10a      	bne.n	800dc12 <vTaskDelayUntil+0x46>
	__asm volatile
 800dbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc00:	f383 8811 	msr	BASEPRI, r3
 800dc04:	f3bf 8f6f 	isb	sy
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	613b      	str	r3, [r7, #16]
}
 800dc0e:	bf00      	nop
 800dc10:	e7fe      	b.n	800dc10 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800dc12:	4b2a      	ldr	r3, [pc, #168]	; (800dcbc <vTaskDelayUntil+0xf0>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00a      	beq.n	800dc30 <vTaskDelayUntil+0x64>
	__asm volatile
 800dc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1e:	f383 8811 	msr	BASEPRI, r3
 800dc22:	f3bf 8f6f 	isb	sy
 800dc26:	f3bf 8f4f 	dsb	sy
 800dc2a:	60fb      	str	r3, [r7, #12]
}
 800dc2c:	bf00      	nop
 800dc2e:	e7fe      	b.n	800dc2e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800dc30:	f000 f8ee 	bl	800de10 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800dc34:	4b22      	ldr	r3, [pc, #136]	; (800dcc0 <vTaskDelayUntil+0xf4>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	4413      	add	r3, r2
 800dc42:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	6a3a      	ldr	r2, [r7, #32]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d20b      	bcs.n	800dc66 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	69fa      	ldr	r2, [r7, #28]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d211      	bcs.n	800dc7c <vTaskDelayUntil+0xb0>
 800dc58:	69fa      	ldr	r2, [r7, #28]
 800dc5a:	6a3b      	ldr	r3, [r7, #32]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d90d      	bls.n	800dc7c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800dc60:	2301      	movs	r3, #1
 800dc62:	627b      	str	r3, [r7, #36]	; 0x24
 800dc64:	e00a      	b.n	800dc7c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	69fa      	ldr	r2, [r7, #28]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d303      	bcc.n	800dc78 <vTaskDelayUntil+0xac>
 800dc70:	69fa      	ldr	r2, [r7, #28]
 800dc72:	6a3b      	ldr	r3, [r7, #32]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d901      	bls.n	800dc7c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	69fa      	ldr	r2, [r7, #28]
 800dc80:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800dc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d006      	beq.n	800dc96 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800dc88:	69fa      	ldr	r2, [r7, #28]
 800dc8a:	6a3b      	ldr	r3, [r7, #32]
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	2100      	movs	r1, #0
 800dc90:	4618      	mov	r0, r3
 800dc92:	f000 fef9 	bl	800ea88 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800dc96:	f000 f8c9 	bl	800de2c <xTaskResumeAll>
 800dc9a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d107      	bne.n	800dcb2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800dca2:	4b08      	ldr	r3, [pc, #32]	; (800dcc4 <vTaskDelayUntil+0xf8>)
 800dca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dca8:	601a      	str	r2, [r3, #0]
 800dcaa:	f3bf 8f4f 	dsb	sy
 800dcae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dcb2:	bf00      	nop
 800dcb4:	3728      	adds	r7, #40	; 0x28
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	2000917c 	.word	0x2000917c
 800dcc0:	20009158 	.word	0x20009158
 800dcc4:	e000ed04 	.word	0xe000ed04

0800dcc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d017      	beq.n	800dd0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dcda:	4b13      	ldr	r3, [pc, #76]	; (800dd28 <vTaskDelay+0x60>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d00a      	beq.n	800dcf8 <vTaskDelay+0x30>
	__asm volatile
 800dce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	60bb      	str	r3, [r7, #8]
}
 800dcf4:	bf00      	nop
 800dcf6:	e7fe      	b.n	800dcf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dcf8:	f000 f88a 	bl	800de10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 fec2 	bl	800ea88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd04:	f000 f892 	bl	800de2c <xTaskResumeAll>
 800dd08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d107      	bne.n	800dd20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dd10:	4b06      	ldr	r3, [pc, #24]	; (800dd2c <vTaskDelay+0x64>)
 800dd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd16:	601a      	str	r2, [r3, #0]
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd20:	bf00      	nop
 800dd22:	3710      	adds	r7, #16
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	2000917c 	.word	0x2000917c
 800dd2c:	e000ed04 	.word	0xe000ed04

0800dd30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b08a      	sub	sp, #40	; 0x28
 800dd34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd36:	2300      	movs	r3, #0
 800dd38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd3e:	463a      	mov	r2, r7
 800dd40:	1d39      	adds	r1, r7, #4
 800dd42:	f107 0308 	add.w	r3, r7, #8
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fe f9ee 	bl	800c128 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd4c:	6839      	ldr	r1, [r7, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	68ba      	ldr	r2, [r7, #8]
 800dd52:	9202      	str	r2, [sp, #8]
 800dd54:	9301      	str	r3, [sp, #4]
 800dd56:	2300      	movs	r3, #0
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	460a      	mov	r2, r1
 800dd5e:	4924      	ldr	r1, [pc, #144]	; (800ddf0 <vTaskStartScheduler+0xc0>)
 800dd60:	4824      	ldr	r0, [pc, #144]	; (800ddf4 <vTaskStartScheduler+0xc4>)
 800dd62:	f7ff fd7b 	bl	800d85c <xTaskCreateStatic>
 800dd66:	4603      	mov	r3, r0
 800dd68:	4a23      	ldr	r2, [pc, #140]	; (800ddf8 <vTaskStartScheduler+0xc8>)
 800dd6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd6c:	4b22      	ldr	r3, [pc, #136]	; (800ddf8 <vTaskStartScheduler+0xc8>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd74:	2301      	movs	r3, #1
 800dd76:	617b      	str	r3, [r7, #20]
 800dd78:	e001      	b.n	800dd7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d102      	bne.n	800dd8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd84:	f000 fed4 	bl	800eb30 <xTimerCreateTimerTask>
 800dd88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d11b      	bne.n	800ddc8 <vTaskStartScheduler+0x98>
	__asm volatile
 800dd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	613b      	str	r3, [r7, #16]
}
 800dda2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dda4:	4b15      	ldr	r3, [pc, #84]	; (800ddfc <vTaskStartScheduler+0xcc>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	3354      	adds	r3, #84	; 0x54
 800ddaa:	4a15      	ldr	r2, [pc, #84]	; (800de00 <vTaskStartScheduler+0xd0>)
 800ddac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ddae:	4b15      	ldr	r3, [pc, #84]	; (800de04 <vTaskStartScheduler+0xd4>)
 800ddb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ddb6:	4b14      	ldr	r3, [pc, #80]	; (800de08 <vTaskStartScheduler+0xd8>)
 800ddb8:	2201      	movs	r2, #1
 800ddba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ddbc:	4b13      	ldr	r3, [pc, #76]	; (800de0c <vTaskStartScheduler+0xdc>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ddc2:	f001 faad 	bl	800f320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ddc6:	e00e      	b.n	800dde6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddce:	d10a      	bne.n	800dde6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ddd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	60fb      	str	r3, [r7, #12]
}
 800dde2:	bf00      	nop
 800dde4:	e7fe      	b.n	800dde4 <vTaskStartScheduler+0xb4>
}
 800dde6:	bf00      	nop
 800dde8:	3718      	adds	r7, #24
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	08012828 	.word	0x08012828
 800ddf4:	0800e571 	.word	0x0800e571
 800ddf8:	20009178 	.word	0x20009178
 800ddfc:	20008c80 	.word	0x20008c80
 800de00:	2000008c 	.word	0x2000008c
 800de04:	20009174 	.word	0x20009174
 800de08:	20009160 	.word	0x20009160
 800de0c:	20009158 	.word	0x20009158

0800de10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de10:	b480      	push	{r7}
 800de12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de14:	4b04      	ldr	r3, [pc, #16]	; (800de28 <vTaskSuspendAll+0x18>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	3301      	adds	r3, #1
 800de1a:	4a03      	ldr	r2, [pc, #12]	; (800de28 <vTaskSuspendAll+0x18>)
 800de1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de1e:	bf00      	nop
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr
 800de28:	2000917c 	.word	0x2000917c

0800de2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de32:	2300      	movs	r3, #0
 800de34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de36:	2300      	movs	r3, #0
 800de38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de3a:	4b42      	ldr	r3, [pc, #264]	; (800df44 <xTaskResumeAll+0x118>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10a      	bne.n	800de58 <xTaskResumeAll+0x2c>
	__asm volatile
 800de42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de46:	f383 8811 	msr	BASEPRI, r3
 800de4a:	f3bf 8f6f 	isb	sy
 800de4e:	f3bf 8f4f 	dsb	sy
 800de52:	603b      	str	r3, [r7, #0]
}
 800de54:	bf00      	nop
 800de56:	e7fe      	b.n	800de56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de58:	f001 fb04 	bl	800f464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de5c:	4b39      	ldr	r3, [pc, #228]	; (800df44 <xTaskResumeAll+0x118>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	3b01      	subs	r3, #1
 800de62:	4a38      	ldr	r2, [pc, #224]	; (800df44 <xTaskResumeAll+0x118>)
 800de64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de66:	4b37      	ldr	r3, [pc, #220]	; (800df44 <xTaskResumeAll+0x118>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d162      	bne.n	800df34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de6e:	4b36      	ldr	r3, [pc, #216]	; (800df48 <xTaskResumeAll+0x11c>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d05e      	beq.n	800df34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de76:	e02f      	b.n	800ded8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de78:	4b34      	ldr	r3, [pc, #208]	; (800df4c <xTaskResumeAll+0x120>)
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	3318      	adds	r3, #24
 800de84:	4618      	mov	r0, r3
 800de86:	f7fe fbfb 	bl	800c680 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	3304      	adds	r3, #4
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe fbf6 	bl	800c680 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de98:	4b2d      	ldr	r3, [pc, #180]	; (800df50 <xTaskResumeAll+0x124>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d903      	bls.n	800dea8 <xTaskResumeAll+0x7c>
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea4:	4a2a      	ldr	r2, [pc, #168]	; (800df50 <xTaskResumeAll+0x124>)
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deac:	4613      	mov	r3, r2
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	4413      	add	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	4a27      	ldr	r2, [pc, #156]	; (800df54 <xTaskResumeAll+0x128>)
 800deb6:	441a      	add	r2, r3
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	3304      	adds	r3, #4
 800debc:	4619      	mov	r1, r3
 800debe:	4610      	mov	r0, r2
 800dec0:	f7fe fb81 	bl	800c5c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec8:	4b23      	ldr	r3, [pc, #140]	; (800df58 <xTaskResumeAll+0x12c>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dece:	429a      	cmp	r2, r3
 800ded0:	d302      	bcc.n	800ded8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ded2:	4b22      	ldr	r3, [pc, #136]	; (800df5c <xTaskResumeAll+0x130>)
 800ded4:	2201      	movs	r2, #1
 800ded6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ded8:	4b1c      	ldr	r3, [pc, #112]	; (800df4c <xTaskResumeAll+0x120>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1cb      	bne.n	800de78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d001      	beq.n	800deea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dee6:	f000 fbfd 	bl	800e6e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800deea:	4b1d      	ldr	r3, [pc, #116]	; (800df60 <xTaskResumeAll+0x134>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d010      	beq.n	800df18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800def6:	f000 f847 	bl	800df88 <xTaskIncrementTick>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d002      	beq.n	800df06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800df00:	4b16      	ldr	r3, [pc, #88]	; (800df5c <xTaskResumeAll+0x130>)
 800df02:	2201      	movs	r2, #1
 800df04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	3b01      	subs	r3, #1
 800df0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1f1      	bne.n	800def6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800df12:	4b13      	ldr	r3, [pc, #76]	; (800df60 <xTaskResumeAll+0x134>)
 800df14:	2200      	movs	r2, #0
 800df16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df18:	4b10      	ldr	r3, [pc, #64]	; (800df5c <xTaskResumeAll+0x130>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d009      	beq.n	800df34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df20:	2301      	movs	r3, #1
 800df22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df24:	4b0f      	ldr	r3, [pc, #60]	; (800df64 <xTaskResumeAll+0x138>)
 800df26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df2a:	601a      	str	r2, [r3, #0]
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df34:	f001 fac6 	bl	800f4c4 <vPortExitCritical>

	return xAlreadyYielded;
 800df38:	68bb      	ldr	r3, [r7, #8]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	2000917c 	.word	0x2000917c
 800df48:	20009154 	.word	0x20009154
 800df4c:	20009114 	.word	0x20009114
 800df50:	2000915c 	.word	0x2000915c
 800df54:	20008c84 	.word	0x20008c84
 800df58:	20008c80 	.word	0x20008c80
 800df5c:	20009168 	.word	0x20009168
 800df60:	20009164 	.word	0x20009164
 800df64:	e000ed04 	.word	0xe000ed04

0800df68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df6e:	4b05      	ldr	r3, [pc, #20]	; (800df84 <xTaskGetTickCount+0x1c>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df74:	687b      	ldr	r3, [r7, #4]
}
 800df76:	4618      	mov	r0, r3
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	20009158 	.word	0x20009158

0800df88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b086      	sub	sp, #24
 800df8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df8e:	2300      	movs	r3, #0
 800df90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df92:	4b4f      	ldr	r3, [pc, #316]	; (800e0d0 <xTaskIncrementTick+0x148>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	f040 808f 	bne.w	800e0ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df9c:	4b4d      	ldr	r3, [pc, #308]	; (800e0d4 <xTaskIncrementTick+0x14c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dfa4:	4a4b      	ldr	r2, [pc, #300]	; (800e0d4 <xTaskIncrementTick+0x14c>)
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d120      	bne.n	800dff2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dfb0:	4b49      	ldr	r3, [pc, #292]	; (800e0d8 <xTaskIncrementTick+0x150>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00a      	beq.n	800dfd0 <xTaskIncrementTick+0x48>
	__asm volatile
 800dfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbe:	f383 8811 	msr	BASEPRI, r3
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	f3bf 8f4f 	dsb	sy
 800dfca:	603b      	str	r3, [r7, #0]
}
 800dfcc:	bf00      	nop
 800dfce:	e7fe      	b.n	800dfce <xTaskIncrementTick+0x46>
 800dfd0:	4b41      	ldr	r3, [pc, #260]	; (800e0d8 <xTaskIncrementTick+0x150>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	60fb      	str	r3, [r7, #12]
 800dfd6:	4b41      	ldr	r3, [pc, #260]	; (800e0dc <xTaskIncrementTick+0x154>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a3f      	ldr	r2, [pc, #252]	; (800e0d8 <xTaskIncrementTick+0x150>)
 800dfdc:	6013      	str	r3, [r2, #0]
 800dfde:	4a3f      	ldr	r2, [pc, #252]	; (800e0dc <xTaskIncrementTick+0x154>)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6013      	str	r3, [r2, #0]
 800dfe4:	4b3e      	ldr	r3, [pc, #248]	; (800e0e0 <xTaskIncrementTick+0x158>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	4a3d      	ldr	r2, [pc, #244]	; (800e0e0 <xTaskIncrementTick+0x158>)
 800dfec:	6013      	str	r3, [r2, #0]
 800dfee:	f000 fb79 	bl	800e6e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dff2:	4b3c      	ldr	r3, [pc, #240]	; (800e0e4 <xTaskIncrementTick+0x15c>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	693a      	ldr	r2, [r7, #16]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d349      	bcc.n	800e090 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dffc:	4b36      	ldr	r3, [pc, #216]	; (800e0d8 <xTaskIncrementTick+0x150>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d104      	bne.n	800e010 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e006:	4b37      	ldr	r3, [pc, #220]	; (800e0e4 <xTaskIncrementTick+0x15c>)
 800e008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e00c:	601a      	str	r2, [r3, #0]
					break;
 800e00e:	e03f      	b.n	800e090 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e010:	4b31      	ldr	r3, [pc, #196]	; (800e0d8 <xTaskIncrementTick+0x150>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e020:	693a      	ldr	r2, [r7, #16]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	429a      	cmp	r2, r3
 800e026:	d203      	bcs.n	800e030 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e028:	4a2e      	ldr	r2, [pc, #184]	; (800e0e4 <xTaskIncrementTick+0x15c>)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e02e:	e02f      	b.n	800e090 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	3304      	adds	r3, #4
 800e034:	4618      	mov	r0, r3
 800e036:	f7fe fb23 	bl	800c680 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d004      	beq.n	800e04c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	3318      	adds	r3, #24
 800e046:	4618      	mov	r0, r3
 800e048:	f7fe fb1a 	bl	800c680 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e050:	4b25      	ldr	r3, [pc, #148]	; (800e0e8 <xTaskIncrementTick+0x160>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	429a      	cmp	r2, r3
 800e056:	d903      	bls.n	800e060 <xTaskIncrementTick+0xd8>
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05c:	4a22      	ldr	r2, [pc, #136]	; (800e0e8 <xTaskIncrementTick+0x160>)
 800e05e:	6013      	str	r3, [r2, #0]
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e064:	4613      	mov	r3, r2
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	4a1f      	ldr	r2, [pc, #124]	; (800e0ec <xTaskIncrementTick+0x164>)
 800e06e:	441a      	add	r2, r3
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	3304      	adds	r3, #4
 800e074:	4619      	mov	r1, r3
 800e076:	4610      	mov	r0, r2
 800e078:	f7fe faa5 	bl	800c5c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e080:	4b1b      	ldr	r3, [pc, #108]	; (800e0f0 <xTaskIncrementTick+0x168>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e086:	429a      	cmp	r2, r3
 800e088:	d3b8      	bcc.n	800dffc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e08a:	2301      	movs	r3, #1
 800e08c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e08e:	e7b5      	b.n	800dffc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e090:	4b17      	ldr	r3, [pc, #92]	; (800e0f0 <xTaskIncrementTick+0x168>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e096:	4915      	ldr	r1, [pc, #84]	; (800e0ec <xTaskIncrementTick+0x164>)
 800e098:	4613      	mov	r3, r2
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	4413      	add	r3, r2
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	440b      	add	r3, r1
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d901      	bls.n	800e0ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e0ac:	4b11      	ldr	r3, [pc, #68]	; (800e0f4 <xTaskIncrementTick+0x16c>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d007      	beq.n	800e0c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	617b      	str	r3, [r7, #20]
 800e0b8:	e004      	b.n	800e0c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e0ba:	4b0f      	ldr	r3, [pc, #60]	; (800e0f8 <xTaskIncrementTick+0x170>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	4a0d      	ldr	r2, [pc, #52]	; (800e0f8 <xTaskIncrementTick+0x170>)
 800e0c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e0c4:	697b      	ldr	r3, [r7, #20]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3718      	adds	r7, #24
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	2000917c 	.word	0x2000917c
 800e0d4:	20009158 	.word	0x20009158
 800e0d8:	2000910c 	.word	0x2000910c
 800e0dc:	20009110 	.word	0x20009110
 800e0e0:	2000916c 	.word	0x2000916c
 800e0e4:	20009174 	.word	0x20009174
 800e0e8:	2000915c 	.word	0x2000915c
 800e0ec:	20008c84 	.word	0x20008c84
 800e0f0:	20008c80 	.word	0x20008c80
 800e0f4:	20009168 	.word	0x20009168
 800e0f8:	20009164 	.word	0x20009164

0800e0fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e102:	4b2a      	ldr	r3, [pc, #168]	; (800e1ac <vTaskSwitchContext+0xb0>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d003      	beq.n	800e112 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e10a:	4b29      	ldr	r3, [pc, #164]	; (800e1b0 <vTaskSwitchContext+0xb4>)
 800e10c:	2201      	movs	r2, #1
 800e10e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e110:	e046      	b.n	800e1a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e112:	4b27      	ldr	r3, [pc, #156]	; (800e1b0 <vTaskSwitchContext+0xb4>)
 800e114:	2200      	movs	r2, #0
 800e116:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e118:	4b26      	ldr	r3, [pc, #152]	; (800e1b4 <vTaskSwitchContext+0xb8>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	60fb      	str	r3, [r7, #12]
 800e11e:	e010      	b.n	800e142 <vTaskSwitchContext+0x46>
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10a      	bne.n	800e13c <vTaskSwitchContext+0x40>
	__asm volatile
 800e126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12a:	f383 8811 	msr	BASEPRI, r3
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	f3bf 8f4f 	dsb	sy
 800e136:	607b      	str	r3, [r7, #4]
}
 800e138:	bf00      	nop
 800e13a:	e7fe      	b.n	800e13a <vTaskSwitchContext+0x3e>
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	3b01      	subs	r3, #1
 800e140:	60fb      	str	r3, [r7, #12]
 800e142:	491d      	ldr	r1, [pc, #116]	; (800e1b8 <vTaskSwitchContext+0xbc>)
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	4613      	mov	r3, r2
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	4413      	add	r3, r2
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	440b      	add	r3, r1
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d0e4      	beq.n	800e120 <vTaskSwitchContext+0x24>
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	4613      	mov	r3, r2
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	4413      	add	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4a15      	ldr	r2, [pc, #84]	; (800e1b8 <vTaskSwitchContext+0xbc>)
 800e162:	4413      	add	r3, r2
 800e164:	60bb      	str	r3, [r7, #8]
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	685a      	ldr	r2, [r3, #4]
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	605a      	str	r2, [r3, #4]
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	685a      	ldr	r2, [r3, #4]
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	3308      	adds	r3, #8
 800e178:	429a      	cmp	r2, r3
 800e17a:	d104      	bne.n	800e186 <vTaskSwitchContext+0x8a>
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	685a      	ldr	r2, [r3, #4]
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	605a      	str	r2, [r3, #4]
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	4a0b      	ldr	r2, [pc, #44]	; (800e1bc <vTaskSwitchContext+0xc0>)
 800e18e:	6013      	str	r3, [r2, #0]
 800e190:	4a08      	ldr	r2, [pc, #32]	; (800e1b4 <vTaskSwitchContext+0xb8>)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e196:	4b09      	ldr	r3, [pc, #36]	; (800e1bc <vTaskSwitchContext+0xc0>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	3354      	adds	r3, #84	; 0x54
 800e19c:	4a08      	ldr	r2, [pc, #32]	; (800e1c0 <vTaskSwitchContext+0xc4>)
 800e19e:	6013      	str	r3, [r2, #0]
}
 800e1a0:	bf00      	nop
 800e1a2:	3714      	adds	r7, #20
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr
 800e1ac:	2000917c 	.word	0x2000917c
 800e1b0:	20009168 	.word	0x20009168
 800e1b4:	2000915c 	.word	0x2000915c
 800e1b8:	20008c84 	.word	0x20008c84
 800e1bc:	20008c80 	.word	0x20008c80
 800e1c0:	2000008c 	.word	0x2000008c

0800e1c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d10a      	bne.n	800e1ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d8:	f383 8811 	msr	BASEPRI, r3
 800e1dc:	f3bf 8f6f 	isb	sy
 800e1e0:	f3bf 8f4f 	dsb	sy
 800e1e4:	60fb      	str	r3, [r7, #12]
}
 800e1e6:	bf00      	nop
 800e1e8:	e7fe      	b.n	800e1e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e1ea:	4b07      	ldr	r3, [pc, #28]	; (800e208 <vTaskPlaceOnEventList+0x44>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	3318      	adds	r3, #24
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f7fe fa0b 	bl	800c60e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e1f8:	2101      	movs	r1, #1
 800e1fa:	6838      	ldr	r0, [r7, #0]
 800e1fc:	f000 fc44 	bl	800ea88 <prvAddCurrentTaskToDelayedList>
}
 800e200:	bf00      	nop
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	20008c80 	.word	0x20008c80

0800e20c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b086      	sub	sp, #24
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	60b9      	str	r1, [r7, #8]
 800e216:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d10a      	bne.n	800e234 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800e21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e222:	f383 8811 	msr	BASEPRI, r3
 800e226:	f3bf 8f6f 	isb	sy
 800e22a:	f3bf 8f4f 	dsb	sy
 800e22e:	617b      	str	r3, [r7, #20]
}
 800e230:	bf00      	nop
 800e232:	e7fe      	b.n	800e232 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e234:	4b11      	ldr	r3, [pc, #68]	; (800e27c <vTaskPlaceOnUnorderedEventList+0x70>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d10a      	bne.n	800e252 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800e23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e240:	f383 8811 	msr	BASEPRI, r3
 800e244:	f3bf 8f6f 	isb	sy
 800e248:	f3bf 8f4f 	dsb	sy
 800e24c:	613b      	str	r3, [r7, #16]
}
 800e24e:	bf00      	nop
 800e250:	e7fe      	b.n	800e250 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e252:	4b0b      	ldr	r3, [pc, #44]	; (800e280 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	68ba      	ldr	r2, [r7, #8]
 800e258:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800e25c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e25e:	4b08      	ldr	r3, [pc, #32]	; (800e280 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	3318      	adds	r3, #24
 800e264:	4619      	mov	r1, r3
 800e266:	68f8      	ldr	r0, [r7, #12]
 800e268:	f7fe f9ad 	bl	800c5c6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e26c:	2101      	movs	r1, #1
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fc0a 	bl	800ea88 <prvAddCurrentTaskToDelayedList>
}
 800e274:	bf00      	nop
 800e276:	3718      	adds	r7, #24
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	2000917c 	.word	0x2000917c
 800e280:	20008c80 	.word	0x20008c80

0800e284 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e284:	b580      	push	{r7, lr}
 800e286:	b086      	sub	sp, #24
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d10a      	bne.n	800e2ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29a:	f383 8811 	msr	BASEPRI, r3
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	617b      	str	r3, [r7, #20]
}
 800e2a8:	bf00      	nop
 800e2aa:	e7fe      	b.n	800e2aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2ac:	4b0a      	ldr	r3, [pc, #40]	; (800e2d8 <vTaskPlaceOnEventListRestricted+0x54>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	3318      	adds	r3, #24
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	68f8      	ldr	r0, [r7, #12]
 800e2b6:	f7fe f986 	bl	800c5c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d002      	beq.n	800e2c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e2c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e2c6:	6879      	ldr	r1, [r7, #4]
 800e2c8:	68b8      	ldr	r0, [r7, #8]
 800e2ca:	f000 fbdd 	bl	800ea88 <prvAddCurrentTaskToDelayedList>
	}
 800e2ce:	bf00      	nop
 800e2d0:	3718      	adds	r7, #24
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	20008c80 	.word	0x20008c80

0800e2dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b086      	sub	sp, #24
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d10a      	bne.n	800e308 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f6:	f383 8811 	msr	BASEPRI, r3
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	60fb      	str	r3, [r7, #12]
}
 800e304:	bf00      	nop
 800e306:	e7fe      	b.n	800e306 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	3318      	adds	r3, #24
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7fe f9b7 	bl	800c680 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e312:	4b1e      	ldr	r3, [pc, #120]	; (800e38c <xTaskRemoveFromEventList+0xb0>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d11d      	bne.n	800e356 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	3304      	adds	r3, #4
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fe f9ae 	bl	800c680 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e328:	4b19      	ldr	r3, [pc, #100]	; (800e390 <xTaskRemoveFromEventList+0xb4>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d903      	bls.n	800e338 <xTaskRemoveFromEventList+0x5c>
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e334:	4a16      	ldr	r2, [pc, #88]	; (800e390 <xTaskRemoveFromEventList+0xb4>)
 800e336:	6013      	str	r3, [r2, #0]
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e33c:	4613      	mov	r3, r2
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	4413      	add	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4a13      	ldr	r2, [pc, #76]	; (800e394 <xTaskRemoveFromEventList+0xb8>)
 800e346:	441a      	add	r2, r3
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	3304      	adds	r3, #4
 800e34c:	4619      	mov	r1, r3
 800e34e:	4610      	mov	r0, r2
 800e350:	f7fe f939 	bl	800c5c6 <vListInsertEnd>
 800e354:	e005      	b.n	800e362 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	3318      	adds	r3, #24
 800e35a:	4619      	mov	r1, r3
 800e35c:	480e      	ldr	r0, [pc, #56]	; (800e398 <xTaskRemoveFromEventList+0xbc>)
 800e35e:	f7fe f932 	bl	800c5c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e366:	4b0d      	ldr	r3, [pc, #52]	; (800e39c <xTaskRemoveFromEventList+0xc0>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d905      	bls.n	800e37c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e370:	2301      	movs	r3, #1
 800e372:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e374:	4b0a      	ldr	r3, [pc, #40]	; (800e3a0 <xTaskRemoveFromEventList+0xc4>)
 800e376:	2201      	movs	r2, #1
 800e378:	601a      	str	r2, [r3, #0]
 800e37a:	e001      	b.n	800e380 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e37c:	2300      	movs	r3, #0
 800e37e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e380:	697b      	ldr	r3, [r7, #20]
}
 800e382:	4618      	mov	r0, r3
 800e384:	3718      	adds	r7, #24
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	2000917c 	.word	0x2000917c
 800e390:	2000915c 	.word	0x2000915c
 800e394:	20008c84 	.word	0x20008c84
 800e398:	20009114 	.word	0x20009114
 800e39c:	20008c80 	.word	0x20008c80
 800e3a0:	20009168 	.word	0x20009168

0800e3a4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b086      	sub	sp, #24
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e3ae:	4b29      	ldr	r3, [pc, #164]	; (800e454 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d10a      	bne.n	800e3cc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800e3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ba:	f383 8811 	msr	BASEPRI, r3
 800e3be:	f3bf 8f6f 	isb	sy
 800e3c2:	f3bf 8f4f 	dsb	sy
 800e3c6:	613b      	str	r3, [r7, #16]
}
 800e3c8:	bf00      	nop
 800e3ca:	e7fe      	b.n	800e3ca <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d10a      	bne.n	800e3f8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800e3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e6:	f383 8811 	msr	BASEPRI, r3
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	60fb      	str	r3, [r7, #12]
}
 800e3f4:	bf00      	nop
 800e3f6:	e7fe      	b.n	800e3f6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f7fe f941 	bl	800c680 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	3304      	adds	r3, #4
 800e402:	4618      	mov	r0, r3
 800e404:	f7fe f93c 	bl	800c680 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e40c:	4b12      	ldr	r3, [pc, #72]	; (800e458 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	429a      	cmp	r2, r3
 800e412:	d903      	bls.n	800e41c <vTaskRemoveFromUnorderedEventList+0x78>
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e418:	4a0f      	ldr	r2, [pc, #60]	; (800e458 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e41a:	6013      	str	r3, [r2, #0]
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e420:	4613      	mov	r3, r2
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	4413      	add	r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	4a0c      	ldr	r2, [pc, #48]	; (800e45c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e42a:	441a      	add	r2, r3
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	3304      	adds	r3, #4
 800e430:	4619      	mov	r1, r3
 800e432:	4610      	mov	r0, r2
 800e434:	f7fe f8c7 	bl	800c5c6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e43c:	4b08      	ldr	r3, [pc, #32]	; (800e460 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e442:	429a      	cmp	r2, r3
 800e444:	d902      	bls.n	800e44c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e446:	4b07      	ldr	r3, [pc, #28]	; (800e464 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e448:	2201      	movs	r2, #1
 800e44a:	601a      	str	r2, [r3, #0]
	}
}
 800e44c:	bf00      	nop
 800e44e:	3718      	adds	r7, #24
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	2000917c 	.word	0x2000917c
 800e458:	2000915c 	.word	0x2000915c
 800e45c:	20008c84 	.word	0x20008c84
 800e460:	20008c80 	.word	0x20008c80
 800e464:	20009168 	.word	0x20009168

0800e468 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e470:	4b06      	ldr	r3, [pc, #24]	; (800e48c <vTaskInternalSetTimeOutState+0x24>)
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e478:	4b05      	ldr	r3, [pc, #20]	; (800e490 <vTaskInternalSetTimeOutState+0x28>)
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	605a      	str	r2, [r3, #4]
}
 800e480:	bf00      	nop
 800e482:	370c      	adds	r7, #12
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr
 800e48c:	2000916c 	.word	0x2000916c
 800e490:	20009158 	.word	0x20009158

0800e494 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b088      	sub	sp, #32
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d10a      	bne.n	800e4ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a8:	f383 8811 	msr	BASEPRI, r3
 800e4ac:	f3bf 8f6f 	isb	sy
 800e4b0:	f3bf 8f4f 	dsb	sy
 800e4b4:	613b      	str	r3, [r7, #16]
}
 800e4b6:	bf00      	nop
 800e4b8:	e7fe      	b.n	800e4b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d10a      	bne.n	800e4d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	60fb      	str	r3, [r7, #12]
}
 800e4d2:	bf00      	nop
 800e4d4:	e7fe      	b.n	800e4d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e4d6:	f000 ffc5 	bl	800f464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e4da:	4b1d      	ldr	r3, [pc, #116]	; (800e550 <xTaskCheckForTimeOut+0xbc>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	69ba      	ldr	r2, [r7, #24]
 800e4e6:	1ad3      	subs	r3, r2, r3
 800e4e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4f2:	d102      	bne.n	800e4fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	61fb      	str	r3, [r7, #28]
 800e4f8:	e023      	b.n	800e542 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	4b15      	ldr	r3, [pc, #84]	; (800e554 <xTaskCheckForTimeOut+0xc0>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	429a      	cmp	r2, r3
 800e504:	d007      	beq.n	800e516 <xTaskCheckForTimeOut+0x82>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	69ba      	ldr	r2, [r7, #24]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d302      	bcc.n	800e516 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e510:	2301      	movs	r3, #1
 800e512:	61fb      	str	r3, [r7, #28]
 800e514:	e015      	b.n	800e542 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	697a      	ldr	r2, [r7, #20]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d20b      	bcs.n	800e538 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	1ad2      	subs	r2, r2, r3
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7ff ff9b 	bl	800e468 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e532:	2300      	movs	r3, #0
 800e534:	61fb      	str	r3, [r7, #28]
 800e536:	e004      	b.n	800e542 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	2200      	movs	r2, #0
 800e53c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e53e:	2301      	movs	r3, #1
 800e540:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e542:	f000 ffbf 	bl	800f4c4 <vPortExitCritical>

	return xReturn;
 800e546:	69fb      	ldr	r3, [r7, #28]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3720      	adds	r7, #32
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	20009158 	.word	0x20009158
 800e554:	2000916c 	.word	0x2000916c

0800e558 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e558:	b480      	push	{r7}
 800e55a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e55c:	4b03      	ldr	r3, [pc, #12]	; (800e56c <vTaskMissedYield+0x14>)
 800e55e:	2201      	movs	r2, #1
 800e560:	601a      	str	r2, [r3, #0]
}
 800e562:	bf00      	nop
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr
 800e56c:	20009168 	.word	0x20009168

0800e570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e578:	f000 f852 	bl	800e620 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e57c:	4b06      	ldr	r3, [pc, #24]	; (800e598 <prvIdleTask+0x28>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2b01      	cmp	r3, #1
 800e582:	d9f9      	bls.n	800e578 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e584:	4b05      	ldr	r3, [pc, #20]	; (800e59c <prvIdleTask+0x2c>)
 800e586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e58a:	601a      	str	r2, [r3, #0]
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e594:	e7f0      	b.n	800e578 <prvIdleTask+0x8>
 800e596:	bf00      	nop
 800e598:	20008c84 	.word	0x20008c84
 800e59c:	e000ed04 	.word	0xe000ed04

0800e5a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	607b      	str	r3, [r7, #4]
 800e5aa:	e00c      	b.n	800e5c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	4a12      	ldr	r2, [pc, #72]	; (800e600 <prvInitialiseTaskLists+0x60>)
 800e5b8:	4413      	add	r3, r2
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fd ffd6 	bl	800c56c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	607b      	str	r3, [r7, #4]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2b37      	cmp	r3, #55	; 0x37
 800e5ca:	d9ef      	bls.n	800e5ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e5cc:	480d      	ldr	r0, [pc, #52]	; (800e604 <prvInitialiseTaskLists+0x64>)
 800e5ce:	f7fd ffcd 	bl	800c56c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e5d2:	480d      	ldr	r0, [pc, #52]	; (800e608 <prvInitialiseTaskLists+0x68>)
 800e5d4:	f7fd ffca 	bl	800c56c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e5d8:	480c      	ldr	r0, [pc, #48]	; (800e60c <prvInitialiseTaskLists+0x6c>)
 800e5da:	f7fd ffc7 	bl	800c56c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e5de:	480c      	ldr	r0, [pc, #48]	; (800e610 <prvInitialiseTaskLists+0x70>)
 800e5e0:	f7fd ffc4 	bl	800c56c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e5e4:	480b      	ldr	r0, [pc, #44]	; (800e614 <prvInitialiseTaskLists+0x74>)
 800e5e6:	f7fd ffc1 	bl	800c56c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e5ea:	4b0b      	ldr	r3, [pc, #44]	; (800e618 <prvInitialiseTaskLists+0x78>)
 800e5ec:	4a05      	ldr	r2, [pc, #20]	; (800e604 <prvInitialiseTaskLists+0x64>)
 800e5ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e5f0:	4b0a      	ldr	r3, [pc, #40]	; (800e61c <prvInitialiseTaskLists+0x7c>)
 800e5f2:	4a05      	ldr	r2, [pc, #20]	; (800e608 <prvInitialiseTaskLists+0x68>)
 800e5f4:	601a      	str	r2, [r3, #0]
}
 800e5f6:	bf00      	nop
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	20008c84 	.word	0x20008c84
 800e604:	200090e4 	.word	0x200090e4
 800e608:	200090f8 	.word	0x200090f8
 800e60c:	20009114 	.word	0x20009114
 800e610:	20009128 	.word	0x20009128
 800e614:	20009140 	.word	0x20009140
 800e618:	2000910c 	.word	0x2000910c
 800e61c:	20009110 	.word	0x20009110

0800e620 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e626:	e019      	b.n	800e65c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e628:	f000 ff1c 	bl	800f464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e62c:	4b10      	ldr	r3, [pc, #64]	; (800e670 <prvCheckTasksWaitingTermination+0x50>)
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	68db      	ldr	r3, [r3, #12]
 800e632:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	3304      	adds	r3, #4
 800e638:	4618      	mov	r0, r3
 800e63a:	f7fe f821 	bl	800c680 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e63e:	4b0d      	ldr	r3, [pc, #52]	; (800e674 <prvCheckTasksWaitingTermination+0x54>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3b01      	subs	r3, #1
 800e644:	4a0b      	ldr	r2, [pc, #44]	; (800e674 <prvCheckTasksWaitingTermination+0x54>)
 800e646:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e648:	4b0b      	ldr	r3, [pc, #44]	; (800e678 <prvCheckTasksWaitingTermination+0x58>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	3b01      	subs	r3, #1
 800e64e:	4a0a      	ldr	r2, [pc, #40]	; (800e678 <prvCheckTasksWaitingTermination+0x58>)
 800e650:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e652:	f000 ff37 	bl	800f4c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 f810 	bl	800e67c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e65c:	4b06      	ldr	r3, [pc, #24]	; (800e678 <prvCheckTasksWaitingTermination+0x58>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1e1      	bne.n	800e628 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e664:	bf00      	nop
 800e666:	bf00      	nop
 800e668:	3708      	adds	r7, #8
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	20009128 	.word	0x20009128
 800e674:	20009154 	.word	0x20009154
 800e678:	2000913c 	.word	0x2000913c

0800e67c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	3354      	adds	r3, #84	; 0x54
 800e688:	4618      	mov	r0, r3
 800e68a:	f001 fadb 	bl	800fc44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e694:	2b00      	cmp	r3, #0
 800e696:	d108      	bne.n	800e6aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e69c:	4618      	mov	r0, r3
 800e69e:	f001 f8cf 	bl	800f840 <vPortFree>
				vPortFree( pxTCB );
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f001 f8cc 	bl	800f840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e6a8:	e018      	b.n	800e6dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d103      	bne.n	800e6bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f001 f8c3 	bl	800f840 <vPortFree>
	}
 800e6ba:	e00f      	b.n	800e6dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e6c2:	2b02      	cmp	r3, #2
 800e6c4:	d00a      	beq.n	800e6dc <prvDeleteTCB+0x60>
	__asm volatile
 800e6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ca:	f383 8811 	msr	BASEPRI, r3
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	f3bf 8f4f 	dsb	sy
 800e6d6:	60fb      	str	r3, [r7, #12]
}
 800e6d8:	bf00      	nop
 800e6da:	e7fe      	b.n	800e6da <prvDeleteTCB+0x5e>
	}
 800e6dc:	bf00      	nop
 800e6de:	3710      	adds	r7, #16
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6ea:	4b0c      	ldr	r3, [pc, #48]	; (800e71c <prvResetNextTaskUnblockTime+0x38>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d104      	bne.n	800e6fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e6f4:	4b0a      	ldr	r3, [pc, #40]	; (800e720 <prvResetNextTaskUnblockTime+0x3c>)
 800e6f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e6fc:	e008      	b.n	800e710 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6fe:	4b07      	ldr	r3, [pc, #28]	; (800e71c <prvResetNextTaskUnblockTime+0x38>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	68db      	ldr	r3, [r3, #12]
 800e704:	68db      	ldr	r3, [r3, #12]
 800e706:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	4a04      	ldr	r2, [pc, #16]	; (800e720 <prvResetNextTaskUnblockTime+0x3c>)
 800e70e:	6013      	str	r3, [r2, #0]
}
 800e710:	bf00      	nop
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr
 800e71c:	2000910c 	.word	0x2000910c
 800e720:	20009174 	.word	0x20009174

0800e724 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e72a:	4b05      	ldr	r3, [pc, #20]	; (800e740 <xTaskGetCurrentTaskHandle+0x1c>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e730:	687b      	ldr	r3, [r7, #4]
	}
 800e732:	4618      	mov	r0, r3
 800e734:	370c      	adds	r7, #12
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop
 800e740:	20008c80 	.word	0x20008c80

0800e744 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e74a:	4b0b      	ldr	r3, [pc, #44]	; (800e778 <xTaskGetSchedulerState+0x34>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d102      	bne.n	800e758 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e752:	2301      	movs	r3, #1
 800e754:	607b      	str	r3, [r7, #4]
 800e756:	e008      	b.n	800e76a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e758:	4b08      	ldr	r3, [pc, #32]	; (800e77c <xTaskGetSchedulerState+0x38>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d102      	bne.n	800e766 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e760:	2302      	movs	r3, #2
 800e762:	607b      	str	r3, [r7, #4]
 800e764:	e001      	b.n	800e76a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e766:	2300      	movs	r3, #0
 800e768:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e76a:	687b      	ldr	r3, [r7, #4]
	}
 800e76c:	4618      	mov	r0, r3
 800e76e:	370c      	adds	r7, #12
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr
 800e778:	20009160 	.word	0x20009160
 800e77c:	2000917c 	.word	0x2000917c

0800e780 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e78c:	2300      	movs	r3, #0
 800e78e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d051      	beq.n	800e83a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e79a:	4b2a      	ldr	r3, [pc, #168]	; (800e844 <xTaskPriorityInherit+0xc4>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d241      	bcs.n	800e828 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	699b      	ldr	r3, [r3, #24]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	db06      	blt.n	800e7ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7ac:	4b25      	ldr	r3, [pc, #148]	; (800e844 <xTaskPriorityInherit+0xc4>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	6959      	ldr	r1, [r3, #20]
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7c2:	4613      	mov	r3, r2
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	4413      	add	r3, r2
 800e7c8:	009b      	lsls	r3, r3, #2
 800e7ca:	4a1f      	ldr	r2, [pc, #124]	; (800e848 <xTaskPriorityInherit+0xc8>)
 800e7cc:	4413      	add	r3, r2
 800e7ce:	4299      	cmp	r1, r3
 800e7d0:	d122      	bne.n	800e818 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	3304      	adds	r3, #4
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7fd ff52 	bl	800c680 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e7dc:	4b19      	ldr	r3, [pc, #100]	; (800e844 <xTaskPriorityInherit+0xc4>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7ea:	4b18      	ldr	r3, [pc, #96]	; (800e84c <xTaskPriorityInherit+0xcc>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d903      	bls.n	800e7fa <xTaskPriorityInherit+0x7a>
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f6:	4a15      	ldr	r2, [pc, #84]	; (800e84c <xTaskPriorityInherit+0xcc>)
 800e7f8:	6013      	str	r3, [r2, #0]
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7fe:	4613      	mov	r3, r2
 800e800:	009b      	lsls	r3, r3, #2
 800e802:	4413      	add	r3, r2
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	4a10      	ldr	r2, [pc, #64]	; (800e848 <xTaskPriorityInherit+0xc8>)
 800e808:	441a      	add	r2, r3
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	3304      	adds	r3, #4
 800e80e:	4619      	mov	r1, r3
 800e810:	4610      	mov	r0, r2
 800e812:	f7fd fed8 	bl	800c5c6 <vListInsertEnd>
 800e816:	e004      	b.n	800e822 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e818:	4b0a      	ldr	r3, [pc, #40]	; (800e844 <xTaskPriorityInherit+0xc4>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e822:	2301      	movs	r3, #1
 800e824:	60fb      	str	r3, [r7, #12]
 800e826:	e008      	b.n	800e83a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e82c:	4b05      	ldr	r3, [pc, #20]	; (800e844 <xTaskPriorityInherit+0xc4>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e832:	429a      	cmp	r2, r3
 800e834:	d201      	bcs.n	800e83a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e836:	2301      	movs	r3, #1
 800e838:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e83a:	68fb      	ldr	r3, [r7, #12]
	}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3710      	adds	r7, #16
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	20008c80 	.word	0x20008c80
 800e848:	20008c84 	.word	0x20008c84
 800e84c:	2000915c 	.word	0x2000915c

0800e850 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e850:	b580      	push	{r7, lr}
 800e852:	b086      	sub	sp, #24
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e85c:	2300      	movs	r3, #0
 800e85e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d056      	beq.n	800e914 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e866:	4b2e      	ldr	r3, [pc, #184]	; (800e920 <xTaskPriorityDisinherit+0xd0>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	693a      	ldr	r2, [r7, #16]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d00a      	beq.n	800e886 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e874:	f383 8811 	msr	BASEPRI, r3
 800e878:	f3bf 8f6f 	isb	sy
 800e87c:	f3bf 8f4f 	dsb	sy
 800e880:	60fb      	str	r3, [r7, #12]
}
 800e882:	bf00      	nop
 800e884:	e7fe      	b.n	800e884 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d10a      	bne.n	800e8a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e892:	f383 8811 	msr	BASEPRI, r3
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	f3bf 8f4f 	dsb	sy
 800e89e:	60bb      	str	r3, [r7, #8]
}
 800e8a0:	bf00      	nop
 800e8a2:	e7fe      	b.n	800e8a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8a8:	1e5a      	subs	r2, r3, #1
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d02c      	beq.n	800e914 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d128      	bne.n	800e914 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	3304      	adds	r3, #4
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7fd feda 	bl	800c680 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8e4:	4b0f      	ldr	r3, [pc, #60]	; (800e924 <xTaskPriorityDisinherit+0xd4>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d903      	bls.n	800e8f4 <xTaskPriorityDisinherit+0xa4>
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f0:	4a0c      	ldr	r2, [pc, #48]	; (800e924 <xTaskPriorityDisinherit+0xd4>)
 800e8f2:	6013      	str	r3, [r2, #0]
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	009b      	lsls	r3, r3, #2
 800e8fc:	4413      	add	r3, r2
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	4a09      	ldr	r2, [pc, #36]	; (800e928 <xTaskPriorityDisinherit+0xd8>)
 800e902:	441a      	add	r2, r3
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	3304      	adds	r3, #4
 800e908:	4619      	mov	r1, r3
 800e90a:	4610      	mov	r0, r2
 800e90c:	f7fd fe5b 	bl	800c5c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e910:	2301      	movs	r3, #1
 800e912:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e914:	697b      	ldr	r3, [r7, #20]
	}
 800e916:	4618      	mov	r0, r3
 800e918:	3718      	adds	r7, #24
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	20008c80 	.word	0x20008c80
 800e924:	2000915c 	.word	0x2000915c
 800e928:	20008c84 	.word	0x20008c84

0800e92c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b088      	sub	sp, #32
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e93a:	2301      	movs	r3, #1
 800e93c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d06a      	beq.n	800ea1a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d10a      	bne.n	800e962 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e950:	f383 8811 	msr	BASEPRI, r3
 800e954:	f3bf 8f6f 	isb	sy
 800e958:	f3bf 8f4f 	dsb	sy
 800e95c:	60fb      	str	r3, [r7, #12]
}
 800e95e:	bf00      	nop
 800e960:	e7fe      	b.n	800e960 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e962:	69bb      	ldr	r3, [r7, #24]
 800e964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e966:	683a      	ldr	r2, [r7, #0]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d902      	bls.n	800e972 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	61fb      	str	r3, [r7, #28]
 800e970:	e002      	b.n	800e978 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e976:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e978:	69bb      	ldr	r3, [r7, #24]
 800e97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e97c:	69fa      	ldr	r2, [r7, #28]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d04b      	beq.n	800ea1a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e986:	697a      	ldr	r2, [r7, #20]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d146      	bne.n	800ea1a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e98c:	4b25      	ldr	r3, [pc, #148]	; (800ea24 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	69ba      	ldr	r2, [r7, #24]
 800e992:	429a      	cmp	r2, r3
 800e994:	d10a      	bne.n	800e9ac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99a:	f383 8811 	msr	BASEPRI, r3
 800e99e:	f3bf 8f6f 	isb	sy
 800e9a2:	f3bf 8f4f 	dsb	sy
 800e9a6:	60bb      	str	r3, [r7, #8]
}
 800e9a8:	bf00      	nop
 800e9aa:	e7fe      	b.n	800e9aa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	69fa      	ldr	r2, [r7, #28]
 800e9b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	699b      	ldr	r3, [r3, #24]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	db04      	blt.n	800e9ca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9c0:	69fb      	ldr	r3, [r7, #28]
 800e9c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	6959      	ldr	r1, [r3, #20]
 800e9ce:	693a      	ldr	r2, [r7, #16]
 800e9d0:	4613      	mov	r3, r2
 800e9d2:	009b      	lsls	r3, r3, #2
 800e9d4:	4413      	add	r3, r2
 800e9d6:	009b      	lsls	r3, r3, #2
 800e9d8:	4a13      	ldr	r2, [pc, #76]	; (800ea28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e9da:	4413      	add	r3, r2
 800e9dc:	4299      	cmp	r1, r3
 800e9de:	d11c      	bne.n	800ea1a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	3304      	adds	r3, #4
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7fd fe4b 	bl	800c680 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9ee:	4b0f      	ldr	r3, [pc, #60]	; (800ea2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d903      	bls.n	800e9fe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9fa:	4a0c      	ldr	r2, [pc, #48]	; (800ea2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e9fc:	6013      	str	r3, [r2, #0]
 800e9fe:	69bb      	ldr	r3, [r7, #24]
 800ea00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea02:	4613      	mov	r3, r2
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	4413      	add	r3, r2
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	4a07      	ldr	r2, [pc, #28]	; (800ea28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ea0c:	441a      	add	r2, r3
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	3304      	adds	r3, #4
 800ea12:	4619      	mov	r1, r3
 800ea14:	4610      	mov	r0, r2
 800ea16:	f7fd fdd6 	bl	800c5c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ea1a:	bf00      	nop
 800ea1c:	3720      	adds	r7, #32
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	20008c80 	.word	0x20008c80
 800ea28:	20008c84 	.word	0x20008c84
 800ea2c:	2000915c 	.word	0x2000915c

0800ea30 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ea36:	4b09      	ldr	r3, [pc, #36]	; (800ea5c <uxTaskResetEventItemValue+0x2c>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	699b      	ldr	r3, [r3, #24]
 800ea3c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea3e:	4b07      	ldr	r3, [pc, #28]	; (800ea5c <uxTaskResetEventItemValue+0x2c>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea44:	4b05      	ldr	r3, [pc, #20]	; (800ea5c <uxTaskResetEventItemValue+0x2c>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ea4c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ea4e:	687b      	ldr	r3, [r7, #4]
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	370c      	adds	r7, #12
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr
 800ea5c:	20008c80 	.word	0x20008c80

0800ea60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ea60:	b480      	push	{r7}
 800ea62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ea64:	4b07      	ldr	r3, [pc, #28]	; (800ea84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d004      	beq.n	800ea76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ea6c:	4b05      	ldr	r3, [pc, #20]	; (800ea84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea72:	3201      	adds	r2, #1
 800ea74:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ea76:	4b03      	ldr	r3, [pc, #12]	; (800ea84 <pvTaskIncrementMutexHeldCount+0x24>)
 800ea78:	681b      	ldr	r3, [r3, #0]
	}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr
 800ea84:	20008c80 	.word	0x20008c80

0800ea88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ea92:	4b21      	ldr	r3, [pc, #132]	; (800eb18 <prvAddCurrentTaskToDelayedList+0x90>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea98:	4b20      	ldr	r3, [pc, #128]	; (800eb1c <prvAddCurrentTaskToDelayedList+0x94>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	3304      	adds	r3, #4
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7fd fdee 	bl	800c680 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaaa:	d10a      	bne.n	800eac2 <prvAddCurrentTaskToDelayedList+0x3a>
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d007      	beq.n	800eac2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eab2:	4b1a      	ldr	r3, [pc, #104]	; (800eb1c <prvAddCurrentTaskToDelayedList+0x94>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	3304      	adds	r3, #4
 800eab8:	4619      	mov	r1, r3
 800eaba:	4819      	ldr	r0, [pc, #100]	; (800eb20 <prvAddCurrentTaskToDelayedList+0x98>)
 800eabc:	f7fd fd83 	bl	800c5c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eac0:	e026      	b.n	800eb10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	4413      	add	r3, r2
 800eac8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eaca:	4b14      	ldr	r3, [pc, #80]	; (800eb1c <prvAddCurrentTaskToDelayedList+0x94>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	68ba      	ldr	r2, [r7, #8]
 800ead0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ead2:	68ba      	ldr	r2, [r7, #8]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d209      	bcs.n	800eaee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eada:	4b12      	ldr	r3, [pc, #72]	; (800eb24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	4b0f      	ldr	r3, [pc, #60]	; (800eb1c <prvAddCurrentTaskToDelayedList+0x94>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	3304      	adds	r3, #4
 800eae4:	4619      	mov	r1, r3
 800eae6:	4610      	mov	r0, r2
 800eae8:	f7fd fd91 	bl	800c60e <vListInsert>
}
 800eaec:	e010      	b.n	800eb10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eaee:	4b0e      	ldr	r3, [pc, #56]	; (800eb28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	4b0a      	ldr	r3, [pc, #40]	; (800eb1c <prvAddCurrentTaskToDelayedList+0x94>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	3304      	adds	r3, #4
 800eaf8:	4619      	mov	r1, r3
 800eafa:	4610      	mov	r0, r2
 800eafc:	f7fd fd87 	bl	800c60e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eb00:	4b0a      	ldr	r3, [pc, #40]	; (800eb2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	68ba      	ldr	r2, [r7, #8]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d202      	bcs.n	800eb10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800eb0a:	4a08      	ldr	r2, [pc, #32]	; (800eb2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	6013      	str	r3, [r2, #0]
}
 800eb10:	bf00      	nop
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	20009158 	.word	0x20009158
 800eb1c:	20008c80 	.word	0x20008c80
 800eb20:	20009140 	.word	0x20009140
 800eb24:	20009110 	.word	0x20009110
 800eb28:	2000910c 	.word	0x2000910c
 800eb2c:	20009174 	.word	0x20009174

0800eb30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b08a      	sub	sp, #40	; 0x28
 800eb34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eb36:	2300      	movs	r3, #0
 800eb38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eb3a:	f000 fb07 	bl	800f14c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eb3e:	4b1c      	ldr	r3, [pc, #112]	; (800ebb0 <xTimerCreateTimerTask+0x80>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d021      	beq.n	800eb8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eb46:	2300      	movs	r3, #0
 800eb48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eb4e:	1d3a      	adds	r2, r7, #4
 800eb50:	f107 0108 	add.w	r1, r7, #8
 800eb54:	f107 030c 	add.w	r3, r7, #12
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7fd faff 	bl	800c15c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eb5e:	6879      	ldr	r1, [r7, #4]
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	68fa      	ldr	r2, [r7, #12]
 800eb64:	9202      	str	r2, [sp, #8]
 800eb66:	9301      	str	r3, [sp, #4]
 800eb68:	2302      	movs	r3, #2
 800eb6a:	9300      	str	r3, [sp, #0]
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	460a      	mov	r2, r1
 800eb70:	4910      	ldr	r1, [pc, #64]	; (800ebb4 <xTimerCreateTimerTask+0x84>)
 800eb72:	4811      	ldr	r0, [pc, #68]	; (800ebb8 <xTimerCreateTimerTask+0x88>)
 800eb74:	f7fe fe72 	bl	800d85c <xTaskCreateStatic>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	4a10      	ldr	r2, [pc, #64]	; (800ebbc <xTimerCreateTimerTask+0x8c>)
 800eb7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eb7e:	4b0f      	ldr	r3, [pc, #60]	; (800ebbc <xTimerCreateTimerTask+0x8c>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d001      	beq.n	800eb8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eb86:	2301      	movs	r3, #1
 800eb88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d10a      	bne.n	800eba6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800eb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb94:	f383 8811 	msr	BASEPRI, r3
 800eb98:	f3bf 8f6f 	isb	sy
 800eb9c:	f3bf 8f4f 	dsb	sy
 800eba0:	613b      	str	r3, [r7, #16]
}
 800eba2:	bf00      	nop
 800eba4:	e7fe      	b.n	800eba4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eba6:	697b      	ldr	r3, [r7, #20]
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3718      	adds	r7, #24
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	200091b0 	.word	0x200091b0
 800ebb4:	08012830 	.word	0x08012830
 800ebb8:	0800ecf5 	.word	0x0800ecf5
 800ebbc:	200091b4 	.word	0x200091b4

0800ebc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b08a      	sub	sp, #40	; 0x28
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	60b9      	str	r1, [r7, #8]
 800ebca:	607a      	str	r2, [r7, #4]
 800ebcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d10a      	bne.n	800ebee <xTimerGenericCommand+0x2e>
	__asm volatile
 800ebd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebdc:	f383 8811 	msr	BASEPRI, r3
 800ebe0:	f3bf 8f6f 	isb	sy
 800ebe4:	f3bf 8f4f 	dsb	sy
 800ebe8:	623b      	str	r3, [r7, #32]
}
 800ebea:	bf00      	nop
 800ebec:	e7fe      	b.n	800ebec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ebee:	4b1a      	ldr	r3, [pc, #104]	; (800ec58 <xTimerGenericCommand+0x98>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d02a      	beq.n	800ec4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	2b05      	cmp	r3, #5
 800ec06:	dc18      	bgt.n	800ec3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ec08:	f7ff fd9c 	bl	800e744 <xTaskGetSchedulerState>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b02      	cmp	r3, #2
 800ec10:	d109      	bne.n	800ec26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ec12:	4b11      	ldr	r3, [pc, #68]	; (800ec58 <xTimerGenericCommand+0x98>)
 800ec14:	6818      	ldr	r0, [r3, #0]
 800ec16:	f107 0110 	add.w	r1, r7, #16
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec1e:	f7fd ffb7 	bl	800cb90 <xQueueGenericSend>
 800ec22:	6278      	str	r0, [r7, #36]	; 0x24
 800ec24:	e012      	b.n	800ec4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ec26:	4b0c      	ldr	r3, [pc, #48]	; (800ec58 <xTimerGenericCommand+0x98>)
 800ec28:	6818      	ldr	r0, [r3, #0]
 800ec2a:	f107 0110 	add.w	r1, r7, #16
 800ec2e:	2300      	movs	r3, #0
 800ec30:	2200      	movs	r2, #0
 800ec32:	f7fd ffad 	bl	800cb90 <xQueueGenericSend>
 800ec36:	6278      	str	r0, [r7, #36]	; 0x24
 800ec38:	e008      	b.n	800ec4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ec3a:	4b07      	ldr	r3, [pc, #28]	; (800ec58 <xTimerGenericCommand+0x98>)
 800ec3c:	6818      	ldr	r0, [r3, #0]
 800ec3e:	f107 0110 	add.w	r1, r7, #16
 800ec42:	2300      	movs	r3, #0
 800ec44:	683a      	ldr	r2, [r7, #0]
 800ec46:	f7fe f8a1 	bl	800cd8c <xQueueGenericSendFromISR>
 800ec4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ec4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3728      	adds	r7, #40	; 0x28
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	200091b0 	.word	0x200091b0

0800ec5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b088      	sub	sp, #32
 800ec60:	af02      	add	r7, sp, #8
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec66:	4b22      	ldr	r3, [pc, #136]	; (800ecf0 <prvProcessExpiredTimer+0x94>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	3304      	adds	r3, #4
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fd fd03 	bl	800c680 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec80:	f003 0304 	and.w	r3, r3, #4
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d022      	beq.n	800ecce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	699a      	ldr	r2, [r3, #24]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	18d1      	adds	r1, r2, r3
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	683a      	ldr	r2, [r7, #0]
 800ec94:	6978      	ldr	r0, [r7, #20]
 800ec96:	f000 f8d1 	bl	800ee3c <prvInsertTimerInActiveList>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d01f      	beq.n	800ece0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eca0:	2300      	movs	r3, #0
 800eca2:	9300      	str	r3, [sp, #0]
 800eca4:	2300      	movs	r3, #0
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	2100      	movs	r1, #0
 800ecaa:	6978      	ldr	r0, [r7, #20]
 800ecac:	f7ff ff88 	bl	800ebc0 <xTimerGenericCommand>
 800ecb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d113      	bne.n	800ece0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ecb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecbc:	f383 8811 	msr	BASEPRI, r3
 800ecc0:	f3bf 8f6f 	isb	sy
 800ecc4:	f3bf 8f4f 	dsb	sy
 800ecc8:	60fb      	str	r3, [r7, #12]
}
 800ecca:	bf00      	nop
 800eccc:	e7fe      	b.n	800eccc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecd4:	f023 0301 	bic.w	r3, r3, #1
 800ecd8:	b2da      	uxtb	r2, r3
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	6a1b      	ldr	r3, [r3, #32]
 800ece4:	6978      	ldr	r0, [r7, #20]
 800ece6:	4798      	blx	r3
}
 800ece8:	bf00      	nop
 800ecea:	3718      	adds	r7, #24
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	200091a8 	.word	0x200091a8

0800ecf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ecfc:	f107 0308 	add.w	r3, r7, #8
 800ed00:	4618      	mov	r0, r3
 800ed02:	f000 f857 	bl	800edb4 <prvGetNextExpireTime>
 800ed06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f000 f803 	bl	800ed18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ed12:	f000 f8d5 	bl	800eec0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ed16:	e7f1      	b.n	800ecfc <prvTimerTask+0x8>

0800ed18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ed22:	f7ff f875 	bl	800de10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ed26:	f107 0308 	add.w	r3, r7, #8
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f000 f866 	bl	800edfc <prvSampleTimeNow>
 800ed30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d130      	bne.n	800ed9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d10a      	bne.n	800ed54 <prvProcessTimerOrBlockTask+0x3c>
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d806      	bhi.n	800ed54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ed46:	f7ff f871 	bl	800de2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ed4a:	68f9      	ldr	r1, [r7, #12]
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f7ff ff85 	bl	800ec5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ed52:	e024      	b.n	800ed9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d008      	beq.n	800ed6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ed5a:	4b13      	ldr	r3, [pc, #76]	; (800eda8 <prvProcessTimerOrBlockTask+0x90>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d101      	bne.n	800ed68 <prvProcessTimerOrBlockTask+0x50>
 800ed64:	2301      	movs	r3, #1
 800ed66:	e000      	b.n	800ed6a <prvProcessTimerOrBlockTask+0x52>
 800ed68:	2300      	movs	r3, #0
 800ed6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ed6c:	4b0f      	ldr	r3, [pc, #60]	; (800edac <prvProcessTimerOrBlockTask+0x94>)
 800ed6e:	6818      	ldr	r0, [r3, #0]
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	683a      	ldr	r2, [r7, #0]
 800ed78:	4619      	mov	r1, r3
 800ed7a:	f7fe fd3b 	bl	800d7f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ed7e:	f7ff f855 	bl	800de2c <xTaskResumeAll>
 800ed82:	4603      	mov	r3, r0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d10a      	bne.n	800ed9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ed88:	4b09      	ldr	r3, [pc, #36]	; (800edb0 <prvProcessTimerOrBlockTask+0x98>)
 800ed8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed8e:	601a      	str	r2, [r3, #0]
 800ed90:	f3bf 8f4f 	dsb	sy
 800ed94:	f3bf 8f6f 	isb	sy
}
 800ed98:	e001      	b.n	800ed9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ed9a:	f7ff f847 	bl	800de2c <xTaskResumeAll>
}
 800ed9e:	bf00      	nop
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	200091ac 	.word	0x200091ac
 800edac:	200091b0 	.word	0x200091b0
 800edb0:	e000ed04 	.word	0xe000ed04

0800edb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800edb4:	b480      	push	{r7}
 800edb6:	b085      	sub	sp, #20
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800edbc:	4b0e      	ldr	r3, [pc, #56]	; (800edf8 <prvGetNextExpireTime+0x44>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d101      	bne.n	800edca <prvGetNextExpireTime+0x16>
 800edc6:	2201      	movs	r2, #1
 800edc8:	e000      	b.n	800edcc <prvGetNextExpireTime+0x18>
 800edca:	2200      	movs	r2, #0
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d105      	bne.n	800ede4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800edd8:	4b07      	ldr	r3, [pc, #28]	; (800edf8 <prvGetNextExpireTime+0x44>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	60fb      	str	r3, [r7, #12]
 800ede2:	e001      	b.n	800ede8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ede4:	2300      	movs	r3, #0
 800ede6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ede8:	68fb      	ldr	r3, [r7, #12]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3714      	adds	r7, #20
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr
 800edf6:	bf00      	nop
 800edf8:	200091a8 	.word	0x200091a8

0800edfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ee04:	f7ff f8b0 	bl	800df68 <xTaskGetTickCount>
 800ee08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ee0a:	4b0b      	ldr	r3, [pc, #44]	; (800ee38 <prvSampleTimeNow+0x3c>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	68fa      	ldr	r2, [r7, #12]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d205      	bcs.n	800ee20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ee14:	f000 f936 	bl	800f084 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	601a      	str	r2, [r3, #0]
 800ee1e:	e002      	b.n	800ee26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ee26:	4a04      	ldr	r2, [pc, #16]	; (800ee38 <prvSampleTimeNow+0x3c>)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3710      	adds	r7, #16
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	200091b8 	.word	0x200091b8

0800ee3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b086      	sub	sp, #24
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	60f8      	str	r0, [r7, #12]
 800ee44:	60b9      	str	r1, [r7, #8]
 800ee46:	607a      	str	r2, [r7, #4]
 800ee48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	68ba      	ldr	r2, [r7, #8]
 800ee52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	68fa      	ldr	r2, [r7, #12]
 800ee58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ee5a:	68ba      	ldr	r2, [r7, #8]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d812      	bhi.n	800ee88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	1ad2      	subs	r2, r2, r3
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	699b      	ldr	r3, [r3, #24]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d302      	bcc.n	800ee76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ee70:	2301      	movs	r3, #1
 800ee72:	617b      	str	r3, [r7, #20]
 800ee74:	e01b      	b.n	800eeae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ee76:	4b10      	ldr	r3, [pc, #64]	; (800eeb8 <prvInsertTimerInActiveList+0x7c>)
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	3304      	adds	r3, #4
 800ee7e:	4619      	mov	r1, r3
 800ee80:	4610      	mov	r0, r2
 800ee82:	f7fd fbc4 	bl	800c60e <vListInsert>
 800ee86:	e012      	b.n	800eeae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d206      	bcs.n	800ee9e <prvInsertTimerInActiveList+0x62>
 800ee90:	68ba      	ldr	r2, [r7, #8]
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d302      	bcc.n	800ee9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	617b      	str	r3, [r7, #20]
 800ee9c:	e007      	b.n	800eeae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee9e:	4b07      	ldr	r3, [pc, #28]	; (800eebc <prvInsertTimerInActiveList+0x80>)
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	3304      	adds	r3, #4
 800eea6:	4619      	mov	r1, r3
 800eea8:	4610      	mov	r0, r2
 800eeaa:	f7fd fbb0 	bl	800c60e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eeae:	697b      	ldr	r3, [r7, #20]
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3718      	adds	r7, #24
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	200091ac 	.word	0x200091ac
 800eebc:	200091a8 	.word	0x200091a8

0800eec0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b08e      	sub	sp, #56	; 0x38
 800eec4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eec6:	e0ca      	b.n	800f05e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	da18      	bge.n	800ef00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eece:	1d3b      	adds	r3, r7, #4
 800eed0:	3304      	adds	r3, #4
 800eed2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d10a      	bne.n	800eef0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800eeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eede:	f383 8811 	msr	BASEPRI, r3
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	61fb      	str	r3, [r7, #28]
}
 800eeec:	bf00      	nop
 800eeee:	e7fe      	b.n	800eeee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eef6:	6850      	ldr	r0, [r2, #4]
 800eef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eefa:	6892      	ldr	r2, [r2, #8]
 800eefc:	4611      	mov	r1, r2
 800eefe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	f2c0 80aa 	blt.w	800f05c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ef0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0e:	695b      	ldr	r3, [r3, #20]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d004      	beq.n	800ef1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef16:	3304      	adds	r3, #4
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fd fbb1 	bl	800c680 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ef1e:	463b      	mov	r3, r7
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7ff ff6b 	bl	800edfc <prvSampleTimeNow>
 800ef26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b09      	cmp	r3, #9
 800ef2c:	f200 8097 	bhi.w	800f05e <prvProcessReceivedCommands+0x19e>
 800ef30:	a201      	add	r2, pc, #4	; (adr r2, 800ef38 <prvProcessReceivedCommands+0x78>)
 800ef32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef36:	bf00      	nop
 800ef38:	0800ef61 	.word	0x0800ef61
 800ef3c:	0800ef61 	.word	0x0800ef61
 800ef40:	0800ef61 	.word	0x0800ef61
 800ef44:	0800efd5 	.word	0x0800efd5
 800ef48:	0800efe9 	.word	0x0800efe9
 800ef4c:	0800f033 	.word	0x0800f033
 800ef50:	0800ef61 	.word	0x0800ef61
 800ef54:	0800ef61 	.word	0x0800ef61
 800ef58:	0800efd5 	.word	0x0800efd5
 800ef5c:	0800efe9 	.word	0x0800efe9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef66:	f043 0301 	orr.w	r3, r3, #1
 800ef6a:	b2da      	uxtb	r2, r3
 800ef6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ef72:	68ba      	ldr	r2, [r7, #8]
 800ef74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef76:	699b      	ldr	r3, [r3, #24]
 800ef78:	18d1      	adds	r1, r2, r3
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef80:	f7ff ff5c 	bl	800ee3c <prvInsertTimerInActiveList>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d069      	beq.n	800f05e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8c:	6a1b      	ldr	r3, [r3, #32]
 800ef8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef98:	f003 0304 	and.w	r3, r3, #4
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d05e      	beq.n	800f05e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800efa0:	68ba      	ldr	r2, [r7, #8]
 800efa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa4:	699b      	ldr	r3, [r3, #24]
 800efa6:	441a      	add	r2, r3
 800efa8:	2300      	movs	r3, #0
 800efaa:	9300      	str	r3, [sp, #0]
 800efac:	2300      	movs	r3, #0
 800efae:	2100      	movs	r1, #0
 800efb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efb2:	f7ff fe05 	bl	800ebc0 <xTimerGenericCommand>
 800efb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800efb8:	6a3b      	ldr	r3, [r7, #32]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d14f      	bne.n	800f05e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800efbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	61bb      	str	r3, [r7, #24]
}
 800efd0:	bf00      	nop
 800efd2:	e7fe      	b.n	800efd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800efd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efda:	f023 0301 	bic.w	r3, r3, #1
 800efde:	b2da      	uxtb	r2, r3
 800efe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800efe6:	e03a      	b.n	800f05e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800efe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efee:	f043 0301 	orr.w	r3, r3, #1
 800eff2:	b2da      	uxtb	r2, r3
 800eff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800effa:	68ba      	ldr	r2, [r7, #8]
 800effc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f002:	699b      	ldr	r3, [r3, #24]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d10a      	bne.n	800f01e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00c:	f383 8811 	msr	BASEPRI, r3
 800f010:	f3bf 8f6f 	isb	sy
 800f014:	f3bf 8f4f 	dsb	sy
 800f018:	617b      	str	r3, [r7, #20]
}
 800f01a:	bf00      	nop
 800f01c:	e7fe      	b.n	800f01c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f020:	699a      	ldr	r2, [r3, #24]
 800f022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f024:	18d1      	adds	r1, r2, r3
 800f026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f02a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f02c:	f7ff ff06 	bl	800ee3c <prvInsertTimerInActiveList>
					break;
 800f030:	e015      	b.n	800f05e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f038:	f003 0302 	and.w	r3, r3, #2
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d103      	bne.n	800f048 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f042:	f000 fbfd 	bl	800f840 <vPortFree>
 800f046:	e00a      	b.n	800f05e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f04a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f04e:	f023 0301 	bic.w	r3, r3, #1
 800f052:	b2da      	uxtb	r2, r3
 800f054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f05a:	e000      	b.n	800f05e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f05c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f05e:	4b08      	ldr	r3, [pc, #32]	; (800f080 <prvProcessReceivedCommands+0x1c0>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	1d39      	adds	r1, r7, #4
 800f064:	2200      	movs	r2, #0
 800f066:	4618      	mov	r0, r3
 800f068:	f7fd ffb8 	bl	800cfdc <xQueueReceive>
 800f06c:	4603      	mov	r3, r0
 800f06e:	2b00      	cmp	r3, #0
 800f070:	f47f af2a 	bne.w	800eec8 <prvProcessReceivedCommands+0x8>
	}
}
 800f074:	bf00      	nop
 800f076:	bf00      	nop
 800f078:	3730      	adds	r7, #48	; 0x30
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	200091b0 	.word	0x200091b0

0800f084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b088      	sub	sp, #32
 800f088:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f08a:	e048      	b.n	800f11e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f08c:	4b2d      	ldr	r3, [pc, #180]	; (800f144 <prvSwitchTimerLists+0xc0>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f096:	4b2b      	ldr	r3, [pc, #172]	; (800f144 <prvSwitchTimerLists+0xc0>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fd faeb 	bl	800c680 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	6a1b      	ldr	r3, [r3, #32]
 800f0ae:	68f8      	ldr	r0, [r7, #12]
 800f0b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0b8:	f003 0304 	and.w	r3, r3, #4
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d02e      	beq.n	800f11e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	699b      	ldr	r3, [r3, #24]
 800f0c4:	693a      	ldr	r2, [r7, #16]
 800f0c6:	4413      	add	r3, r2
 800f0c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f0ca:	68ba      	ldr	r2, [r7, #8]
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d90e      	bls.n	800f0f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	68ba      	ldr	r2, [r7, #8]
 800f0d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	68fa      	ldr	r2, [r7, #12]
 800f0dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f0de:	4b19      	ldr	r3, [pc, #100]	; (800f144 <prvSwitchTimerLists+0xc0>)
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	4610      	mov	r0, r2
 800f0ea:	f7fd fa90 	bl	800c60e <vListInsert>
 800f0ee:	e016      	b.n	800f11e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	9300      	str	r3, [sp, #0]
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	693a      	ldr	r2, [r7, #16]
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	68f8      	ldr	r0, [r7, #12]
 800f0fc:	f7ff fd60 	bl	800ebc0 <xTimerGenericCommand>
 800f100:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d10a      	bne.n	800f11e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10c:	f383 8811 	msr	BASEPRI, r3
 800f110:	f3bf 8f6f 	isb	sy
 800f114:	f3bf 8f4f 	dsb	sy
 800f118:	603b      	str	r3, [r7, #0]
}
 800f11a:	bf00      	nop
 800f11c:	e7fe      	b.n	800f11c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f11e:	4b09      	ldr	r3, [pc, #36]	; (800f144 <prvSwitchTimerLists+0xc0>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d1b1      	bne.n	800f08c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f128:	4b06      	ldr	r3, [pc, #24]	; (800f144 <prvSwitchTimerLists+0xc0>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f12e:	4b06      	ldr	r3, [pc, #24]	; (800f148 <prvSwitchTimerLists+0xc4>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	4a04      	ldr	r2, [pc, #16]	; (800f144 <prvSwitchTimerLists+0xc0>)
 800f134:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f136:	4a04      	ldr	r2, [pc, #16]	; (800f148 <prvSwitchTimerLists+0xc4>)
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	6013      	str	r3, [r2, #0]
}
 800f13c:	bf00      	nop
 800f13e:	3718      	adds	r7, #24
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	200091a8 	.word	0x200091a8
 800f148:	200091ac 	.word	0x200091ac

0800f14c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f152:	f000 f987 	bl	800f464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f156:	4b15      	ldr	r3, [pc, #84]	; (800f1ac <prvCheckForValidListAndQueue+0x60>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d120      	bne.n	800f1a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f15e:	4814      	ldr	r0, [pc, #80]	; (800f1b0 <prvCheckForValidListAndQueue+0x64>)
 800f160:	f7fd fa04 	bl	800c56c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f164:	4813      	ldr	r0, [pc, #76]	; (800f1b4 <prvCheckForValidListAndQueue+0x68>)
 800f166:	f7fd fa01 	bl	800c56c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f16a:	4b13      	ldr	r3, [pc, #76]	; (800f1b8 <prvCheckForValidListAndQueue+0x6c>)
 800f16c:	4a10      	ldr	r2, [pc, #64]	; (800f1b0 <prvCheckForValidListAndQueue+0x64>)
 800f16e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f170:	4b12      	ldr	r3, [pc, #72]	; (800f1bc <prvCheckForValidListAndQueue+0x70>)
 800f172:	4a10      	ldr	r2, [pc, #64]	; (800f1b4 <prvCheckForValidListAndQueue+0x68>)
 800f174:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f176:	2300      	movs	r3, #0
 800f178:	9300      	str	r3, [sp, #0]
 800f17a:	4b11      	ldr	r3, [pc, #68]	; (800f1c0 <prvCheckForValidListAndQueue+0x74>)
 800f17c:	4a11      	ldr	r2, [pc, #68]	; (800f1c4 <prvCheckForValidListAndQueue+0x78>)
 800f17e:	2110      	movs	r1, #16
 800f180:	200a      	movs	r0, #10
 800f182:	f7fd fb0f 	bl	800c7a4 <xQueueGenericCreateStatic>
 800f186:	4603      	mov	r3, r0
 800f188:	4a08      	ldr	r2, [pc, #32]	; (800f1ac <prvCheckForValidListAndQueue+0x60>)
 800f18a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f18c:	4b07      	ldr	r3, [pc, #28]	; (800f1ac <prvCheckForValidListAndQueue+0x60>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d005      	beq.n	800f1a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f194:	4b05      	ldr	r3, [pc, #20]	; (800f1ac <prvCheckForValidListAndQueue+0x60>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	490b      	ldr	r1, [pc, #44]	; (800f1c8 <prvCheckForValidListAndQueue+0x7c>)
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fe fad6 	bl	800d74c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f1a0:	f000 f990 	bl	800f4c4 <vPortExitCritical>
}
 800f1a4:	bf00      	nop
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	200091b0 	.word	0x200091b0
 800f1b0:	20009180 	.word	0x20009180
 800f1b4:	20009194 	.word	0x20009194
 800f1b8:	200091a8 	.word	0x200091a8
 800f1bc:	200091ac 	.word	0x200091ac
 800f1c0:	2000925c 	.word	0x2000925c
 800f1c4:	200091bc 	.word	0x200091bc
 800f1c8:	08012838 	.word	0x08012838

0800f1cc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b08a      	sub	sp, #40	; 0x28
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	60f8      	str	r0, [r7, #12]
 800f1d4:	60b9      	str	r1, [r7, #8]
 800f1d6:	607a      	str	r2, [r7, #4]
 800f1d8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f1da:	f06f 0301 	mvn.w	r3, #1
 800f1de:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f1ec:	4b06      	ldr	r3, [pc, #24]	; (800f208 <xTimerPendFunctionCallFromISR+0x3c>)
 800f1ee:	6818      	ldr	r0, [r3, #0]
 800f1f0:	f107 0114 	add.w	r1, r7, #20
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	683a      	ldr	r2, [r7, #0]
 800f1f8:	f7fd fdc8 	bl	800cd8c <xQueueGenericSendFromISR>
 800f1fc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f200:	4618      	mov	r0, r3
 800f202:	3728      	adds	r7, #40	; 0x28
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	200091b0 	.word	0x200091b0

0800f20c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f20c:	b480      	push	{r7}
 800f20e:	b085      	sub	sp, #20
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	3b04      	subs	r3, #4
 800f21c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	3b04      	subs	r3, #4
 800f22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	f023 0201 	bic.w	r2, r3, #1
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	3b04      	subs	r3, #4
 800f23a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f23c:	4a0c      	ldr	r2, [pc, #48]	; (800f270 <pxPortInitialiseStack+0x64>)
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	3b14      	subs	r3, #20
 800f246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	3b04      	subs	r3, #4
 800f252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f06f 0202 	mvn.w	r2, #2
 800f25a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	3b20      	subs	r3, #32
 800f260:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f262:	68fb      	ldr	r3, [r7, #12]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3714      	adds	r7, #20
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr
 800f270:	0800f275 	.word	0x0800f275

0800f274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f274:	b480      	push	{r7}
 800f276:	b085      	sub	sp, #20
 800f278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f27a:	2300      	movs	r3, #0
 800f27c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f27e:	4b12      	ldr	r3, [pc, #72]	; (800f2c8 <prvTaskExitError+0x54>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f286:	d00a      	beq.n	800f29e <prvTaskExitError+0x2a>
	__asm volatile
 800f288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	60fb      	str	r3, [r7, #12]
}
 800f29a:	bf00      	nop
 800f29c:	e7fe      	b.n	800f29c <prvTaskExitError+0x28>
	__asm volatile
 800f29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a2:	f383 8811 	msr	BASEPRI, r3
 800f2a6:	f3bf 8f6f 	isb	sy
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	60bb      	str	r3, [r7, #8]
}
 800f2b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f2b2:	bf00      	nop
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d0fc      	beq.n	800f2b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f2ba:	bf00      	nop
 800f2bc:	bf00      	nop
 800f2be:	3714      	adds	r7, #20
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr
 800f2c8:	20000088 	.word	0x20000088
 800f2cc:	00000000 	.word	0x00000000

0800f2d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f2d0:	4b07      	ldr	r3, [pc, #28]	; (800f2f0 <pxCurrentTCBConst2>)
 800f2d2:	6819      	ldr	r1, [r3, #0]
 800f2d4:	6808      	ldr	r0, [r1, #0]
 800f2d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2da:	f380 8809 	msr	PSP, r0
 800f2de:	f3bf 8f6f 	isb	sy
 800f2e2:	f04f 0000 	mov.w	r0, #0
 800f2e6:	f380 8811 	msr	BASEPRI, r0
 800f2ea:	4770      	bx	lr
 800f2ec:	f3af 8000 	nop.w

0800f2f0 <pxCurrentTCBConst2>:
 800f2f0:	20008c80 	.word	0x20008c80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f2f4:	bf00      	nop
 800f2f6:	bf00      	nop

0800f2f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f2f8:	4808      	ldr	r0, [pc, #32]	; (800f31c <prvPortStartFirstTask+0x24>)
 800f2fa:	6800      	ldr	r0, [r0, #0]
 800f2fc:	6800      	ldr	r0, [r0, #0]
 800f2fe:	f380 8808 	msr	MSP, r0
 800f302:	f04f 0000 	mov.w	r0, #0
 800f306:	f380 8814 	msr	CONTROL, r0
 800f30a:	b662      	cpsie	i
 800f30c:	b661      	cpsie	f
 800f30e:	f3bf 8f4f 	dsb	sy
 800f312:	f3bf 8f6f 	isb	sy
 800f316:	df00      	svc	0
 800f318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f31a:	bf00      	nop
 800f31c:	e000ed08 	.word	0xe000ed08

0800f320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b086      	sub	sp, #24
 800f324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f326:	4b46      	ldr	r3, [pc, #280]	; (800f440 <xPortStartScheduler+0x120>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	4a46      	ldr	r2, [pc, #280]	; (800f444 <xPortStartScheduler+0x124>)
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d10a      	bne.n	800f346 <xPortStartScheduler+0x26>
	__asm volatile
 800f330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f334:	f383 8811 	msr	BASEPRI, r3
 800f338:	f3bf 8f6f 	isb	sy
 800f33c:	f3bf 8f4f 	dsb	sy
 800f340:	613b      	str	r3, [r7, #16]
}
 800f342:	bf00      	nop
 800f344:	e7fe      	b.n	800f344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f346:	4b3e      	ldr	r3, [pc, #248]	; (800f440 <xPortStartScheduler+0x120>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a3f      	ldr	r2, [pc, #252]	; (800f448 <xPortStartScheduler+0x128>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d10a      	bne.n	800f366 <xPortStartScheduler+0x46>
	__asm volatile
 800f350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f354:	f383 8811 	msr	BASEPRI, r3
 800f358:	f3bf 8f6f 	isb	sy
 800f35c:	f3bf 8f4f 	dsb	sy
 800f360:	60fb      	str	r3, [r7, #12]
}
 800f362:	bf00      	nop
 800f364:	e7fe      	b.n	800f364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f366:	4b39      	ldr	r3, [pc, #228]	; (800f44c <xPortStartScheduler+0x12c>)
 800f368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	22ff      	movs	r2, #255	; 0xff
 800f376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	b2db      	uxtb	r3, r3
 800f37e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f380:	78fb      	ldrb	r3, [r7, #3]
 800f382:	b2db      	uxtb	r3, r3
 800f384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f388:	b2da      	uxtb	r2, r3
 800f38a:	4b31      	ldr	r3, [pc, #196]	; (800f450 <xPortStartScheduler+0x130>)
 800f38c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f38e:	4b31      	ldr	r3, [pc, #196]	; (800f454 <xPortStartScheduler+0x134>)
 800f390:	2207      	movs	r2, #7
 800f392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f394:	e009      	b.n	800f3aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f396:	4b2f      	ldr	r3, [pc, #188]	; (800f454 <xPortStartScheduler+0x134>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	3b01      	subs	r3, #1
 800f39c:	4a2d      	ldr	r2, [pc, #180]	; (800f454 <xPortStartScheduler+0x134>)
 800f39e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f3a0:	78fb      	ldrb	r3, [r7, #3]
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	005b      	lsls	r3, r3, #1
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f3aa:	78fb      	ldrb	r3, [r7, #3]
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3b2:	2b80      	cmp	r3, #128	; 0x80
 800f3b4:	d0ef      	beq.n	800f396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f3b6:	4b27      	ldr	r3, [pc, #156]	; (800f454 <xPortStartScheduler+0x134>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f1c3 0307 	rsb	r3, r3, #7
 800f3be:	2b04      	cmp	r3, #4
 800f3c0:	d00a      	beq.n	800f3d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c6:	f383 8811 	msr	BASEPRI, r3
 800f3ca:	f3bf 8f6f 	isb	sy
 800f3ce:	f3bf 8f4f 	dsb	sy
 800f3d2:	60bb      	str	r3, [r7, #8]
}
 800f3d4:	bf00      	nop
 800f3d6:	e7fe      	b.n	800f3d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f3d8:	4b1e      	ldr	r3, [pc, #120]	; (800f454 <xPortStartScheduler+0x134>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	021b      	lsls	r3, r3, #8
 800f3de:	4a1d      	ldr	r2, [pc, #116]	; (800f454 <xPortStartScheduler+0x134>)
 800f3e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f3e2:	4b1c      	ldr	r3, [pc, #112]	; (800f454 <xPortStartScheduler+0x134>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f3ea:	4a1a      	ldr	r2, [pc, #104]	; (800f454 <xPortStartScheduler+0x134>)
 800f3ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	b2da      	uxtb	r2, r3
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f3f6:	4b18      	ldr	r3, [pc, #96]	; (800f458 <xPortStartScheduler+0x138>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	4a17      	ldr	r2, [pc, #92]	; (800f458 <xPortStartScheduler+0x138>)
 800f3fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f402:	4b15      	ldr	r3, [pc, #84]	; (800f458 <xPortStartScheduler+0x138>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4a14      	ldr	r2, [pc, #80]	; (800f458 <xPortStartScheduler+0x138>)
 800f408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f40c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f40e:	f000 f8dd 	bl	800f5cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f412:	4b12      	ldr	r3, [pc, #72]	; (800f45c <xPortStartScheduler+0x13c>)
 800f414:	2200      	movs	r2, #0
 800f416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f418:	f000 f8fc 	bl	800f614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f41c:	4b10      	ldr	r3, [pc, #64]	; (800f460 <xPortStartScheduler+0x140>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4a0f      	ldr	r2, [pc, #60]	; (800f460 <xPortStartScheduler+0x140>)
 800f422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f428:	f7ff ff66 	bl	800f2f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f42c:	f7fe fe66 	bl	800e0fc <vTaskSwitchContext>
	prvTaskExitError();
 800f430:	f7ff ff20 	bl	800f274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	3718      	adds	r7, #24
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	e000ed00 	.word	0xe000ed00
 800f444:	410fc271 	.word	0x410fc271
 800f448:	410fc270 	.word	0x410fc270
 800f44c:	e000e400 	.word	0xe000e400
 800f450:	200092ac 	.word	0x200092ac
 800f454:	200092b0 	.word	0x200092b0
 800f458:	e000ed20 	.word	0xe000ed20
 800f45c:	20000088 	.word	0x20000088
 800f460:	e000ef34 	.word	0xe000ef34

0800f464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
	__asm volatile
 800f46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46e:	f383 8811 	msr	BASEPRI, r3
 800f472:	f3bf 8f6f 	isb	sy
 800f476:	f3bf 8f4f 	dsb	sy
 800f47a:	607b      	str	r3, [r7, #4]
}
 800f47c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f47e:	4b0f      	ldr	r3, [pc, #60]	; (800f4bc <vPortEnterCritical+0x58>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	3301      	adds	r3, #1
 800f484:	4a0d      	ldr	r2, [pc, #52]	; (800f4bc <vPortEnterCritical+0x58>)
 800f486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f488:	4b0c      	ldr	r3, [pc, #48]	; (800f4bc <vPortEnterCritical+0x58>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d10f      	bne.n	800f4b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f490:	4b0b      	ldr	r3, [pc, #44]	; (800f4c0 <vPortEnterCritical+0x5c>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	b2db      	uxtb	r3, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	d00a      	beq.n	800f4b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f49e:	f383 8811 	msr	BASEPRI, r3
 800f4a2:	f3bf 8f6f 	isb	sy
 800f4a6:	f3bf 8f4f 	dsb	sy
 800f4aa:	603b      	str	r3, [r7, #0]
}
 800f4ac:	bf00      	nop
 800f4ae:	e7fe      	b.n	800f4ae <vPortEnterCritical+0x4a>
	}
}
 800f4b0:	bf00      	nop
 800f4b2:	370c      	adds	r7, #12
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ba:	4770      	bx	lr
 800f4bc:	20000088 	.word	0x20000088
 800f4c0:	e000ed04 	.word	0xe000ed04

0800f4c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b083      	sub	sp, #12
 800f4c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f4ca:	4b12      	ldr	r3, [pc, #72]	; (800f514 <vPortExitCritical+0x50>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d10a      	bne.n	800f4e8 <vPortExitCritical+0x24>
	__asm volatile
 800f4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d6:	f383 8811 	msr	BASEPRI, r3
 800f4da:	f3bf 8f6f 	isb	sy
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	607b      	str	r3, [r7, #4]
}
 800f4e4:	bf00      	nop
 800f4e6:	e7fe      	b.n	800f4e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f4e8:	4b0a      	ldr	r3, [pc, #40]	; (800f514 <vPortExitCritical+0x50>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	3b01      	subs	r3, #1
 800f4ee:	4a09      	ldr	r2, [pc, #36]	; (800f514 <vPortExitCritical+0x50>)
 800f4f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f4f2:	4b08      	ldr	r3, [pc, #32]	; (800f514 <vPortExitCritical+0x50>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d105      	bne.n	800f506 <vPortExitCritical+0x42>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	f383 8811 	msr	BASEPRI, r3
}
 800f504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f506:	bf00      	nop
 800f508:	370c      	adds	r7, #12
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr
 800f512:	bf00      	nop
 800f514:	20000088 	.word	0x20000088
	...

0800f520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f520:	f3ef 8009 	mrs	r0, PSP
 800f524:	f3bf 8f6f 	isb	sy
 800f528:	4b15      	ldr	r3, [pc, #84]	; (800f580 <pxCurrentTCBConst>)
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	f01e 0f10 	tst.w	lr, #16
 800f530:	bf08      	it	eq
 800f532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f53a:	6010      	str	r0, [r2, #0]
 800f53c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f540:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f544:	f380 8811 	msr	BASEPRI, r0
 800f548:	f3bf 8f4f 	dsb	sy
 800f54c:	f3bf 8f6f 	isb	sy
 800f550:	f7fe fdd4 	bl	800e0fc <vTaskSwitchContext>
 800f554:	f04f 0000 	mov.w	r0, #0
 800f558:	f380 8811 	msr	BASEPRI, r0
 800f55c:	bc09      	pop	{r0, r3}
 800f55e:	6819      	ldr	r1, [r3, #0]
 800f560:	6808      	ldr	r0, [r1, #0]
 800f562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f566:	f01e 0f10 	tst.w	lr, #16
 800f56a:	bf08      	it	eq
 800f56c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f570:	f380 8809 	msr	PSP, r0
 800f574:	f3bf 8f6f 	isb	sy
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop
 800f57c:	f3af 8000 	nop.w

0800f580 <pxCurrentTCBConst>:
 800f580:	20008c80 	.word	0x20008c80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f584:	bf00      	nop
 800f586:	bf00      	nop

0800f588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
	__asm volatile
 800f58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f592:	f383 8811 	msr	BASEPRI, r3
 800f596:	f3bf 8f6f 	isb	sy
 800f59a:	f3bf 8f4f 	dsb	sy
 800f59e:	607b      	str	r3, [r7, #4]
}
 800f5a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f5a2:	f7fe fcf1 	bl	800df88 <xTaskIncrementTick>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d003      	beq.n	800f5b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f5ac:	4b06      	ldr	r3, [pc, #24]	; (800f5c8 <xPortSysTickHandler+0x40>)
 800f5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5b2:	601a      	str	r2, [r3, #0]
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	f383 8811 	msr	BASEPRI, r3
}
 800f5be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f5c0:	bf00      	nop
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	e000ed04 	.word	0xe000ed04

0800f5cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f5d0:	4b0b      	ldr	r3, [pc, #44]	; (800f600 <vPortSetupTimerInterrupt+0x34>)
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f5d6:	4b0b      	ldr	r3, [pc, #44]	; (800f604 <vPortSetupTimerInterrupt+0x38>)
 800f5d8:	2200      	movs	r2, #0
 800f5da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f5dc:	4b0a      	ldr	r3, [pc, #40]	; (800f608 <vPortSetupTimerInterrupt+0x3c>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4a0a      	ldr	r2, [pc, #40]	; (800f60c <vPortSetupTimerInterrupt+0x40>)
 800f5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f5e6:	099b      	lsrs	r3, r3, #6
 800f5e8:	4a09      	ldr	r2, [pc, #36]	; (800f610 <vPortSetupTimerInterrupt+0x44>)
 800f5ea:	3b01      	subs	r3, #1
 800f5ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f5ee:	4b04      	ldr	r3, [pc, #16]	; (800f600 <vPortSetupTimerInterrupt+0x34>)
 800f5f0:	2207      	movs	r2, #7
 800f5f2:	601a      	str	r2, [r3, #0]
}
 800f5f4:	bf00      	nop
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr
 800f5fe:	bf00      	nop
 800f600:	e000e010 	.word	0xe000e010
 800f604:	e000e018 	.word	0xe000e018
 800f608:	20000078 	.word	0x20000078
 800f60c:	10624dd3 	.word	0x10624dd3
 800f610:	e000e014 	.word	0xe000e014

0800f614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f624 <vPortEnableVFP+0x10>
 800f618:	6801      	ldr	r1, [r0, #0]
 800f61a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f61e:	6001      	str	r1, [r0, #0]
 800f620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f622:	bf00      	nop
 800f624:	e000ed88 	.word	0xe000ed88

0800f628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f62e:	f3ef 8305 	mrs	r3, IPSR
 800f632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2b0f      	cmp	r3, #15
 800f638:	d914      	bls.n	800f664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f63a:	4a17      	ldr	r2, [pc, #92]	; (800f698 <vPortValidateInterruptPriority+0x70>)
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	4413      	add	r3, r2
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f644:	4b15      	ldr	r3, [pc, #84]	; (800f69c <vPortValidateInterruptPriority+0x74>)
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	7afa      	ldrb	r2, [r7, #11]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d20a      	bcs.n	800f664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f652:	f383 8811 	msr	BASEPRI, r3
 800f656:	f3bf 8f6f 	isb	sy
 800f65a:	f3bf 8f4f 	dsb	sy
 800f65e:	607b      	str	r3, [r7, #4]
}
 800f660:	bf00      	nop
 800f662:	e7fe      	b.n	800f662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f664:	4b0e      	ldr	r3, [pc, #56]	; (800f6a0 <vPortValidateInterruptPriority+0x78>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f66c:	4b0d      	ldr	r3, [pc, #52]	; (800f6a4 <vPortValidateInterruptPriority+0x7c>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	429a      	cmp	r2, r3
 800f672:	d90a      	bls.n	800f68a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f678:	f383 8811 	msr	BASEPRI, r3
 800f67c:	f3bf 8f6f 	isb	sy
 800f680:	f3bf 8f4f 	dsb	sy
 800f684:	603b      	str	r3, [r7, #0]
}
 800f686:	bf00      	nop
 800f688:	e7fe      	b.n	800f688 <vPortValidateInterruptPriority+0x60>
	}
 800f68a:	bf00      	nop
 800f68c:	3714      	adds	r7, #20
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr
 800f696:	bf00      	nop
 800f698:	e000e3f0 	.word	0xe000e3f0
 800f69c:	200092ac 	.word	0x200092ac
 800f6a0:	e000ed0c 	.word	0xe000ed0c
 800f6a4:	200092b0 	.word	0x200092b0

0800f6a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b08a      	sub	sp, #40	; 0x28
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f6b4:	f7fe fbac 	bl	800de10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f6b8:	4b5b      	ldr	r3, [pc, #364]	; (800f828 <pvPortMalloc+0x180>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d101      	bne.n	800f6c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f6c0:	f000 f920 	bl	800f904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f6c4:	4b59      	ldr	r3, [pc, #356]	; (800f82c <pvPortMalloc+0x184>)
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	4013      	ands	r3, r2
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	f040 8093 	bne.w	800f7f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d01d      	beq.n	800f714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f6d8:	2208      	movs	r2, #8
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4413      	add	r3, r2
 800f6de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f003 0307 	and.w	r3, r3, #7
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d014      	beq.n	800f714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f023 0307 	bic.w	r3, r3, #7
 800f6f0:	3308      	adds	r3, #8
 800f6f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f003 0307 	and.w	r3, r3, #7
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d00a      	beq.n	800f714 <pvPortMalloc+0x6c>
	__asm volatile
 800f6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f702:	f383 8811 	msr	BASEPRI, r3
 800f706:	f3bf 8f6f 	isb	sy
 800f70a:	f3bf 8f4f 	dsb	sy
 800f70e:	617b      	str	r3, [r7, #20]
}
 800f710:	bf00      	nop
 800f712:	e7fe      	b.n	800f712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d06e      	beq.n	800f7f8 <pvPortMalloc+0x150>
 800f71a:	4b45      	ldr	r3, [pc, #276]	; (800f830 <pvPortMalloc+0x188>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	687a      	ldr	r2, [r7, #4]
 800f720:	429a      	cmp	r2, r3
 800f722:	d869      	bhi.n	800f7f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f724:	4b43      	ldr	r3, [pc, #268]	; (800f834 <pvPortMalloc+0x18c>)
 800f726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f728:	4b42      	ldr	r3, [pc, #264]	; (800f834 <pvPortMalloc+0x18c>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f72e:	e004      	b.n	800f73a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	429a      	cmp	r2, r3
 800f742:	d903      	bls.n	800f74c <pvPortMalloc+0xa4>
 800f744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d1f1      	bne.n	800f730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f74c:	4b36      	ldr	r3, [pc, #216]	; (800f828 <pvPortMalloc+0x180>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f752:	429a      	cmp	r2, r3
 800f754:	d050      	beq.n	800f7f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f756:	6a3b      	ldr	r3, [r7, #32]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	2208      	movs	r2, #8
 800f75c:	4413      	add	r3, r2
 800f75e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f762:	681a      	ldr	r2, [r3, #0]
 800f764:	6a3b      	ldr	r3, [r7, #32]
 800f766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76a:	685a      	ldr	r2, [r3, #4]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	1ad2      	subs	r2, r2, r3
 800f770:	2308      	movs	r3, #8
 800f772:	005b      	lsls	r3, r3, #1
 800f774:	429a      	cmp	r2, r3
 800f776:	d91f      	bls.n	800f7b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4413      	add	r3, r2
 800f77e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	f003 0307 	and.w	r3, r3, #7
 800f786:	2b00      	cmp	r3, #0
 800f788:	d00a      	beq.n	800f7a0 <pvPortMalloc+0xf8>
	__asm volatile
 800f78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f78e:	f383 8811 	msr	BASEPRI, r3
 800f792:	f3bf 8f6f 	isb	sy
 800f796:	f3bf 8f4f 	dsb	sy
 800f79a:	613b      	str	r3, [r7, #16]
}
 800f79c:	bf00      	nop
 800f79e:	e7fe      	b.n	800f79e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a2:	685a      	ldr	r2, [r3, #4]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	1ad2      	subs	r2, r2, r3
 800f7a8:	69bb      	ldr	r3, [r7, #24]
 800f7aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ae:	687a      	ldr	r2, [r7, #4]
 800f7b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f7b2:	69b8      	ldr	r0, [r7, #24]
 800f7b4:	f000 f908 	bl	800f9c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f7b8:	4b1d      	ldr	r3, [pc, #116]	; (800f830 <pvPortMalloc+0x188>)
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	1ad3      	subs	r3, r2, r3
 800f7c2:	4a1b      	ldr	r2, [pc, #108]	; (800f830 <pvPortMalloc+0x188>)
 800f7c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f7c6:	4b1a      	ldr	r3, [pc, #104]	; (800f830 <pvPortMalloc+0x188>)
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	4b1b      	ldr	r3, [pc, #108]	; (800f838 <pvPortMalloc+0x190>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d203      	bcs.n	800f7da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f7d2:	4b17      	ldr	r3, [pc, #92]	; (800f830 <pvPortMalloc+0x188>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	4a18      	ldr	r2, [pc, #96]	; (800f838 <pvPortMalloc+0x190>)
 800f7d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7dc:	685a      	ldr	r2, [r3, #4]
 800f7de:	4b13      	ldr	r3, [pc, #76]	; (800f82c <pvPortMalloc+0x184>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	431a      	orrs	r2, r3
 800f7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f7ee:	4b13      	ldr	r3, [pc, #76]	; (800f83c <pvPortMalloc+0x194>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	4a11      	ldr	r2, [pc, #68]	; (800f83c <pvPortMalloc+0x194>)
 800f7f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f7f8:	f7fe fb18 	bl	800de2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	f003 0307 	and.w	r3, r3, #7
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00a      	beq.n	800f81c <pvPortMalloc+0x174>
	__asm volatile
 800f806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f80a:	f383 8811 	msr	BASEPRI, r3
 800f80e:	f3bf 8f6f 	isb	sy
 800f812:	f3bf 8f4f 	dsb	sy
 800f816:	60fb      	str	r3, [r7, #12]
}
 800f818:	bf00      	nop
 800f81a:	e7fe      	b.n	800f81a <pvPortMalloc+0x172>
	return pvReturn;
 800f81c:	69fb      	ldr	r3, [r7, #28]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3728      	adds	r7, #40	; 0x28
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	2000b2bc 	.word	0x2000b2bc
 800f82c:	2000b2d0 	.word	0x2000b2d0
 800f830:	2000b2c0 	.word	0x2000b2c0
 800f834:	2000b2b4 	.word	0x2000b2b4
 800f838:	2000b2c4 	.word	0x2000b2c4
 800f83c:	2000b2c8 	.word	0x2000b2c8

0800f840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b086      	sub	sp, #24
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d04d      	beq.n	800f8ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f852:	2308      	movs	r3, #8
 800f854:	425b      	negs	r3, r3
 800f856:	697a      	ldr	r2, [r7, #20]
 800f858:	4413      	add	r3, r2
 800f85a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	685a      	ldr	r2, [r3, #4]
 800f864:	4b24      	ldr	r3, [pc, #144]	; (800f8f8 <vPortFree+0xb8>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	4013      	ands	r3, r2
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d10a      	bne.n	800f884 <vPortFree+0x44>
	__asm volatile
 800f86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f872:	f383 8811 	msr	BASEPRI, r3
 800f876:	f3bf 8f6f 	isb	sy
 800f87a:	f3bf 8f4f 	dsb	sy
 800f87e:	60fb      	str	r3, [r7, #12]
}
 800f880:	bf00      	nop
 800f882:	e7fe      	b.n	800f882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d00a      	beq.n	800f8a2 <vPortFree+0x62>
	__asm volatile
 800f88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f890:	f383 8811 	msr	BASEPRI, r3
 800f894:	f3bf 8f6f 	isb	sy
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	60bb      	str	r3, [r7, #8]
}
 800f89e:	bf00      	nop
 800f8a0:	e7fe      	b.n	800f8a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	685a      	ldr	r2, [r3, #4]
 800f8a6:	4b14      	ldr	r3, [pc, #80]	; (800f8f8 <vPortFree+0xb8>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	4013      	ands	r3, r2
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d01e      	beq.n	800f8ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d11a      	bne.n	800f8ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	685a      	ldr	r2, [r3, #4]
 800f8bc:	4b0e      	ldr	r3, [pc, #56]	; (800f8f8 <vPortFree+0xb8>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	43db      	mvns	r3, r3
 800f8c2:	401a      	ands	r2, r3
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f8c8:	f7fe faa2 	bl	800de10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	685a      	ldr	r2, [r3, #4]
 800f8d0:	4b0a      	ldr	r3, [pc, #40]	; (800f8fc <vPortFree+0xbc>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	4a09      	ldr	r2, [pc, #36]	; (800f8fc <vPortFree+0xbc>)
 800f8d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f8da:	6938      	ldr	r0, [r7, #16]
 800f8dc:	f000 f874 	bl	800f9c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f8e0:	4b07      	ldr	r3, [pc, #28]	; (800f900 <vPortFree+0xc0>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	4a06      	ldr	r2, [pc, #24]	; (800f900 <vPortFree+0xc0>)
 800f8e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f8ea:	f7fe fa9f 	bl	800de2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f8ee:	bf00      	nop
 800f8f0:	3718      	adds	r7, #24
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	2000b2d0 	.word	0x2000b2d0
 800f8fc:	2000b2c0 	.word	0x2000b2c0
 800f900:	2000b2cc 	.word	0x2000b2cc

0800f904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f904:	b480      	push	{r7}
 800f906:	b085      	sub	sp, #20
 800f908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f90a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f90e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f910:	4b27      	ldr	r3, [pc, #156]	; (800f9b0 <prvHeapInit+0xac>)
 800f912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	f003 0307 	and.w	r3, r3, #7
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00c      	beq.n	800f938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	3307      	adds	r3, #7
 800f922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f023 0307 	bic.w	r3, r3, #7
 800f92a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f92c:	68ba      	ldr	r2, [r7, #8]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	1ad3      	subs	r3, r2, r3
 800f932:	4a1f      	ldr	r2, [pc, #124]	; (800f9b0 <prvHeapInit+0xac>)
 800f934:	4413      	add	r3, r2
 800f936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f93c:	4a1d      	ldr	r2, [pc, #116]	; (800f9b4 <prvHeapInit+0xb0>)
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f942:	4b1c      	ldr	r3, [pc, #112]	; (800f9b4 <prvHeapInit+0xb0>)
 800f944:	2200      	movs	r2, #0
 800f946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	68ba      	ldr	r2, [r7, #8]
 800f94c:	4413      	add	r3, r2
 800f94e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f950:	2208      	movs	r2, #8
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	1a9b      	subs	r3, r3, r2
 800f956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f023 0307 	bic.w	r3, r3, #7
 800f95e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	4a15      	ldr	r2, [pc, #84]	; (800f9b8 <prvHeapInit+0xb4>)
 800f964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f966:	4b14      	ldr	r3, [pc, #80]	; (800f9b8 <prvHeapInit+0xb4>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	2200      	movs	r2, #0
 800f96c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f96e:	4b12      	ldr	r3, [pc, #72]	; (800f9b8 <prvHeapInit+0xb4>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	2200      	movs	r2, #0
 800f974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	68fa      	ldr	r2, [r7, #12]
 800f97e:	1ad2      	subs	r2, r2, r3
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f984:	4b0c      	ldr	r3, [pc, #48]	; (800f9b8 <prvHeapInit+0xb4>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	4a0a      	ldr	r2, [pc, #40]	; (800f9bc <prvHeapInit+0xb8>)
 800f992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	4a09      	ldr	r2, [pc, #36]	; (800f9c0 <prvHeapInit+0xbc>)
 800f99a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f99c:	4b09      	ldr	r3, [pc, #36]	; (800f9c4 <prvHeapInit+0xc0>)
 800f99e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f9a2:	601a      	str	r2, [r3, #0]
}
 800f9a4:	bf00      	nop
 800f9a6:	3714      	adds	r7, #20
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr
 800f9b0:	200092b4 	.word	0x200092b4
 800f9b4:	2000b2b4 	.word	0x2000b2b4
 800f9b8:	2000b2bc 	.word	0x2000b2bc
 800f9bc:	2000b2c4 	.word	0x2000b2c4
 800f9c0:	2000b2c0 	.word	0x2000b2c0
 800f9c4:	2000b2d0 	.word	0x2000b2d0

0800f9c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b085      	sub	sp, #20
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f9d0:	4b28      	ldr	r3, [pc, #160]	; (800fa74 <prvInsertBlockIntoFreeList+0xac>)
 800f9d2:	60fb      	str	r3, [r7, #12]
 800f9d4:	e002      	b.n	800f9dc <prvInsertBlockIntoFreeList+0x14>
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	60fb      	str	r3, [r7, #12]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d8f7      	bhi.n	800f9d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	68ba      	ldr	r2, [r7, #8]
 800f9f0:	4413      	add	r3, r2
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d108      	bne.n	800fa0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	685a      	ldr	r2, [r3, #4]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	441a      	add	r2, r3
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	68ba      	ldr	r2, [r7, #8]
 800fa14:	441a      	add	r2, r3
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d118      	bne.n	800fa50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681a      	ldr	r2, [r3, #0]
 800fa22:	4b15      	ldr	r3, [pc, #84]	; (800fa78 <prvInsertBlockIntoFreeList+0xb0>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d00d      	beq.n	800fa46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	685a      	ldr	r2, [r3, #4]
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	441a      	add	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	681a      	ldr	r2, [r3, #0]
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	601a      	str	r2, [r3, #0]
 800fa44:	e008      	b.n	800fa58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fa46:	4b0c      	ldr	r3, [pc, #48]	; (800fa78 <prvInsertBlockIntoFreeList+0xb0>)
 800fa48:	681a      	ldr	r2, [r3, #0]
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	601a      	str	r2, [r3, #0]
 800fa4e:	e003      	b.n	800fa58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d002      	beq.n	800fa66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa66:	bf00      	nop
 800fa68:	3714      	adds	r7, #20
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa70:	4770      	bx	lr
 800fa72:	bf00      	nop
 800fa74:	2000b2b4 	.word	0x2000b2b4
 800fa78:	2000b2bc 	.word	0x2000b2bc

0800fa7c <__errno>:
 800fa7c:	4b01      	ldr	r3, [pc, #4]	; (800fa84 <__errno+0x8>)
 800fa7e:	6818      	ldr	r0, [r3, #0]
 800fa80:	4770      	bx	lr
 800fa82:	bf00      	nop
 800fa84:	2000008c 	.word	0x2000008c

0800fa88 <__libc_init_array>:
 800fa88:	b570      	push	{r4, r5, r6, lr}
 800fa8a:	4d0d      	ldr	r5, [pc, #52]	; (800fac0 <__libc_init_array+0x38>)
 800fa8c:	4c0d      	ldr	r4, [pc, #52]	; (800fac4 <__libc_init_array+0x3c>)
 800fa8e:	1b64      	subs	r4, r4, r5
 800fa90:	10a4      	asrs	r4, r4, #2
 800fa92:	2600      	movs	r6, #0
 800fa94:	42a6      	cmp	r6, r4
 800fa96:	d109      	bne.n	800faac <__libc_init_array+0x24>
 800fa98:	4d0b      	ldr	r5, [pc, #44]	; (800fac8 <__libc_init_array+0x40>)
 800fa9a:	4c0c      	ldr	r4, [pc, #48]	; (800facc <__libc_init_array+0x44>)
 800fa9c:	f002 fdf2 	bl	8012684 <_init>
 800faa0:	1b64      	subs	r4, r4, r5
 800faa2:	10a4      	asrs	r4, r4, #2
 800faa4:	2600      	movs	r6, #0
 800faa6:	42a6      	cmp	r6, r4
 800faa8:	d105      	bne.n	800fab6 <__libc_init_array+0x2e>
 800faaa:	bd70      	pop	{r4, r5, r6, pc}
 800faac:	f855 3b04 	ldr.w	r3, [r5], #4
 800fab0:	4798      	blx	r3
 800fab2:	3601      	adds	r6, #1
 800fab4:	e7ee      	b.n	800fa94 <__libc_init_array+0xc>
 800fab6:	f855 3b04 	ldr.w	r3, [r5], #4
 800faba:	4798      	blx	r3
 800fabc:	3601      	adds	r6, #1
 800fabe:	e7f2      	b.n	800faa6 <__libc_init_array+0x1e>
 800fac0:	0801f9e0 	.word	0x0801f9e0
 800fac4:	0801f9e0 	.word	0x0801f9e0
 800fac8:	0801f9e0 	.word	0x0801f9e0
 800facc:	0801f9e4 	.word	0x0801f9e4

0800fad0 <__retarget_lock_acquire_recursive>:
 800fad0:	4770      	bx	lr

0800fad2 <__retarget_lock_release_recursive>:
 800fad2:	4770      	bx	lr

0800fad4 <memcpy>:
 800fad4:	440a      	add	r2, r1
 800fad6:	4291      	cmp	r1, r2
 800fad8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fadc:	d100      	bne.n	800fae0 <memcpy+0xc>
 800fade:	4770      	bx	lr
 800fae0:	b510      	push	{r4, lr}
 800fae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800faea:	4291      	cmp	r1, r2
 800faec:	d1f9      	bne.n	800fae2 <memcpy+0xe>
 800faee:	bd10      	pop	{r4, pc}

0800faf0 <memset>:
 800faf0:	4402      	add	r2, r0
 800faf2:	4603      	mov	r3, r0
 800faf4:	4293      	cmp	r3, r2
 800faf6:	d100      	bne.n	800fafa <memset+0xa>
 800faf8:	4770      	bx	lr
 800fafa:	f803 1b01 	strb.w	r1, [r3], #1
 800fafe:	e7f9      	b.n	800faf4 <memset+0x4>

0800fb00 <sbrk_aligned>:
 800fb00:	b570      	push	{r4, r5, r6, lr}
 800fb02:	4e0e      	ldr	r6, [pc, #56]	; (800fb3c <sbrk_aligned+0x3c>)
 800fb04:	460c      	mov	r4, r1
 800fb06:	6831      	ldr	r1, [r6, #0]
 800fb08:	4605      	mov	r5, r0
 800fb0a:	b911      	cbnz	r1, 800fb12 <sbrk_aligned+0x12>
 800fb0c:	f000 f8f6 	bl	800fcfc <_sbrk_r>
 800fb10:	6030      	str	r0, [r6, #0]
 800fb12:	4621      	mov	r1, r4
 800fb14:	4628      	mov	r0, r5
 800fb16:	f000 f8f1 	bl	800fcfc <_sbrk_r>
 800fb1a:	1c43      	adds	r3, r0, #1
 800fb1c:	d00a      	beq.n	800fb34 <sbrk_aligned+0x34>
 800fb1e:	1cc4      	adds	r4, r0, #3
 800fb20:	f024 0403 	bic.w	r4, r4, #3
 800fb24:	42a0      	cmp	r0, r4
 800fb26:	d007      	beq.n	800fb38 <sbrk_aligned+0x38>
 800fb28:	1a21      	subs	r1, r4, r0
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	f000 f8e6 	bl	800fcfc <_sbrk_r>
 800fb30:	3001      	adds	r0, #1
 800fb32:	d101      	bne.n	800fb38 <sbrk_aligned+0x38>
 800fb34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fb38:	4620      	mov	r0, r4
 800fb3a:	bd70      	pop	{r4, r5, r6, pc}
 800fb3c:	2000b2dc 	.word	0x2000b2dc

0800fb40 <_malloc_r>:
 800fb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb44:	1ccd      	adds	r5, r1, #3
 800fb46:	f025 0503 	bic.w	r5, r5, #3
 800fb4a:	3508      	adds	r5, #8
 800fb4c:	2d0c      	cmp	r5, #12
 800fb4e:	bf38      	it	cc
 800fb50:	250c      	movcc	r5, #12
 800fb52:	2d00      	cmp	r5, #0
 800fb54:	4607      	mov	r7, r0
 800fb56:	db01      	blt.n	800fb5c <_malloc_r+0x1c>
 800fb58:	42a9      	cmp	r1, r5
 800fb5a:	d905      	bls.n	800fb68 <_malloc_r+0x28>
 800fb5c:	230c      	movs	r3, #12
 800fb5e:	603b      	str	r3, [r7, #0]
 800fb60:	2600      	movs	r6, #0
 800fb62:	4630      	mov	r0, r6
 800fb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb68:	4e2e      	ldr	r6, [pc, #184]	; (800fc24 <_malloc_r+0xe4>)
 800fb6a:	f000 f8f7 	bl	800fd5c <__malloc_lock>
 800fb6e:	6833      	ldr	r3, [r6, #0]
 800fb70:	461c      	mov	r4, r3
 800fb72:	bb34      	cbnz	r4, 800fbc2 <_malloc_r+0x82>
 800fb74:	4629      	mov	r1, r5
 800fb76:	4638      	mov	r0, r7
 800fb78:	f7ff ffc2 	bl	800fb00 <sbrk_aligned>
 800fb7c:	1c43      	adds	r3, r0, #1
 800fb7e:	4604      	mov	r4, r0
 800fb80:	d14d      	bne.n	800fc1e <_malloc_r+0xde>
 800fb82:	6834      	ldr	r4, [r6, #0]
 800fb84:	4626      	mov	r6, r4
 800fb86:	2e00      	cmp	r6, #0
 800fb88:	d140      	bne.n	800fc0c <_malloc_r+0xcc>
 800fb8a:	6823      	ldr	r3, [r4, #0]
 800fb8c:	4631      	mov	r1, r6
 800fb8e:	4638      	mov	r0, r7
 800fb90:	eb04 0803 	add.w	r8, r4, r3
 800fb94:	f000 f8b2 	bl	800fcfc <_sbrk_r>
 800fb98:	4580      	cmp	r8, r0
 800fb9a:	d13a      	bne.n	800fc12 <_malloc_r+0xd2>
 800fb9c:	6821      	ldr	r1, [r4, #0]
 800fb9e:	3503      	adds	r5, #3
 800fba0:	1a6d      	subs	r5, r5, r1
 800fba2:	f025 0503 	bic.w	r5, r5, #3
 800fba6:	3508      	adds	r5, #8
 800fba8:	2d0c      	cmp	r5, #12
 800fbaa:	bf38      	it	cc
 800fbac:	250c      	movcc	r5, #12
 800fbae:	4629      	mov	r1, r5
 800fbb0:	4638      	mov	r0, r7
 800fbb2:	f7ff ffa5 	bl	800fb00 <sbrk_aligned>
 800fbb6:	3001      	adds	r0, #1
 800fbb8:	d02b      	beq.n	800fc12 <_malloc_r+0xd2>
 800fbba:	6823      	ldr	r3, [r4, #0]
 800fbbc:	442b      	add	r3, r5
 800fbbe:	6023      	str	r3, [r4, #0]
 800fbc0:	e00e      	b.n	800fbe0 <_malloc_r+0xa0>
 800fbc2:	6822      	ldr	r2, [r4, #0]
 800fbc4:	1b52      	subs	r2, r2, r5
 800fbc6:	d41e      	bmi.n	800fc06 <_malloc_r+0xc6>
 800fbc8:	2a0b      	cmp	r2, #11
 800fbca:	d916      	bls.n	800fbfa <_malloc_r+0xba>
 800fbcc:	1961      	adds	r1, r4, r5
 800fbce:	42a3      	cmp	r3, r4
 800fbd0:	6025      	str	r5, [r4, #0]
 800fbd2:	bf18      	it	ne
 800fbd4:	6059      	strne	r1, [r3, #4]
 800fbd6:	6863      	ldr	r3, [r4, #4]
 800fbd8:	bf08      	it	eq
 800fbda:	6031      	streq	r1, [r6, #0]
 800fbdc:	5162      	str	r2, [r4, r5]
 800fbde:	604b      	str	r3, [r1, #4]
 800fbe0:	4638      	mov	r0, r7
 800fbe2:	f104 060b 	add.w	r6, r4, #11
 800fbe6:	f000 f8bf 	bl	800fd68 <__malloc_unlock>
 800fbea:	f026 0607 	bic.w	r6, r6, #7
 800fbee:	1d23      	adds	r3, r4, #4
 800fbf0:	1af2      	subs	r2, r6, r3
 800fbf2:	d0b6      	beq.n	800fb62 <_malloc_r+0x22>
 800fbf4:	1b9b      	subs	r3, r3, r6
 800fbf6:	50a3      	str	r3, [r4, r2]
 800fbf8:	e7b3      	b.n	800fb62 <_malloc_r+0x22>
 800fbfa:	6862      	ldr	r2, [r4, #4]
 800fbfc:	42a3      	cmp	r3, r4
 800fbfe:	bf0c      	ite	eq
 800fc00:	6032      	streq	r2, [r6, #0]
 800fc02:	605a      	strne	r2, [r3, #4]
 800fc04:	e7ec      	b.n	800fbe0 <_malloc_r+0xa0>
 800fc06:	4623      	mov	r3, r4
 800fc08:	6864      	ldr	r4, [r4, #4]
 800fc0a:	e7b2      	b.n	800fb72 <_malloc_r+0x32>
 800fc0c:	4634      	mov	r4, r6
 800fc0e:	6876      	ldr	r6, [r6, #4]
 800fc10:	e7b9      	b.n	800fb86 <_malloc_r+0x46>
 800fc12:	230c      	movs	r3, #12
 800fc14:	603b      	str	r3, [r7, #0]
 800fc16:	4638      	mov	r0, r7
 800fc18:	f000 f8a6 	bl	800fd68 <__malloc_unlock>
 800fc1c:	e7a1      	b.n	800fb62 <_malloc_r+0x22>
 800fc1e:	6025      	str	r5, [r4, #0]
 800fc20:	e7de      	b.n	800fbe0 <_malloc_r+0xa0>
 800fc22:	bf00      	nop
 800fc24:	2000b2d8 	.word	0x2000b2d8

0800fc28 <cleanup_glue>:
 800fc28:	b538      	push	{r3, r4, r5, lr}
 800fc2a:	460c      	mov	r4, r1
 800fc2c:	6809      	ldr	r1, [r1, #0]
 800fc2e:	4605      	mov	r5, r0
 800fc30:	b109      	cbz	r1, 800fc36 <cleanup_glue+0xe>
 800fc32:	f7ff fff9 	bl	800fc28 <cleanup_glue>
 800fc36:	4621      	mov	r1, r4
 800fc38:	4628      	mov	r0, r5
 800fc3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc3e:	f000 b899 	b.w	800fd74 <_free_r>
	...

0800fc44 <_reclaim_reent>:
 800fc44:	4b2c      	ldr	r3, [pc, #176]	; (800fcf8 <_reclaim_reent+0xb4>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4283      	cmp	r3, r0
 800fc4a:	b570      	push	{r4, r5, r6, lr}
 800fc4c:	4604      	mov	r4, r0
 800fc4e:	d051      	beq.n	800fcf4 <_reclaim_reent+0xb0>
 800fc50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fc52:	b143      	cbz	r3, 800fc66 <_reclaim_reent+0x22>
 800fc54:	68db      	ldr	r3, [r3, #12]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d14a      	bne.n	800fcf0 <_reclaim_reent+0xac>
 800fc5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc5c:	6819      	ldr	r1, [r3, #0]
 800fc5e:	b111      	cbz	r1, 800fc66 <_reclaim_reent+0x22>
 800fc60:	4620      	mov	r0, r4
 800fc62:	f000 f887 	bl	800fd74 <_free_r>
 800fc66:	6961      	ldr	r1, [r4, #20]
 800fc68:	b111      	cbz	r1, 800fc70 <_reclaim_reent+0x2c>
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f000 f882 	bl	800fd74 <_free_r>
 800fc70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fc72:	b111      	cbz	r1, 800fc7a <_reclaim_reent+0x36>
 800fc74:	4620      	mov	r0, r4
 800fc76:	f000 f87d 	bl	800fd74 <_free_r>
 800fc7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fc7c:	b111      	cbz	r1, 800fc84 <_reclaim_reent+0x40>
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f000 f878 	bl	800fd74 <_free_r>
 800fc84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fc86:	b111      	cbz	r1, 800fc8e <_reclaim_reent+0x4a>
 800fc88:	4620      	mov	r0, r4
 800fc8a:	f000 f873 	bl	800fd74 <_free_r>
 800fc8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fc90:	b111      	cbz	r1, 800fc98 <_reclaim_reent+0x54>
 800fc92:	4620      	mov	r0, r4
 800fc94:	f000 f86e 	bl	800fd74 <_free_r>
 800fc98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fc9a:	b111      	cbz	r1, 800fca2 <_reclaim_reent+0x5e>
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f000 f869 	bl	800fd74 <_free_r>
 800fca2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fca4:	b111      	cbz	r1, 800fcac <_reclaim_reent+0x68>
 800fca6:	4620      	mov	r0, r4
 800fca8:	f000 f864 	bl	800fd74 <_free_r>
 800fcac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcae:	b111      	cbz	r1, 800fcb6 <_reclaim_reent+0x72>
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	f000 f85f 	bl	800fd74 <_free_r>
 800fcb6:	69a3      	ldr	r3, [r4, #24]
 800fcb8:	b1e3      	cbz	r3, 800fcf4 <_reclaim_reent+0xb0>
 800fcba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	4798      	blx	r3
 800fcc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fcc2:	b1b9      	cbz	r1, 800fcf4 <_reclaim_reent+0xb0>
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcca:	f7ff bfad 	b.w	800fc28 <cleanup_glue>
 800fcce:	5949      	ldr	r1, [r1, r5]
 800fcd0:	b941      	cbnz	r1, 800fce4 <_reclaim_reent+0xa0>
 800fcd2:	3504      	adds	r5, #4
 800fcd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcd6:	2d80      	cmp	r5, #128	; 0x80
 800fcd8:	68d9      	ldr	r1, [r3, #12]
 800fcda:	d1f8      	bne.n	800fcce <_reclaim_reent+0x8a>
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f000 f849 	bl	800fd74 <_free_r>
 800fce2:	e7ba      	b.n	800fc5a <_reclaim_reent+0x16>
 800fce4:	680e      	ldr	r6, [r1, #0]
 800fce6:	4620      	mov	r0, r4
 800fce8:	f000 f844 	bl	800fd74 <_free_r>
 800fcec:	4631      	mov	r1, r6
 800fcee:	e7ef      	b.n	800fcd0 <_reclaim_reent+0x8c>
 800fcf0:	2500      	movs	r5, #0
 800fcf2:	e7ef      	b.n	800fcd4 <_reclaim_reent+0x90>
 800fcf4:	bd70      	pop	{r4, r5, r6, pc}
 800fcf6:	bf00      	nop
 800fcf8:	2000008c 	.word	0x2000008c

0800fcfc <_sbrk_r>:
 800fcfc:	b538      	push	{r3, r4, r5, lr}
 800fcfe:	4d06      	ldr	r5, [pc, #24]	; (800fd18 <_sbrk_r+0x1c>)
 800fd00:	2300      	movs	r3, #0
 800fd02:	4604      	mov	r4, r0
 800fd04:	4608      	mov	r0, r1
 800fd06:	602b      	str	r3, [r5, #0]
 800fd08:	f7f5 fa36 	bl	8005178 <_sbrk>
 800fd0c:	1c43      	adds	r3, r0, #1
 800fd0e:	d102      	bne.n	800fd16 <_sbrk_r+0x1a>
 800fd10:	682b      	ldr	r3, [r5, #0]
 800fd12:	b103      	cbz	r3, 800fd16 <_sbrk_r+0x1a>
 800fd14:	6023      	str	r3, [r4, #0]
 800fd16:	bd38      	pop	{r3, r4, r5, pc}
 800fd18:	2000b2e0 	.word	0x2000b2e0

0800fd1c <siprintf>:
 800fd1c:	b40e      	push	{r1, r2, r3}
 800fd1e:	b500      	push	{lr}
 800fd20:	b09c      	sub	sp, #112	; 0x70
 800fd22:	ab1d      	add	r3, sp, #116	; 0x74
 800fd24:	9002      	str	r0, [sp, #8]
 800fd26:	9006      	str	r0, [sp, #24]
 800fd28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fd2c:	4809      	ldr	r0, [pc, #36]	; (800fd54 <siprintf+0x38>)
 800fd2e:	9107      	str	r1, [sp, #28]
 800fd30:	9104      	str	r1, [sp, #16]
 800fd32:	4909      	ldr	r1, [pc, #36]	; (800fd58 <siprintf+0x3c>)
 800fd34:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd38:	9105      	str	r1, [sp, #20]
 800fd3a:	6800      	ldr	r0, [r0, #0]
 800fd3c:	9301      	str	r3, [sp, #4]
 800fd3e:	a902      	add	r1, sp, #8
 800fd40:	f000 f8c0 	bl	800fec4 <_svfiprintf_r>
 800fd44:	9b02      	ldr	r3, [sp, #8]
 800fd46:	2200      	movs	r2, #0
 800fd48:	701a      	strb	r2, [r3, #0]
 800fd4a:	b01c      	add	sp, #112	; 0x70
 800fd4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd50:	b003      	add	sp, #12
 800fd52:	4770      	bx	lr
 800fd54:	2000008c 	.word	0x2000008c
 800fd58:	ffff0208 	.word	0xffff0208

0800fd5c <__malloc_lock>:
 800fd5c:	4801      	ldr	r0, [pc, #4]	; (800fd64 <__malloc_lock+0x8>)
 800fd5e:	f7ff beb7 	b.w	800fad0 <__retarget_lock_acquire_recursive>
 800fd62:	bf00      	nop
 800fd64:	2000b2d4 	.word	0x2000b2d4

0800fd68 <__malloc_unlock>:
 800fd68:	4801      	ldr	r0, [pc, #4]	; (800fd70 <__malloc_unlock+0x8>)
 800fd6a:	f7ff beb2 	b.w	800fad2 <__retarget_lock_release_recursive>
 800fd6e:	bf00      	nop
 800fd70:	2000b2d4 	.word	0x2000b2d4

0800fd74 <_free_r>:
 800fd74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd76:	2900      	cmp	r1, #0
 800fd78:	d044      	beq.n	800fe04 <_free_r+0x90>
 800fd7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd7e:	9001      	str	r0, [sp, #4]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	f1a1 0404 	sub.w	r4, r1, #4
 800fd86:	bfb8      	it	lt
 800fd88:	18e4      	addlt	r4, r4, r3
 800fd8a:	f7ff ffe7 	bl	800fd5c <__malloc_lock>
 800fd8e:	4a1e      	ldr	r2, [pc, #120]	; (800fe08 <_free_r+0x94>)
 800fd90:	9801      	ldr	r0, [sp, #4]
 800fd92:	6813      	ldr	r3, [r2, #0]
 800fd94:	b933      	cbnz	r3, 800fda4 <_free_r+0x30>
 800fd96:	6063      	str	r3, [r4, #4]
 800fd98:	6014      	str	r4, [r2, #0]
 800fd9a:	b003      	add	sp, #12
 800fd9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fda0:	f7ff bfe2 	b.w	800fd68 <__malloc_unlock>
 800fda4:	42a3      	cmp	r3, r4
 800fda6:	d908      	bls.n	800fdba <_free_r+0x46>
 800fda8:	6825      	ldr	r5, [r4, #0]
 800fdaa:	1961      	adds	r1, r4, r5
 800fdac:	428b      	cmp	r3, r1
 800fdae:	bf01      	itttt	eq
 800fdb0:	6819      	ldreq	r1, [r3, #0]
 800fdb2:	685b      	ldreq	r3, [r3, #4]
 800fdb4:	1949      	addeq	r1, r1, r5
 800fdb6:	6021      	streq	r1, [r4, #0]
 800fdb8:	e7ed      	b.n	800fd96 <_free_r+0x22>
 800fdba:	461a      	mov	r2, r3
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	b10b      	cbz	r3, 800fdc4 <_free_r+0x50>
 800fdc0:	42a3      	cmp	r3, r4
 800fdc2:	d9fa      	bls.n	800fdba <_free_r+0x46>
 800fdc4:	6811      	ldr	r1, [r2, #0]
 800fdc6:	1855      	adds	r5, r2, r1
 800fdc8:	42a5      	cmp	r5, r4
 800fdca:	d10b      	bne.n	800fde4 <_free_r+0x70>
 800fdcc:	6824      	ldr	r4, [r4, #0]
 800fdce:	4421      	add	r1, r4
 800fdd0:	1854      	adds	r4, r2, r1
 800fdd2:	42a3      	cmp	r3, r4
 800fdd4:	6011      	str	r1, [r2, #0]
 800fdd6:	d1e0      	bne.n	800fd9a <_free_r+0x26>
 800fdd8:	681c      	ldr	r4, [r3, #0]
 800fdda:	685b      	ldr	r3, [r3, #4]
 800fddc:	6053      	str	r3, [r2, #4]
 800fdde:	4421      	add	r1, r4
 800fde0:	6011      	str	r1, [r2, #0]
 800fde2:	e7da      	b.n	800fd9a <_free_r+0x26>
 800fde4:	d902      	bls.n	800fdec <_free_r+0x78>
 800fde6:	230c      	movs	r3, #12
 800fde8:	6003      	str	r3, [r0, #0]
 800fdea:	e7d6      	b.n	800fd9a <_free_r+0x26>
 800fdec:	6825      	ldr	r5, [r4, #0]
 800fdee:	1961      	adds	r1, r4, r5
 800fdf0:	428b      	cmp	r3, r1
 800fdf2:	bf04      	itt	eq
 800fdf4:	6819      	ldreq	r1, [r3, #0]
 800fdf6:	685b      	ldreq	r3, [r3, #4]
 800fdf8:	6063      	str	r3, [r4, #4]
 800fdfa:	bf04      	itt	eq
 800fdfc:	1949      	addeq	r1, r1, r5
 800fdfe:	6021      	streq	r1, [r4, #0]
 800fe00:	6054      	str	r4, [r2, #4]
 800fe02:	e7ca      	b.n	800fd9a <_free_r+0x26>
 800fe04:	b003      	add	sp, #12
 800fe06:	bd30      	pop	{r4, r5, pc}
 800fe08:	2000b2d8 	.word	0x2000b2d8

0800fe0c <__ssputs_r>:
 800fe0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe10:	688e      	ldr	r6, [r1, #8]
 800fe12:	429e      	cmp	r6, r3
 800fe14:	4682      	mov	sl, r0
 800fe16:	460c      	mov	r4, r1
 800fe18:	4690      	mov	r8, r2
 800fe1a:	461f      	mov	r7, r3
 800fe1c:	d838      	bhi.n	800fe90 <__ssputs_r+0x84>
 800fe1e:	898a      	ldrh	r2, [r1, #12]
 800fe20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe24:	d032      	beq.n	800fe8c <__ssputs_r+0x80>
 800fe26:	6825      	ldr	r5, [r4, #0]
 800fe28:	6909      	ldr	r1, [r1, #16]
 800fe2a:	eba5 0901 	sub.w	r9, r5, r1
 800fe2e:	6965      	ldr	r5, [r4, #20]
 800fe30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe38:	3301      	adds	r3, #1
 800fe3a:	444b      	add	r3, r9
 800fe3c:	106d      	asrs	r5, r5, #1
 800fe3e:	429d      	cmp	r5, r3
 800fe40:	bf38      	it	cc
 800fe42:	461d      	movcc	r5, r3
 800fe44:	0553      	lsls	r3, r2, #21
 800fe46:	d531      	bpl.n	800feac <__ssputs_r+0xa0>
 800fe48:	4629      	mov	r1, r5
 800fe4a:	f7ff fe79 	bl	800fb40 <_malloc_r>
 800fe4e:	4606      	mov	r6, r0
 800fe50:	b950      	cbnz	r0, 800fe68 <__ssputs_r+0x5c>
 800fe52:	230c      	movs	r3, #12
 800fe54:	f8ca 3000 	str.w	r3, [sl]
 800fe58:	89a3      	ldrh	r3, [r4, #12]
 800fe5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe5e:	81a3      	strh	r3, [r4, #12]
 800fe60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe68:	6921      	ldr	r1, [r4, #16]
 800fe6a:	464a      	mov	r2, r9
 800fe6c:	f7ff fe32 	bl	800fad4 <memcpy>
 800fe70:	89a3      	ldrh	r3, [r4, #12]
 800fe72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe7a:	81a3      	strh	r3, [r4, #12]
 800fe7c:	6126      	str	r6, [r4, #16]
 800fe7e:	6165      	str	r5, [r4, #20]
 800fe80:	444e      	add	r6, r9
 800fe82:	eba5 0509 	sub.w	r5, r5, r9
 800fe86:	6026      	str	r6, [r4, #0]
 800fe88:	60a5      	str	r5, [r4, #8]
 800fe8a:	463e      	mov	r6, r7
 800fe8c:	42be      	cmp	r6, r7
 800fe8e:	d900      	bls.n	800fe92 <__ssputs_r+0x86>
 800fe90:	463e      	mov	r6, r7
 800fe92:	6820      	ldr	r0, [r4, #0]
 800fe94:	4632      	mov	r2, r6
 800fe96:	4641      	mov	r1, r8
 800fe98:	f000 faa8 	bl	80103ec <memmove>
 800fe9c:	68a3      	ldr	r3, [r4, #8]
 800fe9e:	1b9b      	subs	r3, r3, r6
 800fea0:	60a3      	str	r3, [r4, #8]
 800fea2:	6823      	ldr	r3, [r4, #0]
 800fea4:	4433      	add	r3, r6
 800fea6:	6023      	str	r3, [r4, #0]
 800fea8:	2000      	movs	r0, #0
 800feaa:	e7db      	b.n	800fe64 <__ssputs_r+0x58>
 800feac:	462a      	mov	r2, r5
 800feae:	f000 fab7 	bl	8010420 <_realloc_r>
 800feb2:	4606      	mov	r6, r0
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d1e1      	bne.n	800fe7c <__ssputs_r+0x70>
 800feb8:	6921      	ldr	r1, [r4, #16]
 800feba:	4650      	mov	r0, sl
 800febc:	f7ff ff5a 	bl	800fd74 <_free_r>
 800fec0:	e7c7      	b.n	800fe52 <__ssputs_r+0x46>
	...

0800fec4 <_svfiprintf_r>:
 800fec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec8:	4698      	mov	r8, r3
 800feca:	898b      	ldrh	r3, [r1, #12]
 800fecc:	061b      	lsls	r3, r3, #24
 800fece:	b09d      	sub	sp, #116	; 0x74
 800fed0:	4607      	mov	r7, r0
 800fed2:	460d      	mov	r5, r1
 800fed4:	4614      	mov	r4, r2
 800fed6:	d50e      	bpl.n	800fef6 <_svfiprintf_r+0x32>
 800fed8:	690b      	ldr	r3, [r1, #16]
 800feda:	b963      	cbnz	r3, 800fef6 <_svfiprintf_r+0x32>
 800fedc:	2140      	movs	r1, #64	; 0x40
 800fede:	f7ff fe2f 	bl	800fb40 <_malloc_r>
 800fee2:	6028      	str	r0, [r5, #0]
 800fee4:	6128      	str	r0, [r5, #16]
 800fee6:	b920      	cbnz	r0, 800fef2 <_svfiprintf_r+0x2e>
 800fee8:	230c      	movs	r3, #12
 800feea:	603b      	str	r3, [r7, #0]
 800feec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fef0:	e0d1      	b.n	8010096 <_svfiprintf_r+0x1d2>
 800fef2:	2340      	movs	r3, #64	; 0x40
 800fef4:	616b      	str	r3, [r5, #20]
 800fef6:	2300      	movs	r3, #0
 800fef8:	9309      	str	r3, [sp, #36]	; 0x24
 800fefa:	2320      	movs	r3, #32
 800fefc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff00:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff04:	2330      	movs	r3, #48	; 0x30
 800ff06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80100b0 <_svfiprintf_r+0x1ec>
 800ff0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff0e:	f04f 0901 	mov.w	r9, #1
 800ff12:	4623      	mov	r3, r4
 800ff14:	469a      	mov	sl, r3
 800ff16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff1a:	b10a      	cbz	r2, 800ff20 <_svfiprintf_r+0x5c>
 800ff1c:	2a25      	cmp	r2, #37	; 0x25
 800ff1e:	d1f9      	bne.n	800ff14 <_svfiprintf_r+0x50>
 800ff20:	ebba 0b04 	subs.w	fp, sl, r4
 800ff24:	d00b      	beq.n	800ff3e <_svfiprintf_r+0x7a>
 800ff26:	465b      	mov	r3, fp
 800ff28:	4622      	mov	r2, r4
 800ff2a:	4629      	mov	r1, r5
 800ff2c:	4638      	mov	r0, r7
 800ff2e:	f7ff ff6d 	bl	800fe0c <__ssputs_r>
 800ff32:	3001      	adds	r0, #1
 800ff34:	f000 80aa 	beq.w	801008c <_svfiprintf_r+0x1c8>
 800ff38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff3a:	445a      	add	r2, fp
 800ff3c:	9209      	str	r2, [sp, #36]	; 0x24
 800ff3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	f000 80a2 	beq.w	801008c <_svfiprintf_r+0x1c8>
 800ff48:	2300      	movs	r3, #0
 800ff4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff52:	f10a 0a01 	add.w	sl, sl, #1
 800ff56:	9304      	str	r3, [sp, #16]
 800ff58:	9307      	str	r3, [sp, #28]
 800ff5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff5e:	931a      	str	r3, [sp, #104]	; 0x68
 800ff60:	4654      	mov	r4, sl
 800ff62:	2205      	movs	r2, #5
 800ff64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff68:	4851      	ldr	r0, [pc, #324]	; (80100b0 <_svfiprintf_r+0x1ec>)
 800ff6a:	f7f0 f939 	bl	80001e0 <memchr>
 800ff6e:	9a04      	ldr	r2, [sp, #16]
 800ff70:	b9d8      	cbnz	r0, 800ffaa <_svfiprintf_r+0xe6>
 800ff72:	06d0      	lsls	r0, r2, #27
 800ff74:	bf44      	itt	mi
 800ff76:	2320      	movmi	r3, #32
 800ff78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff7c:	0711      	lsls	r1, r2, #28
 800ff7e:	bf44      	itt	mi
 800ff80:	232b      	movmi	r3, #43	; 0x2b
 800ff82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff86:	f89a 3000 	ldrb.w	r3, [sl]
 800ff8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ff8c:	d015      	beq.n	800ffba <_svfiprintf_r+0xf6>
 800ff8e:	9a07      	ldr	r2, [sp, #28]
 800ff90:	4654      	mov	r4, sl
 800ff92:	2000      	movs	r0, #0
 800ff94:	f04f 0c0a 	mov.w	ip, #10
 800ff98:	4621      	mov	r1, r4
 800ff9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff9e:	3b30      	subs	r3, #48	; 0x30
 800ffa0:	2b09      	cmp	r3, #9
 800ffa2:	d94e      	bls.n	8010042 <_svfiprintf_r+0x17e>
 800ffa4:	b1b0      	cbz	r0, 800ffd4 <_svfiprintf_r+0x110>
 800ffa6:	9207      	str	r2, [sp, #28]
 800ffa8:	e014      	b.n	800ffd4 <_svfiprintf_r+0x110>
 800ffaa:	eba0 0308 	sub.w	r3, r0, r8
 800ffae:	fa09 f303 	lsl.w	r3, r9, r3
 800ffb2:	4313      	orrs	r3, r2
 800ffb4:	9304      	str	r3, [sp, #16]
 800ffb6:	46a2      	mov	sl, r4
 800ffb8:	e7d2      	b.n	800ff60 <_svfiprintf_r+0x9c>
 800ffba:	9b03      	ldr	r3, [sp, #12]
 800ffbc:	1d19      	adds	r1, r3, #4
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	9103      	str	r1, [sp, #12]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	bfbb      	ittet	lt
 800ffc6:	425b      	neglt	r3, r3
 800ffc8:	f042 0202 	orrlt.w	r2, r2, #2
 800ffcc:	9307      	strge	r3, [sp, #28]
 800ffce:	9307      	strlt	r3, [sp, #28]
 800ffd0:	bfb8      	it	lt
 800ffd2:	9204      	strlt	r2, [sp, #16]
 800ffd4:	7823      	ldrb	r3, [r4, #0]
 800ffd6:	2b2e      	cmp	r3, #46	; 0x2e
 800ffd8:	d10c      	bne.n	800fff4 <_svfiprintf_r+0x130>
 800ffda:	7863      	ldrb	r3, [r4, #1]
 800ffdc:	2b2a      	cmp	r3, #42	; 0x2a
 800ffde:	d135      	bne.n	801004c <_svfiprintf_r+0x188>
 800ffe0:	9b03      	ldr	r3, [sp, #12]
 800ffe2:	1d1a      	adds	r2, r3, #4
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	9203      	str	r2, [sp, #12]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	bfb8      	it	lt
 800ffec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fff0:	3402      	adds	r4, #2
 800fff2:	9305      	str	r3, [sp, #20]
 800fff4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80100c0 <_svfiprintf_r+0x1fc>
 800fff8:	7821      	ldrb	r1, [r4, #0]
 800fffa:	2203      	movs	r2, #3
 800fffc:	4650      	mov	r0, sl
 800fffe:	f7f0 f8ef 	bl	80001e0 <memchr>
 8010002:	b140      	cbz	r0, 8010016 <_svfiprintf_r+0x152>
 8010004:	2340      	movs	r3, #64	; 0x40
 8010006:	eba0 000a 	sub.w	r0, r0, sl
 801000a:	fa03 f000 	lsl.w	r0, r3, r0
 801000e:	9b04      	ldr	r3, [sp, #16]
 8010010:	4303      	orrs	r3, r0
 8010012:	3401      	adds	r4, #1
 8010014:	9304      	str	r3, [sp, #16]
 8010016:	f814 1b01 	ldrb.w	r1, [r4], #1
 801001a:	4826      	ldr	r0, [pc, #152]	; (80100b4 <_svfiprintf_r+0x1f0>)
 801001c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010020:	2206      	movs	r2, #6
 8010022:	f7f0 f8dd 	bl	80001e0 <memchr>
 8010026:	2800      	cmp	r0, #0
 8010028:	d038      	beq.n	801009c <_svfiprintf_r+0x1d8>
 801002a:	4b23      	ldr	r3, [pc, #140]	; (80100b8 <_svfiprintf_r+0x1f4>)
 801002c:	bb1b      	cbnz	r3, 8010076 <_svfiprintf_r+0x1b2>
 801002e:	9b03      	ldr	r3, [sp, #12]
 8010030:	3307      	adds	r3, #7
 8010032:	f023 0307 	bic.w	r3, r3, #7
 8010036:	3308      	adds	r3, #8
 8010038:	9303      	str	r3, [sp, #12]
 801003a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801003c:	4433      	add	r3, r6
 801003e:	9309      	str	r3, [sp, #36]	; 0x24
 8010040:	e767      	b.n	800ff12 <_svfiprintf_r+0x4e>
 8010042:	fb0c 3202 	mla	r2, ip, r2, r3
 8010046:	460c      	mov	r4, r1
 8010048:	2001      	movs	r0, #1
 801004a:	e7a5      	b.n	800ff98 <_svfiprintf_r+0xd4>
 801004c:	2300      	movs	r3, #0
 801004e:	3401      	adds	r4, #1
 8010050:	9305      	str	r3, [sp, #20]
 8010052:	4619      	mov	r1, r3
 8010054:	f04f 0c0a 	mov.w	ip, #10
 8010058:	4620      	mov	r0, r4
 801005a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801005e:	3a30      	subs	r2, #48	; 0x30
 8010060:	2a09      	cmp	r2, #9
 8010062:	d903      	bls.n	801006c <_svfiprintf_r+0x1a8>
 8010064:	2b00      	cmp	r3, #0
 8010066:	d0c5      	beq.n	800fff4 <_svfiprintf_r+0x130>
 8010068:	9105      	str	r1, [sp, #20]
 801006a:	e7c3      	b.n	800fff4 <_svfiprintf_r+0x130>
 801006c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010070:	4604      	mov	r4, r0
 8010072:	2301      	movs	r3, #1
 8010074:	e7f0      	b.n	8010058 <_svfiprintf_r+0x194>
 8010076:	ab03      	add	r3, sp, #12
 8010078:	9300      	str	r3, [sp, #0]
 801007a:	462a      	mov	r2, r5
 801007c:	4b0f      	ldr	r3, [pc, #60]	; (80100bc <_svfiprintf_r+0x1f8>)
 801007e:	a904      	add	r1, sp, #16
 8010080:	4638      	mov	r0, r7
 8010082:	f3af 8000 	nop.w
 8010086:	1c42      	adds	r2, r0, #1
 8010088:	4606      	mov	r6, r0
 801008a:	d1d6      	bne.n	801003a <_svfiprintf_r+0x176>
 801008c:	89ab      	ldrh	r3, [r5, #12]
 801008e:	065b      	lsls	r3, r3, #25
 8010090:	f53f af2c 	bmi.w	800feec <_svfiprintf_r+0x28>
 8010094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010096:	b01d      	add	sp, #116	; 0x74
 8010098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801009c:	ab03      	add	r3, sp, #12
 801009e:	9300      	str	r3, [sp, #0]
 80100a0:	462a      	mov	r2, r5
 80100a2:	4b06      	ldr	r3, [pc, #24]	; (80100bc <_svfiprintf_r+0x1f8>)
 80100a4:	a904      	add	r1, sp, #16
 80100a6:	4638      	mov	r0, r7
 80100a8:	f000 f87a 	bl	80101a0 <_printf_i>
 80100ac:	e7eb      	b.n	8010086 <_svfiprintf_r+0x1c2>
 80100ae:	bf00      	nop
 80100b0:	0801f7c8 	.word	0x0801f7c8
 80100b4:	0801f7d2 	.word	0x0801f7d2
 80100b8:	00000000 	.word	0x00000000
 80100bc:	0800fe0d 	.word	0x0800fe0d
 80100c0:	0801f7ce 	.word	0x0801f7ce

080100c4 <_printf_common>:
 80100c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100c8:	4616      	mov	r6, r2
 80100ca:	4699      	mov	r9, r3
 80100cc:	688a      	ldr	r2, [r1, #8]
 80100ce:	690b      	ldr	r3, [r1, #16]
 80100d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100d4:	4293      	cmp	r3, r2
 80100d6:	bfb8      	it	lt
 80100d8:	4613      	movlt	r3, r2
 80100da:	6033      	str	r3, [r6, #0]
 80100dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100e0:	4607      	mov	r7, r0
 80100e2:	460c      	mov	r4, r1
 80100e4:	b10a      	cbz	r2, 80100ea <_printf_common+0x26>
 80100e6:	3301      	adds	r3, #1
 80100e8:	6033      	str	r3, [r6, #0]
 80100ea:	6823      	ldr	r3, [r4, #0]
 80100ec:	0699      	lsls	r1, r3, #26
 80100ee:	bf42      	ittt	mi
 80100f0:	6833      	ldrmi	r3, [r6, #0]
 80100f2:	3302      	addmi	r3, #2
 80100f4:	6033      	strmi	r3, [r6, #0]
 80100f6:	6825      	ldr	r5, [r4, #0]
 80100f8:	f015 0506 	ands.w	r5, r5, #6
 80100fc:	d106      	bne.n	801010c <_printf_common+0x48>
 80100fe:	f104 0a19 	add.w	sl, r4, #25
 8010102:	68e3      	ldr	r3, [r4, #12]
 8010104:	6832      	ldr	r2, [r6, #0]
 8010106:	1a9b      	subs	r3, r3, r2
 8010108:	42ab      	cmp	r3, r5
 801010a:	dc26      	bgt.n	801015a <_printf_common+0x96>
 801010c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010110:	1e13      	subs	r3, r2, #0
 8010112:	6822      	ldr	r2, [r4, #0]
 8010114:	bf18      	it	ne
 8010116:	2301      	movne	r3, #1
 8010118:	0692      	lsls	r2, r2, #26
 801011a:	d42b      	bmi.n	8010174 <_printf_common+0xb0>
 801011c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010120:	4649      	mov	r1, r9
 8010122:	4638      	mov	r0, r7
 8010124:	47c0      	blx	r8
 8010126:	3001      	adds	r0, #1
 8010128:	d01e      	beq.n	8010168 <_printf_common+0xa4>
 801012a:	6823      	ldr	r3, [r4, #0]
 801012c:	68e5      	ldr	r5, [r4, #12]
 801012e:	6832      	ldr	r2, [r6, #0]
 8010130:	f003 0306 	and.w	r3, r3, #6
 8010134:	2b04      	cmp	r3, #4
 8010136:	bf08      	it	eq
 8010138:	1aad      	subeq	r5, r5, r2
 801013a:	68a3      	ldr	r3, [r4, #8]
 801013c:	6922      	ldr	r2, [r4, #16]
 801013e:	bf0c      	ite	eq
 8010140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010144:	2500      	movne	r5, #0
 8010146:	4293      	cmp	r3, r2
 8010148:	bfc4      	itt	gt
 801014a:	1a9b      	subgt	r3, r3, r2
 801014c:	18ed      	addgt	r5, r5, r3
 801014e:	2600      	movs	r6, #0
 8010150:	341a      	adds	r4, #26
 8010152:	42b5      	cmp	r5, r6
 8010154:	d11a      	bne.n	801018c <_printf_common+0xc8>
 8010156:	2000      	movs	r0, #0
 8010158:	e008      	b.n	801016c <_printf_common+0xa8>
 801015a:	2301      	movs	r3, #1
 801015c:	4652      	mov	r2, sl
 801015e:	4649      	mov	r1, r9
 8010160:	4638      	mov	r0, r7
 8010162:	47c0      	blx	r8
 8010164:	3001      	adds	r0, #1
 8010166:	d103      	bne.n	8010170 <_printf_common+0xac>
 8010168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801016c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010170:	3501      	adds	r5, #1
 8010172:	e7c6      	b.n	8010102 <_printf_common+0x3e>
 8010174:	18e1      	adds	r1, r4, r3
 8010176:	1c5a      	adds	r2, r3, #1
 8010178:	2030      	movs	r0, #48	; 0x30
 801017a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801017e:	4422      	add	r2, r4
 8010180:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010184:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010188:	3302      	adds	r3, #2
 801018a:	e7c7      	b.n	801011c <_printf_common+0x58>
 801018c:	2301      	movs	r3, #1
 801018e:	4622      	mov	r2, r4
 8010190:	4649      	mov	r1, r9
 8010192:	4638      	mov	r0, r7
 8010194:	47c0      	blx	r8
 8010196:	3001      	adds	r0, #1
 8010198:	d0e6      	beq.n	8010168 <_printf_common+0xa4>
 801019a:	3601      	adds	r6, #1
 801019c:	e7d9      	b.n	8010152 <_printf_common+0x8e>
	...

080101a0 <_printf_i>:
 80101a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101a4:	7e0f      	ldrb	r7, [r1, #24]
 80101a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80101a8:	2f78      	cmp	r7, #120	; 0x78
 80101aa:	4691      	mov	r9, r2
 80101ac:	4680      	mov	r8, r0
 80101ae:	460c      	mov	r4, r1
 80101b0:	469a      	mov	sl, r3
 80101b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80101b6:	d807      	bhi.n	80101c8 <_printf_i+0x28>
 80101b8:	2f62      	cmp	r7, #98	; 0x62
 80101ba:	d80a      	bhi.n	80101d2 <_printf_i+0x32>
 80101bc:	2f00      	cmp	r7, #0
 80101be:	f000 80d8 	beq.w	8010372 <_printf_i+0x1d2>
 80101c2:	2f58      	cmp	r7, #88	; 0x58
 80101c4:	f000 80a3 	beq.w	801030e <_printf_i+0x16e>
 80101c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80101d0:	e03a      	b.n	8010248 <_printf_i+0xa8>
 80101d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80101d6:	2b15      	cmp	r3, #21
 80101d8:	d8f6      	bhi.n	80101c8 <_printf_i+0x28>
 80101da:	a101      	add	r1, pc, #4	; (adr r1, 80101e0 <_printf_i+0x40>)
 80101dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80101e0:	08010239 	.word	0x08010239
 80101e4:	0801024d 	.word	0x0801024d
 80101e8:	080101c9 	.word	0x080101c9
 80101ec:	080101c9 	.word	0x080101c9
 80101f0:	080101c9 	.word	0x080101c9
 80101f4:	080101c9 	.word	0x080101c9
 80101f8:	0801024d 	.word	0x0801024d
 80101fc:	080101c9 	.word	0x080101c9
 8010200:	080101c9 	.word	0x080101c9
 8010204:	080101c9 	.word	0x080101c9
 8010208:	080101c9 	.word	0x080101c9
 801020c:	08010359 	.word	0x08010359
 8010210:	0801027d 	.word	0x0801027d
 8010214:	0801033b 	.word	0x0801033b
 8010218:	080101c9 	.word	0x080101c9
 801021c:	080101c9 	.word	0x080101c9
 8010220:	0801037b 	.word	0x0801037b
 8010224:	080101c9 	.word	0x080101c9
 8010228:	0801027d 	.word	0x0801027d
 801022c:	080101c9 	.word	0x080101c9
 8010230:	080101c9 	.word	0x080101c9
 8010234:	08010343 	.word	0x08010343
 8010238:	682b      	ldr	r3, [r5, #0]
 801023a:	1d1a      	adds	r2, r3, #4
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	602a      	str	r2, [r5, #0]
 8010240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010248:	2301      	movs	r3, #1
 801024a:	e0a3      	b.n	8010394 <_printf_i+0x1f4>
 801024c:	6820      	ldr	r0, [r4, #0]
 801024e:	6829      	ldr	r1, [r5, #0]
 8010250:	0606      	lsls	r6, r0, #24
 8010252:	f101 0304 	add.w	r3, r1, #4
 8010256:	d50a      	bpl.n	801026e <_printf_i+0xce>
 8010258:	680e      	ldr	r6, [r1, #0]
 801025a:	602b      	str	r3, [r5, #0]
 801025c:	2e00      	cmp	r6, #0
 801025e:	da03      	bge.n	8010268 <_printf_i+0xc8>
 8010260:	232d      	movs	r3, #45	; 0x2d
 8010262:	4276      	negs	r6, r6
 8010264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010268:	485e      	ldr	r0, [pc, #376]	; (80103e4 <_printf_i+0x244>)
 801026a:	230a      	movs	r3, #10
 801026c:	e019      	b.n	80102a2 <_printf_i+0x102>
 801026e:	680e      	ldr	r6, [r1, #0]
 8010270:	602b      	str	r3, [r5, #0]
 8010272:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010276:	bf18      	it	ne
 8010278:	b236      	sxthne	r6, r6
 801027a:	e7ef      	b.n	801025c <_printf_i+0xbc>
 801027c:	682b      	ldr	r3, [r5, #0]
 801027e:	6820      	ldr	r0, [r4, #0]
 8010280:	1d19      	adds	r1, r3, #4
 8010282:	6029      	str	r1, [r5, #0]
 8010284:	0601      	lsls	r1, r0, #24
 8010286:	d501      	bpl.n	801028c <_printf_i+0xec>
 8010288:	681e      	ldr	r6, [r3, #0]
 801028a:	e002      	b.n	8010292 <_printf_i+0xf2>
 801028c:	0646      	lsls	r6, r0, #25
 801028e:	d5fb      	bpl.n	8010288 <_printf_i+0xe8>
 8010290:	881e      	ldrh	r6, [r3, #0]
 8010292:	4854      	ldr	r0, [pc, #336]	; (80103e4 <_printf_i+0x244>)
 8010294:	2f6f      	cmp	r7, #111	; 0x6f
 8010296:	bf0c      	ite	eq
 8010298:	2308      	moveq	r3, #8
 801029a:	230a      	movne	r3, #10
 801029c:	2100      	movs	r1, #0
 801029e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80102a2:	6865      	ldr	r5, [r4, #4]
 80102a4:	60a5      	str	r5, [r4, #8]
 80102a6:	2d00      	cmp	r5, #0
 80102a8:	bfa2      	ittt	ge
 80102aa:	6821      	ldrge	r1, [r4, #0]
 80102ac:	f021 0104 	bicge.w	r1, r1, #4
 80102b0:	6021      	strge	r1, [r4, #0]
 80102b2:	b90e      	cbnz	r6, 80102b8 <_printf_i+0x118>
 80102b4:	2d00      	cmp	r5, #0
 80102b6:	d04d      	beq.n	8010354 <_printf_i+0x1b4>
 80102b8:	4615      	mov	r5, r2
 80102ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80102be:	fb03 6711 	mls	r7, r3, r1, r6
 80102c2:	5dc7      	ldrb	r7, [r0, r7]
 80102c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80102c8:	4637      	mov	r7, r6
 80102ca:	42bb      	cmp	r3, r7
 80102cc:	460e      	mov	r6, r1
 80102ce:	d9f4      	bls.n	80102ba <_printf_i+0x11a>
 80102d0:	2b08      	cmp	r3, #8
 80102d2:	d10b      	bne.n	80102ec <_printf_i+0x14c>
 80102d4:	6823      	ldr	r3, [r4, #0]
 80102d6:	07de      	lsls	r6, r3, #31
 80102d8:	d508      	bpl.n	80102ec <_printf_i+0x14c>
 80102da:	6923      	ldr	r3, [r4, #16]
 80102dc:	6861      	ldr	r1, [r4, #4]
 80102de:	4299      	cmp	r1, r3
 80102e0:	bfde      	ittt	le
 80102e2:	2330      	movle	r3, #48	; 0x30
 80102e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80102e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80102ec:	1b52      	subs	r2, r2, r5
 80102ee:	6122      	str	r2, [r4, #16]
 80102f0:	f8cd a000 	str.w	sl, [sp]
 80102f4:	464b      	mov	r3, r9
 80102f6:	aa03      	add	r2, sp, #12
 80102f8:	4621      	mov	r1, r4
 80102fa:	4640      	mov	r0, r8
 80102fc:	f7ff fee2 	bl	80100c4 <_printf_common>
 8010300:	3001      	adds	r0, #1
 8010302:	d14c      	bne.n	801039e <_printf_i+0x1fe>
 8010304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010308:	b004      	add	sp, #16
 801030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801030e:	4835      	ldr	r0, [pc, #212]	; (80103e4 <_printf_i+0x244>)
 8010310:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010314:	6829      	ldr	r1, [r5, #0]
 8010316:	6823      	ldr	r3, [r4, #0]
 8010318:	f851 6b04 	ldr.w	r6, [r1], #4
 801031c:	6029      	str	r1, [r5, #0]
 801031e:	061d      	lsls	r5, r3, #24
 8010320:	d514      	bpl.n	801034c <_printf_i+0x1ac>
 8010322:	07df      	lsls	r7, r3, #31
 8010324:	bf44      	itt	mi
 8010326:	f043 0320 	orrmi.w	r3, r3, #32
 801032a:	6023      	strmi	r3, [r4, #0]
 801032c:	b91e      	cbnz	r6, 8010336 <_printf_i+0x196>
 801032e:	6823      	ldr	r3, [r4, #0]
 8010330:	f023 0320 	bic.w	r3, r3, #32
 8010334:	6023      	str	r3, [r4, #0]
 8010336:	2310      	movs	r3, #16
 8010338:	e7b0      	b.n	801029c <_printf_i+0xfc>
 801033a:	6823      	ldr	r3, [r4, #0]
 801033c:	f043 0320 	orr.w	r3, r3, #32
 8010340:	6023      	str	r3, [r4, #0]
 8010342:	2378      	movs	r3, #120	; 0x78
 8010344:	4828      	ldr	r0, [pc, #160]	; (80103e8 <_printf_i+0x248>)
 8010346:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801034a:	e7e3      	b.n	8010314 <_printf_i+0x174>
 801034c:	0659      	lsls	r1, r3, #25
 801034e:	bf48      	it	mi
 8010350:	b2b6      	uxthmi	r6, r6
 8010352:	e7e6      	b.n	8010322 <_printf_i+0x182>
 8010354:	4615      	mov	r5, r2
 8010356:	e7bb      	b.n	80102d0 <_printf_i+0x130>
 8010358:	682b      	ldr	r3, [r5, #0]
 801035a:	6826      	ldr	r6, [r4, #0]
 801035c:	6961      	ldr	r1, [r4, #20]
 801035e:	1d18      	adds	r0, r3, #4
 8010360:	6028      	str	r0, [r5, #0]
 8010362:	0635      	lsls	r5, r6, #24
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	d501      	bpl.n	801036c <_printf_i+0x1cc>
 8010368:	6019      	str	r1, [r3, #0]
 801036a:	e002      	b.n	8010372 <_printf_i+0x1d2>
 801036c:	0670      	lsls	r0, r6, #25
 801036e:	d5fb      	bpl.n	8010368 <_printf_i+0x1c8>
 8010370:	8019      	strh	r1, [r3, #0]
 8010372:	2300      	movs	r3, #0
 8010374:	6123      	str	r3, [r4, #16]
 8010376:	4615      	mov	r5, r2
 8010378:	e7ba      	b.n	80102f0 <_printf_i+0x150>
 801037a:	682b      	ldr	r3, [r5, #0]
 801037c:	1d1a      	adds	r2, r3, #4
 801037e:	602a      	str	r2, [r5, #0]
 8010380:	681d      	ldr	r5, [r3, #0]
 8010382:	6862      	ldr	r2, [r4, #4]
 8010384:	2100      	movs	r1, #0
 8010386:	4628      	mov	r0, r5
 8010388:	f7ef ff2a 	bl	80001e0 <memchr>
 801038c:	b108      	cbz	r0, 8010392 <_printf_i+0x1f2>
 801038e:	1b40      	subs	r0, r0, r5
 8010390:	6060      	str	r0, [r4, #4]
 8010392:	6863      	ldr	r3, [r4, #4]
 8010394:	6123      	str	r3, [r4, #16]
 8010396:	2300      	movs	r3, #0
 8010398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801039c:	e7a8      	b.n	80102f0 <_printf_i+0x150>
 801039e:	6923      	ldr	r3, [r4, #16]
 80103a0:	462a      	mov	r2, r5
 80103a2:	4649      	mov	r1, r9
 80103a4:	4640      	mov	r0, r8
 80103a6:	47d0      	blx	sl
 80103a8:	3001      	adds	r0, #1
 80103aa:	d0ab      	beq.n	8010304 <_printf_i+0x164>
 80103ac:	6823      	ldr	r3, [r4, #0]
 80103ae:	079b      	lsls	r3, r3, #30
 80103b0:	d413      	bmi.n	80103da <_printf_i+0x23a>
 80103b2:	68e0      	ldr	r0, [r4, #12]
 80103b4:	9b03      	ldr	r3, [sp, #12]
 80103b6:	4298      	cmp	r0, r3
 80103b8:	bfb8      	it	lt
 80103ba:	4618      	movlt	r0, r3
 80103bc:	e7a4      	b.n	8010308 <_printf_i+0x168>
 80103be:	2301      	movs	r3, #1
 80103c0:	4632      	mov	r2, r6
 80103c2:	4649      	mov	r1, r9
 80103c4:	4640      	mov	r0, r8
 80103c6:	47d0      	blx	sl
 80103c8:	3001      	adds	r0, #1
 80103ca:	d09b      	beq.n	8010304 <_printf_i+0x164>
 80103cc:	3501      	adds	r5, #1
 80103ce:	68e3      	ldr	r3, [r4, #12]
 80103d0:	9903      	ldr	r1, [sp, #12]
 80103d2:	1a5b      	subs	r3, r3, r1
 80103d4:	42ab      	cmp	r3, r5
 80103d6:	dcf2      	bgt.n	80103be <_printf_i+0x21e>
 80103d8:	e7eb      	b.n	80103b2 <_printf_i+0x212>
 80103da:	2500      	movs	r5, #0
 80103dc:	f104 0619 	add.w	r6, r4, #25
 80103e0:	e7f5      	b.n	80103ce <_printf_i+0x22e>
 80103e2:	bf00      	nop
 80103e4:	0801f7d9 	.word	0x0801f7d9
 80103e8:	0801f7ea 	.word	0x0801f7ea

080103ec <memmove>:
 80103ec:	4288      	cmp	r0, r1
 80103ee:	b510      	push	{r4, lr}
 80103f0:	eb01 0402 	add.w	r4, r1, r2
 80103f4:	d902      	bls.n	80103fc <memmove+0x10>
 80103f6:	4284      	cmp	r4, r0
 80103f8:	4623      	mov	r3, r4
 80103fa:	d807      	bhi.n	801040c <memmove+0x20>
 80103fc:	1e43      	subs	r3, r0, #1
 80103fe:	42a1      	cmp	r1, r4
 8010400:	d008      	beq.n	8010414 <memmove+0x28>
 8010402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010406:	f803 2f01 	strb.w	r2, [r3, #1]!
 801040a:	e7f8      	b.n	80103fe <memmove+0x12>
 801040c:	4402      	add	r2, r0
 801040e:	4601      	mov	r1, r0
 8010410:	428a      	cmp	r2, r1
 8010412:	d100      	bne.n	8010416 <memmove+0x2a>
 8010414:	bd10      	pop	{r4, pc}
 8010416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801041a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801041e:	e7f7      	b.n	8010410 <memmove+0x24>

08010420 <_realloc_r>:
 8010420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010424:	4680      	mov	r8, r0
 8010426:	4614      	mov	r4, r2
 8010428:	460e      	mov	r6, r1
 801042a:	b921      	cbnz	r1, 8010436 <_realloc_r+0x16>
 801042c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010430:	4611      	mov	r1, r2
 8010432:	f7ff bb85 	b.w	800fb40 <_malloc_r>
 8010436:	b92a      	cbnz	r2, 8010444 <_realloc_r+0x24>
 8010438:	f7ff fc9c 	bl	800fd74 <_free_r>
 801043c:	4625      	mov	r5, r4
 801043e:	4628      	mov	r0, r5
 8010440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010444:	f000 f81b 	bl	801047e <_malloc_usable_size_r>
 8010448:	4284      	cmp	r4, r0
 801044a:	4607      	mov	r7, r0
 801044c:	d802      	bhi.n	8010454 <_realloc_r+0x34>
 801044e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010452:	d812      	bhi.n	801047a <_realloc_r+0x5a>
 8010454:	4621      	mov	r1, r4
 8010456:	4640      	mov	r0, r8
 8010458:	f7ff fb72 	bl	800fb40 <_malloc_r>
 801045c:	4605      	mov	r5, r0
 801045e:	2800      	cmp	r0, #0
 8010460:	d0ed      	beq.n	801043e <_realloc_r+0x1e>
 8010462:	42bc      	cmp	r4, r7
 8010464:	4622      	mov	r2, r4
 8010466:	4631      	mov	r1, r6
 8010468:	bf28      	it	cs
 801046a:	463a      	movcs	r2, r7
 801046c:	f7ff fb32 	bl	800fad4 <memcpy>
 8010470:	4631      	mov	r1, r6
 8010472:	4640      	mov	r0, r8
 8010474:	f7ff fc7e 	bl	800fd74 <_free_r>
 8010478:	e7e1      	b.n	801043e <_realloc_r+0x1e>
 801047a:	4635      	mov	r5, r6
 801047c:	e7df      	b.n	801043e <_realloc_r+0x1e>

0801047e <_malloc_usable_size_r>:
 801047e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010482:	1f18      	subs	r0, r3, #4
 8010484:	2b00      	cmp	r3, #0
 8010486:	bfbc      	itt	lt
 8010488:	580b      	ldrlt	r3, [r1, r0]
 801048a:	18c0      	addlt	r0, r0, r3
 801048c:	4770      	bx	lr
	...

08010490 <sin>:
 8010490:	ec51 0b10 	vmov	r0, r1, d0
 8010494:	4a20      	ldr	r2, [pc, #128]	; (8010518 <sin+0x88>)
 8010496:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801049a:	4293      	cmp	r3, r2
 801049c:	dd27      	ble.n	80104ee <sin+0x5e>
 801049e:	b500      	push	{lr}
 80104a0:	4a1e      	ldr	r2, [pc, #120]	; (801051c <sin+0x8c>)
 80104a2:	4293      	cmp	r3, r2
 80104a4:	b085      	sub	sp, #20
 80104a6:	dd09      	ble.n	80104bc <sin+0x2c>
 80104a8:	ee10 2a10 	vmov	r2, s0
 80104ac:	460b      	mov	r3, r1
 80104ae:	f7ef feeb 	bl	8000288 <__aeabi_dsub>
 80104b2:	ec41 0b10 	vmov	d0, r0, r1
 80104b6:	b005      	add	sp, #20
 80104b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80104bc:	4668      	mov	r0, sp
 80104be:	f000 fe63 	bl	8011188 <__ieee754_rem_pio2>
 80104c2:	f000 0003 	and.w	r0, r0, #3
 80104c6:	2801      	cmp	r0, #1
 80104c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104cc:	ed9d 0b00 	vldr	d0, [sp]
 80104d0:	d012      	beq.n	80104f8 <sin+0x68>
 80104d2:	2802      	cmp	r0, #2
 80104d4:	d017      	beq.n	8010506 <sin+0x76>
 80104d6:	b190      	cbz	r0, 80104fe <sin+0x6e>
 80104d8:	f001 f94a 	bl	8011770 <__kernel_cos>
 80104dc:	ec53 2b10 	vmov	r2, r3, d0
 80104e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80104e4:	ee00 3a90 	vmov	s1, r3
 80104e8:	b005      	add	sp, #20
 80104ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80104ee:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8010510 <sin+0x80>
 80104f2:	2000      	movs	r0, #0
 80104f4:	f001 bea4 	b.w	8012240 <__kernel_sin>
 80104f8:	f001 f93a 	bl	8011770 <__kernel_cos>
 80104fc:	e7db      	b.n	80104b6 <sin+0x26>
 80104fe:	2001      	movs	r0, #1
 8010500:	f001 fe9e 	bl	8012240 <__kernel_sin>
 8010504:	e7d7      	b.n	80104b6 <sin+0x26>
 8010506:	2001      	movs	r0, #1
 8010508:	f001 fe9a 	bl	8012240 <__kernel_sin>
 801050c:	e7e6      	b.n	80104dc <sin+0x4c>
 801050e:	bf00      	nop
	...
 8010518:	3fe921fb 	.word	0x3fe921fb
 801051c:	7fefffff 	.word	0x7fefffff

08010520 <pow>:
 8010520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010522:	ed2d 8b02 	vpush	{d8}
 8010526:	ec55 4b11 	vmov	r4, r5, d1
 801052a:	ec57 6b10 	vmov	r6, r7, d0
 801052e:	f000 f86f 	bl	8010610 <__ieee754_pow>
 8010532:	4622      	mov	r2, r4
 8010534:	462b      	mov	r3, r5
 8010536:	4620      	mov	r0, r4
 8010538:	4629      	mov	r1, r5
 801053a:	eeb0 8a40 	vmov.f32	s16, s0
 801053e:	eef0 8a60 	vmov.f32	s17, s1
 8010542:	f7f0 faf3 	bl	8000b2c <__aeabi_dcmpun>
 8010546:	b978      	cbnz	r0, 8010568 <pow+0x48>
 8010548:	2200      	movs	r2, #0
 801054a:	2300      	movs	r3, #0
 801054c:	4630      	mov	r0, r6
 801054e:	4639      	mov	r1, r7
 8010550:	f7f0 faba 	bl	8000ac8 <__aeabi_dcmpeq>
 8010554:	b1f0      	cbz	r0, 8010594 <pow+0x74>
 8010556:	2200      	movs	r2, #0
 8010558:	2300      	movs	r3, #0
 801055a:	4620      	mov	r0, r4
 801055c:	4629      	mov	r1, r5
 801055e:	f7f0 fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 8010562:	b140      	cbz	r0, 8010576 <pow+0x56>
 8010564:	ed9f 8b28 	vldr	d8, [pc, #160]	; 8010608 <pow+0xe8>
 8010568:	eeb0 0a48 	vmov.f32	s0, s16
 801056c:	eef0 0a68 	vmov.f32	s1, s17
 8010570:	ecbd 8b02 	vpop	{d8}
 8010574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010576:	ec45 4b10 	vmov	d0, r4, r5
 801057a:	f001 ff5f 	bl	801243c <finite>
 801057e:	2800      	cmp	r0, #0
 8010580:	d0f2      	beq.n	8010568 <pow+0x48>
 8010582:	4620      	mov	r0, r4
 8010584:	4629      	mov	r1, r5
 8010586:	2200      	movs	r2, #0
 8010588:	2300      	movs	r3, #0
 801058a:	f7f0 faa7 	bl	8000adc <__aeabi_dcmplt>
 801058e:	2800      	cmp	r0, #0
 8010590:	d0ea      	beq.n	8010568 <pow+0x48>
 8010592:	e02e      	b.n	80105f2 <pow+0xd2>
 8010594:	eeb0 0a48 	vmov.f32	s0, s16
 8010598:	eef0 0a68 	vmov.f32	s1, s17
 801059c:	f001 ff4e 	bl	801243c <finite>
 80105a0:	b1a0      	cbz	r0, 80105cc <pow+0xac>
 80105a2:	ec51 0b18 	vmov	r0, r1, d8
 80105a6:	2200      	movs	r2, #0
 80105a8:	2300      	movs	r3, #0
 80105aa:	f7f0 fa8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80105ae:	2800      	cmp	r0, #0
 80105b0:	d0da      	beq.n	8010568 <pow+0x48>
 80105b2:	ec47 6b10 	vmov	d0, r6, r7
 80105b6:	f001 ff41 	bl	801243c <finite>
 80105ba:	2800      	cmp	r0, #0
 80105bc:	d0d4      	beq.n	8010568 <pow+0x48>
 80105be:	ec45 4b10 	vmov	d0, r4, r5
 80105c2:	f001 ff3b 	bl	801243c <finite>
 80105c6:	2800      	cmp	r0, #0
 80105c8:	d0ce      	beq.n	8010568 <pow+0x48>
 80105ca:	e012      	b.n	80105f2 <pow+0xd2>
 80105cc:	ec47 6b10 	vmov	d0, r6, r7
 80105d0:	f001 ff34 	bl	801243c <finite>
 80105d4:	2800      	cmp	r0, #0
 80105d6:	d0e4      	beq.n	80105a2 <pow+0x82>
 80105d8:	ec45 4b10 	vmov	d0, r4, r5
 80105dc:	f001 ff2e 	bl	801243c <finite>
 80105e0:	2800      	cmp	r0, #0
 80105e2:	d0de      	beq.n	80105a2 <pow+0x82>
 80105e4:	ec53 2b18 	vmov	r2, r3, d8
 80105e8:	ec51 0b18 	vmov	r0, r1, d8
 80105ec:	f7f0 fa9e 	bl	8000b2c <__aeabi_dcmpun>
 80105f0:	b920      	cbnz	r0, 80105fc <pow+0xdc>
 80105f2:	f7ff fa43 	bl	800fa7c <__errno>
 80105f6:	2322      	movs	r3, #34	; 0x22
 80105f8:	6003      	str	r3, [r0, #0]
 80105fa:	e7b5      	b.n	8010568 <pow+0x48>
 80105fc:	f7ff fa3e 	bl	800fa7c <__errno>
 8010600:	2321      	movs	r3, #33	; 0x21
 8010602:	6003      	str	r3, [r0, #0]
 8010604:	e7b0      	b.n	8010568 <pow+0x48>
 8010606:	bf00      	nop
 8010608:	00000000 	.word	0x00000000
 801060c:	3ff00000 	.word	0x3ff00000

08010610 <__ieee754_pow>:
 8010610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010614:	ec55 4b11 	vmov	r4, r5, d1
 8010618:	ed2d 8b0c 	vpush	{d8-d13}
 801061c:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 8010620:	ea5a 0104 	orrs.w	r1, sl, r4
 8010624:	ec57 6b10 	vmov	r6, r7, d0
 8010628:	b087      	sub	sp, #28
 801062a:	d115      	bne.n	8010658 <__ieee754_pow+0x48>
 801062c:	19b3      	adds	r3, r6, r6
 801062e:	487e      	ldr	r0, [pc, #504]	; (8010828 <__ieee754_pow+0x218>)
 8010630:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010634:	4152      	adcs	r2, r2
 8010636:	4299      	cmp	r1, r3
 8010638:	eb70 0302 	sbcs.w	r3, r0, r2
 801063c:	d224      	bcs.n	8010688 <__ieee754_pow+0x78>
 801063e:	4622      	mov	r2, r4
 8010640:	462b      	mov	r3, r5
 8010642:	4630      	mov	r0, r6
 8010644:	4639      	mov	r1, r7
 8010646:	f7ef fe21 	bl	800028c <__adddf3>
 801064a:	ec41 0b10 	vmov	d0, r0, r1
 801064e:	b007      	add	sp, #28
 8010650:	ecbd 8b0c 	vpop	{d8-d13}
 8010654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010658:	4974      	ldr	r1, [pc, #464]	; (801082c <__ieee754_pow+0x21c>)
 801065a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 801065e:	4589      	cmp	r9, r1
 8010660:	ee10 2a10 	vmov	r2, s0
 8010664:	46b8      	mov	r8, r7
 8010666:	dd16      	ble.n	8010696 <__ieee754_pow+0x86>
 8010668:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801066c:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8010670:	ea58 0802 	orrs.w	r8, r8, r2
 8010674:	d1e3      	bne.n	801063e <__ieee754_pow+0x2e>
 8010676:	1923      	adds	r3, r4, r4
 8010678:	496b      	ldr	r1, [pc, #428]	; (8010828 <__ieee754_pow+0x218>)
 801067a:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 801067e:	4152      	adcs	r2, r2
 8010680:	4598      	cmp	r8, r3
 8010682:	eb71 0302 	sbcs.w	r3, r1, r2
 8010686:	d3da      	bcc.n	801063e <__ieee754_pow+0x2e>
 8010688:	ed9f 0b65 	vldr	d0, [pc, #404]	; 8010820 <__ieee754_pow+0x210>
 801068c:	b007      	add	sp, #28
 801068e:	ecbd 8b0c 	vpop	{d8-d13}
 8010692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010696:	ee11 3a10 	vmov	r3, s2
 801069a:	46ab      	mov	fp, r5
 801069c:	d042      	beq.n	8010724 <__ieee754_pow+0x114>
 801069e:	4963      	ldr	r1, [pc, #396]	; (801082c <__ieee754_pow+0x21c>)
 80106a0:	458a      	cmp	sl, r1
 80106a2:	dce1      	bgt.n	8010668 <__ieee754_pow+0x58>
 80106a4:	f000 8094 	beq.w	80107d0 <__ieee754_pow+0x1c0>
 80106a8:	f1b8 0f00 	cmp.w	r8, #0
 80106ac:	db73      	blt.n	8010796 <__ieee754_pow+0x186>
 80106ae:	2100      	movs	r1, #0
 80106b0:	9100      	str	r1, [sp, #0]
 80106b2:	b97b      	cbnz	r3, 80106d4 <__ieee754_pow+0xc4>
 80106b4:	4b5d      	ldr	r3, [pc, #372]	; (801082c <__ieee754_pow+0x21c>)
 80106b6:	459a      	cmp	sl, r3
 80106b8:	f000 808e 	beq.w	80107d8 <__ieee754_pow+0x1c8>
 80106bc:	4b5c      	ldr	r3, [pc, #368]	; (8010830 <__ieee754_pow+0x220>)
 80106be:	459a      	cmp	sl, r3
 80106c0:	f000 80a2 	beq.w	8010808 <__ieee754_pow+0x1f8>
 80106c4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 80106c8:	f000 84c2 	beq.w	8011050 <__ieee754_pow+0xa40>
 80106cc:	4b59      	ldr	r3, [pc, #356]	; (8010834 <__ieee754_pow+0x224>)
 80106ce:	459b      	cmp	fp, r3
 80106d0:	f000 83d7 	beq.w	8010e82 <__ieee754_pow+0x872>
 80106d4:	ec47 6b10 	vmov	d0, r6, r7
 80106d8:	9202      	str	r2, [sp, #8]
 80106da:	f001 fea5 	bl	8012428 <fabs>
 80106de:	9a02      	ldr	r2, [sp, #8]
 80106e0:	b362      	cbz	r2, 801073c <__ieee754_pow+0x12c>
 80106e2:	9a00      	ldr	r2, [sp, #0]
 80106e4:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80106e8:	3b01      	subs	r3, #1
 80106ea:	9304      	str	r3, [sp, #16]
 80106ec:	4313      	orrs	r3, r2
 80106ee:	f000 8092 	beq.w	8010816 <__ieee754_pow+0x206>
 80106f2:	4b51      	ldr	r3, [pc, #324]	; (8010838 <__ieee754_pow+0x228>)
 80106f4:	459a      	cmp	sl, r3
 80106f6:	f340 80a5 	ble.w	8010844 <__ieee754_pow+0x234>
 80106fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80106fe:	459a      	cmp	sl, r3
 8010700:	4b4e      	ldr	r3, [pc, #312]	; (801083c <__ieee754_pow+0x22c>)
 8010702:	f340 843f 	ble.w	8010f84 <__ieee754_pow+0x974>
 8010706:	4599      	cmp	r9, r3
 8010708:	f340 84b4 	ble.w	8011074 <__ieee754_pow+0xa64>
 801070c:	f1bb 0f00 	cmp.w	fp, #0
 8010710:	f340 84b4 	ble.w	801107c <__ieee754_pow+0xa6c>
 8010714:	2000      	movs	r0, #0
 8010716:	b007      	add	sp, #28
 8010718:	ecbd 8b0c 	vpop	{d8-d13}
 801071c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010720:	f001 be78 	b.w	8012414 <__math_oflow>
 8010724:	2e00      	cmp	r6, #0
 8010726:	d18a      	bne.n	801063e <__ieee754_pow+0x2e>
 8010728:	e7b9      	b.n	801069e <__ieee754_pow+0x8e>
 801072a:	ec47 6b10 	vmov	d0, r6, r7
 801072e:	9200      	str	r2, [sp, #0]
 8010730:	f001 fe7a 	bl	8012428 <fabs>
 8010734:	9a00      	ldr	r2, [sp, #0]
 8010736:	2a00      	cmp	r2, #0
 8010738:	d16d      	bne.n	8010816 <__ieee754_pow+0x206>
 801073a:	9200      	str	r2, [sp, #0]
 801073c:	f1b9 0f00 	cmp.w	r9, #0
 8010740:	d004      	beq.n	801074c <__ieee754_pow+0x13c>
 8010742:	4b3b      	ldr	r3, [pc, #236]	; (8010830 <__ieee754_pow+0x220>)
 8010744:	f028 4240 	bic.w	r2, r8, #3221225472	; 0xc0000000
 8010748:	429a      	cmp	r2, r3
 801074a:	d1ca      	bne.n	80106e2 <__ieee754_pow+0xd2>
 801074c:	f1bb 0f00 	cmp.w	fp, #0
 8010750:	da07      	bge.n	8010762 <__ieee754_pow+0x152>
 8010752:	ec53 2b10 	vmov	r2, r3, d0
 8010756:	4936      	ldr	r1, [pc, #216]	; (8010830 <__ieee754_pow+0x220>)
 8010758:	2000      	movs	r0, #0
 801075a:	f7f0 f877 	bl	800084c <__aeabi_ddiv>
 801075e:	ec41 0b10 	vmov	d0, r0, r1
 8010762:	f1b8 0f00 	cmp.w	r8, #0
 8010766:	f6bf af72 	bge.w	801064e <__ieee754_pow+0x3e>
 801076a:	9b00      	ldr	r3, [sp, #0]
 801076c:	f109 4940 	add.w	r9, r9, #3221225472	; 0xc0000000
 8010770:	f509 1980 	add.w	r9, r9, #1048576	; 0x100000
 8010774:	ea59 0303 	orrs.w	r3, r9, r3
 8010778:	f040 8490 	bne.w	801109c <__ieee754_pow+0xa8c>
 801077c:	ec53 2b10 	vmov	r2, r3, d0
 8010780:	4610      	mov	r0, r2
 8010782:	4619      	mov	r1, r3
 8010784:	f7ef fd80 	bl	8000288 <__aeabi_dsub>
 8010788:	4602      	mov	r2, r0
 801078a:	460b      	mov	r3, r1
 801078c:	f7f0 f85e 	bl	800084c <__aeabi_ddiv>
 8010790:	ec41 0b10 	vmov	d0, r0, r1
 8010794:	e75b      	b.n	801064e <__ieee754_pow+0x3e>
 8010796:	492a      	ldr	r1, [pc, #168]	; (8010840 <__ieee754_pow+0x230>)
 8010798:	458a      	cmp	sl, r1
 801079a:	dc2f      	bgt.n	80107fc <__ieee754_pow+0x1ec>
 801079c:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80107a0:	458a      	cmp	sl, r1
 80107a2:	dd0f      	ble.n	80107c4 <__ieee754_pow+0x1b4>
 80107a4:	ea4f 512a 	mov.w	r1, sl, asr #20
 80107a8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80107ac:	2914      	cmp	r1, #20
 80107ae:	f340 8467 	ble.w	8011080 <__ieee754_pow+0xa70>
 80107b2:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80107b6:	fa23 f001 	lsr.w	r0, r3, r1
 80107ba:	fa00 f101 	lsl.w	r1, r0, r1
 80107be:	4299      	cmp	r1, r3
 80107c0:	f000 84a5 	beq.w	801110e <__ieee754_pow+0xafe>
 80107c4:	2100      	movs	r1, #0
 80107c6:	9100      	str	r1, [sp, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	f43f af77 	beq.w	80106bc <__ieee754_pow+0xac>
 80107ce:	e781      	b.n	80106d4 <__ieee754_pow+0xc4>
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	f43f af69 	beq.w	80106a8 <__ieee754_pow+0x98>
 80107d6:	e747      	b.n	8010668 <__ieee754_pow+0x58>
 80107d8:	f109 4340 	add.w	r3, r9, #3221225472	; 0xc0000000
 80107dc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80107e0:	4313      	orrs	r3, r2
 80107e2:	f43f af51 	beq.w	8010688 <__ieee754_pow+0x78>
 80107e6:	4b15      	ldr	r3, [pc, #84]	; (801083c <__ieee754_pow+0x22c>)
 80107e8:	4599      	cmp	r9, r3
 80107ea:	f340 8384 	ble.w	8010ef6 <__ieee754_pow+0x8e6>
 80107ee:	f1bb 0f00 	cmp.w	fp, #0
 80107f2:	f2c0 8461 	blt.w	80110b8 <__ieee754_pow+0xaa8>
 80107f6:	ec45 4b10 	vmov	d0, r4, r5
 80107fa:	e728      	b.n	801064e <__ieee754_pow+0x3e>
 80107fc:	2102      	movs	r1, #2
 80107fe:	9100      	str	r1, [sp, #0]
 8010800:	2b00      	cmp	r3, #0
 8010802:	f43f af57 	beq.w	80106b4 <__ieee754_pow+0xa4>
 8010806:	e765      	b.n	80106d4 <__ieee754_pow+0xc4>
 8010808:	f1bb 0f00 	cmp.w	fp, #0
 801080c:	f2c0 8416 	blt.w	801103c <__ieee754_pow+0xa2c>
 8010810:	ec47 6b10 	vmov	d0, r6, r7
 8010814:	e71b      	b.n	801064e <__ieee754_pow+0x3e>
 8010816:	4632      	mov	r2, r6
 8010818:	463b      	mov	r3, r7
 801081a:	e7b1      	b.n	8010780 <__ieee754_pow+0x170>
 801081c:	f3af 8000 	nop.w
 8010820:	00000000 	.word	0x00000000
 8010824:	3ff00000 	.word	0x3ff00000
 8010828:	fff00000 	.word	0xfff00000
 801082c:	7ff00000 	.word	0x7ff00000
 8010830:	3ff00000 	.word	0x3ff00000
 8010834:	3fe00000 	.word	0x3fe00000
 8010838:	41e00000 	.word	0x41e00000
 801083c:	3fefffff 	.word	0x3fefffff
 8010840:	433fffff 	.word	0x433fffff
 8010844:	4be4      	ldr	r3, [pc, #912]	; (8010bd8 <__ieee754_pow+0x5c8>)
 8010846:	ea08 0303 	and.w	r3, r8, r3
 801084a:	2200      	movs	r2, #0
 801084c:	b953      	cbnz	r3, 8010864 <__ieee754_pow+0x254>
 801084e:	ec51 0b10 	vmov	r0, r1, d0
 8010852:	4be2      	ldr	r3, [pc, #904]	; (8010bdc <__ieee754_pow+0x5cc>)
 8010854:	f7ef fed0 	bl	80005f8 <__aeabi_dmul>
 8010858:	ec41 0b10 	vmov	d0, r0, r1
 801085c:	ee10 9a90 	vmov	r9, s1
 8010860:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010864:	ea4f 5329 	mov.w	r3, r9, asr #20
 8010868:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801086c:	189a      	adds	r2, r3, r2
 801086e:	4bdc      	ldr	r3, [pc, #880]	; (8010be0 <__ieee754_pow+0x5d0>)
 8010870:	9205      	str	r2, [sp, #20]
 8010872:	f3c9 0913 	ubfx	r9, r9, #0, #20
 8010876:	f049 567f 	orr.w	r6, r9, #1069547520	; 0x3fc00000
 801087a:	4599      	cmp	r9, r3
 801087c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8010880:	dd07      	ble.n	8010892 <__ieee754_pow+0x282>
 8010882:	4bd8      	ldr	r3, [pc, #864]	; (8010be4 <__ieee754_pow+0x5d4>)
 8010884:	4599      	cmp	r9, r3
 8010886:	f340 841b 	ble.w	80110c0 <__ieee754_pow+0xab0>
 801088a:	3201      	adds	r2, #1
 801088c:	9205      	str	r2, [sp, #20]
 801088e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8010892:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8010b78 <__ieee754_pow+0x568>
 8010896:	ed9f 7bba 	vldr	d7, [pc, #744]	; 8010b80 <__ieee754_pow+0x570>
 801089a:	ec53 2b16 	vmov	r2, r3, d6
 801089e:	eeb0 ca47 	vmov.f32	s24, s14
 80108a2:	eef0 ca67 	vmov.f32	s25, s15
 80108a6:	2700      	movs	r7, #0
 80108a8:	eeb0 da47 	vmov.f32	s26, s14
 80108ac:	eef0 da67 	vmov.f32	s27, s15
 80108b0:	ec5b ab10 	vmov	sl, fp, d0
 80108b4:	46b3      	mov	fp, r6
 80108b6:	4650      	mov	r0, sl
 80108b8:	4659      	mov	r1, fp
 80108ba:	ec43 2b1a 	vmov	d10, r2, r3
 80108be:	f7ef fce3 	bl	8000288 <__aeabi_dsub>
 80108c2:	ec53 2b1a 	vmov	r2, r3, d10
 80108c6:	4680      	mov	r8, r0
 80108c8:	4689      	mov	r9, r1
 80108ca:	4650      	mov	r0, sl
 80108cc:	4659      	mov	r1, fp
 80108ce:	f7ef fcdd 	bl	800028c <__adddf3>
 80108d2:	4602      	mov	r2, r0
 80108d4:	460b      	mov	r3, r1
 80108d6:	2000      	movs	r0, #0
 80108d8:	49c3      	ldr	r1, [pc, #780]	; (8010be8 <__ieee754_pow+0x5d8>)
 80108da:	f7ef ffb7 	bl	800084c <__aeabi_ddiv>
 80108de:	ec41 0b1b 	vmov	d11, r0, r1
 80108e2:	4640      	mov	r0, r8
 80108e4:	ec53 2b1b 	vmov	r2, r3, d11
 80108e8:	4649      	mov	r1, r9
 80108ea:	f7ef fe85 	bl	80005f8 <__aeabi_dmul>
 80108ee:	ec41 0b18 	vmov	d8, r0, r1
 80108f2:	460a      	mov	r2, r1
 80108f4:	4601      	mov	r1, r0
 80108f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80108fa:	2100      	movs	r1, #0
 80108fc:	9102      	str	r1, [sp, #8]
 80108fe:	1076      	asrs	r6, r6, #1
 8010900:	ec4b ab19 	vmov	d9, sl, fp
 8010904:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8010908:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 801090c:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 8010910:	2000      	movs	r0, #0
 8010912:	19d9      	adds	r1, r3, r7
 8010914:	4606      	mov	r6, r0
 8010916:	460f      	mov	r7, r1
 8010918:	4602      	mov	r2, r0
 801091a:	460b      	mov	r3, r1
 801091c:	4650      	mov	r0, sl
 801091e:	4659      	mov	r1, fp
 8010920:	f7ef fe6a 	bl	80005f8 <__aeabi_dmul>
 8010924:	4602      	mov	r2, r0
 8010926:	460b      	mov	r3, r1
 8010928:	4640      	mov	r0, r8
 801092a:	4649      	mov	r1, r9
 801092c:	f7ef fcac 	bl	8000288 <__aeabi_dsub>
 8010930:	ec53 2b1a 	vmov	r2, r3, d10
 8010934:	4680      	mov	r8, r0
 8010936:	4689      	mov	r9, r1
 8010938:	4630      	mov	r0, r6
 801093a:	4639      	mov	r1, r7
 801093c:	f7ef fca4 	bl	8000288 <__aeabi_dsub>
 8010940:	4602      	mov	r2, r0
 8010942:	460b      	mov	r3, r1
 8010944:	ec51 0b19 	vmov	r0, r1, d9
 8010948:	f7ef fc9e 	bl	8000288 <__aeabi_dsub>
 801094c:	4652      	mov	r2, sl
 801094e:	465b      	mov	r3, fp
 8010950:	f7ef fe52 	bl	80005f8 <__aeabi_dmul>
 8010954:	4602      	mov	r2, r0
 8010956:	460b      	mov	r3, r1
 8010958:	4640      	mov	r0, r8
 801095a:	4649      	mov	r1, r9
 801095c:	f7ef fc94 	bl	8000288 <__aeabi_dsub>
 8010960:	ec53 2b1b 	vmov	r2, r3, d11
 8010964:	f7ef fe48 	bl	80005f8 <__aeabi_dmul>
 8010968:	ec53 2b18 	vmov	r2, r3, d8
 801096c:	ec41 0b1b 	vmov	d11, r0, r1
 8010970:	ec51 0b18 	vmov	r0, r1, d8
 8010974:	f7ef fe40 	bl	80005f8 <__aeabi_dmul>
 8010978:	a383      	add	r3, pc, #524	; (adr r3, 8010b88 <__ieee754_pow+0x578>)
 801097a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801097e:	4606      	mov	r6, r0
 8010980:	460f      	mov	r7, r1
 8010982:	f7ef fe39 	bl	80005f8 <__aeabi_dmul>
 8010986:	a382      	add	r3, pc, #520	; (adr r3, 8010b90 <__ieee754_pow+0x580>)
 8010988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098c:	f7ef fc7e 	bl	800028c <__adddf3>
 8010990:	4632      	mov	r2, r6
 8010992:	463b      	mov	r3, r7
 8010994:	f7ef fe30 	bl	80005f8 <__aeabi_dmul>
 8010998:	a37f      	add	r3, pc, #508	; (adr r3, 8010b98 <__ieee754_pow+0x588>)
 801099a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099e:	f7ef fc75 	bl	800028c <__adddf3>
 80109a2:	4632      	mov	r2, r6
 80109a4:	463b      	mov	r3, r7
 80109a6:	f7ef fe27 	bl	80005f8 <__aeabi_dmul>
 80109aa:	a37d      	add	r3, pc, #500	; (adr r3, 8010ba0 <__ieee754_pow+0x590>)
 80109ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b0:	f7ef fc6c 	bl	800028c <__adddf3>
 80109b4:	4632      	mov	r2, r6
 80109b6:	463b      	mov	r3, r7
 80109b8:	f7ef fe1e 	bl	80005f8 <__aeabi_dmul>
 80109bc:	a37a      	add	r3, pc, #488	; (adr r3, 8010ba8 <__ieee754_pow+0x598>)
 80109be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c2:	f7ef fc63 	bl	800028c <__adddf3>
 80109c6:	4632      	mov	r2, r6
 80109c8:	463b      	mov	r3, r7
 80109ca:	f7ef fe15 	bl	80005f8 <__aeabi_dmul>
 80109ce:	a378      	add	r3, pc, #480	; (adr r3, 8010bb0 <__ieee754_pow+0x5a0>)
 80109d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d4:	f7ef fc5a 	bl	800028c <__adddf3>
 80109d8:	4632      	mov	r2, r6
 80109da:	4680      	mov	r8, r0
 80109dc:	4689      	mov	r9, r1
 80109de:	463b      	mov	r3, r7
 80109e0:	4630      	mov	r0, r6
 80109e2:	4639      	mov	r1, r7
 80109e4:	f7ef fe08 	bl	80005f8 <__aeabi_dmul>
 80109e8:	4602      	mov	r2, r0
 80109ea:	460b      	mov	r3, r1
 80109ec:	4640      	mov	r0, r8
 80109ee:	4649      	mov	r1, r9
 80109f0:	f7ef fe02 	bl	80005f8 <__aeabi_dmul>
 80109f4:	4652      	mov	r2, sl
 80109f6:	4606      	mov	r6, r0
 80109f8:	460f      	mov	r7, r1
 80109fa:	465b      	mov	r3, fp
 80109fc:	ec51 0b18 	vmov	r0, r1, d8
 8010a00:	f7ef fc44 	bl	800028c <__adddf3>
 8010a04:	ec53 2b1b 	vmov	r2, r3, d11
 8010a08:	f7ef fdf6 	bl	80005f8 <__aeabi_dmul>
 8010a0c:	4632      	mov	r2, r6
 8010a0e:	463b      	mov	r3, r7
 8010a10:	f7ef fc3c 	bl	800028c <__adddf3>
 8010a14:	4652      	mov	r2, sl
 8010a16:	ec41 0b1a 	vmov	d10, r0, r1
 8010a1a:	465b      	mov	r3, fp
 8010a1c:	4650      	mov	r0, sl
 8010a1e:	4659      	mov	r1, fp
 8010a20:	f7ef fdea 	bl	80005f8 <__aeabi_dmul>
 8010a24:	4b71      	ldr	r3, [pc, #452]	; (8010bec <__ieee754_pow+0x5dc>)
 8010a26:	2200      	movs	r2, #0
 8010a28:	4680      	mov	r8, r0
 8010a2a:	4689      	mov	r9, r1
 8010a2c:	f7ef fc2e 	bl	800028c <__adddf3>
 8010a30:	ec53 2b1a 	vmov	r2, r3, d10
 8010a34:	f7ef fc2a 	bl	800028c <__adddf3>
 8010a38:	4650      	mov	r0, sl
 8010a3a:	460f      	mov	r7, r1
 8010a3c:	4659      	mov	r1, fp
 8010a3e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8010a42:	463b      	mov	r3, r7
 8010a44:	4652      	mov	r2, sl
 8010a46:	f7ef fdd7 	bl	80005f8 <__aeabi_dmul>
 8010a4a:	4b68      	ldr	r3, [pc, #416]	; (8010bec <__ieee754_pow+0x5dc>)
 8010a4c:	ec41 0b19 	vmov	d9, r0, r1
 8010a50:	2200      	movs	r2, #0
 8010a52:	4650      	mov	r0, sl
 8010a54:	4639      	mov	r1, r7
 8010a56:	f7ef fc17 	bl	8000288 <__aeabi_dsub>
 8010a5a:	4642      	mov	r2, r8
 8010a5c:	464b      	mov	r3, r9
 8010a5e:	f7ef fc13 	bl	8000288 <__aeabi_dsub>
 8010a62:	4602      	mov	r2, r0
 8010a64:	460b      	mov	r3, r1
 8010a66:	ec51 0b1a 	vmov	r0, r1, d10
 8010a6a:	f7ef fc0d 	bl	8000288 <__aeabi_dsub>
 8010a6e:	ec53 2b18 	vmov	r2, r3, d8
 8010a72:	f7ef fdc1 	bl	80005f8 <__aeabi_dmul>
 8010a76:	4652      	mov	r2, sl
 8010a78:	463b      	mov	r3, r7
 8010a7a:	4606      	mov	r6, r0
 8010a7c:	460f      	mov	r7, r1
 8010a7e:	ec51 0b1b 	vmov	r0, r1, d11
 8010a82:	f7ef fdb9 	bl	80005f8 <__aeabi_dmul>
 8010a86:	4602      	mov	r2, r0
 8010a88:	460b      	mov	r3, r1
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	4639      	mov	r1, r7
 8010a8e:	f7ef fbfd 	bl	800028c <__adddf3>
 8010a92:	4680      	mov	r8, r0
 8010a94:	4689      	mov	r9, r1
 8010a96:	4642      	mov	r2, r8
 8010a98:	464b      	mov	r3, r9
 8010a9a:	ec51 0b19 	vmov	r0, r1, d9
 8010a9e:	f7ef fbf5 	bl	800028c <__adddf3>
 8010aa2:	a345      	add	r3, pc, #276	; (adr r3, 8010bb8 <__ieee754_pow+0x5a8>)
 8010aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa8:	4650      	mov	r0, sl
 8010aaa:	460f      	mov	r7, r1
 8010aac:	f7ef fda4 	bl	80005f8 <__aeabi_dmul>
 8010ab0:	ec53 2b19 	vmov	r2, r3, d9
 8010ab4:	ec41 0b19 	vmov	d9, r0, r1
 8010ab8:	4650      	mov	r0, sl
 8010aba:	4639      	mov	r1, r7
 8010abc:	f7ef fbe4 	bl	8000288 <__aeabi_dsub>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	460b      	mov	r3, r1
 8010ac4:	4640      	mov	r0, r8
 8010ac6:	4649      	mov	r1, r9
 8010ac8:	f7ef fbde 	bl	8000288 <__aeabi_dsub>
 8010acc:	a33c      	add	r3, pc, #240	; (adr r3, 8010bc0 <__ieee754_pow+0x5b0>)
 8010ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad2:	f7ef fd91 	bl	80005f8 <__aeabi_dmul>
 8010ad6:	4602      	mov	r2, r0
 8010ad8:	460b      	mov	r3, r1
 8010ada:	4616      	mov	r6, r2
 8010adc:	4650      	mov	r0, sl
 8010ade:	4639      	mov	r1, r7
 8010ae0:	461f      	mov	r7, r3
 8010ae2:	a339      	add	r3, pc, #228	; (adr r3, 8010bc8 <__ieee754_pow+0x5b8>)
 8010ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae8:	f7ef fd86 	bl	80005f8 <__aeabi_dmul>
 8010aec:	4602      	mov	r2, r0
 8010aee:	460b      	mov	r3, r1
 8010af0:	4630      	mov	r0, r6
 8010af2:	4639      	mov	r1, r7
 8010af4:	f7ef fbca 	bl	800028c <__adddf3>
 8010af8:	ec53 2b1d 	vmov	r2, r3, d13
 8010afc:	f7ef fbc6 	bl	800028c <__adddf3>
 8010b00:	4680      	mov	r8, r0
 8010b02:	9805      	ldr	r0, [sp, #20]
 8010b04:	4689      	mov	r9, r1
 8010b06:	f7ef fd0d 	bl	8000524 <__aeabi_i2d>
 8010b0a:	4642      	mov	r2, r8
 8010b0c:	4682      	mov	sl, r0
 8010b0e:	468b      	mov	fp, r1
 8010b10:	464b      	mov	r3, r9
 8010b12:	ec51 0b19 	vmov	r0, r1, d9
 8010b16:	f7ef fbb9 	bl	800028c <__adddf3>
 8010b1a:	ec53 2b1c 	vmov	r2, r3, d12
 8010b1e:	f7ef fbb5 	bl	800028c <__adddf3>
 8010b22:	4652      	mov	r2, sl
 8010b24:	465b      	mov	r3, fp
 8010b26:	f7ef fbb1 	bl	800028c <__adddf3>
 8010b2a:	4652      	mov	r2, sl
 8010b2c:	465b      	mov	r3, fp
 8010b2e:	2000      	movs	r0, #0
 8010b30:	4606      	mov	r6, r0
 8010b32:	460f      	mov	r7, r1
 8010b34:	f7ef fba8 	bl	8000288 <__aeabi_dsub>
 8010b38:	ec53 2b1c 	vmov	r2, r3, d12
 8010b3c:	f7ef fba4 	bl	8000288 <__aeabi_dsub>
 8010b40:	ec53 2b19 	vmov	r2, r3, d9
 8010b44:	f7ef fba0 	bl	8000288 <__aeabi_dsub>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	460b      	mov	r3, r1
 8010b4c:	4640      	mov	r0, r8
 8010b4e:	4649      	mov	r1, r9
 8010b50:	f7ef fb9a 	bl	8000288 <__aeabi_dsub>
 8010b54:	9b00      	ldr	r3, [sp, #0]
 8010b56:	9a04      	ldr	r2, [sp, #16]
 8010b58:	3b01      	subs	r3, #1
 8010b5a:	4313      	orrs	r3, r2
 8010b5c:	4682      	mov	sl, r0
 8010b5e:	468b      	mov	fp, r1
 8010b60:	f040 81c2 	bne.w	8010ee8 <__ieee754_pow+0x8d8>
 8010b64:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8010bd0 <__ieee754_pow+0x5c0>
 8010b68:	eeb0 8a47 	vmov.f32	s16, s14
 8010b6c:	eef0 8a67 	vmov.f32	s17, s15
 8010b70:	e03e      	b.n	8010bf0 <__ieee754_pow+0x5e0>
 8010b72:	bf00      	nop
 8010b74:	f3af 8000 	nop.w
 8010b78:	00000000 	.word	0x00000000
 8010b7c:	3ff00000 	.word	0x3ff00000
	...
 8010b88:	4a454eef 	.word	0x4a454eef
 8010b8c:	3fca7e28 	.word	0x3fca7e28
 8010b90:	93c9db65 	.word	0x93c9db65
 8010b94:	3fcd864a 	.word	0x3fcd864a
 8010b98:	a91d4101 	.word	0xa91d4101
 8010b9c:	3fd17460 	.word	0x3fd17460
 8010ba0:	518f264d 	.word	0x518f264d
 8010ba4:	3fd55555 	.word	0x3fd55555
 8010ba8:	db6fabff 	.word	0xdb6fabff
 8010bac:	3fdb6db6 	.word	0x3fdb6db6
 8010bb0:	33333303 	.word	0x33333303
 8010bb4:	3fe33333 	.word	0x3fe33333
 8010bb8:	e0000000 	.word	0xe0000000
 8010bbc:	3feec709 	.word	0x3feec709
 8010bc0:	dc3a03fd 	.word	0xdc3a03fd
 8010bc4:	3feec709 	.word	0x3feec709
 8010bc8:	145b01f5 	.word	0x145b01f5
 8010bcc:	be3e2fe0 	.word	0xbe3e2fe0
 8010bd0:	00000000 	.word	0x00000000
 8010bd4:	bff00000 	.word	0xbff00000
 8010bd8:	7ff00000 	.word	0x7ff00000
 8010bdc:	43400000 	.word	0x43400000
 8010be0:	0003988e 	.word	0x0003988e
 8010be4:	000bb679 	.word	0x000bb679
 8010be8:	3ff00000 	.word	0x3ff00000
 8010bec:	40080000 	.word	0x40080000
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	e9cd 4500 	strd	r4, r5, [sp]
 8010bf6:	9300      	str	r3, [sp, #0]
 8010bf8:	e9dd 8900 	ldrd	r8, r9, [sp]
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	4642      	mov	r2, r8
 8010c00:	464b      	mov	r3, r9
 8010c02:	4629      	mov	r1, r5
 8010c04:	f7ef fb40 	bl	8000288 <__aeabi_dsub>
 8010c08:	4632      	mov	r2, r6
 8010c0a:	463b      	mov	r3, r7
 8010c0c:	f7ef fcf4 	bl	80005f8 <__aeabi_dmul>
 8010c10:	4622      	mov	r2, r4
 8010c12:	462b      	mov	r3, r5
 8010c14:	4604      	mov	r4, r0
 8010c16:	460d      	mov	r5, r1
 8010c18:	4650      	mov	r0, sl
 8010c1a:	4659      	mov	r1, fp
 8010c1c:	f7ef fcec 	bl	80005f8 <__aeabi_dmul>
 8010c20:	4602      	mov	r2, r0
 8010c22:	460b      	mov	r3, r1
 8010c24:	4620      	mov	r0, r4
 8010c26:	4629      	mov	r1, r5
 8010c28:	f7ef fb30 	bl	800028c <__adddf3>
 8010c2c:	4642      	mov	r2, r8
 8010c2e:	4604      	mov	r4, r0
 8010c30:	460d      	mov	r5, r1
 8010c32:	464b      	mov	r3, r9
 8010c34:	4630      	mov	r0, r6
 8010c36:	4639      	mov	r1, r7
 8010c38:	f7ef fcde 	bl	80005f8 <__aeabi_dmul>
 8010c3c:	4626      	mov	r6, r4
 8010c3e:	462f      	mov	r7, r5
 8010c40:	4604      	mov	r4, r0
 8010c42:	460d      	mov	r5, r1
 8010c44:	462b      	mov	r3, r5
 8010c46:	4630      	mov	r0, r6
 8010c48:	4639      	mov	r1, r7
 8010c4a:	4622      	mov	r2, r4
 8010c4c:	f7ef fb1e 	bl	800028c <__adddf3>
 8010c50:	4bc7      	ldr	r3, [pc, #796]	; (8010f70 <__ieee754_pow+0x960>)
 8010c52:	4299      	cmp	r1, r3
 8010c54:	4680      	mov	r8, r0
 8010c56:	4689      	mov	r9, r1
 8010c58:	468a      	mov	sl, r1
 8010c5a:	f340 811f 	ble.w	8010e9c <__ieee754_pow+0x88c>
 8010c5e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010c62:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010c66:	4303      	orrs	r3, r0
 8010c68:	f040 823e 	bne.w	80110e8 <__ieee754_pow+0xad8>
 8010c6c:	a3aa      	add	r3, pc, #680	; (adr r3, 8010f18 <__ieee754_pow+0x908>)
 8010c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c72:	4630      	mov	r0, r6
 8010c74:	4639      	mov	r1, r7
 8010c76:	f7ef fb09 	bl	800028c <__adddf3>
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	4640      	mov	r0, r8
 8010c80:	4649      	mov	r1, r9
 8010c82:	4690      	mov	r8, r2
 8010c84:	4699      	mov	r9, r3
 8010c86:	4622      	mov	r2, r4
 8010c88:	462b      	mov	r3, r5
 8010c8a:	f7ef fafd 	bl	8000288 <__aeabi_dsub>
 8010c8e:	4602      	mov	r2, r0
 8010c90:	460b      	mov	r3, r1
 8010c92:	4640      	mov	r0, r8
 8010c94:	4649      	mov	r1, r9
 8010c96:	f7ef ff3f 	bl	8000b18 <__aeabi_dcmpgt>
 8010c9a:	2800      	cmp	r0, #0
 8010c9c:	f040 8224 	bne.w	80110e8 <__ieee754_pow+0xad8>
 8010ca0:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8010ca4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010ca8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010cac:	fa42 f303 	asr.w	r3, r2, r3
 8010cb0:	4453      	add	r3, sl
 8010cb2:	49b0      	ldr	r1, [pc, #704]	; (8010f74 <__ieee754_pow+0x964>)
 8010cb4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010cb8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010cbc:	fa41 fc02 	asr.w	ip, r1, r2
 8010cc0:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8010cc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010cc8:	f1c2 0214 	rsb	r2, r2, #20
 8010ccc:	fa41 f202 	asr.w	r2, r1, r2
 8010cd0:	2000      	movs	r0, #0
 8010cd2:	ea23 010c 	bic.w	r1, r3, ip
 8010cd6:	f1ba 0f00 	cmp.w	sl, #0
 8010cda:	9200      	str	r2, [sp, #0]
 8010cdc:	460b      	mov	r3, r1
 8010cde:	4602      	mov	r2, r0
 8010ce0:	da02      	bge.n	8010ce8 <__ieee754_pow+0x6d8>
 8010ce2:	9900      	ldr	r1, [sp, #0]
 8010ce4:	4249      	negs	r1, r1
 8010ce6:	9100      	str	r1, [sp, #0]
 8010ce8:	4620      	mov	r0, r4
 8010cea:	4629      	mov	r1, r5
 8010cec:	f7ef facc 	bl	8000288 <__aeabi_dsub>
 8010cf0:	9b00      	ldr	r3, [sp, #0]
 8010cf2:	051b      	lsls	r3, r3, #20
 8010cf4:	9302      	str	r3, [sp, #8]
 8010cf6:	4602      	mov	r2, r0
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	4604      	mov	r4, r0
 8010cfc:	460d      	mov	r5, r1
 8010cfe:	4630      	mov	r0, r6
 8010d00:	4639      	mov	r1, r7
 8010d02:	f7ef fac3 	bl	800028c <__adddf3>
 8010d06:	4689      	mov	r9, r1
 8010d08:	f04f 0800 	mov.w	r8, #0
 8010d0c:	a384      	add	r3, pc, #528	; (adr r3, 8010f20 <__ieee754_pow+0x910>)
 8010d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d12:	4640      	mov	r0, r8
 8010d14:	4649      	mov	r1, r9
 8010d16:	f7ef fc6f 	bl	80005f8 <__aeabi_dmul>
 8010d1a:	4622      	mov	r2, r4
 8010d1c:	462b      	mov	r3, r5
 8010d1e:	4682      	mov	sl, r0
 8010d20:	468b      	mov	fp, r1
 8010d22:	4640      	mov	r0, r8
 8010d24:	4649      	mov	r1, r9
 8010d26:	f7ef faaf 	bl	8000288 <__aeabi_dsub>
 8010d2a:	4602      	mov	r2, r0
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	4630      	mov	r0, r6
 8010d30:	4639      	mov	r1, r7
 8010d32:	f7ef faa9 	bl	8000288 <__aeabi_dsub>
 8010d36:	a37c      	add	r3, pc, #496	; (adr r3, 8010f28 <__ieee754_pow+0x918>)
 8010d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3c:	f7ef fc5c 	bl	80005f8 <__aeabi_dmul>
 8010d40:	a37b      	add	r3, pc, #492	; (adr r3, 8010f30 <__ieee754_pow+0x920>)
 8010d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d46:	4604      	mov	r4, r0
 8010d48:	460d      	mov	r5, r1
 8010d4a:	4640      	mov	r0, r8
 8010d4c:	4649      	mov	r1, r9
 8010d4e:	f7ef fc53 	bl	80005f8 <__aeabi_dmul>
 8010d52:	4602      	mov	r2, r0
 8010d54:	460b      	mov	r3, r1
 8010d56:	4620      	mov	r0, r4
 8010d58:	4629      	mov	r1, r5
 8010d5a:	f7ef fa97 	bl	800028c <__adddf3>
 8010d5e:	4606      	mov	r6, r0
 8010d60:	460f      	mov	r7, r1
 8010d62:	4632      	mov	r2, r6
 8010d64:	463b      	mov	r3, r7
 8010d66:	4650      	mov	r0, sl
 8010d68:	4659      	mov	r1, fp
 8010d6a:	f7ef fa8f 	bl	800028c <__adddf3>
 8010d6e:	4652      	mov	r2, sl
 8010d70:	465b      	mov	r3, fp
 8010d72:	4604      	mov	r4, r0
 8010d74:	460d      	mov	r5, r1
 8010d76:	f7ef fa87 	bl	8000288 <__aeabi_dsub>
 8010d7a:	4602      	mov	r2, r0
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	4630      	mov	r0, r6
 8010d80:	4639      	mov	r1, r7
 8010d82:	f7ef fa81 	bl	8000288 <__aeabi_dsub>
 8010d86:	4622      	mov	r2, r4
 8010d88:	4680      	mov	r8, r0
 8010d8a:	4689      	mov	r9, r1
 8010d8c:	462b      	mov	r3, r5
 8010d8e:	4620      	mov	r0, r4
 8010d90:	4629      	mov	r1, r5
 8010d92:	f7ef fc31 	bl	80005f8 <__aeabi_dmul>
 8010d96:	a368      	add	r3, pc, #416	; (adr r3, 8010f38 <__ieee754_pow+0x928>)
 8010d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d9c:	4606      	mov	r6, r0
 8010d9e:	460f      	mov	r7, r1
 8010da0:	f7ef fc2a 	bl	80005f8 <__aeabi_dmul>
 8010da4:	a366      	add	r3, pc, #408	; (adr r3, 8010f40 <__ieee754_pow+0x930>)
 8010da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010daa:	f7ef fa6d 	bl	8000288 <__aeabi_dsub>
 8010dae:	4632      	mov	r2, r6
 8010db0:	463b      	mov	r3, r7
 8010db2:	f7ef fc21 	bl	80005f8 <__aeabi_dmul>
 8010db6:	a364      	add	r3, pc, #400	; (adr r3, 8010f48 <__ieee754_pow+0x938>)
 8010db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dbc:	f7ef fa66 	bl	800028c <__adddf3>
 8010dc0:	4632      	mov	r2, r6
 8010dc2:	463b      	mov	r3, r7
 8010dc4:	f7ef fc18 	bl	80005f8 <__aeabi_dmul>
 8010dc8:	a361      	add	r3, pc, #388	; (adr r3, 8010f50 <__ieee754_pow+0x940>)
 8010dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dce:	f7ef fa5b 	bl	8000288 <__aeabi_dsub>
 8010dd2:	4632      	mov	r2, r6
 8010dd4:	463b      	mov	r3, r7
 8010dd6:	f7ef fc0f 	bl	80005f8 <__aeabi_dmul>
 8010dda:	a35f      	add	r3, pc, #380	; (adr r3, 8010f58 <__ieee754_pow+0x948>)
 8010ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de0:	f7ef fa54 	bl	800028c <__adddf3>
 8010de4:	4632      	mov	r2, r6
 8010de6:	463b      	mov	r3, r7
 8010de8:	f7ef fc06 	bl	80005f8 <__aeabi_dmul>
 8010dec:	4602      	mov	r2, r0
 8010dee:	460b      	mov	r3, r1
 8010df0:	4620      	mov	r0, r4
 8010df2:	4629      	mov	r1, r5
 8010df4:	f7ef fa48 	bl	8000288 <__aeabi_dsub>
 8010df8:	4606      	mov	r6, r0
 8010dfa:	460f      	mov	r7, r1
 8010dfc:	4632      	mov	r2, r6
 8010dfe:	463b      	mov	r3, r7
 8010e00:	4620      	mov	r0, r4
 8010e02:	4629      	mov	r1, r5
 8010e04:	f7ef fbf8 	bl	80005f8 <__aeabi_dmul>
 8010e08:	4602      	mov	r2, r0
 8010e0a:	460b      	mov	r3, r1
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	4639      	mov	r1, r7
 8010e10:	4616      	mov	r6, r2
 8010e12:	461f      	mov	r7, r3
 8010e14:	2200      	movs	r2, #0
 8010e16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010e1a:	f7ef fa35 	bl	8000288 <__aeabi_dsub>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	460b      	mov	r3, r1
 8010e22:	4630      	mov	r0, r6
 8010e24:	4639      	mov	r1, r7
 8010e26:	f7ef fd11 	bl	800084c <__aeabi_ddiv>
 8010e2a:	4642      	mov	r2, r8
 8010e2c:	4606      	mov	r6, r0
 8010e2e:	460f      	mov	r7, r1
 8010e30:	464b      	mov	r3, r9
 8010e32:	4620      	mov	r0, r4
 8010e34:	4629      	mov	r1, r5
 8010e36:	f7ef fbdf 	bl	80005f8 <__aeabi_dmul>
 8010e3a:	4642      	mov	r2, r8
 8010e3c:	464b      	mov	r3, r9
 8010e3e:	f7ef fa25 	bl	800028c <__adddf3>
 8010e42:	4602      	mov	r2, r0
 8010e44:	460b      	mov	r3, r1
 8010e46:	4630      	mov	r0, r6
 8010e48:	4639      	mov	r1, r7
 8010e4a:	f7ef fa1d 	bl	8000288 <__aeabi_dsub>
 8010e4e:	4622      	mov	r2, r4
 8010e50:	462b      	mov	r3, r5
 8010e52:	f7ef fa19 	bl	8000288 <__aeabi_dsub>
 8010e56:	4602      	mov	r2, r0
 8010e58:	460b      	mov	r3, r1
 8010e5a:	2000      	movs	r0, #0
 8010e5c:	4946      	ldr	r1, [pc, #280]	; (8010f78 <__ieee754_pow+0x968>)
 8010e5e:	f7ef fa13 	bl	8000288 <__aeabi_dsub>
 8010e62:	9a02      	ldr	r2, [sp, #8]
 8010e64:	460b      	mov	r3, r1
 8010e66:	4413      	add	r3, r2
 8010e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e6c:	f2c0 8147 	blt.w	80110fe <__ieee754_pow+0xaee>
 8010e70:	4619      	mov	r1, r3
 8010e72:	ec53 2b18 	vmov	r2, r3, d8
 8010e76:	f7ef fbbf 	bl	80005f8 <__aeabi_dmul>
 8010e7a:	ec41 0b10 	vmov	d0, r0, r1
 8010e7e:	f7ff bbe6 	b.w	801064e <__ieee754_pow+0x3e>
 8010e82:	f1b8 0f00 	cmp.w	r8, #0
 8010e86:	f6ff ac25 	blt.w	80106d4 <__ieee754_pow+0xc4>
 8010e8a:	ec47 6b10 	vmov	d0, r6, r7
 8010e8e:	b007      	add	sp, #28
 8010e90:	ecbd 8b0c 	vpop	{d8-d13}
 8010e94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e98:	f000 bb9c 	b.w	80115d4 <__ieee754_sqrt>
 8010e9c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8010f80 <__ieee754_pow+0x970>
 8010ea0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010ea4:	4563      	cmp	r3, ip
 8010ea6:	f340 80dd 	ble.w	8011064 <__ieee754_pow+0xa54>
 8010eaa:	4b34      	ldr	r3, [pc, #208]	; (8010f7c <__ieee754_pow+0x96c>)
 8010eac:	440b      	add	r3, r1
 8010eae:	4303      	orrs	r3, r0
 8010eb0:	d10a      	bne.n	8010ec8 <__ieee754_pow+0x8b8>
 8010eb2:	4622      	mov	r2, r4
 8010eb4:	462b      	mov	r3, r5
 8010eb6:	f7ef f9e7 	bl	8000288 <__aeabi_dsub>
 8010eba:	4632      	mov	r2, r6
 8010ebc:	463b      	mov	r3, r7
 8010ebe:	f7ef fe21 	bl	8000b04 <__aeabi_dcmpge>
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	f43f aeec 	beq.w	8010ca0 <__ieee754_pow+0x690>
 8010ec8:	ec51 0b18 	vmov	r0, r1, d8
 8010ecc:	2200      	movs	r2, #0
 8010ece:	2300      	movs	r3, #0
 8010ed0:	f7ef fe04 	bl	8000adc <__aeabi_dcmplt>
 8010ed4:	3800      	subs	r0, #0
 8010ed6:	bf18      	it	ne
 8010ed8:	2001      	movne	r0, #1
 8010eda:	b007      	add	sp, #28
 8010edc:	ecbd 8b0c 	vpop	{d8-d13}
 8010ee0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee4:	f001 ba8c 	b.w	8012400 <__math_uflow>
 8010ee8:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8010f60 <__ieee754_pow+0x950>
 8010eec:	eeb0 8a47 	vmov.f32	s16, s14
 8010ef0:	eef0 8a67 	vmov.f32	s17, s15
 8010ef4:	e67c      	b.n	8010bf0 <__ieee754_pow+0x5e0>
 8010ef6:	f1bb 0f00 	cmp.w	fp, #0
 8010efa:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8010f68 <__ieee754_pow+0x958>
 8010efe:	f6bf aba6 	bge.w	801064e <__ieee754_pow+0x3e>
 8010f02:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8010f06:	ee00 4a10 	vmov	s0, r4
 8010f0a:	ee00 3a90 	vmov	s1, r3
 8010f0e:	f7ff bb9e 	b.w	801064e <__ieee754_pow+0x3e>
 8010f12:	bf00      	nop
 8010f14:	f3af 8000 	nop.w
 8010f18:	652b82fe 	.word	0x652b82fe
 8010f1c:	3c971547 	.word	0x3c971547
 8010f20:	00000000 	.word	0x00000000
 8010f24:	3fe62e43 	.word	0x3fe62e43
 8010f28:	fefa39ef 	.word	0xfefa39ef
 8010f2c:	3fe62e42 	.word	0x3fe62e42
 8010f30:	0ca86c39 	.word	0x0ca86c39
 8010f34:	be205c61 	.word	0xbe205c61
 8010f38:	72bea4d0 	.word	0x72bea4d0
 8010f3c:	3e663769 	.word	0x3e663769
 8010f40:	c5d26bf1 	.word	0xc5d26bf1
 8010f44:	3ebbbd41 	.word	0x3ebbbd41
 8010f48:	af25de2c 	.word	0xaf25de2c
 8010f4c:	3f11566a 	.word	0x3f11566a
 8010f50:	16bebd93 	.word	0x16bebd93
 8010f54:	3f66c16c 	.word	0x3f66c16c
 8010f58:	5555553e 	.word	0x5555553e
 8010f5c:	3fc55555 	.word	0x3fc55555
 8010f60:	00000000 	.word	0x00000000
 8010f64:	3ff00000 	.word	0x3ff00000
	...
 8010f70:	408fffff 	.word	0x408fffff
 8010f74:	000fffff 	.word	0x000fffff
 8010f78:	3ff00000 	.word	0x3ff00000
 8010f7c:	3f6f3400 	.word	0x3f6f3400
 8010f80:	4090cbff 	.word	0x4090cbff
 8010f84:	4599      	cmp	r9, r3
 8010f86:	db75      	blt.n	8011074 <__ieee754_pow+0xa64>
 8010f88:	4b7b      	ldr	r3, [pc, #492]	; (8011178 <__ieee754_pow+0xb68>)
 8010f8a:	4599      	cmp	r9, r3
 8010f8c:	f73f abbe 	bgt.w	801070c <__ieee754_pow+0xfc>
 8010f90:	ec51 0b10 	vmov	r0, r1, d0
 8010f94:	4b78      	ldr	r3, [pc, #480]	; (8011178 <__ieee754_pow+0xb68>)
 8010f96:	2200      	movs	r2, #0
 8010f98:	f7ef f976 	bl	8000288 <__aeabi_dsub>
 8010f9c:	a366      	add	r3, pc, #408	; (adr r3, 8011138 <__ieee754_pow+0xb28>)
 8010f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa2:	4606      	mov	r6, r0
 8010fa4:	460f      	mov	r7, r1
 8010fa6:	f7ef fb27 	bl	80005f8 <__aeabi_dmul>
 8010faa:	a365      	add	r3, pc, #404	; (adr r3, 8011140 <__ieee754_pow+0xb30>)
 8010fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb0:	4682      	mov	sl, r0
 8010fb2:	468b      	mov	fp, r1
 8010fb4:	4630      	mov	r0, r6
 8010fb6:	4639      	mov	r1, r7
 8010fb8:	f7ef fb1e 	bl	80005f8 <__aeabi_dmul>
 8010fbc:	4b6f      	ldr	r3, [pc, #444]	; (801117c <__ieee754_pow+0xb6c>)
 8010fbe:	ec41 0b18 	vmov	d8, r0, r1
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	4639      	mov	r1, r7
 8010fc8:	f7ef fb16 	bl	80005f8 <__aeabi_dmul>
 8010fcc:	4602      	mov	r2, r0
 8010fce:	460b      	mov	r3, r1
 8010fd0:	a15d      	add	r1, pc, #372	; (adr r1, 8011148 <__ieee754_pow+0xb38>)
 8010fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fd6:	f7ef f957 	bl	8000288 <__aeabi_dsub>
 8010fda:	4632      	mov	r2, r6
 8010fdc:	463b      	mov	r3, r7
 8010fde:	f7ef fb0b 	bl	80005f8 <__aeabi_dmul>
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	460b      	mov	r3, r1
 8010fe6:	2000      	movs	r0, #0
 8010fe8:	4965      	ldr	r1, [pc, #404]	; (8011180 <__ieee754_pow+0xb70>)
 8010fea:	f7ef f94d 	bl	8000288 <__aeabi_dsub>
 8010fee:	4632      	mov	r2, r6
 8010ff0:	4680      	mov	r8, r0
 8010ff2:	4689      	mov	r9, r1
 8010ff4:	463b      	mov	r3, r7
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	4639      	mov	r1, r7
 8010ffa:	f7ef fafd 	bl	80005f8 <__aeabi_dmul>
 8010ffe:	4602      	mov	r2, r0
 8011000:	460b      	mov	r3, r1
 8011002:	4640      	mov	r0, r8
 8011004:	4649      	mov	r1, r9
 8011006:	f7ef faf7 	bl	80005f8 <__aeabi_dmul>
 801100a:	a351      	add	r3, pc, #324	; (adr r3, 8011150 <__ieee754_pow+0xb40>)
 801100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011010:	f7ef faf2 	bl	80005f8 <__aeabi_dmul>
 8011014:	4602      	mov	r2, r0
 8011016:	460b      	mov	r3, r1
 8011018:	ec51 0b18 	vmov	r0, r1, d8
 801101c:	f7ef f934 	bl	8000288 <__aeabi_dsub>
 8011020:	4680      	mov	r8, r0
 8011022:	4689      	mov	r9, r1
 8011024:	4642      	mov	r2, r8
 8011026:	464b      	mov	r3, r9
 8011028:	4650      	mov	r0, sl
 801102a:	4659      	mov	r1, fp
 801102c:	f7ef f92e 	bl	800028c <__adddf3>
 8011030:	2000      	movs	r0, #0
 8011032:	4652      	mov	r2, sl
 8011034:	465b      	mov	r3, fp
 8011036:	4606      	mov	r6, r0
 8011038:	460f      	mov	r7, r1
 801103a:	e583      	b.n	8010b44 <__ieee754_pow+0x534>
 801103c:	494e      	ldr	r1, [pc, #312]	; (8011178 <__ieee754_pow+0xb68>)
 801103e:	2000      	movs	r0, #0
 8011040:	4632      	mov	r2, r6
 8011042:	463b      	mov	r3, r7
 8011044:	f7ef fc02 	bl	800084c <__aeabi_ddiv>
 8011048:	ec41 0b10 	vmov	d0, r0, r1
 801104c:	f7ff baff 	b.w	801064e <__ieee754_pow+0x3e>
 8011050:	4632      	mov	r2, r6
 8011052:	463b      	mov	r3, r7
 8011054:	4630      	mov	r0, r6
 8011056:	4639      	mov	r1, r7
 8011058:	f7ef face 	bl	80005f8 <__aeabi_dmul>
 801105c:	ec41 0b10 	vmov	d0, r0, r1
 8011060:	f7ff baf5 	b.w	801064e <__ieee754_pow+0x3e>
 8011064:	4a46      	ldr	r2, [pc, #280]	; (8011180 <__ieee754_pow+0xb70>)
 8011066:	4293      	cmp	r3, r2
 8011068:	dc62      	bgt.n	8011130 <__ieee754_pow+0xb20>
 801106a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801106e:	9102      	str	r1, [sp, #8]
 8011070:	9100      	str	r1, [sp, #0]
 8011072:	e649      	b.n	8010d08 <__ieee754_pow+0x6f8>
 8011074:	f1bb 0f00 	cmp.w	fp, #0
 8011078:	f6ff ab4c 	blt.w	8010714 <__ieee754_pow+0x104>
 801107c:	2000      	movs	r0, #0
 801107e:	e72c      	b.n	8010eda <__ieee754_pow+0x8ca>
 8011080:	2b00      	cmp	r3, #0
 8011082:	f47f ab52 	bne.w	801072a <__ieee754_pow+0x11a>
 8011086:	f1c1 0114 	rsb	r1, r1, #20
 801108a:	fa4a f001 	asr.w	r0, sl, r1
 801108e:	fa00 f101 	lsl.w	r1, r0, r1
 8011092:	4551      	cmp	r1, sl
 8011094:	d045      	beq.n	8011122 <__ieee754_pow+0xb12>
 8011096:	9300      	str	r3, [sp, #0]
 8011098:	f7ff bb10 	b.w	80106bc <__ieee754_pow+0xac>
 801109c:	9b00      	ldr	r3, [sp, #0]
 801109e:	2b01      	cmp	r3, #1
 80110a0:	f47f aad5 	bne.w	801064e <__ieee754_pow+0x3e>
 80110a4:	ee10 1a90 	vmov	r1, s1
 80110a8:	ee10 2a10 	vmov	r2, s0
 80110ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80110b0:	ec43 2b10 	vmov	d0, r2, r3
 80110b4:	f7ff bacb 	b.w	801064e <__ieee754_pow+0x3e>
 80110b8:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8011158 <__ieee754_pow+0xb48>
 80110bc:	f7ff bac7 	b.w	801064e <__ieee754_pow+0x3e>
 80110c0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011160 <__ieee754_pow+0xb50>
 80110c4:	eeb0 ca47 	vmov.f32	s24, s14
 80110c8:	eef0 ca67 	vmov.f32	s25, s15
 80110cc:	ed9f 7b26 	vldr	d7, [pc, #152]	; 8011168 <__ieee754_pow+0xb58>
 80110d0:	eeb0 da47 	vmov.f32	s26, s14
 80110d4:	eef0 da67 	vmov.f32	s27, s15
 80110d8:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8011170 <__ieee754_pow+0xb60>
 80110dc:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 80110e0:	ec53 2b17 	vmov	r2, r3, d7
 80110e4:	f7ff bbe4 	b.w	80108b0 <__ieee754_pow+0x2a0>
 80110e8:	ec51 0b18 	vmov	r0, r1, d8
 80110ec:	2200      	movs	r2, #0
 80110ee:	2300      	movs	r3, #0
 80110f0:	f7ef fcf4 	bl	8000adc <__aeabi_dcmplt>
 80110f4:	3800      	subs	r0, #0
 80110f6:	bf18      	it	ne
 80110f8:	2001      	movne	r0, #1
 80110fa:	f7ff bb0c 	b.w	8010716 <__ieee754_pow+0x106>
 80110fe:	ec41 0b10 	vmov	d0, r0, r1
 8011102:	9800      	ldr	r0, [sp, #0]
 8011104:	f001 fa2c 	bl	8012560 <scalbn>
 8011108:	ec51 0b10 	vmov	r0, r1, d0
 801110c:	e6b1      	b.n	8010e72 <__ieee754_pow+0x862>
 801110e:	f000 0001 	and.w	r0, r0, #1
 8011112:	f1c0 0102 	rsb	r1, r0, #2
 8011116:	9100      	str	r1, [sp, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	f43f aacf 	beq.w	80106bc <__ieee754_pow+0xac>
 801111e:	f7ff bad9 	b.w	80106d4 <__ieee754_pow+0xc4>
 8011122:	f000 0001 	and.w	r0, r0, #1
 8011126:	f1c0 0302 	rsb	r3, r0, #2
 801112a:	9300      	str	r3, [sp, #0]
 801112c:	f7ff bac6 	b.w	80106bc <__ieee754_pow+0xac>
 8011130:	151b      	asrs	r3, r3, #20
 8011132:	e5b7      	b.n	8010ca4 <__ieee754_pow+0x694>
 8011134:	f3af 8000 	nop.w
 8011138:	60000000 	.word	0x60000000
 801113c:	3ff71547 	.word	0x3ff71547
 8011140:	f85ddf44 	.word	0xf85ddf44
 8011144:	3e54ae0b 	.word	0x3e54ae0b
 8011148:	55555555 	.word	0x55555555
 801114c:	3fd55555 	.word	0x3fd55555
 8011150:	652b82fe 	.word	0x652b82fe
 8011154:	3ff71547 	.word	0x3ff71547
	...
 8011160:	40000000 	.word	0x40000000
 8011164:	3fe2b803 	.word	0x3fe2b803
 8011168:	43cfd006 	.word	0x43cfd006
 801116c:	3e4cfdeb 	.word	0x3e4cfdeb
 8011170:	00000000 	.word	0x00000000
 8011174:	3ff80000 	.word	0x3ff80000
 8011178:	3ff00000 	.word	0x3ff00000
 801117c:	3fd00000 	.word	0x3fd00000
 8011180:	3fe00000 	.word	0x3fe00000
 8011184:	00000000 	.word	0x00000000

08011188 <__ieee754_rem_pio2>:
 8011188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801118c:	ec53 2b10 	vmov	r2, r3, d0
 8011190:	ed2d 8b04 	vpush	{d8-d9}
 8011194:	4990      	ldr	r1, [pc, #576]	; (80113d8 <__ieee754_rem_pio2+0x250>)
 8011196:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801119a:	428d      	cmp	r5, r1
 801119c:	b08b      	sub	sp, #44	; 0x2c
 801119e:	4604      	mov	r4, r0
 80111a0:	f340 808c 	ble.w	80112bc <__ieee754_rem_pio2+0x134>
 80111a4:	498d      	ldr	r1, [pc, #564]	; (80113dc <__ieee754_rem_pio2+0x254>)
 80111a6:	428d      	cmp	r5, r1
 80111a8:	461f      	mov	r7, r3
 80111aa:	dc2b      	bgt.n	8011204 <__ieee754_rem_pio2+0x7c>
 80111ac:	2f00      	cmp	r7, #0
 80111ae:	4619      	mov	r1, r3
 80111b0:	ee10 0a10 	vmov	r0, s0
 80111b4:	a37e      	add	r3, pc, #504	; (adr r3, 80113b0 <__ieee754_rem_pio2+0x228>)
 80111b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ba:	f340 81b6 	ble.w	801152a <__ieee754_rem_pio2+0x3a2>
 80111be:	f7ef f863 	bl	8000288 <__aeabi_dsub>
 80111c2:	4b87      	ldr	r3, [pc, #540]	; (80113e0 <__ieee754_rem_pio2+0x258>)
 80111c4:	429d      	cmp	r5, r3
 80111c6:	4680      	mov	r8, r0
 80111c8:	4689      	mov	r9, r1
 80111ca:	f000 808f 	beq.w	80112ec <__ieee754_rem_pio2+0x164>
 80111ce:	a37a      	add	r3, pc, #488	; (adr r3, 80113b8 <__ieee754_rem_pio2+0x230>)
 80111d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d4:	f7ef f858 	bl	8000288 <__aeabi_dsub>
 80111d8:	4602      	mov	r2, r0
 80111da:	460b      	mov	r3, r1
 80111dc:	e9c4 2300 	strd	r2, r3, [r4]
 80111e0:	4640      	mov	r0, r8
 80111e2:	4649      	mov	r1, r9
 80111e4:	f7ef f850 	bl	8000288 <__aeabi_dsub>
 80111e8:	a373      	add	r3, pc, #460	; (adr r3, 80113b8 <__ieee754_rem_pio2+0x230>)
 80111ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ee:	f7ef f84b 	bl	8000288 <__aeabi_dsub>
 80111f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80111f6:	2601      	movs	r6, #1
 80111f8:	4630      	mov	r0, r6
 80111fa:	b00b      	add	sp, #44	; 0x2c
 80111fc:	ecbd 8b04 	vpop	{d8-d9}
 8011200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011204:	4977      	ldr	r1, [pc, #476]	; (80113e4 <__ieee754_rem_pio2+0x25c>)
 8011206:	428d      	cmp	r5, r1
 8011208:	f340 8092 	ble.w	8011330 <__ieee754_rem_pio2+0x1a8>
 801120c:	4976      	ldr	r1, [pc, #472]	; (80113e8 <__ieee754_rem_pio2+0x260>)
 801120e:	428d      	cmp	r5, r1
 8011210:	dc61      	bgt.n	80112d6 <__ieee754_rem_pio2+0x14e>
 8011212:	152e      	asrs	r6, r5, #20
 8011214:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8011218:	ee10 0a10 	vmov	r0, s0
 801121c:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 8011220:	4690      	mov	r8, r2
 8011222:	4689      	mov	r9, r1
 8011224:	f7ef fc98 	bl	8000b58 <__aeabi_d2iz>
 8011228:	f7ef f97c 	bl	8000524 <__aeabi_i2d>
 801122c:	4602      	mov	r2, r0
 801122e:	460b      	mov	r3, r1
 8011230:	4640      	mov	r0, r8
 8011232:	4649      	mov	r1, r9
 8011234:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011238:	f7ef f826 	bl	8000288 <__aeabi_dsub>
 801123c:	4b6b      	ldr	r3, [pc, #428]	; (80113ec <__ieee754_rem_pio2+0x264>)
 801123e:	2200      	movs	r2, #0
 8011240:	f7ef f9da 	bl	80005f8 <__aeabi_dmul>
 8011244:	4689      	mov	r9, r1
 8011246:	4680      	mov	r8, r0
 8011248:	f7ef fc86 	bl	8000b58 <__aeabi_d2iz>
 801124c:	4605      	mov	r5, r0
 801124e:	f7ef f969 	bl	8000524 <__aeabi_i2d>
 8011252:	4602      	mov	r2, r0
 8011254:	460b      	mov	r3, r1
 8011256:	4640      	mov	r0, r8
 8011258:	4649      	mov	r1, r9
 801125a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801125e:	f7ef f813 	bl	8000288 <__aeabi_dsub>
 8011262:	4b62      	ldr	r3, [pc, #392]	; (80113ec <__ieee754_rem_pio2+0x264>)
 8011264:	2200      	movs	r2, #0
 8011266:	f7ef f9c7 	bl	80005f8 <__aeabi_dmul>
 801126a:	4602      	mov	r2, r0
 801126c:	460b      	mov	r3, r1
 801126e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011272:	2200      	movs	r2, #0
 8011274:	2300      	movs	r3, #0
 8011276:	f7ef fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 801127a:	2800      	cmp	r0, #0
 801127c:	f000 8153 	beq.w	8011526 <__ieee754_rem_pio2+0x39e>
 8011280:	2d00      	cmp	r5, #0
 8011282:	bf0c      	ite	eq
 8011284:	2301      	moveq	r3, #1
 8011286:	2302      	movne	r3, #2
 8011288:	4a59      	ldr	r2, [pc, #356]	; (80113f0 <__ieee754_rem_pio2+0x268>)
 801128a:	9201      	str	r2, [sp, #4]
 801128c:	2202      	movs	r2, #2
 801128e:	9200      	str	r2, [sp, #0]
 8011290:	4621      	mov	r1, r4
 8011292:	4632      	mov	r2, r6
 8011294:	a804      	add	r0, sp, #16
 8011296:	f000 fbab 	bl	80119f0 <__kernel_rem_pio2>
 801129a:	2f00      	cmp	r7, #0
 801129c:	4606      	mov	r6, r0
 801129e:	daab      	bge.n	80111f8 <__ieee754_rem_pio2+0x70>
 80112a0:	6861      	ldr	r1, [r4, #4]
 80112a2:	6822      	ldr	r2, [r4, #0]
 80112a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112a8:	68e1      	ldr	r1, [r4, #12]
 80112aa:	e9c4 2300 	strd	r2, r3, [r4]
 80112ae:	68a2      	ldr	r2, [r4, #8]
 80112b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112b4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80112b8:	4246      	negs	r6, r0
 80112ba:	e79d      	b.n	80111f8 <__ieee754_rem_pio2+0x70>
 80112bc:	2000      	movs	r0, #0
 80112be:	2100      	movs	r1, #0
 80112c0:	2600      	movs	r6, #0
 80112c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80112c6:	4630      	mov	r0, r6
 80112c8:	ed84 0b00 	vstr	d0, [r4]
 80112cc:	b00b      	add	sp, #44	; 0x2c
 80112ce:	ecbd 8b04 	vpop	{d8-d9}
 80112d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112d6:	ee10 0a10 	vmov	r0, s0
 80112da:	4619      	mov	r1, r3
 80112dc:	f7ee ffd4 	bl	8000288 <__aeabi_dsub>
 80112e0:	2600      	movs	r6, #0
 80112e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80112e6:	e9c4 0100 	strd	r0, r1, [r4]
 80112ea:	e785      	b.n	80111f8 <__ieee754_rem_pio2+0x70>
 80112ec:	a334      	add	r3, pc, #208	; (adr r3, 80113c0 <__ieee754_rem_pio2+0x238>)
 80112ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f2:	f7ee ffc9 	bl	8000288 <__aeabi_dsub>
 80112f6:	a334      	add	r3, pc, #208	; (adr r3, 80113c8 <__ieee754_rem_pio2+0x240>)
 80112f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fc:	4680      	mov	r8, r0
 80112fe:	4689      	mov	r9, r1
 8011300:	f7ee ffc2 	bl	8000288 <__aeabi_dsub>
 8011304:	4602      	mov	r2, r0
 8011306:	460b      	mov	r3, r1
 8011308:	e9c4 2300 	strd	r2, r3, [r4]
 801130c:	4640      	mov	r0, r8
 801130e:	4649      	mov	r1, r9
 8011310:	f7ee ffba 	bl	8000288 <__aeabi_dsub>
 8011314:	a32c      	add	r3, pc, #176	; (adr r3, 80113c8 <__ieee754_rem_pio2+0x240>)
 8011316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131a:	f7ee ffb5 	bl	8000288 <__aeabi_dsub>
 801131e:	2601      	movs	r6, #1
 8011320:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011324:	4630      	mov	r0, r6
 8011326:	b00b      	add	sp, #44	; 0x2c
 8011328:	ecbd 8b04 	vpop	{d8-d9}
 801132c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011330:	f001 f87a 	bl	8012428 <fabs>
 8011334:	ec59 8b10 	vmov	r8, r9, d0
 8011338:	ee10 0a10 	vmov	r0, s0
 801133c:	a324      	add	r3, pc, #144	; (adr r3, 80113d0 <__ieee754_rem_pio2+0x248>)
 801133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011342:	4649      	mov	r1, r9
 8011344:	f7ef f958 	bl	80005f8 <__aeabi_dmul>
 8011348:	4b2a      	ldr	r3, [pc, #168]	; (80113f4 <__ieee754_rem_pio2+0x26c>)
 801134a:	2200      	movs	r2, #0
 801134c:	f7ee ff9e 	bl	800028c <__adddf3>
 8011350:	f7ef fc02 	bl	8000b58 <__aeabi_d2iz>
 8011354:	4606      	mov	r6, r0
 8011356:	f7ef f8e5 	bl	8000524 <__aeabi_i2d>
 801135a:	4602      	mov	r2, r0
 801135c:	460b      	mov	r3, r1
 801135e:	ec43 2b18 	vmov	d8, r2, r3
 8011362:	a313      	add	r3, pc, #76	; (adr r3, 80113b0 <__ieee754_rem_pio2+0x228>)
 8011364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011368:	eeb0 9a48 	vmov.f32	s18, s16
 801136c:	eef0 9a68 	vmov.f32	s19, s17
 8011370:	f7ef f942 	bl	80005f8 <__aeabi_dmul>
 8011374:	4602      	mov	r2, r0
 8011376:	460b      	mov	r3, r1
 8011378:	4640      	mov	r0, r8
 801137a:	4649      	mov	r1, r9
 801137c:	f7ee ff84 	bl	8000288 <__aeabi_dsub>
 8011380:	a30d      	add	r3, pc, #52	; (adr r3, 80113b8 <__ieee754_rem_pio2+0x230>)
 8011382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011386:	4682      	mov	sl, r0
 8011388:	468b      	mov	fp, r1
 801138a:	ec51 0b18 	vmov	r0, r1, d8
 801138e:	f7ef f933 	bl	80005f8 <__aeabi_dmul>
 8011392:	2e1f      	cmp	r6, #31
 8011394:	ec41 0b18 	vmov	d8, r0, r1
 8011398:	dc30      	bgt.n	80113fc <__ieee754_rem_pio2+0x274>
 801139a:	4b17      	ldr	r3, [pc, #92]	; (80113f8 <__ieee754_rem_pio2+0x270>)
 801139c:	1e72      	subs	r2, r6, #1
 801139e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113a2:	42ab      	cmp	r3, r5
 80113a4:	d02a      	beq.n	80113fc <__ieee754_rem_pio2+0x274>
 80113a6:	4602      	mov	r2, r0
 80113a8:	460b      	mov	r3, r1
 80113aa:	e09b      	b.n	80114e4 <__ieee754_rem_pio2+0x35c>
 80113ac:	f3af 8000 	nop.w
 80113b0:	54400000 	.word	0x54400000
 80113b4:	3ff921fb 	.word	0x3ff921fb
 80113b8:	1a626331 	.word	0x1a626331
 80113bc:	3dd0b461 	.word	0x3dd0b461
 80113c0:	1a600000 	.word	0x1a600000
 80113c4:	3dd0b461 	.word	0x3dd0b461
 80113c8:	2e037073 	.word	0x2e037073
 80113cc:	3ba3198a 	.word	0x3ba3198a
 80113d0:	6dc9c883 	.word	0x6dc9c883
 80113d4:	3fe45f30 	.word	0x3fe45f30
 80113d8:	3fe921fb 	.word	0x3fe921fb
 80113dc:	4002d97b 	.word	0x4002d97b
 80113e0:	3ff921fb 	.word	0x3ff921fb
 80113e4:	413921fb 	.word	0x413921fb
 80113e8:	7fefffff 	.word	0x7fefffff
 80113ec:	41700000 	.word	0x41700000
 80113f0:	0801f87c 	.word	0x0801f87c
 80113f4:	3fe00000 	.word	0x3fe00000
 80113f8:	0801f7fc 	.word	0x0801f7fc
 80113fc:	152b      	asrs	r3, r5, #20
 80113fe:	9303      	str	r3, [sp, #12]
 8011400:	4650      	mov	r0, sl
 8011402:	ec53 2b18 	vmov	r2, r3, d8
 8011406:	4659      	mov	r1, fp
 8011408:	f7ee ff3e 	bl	8000288 <__aeabi_dsub>
 801140c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011410:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 8011414:	2d10      	cmp	r5, #16
 8011416:	4680      	mov	r8, r0
 8011418:	4689      	mov	r9, r1
 801141a:	dd69      	ble.n	80114f0 <__ieee754_rem_pio2+0x368>
 801141c:	a364      	add	r3, pc, #400	; (adr r3, 80115b0 <__ieee754_rem_pio2+0x428>)
 801141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011422:	ec51 0b19 	vmov	r0, r1, d9
 8011426:	f7ef f8e7 	bl	80005f8 <__aeabi_dmul>
 801142a:	4680      	mov	r8, r0
 801142c:	4689      	mov	r9, r1
 801142e:	4642      	mov	r2, r8
 8011430:	464b      	mov	r3, r9
 8011432:	4650      	mov	r0, sl
 8011434:	4659      	mov	r1, fp
 8011436:	f7ee ff27 	bl	8000288 <__aeabi_dsub>
 801143a:	4602      	mov	r2, r0
 801143c:	460b      	mov	r3, r1
 801143e:	4650      	mov	r0, sl
 8011440:	4659      	mov	r1, fp
 8011442:	4692      	mov	sl, r2
 8011444:	469b      	mov	fp, r3
 8011446:	f7ee ff1f 	bl	8000288 <__aeabi_dsub>
 801144a:	4642      	mov	r2, r8
 801144c:	464b      	mov	r3, r9
 801144e:	f7ee ff1b 	bl	8000288 <__aeabi_dsub>
 8011452:	a359      	add	r3, pc, #356	; (adr r3, 80115b8 <__ieee754_rem_pio2+0x430>)
 8011454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011458:	4680      	mov	r8, r0
 801145a:	4689      	mov	r9, r1
 801145c:	ec51 0b19 	vmov	r0, r1, d9
 8011460:	f7ef f8ca 	bl	80005f8 <__aeabi_dmul>
 8011464:	4642      	mov	r2, r8
 8011466:	464b      	mov	r3, r9
 8011468:	f7ee ff0e 	bl	8000288 <__aeabi_dsub>
 801146c:	4602      	mov	r2, r0
 801146e:	460b      	mov	r3, r1
 8011470:	4650      	mov	r0, sl
 8011472:	4659      	mov	r1, fp
 8011474:	ec43 2b18 	vmov	d8, r2, r3
 8011478:	f7ee ff06 	bl	8000288 <__aeabi_dsub>
 801147c:	9a03      	ldr	r2, [sp, #12]
 801147e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011482:	1ad3      	subs	r3, r2, r3
 8011484:	2b31      	cmp	r3, #49	; 0x31
 8011486:	4680      	mov	r8, r0
 8011488:	4689      	mov	r9, r1
 801148a:	dd31      	ble.n	80114f0 <__ieee754_rem_pio2+0x368>
 801148c:	a34d      	add	r3, pc, #308	; (adr r3, 80115c4 <__ieee754_rem_pio2+0x43c>)
 801148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011492:	ec51 0b19 	vmov	r0, r1, d9
 8011496:	f7ef f8af 	bl	80005f8 <__aeabi_dmul>
 801149a:	4680      	mov	r8, r0
 801149c:	4689      	mov	r9, r1
 801149e:	4642      	mov	r2, r8
 80114a0:	464b      	mov	r3, r9
 80114a2:	4650      	mov	r0, sl
 80114a4:	4659      	mov	r1, fp
 80114a6:	f7ee feef 	bl	8000288 <__aeabi_dsub>
 80114aa:	4602      	mov	r2, r0
 80114ac:	460b      	mov	r3, r1
 80114ae:	4650      	mov	r0, sl
 80114b0:	4659      	mov	r1, fp
 80114b2:	4692      	mov	sl, r2
 80114b4:	469b      	mov	fp, r3
 80114b6:	f7ee fee7 	bl	8000288 <__aeabi_dsub>
 80114ba:	4642      	mov	r2, r8
 80114bc:	464b      	mov	r3, r9
 80114be:	f7ee fee3 	bl	8000288 <__aeabi_dsub>
 80114c2:	a342      	add	r3, pc, #264	; (adr r3, 80115cc <__ieee754_rem_pio2+0x444>)
 80114c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c8:	4680      	mov	r8, r0
 80114ca:	4689      	mov	r9, r1
 80114cc:	ec51 0b19 	vmov	r0, r1, d9
 80114d0:	f7ef f892 	bl	80005f8 <__aeabi_dmul>
 80114d4:	4642      	mov	r2, r8
 80114d6:	464b      	mov	r3, r9
 80114d8:	f7ee fed6 	bl	8000288 <__aeabi_dsub>
 80114dc:	4602      	mov	r2, r0
 80114de:	460b      	mov	r3, r1
 80114e0:	ec43 2b18 	vmov	d8, r2, r3
 80114e4:	4650      	mov	r0, sl
 80114e6:	4659      	mov	r1, fp
 80114e8:	f7ee fece 	bl	8000288 <__aeabi_dsub>
 80114ec:	4680      	mov	r8, r0
 80114ee:	4689      	mov	r9, r1
 80114f0:	4642      	mov	r2, r8
 80114f2:	464b      	mov	r3, r9
 80114f4:	e9c4 8900 	strd	r8, r9, [r4]
 80114f8:	4650      	mov	r0, sl
 80114fa:	4659      	mov	r1, fp
 80114fc:	f7ee fec4 	bl	8000288 <__aeabi_dsub>
 8011500:	ec53 2b18 	vmov	r2, r3, d8
 8011504:	f7ee fec0 	bl	8000288 <__aeabi_dsub>
 8011508:	2f00      	cmp	r7, #0
 801150a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801150e:	f6bf ae73 	bge.w	80111f8 <__ieee754_rem_pio2+0x70>
 8011512:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011516:	e9c4 8300 	strd	r8, r3, [r4]
 801151a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801151e:	e9c4 0302 	strd	r0, r3, [r4, #8]
 8011522:	4276      	negs	r6, r6
 8011524:	e668      	b.n	80111f8 <__ieee754_rem_pio2+0x70>
 8011526:	2303      	movs	r3, #3
 8011528:	e6ae      	b.n	8011288 <__ieee754_rem_pio2+0x100>
 801152a:	f7ee feaf 	bl	800028c <__adddf3>
 801152e:	4b24      	ldr	r3, [pc, #144]	; (80115c0 <__ieee754_rem_pio2+0x438>)
 8011530:	429d      	cmp	r5, r3
 8011532:	4680      	mov	r8, r0
 8011534:	4689      	mov	r9, r1
 8011536:	d016      	beq.n	8011566 <__ieee754_rem_pio2+0x3de>
 8011538:	a31b      	add	r3, pc, #108	; (adr r3, 80115a8 <__ieee754_rem_pio2+0x420>)
 801153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153e:	f7ee fea5 	bl	800028c <__adddf3>
 8011542:	4602      	mov	r2, r0
 8011544:	460b      	mov	r3, r1
 8011546:	e9c4 2300 	strd	r2, r3, [r4]
 801154a:	4640      	mov	r0, r8
 801154c:	4649      	mov	r1, r9
 801154e:	f7ee fe9b 	bl	8000288 <__aeabi_dsub>
 8011552:	a315      	add	r3, pc, #84	; (adr r3, 80115a8 <__ieee754_rem_pio2+0x420>)
 8011554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011558:	f7ee fe98 	bl	800028c <__adddf3>
 801155c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011560:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011564:	e648      	b.n	80111f8 <__ieee754_rem_pio2+0x70>
 8011566:	a312      	add	r3, pc, #72	; (adr r3, 80115b0 <__ieee754_rem_pio2+0x428>)
 8011568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156c:	f7ee fe8e 	bl	800028c <__adddf3>
 8011570:	a311      	add	r3, pc, #68	; (adr r3, 80115b8 <__ieee754_rem_pio2+0x430>)
 8011572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011576:	4680      	mov	r8, r0
 8011578:	4689      	mov	r9, r1
 801157a:	f7ee fe87 	bl	800028c <__adddf3>
 801157e:	4602      	mov	r2, r0
 8011580:	460b      	mov	r3, r1
 8011582:	e9c4 2300 	strd	r2, r3, [r4]
 8011586:	4640      	mov	r0, r8
 8011588:	4649      	mov	r1, r9
 801158a:	f7ee fe7d 	bl	8000288 <__aeabi_dsub>
 801158e:	a30a      	add	r3, pc, #40	; (adr r3, 80115b8 <__ieee754_rem_pio2+0x430>)
 8011590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011594:	f7ee fe7a 	bl	800028c <__adddf3>
 8011598:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801159c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80115a0:	e62a      	b.n	80111f8 <__ieee754_rem_pio2+0x70>
 80115a2:	bf00      	nop
 80115a4:	f3af 8000 	nop.w
 80115a8:	1a626331 	.word	0x1a626331
 80115ac:	3dd0b461 	.word	0x3dd0b461
 80115b0:	1a600000 	.word	0x1a600000
 80115b4:	3dd0b461 	.word	0x3dd0b461
 80115b8:	2e037073 	.word	0x2e037073
 80115bc:	3ba3198a 	.word	0x3ba3198a
 80115c0:	3ff921fb 	.word	0x3ff921fb
 80115c4:	2e000000 	.word	0x2e000000
 80115c8:	3ba3198a 	.word	0x3ba3198a
 80115cc:	252049c1 	.word	0x252049c1
 80115d0:	397b839a 	.word	0x397b839a

080115d4 <__ieee754_sqrt>:
 80115d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115d8:	4a63      	ldr	r2, [pc, #396]	; (8011768 <__ieee754_sqrt+0x194>)
 80115da:	ec55 4b10 	vmov	r4, r5, d0
 80115de:	43aa      	bics	r2, r5
 80115e0:	f000 809f 	beq.w	8011722 <__ieee754_sqrt+0x14e>
 80115e4:	2d00      	cmp	r5, #0
 80115e6:	ee10 ca10 	vmov	ip, s0
 80115ea:	462b      	mov	r3, r5
 80115ec:	dd54      	ble.n	8011698 <__ieee754_sqrt+0xc4>
 80115ee:	1529      	asrs	r1, r5, #20
 80115f0:	d063      	beq.n	80116ba <__ieee754_sqrt+0xe6>
 80115f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115f6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80115fa:	07c9      	lsls	r1, r1, #31
 80115fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011600:	d404      	bmi.n	801160c <__ieee754_sqrt+0x38>
 8011602:	005b      	lsls	r3, r3, #1
 8011604:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 8011608:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801160c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 8011610:	2600      	movs	r6, #0
 8011612:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8011616:	107f      	asrs	r7, r7, #1
 8011618:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801161c:	f04f 0e16 	mov.w	lr, #22
 8011620:	4634      	mov	r4, r6
 8011622:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011626:	18a1      	adds	r1, r4, r2
 8011628:	4299      	cmp	r1, r3
 801162a:	dc02      	bgt.n	8011632 <__ieee754_sqrt+0x5e>
 801162c:	1a5b      	subs	r3, r3, r1
 801162e:	188c      	adds	r4, r1, r2
 8011630:	4416      	add	r6, r2
 8011632:	005b      	lsls	r3, r3, #1
 8011634:	f1be 0e01 	subs.w	lr, lr, #1
 8011638:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 801163c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011640:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8011644:	d1ef      	bne.n	8011626 <__ieee754_sqrt+0x52>
 8011646:	4675      	mov	r5, lr
 8011648:	2020      	movs	r0, #32
 801164a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801164e:	e00a      	b.n	8011666 <__ieee754_sqrt+0x92>
 8011650:	d044      	beq.n	80116dc <__ieee754_sqrt+0x108>
 8011652:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8011656:	3801      	subs	r0, #1
 8011658:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801165c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8011660:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011664:	d043      	beq.n	80116ee <__ieee754_sqrt+0x11a>
 8011666:	42a3      	cmp	r3, r4
 8011668:	eb02 010e 	add.w	r1, r2, lr
 801166c:	ddf0      	ble.n	8011650 <__ieee754_sqrt+0x7c>
 801166e:	2900      	cmp	r1, #0
 8011670:	eb01 0e02 	add.w	lr, r1, r2
 8011674:	db0a      	blt.n	801168c <__ieee754_sqrt+0xb8>
 8011676:	46a0      	mov	r8, r4
 8011678:	1b1b      	subs	r3, r3, r4
 801167a:	4561      	cmp	r1, ip
 801167c:	bf88      	it	hi
 801167e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8011682:	ebac 0c01 	sub.w	ip, ip, r1
 8011686:	4415      	add	r5, r2
 8011688:	4644      	mov	r4, r8
 801168a:	e7e2      	b.n	8011652 <__ieee754_sqrt+0x7e>
 801168c:	f1be 0f00 	cmp.w	lr, #0
 8011690:	dbf1      	blt.n	8011676 <__ieee754_sqrt+0xa2>
 8011692:	f104 0801 	add.w	r8, r4, #1
 8011696:	e7ef      	b.n	8011678 <__ieee754_sqrt+0xa4>
 8011698:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801169c:	4322      	orrs	r2, r4
 801169e:	d038      	beq.n	8011712 <__ieee754_sqrt+0x13e>
 80116a0:	2d00      	cmp	r5, #0
 80116a2:	d14e      	bne.n	8011742 <__ieee754_sqrt+0x16e>
 80116a4:	4629      	mov	r1, r5
 80116a6:	ea4f 22dc 	mov.w	r2, ip, lsr #11
 80116aa:	3915      	subs	r1, #21
 80116ac:	4613      	mov	r3, r2
 80116ae:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
 80116b2:	2a00      	cmp	r2, #0
 80116b4:	d0f7      	beq.n	80116a6 <__ieee754_sqrt+0xd2>
 80116b6:	02d6      	lsls	r6, r2, #11
 80116b8:	d450      	bmi.n	801175c <__ieee754_sqrt+0x188>
 80116ba:	2000      	movs	r0, #0
 80116bc:	005b      	lsls	r3, r3, #1
 80116be:	02dd      	lsls	r5, r3, #11
 80116c0:	4604      	mov	r4, r0
 80116c2:	f100 0001 	add.w	r0, r0, #1
 80116c6:	d5f9      	bpl.n	80116bc <__ieee754_sqrt+0xe8>
 80116c8:	461a      	mov	r2, r3
 80116ca:	4663      	mov	r3, ip
 80116cc:	fa0c fc00 	lsl.w	ip, ip, r0
 80116d0:	f1c0 0020 	rsb	r0, r0, #32
 80116d4:	40c3      	lsrs	r3, r0
 80116d6:	1b09      	subs	r1, r1, r4
 80116d8:	4313      	orrs	r3, r2
 80116da:	e78a      	b.n	80115f2 <__ieee754_sqrt+0x1e>
 80116dc:	4561      	cmp	r1, ip
 80116de:	d8b8      	bhi.n	8011652 <__ieee754_sqrt+0x7e>
 80116e0:	2900      	cmp	r1, #0
 80116e2:	eb01 0e02 	add.w	lr, r1, r2
 80116e6:	dbd1      	blt.n	801168c <__ieee754_sqrt+0xb8>
 80116e8:	4698      	mov	r8, r3
 80116ea:	2300      	movs	r3, #0
 80116ec:	e7c9      	b.n	8011682 <__ieee754_sqrt+0xae>
 80116ee:	ea53 030c 	orrs.w	r3, r3, ip
 80116f2:	d110      	bne.n	8011716 <__ieee754_sqrt+0x142>
 80116f4:	0868      	lsrs	r0, r5, #1
 80116f6:	1071      	asrs	r1, r6, #1
 80116f8:	07f3      	lsls	r3, r6, #31
 80116fa:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 80116fe:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011702:	bf48      	it	mi
 8011704:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 8011708:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 801170c:	4602      	mov	r2, r0
 801170e:	ec43 2b10 	vmov	d0, r2, r3
 8011712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011716:	1c6a      	adds	r2, r5, #1
 8011718:	bf16      	itet	ne
 801171a:	1c68      	addne	r0, r5, #1
 801171c:	3601      	addeq	r6, #1
 801171e:	0840      	lsrne	r0, r0, #1
 8011720:	e7e9      	b.n	80116f6 <__ieee754_sqrt+0x122>
 8011722:	ee10 2a10 	vmov	r2, s0
 8011726:	ee10 0a10 	vmov	r0, s0
 801172a:	462b      	mov	r3, r5
 801172c:	4629      	mov	r1, r5
 801172e:	f7ee ff63 	bl	80005f8 <__aeabi_dmul>
 8011732:	4622      	mov	r2, r4
 8011734:	462b      	mov	r3, r5
 8011736:	f7ee fda9 	bl	800028c <__adddf3>
 801173a:	ec41 0b10 	vmov	d0, r0, r1
 801173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011742:	ee10 2a10 	vmov	r2, s0
 8011746:	4620      	mov	r0, r4
 8011748:	4629      	mov	r1, r5
 801174a:	f7ee fd9d 	bl	8000288 <__aeabi_dsub>
 801174e:	4602      	mov	r2, r0
 8011750:	460b      	mov	r3, r1
 8011752:	f7ef f87b 	bl	800084c <__aeabi_ddiv>
 8011756:	ec41 0b10 	vmov	d0, r0, r1
 801175a:	e7da      	b.n	8011712 <__ieee754_sqrt+0x13e>
 801175c:	4663      	mov	r3, ip
 801175e:	2020      	movs	r0, #32
 8011760:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011764:	e7b6      	b.n	80116d4 <__ieee754_sqrt+0x100>
 8011766:	bf00      	nop
 8011768:	7ff00000 	.word	0x7ff00000
 801176c:	00000000 	.word	0x00000000

08011770 <__kernel_cos>:
 8011770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011774:	ec57 6b10 	vmov	r6, r7, d0
 8011778:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 801177c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 8011780:	ed2d 8b04 	vpush	{d8-d9}
 8011784:	ec5b ab11 	vmov	sl, fp, d1
 8011788:	da71      	bge.n	801186e <__kernel_cos+0xfe>
 801178a:	ee10 0a10 	vmov	r0, s0
 801178e:	4639      	mov	r1, r7
 8011790:	f7ef f9e2 	bl	8000b58 <__aeabi_d2iz>
 8011794:	2800      	cmp	r0, #0
 8011796:	f000 80f6 	beq.w	8011986 <__kernel_cos+0x216>
 801179a:	4632      	mov	r2, r6
 801179c:	463b      	mov	r3, r7
 801179e:	4630      	mov	r0, r6
 80117a0:	4639      	mov	r1, r7
 80117a2:	f7ee ff29 	bl	80005f8 <__aeabi_dmul>
 80117a6:	a37c      	add	r3, pc, #496	; (adr r3, 8011998 <__kernel_cos+0x228>)
 80117a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ac:	4604      	mov	r4, r0
 80117ae:	460d      	mov	r5, r1
 80117b0:	f7ee ff22 	bl	80005f8 <__aeabi_dmul>
 80117b4:	a37a      	add	r3, pc, #488	; (adr r3, 80119a0 <__kernel_cos+0x230>)
 80117b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ba:	f7ee fd67 	bl	800028c <__adddf3>
 80117be:	4622      	mov	r2, r4
 80117c0:	462b      	mov	r3, r5
 80117c2:	f7ee ff19 	bl	80005f8 <__aeabi_dmul>
 80117c6:	a378      	add	r3, pc, #480	; (adr r3, 80119a8 <__kernel_cos+0x238>)
 80117c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117cc:	f7ee fd5c 	bl	8000288 <__aeabi_dsub>
 80117d0:	4622      	mov	r2, r4
 80117d2:	462b      	mov	r3, r5
 80117d4:	f7ee ff10 	bl	80005f8 <__aeabi_dmul>
 80117d8:	a375      	add	r3, pc, #468	; (adr r3, 80119b0 <__kernel_cos+0x240>)
 80117da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117de:	f7ee fd55 	bl	800028c <__adddf3>
 80117e2:	4622      	mov	r2, r4
 80117e4:	462b      	mov	r3, r5
 80117e6:	f7ee ff07 	bl	80005f8 <__aeabi_dmul>
 80117ea:	a373      	add	r3, pc, #460	; (adr r3, 80119b8 <__kernel_cos+0x248>)
 80117ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f0:	f7ee fd4a 	bl	8000288 <__aeabi_dsub>
 80117f4:	4622      	mov	r2, r4
 80117f6:	462b      	mov	r3, r5
 80117f8:	f7ee fefe 	bl	80005f8 <__aeabi_dmul>
 80117fc:	a370      	add	r3, pc, #448	; (adr r3, 80119c0 <__kernel_cos+0x250>)
 80117fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011802:	f7ee fd43 	bl	800028c <__adddf3>
 8011806:	4622      	mov	r2, r4
 8011808:	462b      	mov	r3, r5
 801180a:	f7ee fef5 	bl	80005f8 <__aeabi_dmul>
 801180e:	ec41 0b18 	vmov	d8, r0, r1
 8011812:	4b71      	ldr	r3, [pc, #452]	; (80119d8 <__kernel_cos+0x268>)
 8011814:	2200      	movs	r2, #0
 8011816:	4620      	mov	r0, r4
 8011818:	4629      	mov	r1, r5
 801181a:	f7ee feed 	bl	80005f8 <__aeabi_dmul>
 801181e:	ec53 2b18 	vmov	r2, r3, d8
 8011822:	4680      	mov	r8, r0
 8011824:	4689      	mov	r9, r1
 8011826:	4620      	mov	r0, r4
 8011828:	4629      	mov	r1, r5
 801182a:	f7ee fee5 	bl	80005f8 <__aeabi_dmul>
 801182e:	4652      	mov	r2, sl
 8011830:	465b      	mov	r3, fp
 8011832:	4604      	mov	r4, r0
 8011834:	460d      	mov	r5, r1
 8011836:	4630      	mov	r0, r6
 8011838:	4639      	mov	r1, r7
 801183a:	f7ee fedd 	bl	80005f8 <__aeabi_dmul>
 801183e:	4602      	mov	r2, r0
 8011840:	460b      	mov	r3, r1
 8011842:	4620      	mov	r0, r4
 8011844:	4629      	mov	r1, r5
 8011846:	f7ee fd1f 	bl	8000288 <__aeabi_dsub>
 801184a:	4602      	mov	r2, r0
 801184c:	460b      	mov	r3, r1
 801184e:	4640      	mov	r0, r8
 8011850:	4649      	mov	r1, r9
 8011852:	f7ee fd19 	bl	8000288 <__aeabi_dsub>
 8011856:	4602      	mov	r2, r0
 8011858:	460b      	mov	r3, r1
 801185a:	2000      	movs	r0, #0
 801185c:	495f      	ldr	r1, [pc, #380]	; (80119dc <__kernel_cos+0x26c>)
 801185e:	f7ee fd13 	bl	8000288 <__aeabi_dsub>
 8011862:	ecbd 8b04 	vpop	{d8-d9}
 8011866:	ec41 0b10 	vmov	d0, r0, r1
 801186a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801186e:	ee10 2a10 	vmov	r2, s0
 8011872:	ee10 0a10 	vmov	r0, s0
 8011876:	463b      	mov	r3, r7
 8011878:	4639      	mov	r1, r7
 801187a:	f7ee febd 	bl	80005f8 <__aeabi_dmul>
 801187e:	a346      	add	r3, pc, #280	; (adr r3, 8011998 <__kernel_cos+0x228>)
 8011880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011884:	4604      	mov	r4, r0
 8011886:	460d      	mov	r5, r1
 8011888:	f7ee feb6 	bl	80005f8 <__aeabi_dmul>
 801188c:	a344      	add	r3, pc, #272	; (adr r3, 80119a0 <__kernel_cos+0x230>)
 801188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011892:	f7ee fcfb 	bl	800028c <__adddf3>
 8011896:	4622      	mov	r2, r4
 8011898:	462b      	mov	r3, r5
 801189a:	f7ee fead 	bl	80005f8 <__aeabi_dmul>
 801189e:	a342      	add	r3, pc, #264	; (adr r3, 80119a8 <__kernel_cos+0x238>)
 80118a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a4:	f7ee fcf0 	bl	8000288 <__aeabi_dsub>
 80118a8:	4622      	mov	r2, r4
 80118aa:	462b      	mov	r3, r5
 80118ac:	f7ee fea4 	bl	80005f8 <__aeabi_dmul>
 80118b0:	a33f      	add	r3, pc, #252	; (adr r3, 80119b0 <__kernel_cos+0x240>)
 80118b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b6:	f7ee fce9 	bl	800028c <__adddf3>
 80118ba:	4622      	mov	r2, r4
 80118bc:	462b      	mov	r3, r5
 80118be:	f7ee fe9b 	bl	80005f8 <__aeabi_dmul>
 80118c2:	a33d      	add	r3, pc, #244	; (adr r3, 80119b8 <__kernel_cos+0x248>)
 80118c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c8:	f7ee fcde 	bl	8000288 <__aeabi_dsub>
 80118cc:	4622      	mov	r2, r4
 80118ce:	462b      	mov	r3, r5
 80118d0:	f7ee fe92 	bl	80005f8 <__aeabi_dmul>
 80118d4:	a33a      	add	r3, pc, #232	; (adr r3, 80119c0 <__kernel_cos+0x250>)
 80118d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118da:	f7ee fcd7 	bl	800028c <__adddf3>
 80118de:	462b      	mov	r3, r5
 80118e0:	4622      	mov	r2, r4
 80118e2:	f7ee fe89 	bl	80005f8 <__aeabi_dmul>
 80118e6:	4b3e      	ldr	r3, [pc, #248]	; (80119e0 <__kernel_cos+0x270>)
 80118e8:	4599      	cmp	r9, r3
 80118ea:	ec41 0b18 	vmov	d8, r0, r1
 80118ee:	dd90      	ble.n	8011812 <__kernel_cos+0xa2>
 80118f0:	4b3c      	ldr	r3, [pc, #240]	; (80119e4 <__kernel_cos+0x274>)
 80118f2:	4599      	cmp	r9, r3
 80118f4:	dc3c      	bgt.n	8011970 <__kernel_cos+0x200>
 80118f6:	2200      	movs	r2, #0
 80118f8:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 80118fc:	4937      	ldr	r1, [pc, #220]	; (80119dc <__kernel_cos+0x26c>)
 80118fe:	2000      	movs	r0, #0
 8011900:	4690      	mov	r8, r2
 8011902:	4699      	mov	r9, r3
 8011904:	f7ee fcc0 	bl	8000288 <__aeabi_dsub>
 8011908:	ec41 0b19 	vmov	d9, r0, r1
 801190c:	4b32      	ldr	r3, [pc, #200]	; (80119d8 <__kernel_cos+0x268>)
 801190e:	2200      	movs	r2, #0
 8011910:	4620      	mov	r0, r4
 8011912:	4629      	mov	r1, r5
 8011914:	f7ee fe70 	bl	80005f8 <__aeabi_dmul>
 8011918:	4642      	mov	r2, r8
 801191a:	464b      	mov	r3, r9
 801191c:	f7ee fcb4 	bl	8000288 <__aeabi_dsub>
 8011920:	ec53 2b18 	vmov	r2, r3, d8
 8011924:	4680      	mov	r8, r0
 8011926:	4689      	mov	r9, r1
 8011928:	4620      	mov	r0, r4
 801192a:	4629      	mov	r1, r5
 801192c:	f7ee fe64 	bl	80005f8 <__aeabi_dmul>
 8011930:	4652      	mov	r2, sl
 8011932:	465b      	mov	r3, fp
 8011934:	4604      	mov	r4, r0
 8011936:	460d      	mov	r5, r1
 8011938:	4630      	mov	r0, r6
 801193a:	4639      	mov	r1, r7
 801193c:	f7ee fe5c 	bl	80005f8 <__aeabi_dmul>
 8011940:	4602      	mov	r2, r0
 8011942:	460b      	mov	r3, r1
 8011944:	4620      	mov	r0, r4
 8011946:	4629      	mov	r1, r5
 8011948:	f7ee fc9e 	bl	8000288 <__aeabi_dsub>
 801194c:	4602      	mov	r2, r0
 801194e:	460b      	mov	r3, r1
 8011950:	4640      	mov	r0, r8
 8011952:	4649      	mov	r1, r9
 8011954:	f7ee fc98 	bl	8000288 <__aeabi_dsub>
 8011958:	4602      	mov	r2, r0
 801195a:	460b      	mov	r3, r1
 801195c:	ec51 0b19 	vmov	r0, r1, d9
 8011960:	f7ee fc92 	bl	8000288 <__aeabi_dsub>
 8011964:	ecbd 8b04 	vpop	{d8-d9}
 8011968:	ec41 0b10 	vmov	d0, r0, r1
 801196c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011970:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80119c8 <__kernel_cos+0x258>
 8011974:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80119e8 <__kernel_cos+0x278>
 8011978:	eeb0 9a47 	vmov.f32	s18, s14
 801197c:	eef0 9a67 	vmov.f32	s19, s15
 8011980:	f04f 0800 	mov.w	r8, #0
 8011984:	e7c2      	b.n	801190c <__kernel_cos+0x19c>
 8011986:	ecbd 8b04 	vpop	{d8-d9}
 801198a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80119d0 <__kernel_cos+0x260>
 801198e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011992:	bf00      	nop
 8011994:	f3af 8000 	nop.w
 8011998:	be8838d4 	.word	0xbe8838d4
 801199c:	bda8fae9 	.word	0xbda8fae9
 80119a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80119a4:	3e21ee9e 	.word	0x3e21ee9e
 80119a8:	809c52ad 	.word	0x809c52ad
 80119ac:	3e927e4f 	.word	0x3e927e4f
 80119b0:	19cb1590 	.word	0x19cb1590
 80119b4:	3efa01a0 	.word	0x3efa01a0
 80119b8:	16c15177 	.word	0x16c15177
 80119bc:	3f56c16c 	.word	0x3f56c16c
 80119c0:	5555554c 	.word	0x5555554c
 80119c4:	3fa55555 	.word	0x3fa55555
 80119c8:	00000000 	.word	0x00000000
 80119cc:	3fe70000 	.word	0x3fe70000
 80119d0:	00000000 	.word	0x00000000
 80119d4:	3ff00000 	.word	0x3ff00000
 80119d8:	3fe00000 	.word	0x3fe00000
 80119dc:	3ff00000 	.word	0x3ff00000
 80119e0:	3fd33332 	.word	0x3fd33332
 80119e4:	3fe90000 	.word	0x3fe90000
 80119e8:	3fd20000 	.word	0x3fd20000
 80119ec:	00000000 	.word	0x00000000

080119f0 <__kernel_rem_pio2>:
 80119f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80119f8:	461c      	mov	r4, r3
 80119fa:	9308      	str	r3, [sp, #32]
 80119fc:	910b      	str	r1, [sp, #44]	; 0x2c
 80119fe:	4bba      	ldr	r3, [pc, #744]	; (8011ce8 <__kernel_rem_pio2+0x2f8>)
 8011a00:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8011a02:	9004      	str	r0, [sp, #16]
 8011a04:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011a08:	9105      	str	r1, [sp, #20]
 8011a0a:	1e63      	subs	r3, r4, #1
 8011a0c:	f112 0f14 	cmn.w	r2, #20
 8011a10:	9303      	str	r3, [sp, #12]
 8011a12:	f2c0 834b 	blt.w	80120ac <__kernel_rem_pio2+0x6bc>
 8011a16:	49b5      	ldr	r1, [pc, #724]	; (8011cec <__kernel_rem_pio2+0x2fc>)
 8011a18:	1ed3      	subs	r3, r2, #3
 8011a1a:	fb81 0103 	smull	r0, r1, r1, r3
 8011a1e:	17db      	asrs	r3, r3, #31
 8011a20:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8011a24:	9307      	str	r3, [sp, #28]
 8011a26:	3301      	adds	r3, #1
 8011a28:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8011a2c:	00db      	lsls	r3, r3, #3
 8011a2e:	18d3      	adds	r3, r2, r3
 8011a30:	9306      	str	r3, [sp, #24]
 8011a32:	9a07      	ldr	r2, [sp, #28]
 8011a34:	9b03      	ldr	r3, [sp, #12]
 8011a36:	1ad4      	subs	r4, r2, r3
 8011a38:	9a05      	ldr	r2, [sp, #20]
 8011a3a:	18d6      	adds	r6, r2, r3
 8011a3c:	d41a      	bmi.n	8011a74 <__kernel_rem_pio2+0x84>
 8011a3e:	3601      	adds	r6, #1
 8011a40:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 8011a42:	4426      	add	r6, r4
 8011a44:	ad20      	add	r5, sp, #128	; 0x80
 8011a46:	f04f 0800 	mov.w	r8, #0
 8011a4a:	f04f 0900 	mov.w	r9, #0
 8011a4e:	e008      	b.n	8011a62 <__kernel_rem_pio2+0x72>
 8011a50:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8011a54:	f7ee fd66 	bl	8000524 <__aeabi_i2d>
 8011a58:	3401      	adds	r4, #1
 8011a5a:	42b4      	cmp	r4, r6
 8011a5c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011a60:	d008      	beq.n	8011a74 <__kernel_rem_pio2+0x84>
 8011a62:	2c00      	cmp	r4, #0
 8011a64:	daf4      	bge.n	8011a50 <__kernel_rem_pio2+0x60>
 8011a66:	3401      	adds	r4, #1
 8011a68:	4640      	mov	r0, r8
 8011a6a:	4649      	mov	r1, r9
 8011a6c:	42b4      	cmp	r4, r6
 8011a6e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011a72:	d1f6      	bne.n	8011a62 <__kernel_rem_pio2+0x72>
 8011a74:	9b05      	ldr	r3, [sp, #20]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	f2c0 83c6 	blt.w	8012208 <__kernel_rem_pio2+0x818>
 8011a7c:	9b08      	ldr	r3, [sp, #32]
 8011a7e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011a82:	aa20      	add	r2, sp, #128	; 0x80
 8011a84:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8011a88:	00da      	lsls	r2, r3, #3
 8011a8a:	9202      	str	r2, [sp, #8]
 8011a8c:	9a05      	ldr	r2, [sp, #20]
 8011a8e:	441a      	add	r2, r3
 8011a90:	9201      	str	r2, [sp, #4]
 8011a92:	9a04      	ldr	r2, [sp, #16]
 8011a94:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8011a98:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 8011a9c:	9b03      	ldr	r3, [sp, #12]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	f2c0 81a7 	blt.w	8011df2 <__kernel_rem_pio2+0x402>
 8011aa4:	9e04      	ldr	r6, [sp, #16]
 8011aa6:	4657      	mov	r7, sl
 8011aa8:	2400      	movs	r4, #0
 8011aaa:	2500      	movs	r5, #0
 8011aac:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 8011ab0:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8011ab4:	f7ee fda0 	bl	80005f8 <__aeabi_dmul>
 8011ab8:	4602      	mov	r2, r0
 8011aba:	460b      	mov	r3, r1
 8011abc:	4620      	mov	r0, r4
 8011abe:	4629      	mov	r1, r5
 8011ac0:	f7ee fbe4 	bl	800028c <__adddf3>
 8011ac4:	4546      	cmp	r6, r8
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	460d      	mov	r5, r1
 8011aca:	d1ef      	bne.n	8011aac <__kernel_rem_pio2+0xbc>
 8011acc:	9b01      	ldr	r3, [sp, #4]
 8011ace:	f109 0901 	add.w	r9, r9, #1
 8011ad2:	4599      	cmp	r9, r3
 8011ad4:	e8eb 4502 	strd	r4, r5, [fp], #8
 8011ad8:	f10a 0a08 	add.w	sl, sl, #8
 8011adc:	d1de      	bne.n	8011a9c <__kernel_rem_pio2+0xac>
 8011ade:	9a04      	ldr	r2, [sp, #16]
 8011ae0:	9b02      	ldr	r3, [sp, #8]
 8011ae2:	4413      	add	r3, r2
 8011ae4:	9a05      	ldr	r2, [sp, #20]
 8011ae6:	9201      	str	r2, [sp, #4]
 8011ae8:	469b      	mov	fp, r3
 8011aea:	ab0b      	add	r3, sp, #44	; 0x2c
 8011aec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011af0:	930a      	str	r3, [sp, #40]	; 0x28
 8011af2:	ab0c      	add	r3, sp, #48	; 0x30
 8011af4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011af8:	3b08      	subs	r3, #8
 8011afa:	9309      	str	r3, [sp, #36]	; 0x24
 8011afc:	9a01      	ldr	r2, [sp, #4]
 8011afe:	ab98      	add	r3, sp, #608	; 0x260
 8011b00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b04:	2a00      	cmp	r2, #0
 8011b06:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8011b0a:	dd29      	ble.n	8011b60 <__kernel_rem_pio2+0x170>
 8011b0c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8011b10:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 8011b14:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011b18:	4b75      	ldr	r3, [pc, #468]	; (8011cf0 <__kernel_rem_pio2+0x300>)
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	4629      	mov	r1, r5
 8011b20:	f7ee fd6a 	bl	80005f8 <__aeabi_dmul>
 8011b24:	f7ef f818 	bl	8000b58 <__aeabi_d2iz>
 8011b28:	f7ee fcfc 	bl	8000524 <__aeabi_i2d>
 8011b2c:	4b71      	ldr	r3, [pc, #452]	; (8011cf4 <__kernel_rem_pio2+0x304>)
 8011b2e:	2200      	movs	r2, #0
 8011b30:	4606      	mov	r6, r0
 8011b32:	460f      	mov	r7, r1
 8011b34:	f7ee fd60 	bl	80005f8 <__aeabi_dmul>
 8011b38:	4602      	mov	r2, r0
 8011b3a:	460b      	mov	r3, r1
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	4629      	mov	r1, r5
 8011b40:	f7ee fba2 	bl	8000288 <__aeabi_dsub>
 8011b44:	f7ef f808 	bl	8000b58 <__aeabi_d2iz>
 8011b48:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8011b4c:	f849 0b04 	str.w	r0, [r9], #4
 8011b50:	4639      	mov	r1, r7
 8011b52:	4630      	mov	r0, r6
 8011b54:	f7ee fb9a 	bl	800028c <__adddf3>
 8011b58:	45d0      	cmp	r8, sl
 8011b5a:	4604      	mov	r4, r0
 8011b5c:	460d      	mov	r5, r1
 8011b5e:	d1db      	bne.n	8011b18 <__kernel_rem_pio2+0x128>
 8011b60:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8011b64:	ec45 4b10 	vmov	d0, r4, r5
 8011b68:	4648      	mov	r0, r9
 8011b6a:	f000 fcf9 	bl	8012560 <scalbn>
 8011b6e:	ec55 4b10 	vmov	r4, r5, d0
 8011b72:	2200      	movs	r2, #0
 8011b74:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011b78:	ee10 0a10 	vmov	r0, s0
 8011b7c:	4629      	mov	r1, r5
 8011b7e:	f7ee fd3b 	bl	80005f8 <__aeabi_dmul>
 8011b82:	ec41 0b10 	vmov	d0, r0, r1
 8011b86:	f000 fc67 	bl	8012458 <floor>
 8011b8a:	4b5b      	ldr	r3, [pc, #364]	; (8011cf8 <__kernel_rem_pio2+0x308>)
 8011b8c:	ec51 0b10 	vmov	r0, r1, d0
 8011b90:	2200      	movs	r2, #0
 8011b92:	f7ee fd31 	bl	80005f8 <__aeabi_dmul>
 8011b96:	4602      	mov	r2, r0
 8011b98:	460b      	mov	r3, r1
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	4629      	mov	r1, r5
 8011b9e:	f7ee fb73 	bl	8000288 <__aeabi_dsub>
 8011ba2:	460d      	mov	r5, r1
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	f7ee ffd7 	bl	8000b58 <__aeabi_d2iz>
 8011baa:	4680      	mov	r8, r0
 8011bac:	f7ee fcba 	bl	8000524 <__aeabi_i2d>
 8011bb0:	460b      	mov	r3, r1
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	4629      	mov	r1, r5
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	f7ee fb66 	bl	8000288 <__aeabi_dsub>
 8011bbc:	464b      	mov	r3, r9
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	4606      	mov	r6, r0
 8011bc2:	460f      	mov	r7, r1
 8011bc4:	f340 809a 	ble.w	8011cfc <__kernel_rem_pio2+0x30c>
 8011bc8:	9a01      	ldr	r2, [sp, #4]
 8011bca:	1e51      	subs	r1, r2, #1
 8011bcc:	aa0c      	add	r2, sp, #48	; 0x30
 8011bce:	f1c9 0318 	rsb	r3, r9, #24
 8011bd2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8011bd6:	fa42 f003 	asr.w	r0, r2, r3
 8011bda:	fa00 f303 	lsl.w	r3, r0, r3
 8011bde:	1ad3      	subs	r3, r2, r3
 8011be0:	f1c9 0517 	rsb	r5, r9, #23
 8011be4:	aa0c      	add	r2, sp, #48	; 0x30
 8011be6:	fa43 f505 	asr.w	r5, r3, r5
 8011bea:	2d00      	cmp	r5, #0
 8011bec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011bf0:	4480      	add	r8, r0
 8011bf2:	f300 808d 	bgt.w	8011d10 <__kernel_rem_pio2+0x320>
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	4639      	mov	r1, r7
 8011bfe:	f7ee ff63 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c02:	2800      	cmp	r0, #0
 8011c04:	f000 8259 	beq.w	80120ba <__kernel_rem_pio2+0x6ca>
 8011c08:	9b01      	ldr	r3, [sp, #4]
 8011c0a:	9a05      	ldr	r2, [sp, #20]
 8011c0c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8011c10:	4552      	cmp	r2, sl
 8011c12:	dc10      	bgt.n	8011c36 <__kernel_rem_pio2+0x246>
 8011c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011c18:	aa0c      	add	r2, sp, #48	; 0x30
 8011c1a:	3b01      	subs	r3, #1
 8011c1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011c1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011c22:	2200      	movs	r2, #0
 8011c24:	f853 1904 	ldr.w	r1, [r3], #-4
 8011c28:	4283      	cmp	r3, r0
 8011c2a:	ea42 0201 	orr.w	r2, r2, r1
 8011c2e:	d1f9      	bne.n	8011c24 <__kernel_rem_pio2+0x234>
 8011c30:	2a00      	cmp	r2, #0
 8011c32:	f040 80e1 	bne.w	8011df8 <__kernel_rem_pio2+0x408>
 8011c36:	9b05      	ldr	r3, [sp, #20]
 8011c38:	aa0c      	add	r2, sp, #48	; 0x30
 8011c3a:	3b01      	subs	r3, #1
 8011c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	f040 80d1 	bne.w	8011de8 <__kernel_rem_pio2+0x3f8>
 8011c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c48:	2301      	movs	r3, #1
 8011c4a:	f852 1904 	ldr.w	r1, [r2], #-4
 8011c4e:	3301      	adds	r3, #1
 8011c50:	2900      	cmp	r1, #0
 8011c52:	d0fa      	beq.n	8011c4a <__kernel_rem_pio2+0x25a>
 8011c54:	9a01      	ldr	r2, [sp, #4]
 8011c56:	18d3      	adds	r3, r2, r3
 8011c58:	9302      	str	r3, [sp, #8]
 8011c5a:	1c53      	adds	r3, r2, #1
 8011c5c:	4699      	mov	r9, r3
 8011c5e:	9a01      	ldr	r2, [sp, #4]
 8011c60:	9908      	ldr	r1, [sp, #32]
 8011c62:	440a      	add	r2, r1
 8011c64:	4690      	mov	r8, r2
 8011c66:	9a07      	ldr	r2, [sp, #28]
 8011c68:	eb02 0a03 	add.w	sl, r2, r3
 8011c6c:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 8011c70:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 8011c72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011c76:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8011c7a:	aa20      	add	r2, sp, #128	; 0x80
 8011c7c:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 8011c80:	aa70      	add	r2, sp, #448	; 0x1c0
 8011c82:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011c86:	9301      	str	r3, [sp, #4]
 8011c88:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8011c8c:	f7ee fc4a 	bl	8000524 <__aeabi_i2d>
 8011c90:	460b      	mov	r3, r1
 8011c92:	9903      	ldr	r1, [sp, #12]
 8011c94:	4602      	mov	r2, r0
 8011c96:	2900      	cmp	r1, #0
 8011c98:	e9c8 2300 	strd	r2, r3, [r8]
 8011c9c:	4647      	mov	r7, r8
 8011c9e:	f108 0808 	add.w	r8, r8, #8
 8011ca2:	db1e      	blt.n	8011ce2 <__kernel_rem_pio2+0x2f2>
 8011ca4:	9e04      	ldr	r6, [sp, #16]
 8011ca6:	2400      	movs	r4, #0
 8011ca8:	2500      	movs	r5, #0
 8011caa:	e001      	b.n	8011cb0 <__kernel_rem_pio2+0x2c0>
 8011cac:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 8011cb0:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8011cb4:	f7ee fca0 	bl	80005f8 <__aeabi_dmul>
 8011cb8:	4602      	mov	r2, r0
 8011cba:	460b      	mov	r3, r1
 8011cbc:	4620      	mov	r0, r4
 8011cbe:	4629      	mov	r1, r5
 8011cc0:	f7ee fae4 	bl	800028c <__adddf3>
 8011cc4:	455e      	cmp	r6, fp
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	460d      	mov	r5, r1
 8011cca:	d1ef      	bne.n	8011cac <__kernel_rem_pio2+0x2bc>
 8011ccc:	9b01      	ldr	r3, [sp, #4]
 8011cce:	e8e3 4502 	strd	r4, r5, [r3], #8
 8011cd2:	9301      	str	r3, [sp, #4]
 8011cd4:	9b02      	ldr	r3, [sp, #8]
 8011cd6:	f109 0901 	add.w	r9, r9, #1
 8011cda:	4599      	cmp	r9, r3
 8011cdc:	ddd4      	ble.n	8011c88 <__kernel_rem_pio2+0x298>
 8011cde:	9301      	str	r3, [sp, #4]
 8011ce0:	e70c      	b.n	8011afc <__kernel_rem_pio2+0x10c>
 8011ce2:	2400      	movs	r4, #0
 8011ce4:	2500      	movs	r5, #0
 8011ce6:	e7f1      	b.n	8011ccc <__kernel_rem_pio2+0x2dc>
 8011ce8:	0801f9c8 	.word	0x0801f9c8
 8011cec:	2aaaaaab 	.word	0x2aaaaaab
 8011cf0:	3e700000 	.word	0x3e700000
 8011cf4:	41700000 	.word	0x41700000
 8011cf8:	40200000 	.word	0x40200000
 8011cfc:	d16b      	bne.n	8011dd6 <__kernel_rem_pio2+0x3e6>
 8011cfe:	9b01      	ldr	r3, [sp, #4]
 8011d00:	aa0c      	add	r2, sp, #48	; 0x30
 8011d02:	3b01      	subs	r3, #1
 8011d04:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8011d08:	15ed      	asrs	r5, r5, #23
 8011d0a:	2d00      	cmp	r5, #0
 8011d0c:	f77f af73 	ble.w	8011bf6 <__kernel_rem_pio2+0x206>
 8011d10:	9b01      	ldr	r3, [sp, #4]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	f108 0801 	add.w	r8, r8, #1
 8011d18:	f340 81cd 	ble.w	80120b6 <__kernel_rem_pio2+0x6c6>
 8011d1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011d1e:	2c00      	cmp	r4, #0
 8011d20:	d151      	bne.n	8011dc6 <__kernel_rem_pio2+0x3d6>
 8011d22:	9b01      	ldr	r3, [sp, #4]
 8011d24:	2b01      	cmp	r3, #1
 8011d26:	d020      	beq.n	8011d6a <__kernel_rem_pio2+0x37a>
 8011d28:	ab0c      	add	r3, sp, #48	; 0x30
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	f853 4f04 	ldr.w	r4, [r3, #4]!
 8011d30:	2c00      	cmp	r4, #0
 8011d32:	d04b      	beq.n	8011dcc <__kernel_rem_pio2+0x3dc>
 8011d34:	1c53      	adds	r3, r2, #1
 8011d36:	a90c      	add	r1, sp, #48	; 0x30
 8011d38:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 8011d3c:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 8011d40:	9901      	ldr	r1, [sp, #4]
 8011d42:	4299      	cmp	r1, r3
 8011d44:	dd10      	ble.n	8011d68 <__kernel_rem_pio2+0x378>
 8011d46:	aa0c      	add	r2, sp, #48	; 0x30
 8011d48:	a80c      	add	r0, sp, #48	; 0x30
 8011d4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011d4e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011d52:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8011d56:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011d5a:	e000      	b.n	8011d5e <__kernel_rem_pio2+0x36e>
 8011d5c:	681a      	ldr	r2, [r3, #0]
 8011d5e:	1a8a      	subs	r2, r1, r2
 8011d60:	f843 2b04 	str.w	r2, [r3], #4
 8011d64:	4283      	cmp	r3, r0
 8011d66:	d1f9      	bne.n	8011d5c <__kernel_rem_pio2+0x36c>
 8011d68:	2401      	movs	r4, #1
 8011d6a:	9b06      	ldr	r3, [sp, #24]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	dd0e      	ble.n	8011d8e <__kernel_rem_pio2+0x39e>
 8011d70:	2b01      	cmp	r3, #1
 8011d72:	f000 816c 	beq.w	801204e <__kernel_rem_pio2+0x65e>
 8011d76:	2b02      	cmp	r3, #2
 8011d78:	d109      	bne.n	8011d8e <__kernel_rem_pio2+0x39e>
 8011d7a:	9b01      	ldr	r3, [sp, #4]
 8011d7c:	1e5a      	subs	r2, r3, #1
 8011d7e:	ab0c      	add	r3, sp, #48	; 0x30
 8011d80:	a90c      	add	r1, sp, #48	; 0x30
 8011d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d86:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011d8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011d8e:	2d02      	cmp	r5, #2
 8011d90:	f47f af31 	bne.w	8011bf6 <__kernel_rem_pio2+0x206>
 8011d94:	4632      	mov	r2, r6
 8011d96:	463b      	mov	r3, r7
 8011d98:	49b7      	ldr	r1, [pc, #732]	; (8012078 <__kernel_rem_pio2+0x688>)
 8011d9a:	2000      	movs	r0, #0
 8011d9c:	f7ee fa74 	bl	8000288 <__aeabi_dsub>
 8011da0:	4606      	mov	r6, r0
 8011da2:	460f      	mov	r7, r1
 8011da4:	2c00      	cmp	r4, #0
 8011da6:	f43f af26 	beq.w	8011bf6 <__kernel_rem_pio2+0x206>
 8011daa:	9806      	ldr	r0, [sp, #24]
 8011dac:	ed9f 0bae 	vldr	d0, [pc, #696]	; 8012068 <__kernel_rem_pio2+0x678>
 8011db0:	f000 fbd6 	bl	8012560 <scalbn>
 8011db4:	4630      	mov	r0, r6
 8011db6:	4639      	mov	r1, r7
 8011db8:	ec53 2b10 	vmov	r2, r3, d0
 8011dbc:	f7ee fa64 	bl	8000288 <__aeabi_dsub>
 8011dc0:	4606      	mov	r6, r0
 8011dc2:	460f      	mov	r7, r1
 8011dc4:	e717      	b.n	8011bf6 <__kernel_rem_pio2+0x206>
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	2200      	movs	r2, #0
 8011dca:	e7b4      	b.n	8011d36 <__kernel_rem_pio2+0x346>
 8011dcc:	9901      	ldr	r1, [sp, #4]
 8011dce:	3201      	adds	r2, #1
 8011dd0:	428a      	cmp	r2, r1
 8011dd2:	d1ab      	bne.n	8011d2c <__kernel_rem_pio2+0x33c>
 8011dd4:	e7c9      	b.n	8011d6a <__kernel_rem_pio2+0x37a>
 8011dd6:	4ba9      	ldr	r3, [pc, #676]	; (801207c <__kernel_rem_pio2+0x68c>)
 8011dd8:	2200      	movs	r2, #0
 8011dda:	f7ee fe93 	bl	8000b04 <__aeabi_dcmpge>
 8011dde:	2800      	cmp	r0, #0
 8011de0:	f040 8152 	bne.w	8012088 <__kernel_rem_pio2+0x698>
 8011de4:	4605      	mov	r5, r0
 8011de6:	e706      	b.n	8011bf6 <__kernel_rem_pio2+0x206>
 8011de8:	9b01      	ldr	r3, [sp, #4]
 8011dea:	3301      	adds	r3, #1
 8011dec:	4699      	mov	r9, r3
 8011dee:	9302      	str	r3, [sp, #8]
 8011df0:	e735      	b.n	8011c5e <__kernel_rem_pio2+0x26e>
 8011df2:	2400      	movs	r4, #0
 8011df4:	2500      	movs	r5, #0
 8011df6:	e669      	b.n	8011acc <__kernel_rem_pio2+0xdc>
 8011df8:	9b06      	ldr	r3, [sp, #24]
 8011dfa:	9503      	str	r5, [sp, #12]
 8011dfc:	f1a3 0218 	sub.w	r2, r3, #24
 8011e00:	ab0c      	add	r3, sp, #48	; 0x30
 8011e02:	f8cd 801c 	str.w	r8, [sp, #28]
 8011e06:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 8011e0a:	9206      	str	r2, [sp, #24]
 8011e0c:	b973      	cbnz	r3, 8011e2c <__kernel_rem_pio2+0x43c>
 8011e0e:	9b01      	ldr	r3, [sp, #4]
 8011e10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011e14:	3b02      	subs	r3, #2
 8011e16:	a90c      	add	r1, sp, #48	; 0x30
 8011e18:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011e1c:	f853 1904 	ldr.w	r1, [r3], #-4
 8011e20:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011e24:	3a18      	subs	r2, #24
 8011e26:	2900      	cmp	r1, #0
 8011e28:	d0f8      	beq.n	8011e1c <__kernel_rem_pio2+0x42c>
 8011e2a:	9206      	str	r2, [sp, #24]
 8011e2c:	ed9f 0b8e 	vldr	d0, [pc, #568]	; 8012068 <__kernel_rem_pio2+0x678>
 8011e30:	9806      	ldr	r0, [sp, #24]
 8011e32:	f000 fb95 	bl	8012560 <scalbn>
 8011e36:	f1ba 0f00 	cmp.w	sl, #0
 8011e3a:	ec55 4b10 	vmov	r4, r5, d0
 8011e3e:	f2c0 81d9 	blt.w	80121f4 <__kernel_rem_pio2+0x804>
 8011e42:	ab70      	add	r3, sp, #448	; 0x1c0
 8011e44:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 8011e48:	aa0c      	add	r2, sp, #48	; 0x30
 8011e4a:	f10a 0301 	add.w	r3, sl, #1
 8011e4e:	9306      	str	r3, [sp, #24]
 8011e50:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8011e54:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8012080 <__kernel_rem_pio2+0x690>
 8011e58:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8011e5c:	9304      	str	r3, [sp, #16]
 8011e5e:	f10b 0708 	add.w	r7, fp, #8
 8011e62:	f04f 0800 	mov.w	r8, #0
 8011e66:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 8011e6a:	f7ee fb5b 	bl	8000524 <__aeabi_i2d>
 8011e6e:	4622      	mov	r2, r4
 8011e70:	462b      	mov	r3, r5
 8011e72:	f7ee fbc1 	bl	80005f8 <__aeabi_dmul>
 8011e76:	464b      	mov	r3, r9
 8011e78:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8011e7c:	4642      	mov	r2, r8
 8011e7e:	4620      	mov	r0, r4
 8011e80:	4629      	mov	r1, r5
 8011e82:	f7ee fbb9 	bl	80005f8 <__aeabi_dmul>
 8011e86:	ab0c      	add	r3, sp, #48	; 0x30
 8011e88:	429e      	cmp	r6, r3
 8011e8a:	4604      	mov	r4, r0
 8011e8c:	460d      	mov	r5, r1
 8011e8e:	d1ea      	bne.n	8011e66 <__kernel_rem_pio2+0x476>
 8011e90:	ab48      	add	r3, sp, #288	; 0x120
 8011e92:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 8011e96:	f8dd a014 	ldr.w	sl, [sp, #20]
 8011e9a:	f1ba 0f00 	cmp.w	sl, #0
 8011e9e:	f04f 0900 	mov.w	r9, #0
 8011ea2:	db2c      	blt.n	8011efe <__kernel_rem_pio2+0x50e>
 8011ea4:	a372      	add	r3, pc, #456	; (adr r3, 8012070 <__kernel_rem_pio2+0x680>)
 8011ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eaa:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8012084 <__kernel_rem_pio2+0x694>
 8011eae:	465f      	mov	r7, fp
 8011eb0:	2600      	movs	r6, #0
 8011eb2:	2400      	movs	r4, #0
 8011eb4:	2500      	movs	r5, #0
 8011eb6:	e003      	b.n	8011ec0 <__kernel_rem_pio2+0x4d0>
 8011eb8:	45b1      	cmp	r9, r6
 8011eba:	db10      	blt.n	8011ede <__kernel_rem_pio2+0x4ee>
 8011ebc:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8011ec0:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011ec4:	f7ee fb98 	bl	80005f8 <__aeabi_dmul>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	460b      	mov	r3, r1
 8011ecc:	4620      	mov	r0, r4
 8011ece:	4629      	mov	r1, r5
 8011ed0:	f7ee f9dc 	bl	800028c <__adddf3>
 8011ed4:	3601      	adds	r6, #1
 8011ed6:	45b2      	cmp	sl, r6
 8011ed8:	4604      	mov	r4, r0
 8011eda:	460d      	mov	r5, r1
 8011edc:	daec      	bge.n	8011eb8 <__kernel_rem_pio2+0x4c8>
 8011ede:	9b01      	ldr	r3, [sp, #4]
 8011ee0:	9a02      	ldr	r2, [sp, #8]
 8011ee2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011ee6:	454a      	cmp	r2, r9
 8011ee8:	e9c3 4500 	strd	r4, r5, [r3]
 8011eec:	f1ab 0b08 	sub.w	fp, fp, #8
 8011ef0:	f109 0301 	add.w	r3, r9, #1
 8011ef4:	d006      	beq.n	8011f04 <__kernel_rem_pio2+0x514>
 8011ef6:	f1ba 0f00 	cmp.w	sl, #0
 8011efa:	4699      	mov	r9, r3
 8011efc:	dad2      	bge.n	8011ea4 <__kernel_rem_pio2+0x4b4>
 8011efe:	2400      	movs	r4, #0
 8011f00:	2500      	movs	r5, #0
 8011f02:	e7ec      	b.n	8011ede <__kernel_rem_pio2+0x4ee>
 8011f04:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8011f06:	f8dd a008 	ldr.w	sl, [sp, #8]
 8011f0a:	2b02      	cmp	r3, #2
 8011f0c:	dc1e      	bgt.n	8011f4c <__kernel_rem_pio2+0x55c>
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	f300 8109 	bgt.w	8012126 <__kernel_rem_pio2+0x736>
 8011f14:	d113      	bne.n	8011f3e <__kernel_rem_pio2+0x54e>
 8011f16:	9c04      	ldr	r4, [sp, #16]
 8011f18:	9d01      	ldr	r5, [sp, #4]
 8011f1a:	3408      	adds	r4, #8
 8011f1c:	442c      	add	r4, r5
 8011f1e:	2000      	movs	r0, #0
 8011f20:	2100      	movs	r1, #0
 8011f22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011f26:	f7ee f9b1 	bl	800028c <__adddf3>
 8011f2a:	42a5      	cmp	r5, r4
 8011f2c:	d1f9      	bne.n	8011f22 <__kernel_rem_pio2+0x532>
 8011f2e:	9b03      	ldr	r3, [sp, #12]
 8011f30:	b113      	cbz	r3, 8011f38 <__kernel_rem_pio2+0x548>
 8011f32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f36:	4619      	mov	r1, r3
 8011f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f3a:	e9c3 0100 	strd	r0, r1, [r3]
 8011f3e:	9b07      	ldr	r3, [sp, #28]
 8011f40:	f003 0007 	and.w	r0, r3, #7
 8011f44:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8011f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f4c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8011f4e:	2b03      	cmp	r3, #3
 8011f50:	d1f5      	bne.n	8011f3e <__kernel_rem_pio2+0x54e>
 8011f52:	f1ba 0f00 	cmp.w	sl, #0
 8011f56:	f000 8169 	beq.w	801222c <__kernel_rem_pio2+0x83c>
 8011f5a:	9a01      	ldr	r2, [sp, #4]
 8011f5c:	9b04      	ldr	r3, [sp, #16]
 8011f5e:	18d3      	adds	r3, r2, r3
 8011f60:	e9d3 4500 	ldrd	r4, r5, [r3]
 8011f64:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 8011f68:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	4629      	mov	r1, r5
 8011f70:	4632      	mov	r2, r6
 8011f72:	463b      	mov	r3, r7
 8011f74:	f7ee f98a 	bl	800028c <__adddf3>
 8011f78:	46a0      	mov	r8, r4
 8011f7a:	46a9      	mov	r9, r5
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	460d      	mov	r5, r1
 8011f80:	4622      	mov	r2, r4
 8011f82:	462b      	mov	r3, r5
 8011f84:	4630      	mov	r0, r6
 8011f86:	4639      	mov	r1, r7
 8011f88:	f7ee f97e 	bl	8000288 <__aeabi_dsub>
 8011f8c:	464b      	mov	r3, r9
 8011f8e:	4642      	mov	r2, r8
 8011f90:	f7ee f97c 	bl	800028c <__adddf3>
 8011f94:	9b01      	ldr	r3, [sp, #4]
 8011f96:	455b      	cmp	r3, fp
 8011f98:	e9cb 0102 	strd	r0, r1, [fp, #8]
 8011f9c:	e9cb 4500 	strd	r4, r5, [fp]
 8011fa0:	d1e2      	bne.n	8011f68 <__kernel_rem_pio2+0x578>
 8011fa2:	f1ba 0f01 	cmp.w	sl, #1
 8011fa6:	f340 8141 	ble.w	801222c <__kernel_rem_pio2+0x83c>
 8011faa:	9a01      	ldr	r2, [sp, #4]
 8011fac:	9b04      	ldr	r3, [sp, #16]
 8011fae:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
 8011fb2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011fb6:	4413      	add	r3, r2
 8011fb8:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 8011fbc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8011fc0:	f101 0a08 	add.w	sl, r1, #8
 8011fc4:	9102      	str	r1, [sp, #8]
 8011fc6:	4492      	add	sl, r2
 8011fc8:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 8011fcc:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	4629      	mov	r1, r5
 8011fd4:	4632      	mov	r2, r6
 8011fd6:	463b      	mov	r3, r7
 8011fd8:	f7ee f958 	bl	800028c <__adddf3>
 8011fdc:	46a0      	mov	r8, r4
 8011fde:	46a9      	mov	r9, r5
 8011fe0:	4604      	mov	r4, r0
 8011fe2:	460d      	mov	r5, r1
 8011fe4:	4622      	mov	r2, r4
 8011fe6:	462b      	mov	r3, r5
 8011fe8:	4630      	mov	r0, r6
 8011fea:	4639      	mov	r1, r7
 8011fec:	f7ee f94c 	bl	8000288 <__aeabi_dsub>
 8011ff0:	4642      	mov	r2, r8
 8011ff2:	464b      	mov	r3, r9
 8011ff4:	f7ee f94a 	bl	800028c <__adddf3>
 8011ff8:	45d3      	cmp	fp, sl
 8011ffa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011ffe:	e9ca 4500 	strd	r4, r5, [sl]
 8012002:	d1e3      	bne.n	8011fcc <__kernel_rem_pio2+0x5dc>
 8012004:	9c02      	ldr	r4, [sp, #8]
 8012006:	9b01      	ldr	r3, [sp, #4]
 8012008:	3410      	adds	r4, #16
 801200a:	441c      	add	r4, r3
 801200c:	f103 0510 	add.w	r5, r3, #16
 8012010:	2000      	movs	r0, #0
 8012012:	2100      	movs	r1, #0
 8012014:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012018:	f7ee f938 	bl	800028c <__adddf3>
 801201c:	42a5      	cmp	r5, r4
 801201e:	d1f9      	bne.n	8012014 <__kernel_rem_pio2+0x624>
 8012020:	9b03      	ldr	r3, [sp, #12]
 8012022:	2b00      	cmp	r3, #0
 8012024:	f040 80bd 	bne.w	80121a2 <__kernel_rem_pio2+0x7b2>
 8012028:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801202a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 801202e:	9801      	ldr	r0, [sp, #4]
 8012030:	e9d0 2300 	ldrd	r2, r3, [r0]
 8012034:	e9c4 2300 	strd	r2, r3, [r4]
 8012038:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 801203c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8012040:	9b07      	ldr	r3, [sp, #28]
 8012042:	f003 0007 	and.w	r0, r3, #7
 8012046:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801204a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801204e:	9b01      	ldr	r3, [sp, #4]
 8012050:	1e5a      	subs	r2, r3, #1
 8012052:	ab0c      	add	r3, sp, #48	; 0x30
 8012054:	a90c      	add	r1, sp, #48	; 0x30
 8012056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801205a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801205e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012062:	e694      	b.n	8011d8e <__kernel_rem_pio2+0x39e>
 8012064:	f3af 8000 	nop.w
 8012068:	00000000 	.word	0x00000000
 801206c:	3ff00000 	.word	0x3ff00000
 8012070:	40000000 	.word	0x40000000
 8012074:	3ff921fb 	.word	0x3ff921fb
 8012078:	3ff00000 	.word	0x3ff00000
 801207c:	3fe00000 	.word	0x3fe00000
 8012080:	3e700000 	.word	0x3e700000
 8012084:	0801f990 	.word	0x0801f990
 8012088:	9b01      	ldr	r3, [sp, #4]
 801208a:	2b00      	cmp	r3, #0
 801208c:	f108 0801 	add.w	r8, r8, #1
 8012090:	bfc8      	it	gt
 8012092:	2502      	movgt	r5, #2
 8012094:	f73f ae42 	bgt.w	8011d1c <__kernel_rem_pio2+0x32c>
 8012098:	4632      	mov	r2, r6
 801209a:	463b      	mov	r3, r7
 801209c:	4965      	ldr	r1, [pc, #404]	; (8012234 <__kernel_rem_pio2+0x844>)
 801209e:	2000      	movs	r0, #0
 80120a0:	f7ee f8f2 	bl	8000288 <__aeabi_dsub>
 80120a4:	2502      	movs	r5, #2
 80120a6:	4606      	mov	r6, r0
 80120a8:	460f      	mov	r7, r1
 80120aa:	e5a4      	b.n	8011bf6 <__kernel_rem_pio2+0x206>
 80120ac:	2100      	movs	r1, #0
 80120ae:	f06f 0317 	mvn.w	r3, #23
 80120b2:	9107      	str	r1, [sp, #28]
 80120b4:	e4bb      	b.n	8011a2e <__kernel_rem_pio2+0x3e>
 80120b6:	2400      	movs	r4, #0
 80120b8:	e657      	b.n	8011d6a <__kernel_rem_pio2+0x37a>
 80120ba:	ec47 6b10 	vmov	d0, r6, r7
 80120be:	9e06      	ldr	r6, [sp, #24]
 80120c0:	9503      	str	r5, [sp, #12]
 80120c2:	4270      	negs	r0, r6
 80120c4:	f8cd 801c 	str.w	r8, [sp, #28]
 80120c8:	f000 fa4a 	bl	8012560 <scalbn>
 80120cc:	ec55 4b10 	vmov	r4, r5, d0
 80120d0:	4b59      	ldr	r3, [pc, #356]	; (8012238 <__kernel_rem_pio2+0x848>)
 80120d2:	ee10 0a10 	vmov	r0, s0
 80120d6:	2200      	movs	r2, #0
 80120d8:	4629      	mov	r1, r5
 80120da:	f7ee fd13 	bl	8000b04 <__aeabi_dcmpge>
 80120de:	2800      	cmp	r0, #0
 80120e0:	d055      	beq.n	801218e <__kernel_rem_pio2+0x79e>
 80120e2:	4b56      	ldr	r3, [pc, #344]	; (801223c <__kernel_rem_pio2+0x84c>)
 80120e4:	9f01      	ldr	r7, [sp, #4]
 80120e6:	2200      	movs	r2, #0
 80120e8:	3618      	adds	r6, #24
 80120ea:	4620      	mov	r0, r4
 80120ec:	4629      	mov	r1, r5
 80120ee:	9606      	str	r6, [sp, #24]
 80120f0:	f7ee fa82 	bl	80005f8 <__aeabi_dmul>
 80120f4:	f7ee fd30 	bl	8000b58 <__aeabi_d2iz>
 80120f8:	4606      	mov	r6, r0
 80120fa:	f7ee fa13 	bl	8000524 <__aeabi_i2d>
 80120fe:	4b4e      	ldr	r3, [pc, #312]	; (8012238 <__kernel_rem_pio2+0x848>)
 8012100:	2200      	movs	r2, #0
 8012102:	f7ee fa79 	bl	80005f8 <__aeabi_dmul>
 8012106:	460b      	mov	r3, r1
 8012108:	4602      	mov	r2, r0
 801210a:	4629      	mov	r1, r5
 801210c:	4620      	mov	r0, r4
 801210e:	f7ee f8bb 	bl	8000288 <__aeabi_dsub>
 8012112:	f7ee fd21 	bl	8000b58 <__aeabi_d2iz>
 8012116:	f107 0a01 	add.w	sl, r7, #1
 801211a:	ab0c      	add	r3, sp, #48	; 0x30
 801211c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8012120:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 8012124:	e682      	b.n	8011e2c <__kernel_rem_pio2+0x43c>
 8012126:	9d01      	ldr	r5, [sp, #4]
 8012128:	9b06      	ldr	r3, [sp, #24]
 801212a:	2000      	movs	r0, #0
 801212c:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8012130:	2100      	movs	r1, #0
 8012132:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012136:	f7ee f8a9 	bl	800028c <__adddf3>
 801213a:	42a5      	cmp	r5, r4
 801213c:	d1f9      	bne.n	8012132 <__kernel_rem_pio2+0x742>
 801213e:	9b03      	ldr	r3, [sp, #12]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d147      	bne.n	80121d4 <__kernel_rem_pio2+0x7e4>
 8012144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012146:	e9c3 0100 	strd	r0, r1, [r3]
 801214a:	460b      	mov	r3, r1
 801214c:	9901      	ldr	r1, [sp, #4]
 801214e:	4602      	mov	r2, r0
 8012150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012154:	f7ee f898 	bl	8000288 <__aeabi_dsub>
 8012158:	f1ba 0f00 	cmp.w	sl, #0
 801215c:	dd0d      	ble.n	801217a <__kernel_rem_pio2+0x78a>
 801215e:	ad4a      	add	r5, sp, #296	; 0x128
 8012160:	2401      	movs	r4, #1
 8012162:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012166:	3401      	adds	r4, #1
 8012168:	f7ee f890 	bl	800028c <__adddf3>
 801216c:	45a2      	cmp	sl, r4
 801216e:	daf8      	bge.n	8012162 <__kernel_rem_pio2+0x772>
 8012170:	9b03      	ldr	r3, [sp, #12]
 8012172:	b113      	cbz	r3, 801217a <__kernel_rem_pio2+0x78a>
 8012174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012178:	4619      	mov	r1, r3
 801217a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801217c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012180:	9b07      	ldr	r3, [sp, #28]
 8012182:	f003 0007 	and.w	r0, r3, #7
 8012186:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801218a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801218e:	4620      	mov	r0, r4
 8012190:	4629      	mov	r1, r5
 8012192:	f7ee fce1 	bl	8000b58 <__aeabi_d2iz>
 8012196:	9b01      	ldr	r3, [sp, #4]
 8012198:	aa0c      	add	r2, sp, #48	; 0x30
 801219a:	469a      	mov	sl, r3
 801219c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80121a0:	e644      	b.n	8011e2c <__kernel_rem_pio2+0x43c>
 80121a2:	9e01      	ldr	r6, [sp, #4]
 80121a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121a8:	6874      	ldr	r4, [r6, #4]
 80121aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80121ac:	6832      	ldr	r2, [r6, #0]
 80121ae:	68f5      	ldr	r5, [r6, #12]
 80121b0:	e9c1 0304 	strd	r0, r3, [r1, #16]
 80121b4:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80121b8:	e9c1 2300 	strd	r2, r3, [r1]
 80121bc:	68b2      	ldr	r2, [r6, #8]
 80121be:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80121c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80121c6:	9b07      	ldr	r3, [sp, #28]
 80121c8:	f003 0007 	and.w	r0, r3, #7
 80121cc:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80121d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121da:	6053      	str	r3, [r2, #4]
 80121dc:	460b      	mov	r3, r1
 80121de:	9901      	ldr	r1, [sp, #4]
 80121e0:	6010      	str	r0, [r2, #0]
 80121e2:	4602      	mov	r2, r0
 80121e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121e8:	f7ee f84e 	bl	8000288 <__aeabi_dsub>
 80121ec:	f1ba 0f00 	cmp.w	sl, #0
 80121f0:	dcb5      	bgt.n	801215e <__kernel_rem_pio2+0x76e>
 80121f2:	e7bf      	b.n	8012174 <__kernel_rem_pio2+0x784>
 80121f4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80121f6:	2b02      	cmp	r3, #2
 80121f8:	dc0a      	bgt.n	8012210 <__kernel_rem_pio2+0x820>
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	dc11      	bgt.n	8012222 <__kernel_rem_pio2+0x832>
 80121fe:	f47f ae9e 	bne.w	8011f3e <__kernel_rem_pio2+0x54e>
 8012202:	2000      	movs	r0, #0
 8012204:	2100      	movs	r1, #0
 8012206:	e692      	b.n	8011f2e <__kernel_rem_pio2+0x53e>
 8012208:	9b08      	ldr	r3, [sp, #32]
 801220a:	00db      	lsls	r3, r3, #3
 801220c:	9302      	str	r3, [sp, #8]
 801220e:	e466      	b.n	8011ade <__kernel_rem_pio2+0xee>
 8012210:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8012212:	2b03      	cmp	r3, #3
 8012214:	f47f ae93 	bne.w	8011f3e <__kernel_rem_pio2+0x54e>
 8012218:	ab48      	add	r3, sp, #288	; 0x120
 801221a:	2000      	movs	r0, #0
 801221c:	2100      	movs	r1, #0
 801221e:	9301      	str	r3, [sp, #4]
 8012220:	e6fe      	b.n	8012020 <__kernel_rem_pio2+0x630>
 8012222:	ab48      	add	r3, sp, #288	; 0x120
 8012224:	2000      	movs	r0, #0
 8012226:	2100      	movs	r1, #0
 8012228:	9301      	str	r3, [sp, #4]
 801222a:	e788      	b.n	801213e <__kernel_rem_pio2+0x74e>
 801222c:	2000      	movs	r0, #0
 801222e:	2100      	movs	r1, #0
 8012230:	e6f6      	b.n	8012020 <__kernel_rem_pio2+0x630>
 8012232:	bf00      	nop
 8012234:	3ff00000 	.word	0x3ff00000
 8012238:	41700000 	.word	0x41700000
 801223c:	3e700000 	.word	0x3e700000

08012240 <__kernel_sin>:
 8012240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012244:	ec55 4b10 	vmov	r4, r5, d0
 8012248:	b085      	sub	sp, #20
 801224a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801224e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012252:	ed8d 1b00 	vstr	d1, [sp]
 8012256:	9003      	str	r0, [sp, #12]
 8012258:	da07      	bge.n	801226a <__kernel_sin+0x2a>
 801225a:	ee10 0a10 	vmov	r0, s0
 801225e:	4629      	mov	r1, r5
 8012260:	f7ee fc7a 	bl	8000b58 <__aeabi_d2iz>
 8012264:	2800      	cmp	r0, #0
 8012266:	f000 8089 	beq.w	801237c <__kernel_sin+0x13c>
 801226a:	4622      	mov	r2, r4
 801226c:	462b      	mov	r3, r5
 801226e:	4620      	mov	r0, r4
 8012270:	4629      	mov	r1, r5
 8012272:	f7ee f9c1 	bl	80005f8 <__aeabi_dmul>
 8012276:	4606      	mov	r6, r0
 8012278:	460f      	mov	r7, r1
 801227a:	4632      	mov	r2, r6
 801227c:	463b      	mov	r3, r7
 801227e:	4620      	mov	r0, r4
 8012280:	4629      	mov	r1, r5
 8012282:	f7ee f9b9 	bl	80005f8 <__aeabi_dmul>
 8012286:	a343      	add	r3, pc, #268	; (adr r3, 8012394 <__kernel_sin+0x154>)
 8012288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228c:	4682      	mov	sl, r0
 801228e:	468b      	mov	fp, r1
 8012290:	4630      	mov	r0, r6
 8012292:	4639      	mov	r1, r7
 8012294:	f7ee f9b0 	bl	80005f8 <__aeabi_dmul>
 8012298:	a340      	add	r3, pc, #256	; (adr r3, 801239c <__kernel_sin+0x15c>)
 801229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229e:	f7ed fff3 	bl	8000288 <__aeabi_dsub>
 80122a2:	4632      	mov	r2, r6
 80122a4:	463b      	mov	r3, r7
 80122a6:	f7ee f9a7 	bl	80005f8 <__aeabi_dmul>
 80122aa:	a33e      	add	r3, pc, #248	; (adr r3, 80123a4 <__kernel_sin+0x164>)
 80122ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b0:	f7ed ffec 	bl	800028c <__adddf3>
 80122b4:	4632      	mov	r2, r6
 80122b6:	463b      	mov	r3, r7
 80122b8:	f7ee f99e 	bl	80005f8 <__aeabi_dmul>
 80122bc:	a33b      	add	r3, pc, #236	; (adr r3, 80123ac <__kernel_sin+0x16c>)
 80122be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c2:	f7ed ffe1 	bl	8000288 <__aeabi_dsub>
 80122c6:	4632      	mov	r2, r6
 80122c8:	463b      	mov	r3, r7
 80122ca:	f7ee f995 	bl	80005f8 <__aeabi_dmul>
 80122ce:	a339      	add	r3, pc, #228	; (adr r3, 80123b4 <__kernel_sin+0x174>)
 80122d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d4:	f7ed ffda 	bl	800028c <__adddf3>
 80122d8:	9b03      	ldr	r3, [sp, #12]
 80122da:	4680      	mov	r8, r0
 80122dc:	4689      	mov	r9, r1
 80122de:	b3ab      	cbz	r3, 801234c <__kernel_sin+0x10c>
 80122e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122e4:	4b2a      	ldr	r3, [pc, #168]	; (8012390 <__kernel_sin+0x150>)
 80122e6:	2200      	movs	r2, #0
 80122e8:	f7ee f986 	bl	80005f8 <__aeabi_dmul>
 80122ec:	4642      	mov	r2, r8
 80122ee:	464b      	mov	r3, r9
 80122f0:	4680      	mov	r8, r0
 80122f2:	4689      	mov	r9, r1
 80122f4:	4650      	mov	r0, sl
 80122f6:	4659      	mov	r1, fp
 80122f8:	f7ee f97e 	bl	80005f8 <__aeabi_dmul>
 80122fc:	4602      	mov	r2, r0
 80122fe:	460b      	mov	r3, r1
 8012300:	4640      	mov	r0, r8
 8012302:	4649      	mov	r1, r9
 8012304:	f7ed ffc0 	bl	8000288 <__aeabi_dsub>
 8012308:	4632      	mov	r2, r6
 801230a:	463b      	mov	r3, r7
 801230c:	f7ee f974 	bl	80005f8 <__aeabi_dmul>
 8012310:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012314:	f7ed ffb8 	bl	8000288 <__aeabi_dsub>
 8012318:	a31b      	add	r3, pc, #108	; (adr r3, 8012388 <__kernel_sin+0x148>)
 801231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231e:	4606      	mov	r6, r0
 8012320:	460f      	mov	r7, r1
 8012322:	4650      	mov	r0, sl
 8012324:	4659      	mov	r1, fp
 8012326:	f7ee f967 	bl	80005f8 <__aeabi_dmul>
 801232a:	4602      	mov	r2, r0
 801232c:	460b      	mov	r3, r1
 801232e:	4630      	mov	r0, r6
 8012330:	4639      	mov	r1, r7
 8012332:	f7ed ffab 	bl	800028c <__adddf3>
 8012336:	4602      	mov	r2, r0
 8012338:	460b      	mov	r3, r1
 801233a:	4620      	mov	r0, r4
 801233c:	4629      	mov	r1, r5
 801233e:	f7ed ffa3 	bl	8000288 <__aeabi_dsub>
 8012342:	ec41 0b10 	vmov	d0, r0, r1
 8012346:	b005      	add	sp, #20
 8012348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801234c:	4602      	mov	r2, r0
 801234e:	460b      	mov	r3, r1
 8012350:	4630      	mov	r0, r6
 8012352:	4639      	mov	r1, r7
 8012354:	f7ee f950 	bl	80005f8 <__aeabi_dmul>
 8012358:	a30b      	add	r3, pc, #44	; (adr r3, 8012388 <__kernel_sin+0x148>)
 801235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235e:	f7ed ff93 	bl	8000288 <__aeabi_dsub>
 8012362:	4652      	mov	r2, sl
 8012364:	465b      	mov	r3, fp
 8012366:	f7ee f947 	bl	80005f8 <__aeabi_dmul>
 801236a:	4622      	mov	r2, r4
 801236c:	462b      	mov	r3, r5
 801236e:	f7ed ff8d 	bl	800028c <__adddf3>
 8012372:	ec41 0b10 	vmov	d0, r0, r1
 8012376:	b005      	add	sp, #20
 8012378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801237c:	ec45 4b10 	vmov	d0, r4, r5
 8012380:	b005      	add	sp, #20
 8012382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012386:	bf00      	nop
 8012388:	55555549 	.word	0x55555549
 801238c:	3fc55555 	.word	0x3fc55555
 8012390:	3fe00000 	.word	0x3fe00000
 8012394:	5acfd57c 	.word	0x5acfd57c
 8012398:	3de5d93a 	.word	0x3de5d93a
 801239c:	8a2b9ceb 	.word	0x8a2b9ceb
 80123a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80123a4:	57b1fe7d 	.word	0x57b1fe7d
 80123a8:	3ec71de3 	.word	0x3ec71de3
 80123ac:	19c161d5 	.word	0x19c161d5
 80123b0:	3f2a01a0 	.word	0x3f2a01a0
 80123b4:	1110f8a6 	.word	0x1110f8a6
 80123b8:	3f811111 	.word	0x3f811111

080123bc <with_errno>:
 80123bc:	b5d0      	push	{r4, r6, r7, lr}
 80123be:	4606      	mov	r6, r0
 80123c0:	460f      	mov	r7, r1
 80123c2:	4614      	mov	r4, r2
 80123c4:	f7fd fb5a 	bl	800fa7c <__errno>
 80123c8:	4603      	mov	r3, r0
 80123ca:	4639      	mov	r1, r7
 80123cc:	4630      	mov	r0, r6
 80123ce:	601c      	str	r4, [r3, #0]
 80123d0:	bdd0      	pop	{r4, r6, r7, pc}
 80123d2:	bf00      	nop

080123d4 <xflow>:
 80123d4:	b530      	push	{r4, r5, lr}
 80123d6:	4614      	mov	r4, r2
 80123d8:	b083      	sub	sp, #12
 80123da:	461d      	mov	r5, r3
 80123dc:	b108      	cbz	r0, 80123e2 <xflow+0xe>
 80123de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80123e2:	e9cd 2300 	strd	r2, r3, [sp]
 80123e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123ea:	4620      	mov	r0, r4
 80123ec:	4629      	mov	r1, r5
 80123ee:	f7ee f903 	bl	80005f8 <__aeabi_dmul>
 80123f2:	2222      	movs	r2, #34	; 0x22
 80123f4:	b003      	add	sp, #12
 80123f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123fa:	f7ff bfdf 	b.w	80123bc <with_errno>
 80123fe:	bf00      	nop

08012400 <__math_uflow>:
 8012400:	b508      	push	{r3, lr}
 8012402:	2200      	movs	r2, #0
 8012404:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012408:	f7ff ffe4 	bl	80123d4 <xflow>
 801240c:	ec41 0b10 	vmov	d0, r0, r1
 8012410:	bd08      	pop	{r3, pc}
 8012412:	bf00      	nop

08012414 <__math_oflow>:
 8012414:	b508      	push	{r3, lr}
 8012416:	2200      	movs	r2, #0
 8012418:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801241c:	f7ff ffda 	bl	80123d4 <xflow>
 8012420:	ec41 0b10 	vmov	d0, r0, r1
 8012424:	bd08      	pop	{r3, pc}
 8012426:	bf00      	nop

08012428 <fabs>:
 8012428:	ec51 0b10 	vmov	r0, r1, d0
 801242c:	ee10 2a10 	vmov	r2, s0
 8012430:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012434:	ec43 2b10 	vmov	d0, r2, r3
 8012438:	4770      	bx	lr
 801243a:	bf00      	nop

0801243c <finite>:
 801243c:	b082      	sub	sp, #8
 801243e:	ed8d 0b00 	vstr	d0, [sp]
 8012442:	9801      	ldr	r0, [sp, #4]
 8012444:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012448:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801244c:	0fc0      	lsrs	r0, r0, #31
 801244e:	b002      	add	sp, #8
 8012450:	4770      	bx	lr
 8012452:	bf00      	nop
 8012454:	0000      	movs	r0, r0
	...

08012458 <floor>:
 8012458:	ec51 0b10 	vmov	r0, r1, d0
 801245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801245e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012462:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 8012466:	2d13      	cmp	r5, #19
 8012468:	ee10 6a10 	vmov	r6, s0
 801246c:	460c      	mov	r4, r1
 801246e:	dc30      	bgt.n	80124d2 <floor+0x7a>
 8012470:	2d00      	cmp	r5, #0
 8012472:	db1e      	blt.n	80124b2 <floor+0x5a>
 8012474:	4f38      	ldr	r7, [pc, #224]	; (8012558 <floor+0x100>)
 8012476:	412f      	asrs	r7, r5
 8012478:	ea01 0307 	and.w	r3, r1, r7
 801247c:	4303      	orrs	r3, r0
 801247e:	d02d      	beq.n	80124dc <floor+0x84>
 8012480:	a333      	add	r3, pc, #204	; (adr r3, 8012550 <floor+0xf8>)
 8012482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012486:	f7ed ff01 	bl	800028c <__adddf3>
 801248a:	2200      	movs	r2, #0
 801248c:	2300      	movs	r3, #0
 801248e:	f7ee fb43 	bl	8000b18 <__aeabi_dcmpgt>
 8012492:	b148      	cbz	r0, 80124a8 <floor+0x50>
 8012494:	2c00      	cmp	r4, #0
 8012496:	da04      	bge.n	80124a2 <floor+0x4a>
 8012498:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801249c:	fa43 f505 	asr.w	r5, r3, r5
 80124a0:	442c      	add	r4, r5
 80124a2:	ea24 0407 	bic.w	r4, r4, r7
 80124a6:	2600      	movs	r6, #0
 80124a8:	4623      	mov	r3, r4
 80124aa:	4632      	mov	r2, r6
 80124ac:	ec43 2b10 	vmov	d0, r2, r3
 80124b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124b2:	a327      	add	r3, pc, #156	; (adr r3, 8012550 <floor+0xf8>)
 80124b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b8:	f7ed fee8 	bl	800028c <__adddf3>
 80124bc:	2200      	movs	r2, #0
 80124be:	2300      	movs	r3, #0
 80124c0:	f7ee fb2a 	bl	8000b18 <__aeabi_dcmpgt>
 80124c4:	2800      	cmp	r0, #0
 80124c6:	d0ef      	beq.n	80124a8 <floor+0x50>
 80124c8:	2c00      	cmp	r4, #0
 80124ca:	db29      	blt.n	8012520 <floor+0xc8>
 80124cc:	2600      	movs	r6, #0
 80124ce:	4634      	mov	r4, r6
 80124d0:	e7ea      	b.n	80124a8 <floor+0x50>
 80124d2:	2d33      	cmp	r5, #51	; 0x33
 80124d4:	dd05      	ble.n	80124e2 <floor+0x8a>
 80124d6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80124da:	d019      	beq.n	8012510 <floor+0xb8>
 80124dc:	ec41 0b10 	vmov	d0, r0, r1
 80124e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124e2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80124e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80124ea:	40df      	lsrs	r7, r3
 80124ec:	4207      	tst	r7, r0
 80124ee:	d0f5      	beq.n	80124dc <floor+0x84>
 80124f0:	a317      	add	r3, pc, #92	; (adr r3, 8012550 <floor+0xf8>)
 80124f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f6:	f7ed fec9 	bl	800028c <__adddf3>
 80124fa:	2200      	movs	r2, #0
 80124fc:	2300      	movs	r3, #0
 80124fe:	f7ee fb0b 	bl	8000b18 <__aeabi_dcmpgt>
 8012502:	2800      	cmp	r0, #0
 8012504:	d0d0      	beq.n	80124a8 <floor+0x50>
 8012506:	2c00      	cmp	r4, #0
 8012508:	db13      	blt.n	8012532 <floor+0xda>
 801250a:	ea26 0607 	bic.w	r6, r6, r7
 801250e:	e7cb      	b.n	80124a8 <floor+0x50>
 8012510:	ee10 2a10 	vmov	r2, s0
 8012514:	460b      	mov	r3, r1
 8012516:	f7ed feb9 	bl	800028c <__adddf3>
 801251a:	ec41 0b10 	vmov	d0, r0, r1
 801251e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012520:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012524:	4a0d      	ldr	r2, [pc, #52]	; (801255c <floor+0x104>)
 8012526:	431e      	orrs	r6, r3
 8012528:	2e00      	cmp	r6, #0
 801252a:	bf18      	it	ne
 801252c:	4614      	movne	r4, r2
 801252e:	2600      	movs	r6, #0
 8012530:	e7ba      	b.n	80124a8 <floor+0x50>
 8012532:	2d14      	cmp	r5, #20
 8012534:	d008      	beq.n	8012548 <floor+0xf0>
 8012536:	2301      	movs	r3, #1
 8012538:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 801253c:	fa03 f505 	lsl.w	r5, r3, r5
 8012540:	19ae      	adds	r6, r5, r6
 8012542:	bf28      	it	cs
 8012544:	18e4      	addcs	r4, r4, r3
 8012546:	e7e0      	b.n	801250a <floor+0xb2>
 8012548:	3401      	adds	r4, #1
 801254a:	e7de      	b.n	801250a <floor+0xb2>
 801254c:	f3af 8000 	nop.w
 8012550:	8800759c 	.word	0x8800759c
 8012554:	7e37e43c 	.word	0x7e37e43c
 8012558:	000fffff 	.word	0x000fffff
 801255c:	bff00000 	.word	0xbff00000

08012560 <scalbn>:
 8012560:	b538      	push	{r3, r4, r5, lr}
 8012562:	ec53 2b10 	vmov	r2, r3, d0
 8012566:	f3c3 510a 	ubfx	r1, r3, #20, #11
 801256a:	4604      	mov	r4, r0
 801256c:	469c      	mov	ip, r3
 801256e:	bb89      	cbnz	r1, 80125d4 <scalbn+0x74>
 8012570:	ee10 1a10 	vmov	r1, s0
 8012574:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8012578:	ea5c 0101 	orrs.w	r1, ip, r1
 801257c:	d029      	beq.n	80125d2 <scalbn+0x72>
 801257e:	4619      	mov	r1, r3
 8012580:	2200      	movs	r2, #0
 8012582:	4b3d      	ldr	r3, [pc, #244]	; (8012678 <scalbn+0x118>)
 8012584:	4d3d      	ldr	r5, [pc, #244]	; (801267c <scalbn+0x11c>)
 8012586:	ee10 0a10 	vmov	r0, s0
 801258a:	f7ee f835 	bl	80005f8 <__aeabi_dmul>
 801258e:	42ac      	cmp	r4, r5
 8012590:	4602      	mov	r2, r0
 8012592:	460b      	mov	r3, r1
 8012594:	db16      	blt.n	80125c4 <scalbn+0x64>
 8012596:	468c      	mov	ip, r1
 8012598:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801259c:	3936      	subs	r1, #54	; 0x36
 801259e:	4421      	add	r1, r4
 80125a0:	f240 70fe 	movw	r0, #2046	; 0x7fe
 80125a4:	4281      	cmp	r1, r0
 80125a6:	dc21      	bgt.n	80125ec <scalbn+0x8c>
 80125a8:	2900      	cmp	r1, #0
 80125aa:	dc47      	bgt.n	801263c <scalbn+0xdc>
 80125ac:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80125b0:	da34      	bge.n	801261c <scalbn+0xbc>
 80125b2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80125b6:	428c      	cmp	r4, r1
 80125b8:	dc18      	bgt.n	80125ec <scalbn+0x8c>
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	a126      	add	r1, pc, #152	; (adr r1, 8012658 <scalbn+0xf8>)
 80125be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125c2:	db44      	blt.n	801264e <scalbn+0xee>
 80125c4:	a324      	add	r3, pc, #144	; (adr r3, 8012658 <scalbn+0xf8>)
 80125c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ca:	f7ee f815 	bl	80005f8 <__aeabi_dmul>
 80125ce:	ec41 0b10 	vmov	d0, r0, r1
 80125d2:	bd38      	pop	{r3, r4, r5, pc}
 80125d4:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80125d8:	4281      	cmp	r1, r0
 80125da:	d1e0      	bne.n	801259e <scalbn+0x3e>
 80125dc:	ee10 0a10 	vmov	r0, s0
 80125e0:	4619      	mov	r1, r3
 80125e2:	f7ed fe53 	bl	800028c <__adddf3>
 80125e6:	ec41 0b10 	vmov	d0, r0, r1
 80125ea:	bd38      	pop	{r3, r4, r5, pc}
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	a11c      	add	r1, pc, #112	; (adr r1, 8012660 <scalbn+0x100>)
 80125f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125f4:	db07      	blt.n	8012606 <scalbn+0xa6>
 80125f6:	a31a      	add	r3, pc, #104	; (adr r3, 8012660 <scalbn+0x100>)
 80125f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125fc:	f7ed fffc 	bl	80005f8 <__aeabi_dmul>
 8012600:	ec41 0b10 	vmov	d0, r0, r1
 8012604:	bd38      	pop	{r3, r4, r5, pc}
 8012606:	a118      	add	r1, pc, #96	; (adr r1, 8012668 <scalbn+0x108>)
 8012608:	e9d1 0100 	ldrd	r0, r1, [r1]
 801260c:	a314      	add	r3, pc, #80	; (adr r3, 8012660 <scalbn+0x100>)
 801260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012612:	f7ed fff1 	bl	80005f8 <__aeabi_dmul>
 8012616:	ec41 0b10 	vmov	d0, r0, r1
 801261a:	e7f3      	b.n	8012604 <scalbn+0xa4>
 801261c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8012620:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 8012624:	3136      	adds	r1, #54	; 0x36
 8012626:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
 801262a:	4610      	mov	r0, r2
 801262c:	4619      	mov	r1, r3
 801262e:	2200      	movs	r2, #0
 8012630:	4b13      	ldr	r3, [pc, #76]	; (8012680 <scalbn+0x120>)
 8012632:	f7ed ffe1 	bl	80005f8 <__aeabi_dmul>
 8012636:	ec41 0b10 	vmov	d0, r0, r1
 801263a:	bd38      	pop	{r3, r4, r5, pc}
 801263c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 8012640:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 8012644:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
 8012648:	ec43 2b10 	vmov	d0, r2, r3
 801264c:	bd38      	pop	{r3, r4, r5, pc}
 801264e:	a108      	add	r1, pc, #32	; (adr r1, 8012670 <scalbn+0x110>)
 8012650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012654:	e7b6      	b.n	80125c4 <scalbn+0x64>
 8012656:	bf00      	nop
 8012658:	c2f8f359 	.word	0xc2f8f359
 801265c:	01a56e1f 	.word	0x01a56e1f
 8012660:	8800759c 	.word	0x8800759c
 8012664:	7e37e43c 	.word	0x7e37e43c
 8012668:	8800759c 	.word	0x8800759c
 801266c:	fe37e43c 	.word	0xfe37e43c
 8012670:	c2f8f359 	.word	0xc2f8f359
 8012674:	81a56e1f 	.word	0x81a56e1f
 8012678:	43500000 	.word	0x43500000
 801267c:	ffff3cb0 	.word	0xffff3cb0
 8012680:	3c900000 	.word	0x3c900000

08012684 <_init>:
 8012684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012686:	bf00      	nop
 8012688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801268a:	bc08      	pop	{r3}
 801268c:	469e      	mov	lr, r3
 801268e:	4770      	bx	lr

08012690 <_fini>:
 8012690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012692:	bf00      	nop
 8012694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012696:	bc08      	pop	{r3}
 8012698:	469e      	mov	lr, r3
 801269a:	4770      	bx	lr
