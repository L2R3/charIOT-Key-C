
charIOT-Key-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800be48  0800be48  0001be48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c258  0800c258  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c258  0800c258  0001c258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c260  0800c260  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c260  0800c260  0001c260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c264  0800c264  0001c264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800c268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa0  200000a8  0800c310  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  0800c310  00020b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f6a0  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b77  00000000  00000000  0006f778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004750  00000000  00000000  000752f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000044e0  00000000  00000000  00079a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005be1  00000000  00000000  0007df20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031741  00000000  00000000  00083b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fad7f  00000000  00000000  000b5242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001affc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000145a8  00000000  00000000  001b0014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be2c 	.word	0x0800be2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800be2c 	.word	0x0800be2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	7c1b      	ldrb	r3, [r3, #16]
 8000f5a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	fb02 f303 	mul.w	r3, r2, r3
 8000f6a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f008 fbc0 	bl	8009700 <memset>
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
 8000f94:	4613      	mov	r3, r2
 8000f96:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	7c1b      	ldrb	r3, [r3, #16]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	89ba      	ldrh	r2, [r7, #12]
 8000fb0:	fb12 f303 	smulbb	r3, r2, r3
 8000fb4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000fb6:	89bb      	ldrh	r3, [r7, #12]
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000fbc:	89bb      	ldrh	r3, [r7, #12]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000fc4:	7bf9      	ldrb	r1, [r7, #15]
 8000fc6:	78ba      	ldrb	r2, [r7, #2]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	2100      	movs	r1, #0
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 fe04 	bl	8001bde <u8x8_DrawTile>
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ff0:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ff8:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	7c5b      	ldrb	r3, [r3, #17]
 8001000:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001002:	7bba      	ldrb	r2, [r7, #14]
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	4619      	mov	r1, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ffbd 	bl	8000f88 <u8g2_send_tile_row>
    src_row++;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	3301      	adds	r3, #1
 8001018:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	7b7b      	ldrb	r3, [r7, #13]
 800101e:	429a      	cmp	r2, r3
 8001020:	d203      	bcs.n	800102a <u8g2_send_buffer+0x4c>
 8001022:	7bba      	ldrb	r2, [r7, #14]
 8001024:	7b3b      	ldrb	r3, [r7, #12]
 8001026:	429a      	cmp	r2, r3
 8001028:	d3eb      	bcc.n	8001002 <u8g2_send_buffer+0x24>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	78fa      	ldrb	r2, [r7, #3]
 8001042:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	4798      	blx	r3
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff69 	bl	8000f4c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800107a:	2100      	movs	r1, #0
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffd8 	bl	8001032 <u8g2_SetBufferCurrTileRow>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffa3 	bl	8000fde <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800109e:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4413      	add	r3, r2
 80010aa:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	7c5b      	ldrb	r3, [r3, #17]
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d304      	bcc.n	80010c2 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 fde1 	bl	8001c80 <u8x8_RefreshDisplay>
    return 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	e00d      	b.n	80010de <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff3d 	bl	8000f4c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	4619      	mov	r1, r3
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffab 	bl	8001032 <u8g2_SetBufferCurrTileRow>
  return 1;
 80010dc:	2301      	movs	r3, #1
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffb7 	bl	8001062 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ffc8 	bl	800108a <u8g2_NextPage>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f9      	bne.n	80010f4 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001100:	2100      	movs	r1, #0
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff95 	bl	8001032 <u8g2_SetBufferCurrTileRow>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2204      	movs	r2, #4
 800111c:	701a      	strb	r2, [r3, #0]
  return buf;
 800111e:	4b03      	ldr	r3, [pc, #12]	; (800112c <u8g2_m_16_4_f+0x1c>)
  #endif
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	200000c4 	.word	0x200000c4

08001130 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1305 f */
void u8g2_Setup_ssd1305_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af02      	add	r7, sp, #8
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1305_128x32_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x44>)
 8001146:	490c      	ldr	r1, [pc, #48]	; (8001178 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x48>)
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f000 fdf9 	bl	8001d40 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 800114e:	f107 0313 	add.w	r3, r7, #19
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ffdc 	bl	8001110 <u8g2_m_16_4_f>
 8001158:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800115a:	7cfa      	ldrb	r2, [r7, #19]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x4c>)
 8001162:	6979      	ldr	r1, [r7, #20]
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f000 f965 	bl	8001434 <u8g2_SetupBuffer>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	080018d5 	.word	0x080018d5
 8001178:	08001a95 	.word	0x08001a95
 800117c:	080012b7 	.word	0x080012b7

08001180 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <u8g2_SetFontPosBaseline+0x1c>)
 80011a4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	08001181 	.word	0x08001181

080011b8 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af02      	add	r7, sp, #8
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	4608      	mov	r0, r1
 80011c2:	4611      	mov	r1, r2
 80011c4:	461a      	mov	r2, r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	817b      	strh	r3, [r7, #10]
 80011ca:	460b      	mov	r3, r1
 80011cc:	813b      	strh	r3, [r7, #8]
 80011ce:	4613      	mov	r3, r2
 80011d0:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80011d6:	893a      	ldrh	r2, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80011e0:	88f8      	ldrh	r0, [r7, #6]
 80011e2:	893a      	ldrh	r2, [r7, #8]
 80011e4:	8979      	ldrh	r1, [r7, #10]
 80011e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	4603      	mov	r3, r0
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	47a0      	blx	r4
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}

080011fa <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80011fa:	b490      	push	{r4, r7}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4604      	mov	r4, r0
 8001202:	4608      	mov	r0, r1
 8001204:	4611      	mov	r1, r2
 8001206:	461a      	mov	r2, r3
 8001208:	4623      	mov	r3, r4
 800120a:	80fb      	strh	r3, [r7, #6]
 800120c:	4603      	mov	r3, r0
 800120e:	80bb      	strh	r3, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	429a      	cmp	r2, r3
 800121e:	d20d      	bcs.n	800123c <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001220:	883a      	ldrh	r2, [r7, #0]
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	429a      	cmp	r2, r3
 8001226:	d901      	bls.n	800122c <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001228:	2301      	movs	r3, #1
 800122a:	e014      	b.n	8001256 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800122c:	887a      	ldrh	r2, [r7, #2]
 800122e:	883b      	ldrh	r3, [r7, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d901      	bls.n	8001238 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001234:	2301      	movs	r3, #1
 8001236:	e00e      	b.n	8001256 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001238:	2300      	movs	r3, #0
 800123a:	e00c      	b.n	8001256 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800123c:	883a      	ldrh	r2, [r7, #0]
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	429a      	cmp	r2, r3
 8001242:	d907      	bls.n	8001254 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	883b      	ldrh	r3, [r7, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d901      	bls.n	8001250 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800124c:	2301      	movs	r3, #1
 800124e:	e002      	b.n	8001256 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001250:	2300      	movs	r3, #0
 8001252:	e000      	b.n	8001256 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001254:	2300      	movs	r3, #0
    }
  }
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bc90      	pop	{r4, r7}
 800125e:	4770      	bx	lr

08001260 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	4608      	mov	r0, r1
 800126a:	4611      	mov	r1, r2
 800126c:	461a      	mov	r2, r3
 800126e:	4603      	mov	r3, r0
 8001270:	817b      	strh	r3, [r7, #10]
 8001272:	460b      	mov	r3, r1
 8001274:	813b      	strh	r3, [r7, #8]
 8001276:	4613      	mov	r3, r2
 8001278:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8001286:	8b3b      	ldrh	r3, [r7, #24]
 8001288:	893a      	ldrh	r2, [r7, #8]
 800128a:	f7ff ffb6 	bl	80011fa <u8g2_is_intersection_decision_tree>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <u8g2_IsIntersection+0x38>
    return 0; 
 8001294:	2300      	movs	r3, #0
 8001296:	e00a      	b.n	80012ae <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	897a      	ldrh	r2, [r7, #10]
 80012a8:	f7ff ffa7 	bl	80011fa <u8g2_is_intersection_decision_tree>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b089      	sub	sp, #36	; 0x24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	4608      	mov	r0, r1
 80012c0:	4611      	mov	r1, r2
 80012c2:	461a      	mov	r2, r3
 80012c4:	4603      	mov	r3, r0
 80012c6:	817b      	strh	r3, [r7, #10]
 80012c8:	460b      	mov	r3, r1
 80012ca:	813b      	strh	r3, [r7, #8]
 80012cc:	4613      	mov	r3, r2
 80012ce:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80012d0:	893b      	ldrh	r3, [r7, #8]
 80012d2:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80012d4:	7efb      	ldrb	r3, [r7, #27]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80012e0:	7e3a      	ldrb	r2, [r7, #24]
 80012e2:	7efb      	ldrb	r3, [r7, #27]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d801      	bhi.n	8001300 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80012fc:	7e3b      	ldrb	r3, [r7, #24]
 80012fe:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001306:	2b01      	cmp	r3, #1
 8001308:	d001      	beq.n	800130e <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800130a:	7e3b      	ldrb	r3, [r7, #24]
 800130c:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800130e:	893b      	ldrh	r3, [r7, #8]
 8001310:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001312:	8afb      	ldrh	r3, [r7, #22]
 8001314:	f023 0307 	bic.w	r3, r3, #7
 8001318:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	7c1b      	ldrb	r3, [r3, #16]
 8001320:	b29b      	uxth	r3, r3
 8001322:	8afa      	ldrh	r2, [r7, #22]
 8001324:	fb12 f303 	smulbb	r3, r2, r3
 8001328:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132e:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8001330:	8afb      	ldrh	r3, [r7, #22]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	4413      	add	r3, r2
 8001336:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001338:	897b      	ldrh	r3, [r7, #10]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	4413      	add	r3, r2
 800133e:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8001340:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001344:	2b00      	cmp	r3, #0
 8001346:	d117      	bne.n	8001378 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	7ebb      	ldrb	r3, [r7, #26]
 800134e:	4313      	orrs	r3, r2
 8001350:	b2da      	uxtb	r2, r3
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	781a      	ldrb	r2, [r3, #0]
 800135a:	7e7b      	ldrb	r3, [r7, #25]
 800135c:	4053      	eors	r3, r2
 800135e:	b2da      	uxtb	r2, r3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	3301      	adds	r3, #1
 8001368:	61fb      	str	r3, [r7, #28]
	len--;
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	3b01      	subs	r3, #1
 800136e:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1e8      	bne.n	8001348 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001376:	e038      	b.n	80013ea <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	781a      	ldrb	r2, [r3, #0]
 800137c:	7ebb      	ldrb	r3, [r7, #26]
 800137e:	4313      	orrs	r3, r2
 8001380:	b2da      	uxtb	r2, r3
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	781a      	ldrb	r2, [r3, #0]
 800138a:	7e7b      	ldrb	r3, [r7, #25]
 800138c:	4053      	eors	r3, r2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001394:	7efb      	ldrb	r3, [r7, #27]
 8001396:	3301      	adds	r3, #1
 8001398:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 800139a:	7efb      	ldrb	r3, [r7, #27]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	76fb      	strb	r3, [r7, #27]
      len--;
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80013a8:	7efb      	ldrb	r3, [r7, #27]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d114      	bne.n	80013d8 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80013b2:	461a      	mov	r2, r3
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	4413      	add	r3, r2
 80013b8:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d801      	bhi.n	80013c8 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d008      	beq.n	80013e4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80013d2:	2301      	movs	r3, #1
 80013d4:	767b      	strb	r3, [r7, #25]
 80013d6:	e005      	b.n	80013e4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80013d8:	7ebb      	ldrb	r3, [r7, #26]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80013de:	7e7b      	ldrb	r3, [r7, #25]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1c6      	bne.n	8001378 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80013ea:	bf00      	nop
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800141e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	4798      	blx	r3
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	79fa      	ldrb	r2, [r7, #7]
 800145a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f7ff ffa9 	bl	80013f6 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff fe77 	bl	8001198 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014ce:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80014d0:	89fb      	ldrh	r3, [r7, #14]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	89fa      	ldrh	r2, [r7, #14]
 80014da:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	7c1b      	ldrb	r3, [r3, #16]
 80014e0:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80014e2:	89fb      	ldrh	r3, [r7, #14]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	89fa      	ldrh	r2, [r7, #14]
 80014ec:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014f4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80014f6:	89fb      	ldrh	r3, [r7, #14]
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	89fa      	ldrh	r2, [r7, #14]
 8001500:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001508:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800150a:	89fb      	ldrh	r3, [r7, #14]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8001512:	4413      	add	r3, r2
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	7c52      	ldrb	r2, [r2, #17]
 8001518:	4293      	cmp	r3, r2
 800151a:	dd08      	ble.n	800152e <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	7c5b      	ldrb	r3, [r3, #17]
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001528:	b29b      	uxth	r3, r3
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8001550:	89fb      	ldrh	r3, [r7, #14]
 8001552:	4413      	add	r3, r2
 8001554:	b29a      	uxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	8a9a      	ldrh	r2, [r3, #20]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	8ada      	ldrh	r2, [r3, #22]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af02      	add	r7, sp, #8
 8001582:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	4603      	mov	r3, r0
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fe5d 	bl	8001260 <u8g2_IsIntersection>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d104      	bne.n	80015b6 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80015b4:	e03b      	b.n	800162e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d205      	bcs.n	80015da <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d905      	bls.n	80015f6 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001602:	429a      	cmp	r2, r3
 8001604:	d205      	bcs.n	8001612 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800161e:	429a      	cmp	r2, r3
 8001620:	d905      	bls.n	800162e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff3b 	bl	80014ba <u8g2_update_dimension_common>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff7b 	bl	800157c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af02      	add	r7, sp, #8
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	4608      	mov	r0, r1
 8001698:	4611      	mov	r1, r2
 800169a:	461a      	mov	r2, r3
 800169c:	4603      	mov	r3, r0
 800169e:	817b      	strh	r3, [r7, #10]
 80016a0:	460b      	mov	r3, r1
 80016a2:	813b      	strh	r3, [r7, #8]
 80016a4:	4613      	mov	r3, r2
 80016a6:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80016a8:	88f8      	ldrh	r0, [r7, #6]
 80016aa:	893a      	ldrh	r2, [r7, #8]
 80016ac:	8979      	ldrh	r1, [r7, #10]
 80016ae:	7e3b      	ldrb	r3, [r7, #24]
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	4603      	mov	r3, r0
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7ff fd7f 	bl	80011b8 <u8g2_draw_hv_line_2dir>
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80016c2:	b590      	push	{r4, r7, lr}
 80016c4:	b085      	sub	sp, #20
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	460b      	mov	r3, r1
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	691c      	ldr	r4, [r3, #16]
 80016d4:	7afa      	ldrb	r2, [r7, #11]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2117      	movs	r1, #23
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	47a0      	blx	r4
 80016de:	4603      	mov	r3, r0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd90      	pop	{r4, r7, pc}

080016e8 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80016f4:	1cfb      	adds	r3, r7, #3
 80016f6:	461a      	mov	r2, r3
 80016f8:	2101      	movs	r1, #1
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffe1 	bl	80016c2 <u8x8_byte_SendBytes>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800170a:	b590      	push	{r4, r7, lr}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691c      	ldr	r4, [r3, #16]
 8001716:	2300      	movs	r3, #0
 8001718:	2200      	movs	r2, #0
 800171a:	2118      	movs	r1, #24
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	47a0      	blx	r4
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bd90      	pop	{r4, r7, pc}

0800172a <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800172a:	b590      	push	{r4, r7, lr}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691c      	ldr	r4, [r3, #16]
 8001736:	2300      	movs	r3, #0
 8001738:	2200      	movs	r2, #0
 800173a:	2119      	movs	r1, #25
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	47a0      	blx	r4
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}

0800174a <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800174a:	b590      	push	{r4, r7, lr}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	460b      	mov	r3, r1
 8001754:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68dc      	ldr	r4, [r3, #12]
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	2300      	movs	r3, #0
 800175e:	2115      	movs	r1, #21
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	47a0      	blx	r4
 8001764:	4603      	mov	r3, r0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bd90      	pop	{r4, r7, pc}

0800176e <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800176e:	b590      	push	{r4, r7, lr}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68dc      	ldr	r4, [r3, #12]
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	2300      	movs	r3, #0
 8001782:	2116      	movs	r1, #22
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	47a0      	blx	r4
 8001788:	4603      	mov	r3, r0
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bd90      	pop	{r4, r7, pc}

08001792 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001792:	b590      	push	{r4, r7, lr}
 8001794:	b085      	sub	sp, #20
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	460b      	mov	r3, r1
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	68dc      	ldr	r4, [r3, #12]
 80017a4:	7afa      	ldrb	r2, [r7, #11]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2117      	movs	r1, #23
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	47a0      	blx	r4
 80017ae:	4603      	mov	r3, r0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd90      	pop	{r4, r7, pc}

080017b8 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68dc      	ldr	r4, [r3, #12]
 80017c4:	2300      	movs	r3, #0
 80017c6:	2200      	movs	r2, #0
 80017c8:	2118      	movs	r1, #24
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	47a0      	blx	r4
 80017ce:	4603      	mov	r3, r0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68dc      	ldr	r4, [r3, #12]
 80017e4:	2300      	movs	r3, #0
 80017e6:	2200      	movs	r2, #0
 80017e8:	2119      	movs	r1, #25
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	47a0      	blx	r4
 80017ee:	4603      	mov	r3, r0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd90      	pop	{r4, r7, pc}

080017f8 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	73fb      	strb	r3, [r7, #15]
    data++;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	2bfe      	cmp	r3, #254	; 0xfe
 8001812:	d031      	beq.n	8001878 <u8x8_cad_SendSequence+0x80>
 8001814:	2bfe      	cmp	r3, #254	; 0xfe
 8001816:	dc3d      	bgt.n	8001894 <u8x8_cad_SendSequence+0x9c>
 8001818:	2b19      	cmp	r3, #25
 800181a:	dc3b      	bgt.n	8001894 <u8x8_cad_SendSequence+0x9c>
 800181c:	2b18      	cmp	r3, #24
 800181e:	da23      	bge.n	8001868 <u8x8_cad_SendSequence+0x70>
 8001820:	2b16      	cmp	r3, #22
 8001822:	dc02      	bgt.n	800182a <u8x8_cad_SendSequence+0x32>
 8001824:	2b15      	cmp	r3, #21
 8001826:	da03      	bge.n	8001830 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8001828:	e034      	b.n	8001894 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800182a:	2b17      	cmp	r3, #23
 800182c:	d00e      	beq.n	800184c <u8x8_cad_SendSequence+0x54>
	return;
 800182e:	e031      	b.n	8001894 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68dc      	ldr	r4, [r3, #12]
 800183a:	7bba      	ldrb	r2, [r7, #14]
 800183c:	7bf9      	ldrb	r1, [r7, #15]
 800183e:	2300      	movs	r3, #0
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	47a0      	blx	r4
	  data++;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	603b      	str	r3, [r7, #0]
	  break;
 800184a:	e022      	b.n	8001892 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001852:	f107 030e 	add.w	r3, r7, #14
 8001856:	461a      	mov	r2, r3
 8001858:	2101      	movs	r1, #1
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ff99 	bl	8001792 <u8x8_cad_SendData>
	  data++;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	3301      	adds	r3, #1
 8001864:	603b      	str	r3, [r7, #0]
	  break;
 8001866:	e014      	b.n	8001892 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68dc      	ldr	r4, [r3, #12]
 800186c:	7bf9      	ldrb	r1, [r7, #15]
 800186e:	2300      	movs	r3, #0
 8001870:	2200      	movs	r2, #0
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	47a0      	blx	r4
	  break;
 8001876:	e00c      	b.n	8001892 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800187e:	7bbb      	ldrb	r3, [r7, #14]
 8001880:	461a      	mov	r2, r3
 8001882:	2129      	movs	r1, #41	; 0x29
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fa0a 	bl	8001c9e <u8x8_gpio_call>
	  data++;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	603b      	str	r3, [r7, #0]
	  break;
 8001890:	bf00      	nop
    cmd = *data;
 8001892:	e7b6      	b.n	8001802 <u8x8_cad_SendSequence+0xa>
	return;
 8001894:	bf00      	nop
    }
  }
}
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}

0800189c <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	460b      	mov	r3, r1
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f7ff ff2d 	bl	800170a <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80018b0:	2140      	movs	r1, #64	; 0x40
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff ff18 	bl	80016e8 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	691c      	ldr	r4, [r3, #16]
 80018bc:	7afa      	ldrb	r2, [r7, #11]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2117      	movs	r1, #23
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7ff ff2f 	bl	800172a <u8x8_byte_EndTransfer>
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}

080018d4 <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	72fb      	strb	r3, [r7, #11]
 80018e2:	4613      	mov	r3, r2
 80018e4:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 80018e6:	7afb      	ldrb	r3, [r7, #11]
 80018e8:	3b14      	subs	r3, #20
 80018ea:	2b05      	cmp	r3, #5
 80018ec:	d848      	bhi.n	8001980 <u8x8_cad_ssd13xx_i2c+0xac>
 80018ee:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <u8x8_cad_ssd13xx_i2c+0x20>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	0800195d 	.word	0x0800195d
 80018f8:	0800190d 	.word	0x0800190d
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	0800192d 	.word	0x0800192d
 8001904:	08001985 	.word	0x08001985
 8001908:	08001985 	.word	0x08001985
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f7ff fefc 	bl	800170a <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 8001912:	2100      	movs	r1, #0
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f7ff fee7 	bl	80016e8 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800191a:	7abb      	ldrb	r3, [r7, #10]
 800191c:	4619      	mov	r1, r3
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7ff fee2 	bl	80016e8 <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff ff00 	bl	800172a <u8x8_byte_EndTransfer>
      break;
 800192a:	e02c      	b.n	8001986 <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8001930:	e00a      	b.n	8001948 <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	2118      	movs	r1, #24
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f7ff ffb0 	bl	800189c <u8x8_i2c_data_transfer>
	arg_int-=24;
 800193c:	7abb      	ldrb	r3, [r7, #10]
 800193e:	3b18      	subs	r3, #24
 8001940:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3318      	adds	r3, #24
 8001946:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8001948:	7abb      	ldrb	r3, [r7, #10]
 800194a:	2b18      	cmp	r3, #24
 800194c:	d8f1      	bhi.n	8001932 <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800194e:	7abb      	ldrb	r3, [r7, #10]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	4619      	mov	r1, r3
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7ff ffa1 	bl	800189c <u8x8_i2c_data_transfer>
      break;
 800195a:	e014      	b.n	8001986 <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001962:	2bff      	cmp	r3, #255	; 0xff
 8001964:	d103      	bne.n	800196e <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2278      	movs	r2, #120	; 0x78
 800196a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	691c      	ldr	r4, [r3, #16]
 8001972:	7aba      	ldrb	r2, [r7, #10]
 8001974:	7af9      	ldrb	r1, [r7, #11]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	47a0      	blx	r4
 800197c:	4603      	mov	r3, r0
 800197e:	e003      	b.n	8001988 <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8001980:	2300      	movs	r3, #0
 8001982:	e001      	b.n	8001988 <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 8001984:	bf00      	nop
  }
  return 1;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd90      	pop	{r4, r7, pc}

08001990 <u8x8_d_ssd1305_generic>:
};



static uint8_t u8x8_d_ssd1305_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	460b      	mov	r3, r1
 800199c:	72fb      	strb	r3, [r7, #11]
 800199e:	4613      	mov	r3, r2
 80019a0:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80019a2:	7afb      	ldrb	r3, [r7, #11]
 80019a4:	2b0f      	cmp	r3, #15
 80019a6:	d006      	beq.n	80019b6 <u8x8_d_ssd1305_generic+0x26>
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	dc67      	bgt.n	8001a7c <u8x8_d_ssd1305_generic+0xec>
 80019ac:	2b0b      	cmp	r3, #11
 80019ae:	d048      	beq.n	8001a42 <u8x8_d_ssd1305_generic+0xb2>
 80019b0:	2b0e      	cmp	r3, #14
 80019b2:	d053      	beq.n	8001a5c <u8x8_d_ssd1305_generic+0xcc>
 80019b4:	e062      	b.n	8001a7c <u8x8_d_ssd1305_generic+0xec>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f7ff fefe 	bl	80017b8 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	795b      	ldrb	r3, [r3, #5]
 80019c0:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80019c2:	7dfb      	ldrb	r3, [r7, #23]
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	4413      	add	r3, r2
 80019d2:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80019d4:	2140      	movs	r1, #64	; 0x40
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff feb7 	bl	800174a <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f043 0310 	orr.w	r3, r3, #16
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4619      	mov	r1, r3
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff fead 	bl	800174a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	4619      	mov	r1, r3
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff feb7 	bl	800176e <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	799b      	ldrb	r3, [r3, #6]
 8001a04:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f7ff feae 	bl	800176e <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	791b      	ldrb	r3, [r3, #4]
 8001a16:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8001a1e:	7dbb      	ldrb	r3, [r7, #22]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4619      	mov	r1, r3
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f7ff feb2 	bl	8001792 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8001a2e:	7abb      	ldrb	r3, [r7, #10]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8001a34:	7abb      	ldrb	r3, [r7, #10]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1eb      	bne.n	8001a12 <u8x8_d_ssd1305_generic+0x82>
      
      u8x8_cad_EndTransfer(u8x8);
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff fecc 	bl	80017d8 <u8x8_cad_EndTransfer>
      break;
 8001a40:	e01e      	b.n	8001a80 <u8x8_d_ssd1305_generic+0xf0>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8001a42:	7abb      	ldrb	r3, [r7, #10]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d104      	bne.n	8001a52 <u8x8_d_ssd1305_generic+0xc2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave0_seq);
 8001a48:	4910      	ldr	r1, [pc, #64]	; (8001a8c <u8x8_d_ssd1305_generic+0xfc>)
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f7ff fed4 	bl	80017f8 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
      break;
 8001a50:	e016      	b.n	8001a80 <u8x8_d_ssd1305_generic+0xf0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
 8001a52:	490f      	ldr	r1, [pc, #60]	; (8001a90 <u8x8_d_ssd1305_generic+0x100>)
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f7ff fecf 	bl	80017f8 <u8x8_cad_SendSequence>
      break;
 8001a5a:	e011      	b.n	8001a80 <u8x8_d_ssd1305_generic+0xf0>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f7ff feab 	bl	80017b8 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8001a62:	2181      	movs	r1, #129	; 0x81
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f7ff fe70 	bl	800174a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1305 has range from 0 to 255 */
 8001a6a:	7abb      	ldrb	r3, [r7, #10]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f7ff fe7d 	bl	800176e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff feaf 	bl	80017d8 <u8x8_cad_EndTransfer>
      break;
 8001a7a:	e001      	b.n	8001a80 <u8x8_d_ssd1305_generic+0xf0>
#endif
    default:
      return 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e000      	b.n	8001a82 <u8x8_d_ssd1305_generic+0xf2>
  }
  return 1;
 8001a80:	2301      	movs	r3, #1
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	0800befc 	.word	0x0800befc
 8001a90:	0800bf04 	.word	0x0800bf04

08001a94 <u8x8_d_ssd1305_128x32_noname>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1305_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	72fb      	strb	r3, [r7, #11]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1305_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8001aa6:	7aba      	ldrb	r2, [r7, #10]
 8001aa8:	7af9      	ldrb	r1, [r7, #11]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f7ff ff6f 	bl	8001990 <u8x8_d_ssd1305_generic>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <u8x8_d_ssd1305_128x32_noname+0x28>
    return 1;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e032      	b.n	8001b22 <u8x8_d_ssd1305_128x32_noname+0x8e>
  
  switch(msg)
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	2b0d      	cmp	r3, #13
 8001ac0:	d006      	beq.n	8001ad0 <u8x8_d_ssd1305_128x32_noname+0x3c>
 8001ac2:	2b0d      	cmp	r3, #13
 8001ac4:	dc2a      	bgt.n	8001b1c <u8x8_d_ssd1305_128x32_noname+0x88>
 8001ac6:	2b09      	cmp	r3, #9
 8001ac8:	d023      	beq.n	8001b12 <u8x8_d_ssd1305_128x32_noname+0x7e>
 8001aca:	2b0a      	cmp	r3, #10
 8001acc:	d019      	beq.n	8001b02 <u8x8_d_ssd1305_128x32_noname+0x6e>
 8001ace:	e025      	b.n	8001b1c <u8x8_d_ssd1305_128x32_noname+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8001ad0:	7abb      	ldrb	r3, [r7, #10]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10a      	bne.n	8001aec <u8x8_d_ssd1305_128x32_noname+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip0_seq);
 8001ad6:	4915      	ldr	r1, [pc, #84]	; (8001b2c <u8x8_d_ssd1305_128x32_noname+0x98>)
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff fe8d 	bl	80017f8 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	7c9a      	ldrb	r2, [r3, #18]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8001aea:	e019      	b.n	8001b20 <u8x8_d_ssd1305_128x32_noname+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
 8001aec:	4910      	ldr	r1, [pc, #64]	; (8001b30 <u8x8_d_ssd1305_128x32_noname+0x9c>)
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f7ff fe82 	bl	80017f8 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	7cda      	ldrb	r2, [r3, #19]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8001b00:	e00e      	b.n	8001b20 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f82e 	bl	8001b64 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_noname_init_seq);    
 8001b08:	490a      	ldr	r1, [pc, #40]	; (8001b34 <u8x8_d_ssd1305_128x32_noname+0xa0>)
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff fe74 	bl	80017f8 <u8x8_cad_SendSequence>
      break;
 8001b10:	e006      	b.n	8001b20 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1305_128x32_noname_display_info);
 8001b12:	4909      	ldr	r1, [pc, #36]	; (8001b38 <u8x8_d_ssd1305_128x32_noname+0xa4>)
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f811 	bl	8001b3c <u8x8_d_helper_display_setup_memory>
      break;
 8001b1a:	e001      	b.n	8001b20 <u8x8_d_ssd1305_128x32_noname+0x8c>
    default:
      return 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e000      	b.n	8001b22 <u8x8_d_ssd1305_128x32_noname+0x8e>
  }
  return 1;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	0800bf0c 	.word	0x0800bf0c
 8001b30:	0800bf18 	.word	0x0800bf18
 8001b34:	0800bf3c 	.word	0x0800bf3c
 8001b38:	0800bf24 	.word	0x0800bf24

08001b3c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	7c9a      	ldrb	r2, [r3, #18]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695c      	ldr	r4, [r3, #20]
 8001b70:	2300      	movs	r3, #0
 8001b72:	2200      	movs	r2, #0
 8001b74:	2128      	movs	r1, #40	; 0x28
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68dc      	ldr	r4, [r3, #12]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2200      	movs	r2, #0
 8001b82:	2114      	movs	r1, #20
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	214b      	movs	r1, #75	; 0x4b
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f886 	bl	8001c9e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	791b      	ldrb	r3, [r3, #4]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2129      	movs	r1, #41	; 0x29
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f87e 	bl	8001c9e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	214b      	movs	r1, #75	; 0x4b
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f879 	bl	8001c9e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	791b      	ldrb	r3, [r3, #4]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2129      	movs	r1, #41	; 0x29
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f871 	bl	8001c9e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	214b      	movs	r1, #75	; 0x4b
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f86c 	bl	8001c9e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	795b      	ldrb	r3, [r3, #5]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2129      	movs	r1, #41	; 0x29
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f864 	bl	8001c9e <u8x8_gpio_call>
}    
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd90      	pop	{r4, r7, pc}

08001bde <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8001bde:	b590      	push	{r4, r7, lr}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	4608      	mov	r0, r1
 8001be8:	4611      	mov	r1, r2
 8001bea:	461a      	mov	r2, r3
 8001bec:	4603      	mov	r3, r0
 8001bee:	70fb      	strb	r3, [r7, #3]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70bb      	strb	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8001bfc:	78bb      	ldrb	r3, [r7, #2]
 8001bfe:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689c      	ldr	r4, [r3, #8]
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	2201      	movs	r2, #1
 8001c12:	210f      	movs	r1, #15
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	47a0      	blx	r4
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd90      	pop	{r4, r7, pc}

08001c22 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8001c22:	b590      	push	{r4, r7, lr}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689c      	ldr	r4, [r3, #8]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2200      	movs	r2, #0
 8001c32:	2109      	movs	r1, #9
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	47a0      	blx	r4
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}

08001c40 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689c      	ldr	r4, [r3, #8]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	2200      	movs	r2, #0
 8001c50:	210a      	movs	r1, #10
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}

08001c5e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8001c5e:	b590      	push	{r4, r7, lr}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689c      	ldr	r4, [r3, #8]
 8001c6e:	78fa      	ldrb	r2, [r7, #3]
 8001c70:	2300      	movs	r3, #0
 8001c72:	210b      	movs	r1, #11
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	47a0      	blx	r4
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}

08001c80 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689c      	ldr	r4, [r3, #8]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2110      	movs	r1, #16
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	47a0      	blx	r4
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}

08001c9e <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8001c9e:	b590      	push	{r4, r7, lr}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	70fb      	strb	r3, [r7, #3]
 8001caa:	4613      	mov	r3, r2
 8001cac:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695c      	ldr	r4, [r3, #20]
 8001cb2:	78ba      	ldrb	r2, [r7, #2]
 8001cb4:	78f9      	ldrb	r1, [r7, #3]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	47a0      	blx	r4
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}

08001cc4 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	72fb      	strb	r3, [r7, #11]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <u8x8_SetupDefaults+0x58>)
 8001cf6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <u8x8_SetupDefaults+0x58>)
 8001cfc:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <u8x8_SetupDefaults+0x58>)
 8001d02:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <u8x8_SetupDefaults+0x58>)
 8001d08:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	22ff      	movs	r2, #255	; 0xff
 8001d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	22ff      	movs	r2, #255	; 0xff
 8001d2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	08001cc5 	.word	0x08001cc5

08001d40 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f7ff ffc8 	bl	8001ce4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f7ff ff58 	bl	8001c22 <u8x8_SetupMemory>
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	rotationSteps(dreal, dimag);
 8001d82:	4946      	ldr	r1, [pc, #280]	; (8001e9c <main+0x120>)
 8001d84:	4846      	ldr	r0, [pc, #280]	; (8001ea0 <main+0x124>)
 8001d86:	f000 fccb 	bl	8002720 <rotationSteps>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d8a:	f001 f9b6 	bl	80030fa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d8e:	f000 f89f 	bl	8001ed0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d92:	f000 fac7 	bl	8002324 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001d96:	f000 fa95 	bl	80022c4 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 8001d9a:	f000 f96f 	bl	800207c <MX_CAN1_Init>
	MX_I2C1_Init();
 8001d9e:	f000 f9e1 	bl	8002164 <MX_I2C1_Init>
	MX_ADC1_Init();
 8001da2:	f000 f8f7 	bl	8001f94 <MX_ADC1_Init>
	MX_DAC1_Init();
 8001da6:	f000 f9a1 	bl	80020ec <MX_DAC1_Init>
	MX_TIM6_Init();
 8001daa:	f000 fa1f 	bl	80021ec <MX_TIM6_Init>
	MX_TIM7_Init();
 8001dae:	f000 fa53 	bl	8002258 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */

	MY_ADC1_Init();
 8001db2:	f000 fb25 	bl	8002400 <MY_ADC1_Init>

	HAL_TIM_Base_Start(&htim7);
 8001db6:	483b      	ldr	r0, [pc, #236]	; (8001ea4 <main+0x128>)
 8001db8:	f005 fbc8 	bl	800754c <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 8001dbc:	483a      	ldr	r0, [pc, #232]	; (8001ea8 <main+0x12c>)
 8001dbe:	f005 fc11 	bl	80075e4 <HAL_TIM_Base_Start_IT>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4839      	ldr	r0, [pc, #228]	; (8001eac <main+0x130>)
 8001dc6:	f003 f9dd 	bl	8005184 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8001dca:	2110      	movs	r1, #16
 8001dcc:	4837      	ldr	r0, [pc, #220]	; (8001eac <main+0x130>)
 8001dce:	f003 f9d9 	bl	8005184 <HAL_DAC_Start>

	setOutMuxBit(DRST_BIT, GPIO_PIN_RESET);
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 fbe9 	bl	80025b0 <setOutMuxBit>
	delayMicro(2);
 8001dde:	2002      	movs	r0, #2
 8001de0:	f000 fb6e 	bl	80024c0 <delayMicro>
	setOutMuxBit(DRST_BIT, GPIO_PIN_SET);
 8001de4:	2304      	movs	r3, #4
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2101      	movs	r1, #1
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 fbe0 	bl	80025b0 <setOutMuxBit>
	u8g2_Setup_ssd1305_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c,
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <main+0x134>)
 8001df2:	4a30      	ldr	r2, [pc, #192]	; (8001eb4 <main+0x138>)
 8001df4:	4930      	ldr	r1, [pc, #192]	; (8001eb8 <main+0x13c>)
 8001df6:	4831      	ldr	r0, [pc, #196]	; (8001ebc <main+0x140>)
 8001df8:	f7ff f99a 	bl	8001130 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>
			u8x8_gpio_and_delay);
	u8g2_InitDisplay(&u8g2);
 8001dfc:	482f      	ldr	r0, [pc, #188]	; (8001ebc <main+0x140>)
 8001dfe:	f7ff ff1f 	bl	8001c40 <u8x8_InitDisplay>
	u8g2_ClearDisplay(&u8g2);
 8001e02:	482e      	ldr	r0, [pc, #184]	; (8001ebc <main+0x140>)
 8001e04:	f7ff f96f 	bl	80010e6 <u8g2_ClearDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	482c      	ldr	r0, [pc, #176]	; (8001ebc <main+0x140>)
 8001e0c:	f7ff ff27 	bl	8001c5e <u8x8_SetPowerSave>
	setOutMuxBit(DEN_BIT, GPIO_PIN_SET);
 8001e10:	2303      	movs	r3, #3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2101      	movs	r1, #1
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fbca 	bl	80025b0 <setOutMuxBit>
//	setCANFilter(IDin, 0x7ff, 0);
//	HAL_CAN_Start(&hcan1);
//	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
//	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);

	serialPrintln("charIOT-Key-C");
 8001e1c:	4828      	ldr	r0, [pc, #160]	; (8001ec0 <main+0x144>)
 8001e1e:	f000 fb31 	bl	8002484 <serialPrintln>

	while (1) {

		ADC_channel(6);
 8001e22:	2006      	movs	r0, #6
 8001e24:	f000 fb66 	bl	80024f4 <ADC_channel>
		HAL_ADC_Start(&hadc1);
 8001e28:	4826      	ldr	r0, [pc, #152]	; (8001ec4 <main+0x148>)
 8001e2a:	f001 fd21 	bl	8003870 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8001e2e:	210a      	movs	r1, #10
 8001e30:	4824      	ldr	r0, [pc, #144]	; (8001ec4 <main+0x148>)
 8001e32:	f001 fdb3 	bl	800399c <HAL_ADC_PollForConversion>
		uint32_t adc_out2 = HAL_ADC_GetValue(&hadc1);
 8001e36:	4823      	ldr	r0, [pc, #140]	; (8001ec4 <main+0x148>)
 8001e38:	f001 fe3f 	bl	8003aba <HAL_ADC_GetValue>
 8001e3c:	6178      	str	r0, [r7, #20]
		HAL_ADC_Stop(&hadc1);
 8001e3e:	4821      	ldr	r0, [pc, #132]	; (8001ec4 <main+0x148>)
 8001e40:	f001 fd79 	bl	8003936 <HAL_ADC_Stop>

		char adc_out2_text[7];
		sprintf(adc_out2_text, "X: %lu", adc_out2);
 8001e44:	f107 0308 	add.w	r3, r7, #8
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	491f      	ldr	r1, [pc, #124]	; (8001ec8 <main+0x14c>)
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f007 fd03 	bl	8009858 <siprintf>
		serialPrintln(adc_out2_text);
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fb14 	bl	8002484 <serialPrintln>

		ADC_channel(5);
 8001e5c:	2005      	movs	r0, #5
 8001e5e:	f000 fb49 	bl	80024f4 <ADC_channel>
		HAL_ADC_Start(&hadc1);
 8001e62:	4818      	ldr	r0, [pc, #96]	; (8001ec4 <main+0x148>)
 8001e64:	f001 fd04 	bl	8003870 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8001e68:	210a      	movs	r1, #10
 8001e6a:	4816      	ldr	r0, [pc, #88]	; (8001ec4 <main+0x148>)
 8001e6c:	f001 fd96 	bl	800399c <HAL_ADC_PollForConversion>
		uint32_t adc_out1 = HAL_ADC_GetValue(&hadc1);
 8001e70:	4814      	ldr	r0, [pc, #80]	; (8001ec4 <main+0x148>)
 8001e72:	f001 fe22 	bl	8003aba <HAL_ADC_GetValue>
 8001e76:	6138      	str	r0, [r7, #16]
		HAL_ADC_Stop(&hadc1);
 8001e78:	4812      	ldr	r0, [pc, #72]	; (8001ec4 <main+0x148>)
 8001e7a:	f001 fd5c 	bl	8003936 <HAL_ADC_Stop>

		char adc_out1_text[7];
		sprintf(adc_out1_text, "Y: %lu", adc_out1);
 8001e7e:	463b      	mov	r3, r7
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4912      	ldr	r1, [pc, #72]	; (8001ecc <main+0x150>)
 8001e84:	4618      	mov	r0, r3
 8001e86:	f007 fce7 	bl	8009858 <siprintf>
		serialPrintln(adc_out1_text);
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 faf9 	bl	8002484 <serialPrintln>

		HAL_Delay(100);
 8001e92:	2064      	movs	r0, #100	; 0x64
 8001e94:	f001 f96a 	bl	800316c <HAL_Delay>
	while (1) {
 8001e98:	e7c3      	b.n	8001e22 <main+0xa6>
 8001e9a:	bf00      	nop
 8001e9c:	200005a0 	.word	0x200005a0
 8001ea0:	20000570 	.word	0x20000570
 8001ea4:	20000404 	.word	0x20000404
 8001ea8:	200003b8 	.word	0x200003b8
 8001eac:	20000350 	.word	0x20000350
 8001eb0:	08002639 	.word	0x08002639
 8001eb4:	08002659 	.word	0x08002659
 8001eb8:	0800bef0 	.word	0x0800bef0
 8001ebc:	200004dc 	.word	0x200004dc
 8001ec0:	0800bebc 	.word	0x0800bebc
 8001ec4:	200002c4 	.word	0x200002c4
 8001ec8:	0800becc 	.word	0x0800becc
 8001ecc:	0800bed4 	.word	0x0800bed4

08001ed0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b096      	sub	sp, #88	; 0x58
 8001ed4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	2244      	movs	r2, #68	; 0x44
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f007 fc0e 	bl	8009700 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ef6:	f004 f919 	bl	800612c <HAL_PWREx_ControlVoltageScaling>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001f00:	f000 fda0 	bl	8002a44 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001f04:	f004 f8f4 	bl	80060f0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f08:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <SystemClock_Config+0xc0>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0e:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <SystemClock_Config+0xc0>)
 8001f10:	f023 0318 	bic.w	r3, r3, #24
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8001f18:	2314      	movs	r3, #20
 8001f1a:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f20:	2301      	movs	r3, #1
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001f28:	2360      	movs	r3, #96	; 0x60
 8001f2a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001f30:	2301      	movs	r3, #1
 8001f32:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001f34:	2301      	movs	r3, #1
 8001f36:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001f38:	2328      	movs	r3, #40	; 0x28
 8001f3a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f40:	2302      	movs	r3, #2
 8001f42:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f44:	2302      	movs	r3, #2
 8001f46:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f004 f943 	bl	80061d8 <HAL_RCC_OscConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0x8c>
		Error_Handler();
 8001f58:	f000 fd74 	bl	8002a44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f5c:	230f      	movs	r3, #15
 8001f5e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f60:	2303      	movs	r3, #3
 8001f62:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001f70:	463b      	mov	r3, r7
 8001f72:	2104      	movs	r1, #4
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 fd43 	bl	8006a00 <HAL_RCC_ClockConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <SystemClock_Config+0xb4>
		Error_Handler();
 8001f80:	f000 fd60 	bl	8002a44 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8001f84:	f005 f988 	bl	8007298 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001f88:	bf00      	nop
 8001f8a:	3758      	adds	r7, #88	; 0x58
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000

08001f94 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
 8001fa8:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001faa:	4b30      	ldr	r3, [pc, #192]	; (800206c <MX_ADC1_Init+0xd8>)
 8001fac:	4a30      	ldr	r2, [pc, #192]	; (8002070 <MX_ADC1_Init+0xdc>)
 8001fae:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001fb0:	4b2e      	ldr	r3, [pc, #184]	; (800206c <MX_ADC1_Init+0xd8>)
 8001fb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fb6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fb8:	4b2c      	ldr	r3, [pc, #176]	; (800206c <MX_ADC1_Init+0xd8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	; (800206c <MX_ADC1_Init+0xd8>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fc4:	4b29      	ldr	r3, [pc, #164]	; (800206c <MX_ADC1_Init+0xd8>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fca:	4b28      	ldr	r3, [pc, #160]	; (800206c <MX_ADC1_Init+0xd8>)
 8001fcc:	2204      	movs	r2, #4
 8001fce:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fd0:	4b26      	ldr	r3, [pc, #152]	; (800206c <MX_ADC1_Init+0xd8>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001fd6:	4b25      	ldr	r3, [pc, #148]	; (800206c <MX_ADC1_Init+0xd8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 2;
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <MX_ADC1_Init+0xd8>)
 8001fde:	2202      	movs	r2, #2
 8001fe0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <MX_ADC1_Init+0xd8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <MX_ADC1_Init+0xd8>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <MX_ADC1_Init+0xd8>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	; (800206c <MX_ADC1_Init+0xd8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <MX_ADC1_Init+0xd8>)
 8002000:	2200      	movs	r2, #0
 8002002:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <MX_ADC1_Init+0xd8>)
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800200c:	4817      	ldr	r0, [pc, #92]	; (800206c <MX_ADC1_Init+0xd8>)
 800200e:	f001 fae7 	bl	80035e0 <HAL_ADC_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_ADC1_Init+0x88>
		Error_Handler();
 8002018:	f000 fd14 	bl	8002a44 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <MX_ADC1_Init+0xe0>)
 800201e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002020:	2306      	movs	r3, #6
 8002022:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002028:	237f      	movs	r3, #127	; 0x7f
 800202a:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800202c:	2304      	movs	r3, #4
 800202e:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002034:	463b      	mov	r3, r7
 8002036:	4619      	mov	r1, r3
 8002038:	480c      	ldr	r0, [pc, #48]	; (800206c <MX_ADC1_Init+0xd8>)
 800203a:	f001 fd4b 	bl	8003ad4 <HAL_ADC_ConfigChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_ADC1_Init+0xb4>
		Error_Handler();
 8002044:	f000 fcfe 	bl	8002a44 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <MX_ADC1_Init+0xe4>)
 800204a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800204c:	230c      	movs	r3, #12
 800204e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002050:	463b      	mov	r3, r7
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_ADC1_Init+0xd8>)
 8002056:	f001 fd3d 	bl	8003ad4 <HAL_ADC_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_ADC1_Init+0xd0>
		Error_Handler();
 8002060:	f000 fcf0 	bl	8002a44 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200002c4 	.word	0x200002c4
 8002070:	50040000 	.word	0x50040000
 8002074:	14f00020 	.word	0x14f00020
 8002078:	19200040 	.word	0x19200040

0800207c <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <MX_CAN1_Init+0x68>)
 8002082:	4a19      	ldr	r2, [pc, #100]	; (80020e8 <MX_CAN1_Init+0x6c>)
 8002084:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 40;
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <MX_CAN1_Init+0x68>)
 8002088:	2228      	movs	r2, #40	; 0x28
 800208a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <MX_CAN1_Init+0x68>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <MX_CAN1_Init+0x68>)
 8002094:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002098:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <MX_CAN1_Init+0x68>)
 800209c:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80020a0:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <MX_CAN1_Init+0x68>)
 80020a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020a8:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <MX_CAN1_Init+0x68>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <MX_CAN1_Init+0x68>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = ENABLE;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <MX_CAN1_Init+0x68>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <MX_CAN1_Init+0x68>)
 80020be:	2201      	movs	r2, #1
 80020c0:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <MX_CAN1_Init+0x68>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <MX_CAN1_Init+0x68>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <MX_CAN1_Init+0x68>)
 80020d0:	f002 fb0e 	bl	80046f0 <HAL_CAN_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_CAN1_Init+0x62>
		Error_Handler();
 80020da:	f000 fcb3 	bl	8002a44 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000328 	.word	0x20000328
 80020e8:	40006400 	.word	0x40006400

080020ec <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2224      	movs	r2, #36	; 0x24
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f007 fb01 	bl	8009700 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <MX_DAC1_Init+0x70>)
 8002100:	4a17      	ldr	r2, [pc, #92]	; (8002160 <MX_DAC1_Init+0x74>)
 8002102:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8002104:	4815      	ldr	r0, [pc, #84]	; (800215c <MX_DAC1_Init+0x70>)
 8002106:	f003 f81b 	bl	8005140 <HAL_DAC_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_DAC1_Init+0x28>
		Error_Handler();
 8002110:	f000 fc98 	bl	8002a44 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002118:	2304      	movs	r3, #4
 800211a:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8002120:	2301      	movs	r3, #1
 8002122:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	2200      	movs	r2, #0
 800212c:	4619      	mov	r1, r3
 800212e:	480b      	ldr	r0, [pc, #44]	; (800215c <MX_DAC1_Init+0x70>)
 8002130:	f003 f8fe 	bl	8005330 <HAL_DAC_ConfigChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_DAC1_Init+0x52>
		Error_Handler();
 800213a:	f000 fc83 	bl	8002a44 <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	2210      	movs	r2, #16
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_DAC1_Init+0x70>)
 8002146:	f003 f8f3 	bl	8005330 <HAL_DAC_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_DAC1_Init+0x68>
		Error_Handler();
 8002150:	f000 fc78 	bl	8002a44 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8002154:	bf00      	nop
 8002156:	3728      	adds	r7, #40	; 0x28
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000350 	.word	0x20000350
 8002160:	40007400 	.word	0x40007400

08002164 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <MX_I2C1_Init+0x7c>)
 800216a:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <MX_I2C1_Init+0x80>)
 800216c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00300F33;
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <MX_I2C1_Init+0x7c>)
 8002170:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <MX_I2C1_Init+0x84>)
 8002172:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <MX_I2C1_Init+0x7c>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <MX_I2C1_Init+0x7c>)
 800217c:	2201      	movs	r2, #1
 800217e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <MX_I2C1_Init+0x7c>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <MX_I2C1_Init+0x7c>)
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_I2C1_Init+0x7c>)
 800218e:	2200      	movs	r2, #0
 8002190:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <MX_I2C1_Init+0x7c>)
 8002194:	2200      	movs	r2, #0
 8002196:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_I2C1_Init+0x7c>)
 800219a:	2200      	movs	r2, #0
 800219c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800219e:	4810      	ldr	r0, [pc, #64]	; (80021e0 <MX_I2C1_Init+0x7c>)
 80021a0:	f003 fb6c 	bl	800587c <HAL_I2C_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_I2C1_Init+0x4a>
		Error_Handler();
 80021aa:	f000 fc4b 	bl	8002a44 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80021ae:	2100      	movs	r1, #0
 80021b0:	480b      	ldr	r0, [pc, #44]	; (80021e0 <MX_I2C1_Init+0x7c>)
 80021b2:	f003 fee5 	bl	8005f80 <HAL_I2CEx_ConfigAnalogFilter>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80021bc:	f000 fc42 	bl	8002a44 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80021c0:	2100      	movs	r1, #0
 80021c2:	4807      	ldr	r0, [pc, #28]	; (80021e0 <MX_I2C1_Init+0x7c>)
 80021c4:	f003 ff27 	bl	8006016 <HAL_I2CEx_ConfigDigitalFilter>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80021ce:	f000 fc39 	bl	8002a44 <Error_Handler>
	}

	/** I2C Fast mode Plus enable
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80021d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80021d6:	f003 ff6b 	bl	80060b0 <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000364 	.word	0x20000364
 80021e4:	40005400 	.word	0x40005400
 80021e8:	00300f33 	.word	0x00300f33

080021ec <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <MX_TIM6_Init+0x64>)
 80021fe:	4a15      	ldr	r2, [pc, #84]	; (8002254 <MX_TIM6_Init+0x68>)
 8002200:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <MX_TIM6_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <MX_TIM6_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 3636 - 1;
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <MX_TIM6_Init+0x64>)
 8002210:	f640 6233 	movw	r2, #3635	; 0xe33
 8002214:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <MX_TIM6_Init+0x64>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800221c:	480c      	ldr	r0, [pc, #48]	; (8002250 <MX_TIM6_Init+0x64>)
 800221e:	f005 f93d 	bl	800749c <HAL_TIM_Base_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM6_Init+0x40>
		Error_Handler();
 8002228:	f000 fc0c 	bl	8002a44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800222c:	2320      	movs	r3, #32
 800222e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	4619      	mov	r1, r3
 8002238:	4805      	ldr	r0, [pc, #20]	; (8002250 <MX_TIM6_Init+0x64>)
 800223a:	f005 fbd3 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM6_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002244:	f000 fbfe 	bl	8002a44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200003b8 	.word	0x200003b8
 8002254:	40001000 	.word	0x40001000

08002258 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <MX_TIM7_Init+0x64>)
 800226a:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <MX_TIM7_Init+0x68>)
 800226c:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 80 - 1;
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <MX_TIM7_Init+0x64>)
 8002270:	224f      	movs	r2, #79	; 0x4f
 8002272:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <MX_TIM7_Init+0x64>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 1000 - 1;
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <MX_TIM7_Init+0x64>)
 800227c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002280:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <MX_TIM7_Init+0x64>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8002288:	480c      	ldr	r0, [pc, #48]	; (80022bc <MX_TIM7_Init+0x64>)
 800228a:	f005 f907 	bl	800749c <HAL_TIM_Base_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM7_Init+0x40>
		Error_Handler();
 8002294:	f000 fbd6 	bl	8002a44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	4619      	mov	r1, r3
 80022a4:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_TIM7_Init+0x64>)
 80022a6:	f005 fb9d 	bl	80079e4 <HAL_TIMEx_MasterConfigSynchronization>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80022b0:	f000 fbc8 	bl	8002a44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000404 	.word	0x20000404
 80022c0:	40001400 	.word	0x40001400

080022c4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022ca:	4a15      	ldr	r2, [pc, #84]	; (8002320 <MX_USART2_UART_Init+0x5c>)
 80022cc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80022ce:	4b13      	ldr	r3, [pc, #76]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022ea:	220c      	movs	r2, #12
 80022ec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <MX_USART2_UART_Init+0x58>)
 8002302:	2200      	movs	r2, #0
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_USART2_UART_Init+0x58>)
 8002308:	f005 fbf0 	bl	8007aec <HAL_UART_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8002312:	f000 fb97 	bl	8002a44 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000450 	.word	0x20000450
 8002320:	40004400 	.word	0x40004400

08002324 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <MX_GPIO_Init+0xd4>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <MX_GPIO_Init+0xd4>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002346:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <MX_GPIO_Init+0xd4>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	4b29      	ldr	r3, [pc, #164]	; (80023f8 <MX_GPIO_Init+0xd4>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	4a28      	ldr	r2, [pc, #160]	; (80023f8 <MX_GPIO_Init+0xd4>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <MX_GPIO_Init+0xd4>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <MX_GPIO_Init+0xd4>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <MX_GPIO_Init+0xd4>)
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <MX_GPIO_Init+0xd4>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8002382:	2200      	movs	r2, #0
 8002384:	2140      	movs	r1, #64	; 0x40
 8002386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800238a:	f003 fa5f 	bl	800584c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800238e:	2200      	movs	r2, #0
 8002390:	213b      	movs	r1, #59	; 0x3b
 8002392:	481a      	ldr	r0, [pc, #104]	; (80023fc <MX_GPIO_Init+0xd8>)
 8002394:	f003 fa5a 	bl	800584c <HAL_GPIO_WritePin>
			RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin | OUT_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : C0_Pin C2_Pin C1_Pin C3_Pin */
	GPIO_InitStruct.Pin = C0_Pin | C2_Pin | C1_Pin | C3_Pin;
 8002398:	f44f 7362 	mov.w	r3, #904	; 0x388
 800239c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b0:	f003 f8e2 	bl	8005578 <HAL_GPIO_Init>

	/*Configure GPIO pin : REN_Pin */
	GPIO_InitStruct.Pin = REN_Pin;
 80023b4:	2340      	movs	r3, #64	; 0x40
 80023b6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b8:	2301      	movs	r3, #1
 80023ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(REN_GPIO_Port, &GPIO_InitStruct);
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	4619      	mov	r1, r3
 80023ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ce:	f003 f8d3 	bl	8005578 <HAL_GPIO_Init>

	/*Configure GPIO pins : RA0_Pin RA1_Pin LED_BUILTIN_Pin RA2_Pin
	 OUT_Pin */
	GPIO_InitStruct.Pin = RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin
 80023d2:	233b      	movs	r3, #59	; 0x3b
 80023d4:	60fb      	str	r3, [r7, #12]
			| OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	4619      	mov	r1, r3
 80023e8:	4804      	ldr	r0, [pc, #16]	; (80023fc <MX_GPIO_Init+0xd8>)
 80023ea:	f003 f8c5 	bl	8005578 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80023ee:	bf00      	nop
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	48000400 	.word	0x48000400

08002400 <MY_ADC1_Init>:

/* USER CODE BEGIN 4 */

static void MY_ADC1_Init(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0

	hadc1.Instance = ADC1;
 8002404:	4b1d      	ldr	r3, [pc, #116]	; (800247c <MY_ADC1_Init+0x7c>)
 8002406:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <MY_ADC1_Init+0x80>)
 8002408:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800240a:	4b1c      	ldr	r3, [pc, #112]	; (800247c <MY_ADC1_Init+0x7c>)
 800240c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002410:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <MY_ADC1_Init+0x7c>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002418:	4b18      	ldr	r3, [pc, #96]	; (800247c <MY_ADC1_Init+0x7c>)
 800241a:	2200      	movs	r2, #0
 800241c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800241e:	4b17      	ldr	r3, [pc, #92]	; (800247c <MY_ADC1_Init+0x7c>)
 8002420:	2201      	movs	r2, #1
 8002422:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <MY_ADC1_Init+0x7c>)
 8002426:	2204      	movs	r2, #4
 8002428:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <MY_ADC1_Init+0x7c>)
 800242c:	2200      	movs	r2, #0
 800242e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <MY_ADC1_Init+0x7c>)
 8002432:	2200      	movs	r2, #0
 8002434:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <MY_ADC1_Init+0x7c>)
 8002438:	2201      	movs	r2, #1
 800243a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <MY_ADC1_Init+0x7c>)
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <MY_ADC1_Init+0x7c>)
 8002446:	2200      	movs	r2, #0
 8002448:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <MY_ADC1_Init+0x7c>)
 800244c:	2200      	movs	r2, #0
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <MY_ADC1_Init+0x7c>)
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <MY_ADC1_Init+0x7c>)
 800245a:	2200      	movs	r2, #0
 800245c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <MY_ADC1_Init+0x7c>)
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002466:	4805      	ldr	r0, [pc, #20]	; (800247c <MY_ADC1_Init+0x7c>)
 8002468:	f001 f8ba 	bl	80035e0 <HAL_ADC_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MY_ADC1_Init+0x76>
		Error_Handler();
 8002472:	f000 fae7 	bl	8002a44 <Error_Handler>
	}

}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200002c4 	.word	0x200002c4
 8002480:	50040000 	.word	0x50040000

08002484 <serialPrintln>:

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);

}

void serialPrintln(char val[]) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7fd fe9f 	bl	80001d0 <strlen>
 8002492:	4603      	mov	r3, r0
 8002494:	b29a      	uxth	r2, r3
 8002496:	230a      	movs	r3, #10
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4808      	ldr	r0, [pc, #32]	; (80024bc <serialPrintln+0x38>)
 800249c:	f005 fb74 	bl	8007b88 <HAL_UART_Transmit>
	char rn[2] = "\r\n";
 80024a0:	f640 230d 	movw	r3, #2573	; 0xa0d
 80024a4:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) rn, 2, 10);
 80024a6:	f107 010c 	add.w	r1, r7, #12
 80024aa:	230a      	movs	r3, #10
 80024ac:	2202      	movs	r2, #2
 80024ae:	4803      	ldr	r0, [pc, #12]	; (80024bc <serialPrintln+0x38>)
 80024b0:	f005 fb6a 	bl	8007b88 <HAL_UART_Transmit>

}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000450 	.word	0x20000450

080024c0 <delayMicro>:

void delayMicro(uint16_t us) {
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	80fb      	strh	r3, [r7, #6]

	htim7.Instance->CNT = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <delayMicro+0x30>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
	while (htim7.Instance->CNT < us)
 80024d2:	bf00      	nop
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <delayMicro+0x30>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d3f9      	bcc.n	80024d4 <delayMicro+0x14>
		;

}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000404 	.word	0x20000404

080024f4 <ADC_channel>:

void ADC_channel(uint8_t channel) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80024fe:	f107 0308 	add.w	r3, r7, #8
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	611a      	str	r2, [r3, #16]
 800250e:	615a      	str	r2, [r3, #20]

	switch (channel) {
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	2b05      	cmp	r3, #5
 8002514:	d002      	beq.n	800251c <ADC_channel+0x28>
 8002516:	2b06      	cmp	r3, #6
 8002518:	d003      	beq.n	8002522 <ADC_channel+0x2e>
 800251a:	e005      	b.n	8002528 <ADC_channel+0x34>
	case 5: {
		sConfig.Channel = ADC_CHANNEL_5;
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <ADC_channel+0x70>)
 800251e:	60bb      	str	r3, [r7, #8]
		break;
 8002520:	e002      	b.n	8002528 <ADC_channel+0x34>
	}
	case 6: {
		sConfig.Channel = ADC_CHANNEL_6;
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <ADC_channel+0x74>)
 8002524:	60bb      	str	r3, [r7, #8]
		break;
 8002526:	bf00      	nop
	}
	}

	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002528:	2306      	movs	r3, #6
 800252a:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002530:	237f      	movs	r3, #127	; 0x7f
 8002532:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002534:	2304      	movs	r3, #4
 8002536:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	4619      	mov	r1, r3
 8002542:	480a      	ldr	r0, [pc, #40]	; (800256c <ADC_channel+0x78>)
 8002544:	f001 fac6 	bl	8003ad4 <HAL_ADC_ConfigChannel>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <ADC_channel+0x5e>
		Error_Handler();
 800254e:	f000 fa79 	bl	8002a44 <Error_Handler>
	}

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002552:	217f      	movs	r1, #127	; 0x7f
 8002554:	4805      	ldr	r0, [pc, #20]	; (800256c <ADC_channel+0x78>)
 8002556:	f002 f86b 	bl	8004630 <HAL_ADCEx_Calibration_Start>

}
 800255a:	bf00      	nop
 800255c:	3720      	adds	r7, #32
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	14f00020 	.word	0x14f00020
 8002568:	19200040 	.word	0x19200040
 800256c:	200002c4 	.word	0x200002c4

08002570 <CAN_RX>:

	return HAL_CAN_GetRxFifoFillLevel(&hcan1, 0);

}

uint32_t CAN_RX(uint32_t *ID, uint8_t data[8]) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef rxHeader;

	while (!HAL_CAN_GetRxFifoFillLevel(&hcan1, 0))
 800257a:	bf00      	nop
 800257c:	2100      	movs	r1, #0
 800257e:	480b      	ldr	r0, [pc, #44]	; (80025ac <CAN_RX+0x3c>)
 8002580:	f002 fac3 	bl	8004b0a <HAL_CAN_GetRxFifoFillLevel>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f8      	beq.n	800257c <CAN_RX+0xc>
		;

	uint32_t result = (uint32_t) HAL_CAN_GetRxMessage(&hcan1, 0, &rxHeader,
 800258a:	f107 0208 	add.w	r2, r7, #8
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2100      	movs	r1, #0
 8002592:	4806      	ldr	r0, [pc, #24]	; (80025ac <CAN_RX+0x3c>)
 8002594:	f002 f9a7 	bl	80048e6 <HAL_CAN_GetRxMessage>
 8002598:	4603      	mov	r3, r0
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
			data);

	*ID = rxHeader.StdId;
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	601a      	str	r2, [r3, #0]

	return result;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3728      	adds	r7, #40	; 0x28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000328 	.word	0x20000328

080025b0 <setOutMuxBit>:

void setOutMuxBit(const uint8_t bitIdx, const bool value) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	460a      	mov	r2, r1
 80025ba:	71fb      	strb	r3, [r7, #7]
 80025bc:	4613      	mov	r3, r2
 80025be:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2140      	movs	r1, #64	; 0x40
 80025c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c8:	f003 f940 	bl	800584c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, bitIdx & 0x01);
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	2101      	movs	r1, #1
 80025d8:	4816      	ldr	r0, [pc, #88]	; (8002634 <setOutMuxBit+0x84>)
 80025da:	f003 f937 	bl	800584c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, bitIdx & 0x02);
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	2102      	movs	r1, #2
 80025ea:	4812      	ldr	r0, [pc, #72]	; (8002634 <setOutMuxBit+0x84>)
 80025ec:	f003 f92e 	bl	800584c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, bitIdx & 0x04);
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	2110      	movs	r1, #16
 80025fc:	480d      	ldr	r0, [pc, #52]	; (8002634 <setOutMuxBit+0x84>)
 80025fe:	f003 f925 	bl	800584c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, value);
 8002602:	79bb      	ldrb	r3, [r7, #6]
 8002604:	461a      	mov	r2, r3
 8002606:	2120      	movs	r1, #32
 8002608:	480a      	ldr	r0, [pc, #40]	; (8002634 <setOutMuxBit+0x84>)
 800260a:	f003 f91f 	bl	800584c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 800260e:	2201      	movs	r2, #1
 8002610:	2140      	movs	r1, #64	; 0x40
 8002612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002616:	f003 f919 	bl	800584c <HAL_GPIO_WritePin>
	delayMicro(2);
 800261a:	2002      	movs	r0, #2
 800261c:	f7ff ff50 	bl	80024c0 <delayMicro>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8002620:	2200      	movs	r2, #0
 8002622:	2140      	movs	r1, #64	; 0x40
 8002624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002628:	f003 f910 	bl	800584c <HAL_GPIO_WritePin>

}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	48000400 	.word	0x48000400

08002638 <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	72fb      	strb	r3, [r7, #11]
 8002646:	4613      	mov	r3, r2
 8002648:	72bb      	strb	r3, [r7, #10]

	return 1;
 800264a:	2301      	movs	r3, #1

}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	72fb      	strb	r3, [r7, #11]
 8002666:	4613      	mov	r3, r2
 8002668:	72bb      	strb	r3, [r7, #10]

	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch (msg) {
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	3b14      	subs	r3, #20
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d847      	bhi.n	8002702 <u8x8_byte_i2c+0xaa>
 8002672:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <u8x8_byte_i2c+0x20>)
 8002674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002678:	08002707 	.word	0x08002707
 800267c:	08002703 	.word	0x08002703
 8002680:	08002703 	.word	0x08002703
 8002684:	080026ad 	.word	0x080026ad
 8002688:	080026dd 	.word	0x080026dd
 800268c:	080026e5 	.word	0x080026e5
 8002690:	08002703 	.word	0x08002703
 8002694:	08002703 	.word	0x08002703
 8002698:	08002703 	.word	0x08002703
 800269c:	08002703 	.word	0x08002703
 80026a0:	08002703 	.word	0x08002703
 80026a4:	08002703 	.word	0x08002703
 80026a8:	08002707 	.word	0x08002707
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	617b      	str	r3, [r7, #20]
		while (arg_int > 0) {
 80026b0:	e010      	b.n	80026d4 <u8x8_byte_i2c+0x7c>
			buffer[buf_idx++] = *data;
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <u8x8_byte_i2c+0xbc>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	b2d1      	uxtb	r1, r2
 80026ba:	4a16      	ldr	r2, [pc, #88]	; (8002714 <u8x8_byte_i2c+0xbc>)
 80026bc:	7011      	strb	r1, [r2, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	7819      	ldrb	r1, [r3, #0]
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <u8x8_byte_i2c+0xc0>)
 80026c6:	5499      	strb	r1, [r3, r2]
			data++;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3301      	adds	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
			arg_int--;
 80026ce:	7abb      	ldrb	r3, [r7, #10]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0) {
 80026d4:	7abb      	ldrb	r3, [r7, #10]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1eb      	bne.n	80026b2 <u8x8_byte_i2c+0x5a>
		}
		break;
 80026da:	e015      	b.n	8002708 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <u8x8_byte_i2c+0xbc>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
		break;
 80026e2:	e011      	b.n	8002708 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8),
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ea:	b299      	uxth	r1, r3
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <u8x8_byte_i2c+0xbc>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f04f 32ff 	mov.w	r2, #4294967295
 80026f6:	9200      	str	r2, [sp, #0]
 80026f8:	4a07      	ldr	r2, [pc, #28]	; (8002718 <u8x8_byte_i2c+0xc0>)
 80026fa:	4808      	ldr	r0, [pc, #32]	; (800271c <u8x8_byte_i2c+0xc4>)
 80026fc:	f003 f94e 	bl	800599c <HAL_I2C_Master_Transmit>
				(uint8_t*) buffer, buf_idx, HAL_MAX_DELAY);
		break;
 8002700:	e002      	b.n	8002708 <u8x8_byte_i2c+0xb0>
	default:
		return 0;
 8002702:	2300      	movs	r3, #0
 8002704:	e001      	b.n	800270a <u8x8_byte_i2c+0xb2>
		break;
 8002706:	bf00      	nop
	}

	return 1;
 8002708:	2301      	movs	r3, #1

}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200005d0 	.word	0x200005d0
 8002718:	200005d4 	.word	0x200005d4
 800271c:	20000364 	.word	0x20000364

08002720 <rotationSteps>:

	return keysRead;

}

void rotationSteps(float *dreal, float *dimag) {
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]

	float phi;

	for (int i = 0; i < 12; i++) {
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	e067      	b.n	8002800 <rotationSteps+0xe0>

		phi = 2 * M_PI * fA * pow(2, (i - 9) / 12.0) / fs;
 8002730:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <rotationSteps+0x100>)
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd ff08 	bl	8000548 <__aeabi_f2d>
 8002738:	a335      	add	r3, pc, #212	; (adr r3, 8002810 <rotationSteps+0xf0>)
 800273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273e:	f7fd ff5b 	bl	80005f8 <__aeabi_dmul>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4614      	mov	r4, r2
 8002748:	461d      	mov	r5, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3b09      	subs	r3, #9
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd fee8 	bl	8000524 <__aeabi_i2d>
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	4b32      	ldr	r3, [pc, #200]	; (8002824 <rotationSteps+0x104>)
 800275a:	f7fe f877 	bl	800084c <__aeabi_ddiv>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	ec43 2b17 	vmov	d7, r2, r3
 8002766:	eeb0 1a47 	vmov.f32	s2, s14
 800276a:	eef0 1a67 	vmov.f32	s3, s15
 800276e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8002818 <rotationSteps+0xf8>
 8002772:	f007 fcd9 	bl	800a128 <pow>
 8002776:	ec53 2b10 	vmov	r2, r3, d0
 800277a:	4620      	mov	r0, r4
 800277c:	4629      	mov	r1, r5
 800277e:	f7fd ff3b 	bl	80005f8 <__aeabi_dmul>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4614      	mov	r4, r2
 8002788:	461d      	mov	r5, r3
 800278a:	4b27      	ldr	r3, [pc, #156]	; (8002828 <rotationSteps+0x108>)
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fedb 	bl	8000548 <__aeabi_f2d>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4620      	mov	r0, r4
 8002798:	4629      	mov	r1, r5
 800279a:	f7fe f857 	bl	800084c <__aeabi_ddiv>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	f7fe f9ff 	bl	8000ba8 <__aeabi_d2f>
 80027aa:	4603      	mov	r3, r0
 80027ac:	60bb      	str	r3, [r7, #8]
		dreal[i] = cos(phi);
 80027ae:	68b8      	ldr	r0, [r7, #8]
 80027b0:	f7fd feca 	bl	8000548 <__aeabi_f2d>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	ec43 2b10 	vmov	d0, r2, r3
 80027bc:	f007 fc08 	bl	8009fd0 <cos>
 80027c0:	ec51 0b10 	vmov	r0, r1, d0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	18d4      	adds	r4, r2, r3
 80027cc:	f7fe f9ec 	bl	8000ba8 <__aeabi_d2f>
 80027d0:	4603      	mov	r3, r0
 80027d2:	6023      	str	r3, [r4, #0]
		dimag[i] = sin(phi);
 80027d4:	68b8      	ldr	r0, [r7, #8]
 80027d6:	f7fd feb7 	bl	8000548 <__aeabi_f2d>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	ec43 2b10 	vmov	d0, r2, r3
 80027e2:	f007 fc49 	bl	800a078 <sin>
 80027e6:	ec51 0b10 	vmov	r0, r1, d0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	18d4      	adds	r4, r2, r3
 80027f2:	f7fe f9d9 	bl	8000ba8 <__aeabi_d2f>
 80027f6:	4603      	mov	r3, r0
 80027f8:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 12; i++) {
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3301      	adds	r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b0b      	cmp	r3, #11
 8002804:	dd94      	ble.n	8002730 <rotationSteps+0x10>

	}

}
 8002806:	bf00      	nop
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bdb0      	pop	{r4, r5, r7, pc}
 8002810:	54442d18 	.word	0x54442d18
 8002814:	401921fb 	.word	0x401921fb
 8002818:	00000000 	.word	0x00000000
 800281c:	40000000 	.word	0x40000000
 8002820:	43dc0000 	.word	0x43dc0000
 8002824:	40280000 	.word	0x40280000
 8002828:	46abe000 	.word	0x46abe000

0800282c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

	CAN_MSG_t RX;
	CAN_RX(&RX.ID, RX.Message);
 8002834:	f107 020c 	add.w	r2, r7, #12
 8002838:	f107 030c 	add.w	r3, r7, #12
 800283c:	3308      	adds	r3, #8
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fe95 	bl	8002570 <CAN_RX>
	osMessageQueuePut(msgInQHandle, &RX.Message, 0, 0);
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	f107 010c 	add.w	r1, r7, #12
 800284e:	2300      	movs	r3, #0
 8002850:	2200      	movs	r2, #0
 8002852:	f005 fe5d 	bl	8008510 <osMessageQueuePut>

}
 8002856:	bf00      	nop
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	200004d4 	.word	0x200004d4

08002864 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f005 fe09 	bl	8008488 <osSemaphoreRelease>

}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200004d8 	.word	0x200004d8

08002884 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f005 fdf9 	bl	8008488 <osSemaphoreRelease>

}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200004d8 	.word	0x200004d8

080028a4 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f005 fde9 	bl	8008488 <osSemaphoreRelease>

}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200004d8 	.word	0x200004d8

080028c4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	if (htim == &htim6) {
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a53      	ldr	r2, [pc, #332]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	f040 8098 	bne.w	8002a06 <HAL_TIM_PeriodElapsedCallback+0x142>
		static float imag[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

		float real2;
		float imag2;

		float Vadd = 0;
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]

		uint16_t localKeys;

		localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 80028dc:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	837b      	strh	r3, [r7, #26]

		for (int i = 0; i < 12; i++) {
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	e062      	b.n	80029ae <HAL_TIM_PeriodElapsedCallback+0xea>

			if (!(localKeys & 1)) {
 80028e8:	8b7b      	ldrh	r3, [r7, #26]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d157      	bne.n	80029a2 <HAL_TIM_PeriodElapsedCallback+0xde>

				real2 = dreal[i] * real[i] - dimag[i] * imag[i];
 80028f2:	4a4c      	ldr	r2, [pc, #304]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	4a4a      	ldr	r2, [pc, #296]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800290e:	4a47      	ldr	r2, [pc, #284]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	edd3 6a00 	vldr	s13, [r3]
 800291a:	4a45      	ldr	r2, [pc, #276]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	edd3 7a00 	vldr	s15, [r3]
 8002926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292e:	edc7 7a03 	vstr	s15, [r7, #12]
				imag2 = dimag[i] * real[i] + dreal[i] * imag[i];
 8002932:	4a3e      	ldr	r2, [pc, #248]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	ed93 7a00 	vldr	s14, [r3]
 800293e:	4a3a      	ldr	r2, [pc, #232]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800294e:	4a35      	ldr	r2, [pc, #212]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	edd3 6a00 	vldr	s13, [r3]
 800295a:	4a35      	ldr	r2, [pc, #212]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800296e:	edc7 7a02 	vstr	s15, [r7, #8]

				real[i] = real2;
 8002972:	4a2d      	ldr	r2, [pc, #180]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	601a      	str	r2, [r3, #0]
				imag[i] = imag2;
 800297e:	4a2c      	ldr	r2, [pc, #176]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	601a      	str	r2, [r3, #0]

				Vadd += real[i];
 800298a:	4a27      	ldr	r2, [pc, #156]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	ed97 7a07 	vldr	s14, [r7, #28]
 800299a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299e:	edc7 7a07 	vstr	s15, [r7, #28]

			}

			localKeys >>= 1;
 80029a2:	8b7b      	ldrh	r3, [r7, #26]
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	837b      	strh	r3, [r7, #26]
		for (int i = 0; i < 12; i++) {
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3301      	adds	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b0b      	cmp	r3, #11
 80029b2:	dd99      	ble.n	80028e8 <HAL_TIM_PeriodElapsedCallback+0x24>

		}

		int16_t Vout = (int16_t) 1024 * Vadd / 12.0;
 80029b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80029b8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002a34 <HAL_TIM_PeriodElapsedCallback+0x170>
 80029bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c0:	ee17 0a90 	vmov	r0, s15
 80029c4:	f7fd fdc0 	bl	8000548 <__aeabi_f2d>
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80029ce:	f7fd ff3d 	bl	800084c <__aeabi_ddiv>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
 80029da:	f7fe f8bd 	bl	8000b58 <__aeabi_d2iz>
 80029de:	4603      	mov	r3, r0
 80029e0:	827b      	strh	r3, [r7, #18]

		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, Vout + 2048);
 80029e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80029e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	4813      	ldr	r0, [pc, #76]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x178>)
 80029f0:	f002 fc6f 	bl	80052d2 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, Vout + 2048);
 80029f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80029f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fc:	2200      	movs	r2, #0
 80029fe:	2110      	movs	r1, #16
 8002a00:	480e      	ldr	r0, [pc, #56]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002a02:	f002 fc66 	bl	80052d2 <HAL_DAC_SetValue>
//				GPIO_PIN_RESET);

	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM16) {
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIM_PeriodElapsedCallback+0x150>
		HAL_IncTick();
 8002a10:	f000 fb8c 	bl	800312c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002a14:	bf00      	nop
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	200003b8 	.word	0x200003b8
 8002a20:	20000000 	.word	0x20000000
 8002a24:	20000570 	.word	0x20000570
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	200005a0 	.word	0x200005a0
 8002a30:	200005f4 	.word	0x200005f4
 8002a34:	44800000 	.word	0x44800000
 8002a38:	40280000 	.word	0x40280000
 8002a3c:	20000350 	.word	0x20000350
 8002a40:	40014400 	.word	0x40014400

08002a44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a48:	b672      	cpsid	i
}
 8002a4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a4c:	e7fe      	b.n	8002a4c <Error_Handler+0x8>
	...

08002a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <HAL_MspInit+0x4c>)
 8002a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5a:	4a10      	ldr	r2, [pc, #64]	; (8002a9c <HAL_MspInit+0x4c>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6613      	str	r3, [r2, #96]	; 0x60
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <HAL_MspInit+0x4c>)
 8002a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_MspInit+0x4c>)
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_MspInit+0x4c>)
 8002a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a78:	6593      	str	r3, [r2, #88]	; 0x58
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_MspInit+0x4c>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	210f      	movs	r1, #15
 8002a8a:	f06f 0001 	mvn.w	r0, #1
 8002a8e:	f002 fb2d 	bl	80050ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b09e      	sub	sp, #120	; 0x78
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ab8:	f107 0310 	add.w	r3, r7, #16
 8002abc:	2254      	movs	r2, #84	; 0x54
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f006 fe1d 	bl	8009700 <memset>
  if(hadc->Instance==ADC1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a25      	ldr	r2, [pc, #148]	; (8002b60 <HAL_ADC_MspInit+0xc0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d143      	bne.n	8002b58 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002ad0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ad4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002ad6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ada:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002adc:	2301      	movs	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 40;
 8002ae4:	2328      	movs	r3, #40	; 0x28
 8002ae6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002ae8:	2307      	movs	r3, #7
 8002aea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002aec:	2302      	movs	r3, #2
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002af0:	2302      	movs	r3, #2
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 f9d4 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002b0a:	f7ff ff9b 	bl	8002a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_ADC_MspInit+0xc4>)
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <HAL_ADC_MspInit+0xc4>)
 8002b14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_ADC_MspInit+0xc4>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_ADC_MspInit+0xc4>)
 8002b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <HAL_ADC_MspInit+0xc4>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <HAL_ADC_MspInit+0xc4>)
 8002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = JOYY_Pin|JOYX_Pin;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b42:	230b      	movs	r3, #11
 8002b44:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b54:	f002 fd10 	bl	8005578 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b58:	bf00      	nop
 8002b5a:	3778      	adds	r7, #120	; 0x78
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	50040000 	.word	0x50040000
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a29      	ldr	r2, [pc, #164]	; (8002c2c <HAL_CAN_MspInit+0xc4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d14b      	bne.n	8002c22 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002b8a:	4b29      	ldr	r3, [pc, #164]	; (8002c30 <HAL_CAN_MspInit+0xc8>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <HAL_CAN_MspInit+0xc8>)
 8002b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b94:	6593      	str	r3, [r2, #88]	; 0x58
 8002b96:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <HAL_CAN_MspInit+0xc8>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <HAL_CAN_MspInit+0xc8>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	4a22      	ldr	r2, [pc, #136]	; (8002c30 <HAL_CAN_MspInit+0xc8>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bae:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <HAL_CAN_MspInit+0xc8>)
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002bba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002bcc:	2309      	movs	r3, #9
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bda:	f002 fccd 	bl	8005578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002bec:	2301      	movs	r3, #1
 8002bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002bf0:	2309      	movs	r3, #9
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bfe:	f002 fcbb 	bl	8005578 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	2106      	movs	r1, #6
 8002c06:	2013      	movs	r0, #19
 8002c08:	f002 fa70 	bl	80050ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002c0c:	2013      	movs	r0, #19
 8002c0e:	f002 fa89 	bl	8005124 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2106      	movs	r1, #6
 8002c16:	2014      	movs	r0, #20
 8002c18:	f002 fa68 	bl	80050ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002c1c:	2014      	movs	r0, #20
 8002c1e:	f002 fa81 	bl	8005124 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002c22:	bf00      	nop
 8002c24:	3728      	adds	r7, #40	; 0x28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40006400 	.word	0x40006400
 8002c30:	40021000 	.word	0x40021000

08002c34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_DAC_MspInit+0x84>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d12c      	bne.n	8002cb0 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_DAC_MspInit+0x88>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HAL_DAC_MspInit+0x88>)
 8002c5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c60:	6593      	str	r3, [r2, #88]	; 0x58
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_DAC_MspInit+0x88>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_DAC_MspInit+0x88>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <HAL_DAC_MspInit+0x88>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_DAC_MspInit+0x88>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = OUTR_Pin|OUTL_Pin;
 8002c86:	2330      	movs	r3, #48	; 0x30
 8002c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	f107 0314 	add.w	r3, r7, #20
 8002c96:	4619      	mov	r1, r3
 8002c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9c:	f002 fc6c 	bl	8005578 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2105      	movs	r1, #5
 8002ca4:	2036      	movs	r0, #54	; 0x36
 8002ca6:	f002 fa21 	bl	80050ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002caa:	2036      	movs	r0, #54	; 0x36
 8002cac:	f002 fa3a 	bl	8005124 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002cb0:	bf00      	nop
 8002cb2:	3728      	adds	r7, #40	; 0x28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40007400 	.word	0x40007400
 8002cbc:	40021000 	.word	0x40021000

08002cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b09e      	sub	sp, #120	; 0x78
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cd8:	f107 0310 	add.w	r3, r7, #16
 8002cdc:	2254      	movs	r2, #84	; 0x54
 8002cde:	2100      	movs	r1, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f006 fd0d 	bl	8009700 <memset>
  if(hi2c->Instance==I2C1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1e      	ldr	r2, [pc, #120]	; (8002d64 <HAL_I2C_MspInit+0xa4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d135      	bne.n	8002d5c <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002cf0:	2340      	movs	r3, #64	; 0x40
 8002cf2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cf8:	f107 0310 	add.w	r3, r7, #16
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f004 f8d5 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002d08:	f7ff fe9c 	bl	8002a44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0c:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <HAL_I2C_MspInit+0xa8>)
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d10:	4a15      	ldr	r2, [pc, #84]	; (8002d68 <HAL_I2C_MspInit+0xa8>)
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d18:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_I2C_MspInit+0xa8>)
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d24:	23c0      	movs	r3, #192	; 0xc0
 8002d26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d28:	2312      	movs	r3, #18
 8002d2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	2303      	movs	r3, #3
 8002d32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d34:	2304      	movs	r3, #4
 8002d36:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	480b      	ldr	r0, [pc, #44]	; (8002d6c <HAL_I2C_MspInit+0xac>)
 8002d40:	f002 fc1a 	bl	8005578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_I2C_MspInit+0xa8>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_I2C_MspInit+0xa8>)
 8002d4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_I2C_MspInit+0xa8>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d5c:	bf00      	nop
 8002d5e:	3778      	adds	r7, #120	; 0x78
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40005400 	.word	0x40005400
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	48000400 	.word	0x48000400

08002d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a16      	ldr	r2, [pc, #88]	; (8002dd8 <HAL_TIM_Base_MspInit+0x68>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d114      	bne.n	8002dac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d82:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <HAL_TIM_Base_MspInit+0x6c>)
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <HAL_TIM_Base_MspInit+0x6c>)
 8002d88:	f043 0310 	orr.w	r3, r3, #16
 8002d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_TIM_Base_MspInit+0x6c>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2105      	movs	r1, #5
 8002d9e:	2036      	movs	r0, #54	; 0x36
 8002da0:	f002 f9a4 	bl	80050ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002da4:	2036      	movs	r0, #54	; 0x36
 8002da6:	f002 f9bd 	bl	8005124 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002daa:	e010      	b.n	8002dce <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <HAL_TIM_Base_MspInit+0x70>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d10b      	bne.n	8002dce <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002db6:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_TIM_Base_MspInit+0x6c>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dba:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <HAL_TIM_Base_MspInit+0x6c>)
 8002dbc:	f043 0320 	orr.w	r3, r3, #32
 8002dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_TIM_Base_MspInit+0x6c>)
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
}
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40001000 	.word	0x40001000
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40001400 	.word	0x40001400

08002de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b09e      	sub	sp, #120	; 0x78
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dfc:	f107 0310 	add.w	r3, r7, #16
 8002e00:	2254      	movs	r2, #84	; 0x54
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f006 fc7b 	bl	8009700 <memset>
  if(huart->Instance==USART2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a28      	ldr	r2, [pc, #160]	; (8002eb0 <HAL_UART_MspInit+0xcc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d148      	bne.n	8002ea6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e14:	2302      	movs	r3, #2
 8002e16:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e1c:	f107 0310 	add.w	r3, r7, #16
 8002e20:	4618      	mov	r0, r3
 8002e22:	f004 f843 	bl	8006eac <HAL_RCCEx_PeriphCLKConfig>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e2c:	f7ff fe0a 	bl	8002a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_UART_MspInit+0xd0>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <HAL_UART_MspInit+0xd0>)
 8002e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_UART_MspInit+0xd0>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_UART_MspInit+0xd0>)
 8002e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4c:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_UART_MspInit+0xd0>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <HAL_UART_MspInit+0xd0>)
 8002e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e60:	2304      	movs	r3, #4
 8002e62:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e70:	2307      	movs	r3, #7
 8002e72:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e7e:	f002 fb7b 	bl	8005578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e86:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e90:	2303      	movs	r3, #3
 8002e92:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002e94:	2303      	movs	r3, #3
 8002e96:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea2:	f002 fb69 	bl	8005578 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ea6:	bf00      	nop
 8002ea8:	3778      	adds	r7, #120	; 0x78
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40004400 	.word	0x40004400
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08c      	sub	sp, #48	; 0x30
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <HAL_InitTick+0xc8>)
 8002ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eca:	4a2d      	ldr	r2, [pc, #180]	; (8002f80 <HAL_InitTick+0xc8>)
 8002ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ed2:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <HAL_InitTick+0xc8>)
 8002ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ede:	f107 020c 	add.w	r2, r7, #12
 8002ee2:	f107 0310 	add.w	r3, r7, #16
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 ff4d 	bl	8006d88 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002eee:	f003 ff35 	bl	8006d5c <HAL_RCC_GetPCLK2Freq>
 8002ef2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	4a23      	ldr	r2, [pc, #140]	; (8002f84 <HAL_InitTick+0xcc>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	0c9b      	lsrs	r3, r3, #18
 8002efe:	3b01      	subs	r3, #1
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8002f02:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <HAL_InitTick+0xd0>)
 8002f04:	4a21      	ldr	r2, [pc, #132]	; (8002f8c <HAL_InitTick+0xd4>)
 8002f06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8002f08:	4b1f      	ldr	r3, [pc, #124]	; (8002f88 <HAL_InitTick+0xd0>)
 8002f0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f0e:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8002f10:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <HAL_InitTick+0xd0>)
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8002f16:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <HAL_InitTick+0xd0>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <HAL_InitTick+0xd0>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f22:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_InitTick+0xd0>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8002f28:	4817      	ldr	r0, [pc, #92]	; (8002f88 <HAL_InitTick+0xd0>)
 8002f2a:	f004 fab7 	bl	800749c <HAL_TIM_Base_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002f34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d11b      	bne.n	8002f74 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8002f3c:	4812      	ldr	r0, [pc, #72]	; (8002f88 <HAL_InitTick+0xd0>)
 8002f3e:	f004 fb51 	bl	80075e4 <HAL_TIM_Base_Start_IT>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002f48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002f50:	2019      	movs	r0, #25
 8002f52:	f002 f8e7 	bl	8005124 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d808      	bhi.n	8002f6e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	2019      	movs	r0, #25
 8002f62:	f002 f8c3 	bl	80050ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f66:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <HAL_InitTick+0xd8>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	e002      	b.n	8002f74 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3730      	adds	r7, #48	; 0x30
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000
 8002f84:	431bde83 	.word	0x431bde83
 8002f88:	20000624 	.word	0x20000624
 8002f8c:	40014400 	.word	0x40014400
 8002f90:	20000038 	.word	0x20000038

08002f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <NMI_Handler+0x4>

08002f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f9e:	e7fe      	b.n	8002f9e <HardFault_Handler+0x4>

08002fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <MemManage_Handler+0x4>

08002fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002faa:	e7fe      	b.n	8002faa <BusFault_Handler+0x4>

08002fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <UsageFault_Handler+0x4>

08002fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <CAN1_TX_IRQHandler+0x10>)
 8002fc6:	f001 fdc8 	bl	8004b5a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000328 	.word	0x20000328

08002fd4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <CAN1_RX0_IRQHandler+0x10>)
 8002fda:	f001 fdbe 	bl	8004b5a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000328 	.word	0x20000328

08002fe8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002fee:	f004 fb4d 	bl	800768c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000624 	.word	0x20000624

08002ffc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003000:	4803      	ldr	r0, [pc, #12]	; (8003010 <TIM6_DAC_IRQHandler+0x14>)
 8003002:	f004 fb43 	bl	800768c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003006:	4803      	ldr	r0, [pc, #12]	; (8003014 <TIM6_DAC_IRQHandler+0x18>)
 8003008:	f002 f909 	bl	800521e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}
 8003010:	200003b8 	.word	0x200003b8
 8003014:	20000350 	.word	0x20000350

08003018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003020:	4a14      	ldr	r2, [pc, #80]	; (8003074 <_sbrk+0x5c>)
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <_sbrk+0x60>)
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <_sbrk+0x64>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <_sbrk+0x64>)
 8003036:	4a12      	ldr	r2, [pc, #72]	; (8003080 <_sbrk+0x68>)
 8003038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <_sbrk+0x64>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	429a      	cmp	r2, r3
 8003046:	d207      	bcs.n	8003058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003048:	f006 fb20 	bl	800968c <__errno>
 800304c:	4603      	mov	r3, r0
 800304e:	220c      	movs	r2, #12
 8003050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	e009      	b.n	800306c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <_sbrk+0x64>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800305e:	4b07      	ldr	r3, [pc, #28]	; (800307c <_sbrk+0x64>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	4a05      	ldr	r2, [pc, #20]	; (800307c <_sbrk+0x64>)
 8003068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800306a:	68fb      	ldr	r3, [r7, #12]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20010000 	.word	0x20010000
 8003078:	00000400 	.word	0x00000400
 800307c:	20000670 	.word	0x20000670
 8003080:	20000b48 	.word	0x20000b48

08003084 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <SystemInit+0x20>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308e:	4a05      	ldr	r2, [pc, #20]	; (80030a4 <SystemInit+0x20>)
 8003090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030ac:	f7ff ffea 	bl	8003084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030b0:	480c      	ldr	r0, [pc, #48]	; (80030e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80030b2:	490d      	ldr	r1, [pc, #52]	; (80030e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030b4:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <LoopForever+0xe>)
  movs r3, #0
 80030b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b8:	e002      	b.n	80030c0 <LoopCopyDataInit>

080030ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030be:	3304      	adds	r3, #4

080030c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c4:	d3f9      	bcc.n	80030ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030c8:	4c0a      	ldr	r4, [pc, #40]	; (80030f4 <LoopForever+0x16>)
  movs r3, #0
 80030ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030cc:	e001      	b.n	80030d2 <LoopFillZerobss>

080030ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d0:	3204      	adds	r2, #4

080030d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d4:	d3fb      	bcc.n	80030ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030d6:	f006 fadf 	bl	8009698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030da:	f7fe fe4f 	bl	8001d7c <main>

080030de <LoopForever>:

LoopForever:
    b LoopForever
 80030de:	e7fe      	b.n	80030de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80030e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030e8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80030ec:	0800c268 	.word	0x0800c268
  ldr r2, =_sbss
 80030f0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80030f4:	20000b48 	.word	0x20000b48

080030f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030f8:	e7fe      	b.n	80030f8 <ADC1_IRQHandler>

080030fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003104:	2003      	movs	r0, #3
 8003106:	f001 ffe6 	bl	80050d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800310a:	200f      	movs	r0, #15
 800310c:	f7ff fed4 	bl	8002eb8 <HAL_InitTick>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	71fb      	strb	r3, [r7, #7]
 800311a:	e001      	b.n	8003120 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800311c:	f7ff fc98 	bl	8002a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003120:	79fb      	ldrb	r3, [r7, #7]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_IncTick+0x20>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_IncTick+0x24>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4413      	add	r3, r2
 800313c:	4a04      	ldr	r2, [pc, #16]	; (8003150 <HAL_IncTick+0x24>)
 800313e:	6013      	str	r3, [r2, #0]
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	2000003c 	.word	0x2000003c
 8003150:	20000674 	.word	0x20000674

08003154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return uwTick;
 8003158:	4b03      	ldr	r3, [pc, #12]	; (8003168 <HAL_GetTick+0x14>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000674 	.word	0x20000674

0800316c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7ff ffee 	bl	8003154 <HAL_GetTick>
 8003178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d005      	beq.n	8003192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <HAL_Delay+0x44>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003192:	bf00      	nop
 8003194:	f7ff ffde 	bl	8003154 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d8f7      	bhi.n	8003194 <HAL_Delay+0x28>
  {
  }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	2000003c 	.word	0x2000003c

080031b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	609a      	str	r2, [r3, #8]
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	609a      	str	r2, [r3, #8]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3360      	adds	r3, #96	; 0x60
 800322e:	461a      	mov	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <LL_ADC_SetOffset+0x44>)
 800323e:	4013      	ands	r3, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	4313      	orrs	r3, r2
 800324c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003254:	bf00      	nop
 8003256:	371c      	adds	r7, #28
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	03fff000 	.word	0x03fff000

08003264 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3360      	adds	r3, #96	; 0x60
 8003272:	461a      	mov	r2, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3360      	adds	r3, #96	; 0x60
 80032a0:	461a      	mov	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3330      	adds	r3, #48	; 0x30
 80032fc:	461a      	mov	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	4413      	add	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	211f      	movs	r1, #31
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	401a      	ands	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	0e9b      	lsrs	r3, r3, #26
 8003324:	f003 011f 	and.w	r1, r3, #31
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	431a      	orrs	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3314      	adds	r3, #20
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	0e5b      	lsrs	r3, r3, #25
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	4413      	add	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	0d1b      	lsrs	r3, r3, #20
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	2107      	movs	r1, #7
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	401a      	ands	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	0d1b      	lsrs	r3, r3, #20
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	431a      	orrs	r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b4:	43db      	mvns	r3, r3
 80033b6:	401a      	ands	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0318 	and.w	r3, r3, #24
 80033be:	4908      	ldr	r1, [pc, #32]	; (80033e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80033c0:	40d9      	lsrs	r1, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	400b      	ands	r3, r1
 80033c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	0007ffff 	.word	0x0007ffff

080033e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80033f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6093      	str	r3, [r2, #8]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800341c:	d101      	bne.n	8003422 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003440:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003444:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800346c:	d101      	bne.n	8003472 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003490:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034bc:	f043 0202 	orr.w	r2, r3, #2
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <LL_ADC_IsEnabled+0x18>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <LL_ADC_IsEnabled+0x1a>
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b02      	cmp	r3, #2
 8003508:	d101      	bne.n	800350e <LL_ADC_IsDisableOngoing+0x18>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <LL_ADC_IsDisableOngoing+0x1a>
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800352c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003530:	f043 0204 	orr.w	r2, r3, #4
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003558:	f043 0210 	orr.w	r2, r3, #16
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d101      	bne.n	8003584 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035a6:	f043 0220 	orr.w	r2, r3, #32
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d101      	bne.n	80035d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e12c      	b.n	8003854 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	2b00      	cmp	r3, #0
 8003606:	d109      	bne.n	800361c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff fa49 	bl	8002aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fef1 	bl	8003408 <LL_ADC_IsDeepPowerDownEnabled>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d004      	beq.n	8003636 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fed7 	bl	80033e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff ff0c 	bl	8003458 <LL_ADC_IsInternalRegulatorEnabled>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d115      	bne.n	8003672 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fef0 	bl	8003430 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003650:	4b82      	ldr	r3, [pc, #520]	; (800385c <HAL_ADC_Init+0x27c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	099b      	lsrs	r3, r3, #6
 8003656:	4a82      	ldr	r2, [pc, #520]	; (8003860 <HAL_ADC_Init+0x280>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	3301      	adds	r3, #1
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003664:	e002      	b.n	800366c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	3b01      	subs	r3, #1
 800366a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f9      	bne.n	8003666 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff feee 	bl	8003458 <LL_ADC_IsInternalRegulatorEnabled>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10d      	bne.n	800369e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	f043 0210 	orr.w	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	f043 0201 	orr.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff ff62 	bl	800356c <LL_ADC_REG_IsConversionOngoing>
 80036a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f040 80c5 	bne.w	8003842 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f040 80c1 	bne.w	8003842 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036c8:	f043 0202 	orr.w	r2, r3, #2
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fefb 	bl	80034d0 <LL_ADC_IsEnabled>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036e0:	4860      	ldr	r0, [pc, #384]	; (8003864 <HAL_ADC_Init+0x284>)
 80036e2:	f7ff fef5 	bl	80034d0 <LL_ADC_IsEnabled>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4619      	mov	r1, r3
 80036f2:	485d      	ldr	r0, [pc, #372]	; (8003868 <HAL_ADC_Init+0x288>)
 80036f4:	f7ff fd5e 	bl	80031b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7e5b      	ldrb	r3, [r3, #25]
 80036fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003702:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003708:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800370e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003716:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d106      	bne.n	8003734 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	3b01      	subs	r3, #1
 800372c:	045b      	lsls	r3, r3, #17
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	2b00      	cmp	r3, #0
 800373a:	d009      	beq.n	8003750 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	4b45      	ldr	r3, [pc, #276]	; (800386c <HAL_ADC_Init+0x28c>)
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	69b9      	ldr	r1, [r7, #24]
 8003760:	430b      	orrs	r3, r1
 8003762:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff feff 	bl	800356c <LL_ADC_REG_IsConversionOngoing>
 800376e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff20 	bl	80035ba <LL_ADC_INJ_IsConversionOngoing>
 800377a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d13d      	bne.n	80037fe <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d13a      	bne.n	80037fe <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800378c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003794:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037a4:	f023 0302 	bic.w	r3, r3, #2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	69b9      	ldr	r1, [r7, #24]
 80037ae:	430b      	orrs	r3, r1
 80037b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d118      	bne.n	80037ee <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80037c6:	f023 0304 	bic.w	r3, r3, #4
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037d2:	4311      	orrs	r1, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037d8:	4311      	orrs	r1, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037de:	430a      	orrs	r2, r1
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	611a      	str	r2, [r3, #16]
 80037ec:	e007      	b.n	80037fe <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d10c      	bne.n	8003820 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	f023 010f 	bic.w	r1, r3, #15
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	1e5a      	subs	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	631a      	str	r2, [r3, #48]	; 0x30
 800381e:	e007      	b.n	8003830 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 020f 	bic.w	r2, r2, #15
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f023 0303 	bic.w	r3, r3, #3
 8003838:	f043 0201 	orr.w	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
 8003840:	e007      	b.n	8003852 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	f043 0210 	orr.w	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003852:	7ffb      	ldrb	r3, [r7, #31]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3720      	adds	r7, #32
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000034 	.word	0x20000034
 8003860:	053e2d63 	.word	0x053e2d63
 8003864:	50040000 	.word	0x50040000
 8003868:	50040300 	.word	0x50040300
 800386c:	fff0c007 	.word	0xfff0c007

08003870 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fe75 	bl	800356c <LL_ADC_REG_IsConversionOngoing>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d14f      	bne.n	8003928 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_ADC_Start+0x26>
 8003892:	2302      	movs	r3, #2
 8003894:	e04b      	b.n	800392e <HAL_ADC_Start+0xbe>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fdb4 	bl	800440c <ADC_Enable>
 80038a4:	4603      	mov	r3, r0
 80038a6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d137      	bne.n	800391e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ce:	d106      	bne.n	80038de <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	f023 0206 	bic.w	r2, r3, #6
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	659a      	str	r2, [r3, #88]	; 0x58
 80038dc:	e002      	b.n	80038e4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	221c      	movs	r2, #28
 80038ea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800390a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fe00 	bl	800351c <LL_ADC_REG_StartConversion>
 800391c:	e006      	b.n	800392c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003926:	e001      	b.n	800392c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003928:	2302      	movs	r3, #2
 800392a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_ADC_Stop+0x16>
 8003948:	2302      	movs	r3, #2
 800394a:	e023      	b.n	8003994 <HAL_ADC_Stop+0x5e>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003954:	2103      	movs	r1, #3
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fc9c 	bl	8004294 <ADC_ConversionStop>
 800395c:	4603      	mov	r3, r0
 800395e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d111      	bne.n	800398a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fdd6 	bl	8004518 <ADC_Disable>
 800396c:	4603      	mov	r3, r0
 800396e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	f043 0201 	orr.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003992:	7bfb      	ldrb	r3, [r7, #15]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d102      	bne.n	80039b4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80039ae:	2308      	movs	r3, #8
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e010      	b.n	80039d6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	f043 0220 	orr.w	r2, r3, #32
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e06f      	b.n	8003ab2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80039d2:	2304      	movs	r3, #4
 80039d4:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80039d6:	f7ff fbbd 	bl	8003154 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039dc:	e021      	b.n	8003a22 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d01d      	beq.n	8003a22 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80039e6:	f7ff fbb5 	bl	8003154 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d302      	bcc.n	80039fc <HAL_ADC_PollForConversion+0x60>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d112      	bne.n	8003a22 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10b      	bne.n	8003a22 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	f043 0204 	orr.w	r2, r3, #4
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e047      	b.n	8003ab2 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0d6      	beq.n	80039de <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fc40 	bl	80032c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01c      	beq.n	8003a86 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	7e5b      	ldrb	r3, [r3, #25]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d118      	bne.n	8003a86 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d111      	bne.n	8003a86 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d105      	bne.n	8003a86 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	f043 0201 	orr.w	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d104      	bne.n	8003a9e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2208      	movs	r2, #8
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e008      	b.n	8003ab0 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	220c      	movs	r2, #12
 8003aae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b0b6      	sub	sp, #216	; 0xd8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x22>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e3b9      	b.n	800426a <HAL_ADC_ConfigChannel+0x796>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff fd32 	bl	800356c <LL_ADC_REG_IsConversionOngoing>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 839e 	bne.w	800424c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	d824      	bhi.n	8003b62 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	3b02      	subs	r3, #2
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d81b      	bhi.n	8003b5a <HAL_ADC_ConfigChannel+0x86>
 8003b22:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <HAL_ADC_ConfigChannel+0x54>)
 8003b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b28:	08003b39 	.word	0x08003b39
 8003b2c:	08003b41 	.word	0x08003b41
 8003b30:	08003b49 	.word	0x08003b49
 8003b34:	08003b51 	.word	0x08003b51
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	220c      	movs	r2, #12
 8003b3c:	605a      	str	r2, [r3, #4]
          break;
 8003b3e:	e011      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2212      	movs	r2, #18
 8003b44:	605a      	str	r2, [r3, #4]
          break;
 8003b46:	e00d      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2218      	movs	r2, #24
 8003b4c:	605a      	str	r2, [r3, #4]
          break;
 8003b4e:	e009      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b56:	605a      	str	r2, [r3, #4]
          break;
 8003b58:	e004      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2206      	movs	r2, #6
 8003b5e:	605a      	str	r2, [r3, #4]
          break;
 8003b60:	e000      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003b62:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	f7ff fbbb 	bl	80032ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fcf6 	bl	800356c <LL_ADC_REG_IsConversionOngoing>
 8003b80:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fd16 	bl	80035ba <LL_ADC_INJ_IsConversionOngoing>
 8003b8e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 81a6 	bne.w	8003ee8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f040 81a1 	bne.w	8003ee8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6819      	ldr	r1, [r3, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f7ff fbc6 	bl	8003344 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	695a      	ldr	r2, [r3, #20]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	08db      	lsrs	r3, r3, #3
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6919      	ldr	r1, [r3, #16]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bea:	f7ff fb17 	bl	800321c <LL_ADC_SetOffset>
 8003bee:	e17b      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff fb34 	bl	8003264 <LL_ADC_GetOffsetChannel>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10a      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x148>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fb29 	bl	8003264 <LL_ADC_GetOffsetChannel>
 8003c12:	4603      	mov	r3, r0
 8003c14:	0e9b      	lsrs	r3, r3, #26
 8003c16:	f003 021f 	and.w	r2, r3, #31
 8003c1a:	e01e      	b.n	8003c5a <HAL_ADC_ConfigChannel+0x186>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fb1e 	bl	8003264 <LL_ADC_GetOffsetChannel>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	e004      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003c4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d105      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x19e>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	0e9b      	lsrs	r3, r3, #26
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	e018      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x1d0>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003c8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003c96:	2320      	movs	r3, #32
 8003c98:	e004      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003c9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d106      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff faed 	bl	8003290 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2101      	movs	r1, #1
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fad1 	bl	8003264 <LL_ADC_GetOffsetChannel>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x20e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff fac6 	bl	8003264 <LL_ADC_GetOffsetChannel>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	0e9b      	lsrs	r3, r3, #26
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	e01e      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x24c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fabb 	bl	8003264 <LL_ADC_GetOffsetChannel>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cf8:	fa93 f3a3 	rbit	r3, r3
 8003cfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003d00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003d08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003d10:	2320      	movs	r3, #32
 8003d12:	e004      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d18:	fab3 f383 	clz	r3, r3
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d105      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x264>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	0e9b      	lsrs	r3, r3, #26
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	e018      	b.n	8003d6a <HAL_ADC_ConfigChannel+0x296>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d44:	fa93 f3a3 	rbit	r3, r3
 8003d48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003d4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003d5c:	2320      	movs	r3, #32
 8003d5e:	e004      	b.n	8003d6a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d106      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2200      	movs	r2, #0
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fa8a 	bl	8003290 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2102      	movs	r1, #2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fa6e 	bl	8003264 <LL_ADC_GetOffsetChannel>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x2d4>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2102      	movs	r1, #2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fa63 	bl	8003264 <LL_ADC_GetOffsetChannel>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	0e9b      	lsrs	r3, r3, #26
 8003da2:	f003 021f 	and.w	r2, r3, #31
 8003da6:	e01e      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x312>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2102      	movs	r1, #2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fa58 	bl	8003264 <LL_ADC_GetOffsetChannel>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003dc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003dce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003dd6:	2320      	movs	r3, #32
 8003dd8:	e004      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003dda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dde:	fab3 f383 	clz	r3, r3
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d105      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x32a>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	0e9b      	lsrs	r3, r3, #26
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	e016      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x358>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003e10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003e1e:	2320      	movs	r3, #32
 8003e20:	e004      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d106      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2102      	movs	r1, #2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fa29 	bl	8003290 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2103      	movs	r1, #3
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fa0d 	bl	8003264 <LL_ADC_GetOffsetChannel>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x396>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2103      	movs	r1, #3
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fa02 	bl	8003264 <LL_ADC_GetOffsetChannel>
 8003e60:	4603      	mov	r3, r0
 8003e62:	0e9b      	lsrs	r3, r3, #26
 8003e64:	f003 021f 	and.w	r2, r3, #31
 8003e68:	e017      	b.n	8003e9a <HAL_ADC_ConfigChannel+0x3c6>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2103      	movs	r1, #3
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff f9f7 	bl	8003264 <LL_ADC_GetOffsetChannel>
 8003e76:	4603      	mov	r3, r0
 8003e78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e7c:	fa93 f3a3 	rbit	r3, r3
 8003e80:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e84:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	e003      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <HAL_ADC_ConfigChannel+0x3de>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	0e9b      	lsrs	r3, r3, #26
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	e011      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x402>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eba:	fa93 f3a3 	rbit	r3, r3
 8003ebe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003eca:	2320      	movs	r3, #32
 8003ecc:	e003      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d106      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2103      	movs	r1, #3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff f9d4 	bl	8003290 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff faef 	bl	80034d0 <LL_ADC_IsEnabled>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f040 813f 	bne.w	8004178 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6819      	ldr	r1, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f7ff fa48 	bl	800339c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a8e      	ldr	r2, [pc, #568]	; (800414c <HAL_ADC_ConfigChannel+0x678>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	f040 8130 	bne.w	8004178 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10b      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x46c>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	0e9b      	lsrs	r3, r3, #26
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	2b09      	cmp	r3, #9
 8003f36:	bf94      	ite	ls
 8003f38:	2301      	movls	r3, #1
 8003f3a:	2300      	movhi	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e019      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x4a0>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f48:	fa93 f3a3 	rbit	r3, r3
 8003f4c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f50:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003f58:	2320      	movs	r3, #32
 8003f5a:	e003      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	3301      	adds	r3, #1
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	2b09      	cmp	r3, #9
 8003f6c:	bf94      	ite	ls
 8003f6e:	2301      	movls	r3, #1
 8003f70:	2300      	movhi	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d079      	beq.n	800406c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d107      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x4c0>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	0e9b      	lsrs	r3, r3, #26
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	069b      	lsls	r3, r3, #26
 8003f8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f92:	e015      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x4ec>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9c:	fa93 f3a3 	rbit	r3, r3
 8003fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003fac:	2320      	movs	r3, #32
 8003fae:	e003      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	3301      	adds	r3, #1
 8003fba:	069b      	lsls	r3, r3, #26
 8003fbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x50c>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	0e9b      	lsrs	r3, r3, #26
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	2101      	movs	r1, #1
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	e017      	b.n	8004010 <HAL_ADC_ConfigChannel+0x53c>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe8:	fa93 f3a3 	rbit	r3, r3
 8003fec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	e003      	b.n	8004004 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffe:	fab3 f383 	clz	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	3301      	adds	r3, #1
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	2101      	movs	r1, #1
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	ea42 0103 	orr.w	r1, r2, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x562>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	0e9b      	lsrs	r3, r3, #26
 8004026:	3301      	adds	r3, #1
 8004028:	f003 021f 	and.w	r2, r3, #31
 800402c:	4613      	mov	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	051b      	lsls	r3, r3, #20
 8004034:	e018      	b.n	8004068 <HAL_ADC_ConfigChannel+0x594>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403e:	fa93 f3a3 	rbit	r3, r3
 8004042:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004046:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800404e:	2320      	movs	r3, #32
 8004050:	e003      	b.n	800405a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004054:	fab3 f383 	clz	r3, r3
 8004058:	b2db      	uxtb	r3, r3
 800405a:	3301      	adds	r3, #1
 800405c:	f003 021f 	and.w	r2, r3, #31
 8004060:	4613      	mov	r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004068:	430b      	orrs	r3, r1
 800406a:	e080      	b.n	800416e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004074:	2b00      	cmp	r3, #0
 8004076:	d107      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x5b4>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	0e9b      	lsrs	r3, r3, #26
 800407e:	3301      	adds	r3, #1
 8004080:	069b      	lsls	r3, r3, #26
 8004082:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004086:	e015      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x5e0>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80040a0:	2320      	movs	r3, #32
 80040a2:	e003      	b.n	80040ac <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	3301      	adds	r3, #1
 80040ae:	069b      	lsls	r3, r3, #26
 80040b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d109      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x600>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	0e9b      	lsrs	r3, r3, #26
 80040c6:	3301      	adds	r3, #1
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2101      	movs	r1, #1
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	e017      	b.n	8004104 <HAL_ADC_ConfigChannel+0x630>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	61fb      	str	r3, [r7, #28]
  return result;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80040ec:	2320      	movs	r3, #32
 80040ee:	e003      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	3301      	adds	r3, #1
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	2101      	movs	r1, #1
 8004100:	fa01 f303 	lsl.w	r3, r1, r3
 8004104:	ea42 0103 	orr.w	r1, r2, r3
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10d      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x65c>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	0e9b      	lsrs	r3, r3, #26
 800411a:	3301      	adds	r3, #1
 800411c:	f003 021f 	and.w	r2, r3, #31
 8004120:	4613      	mov	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4413      	add	r3, r2
 8004126:	3b1e      	subs	r3, #30
 8004128:	051b      	lsls	r3, r3, #20
 800412a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800412e:	e01d      	b.n	800416c <HAL_ADC_ConfigChannel+0x698>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	613b      	str	r3, [r7, #16]
  return result;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d103      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004148:	2320      	movs	r3, #32
 800414a:	e005      	b.n	8004158 <HAL_ADC_ConfigChannel+0x684>
 800414c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	3301      	adds	r3, #1
 800415a:	f003 021f 	and.w	r2, r3, #31
 800415e:	4613      	mov	r3, r2
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	4413      	add	r3, r2
 8004164:	3b1e      	subs	r3, #30
 8004166:	051b      	lsls	r3, r3, #20
 8004168:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800416c:	430b      	orrs	r3, r1
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	6892      	ldr	r2, [r2, #8]
 8004172:	4619      	mov	r1, r3
 8004174:	f7ff f8e6 	bl	8003344 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b3d      	ldr	r3, [pc, #244]	; (8004274 <HAL_ADC_ConfigChannel+0x7a0>)
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d06c      	beq.n	800425e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004184:	483c      	ldr	r0, [pc, #240]	; (8004278 <HAL_ADC_ConfigChannel+0x7a4>)
 8004186:	f7ff f83b 	bl	8003200 <LL_ADC_GetCommonPathInternalCh>
 800418a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a3a      	ldr	r2, [pc, #232]	; (800427c <HAL_ADC_ConfigChannel+0x7a8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d127      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004198:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800419c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d121      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a35      	ldr	r2, [pc, #212]	; (8004280 <HAL_ADC_ConfigChannel+0x7ac>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d157      	bne.n	800425e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041b6:	4619      	mov	r1, r3
 80041b8:	482f      	ldr	r0, [pc, #188]	; (8004278 <HAL_ADC_ConfigChannel+0x7a4>)
 80041ba:	f7ff f80e 	bl	80031da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041be:	4b31      	ldr	r3, [pc, #196]	; (8004284 <HAL_ADC_ConfigChannel+0x7b0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	099b      	lsrs	r3, r3, #6
 80041c4:	4a30      	ldr	r2, [pc, #192]	; (8004288 <HAL_ADC_ConfigChannel+0x7b4>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041d8:	e002      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3b01      	subs	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f9      	bne.n	80041da <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041e6:	e03a      	b.n	800425e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a27      	ldr	r2, [pc, #156]	; (800428c <HAL_ADC_ConfigChannel+0x7b8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d113      	bne.n	800421a <HAL_ADC_ConfigChannel+0x746>
 80041f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10d      	bne.n	800421a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1f      	ldr	r2, [pc, #124]	; (8004280 <HAL_ADC_ConfigChannel+0x7ac>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d12a      	bne.n	800425e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800420c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004210:	4619      	mov	r1, r3
 8004212:	4819      	ldr	r0, [pc, #100]	; (8004278 <HAL_ADC_ConfigChannel+0x7a4>)
 8004214:	f7fe ffe1 	bl	80031da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004218:	e021      	b.n	800425e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <HAL_ADC_ConfigChannel+0x7bc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d11c      	bne.n	800425e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004224:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d116      	bne.n	800425e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a12      	ldr	r2, [pc, #72]	; (8004280 <HAL_ADC_ConfigChannel+0x7ac>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d111      	bne.n	800425e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800423a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800423e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004242:	4619      	mov	r1, r3
 8004244:	480c      	ldr	r0, [pc, #48]	; (8004278 <HAL_ADC_ConfigChannel+0x7a4>)
 8004246:	f7fe ffc8 	bl	80031da <LL_ADC_SetCommonPathInternalCh>
 800424a:	e008      	b.n	800425e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004250:	f043 0220 	orr.w	r2, r3, #32
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004266:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800426a:	4618      	mov	r0, r3
 800426c:	37d8      	adds	r7, #216	; 0xd8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	80080000 	.word	0x80080000
 8004278:	50040300 	.word	0x50040300
 800427c:	c7520000 	.word	0xc7520000
 8004280:	50040000 	.word	0x50040000
 8004284:	20000034 	.word	0x20000034
 8004288:	053e2d63 	.word	0x053e2d63
 800428c:	cb840000 	.word	0xcb840000
 8004290:	80000001 	.word	0x80000001

08004294 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff f95e 	bl	800356c <LL_ADC_REG_IsConversionOngoing>
 80042b0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff f97f 	bl	80035ba <LL_ADC_INJ_IsConversionOngoing>
 80042bc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d103      	bne.n	80042cc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8098 	beq.w	80043fc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d02a      	beq.n	8004330 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	7e5b      	ldrb	r3, [r3, #25]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d126      	bne.n	8004330 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	7e1b      	ldrb	r3, [r3, #24]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d122      	bne.n	8004330 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80042ea:	2301      	movs	r3, #1
 80042ec:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80042ee:	e014      	b.n	800431a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	4a45      	ldr	r2, [pc, #276]	; (8004408 <ADC_ConversionStop+0x174>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d90d      	bls.n	8004314 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	f043 0210 	orr.w	r2, r3, #16
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f043 0201 	orr.w	r2, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e074      	b.n	80043fe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	3301      	adds	r3, #1
 8004318:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	d1e3      	bne.n	80042f0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2240      	movs	r2, #64	; 0x40
 800432e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d014      	beq.n	8004360 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff f916 	bl	800356c <LL_ADC_REG_IsConversionOngoing>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00c      	beq.n	8004360 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff f8d3 	bl	80034f6 <LL_ADC_IsDisableOngoing>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff f8f2 	bl	8003544 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d014      	beq.n	8004390 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff f925 	bl	80035ba <LL_ADC_INJ_IsConversionOngoing>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00c      	beq.n	8004390 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff f8bb 	bl	80034f6 <LL_ADC_IsDisableOngoing>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d104      	bne.n	8004390 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff f901 	bl	8003592 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d005      	beq.n	80043a2 <ADC_ConversionStop+0x10e>
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b03      	cmp	r3, #3
 800439a:	d105      	bne.n	80043a8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800439c:	230c      	movs	r3, #12
 800439e:	617b      	str	r3, [r7, #20]
        break;
 80043a0:	e005      	b.n	80043ae <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80043a2:	2308      	movs	r3, #8
 80043a4:	617b      	str	r3, [r7, #20]
        break;
 80043a6:	e002      	b.n	80043ae <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80043a8:	2304      	movs	r3, #4
 80043aa:	617b      	str	r3, [r7, #20]
        break;
 80043ac:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80043ae:	f7fe fed1 	bl	8003154 <HAL_GetTick>
 80043b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80043b4:	e01b      	b.n	80043ee <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80043b6:	f7fe fecd 	bl	8003154 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b05      	cmp	r3, #5
 80043c2:	d914      	bls.n	80043ee <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00d      	beq.n	80043ee <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d6:	f043 0210 	orr.w	r2, r3, #16
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	f043 0201 	orr.w	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e007      	b.n	80043fe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	4013      	ands	r3, r2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1dc      	bne.n	80043b6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	a33fffff 	.word	0xa33fffff

0800440c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004414:	2300      	movs	r3, #0
 8004416:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff f857 	bl	80034d0 <LL_ADC_IsEnabled>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d169      	bne.n	80044fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	4b36      	ldr	r3, [pc, #216]	; (8004508 <ADC_Enable+0xfc>)
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00d      	beq.n	8004452 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f043 0210 	orr.w	r2, r3, #16
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	f043 0201 	orr.w	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e055      	b.n	80044fe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff f812 	bl	8003480 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800445c:	482b      	ldr	r0, [pc, #172]	; (800450c <ADC_Enable+0x100>)
 800445e:	f7fe fecf 	bl	8003200 <LL_ADC_GetCommonPathInternalCh>
 8004462:	4603      	mov	r3, r0
 8004464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d013      	beq.n	8004494 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800446c:	4b28      	ldr	r3, [pc, #160]	; (8004510 <ADC_Enable+0x104>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	099b      	lsrs	r3, r3, #6
 8004472:	4a28      	ldr	r2, [pc, #160]	; (8004514 <ADC_Enable+0x108>)
 8004474:	fba2 2303 	umull	r2, r3, r2, r3
 8004478:	099b      	lsrs	r3, r3, #6
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	4613      	mov	r3, r2
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004486:	e002      	b.n	800448e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	3b01      	subs	r3, #1
 800448c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f9      	bne.n	8004488 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004494:	f7fe fe5e 	bl	8003154 <HAL_GetTick>
 8004498:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800449a:	e028      	b.n	80044ee <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff f815 	bl	80034d0 <LL_ADC_IsEnabled>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe ffe5 	bl	8003480 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044b6:	f7fe fe4d 	bl	8003154 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d914      	bls.n	80044ee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d00d      	beq.n	80044ee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d6:	f043 0210 	orr.w	r2, r3, #16
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e2:	f043 0201 	orr.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e007      	b.n	80044fe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d1cf      	bne.n	800449c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	8000003f 	.word	0x8000003f
 800450c:	50040300 	.word	0x50040300
 8004510:	20000034 	.word	0x20000034
 8004514:	053e2d63 	.word	0x053e2d63

08004518 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f7fe ffe6 	bl	80034f6 <LL_ADC_IsDisableOngoing>
 800452a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe ffcd 	bl	80034d0 <LL_ADC_IsEnabled>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d047      	beq.n	80045cc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d144      	bne.n	80045cc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 030d 	and.w	r3, r3, #13
 800454c:	2b01      	cmp	r3, #1
 800454e:	d10c      	bne.n	800456a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe ffa7 	bl	80034a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2203      	movs	r2, #3
 8004560:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004562:	f7fe fdf7 	bl	8003154 <HAL_GetTick>
 8004566:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004568:	e029      	b.n	80045be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456e:	f043 0210 	orr.w	r2, r3, #16
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e023      	b.n	80045ce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004586:	f7fe fde5 	bl	8003154 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d914      	bls.n	80045be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	f043 0210 	orr.w	r2, r3, #16
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	f043 0201 	orr.w	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e007      	b.n	80045ce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1dc      	bne.n	8004586 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <LL_ADC_StartCalibration>:
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80045e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <LL_ADC_IsCalibrationOnGoing>:
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800461c:	d101      	bne.n	8004622 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_ADCEx_Calibration_Start+0x1c>
 8004648:	2302      	movs	r3, #2
 800464a:	e04d      	b.n	80046e8 <HAL_ADCEx_Calibration_Start+0xb8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ff5f 	bl	8004518 <ADC_Disable>
 800465a:	4603      	mov	r3, r0
 800465c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d136      	bne.n	80046d2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004668:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800466c:	f023 0302 	bic.w	r3, r3, #2
 8004670:	f043 0202 	orr.w	r2, r3, #2
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff ffa9 	bl	80045d6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004684:	e014      	b.n	80046b0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	3301      	adds	r3, #1
 800468a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004692:	d30d      	bcc.n	80046b0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	f023 0312 	bic.w	r3, r3, #18
 800469c:	f043 0210 	orr.w	r2, r3, #16
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e01b      	b.n	80046e8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff ffa7 	bl	8004608 <LL_ADC_IsCalibrationOnGoing>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e2      	bne.n	8004686 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c4:	f023 0303 	bic.w	r3, r3, #3
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54
 80046d0:	e005      	b.n	80046de <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d6:	f043 0210 	orr.w	r2, r3, #16
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0ed      	b.n	80048de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fe fa2a 	bl	8002b68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004724:	f7fe fd16 	bl	8003154 <HAL_GetTick>
 8004728:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800472a:	e012      	b.n	8004752 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800472c:	f7fe fd12 	bl	8003154 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b0a      	cmp	r3, #10
 8004738:	d90b      	bls.n	8004752 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2205      	movs	r2, #5
 800474a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e0c5      	b.n	80048de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0e5      	beq.n	800472c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0202 	bic.w	r2, r2, #2
 800476e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004770:	f7fe fcf0 	bl	8003154 <HAL_GetTick>
 8004774:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004776:	e012      	b.n	800479e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004778:	f7fe fcec 	bl	8003154 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b0a      	cmp	r3, #10
 8004784:	d90b      	bls.n	800479e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2205      	movs	r2, #5
 8004796:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e09f      	b.n	80048de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e5      	bne.n	8004778 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	7e1b      	ldrb	r3, [r3, #24]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d108      	bne.n	80047c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e007      	b.n	80047d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	7e5b      	ldrb	r3, [r3, #25]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d108      	bne.n	80047f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e007      	b.n	8004800 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	7e9b      	ldrb	r3, [r3, #26]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d108      	bne.n	800481a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0220 	orr.w	r2, r2, #32
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e007      	b.n	800482a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0220 	bic.w	r2, r2, #32
 8004828:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	7edb      	ldrb	r3, [r3, #27]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d108      	bne.n	8004844 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0210 	bic.w	r2, r2, #16
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	e007      	b.n	8004854 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0210 	orr.w	r2, r2, #16
 8004852:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	7f1b      	ldrb	r3, [r3, #28]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d108      	bne.n	800486e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0208 	orr.w	r2, r2, #8
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e007      	b.n	800487e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0208 	bic.w	r2, r2, #8
 800487c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	7f5b      	ldrb	r3, [r3, #29]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d108      	bne.n	8004898 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0204 	orr.w	r2, r2, #4
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e007      	b.n	80048a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0204 	bic.w	r2, r2, #4
 80048a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	ea42 0103 	orr.w	r1, r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	1e5a      	subs	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80048e6:	b480      	push	{r7}
 80048e8:	b087      	sub	sp, #28
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d003      	beq.n	800490a <HAL_CAN_GetRxMessage+0x24>
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	2b02      	cmp	r3, #2
 8004906:	f040 80f3 	bne.w	8004af0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10e      	bne.n	800492e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d116      	bne.n	800494c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e0e7      	b.n	8004afe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d107      	bne.n	800494c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0d8      	b.n	8004afe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	331b      	adds	r3, #27
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	4413      	add	r3, r2
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0204 	and.w	r2, r3, #4
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10c      	bne.n	8004984 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	331b      	adds	r3, #27
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	4413      	add	r3, r2
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	0d5b      	lsrs	r3, r3, #21
 800497a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e00b      	b.n	800499c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	331b      	adds	r3, #27
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	4413      	add	r3, r2
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	08db      	lsrs	r3, r3, #3
 8004994:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	331b      	adds	r3, #27
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	4413      	add	r3, r2
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0202 	and.w	r2, r3, #2
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	331b      	adds	r3, #27
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	4413      	add	r3, r2
 80049be:	3304      	adds	r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 020f 	and.w	r2, r3, #15
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	331b      	adds	r3, #27
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	4413      	add	r3, r2
 80049d6:	3304      	adds	r3, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	331b      	adds	r3, #27
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	4413      	add	r3, r2
 80049ee:	3304      	adds	r3, #4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	0c1b      	lsrs	r3, r3, #16
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	0a1a      	lsrs	r2, r3, #8
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	0c1a      	lsrs	r2, r3, #16
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	3302      	adds	r3, #2
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	0e1a      	lsrs	r2, r3, #24
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	3303      	adds	r3, #3
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	3304      	adds	r3, #4
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	0a1a      	lsrs	r2, r3, #8
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	3305      	adds	r3, #5
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0c1a      	lsrs	r2, r3, #16
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	3306      	adds	r3, #6
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	0e1a      	lsrs	r2, r3, #24
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	3307      	adds	r3, #7
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d108      	bne.n	8004adc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0220 	orr.w	r2, r2, #32
 8004ad8:	60da      	str	r2, [r3, #12]
 8004ada:	e007      	b.n	8004aec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0220 	orr.w	r2, r2, #32
 8004aea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e006      	b.n	8004afe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
  }
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b085      	sub	sp, #20
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b1e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b20:	7afb      	ldrb	r3, [r7, #11]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d002      	beq.n	8004b2c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004b26:	7afb      	ldrb	r3, [r7, #11]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d10f      	bne.n	8004b4c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	e005      	b.n	8004b4c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b08a      	sub	sp, #40	; 0x28
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d07c      	beq.n	8004c9a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d023      	beq.n	8004bf2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7fd fe51 	bl	8002864 <HAL_CAN_TxMailbox0CompleteCallback>
 8004bc2:	e016      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d004      	beq.n	8004bd8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd6:	e00c      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bea:	e002      	b.n	8004bf2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f96b 	bl	8004ec8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d024      	beq.n	8004c46 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7fd fe37 	bl	8002884 <HAL_CAN_TxMailbox1CompleteCallback>
 8004c16:	e016      	b.n	8004c46 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d004      	beq.n	8004c2c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2a:	e00c      	b.n	8004c46 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3e:	e002      	b.n	8004c46 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f94b 	bl	8004edc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d024      	beq.n	8004c9a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7fd fe1d 	bl	80028a4 <HAL_CAN_TxMailbox2CompleteCallback>
 8004c6a:	e016      	b.n	8004c9a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d004      	beq.n	8004c80 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7e:	e00c      	b.n	8004c9a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d004      	beq.n	8004c94 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
 8004c92:	e002      	b.n	8004c9a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f92b 	bl	8004ef0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00c      	beq.n	8004cbe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2210      	movs	r2, #16
 8004cbc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00b      	beq.n	8004ce0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d006      	beq.n	8004ce0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2208      	movs	r2, #8
 8004cd8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f912 	bl	8004f04 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7fd fd97 	bl	800282c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00c      	beq.n	8004d22 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2210      	movs	r2, #16
 8004d20:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d006      	beq.n	8004d44 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2208      	movs	r2, #8
 8004d3c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f8f4 	bl	8004f2c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f8db 	bl	8004f18 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00b      	beq.n	8004d84 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d006      	beq.n	8004d84 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2210      	movs	r2, #16
 8004d7c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f8de 	bl	8004f40 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d006      	beq.n	8004da6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f8d7 	bl	8004f54 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d07b      	beq.n	8004ea8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	f003 0304 	and.w	r3, r3, #4
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d072      	beq.n	8004ea0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	f043 0302 	orr.w	r3, r3, #2
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d008      	beq.n	8004e0e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	f043 0304 	orr.w	r3, r3, #4
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d043      	beq.n	8004ea0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d03e      	beq.n	8004ea0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e28:	2b60      	cmp	r3, #96	; 0x60
 8004e2a:	d02b      	beq.n	8004e84 <HAL_CAN_IRQHandler+0x32a>
 8004e2c:	2b60      	cmp	r3, #96	; 0x60
 8004e2e:	d82e      	bhi.n	8004e8e <HAL_CAN_IRQHandler+0x334>
 8004e30:	2b50      	cmp	r3, #80	; 0x50
 8004e32:	d022      	beq.n	8004e7a <HAL_CAN_IRQHandler+0x320>
 8004e34:	2b50      	cmp	r3, #80	; 0x50
 8004e36:	d82a      	bhi.n	8004e8e <HAL_CAN_IRQHandler+0x334>
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d019      	beq.n	8004e70 <HAL_CAN_IRQHandler+0x316>
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d826      	bhi.n	8004e8e <HAL_CAN_IRQHandler+0x334>
 8004e40:	2b30      	cmp	r3, #48	; 0x30
 8004e42:	d010      	beq.n	8004e66 <HAL_CAN_IRQHandler+0x30c>
 8004e44:	2b30      	cmp	r3, #48	; 0x30
 8004e46:	d822      	bhi.n	8004e8e <HAL_CAN_IRQHandler+0x334>
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d002      	beq.n	8004e52 <HAL_CAN_IRQHandler+0x2f8>
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d005      	beq.n	8004e5c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004e50:	e01d      	b.n	8004e8e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	f043 0308 	orr.w	r3, r3, #8
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e5a:	e019      	b.n	8004e90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	f043 0310 	orr.w	r3, r3, #16
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e64:	e014      	b.n	8004e90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	f043 0320 	orr.w	r3, r3, #32
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e6e:	e00f      	b.n	8004e90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e78:	e00a      	b.n	8004e90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e82:	e005      	b.n	8004e90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e8c:	e000      	b.n	8004e90 <HAL_CAN_IRQHandler+0x336>
            break;
 8004e8e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e9e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d008      	beq.n	8004ec0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f854 	bl	8004f68 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004ec0:	bf00      	nop
 8004ec2:	3728      	adds	r7, #40	; 0x28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f8c:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f98:	4013      	ands	r3, r2
 8004f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fae:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	60d3      	str	r3, [r2, #12]
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	e000ed00 	.word	0xe000ed00

08004fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fc8:	4b04      	ldr	r3, [pc, #16]	; (8004fdc <__NVIC_GetPriorityGrouping+0x18>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	0a1b      	lsrs	r3, r3, #8
 8004fce:	f003 0307 	and.w	r3, r3, #7
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	e000ed00 	.word	0xe000ed00

08004fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	db0b      	blt.n	800500a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	f003 021f 	and.w	r2, r3, #31
 8004ff8:	4907      	ldr	r1, [pc, #28]	; (8005018 <__NVIC_EnableIRQ+0x38>)
 8004ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	2001      	movs	r0, #1
 8005002:	fa00 f202 	lsl.w	r2, r0, r2
 8005006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	e000e100 	.word	0xe000e100

0800501c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	4603      	mov	r3, r0
 8005024:	6039      	str	r1, [r7, #0]
 8005026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502c:	2b00      	cmp	r3, #0
 800502e:	db0a      	blt.n	8005046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	b2da      	uxtb	r2, r3
 8005034:	490c      	ldr	r1, [pc, #48]	; (8005068 <__NVIC_SetPriority+0x4c>)
 8005036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503a:	0112      	lsls	r2, r2, #4
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	440b      	add	r3, r1
 8005040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005044:	e00a      	b.n	800505c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	b2da      	uxtb	r2, r3
 800504a:	4908      	ldr	r1, [pc, #32]	; (800506c <__NVIC_SetPriority+0x50>)
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	3b04      	subs	r3, #4
 8005054:	0112      	lsls	r2, r2, #4
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	440b      	add	r3, r1
 800505a:	761a      	strb	r2, [r3, #24]
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	e000e100 	.word	0xe000e100
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005070:	b480      	push	{r7}
 8005072:	b089      	sub	sp, #36	; 0x24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f1c3 0307 	rsb	r3, r3, #7
 800508a:	2b04      	cmp	r3, #4
 800508c:	bf28      	it	cs
 800508e:	2304      	movcs	r3, #4
 8005090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	3304      	adds	r3, #4
 8005096:	2b06      	cmp	r3, #6
 8005098:	d902      	bls.n	80050a0 <NVIC_EncodePriority+0x30>
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	3b03      	subs	r3, #3
 800509e:	e000      	b.n	80050a2 <NVIC_EncodePriority+0x32>
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a4:	f04f 32ff 	mov.w	r2, #4294967295
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	43da      	mvns	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	401a      	ands	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050b8:	f04f 31ff 	mov.w	r1, #4294967295
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	fa01 f303 	lsl.w	r3, r1, r3
 80050c2:	43d9      	mvns	r1, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050c8:	4313      	orrs	r3, r2
         );
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3724      	adds	r7, #36	; 0x24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff ff4c 	bl	8004f7c <__NVIC_SetPriorityGrouping>
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	4603      	mov	r3, r0
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050fe:	f7ff ff61 	bl	8004fc4 <__NVIC_GetPriorityGrouping>
 8005102:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	6978      	ldr	r0, [r7, #20]
 800510a:	f7ff ffb1 	bl	8005070 <NVIC_EncodePriority>
 800510e:	4602      	mov	r2, r0
 8005110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff ff80 	bl	800501c <__NVIC_SetPriority>
}
 800511c:	bf00      	nop
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800512e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff ff54 	bl	8004fe0 <__NVIC_EnableIRQ>
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e014      	b.n	800517c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	791b      	ldrb	r3, [r3, #4]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d105      	bne.n	8005168 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7fd fd66 	bl	8002c34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	795b      	ldrb	r3, [r3, #5]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_DAC_Start+0x16>
 8005196:	2302      	movs	r3, #2
 8005198:	e03b      	b.n	8005212 <HAL_DAC_Start+0x8e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6819      	ldr	r1, [r3, #0]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2201      	movs	r2, #1
 80051b4:	409a      	lsls	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10f      	bne.n	80051e4 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d118      	bne.n	8005204 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0201 	orr.w	r2, r2, #1
 80051e0:	605a      	str	r2, [r3, #4]
 80051e2:	e00f      	b.n	8005204 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80051ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051f2:	d107      	bne.n	8005204 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0202 	orr.w	r2, r2, #2
 8005202:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005234:	d120      	bne.n	8005278 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005244:	d118      	bne.n	8005278 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2204      	movs	r2, #4
 800524a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f043 0201 	orr.w	r2, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005260:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005270:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f852 	bl	800531c <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005286:	d120      	bne.n	80052ca <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005292:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005296:	d118      	bne.n	80052ca <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2204      	movs	r2, #4
 800529c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f043 0202 	orr.w	r2, r3, #2
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80052b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80052c2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f94d 	bl	8005564 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b087      	sub	sp, #28
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d105      	bne.n	80052fc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4413      	add	r3, r2
 80052f6:	3308      	adds	r3, #8
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	e004      	b.n	8005306 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4413      	add	r3, r2
 8005302:	3314      	adds	r3, #20
 8005304:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	461a      	mov	r2, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	371c      	adds	r7, #28
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	795b      	ldrb	r3, [r3, #5]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_DAC_ConfigChannel+0x1c>
 8005348:	2302      	movs	r3, #2
 800534a:	e107      	b.n	800555c <HAL_DAC_ConfigChannel+0x22c>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2202      	movs	r2, #2
 8005356:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b04      	cmp	r3, #4
 800535e:	d174      	bne.n	800544a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005360:	f7fd fef8 	bl	8003154 <HAL_GetTick>
 8005364:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d134      	bne.n	80053d6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800536c:	e011      	b.n	8005392 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800536e:	f7fd fef1 	bl	8003154 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	d90a      	bls.n	8005392 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f043 0208 	orr.w	r2, r3, #8
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2203      	movs	r2, #3
 800538c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e0e4      	b.n	800555c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e6      	bne.n	800536e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80053a0:	2001      	movs	r0, #1
 80053a2:	f7fd fee3 	bl	800316c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	6992      	ldr	r2, [r2, #24]
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40
 80053b0:	e01e      	b.n	80053f0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80053b2:	f7fd fecf 	bl	8003154 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d90a      	bls.n	80053d6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f043 0208 	orr.w	r2, r3, #8
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2203      	movs	r2, #3
 80053d0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e0c2      	b.n	800555c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053dc:	2b00      	cmp	r3, #0
 80053de:	dbe8      	blt.n	80053b2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80053e0:	2001      	movs	r0, #1
 80053e2:	f7fd fec3 	bl	800316c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	6992      	ldr	r2, [r2, #24]
 80053ee:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005400:	fa01 f303 	lsl.w	r3, r1, r3
 8005404:	43db      	mvns	r3, r3
 8005406:	ea02 0103 	and.w	r1, r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	409a      	lsls	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	21ff      	movs	r1, #255	; 0xff
 800542c:	fa01 f303 	lsl.w	r3, r1, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	ea02 0103 	and.w	r1, r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	6a1a      	ldr	r2, [r3, #32]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	409a      	lsls	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d11d      	bne.n	800548e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	221f      	movs	r2, #31
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	43db      	mvns	r3, r3
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	4013      	ands	r3, r2
 800546c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	4313      	orrs	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2207      	movs	r2, #7
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	43db      	mvns	r3, r3
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	4013      	ands	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6819      	ldr	r1, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	43da      	mvns	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	400a      	ands	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	f640 72fc 	movw	r2, #4092	; 0xffc
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	43db      	mvns	r3, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4013      	ands	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6819      	ldr	r1, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	22c0      	movs	r2, #192	; 0xc0
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	43da      	mvns	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	400a      	ands	r2, r1
 800554c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005586:	e148      	b.n	800581a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	2101      	movs	r1, #1
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	fa01 f303 	lsl.w	r3, r1, r3
 8005594:	4013      	ands	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 813a 	beq.w	8005814 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d005      	beq.n	80055b8 <HAL_GPIO_Init+0x40>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d130      	bne.n	800561a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	2203      	movs	r2, #3
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	43db      	mvns	r3, r3
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4013      	ands	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055ee:	2201      	movs	r2, #1
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	43db      	mvns	r3, r3
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4013      	ands	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	091b      	lsrs	r3, r3, #4
 8005604:	f003 0201 	and.w	r2, r3, #1
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b03      	cmp	r3, #3
 8005624:	d017      	beq.n	8005656 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	2203      	movs	r2, #3
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4013      	ands	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d123      	bne.n	80056aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	08da      	lsrs	r2, r3, #3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3208      	adds	r2, #8
 800566a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800566e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	220f      	movs	r2, #15
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43db      	mvns	r3, r3
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4013      	ands	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	08da      	lsrs	r2, r3, #3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3208      	adds	r2, #8
 80056a4:	6939      	ldr	r1, [r7, #16]
 80056a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	2203      	movs	r2, #3
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	43db      	mvns	r3, r3
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4013      	ands	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f003 0203 	and.w	r2, r3, #3
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 8094 	beq.w	8005814 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ec:	4b52      	ldr	r3, [pc, #328]	; (8005838 <HAL_GPIO_Init+0x2c0>)
 80056ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f0:	4a51      	ldr	r2, [pc, #324]	; (8005838 <HAL_GPIO_Init+0x2c0>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	6613      	str	r3, [r2, #96]	; 0x60
 80056f8:	4b4f      	ldr	r3, [pc, #316]	; (8005838 <HAL_GPIO_Init+0x2c0>)
 80056fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	60bb      	str	r3, [r7, #8]
 8005702:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005704:	4a4d      	ldr	r2, [pc, #308]	; (800583c <HAL_GPIO_Init+0x2c4>)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	089b      	lsrs	r3, r3, #2
 800570a:	3302      	adds	r3, #2
 800570c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005710:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	220f      	movs	r2, #15
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	43db      	mvns	r3, r3
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4013      	ands	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800572e:	d00d      	beq.n	800574c <HAL_GPIO_Init+0x1d4>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a43      	ldr	r2, [pc, #268]	; (8005840 <HAL_GPIO_Init+0x2c8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d007      	beq.n	8005748 <HAL_GPIO_Init+0x1d0>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a42      	ldr	r2, [pc, #264]	; (8005844 <HAL_GPIO_Init+0x2cc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d101      	bne.n	8005744 <HAL_GPIO_Init+0x1cc>
 8005740:	2302      	movs	r3, #2
 8005742:	e004      	b.n	800574e <HAL_GPIO_Init+0x1d6>
 8005744:	2307      	movs	r3, #7
 8005746:	e002      	b.n	800574e <HAL_GPIO_Init+0x1d6>
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <HAL_GPIO_Init+0x1d6>
 800574c:	2300      	movs	r3, #0
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	f002 0203 	and.w	r2, r2, #3
 8005754:	0092      	lsls	r2, r2, #2
 8005756:	4093      	lsls	r3, r2
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800575e:	4937      	ldr	r1, [pc, #220]	; (800583c <HAL_GPIO_Init+0x2c4>)
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	089b      	lsrs	r3, r3, #2
 8005764:	3302      	adds	r3, #2
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800576c:	4b36      	ldr	r3, [pc, #216]	; (8005848 <HAL_GPIO_Init+0x2d0>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	43db      	mvns	r3, r3
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4013      	ands	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005790:	4a2d      	ldr	r2, [pc, #180]	; (8005848 <HAL_GPIO_Init+0x2d0>)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005796:	4b2c      	ldr	r3, [pc, #176]	; (8005848 <HAL_GPIO_Init+0x2d0>)
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	43db      	mvns	r3, r3
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4013      	ands	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057ba:	4a23      	ldr	r2, [pc, #140]	; (8005848 <HAL_GPIO_Init+0x2d0>)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80057c0:	4b21      	ldr	r3, [pc, #132]	; (8005848 <HAL_GPIO_Init+0x2d0>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	43db      	mvns	r3, r3
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4013      	ands	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80057e4:	4a18      	ldr	r2, [pc, #96]	; (8005848 <HAL_GPIO_Init+0x2d0>)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80057ea:	4b17      	ldr	r3, [pc, #92]	; (8005848 <HAL_GPIO_Init+0x2d0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	43db      	mvns	r3, r3
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4013      	ands	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800580e:	4a0e      	ldr	r2, [pc, #56]	; (8005848 <HAL_GPIO_Init+0x2d0>)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	3301      	adds	r3, #1
 8005818:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	f47f aeaf 	bne.w	8005588 <HAL_GPIO_Init+0x10>
  }
}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40021000 	.word	0x40021000
 800583c:	40010000 	.word	0x40010000
 8005840:	48000400 	.word	0x48000400
 8005844:	48000800 	.word	0x48000800
 8005848:	40010400 	.word	0x40010400

0800584c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	807b      	strh	r3, [r7, #2]
 8005858:	4613      	mov	r3, r2
 800585a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800585c:	787b      	ldrb	r3, [r7, #1]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005862:	887a      	ldrh	r2, [r7, #2]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005868:	e002      	b.n	8005870 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800586a:	887a      	ldrh	r2, [r7, #2]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e081      	b.n	8005992 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fd fa0c 	bl	8002cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2224      	movs	r2, #36	; 0x24
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0201 	bic.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d107      	bne.n	80058f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	e006      	b.n	8005904 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005902:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d104      	bne.n	8005916 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005914:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005928:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005938:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69d9      	ldr	r1, [r3, #28]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1a      	ldr	r2, [r3, #32]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	607a      	str	r2, [r7, #4]
 80059a6:	461a      	mov	r2, r3
 80059a8:	460b      	mov	r3, r1
 80059aa:	817b      	strh	r3, [r7, #10]
 80059ac:	4613      	mov	r3, r2
 80059ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	f040 80da 	bne.w	8005b72 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_I2C_Master_Transmit+0x30>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e0d3      	b.n	8005b74 <HAL_I2C_Master_Transmit+0x1d8>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059d4:	f7fd fbbe 	bl	8003154 <HAL_GetTick>
 80059d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	2319      	movs	r3, #25
 80059e0:	2201      	movs	r2, #1
 80059e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 f8f0 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e0be      	b.n	8005b74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2221      	movs	r2, #33	; 0x21
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2210      	movs	r2, #16
 8005a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	893a      	ldrh	r2, [r7, #8]
 8005a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2bff      	cmp	r3, #255	; 0xff
 8005a26:	d90e      	bls.n	8005a46 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	22ff      	movs	r2, #255	; 0xff
 8005a2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	8979      	ldrh	r1, [r7, #10]
 8005a36:	4b51      	ldr	r3, [pc, #324]	; (8005b7c <HAL_I2C_Master_Transmit+0x1e0>)
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fa6c 	bl	8005f1c <I2C_TransferConfig>
 8005a44:	e06c      	b.n	8005b20 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	8979      	ldrh	r1, [r7, #10]
 8005a58:	4b48      	ldr	r3, [pc, #288]	; (8005b7c <HAL_I2C_Master_Transmit+0x1e0>)
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fa5b 	bl	8005f1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005a66:	e05b      	b.n	8005b20 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	6a39      	ldr	r1, [r7, #32]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f8ed 	bl	8005c4c <I2C_WaitOnTXISFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e07b      	b.n	8005b74 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d034      	beq.n	8005b20 <HAL_I2C_Master_Transmit+0x184>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d130      	bne.n	8005b20 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2180      	movs	r1, #128	; 0x80
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 f87f 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e04d      	b.n	8005b74 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2bff      	cmp	r3, #255	; 0xff
 8005ae0:	d90e      	bls.n	8005b00 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	22ff      	movs	r2, #255	; 0xff
 8005ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	8979      	ldrh	r1, [r7, #10]
 8005af0:	2300      	movs	r3, #0
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fa0f 	bl	8005f1c <I2C_TransferConfig>
 8005afe:	e00f      	b.n	8005b20 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	8979      	ldrh	r1, [r7, #10]
 8005b12:	2300      	movs	r3, #0
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f9fe 	bl	8005f1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d19e      	bne.n	8005a68 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	6a39      	ldr	r1, [r7, #32]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f8cc 	bl	8005ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e01a      	b.n	8005b74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2220      	movs	r2, #32
 8005b44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6859      	ldr	r1, [r3, #4]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <HAL_I2C_Master_Transmit+0x1e4>)
 8005b52:	400b      	ands	r3, r1
 8005b54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e000      	b.n	8005b74 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005b72:	2302      	movs	r3, #2
  }
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	80002000 	.word	0x80002000
 8005b80:	fe00e800 	.word	0xfe00e800

08005b84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d103      	bne.n	8005ba2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d007      	beq.n	8005bc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	619a      	str	r2, [r3, #24]
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bdc:	e022      	b.n	8005c24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d01e      	beq.n	8005c24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be6:	f7fd fab5 	bl	8003154 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d302      	bcc.n	8005bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d113      	bne.n	8005c24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c00:	f043 0220 	orr.w	r2, r3, #32
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e00f      	b.n	8005c44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d0cd      	beq.n	8005bde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c58:	e02c      	b.n	8005cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f870 	bl	8005d44 <I2C_IsErrorOccurred>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e02a      	b.n	8005cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c74:	d01e      	beq.n	8005cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c76:	f7fd fa6d 	bl	8003154 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d302      	bcc.n	8005c8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d113      	bne.n	8005cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c90:	f043 0220 	orr.w	r2, r3, #32
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e007      	b.n	8005cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d1cb      	bne.n	8005c5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cd8:	e028      	b.n	8005d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 f830 	bl	8005d44 <I2C_IsErrorOccurred>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e026      	b.n	8005d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cee:	f7fd fa31 	bl	8003154 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d302      	bcc.n	8005d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d113      	bne.n	8005d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d08:	f043 0220 	orr.w	r2, r3, #32
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e007      	b.n	8005d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d1cf      	bne.n	8005cda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08a      	sub	sp, #40	; 0x28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d075      	beq.n	8005e5c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2210      	movs	r2, #16
 8005d76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d78:	e056      	b.n	8005e28 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d80:	d052      	beq.n	8005e28 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d82:	f7fd f9e7 	bl	8003154 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d302      	bcc.n	8005d98 <I2C_IsErrorOccurred+0x54>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d147      	bne.n	8005e28 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005daa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dba:	d12e      	bne.n	8005e1a <I2C_IsErrorOccurred+0xd6>
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dc2:	d02a      	beq.n	8005e1a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005dc4:	7cfb      	ldrb	r3, [r7, #19]
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	d027      	beq.n	8005e1a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dd8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005dda:	f7fd f9bb 	bl	8003154 <HAL_GetTick>
 8005dde:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005de0:	e01b      	b.n	8005e1a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005de2:	f7fd f9b7 	bl	8003154 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b19      	cmp	r3, #25
 8005dee:	d914      	bls.n	8005e1a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d1dc      	bne.n	8005de2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b20      	cmp	r3, #32
 8005e34:	d003      	beq.n	8005e3e <I2C_IsErrorOccurred+0xfa>
 8005e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d09d      	beq.n	8005d7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	f043 0304 	orr.w	r3, r3, #4
 8005e54:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00b      	beq.n	8005ea8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	f043 0308 	orr.w	r3, r3, #8
 8005e96:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ea0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	f043 0302 	orr.w	r3, r3, #2
 8005eb8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ec2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01c      	beq.n	8005f0c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f7ff fe56 	bl	8005b84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6859      	ldr	r1, [r3, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <I2C_IsErrorOccurred+0x1d4>)
 8005ee4:	400b      	ands	r3, r1
 8005ee6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3728      	adds	r7, #40	; 0x28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	fe00e800 	.word	0xfe00e800

08005f1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	817b      	strh	r3, [r7, #10]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f2e:	897b      	ldrh	r3, [r7, #10]
 8005f30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f34:	7a7b      	ldrb	r3, [r7, #9]
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	0d5b      	lsrs	r3, r3, #21
 8005f56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f5a:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <I2C_TransferConfig+0x60>)
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	43db      	mvns	r3, r3
 8005f60:	ea02 0103 	and.w	r1, r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	03ff63ff 	.word	0x03ff63ff

08005f80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	d138      	bne.n	8006008 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e032      	b.n	800600a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2224      	movs	r2, #36	; 0x24
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0201 	bic.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6819      	ldr	r1, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	e000      	b.n	800600a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006008:	2302      	movs	r3, #2
  }
}
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b20      	cmp	r3, #32
 800602a:	d139      	bne.n	80060a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006036:	2302      	movs	r3, #2
 8006038:	e033      	b.n	80060a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2224      	movs	r2, #36	; 0x24
 8006046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0201 	bic.w	r2, r2, #1
 8006058:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006068:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	e000      	b.n	80060a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
  }
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060b8:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80060ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060bc:	4a0a      	ldr	r2, [pc, #40]	; (80060e8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	6613      	str	r3, [r2, #96]	; 0x60
 80060c4:	4b08      	ldr	r3, [pc, #32]	; (80060e8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80060c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80060d0:	4b06      	ldr	r3, [pc, #24]	; (80060ec <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	4905      	ldr	r1, [pc, #20]	; (80060ec <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4313      	orrs	r3, r2
 80060da:	604b      	str	r3, [r1, #4]
}
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40021000 	.word	0x40021000
 80060ec:	40010000 	.word	0x40010000

080060f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80060f0:	b480      	push	{r7}
 80060f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060f4:	4b05      	ldr	r3, [pc, #20]	; (800610c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a04      	ldr	r2, [pc, #16]	; (800610c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fe:	6013      	str	r3, [r2, #0]
}
 8006100:	bf00      	nop
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40007000 	.word	0x40007000

08006110 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006114:	4b04      	ldr	r3, [pc, #16]	; (8006128 <HAL_PWREx_GetVoltageRange+0x18>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800611c:	4618      	mov	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40007000 	.word	0x40007000

0800612c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800613a:	d130      	bne.n	800619e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800613c:	4b23      	ldr	r3, [pc, #140]	; (80061cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006148:	d038      	beq.n	80061bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800614a:	4b20      	ldr	r3, [pc, #128]	; (80061cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006152:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006158:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800615a:	4b1d      	ldr	r3, [pc, #116]	; (80061d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2232      	movs	r2, #50	; 0x32
 8006160:	fb02 f303 	mul.w	r3, r2, r3
 8006164:	4a1b      	ldr	r2, [pc, #108]	; (80061d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006166:	fba2 2303 	umull	r2, r3, r2, r3
 800616a:	0c9b      	lsrs	r3, r3, #18
 800616c:	3301      	adds	r3, #1
 800616e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006170:	e002      	b.n	8006178 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3b01      	subs	r3, #1
 8006176:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006178:	4b14      	ldr	r3, [pc, #80]	; (80061cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006184:	d102      	bne.n	800618c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f2      	bne.n	8006172 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800618c:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006198:	d110      	bne.n	80061bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e00f      	b.n	80061be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800619e:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061aa:	d007      	beq.n	80061bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80061ac:	4b07      	ldr	r3, [pc, #28]	; (80061cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061b4:	4a05      	ldr	r2, [pc, #20]	; (80061cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40007000 	.word	0x40007000
 80061d0:	20000034 	.word	0x20000034
 80061d4:	431bde83 	.word	0x431bde83

080061d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	f000 bc02 	b.w	80069f0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061ec:	4b96      	ldr	r3, [pc, #600]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f003 030c 	and.w	r3, r3, #12
 80061f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061f6:	4b94      	ldr	r3, [pc, #592]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0310 	and.w	r3, r3, #16
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 80e4 	beq.w	80063d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <HAL_RCC_OscConfig+0x4c>
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2b0c      	cmp	r3, #12
 8006218:	f040 808b 	bne.w	8006332 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b01      	cmp	r3, #1
 8006220:	f040 8087 	bne.w	8006332 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006224:	4b88      	ldr	r3, [pc, #544]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <HAL_RCC_OscConfig+0x64>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e3d9      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1a      	ldr	r2, [r3, #32]
 8006240:	4b81      	ldr	r3, [pc, #516]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d004      	beq.n	8006256 <HAL_RCC_OscConfig+0x7e>
 800624c:	4b7e      	ldr	r3, [pc, #504]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006254:	e005      	b.n	8006262 <HAL_RCC_OscConfig+0x8a>
 8006256:	4b7c      	ldr	r3, [pc, #496]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800625c:	091b      	lsrs	r3, r3, #4
 800625e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006262:	4293      	cmp	r3, r2
 8006264:	d223      	bcs.n	80062ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fdbe 	bl	8006dec <RCC_SetFlashLatencyFromMSIRange>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e3ba      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800627a:	4b73      	ldr	r3, [pc, #460]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a72      	ldr	r2, [pc, #456]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006280:	f043 0308 	orr.w	r3, r3, #8
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	4b70      	ldr	r3, [pc, #448]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	496d      	ldr	r1, [pc, #436]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006294:	4313      	orrs	r3, r2
 8006296:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006298:	4b6b      	ldr	r3, [pc, #428]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	4968      	ldr	r1, [pc, #416]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	604b      	str	r3, [r1, #4]
 80062ac:	e025      	b.n	80062fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062ae:	4b66      	ldr	r3, [pc, #408]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a65      	ldr	r2, [pc, #404]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 80062b4:	f043 0308 	orr.w	r3, r3, #8
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	4b63      	ldr	r3, [pc, #396]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	4960      	ldr	r1, [pc, #384]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062cc:	4b5e      	ldr	r3, [pc, #376]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	495b      	ldr	r1, [pc, #364]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fd7e 	bl	8006dec <RCC_SetFlashLatencyFromMSIRange>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e37a      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062fa:	f000 fc81 	bl	8006c00 <HAL_RCC_GetSysClockFreq>
 80062fe:	4602      	mov	r2, r0
 8006300:	4b51      	ldr	r3, [pc, #324]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	4950      	ldr	r1, [pc, #320]	; (800644c <HAL_RCC_OscConfig+0x274>)
 800630c:	5ccb      	ldrb	r3, [r1, r3]
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	fa22 f303 	lsr.w	r3, r2, r3
 8006316:	4a4e      	ldr	r2, [pc, #312]	; (8006450 <HAL_RCC_OscConfig+0x278>)
 8006318:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800631a:	4b4e      	ldr	r3, [pc, #312]	; (8006454 <HAL_RCC_OscConfig+0x27c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fc fdca 	bl	8002eb8 <HAL_InitTick>
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d052      	beq.n	80063d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	e35e      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d032      	beq.n	80063a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800633a:	4b43      	ldr	r3, [pc, #268]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a42      	ldr	r2, [pc, #264]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006340:	f043 0301 	orr.w	r3, r3, #1
 8006344:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006346:	f7fc ff05 	bl	8003154 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800634e:	f7fc ff01 	bl	8003154 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e347      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006360:	4b39      	ldr	r3, [pc, #228]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0f0      	beq.n	800634e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800636c:	4b36      	ldr	r3, [pc, #216]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a35      	ldr	r2, [pc, #212]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006372:	f043 0308 	orr.w	r3, r3, #8
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	4b33      	ldr	r3, [pc, #204]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	4930      	ldr	r1, [pc, #192]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006386:	4313      	orrs	r3, r2
 8006388:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800638a:	4b2f      	ldr	r3, [pc, #188]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	492b      	ldr	r1, [pc, #172]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 800639a:	4313      	orrs	r3, r2
 800639c:	604b      	str	r3, [r1, #4]
 800639e:	e01a      	b.n	80063d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80063a0:	4b29      	ldr	r3, [pc, #164]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a28      	ldr	r2, [pc, #160]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 80063a6:	f023 0301 	bic.w	r3, r3, #1
 80063aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063ac:	f7fc fed2 	bl	8003154 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063b4:	f7fc fece 	bl	8003154 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e314      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80063c6:	4b20      	ldr	r3, [pc, #128]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x1dc>
 80063d2:	e000      	b.n	80063d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80063d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d073      	beq.n	80064ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d005      	beq.n	80063f4 <HAL_RCC_OscConfig+0x21c>
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	2b0c      	cmp	r3, #12
 80063ec:	d10e      	bne.n	800640c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d10b      	bne.n	800640c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063f4:	4b14      	ldr	r3, [pc, #80]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d063      	beq.n	80064c8 <HAL_RCC_OscConfig+0x2f0>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d15f      	bne.n	80064c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e2f1      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006414:	d106      	bne.n	8006424 <HAL_RCC_OscConfig+0x24c>
 8006416:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a0b      	ldr	r2, [pc, #44]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 800641c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	e025      	b.n	8006470 <HAL_RCC_OscConfig+0x298>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800642c:	d114      	bne.n	8006458 <HAL_RCC_OscConfig+0x280>
 800642e:	4b06      	ldr	r3, [pc, #24]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a05      	ldr	r2, [pc, #20]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	4b03      	ldr	r3, [pc, #12]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a02      	ldr	r2, [pc, #8]	; (8006448 <HAL_RCC_OscConfig+0x270>)
 8006440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	e013      	b.n	8006470 <HAL_RCC_OscConfig+0x298>
 8006448:	40021000 	.word	0x40021000
 800644c:	0800bf70 	.word	0x0800bf70
 8006450:	20000034 	.word	0x20000034
 8006454:	20000038 	.word	0x20000038
 8006458:	4ba0      	ldr	r3, [pc, #640]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a9f      	ldr	r2, [pc, #636]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 800645e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	4b9d      	ldr	r3, [pc, #628]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a9c      	ldr	r2, [pc, #624]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 800646a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800646e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d013      	beq.n	80064a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006478:	f7fc fe6c 	bl	8003154 <HAL_GetTick>
 800647c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006480:	f7fc fe68 	bl	8003154 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b64      	cmp	r3, #100	; 0x64
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e2ae      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006492:	4b92      	ldr	r3, [pc, #584]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0f0      	beq.n	8006480 <HAL_RCC_OscConfig+0x2a8>
 800649e:	e014      	b.n	80064ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a0:	f7fc fe58 	bl	8003154 <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064a8:	f7fc fe54 	bl	8003154 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b64      	cmp	r3, #100	; 0x64
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e29a      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064ba:	4b88      	ldr	r3, [pc, #544]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f0      	bne.n	80064a8 <HAL_RCC_OscConfig+0x2d0>
 80064c6:	e000      	b.n	80064ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d060      	beq.n	8006598 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d005      	beq.n	80064e8 <HAL_RCC_OscConfig+0x310>
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	2b0c      	cmp	r3, #12
 80064e0:	d119      	bne.n	8006516 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d116      	bne.n	8006516 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064e8:	4b7c      	ldr	r3, [pc, #496]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <HAL_RCC_OscConfig+0x328>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e277      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006500:	4b76      	ldr	r3, [pc, #472]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	061b      	lsls	r3, r3, #24
 800650e:	4973      	ldr	r1, [pc, #460]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 8006510:	4313      	orrs	r3, r2
 8006512:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006514:	e040      	b.n	8006598 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d023      	beq.n	8006566 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800651e:	4b6f      	ldr	r3, [pc, #444]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a6e      	ldr	r2, [pc, #440]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 8006524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652a:	f7fc fe13 	bl	8003154 <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006532:	f7fc fe0f 	bl	8003154 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e255      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006544:	4b65      	ldr	r3, [pc, #404]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0f0      	beq.n	8006532 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006550:	4b62      	ldr	r3, [pc, #392]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	061b      	lsls	r3, r3, #24
 800655e:	495f      	ldr	r1, [pc, #380]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 8006560:	4313      	orrs	r3, r2
 8006562:	604b      	str	r3, [r1, #4]
 8006564:	e018      	b.n	8006598 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006566:	4b5d      	ldr	r3, [pc, #372]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a5c      	ldr	r2, [pc, #368]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 800656c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006572:	f7fc fdef 	bl	8003154 <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800657a:	f7fc fdeb 	bl	8003154 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e231      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800658c:	4b53      	ldr	r3, [pc, #332]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1f0      	bne.n	800657a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d03c      	beq.n	800661e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01c      	beq.n	80065e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ac:	4b4b      	ldr	r3, [pc, #300]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 80065ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065b2:	4a4a      	ldr	r2, [pc, #296]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 80065b4:	f043 0301 	orr.w	r3, r3, #1
 80065b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065bc:	f7fc fdca 	bl	8003154 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065c4:	f7fc fdc6 	bl	8003154 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e20c      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065d6:	4b41      	ldr	r3, [pc, #260]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 80065d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0ef      	beq.n	80065c4 <HAL_RCC_OscConfig+0x3ec>
 80065e4:	e01b      	b.n	800661e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065e6:	4b3d      	ldr	r3, [pc, #244]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 80065e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065ec:	4a3b      	ldr	r2, [pc, #236]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 80065ee:	f023 0301 	bic.w	r3, r3, #1
 80065f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f6:	f7fc fdad 	bl	8003154 <HAL_GetTick>
 80065fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065fc:	e008      	b.n	8006610 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065fe:	f7fc fda9 	bl	8003154 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e1ef      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006610:	4b32      	ldr	r3, [pc, #200]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 8006612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1ef      	bne.n	80065fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 80a6 	beq.w	8006778 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800662c:	2300      	movs	r3, #0
 800662e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006630:	4b2a      	ldr	r3, [pc, #168]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 8006632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10d      	bne.n	8006658 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800663c:	4b27      	ldr	r3, [pc, #156]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 800663e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006640:	4a26      	ldr	r2, [pc, #152]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 8006642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006646:	6593      	str	r3, [r2, #88]	; 0x58
 8006648:	4b24      	ldr	r3, [pc, #144]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 800664a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006650:	60bb      	str	r3, [r7, #8]
 8006652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006654:	2301      	movs	r3, #1
 8006656:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006658:	4b21      	ldr	r3, [pc, #132]	; (80066e0 <HAL_RCC_OscConfig+0x508>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006660:	2b00      	cmp	r3, #0
 8006662:	d118      	bne.n	8006696 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006664:	4b1e      	ldr	r3, [pc, #120]	; (80066e0 <HAL_RCC_OscConfig+0x508>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a1d      	ldr	r2, [pc, #116]	; (80066e0 <HAL_RCC_OscConfig+0x508>)
 800666a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006670:	f7fc fd70 	bl	8003154 <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006678:	f7fc fd6c 	bl	8003154 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e1b2      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800668a:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <HAL_RCC_OscConfig+0x508>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0f0      	beq.n	8006678 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d108      	bne.n	80066b0 <HAL_RCC_OscConfig+0x4d8>
 800669e:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 80066a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a4:	4a0d      	ldr	r2, [pc, #52]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 80066a6:	f043 0301 	orr.w	r3, r3, #1
 80066aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066ae:	e029      	b.n	8006704 <HAL_RCC_OscConfig+0x52c>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b05      	cmp	r3, #5
 80066b6:	d115      	bne.n	80066e4 <HAL_RCC_OscConfig+0x50c>
 80066b8:	4b08      	ldr	r3, [pc, #32]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 80066ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066be:	4a07      	ldr	r2, [pc, #28]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 80066c0:	f043 0304 	orr.w	r3, r3, #4
 80066c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066c8:	4b04      	ldr	r3, [pc, #16]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 80066ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ce:	4a03      	ldr	r2, [pc, #12]	; (80066dc <HAL_RCC_OscConfig+0x504>)
 80066d0:	f043 0301 	orr.w	r3, r3, #1
 80066d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066d8:	e014      	b.n	8006704 <HAL_RCC_OscConfig+0x52c>
 80066da:	bf00      	nop
 80066dc:	40021000 	.word	0x40021000
 80066e0:	40007000 	.word	0x40007000
 80066e4:	4b9a      	ldr	r3, [pc, #616]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 80066e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ea:	4a99      	ldr	r2, [pc, #612]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066f4:	4b96      	ldr	r3, [pc, #600]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fa:	4a95      	ldr	r2, [pc, #596]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 80066fc:	f023 0304 	bic.w	r3, r3, #4
 8006700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d016      	beq.n	800673a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670c:	f7fc fd22 	bl	8003154 <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006712:	e00a      	b.n	800672a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006714:	f7fc fd1e 	bl	8003154 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006722:	4293      	cmp	r3, r2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e162      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800672a:	4b89      	ldr	r3, [pc, #548]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 800672c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0ed      	beq.n	8006714 <HAL_RCC_OscConfig+0x53c>
 8006738:	e015      	b.n	8006766 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673a:	f7fc fd0b 	bl	8003154 <HAL_GetTick>
 800673e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006740:	e00a      	b.n	8006758 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006742:	f7fc fd07 	bl	8003154 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006750:	4293      	cmp	r3, r2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e14b      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006758:	4b7d      	ldr	r3, [pc, #500]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 800675a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1ed      	bne.n	8006742 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006766:	7ffb      	ldrb	r3, [r7, #31]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d105      	bne.n	8006778 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800676c:	4b78      	ldr	r3, [pc, #480]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 800676e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006770:	4a77      	ldr	r2, [pc, #476]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 8006772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006776:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d03c      	beq.n	80067fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01c      	beq.n	80067c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800678c:	4b70      	ldr	r3, [pc, #448]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 800678e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006792:	4a6f      	ldr	r2, [pc, #444]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 8006794:	f043 0301 	orr.w	r3, r3, #1
 8006798:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679c:	f7fc fcda 	bl	8003154 <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067a4:	f7fc fcd6 	bl	8003154 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e11c      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80067b6:	4b66      	ldr	r3, [pc, #408]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 80067b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0ef      	beq.n	80067a4 <HAL_RCC_OscConfig+0x5cc>
 80067c4:	e01b      	b.n	80067fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067c6:	4b62      	ldr	r3, [pc, #392]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 80067c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067cc:	4a60      	ldr	r2, [pc, #384]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 80067ce:	f023 0301 	bic.w	r3, r3, #1
 80067d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d6:	f7fc fcbd 	bl	8003154 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067dc:	e008      	b.n	80067f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067de:	f7fc fcb9 	bl	8003154 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e0ff      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067f0:	4b57      	ldr	r3, [pc, #348]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 80067f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1ef      	bne.n	80067de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 80f3 	beq.w	80069ee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680c:	2b02      	cmp	r3, #2
 800680e:	f040 80c9 	bne.w	80069a4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006812:	4b4f      	ldr	r3, [pc, #316]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f003 0203 	and.w	r2, r3, #3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	429a      	cmp	r2, r3
 8006824:	d12c      	bne.n	8006880 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	3b01      	subs	r3, #1
 8006832:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006834:	429a      	cmp	r2, r3
 8006836:	d123      	bne.n	8006880 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006842:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006844:	429a      	cmp	r2, r3
 8006846:	d11b      	bne.n	8006880 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006854:	429a      	cmp	r2, r3
 8006856:	d113      	bne.n	8006880 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	3b01      	subs	r3, #1
 8006866:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006868:	429a      	cmp	r2, r3
 800686a:	d109      	bne.n	8006880 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	3b01      	subs	r3, #1
 800687a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800687c:	429a      	cmp	r2, r3
 800687e:	d06b      	beq.n	8006958 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2b0c      	cmp	r3, #12
 8006884:	d062      	beq.n	800694c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006886:	4b32      	ldr	r3, [pc, #200]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e0ac      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006896:	4b2e      	ldr	r3, [pc, #184]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a2d      	ldr	r2, [pc, #180]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 800689c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068a2:	f7fc fc57 	bl	8003154 <HAL_GetTick>
 80068a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068aa:	f7fc fc53 	bl	8003154 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e099      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068bc:	4b24      	ldr	r3, [pc, #144]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1f0      	bne.n	80068aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068c8:	4b21      	ldr	r3, [pc, #132]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	4b21      	ldr	r3, [pc, #132]	; (8006954 <HAL_RCC_OscConfig+0x77c>)
 80068ce:	4013      	ands	r3, r2
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80068d8:	3a01      	subs	r2, #1
 80068da:	0112      	lsls	r2, r2, #4
 80068dc:	4311      	orrs	r1, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068e2:	0212      	lsls	r2, r2, #8
 80068e4:	4311      	orrs	r1, r2
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80068ea:	0852      	lsrs	r2, r2, #1
 80068ec:	3a01      	subs	r2, #1
 80068ee:	0552      	lsls	r2, r2, #21
 80068f0:	4311      	orrs	r1, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80068f6:	0852      	lsrs	r2, r2, #1
 80068f8:	3a01      	subs	r2, #1
 80068fa:	0652      	lsls	r2, r2, #25
 80068fc:	4311      	orrs	r1, r2
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006902:	06d2      	lsls	r2, r2, #27
 8006904:	430a      	orrs	r2, r1
 8006906:	4912      	ldr	r1, [pc, #72]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 8006908:	4313      	orrs	r3, r2
 800690a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800690c:	4b10      	ldr	r3, [pc, #64]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a0f      	ldr	r2, [pc, #60]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 8006912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006916:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006918:	4b0d      	ldr	r3, [pc, #52]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	4a0c      	ldr	r2, [pc, #48]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 800691e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006922:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006924:	f7fc fc16 	bl	8003154 <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800692c:	f7fc fc12 	bl	8003154 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e058      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800693e:	4b04      	ldr	r3, [pc, #16]	; (8006950 <HAL_RCC_OscConfig+0x778>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0f0      	beq.n	800692c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800694a:	e050      	b.n	80069ee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e04f      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
 8006950:	40021000 	.word	0x40021000
 8006954:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006958:	4b27      	ldr	r3, [pc, #156]	; (80069f8 <HAL_RCC_OscConfig+0x820>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d144      	bne.n	80069ee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006964:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <HAL_RCC_OscConfig+0x820>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a23      	ldr	r2, [pc, #140]	; (80069f8 <HAL_RCC_OscConfig+0x820>)
 800696a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800696e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006970:	4b21      	ldr	r3, [pc, #132]	; (80069f8 <HAL_RCC_OscConfig+0x820>)
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	4a20      	ldr	r2, [pc, #128]	; (80069f8 <HAL_RCC_OscConfig+0x820>)
 8006976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800697a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800697c:	f7fc fbea 	bl	8003154 <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006984:	f7fc fbe6 	bl	8003154 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e02c      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006996:	4b18      	ldr	r3, [pc, #96]	; (80069f8 <HAL_RCC_OscConfig+0x820>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0f0      	beq.n	8006984 <HAL_RCC_OscConfig+0x7ac>
 80069a2:	e024      	b.n	80069ee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	2b0c      	cmp	r3, #12
 80069a8:	d01f      	beq.n	80069ea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069aa:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <HAL_RCC_OscConfig+0x820>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a12      	ldr	r2, [pc, #72]	; (80069f8 <HAL_RCC_OscConfig+0x820>)
 80069b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b6:	f7fc fbcd 	bl	8003154 <HAL_GetTick>
 80069ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069bc:	e008      	b.n	80069d0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069be:	f7fc fbc9 	bl	8003154 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e00f      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069d0:	4b09      	ldr	r3, [pc, #36]	; (80069f8 <HAL_RCC_OscConfig+0x820>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1f0      	bne.n	80069be <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80069dc:	4b06      	ldr	r3, [pc, #24]	; (80069f8 <HAL_RCC_OscConfig+0x820>)
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	4905      	ldr	r1, [pc, #20]	; (80069f8 <HAL_RCC_OscConfig+0x820>)
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <HAL_RCC_OscConfig+0x824>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	60cb      	str	r3, [r1, #12]
 80069e8:	e001      	b.n	80069ee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e000      	b.n	80069f0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3720      	adds	r7, #32
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	40021000 	.word	0x40021000
 80069fc:	feeefffc 	.word	0xfeeefffc

08006a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e0e7      	b.n	8006be4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a14:	4b75      	ldr	r3, [pc, #468]	; (8006bec <HAL_RCC_ClockConfig+0x1ec>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d910      	bls.n	8006a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a22:	4b72      	ldr	r3, [pc, #456]	; (8006bec <HAL_RCC_ClockConfig+0x1ec>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f023 0207 	bic.w	r2, r3, #7
 8006a2a:	4970      	ldr	r1, [pc, #448]	; (8006bec <HAL_RCC_ClockConfig+0x1ec>)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a32:	4b6e      	ldr	r3, [pc, #440]	; (8006bec <HAL_RCC_ClockConfig+0x1ec>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d001      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0cf      	b.n	8006be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d010      	beq.n	8006a72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	4b66      	ldr	r3, [pc, #408]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d908      	bls.n	8006a72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a60:	4b63      	ldr	r3, [pc, #396]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	4960      	ldr	r1, [pc, #384]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d04c      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d107      	bne.n	8006a96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a86:	4b5a      	ldr	r3, [pc, #360]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d121      	bne.n	8006ad6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e0a6      	b.n	8006be4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d107      	bne.n	8006aae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a9e:	4b54      	ldr	r3, [pc, #336]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d115      	bne.n	8006ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e09a      	b.n	8006be4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d107      	bne.n	8006ac6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ab6:	4b4e      	ldr	r3, [pc, #312]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d109      	bne.n	8006ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e08e      	b.n	8006be4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ac6:	4b4a      	ldr	r3, [pc, #296]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e086      	b.n	8006be4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ad6:	4b46      	ldr	r3, [pc, #280]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f023 0203 	bic.w	r2, r3, #3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	4943      	ldr	r1, [pc, #268]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae8:	f7fc fb34 	bl	8003154 <HAL_GetTick>
 8006aec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aee:	e00a      	b.n	8006b06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af0:	f7fc fb30 	bl	8003154 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e06e      	b.n	8006be4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b06:	4b3a      	ldr	r3, [pc, #232]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 020c 	and.w	r2, r3, #12
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d1eb      	bne.n	8006af0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d010      	beq.n	8006b46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	4b31      	ldr	r3, [pc, #196]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d208      	bcs.n	8006b46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b34:	4b2e      	ldr	r3, [pc, #184]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	492b      	ldr	r1, [pc, #172]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b46:	4b29      	ldr	r3, [pc, #164]	; (8006bec <HAL_RCC_ClockConfig+0x1ec>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0307 	and.w	r3, r3, #7
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d210      	bcs.n	8006b76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b54:	4b25      	ldr	r3, [pc, #148]	; (8006bec <HAL_RCC_ClockConfig+0x1ec>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f023 0207 	bic.w	r2, r3, #7
 8006b5c:	4923      	ldr	r1, [pc, #140]	; (8006bec <HAL_RCC_ClockConfig+0x1ec>)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b64:	4b21      	ldr	r3, [pc, #132]	; (8006bec <HAL_RCC_ClockConfig+0x1ec>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0307 	and.w	r3, r3, #7
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d001      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e036      	b.n	8006be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d008      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b82:	4b1b      	ldr	r3, [pc, #108]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	4918      	ldr	r1, [pc, #96]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0308 	and.w	r3, r3, #8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ba0:	4b13      	ldr	r3, [pc, #76]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	4910      	ldr	r1, [pc, #64]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bb4:	f000 f824 	bl	8006c00 <HAL_RCC_GetSysClockFreq>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	4b0d      	ldr	r3, [pc, #52]	; (8006bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	091b      	lsrs	r3, r3, #4
 8006bc0:	f003 030f 	and.w	r3, r3, #15
 8006bc4:	490b      	ldr	r1, [pc, #44]	; (8006bf4 <HAL_RCC_ClockConfig+0x1f4>)
 8006bc6:	5ccb      	ldrb	r3, [r1, r3]
 8006bc8:	f003 031f 	and.w	r3, r3, #31
 8006bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd0:	4a09      	ldr	r2, [pc, #36]	; (8006bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8006bd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006bd4:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <HAL_RCC_ClockConfig+0x1fc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fc f96d 	bl	8002eb8 <HAL_InitTick>
 8006bde:	4603      	mov	r3, r0
 8006be0:	72fb      	strb	r3, [r7, #11]

  return status;
 8006be2:	7afb      	ldrb	r3, [r7, #11]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	40022000 	.word	0x40022000
 8006bf0:	40021000 	.word	0x40021000
 8006bf4:	0800bf70 	.word	0x0800bf70
 8006bf8:	20000034 	.word	0x20000034
 8006bfc:	20000038 	.word	0x20000038

08006c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b089      	sub	sp, #36	; 0x24
 8006c04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c0e:	4b3e      	ldr	r3, [pc, #248]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 030c 	and.w	r3, r3, #12
 8006c16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c18:	4b3b      	ldr	r3, [pc, #236]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d005      	beq.n	8006c34 <HAL_RCC_GetSysClockFreq+0x34>
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2b0c      	cmp	r3, #12
 8006c2c:	d121      	bne.n	8006c72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d11e      	bne.n	8006c72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006c34:	4b34      	ldr	r3, [pc, #208]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0308 	and.w	r3, r3, #8
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d107      	bne.n	8006c50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006c40:	4b31      	ldr	r3, [pc, #196]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c46:	0a1b      	lsrs	r3, r3, #8
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	e005      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c50:	4b2d      	ldr	r3, [pc, #180]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	091b      	lsrs	r3, r3, #4
 8006c56:	f003 030f 	and.w	r3, r3, #15
 8006c5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006c5c:	4a2b      	ldr	r2, [pc, #172]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10d      	bne.n	8006c88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c70:	e00a      	b.n	8006c88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d102      	bne.n	8006c7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c78:	4b25      	ldr	r3, [pc, #148]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c7a:	61bb      	str	r3, [r7, #24]
 8006c7c:	e004      	b.n	8006c88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d101      	bne.n	8006c88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c84:	4b23      	ldr	r3, [pc, #140]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8006c86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2b0c      	cmp	r3, #12
 8006c8c:	d134      	bne.n	8006cf8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c8e:	4b1e      	ldr	r3, [pc, #120]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d003      	beq.n	8006ca6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d003      	beq.n	8006cac <HAL_RCC_GetSysClockFreq+0xac>
 8006ca4:	e005      	b.n	8006cb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ca6:	4b1a      	ldr	r3, [pc, #104]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ca8:	617b      	str	r3, [r7, #20]
      break;
 8006caa:	e005      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006cac:	4b19      	ldr	r3, [pc, #100]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8006cae:	617b      	str	r3, [r7, #20]
      break;
 8006cb0:	e002      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	617b      	str	r3, [r7, #20]
      break;
 8006cb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cb8:	4b13      	ldr	r3, [pc, #76]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	091b      	lsrs	r3, r3, #4
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006cc6:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	0a1b      	lsrs	r3, r3, #8
 8006ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	fb03 f202 	mul.w	r2, r3, r2
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cde:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	0e5b      	lsrs	r3, r3, #25
 8006ce4:	f003 0303 	and.w	r3, r3, #3
 8006ce8:	3301      	adds	r3, #1
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006cf8:	69bb      	ldr	r3, [r7, #24]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3724      	adds	r7, #36	; 0x24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40021000 	.word	0x40021000
 8006d0c:	0800bf88 	.word	0x0800bf88
 8006d10:	00f42400 	.word	0x00f42400
 8006d14:	007a1200 	.word	0x007a1200

08006d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d1c:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20000034 	.word	0x20000034

08006d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d34:	f7ff fff0 	bl	8006d18 <HAL_RCC_GetHCLKFreq>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	4904      	ldr	r1, [pc, #16]	; (8006d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d46:	5ccb      	ldrb	r3, [r1, r3]
 8006d48:	f003 031f 	and.w	r3, r3, #31
 8006d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40021000 	.word	0x40021000
 8006d58:	0800bf80 	.word	0x0800bf80

08006d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d60:	f7ff ffda 	bl	8006d18 <HAL_RCC_GetHCLKFreq>
 8006d64:	4602      	mov	r2, r0
 8006d66:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	0adb      	lsrs	r3, r3, #11
 8006d6c:	f003 0307 	and.w	r3, r3, #7
 8006d70:	4904      	ldr	r1, [pc, #16]	; (8006d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d72:	5ccb      	ldrb	r3, [r1, r3]
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40021000 	.word	0x40021000
 8006d84:	0800bf80 	.word	0x0800bf80

08006d88 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	220f      	movs	r2, #15
 8006d96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006d98:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <HAL_RCC_GetClockConfig+0x5c>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 0203 	and.w	r2, r3, #3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006da4:	4b0f      	ldr	r3, [pc, #60]	; (8006de4 <HAL_RCC_GetClockConfig+0x5c>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006db0:	4b0c      	ldr	r3, [pc, #48]	; (8006de4 <HAL_RCC_GetClockConfig+0x5c>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006dbc:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <HAL_RCC_GetClockConfig+0x5c>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	08db      	lsrs	r3, r3, #3
 8006dc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006dca:	4b07      	ldr	r3, [pc, #28]	; (8006de8 <HAL_RCC_GetClockConfig+0x60>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0207 	and.w	r2, r3, #7
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	601a      	str	r2, [r3, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	40021000 	.word	0x40021000
 8006de8:	40022000 	.word	0x40022000

08006dec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006df4:	2300      	movs	r3, #0
 8006df6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006df8:	4b2a      	ldr	r3, [pc, #168]	; (8006ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006e04:	f7ff f984 	bl	8006110 <HAL_PWREx_GetVoltageRange>
 8006e08:	6178      	str	r0, [r7, #20]
 8006e0a:	e014      	b.n	8006e36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e0c:	4b25      	ldr	r3, [pc, #148]	; (8006ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e10:	4a24      	ldr	r2, [pc, #144]	; (8006ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e16:	6593      	str	r3, [r2, #88]	; 0x58
 8006e18:	4b22      	ldr	r3, [pc, #136]	; (8006ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e24:	f7ff f974 	bl	8006110 <HAL_PWREx_GetVoltageRange>
 8006e28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e2a:	4b1e      	ldr	r3, [pc, #120]	; (8006ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e2e:	4a1d      	ldr	r2, [pc, #116]	; (8006ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e3c:	d10b      	bne.n	8006e56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b80      	cmp	r3, #128	; 0x80
 8006e42:	d919      	bls.n	8006e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2ba0      	cmp	r3, #160	; 0xa0
 8006e48:	d902      	bls.n	8006e50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	613b      	str	r3, [r7, #16]
 8006e4e:	e013      	b.n	8006e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e50:	2301      	movs	r3, #1
 8006e52:	613b      	str	r3, [r7, #16]
 8006e54:	e010      	b.n	8006e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b80      	cmp	r3, #128	; 0x80
 8006e5a:	d902      	bls.n	8006e62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	e00a      	b.n	8006e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b80      	cmp	r3, #128	; 0x80
 8006e66:	d102      	bne.n	8006e6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e68:	2302      	movs	r3, #2
 8006e6a:	613b      	str	r3, [r7, #16]
 8006e6c:	e004      	b.n	8006e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b70      	cmp	r3, #112	; 0x70
 8006e72:	d101      	bne.n	8006e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e74:	2301      	movs	r3, #1
 8006e76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e78:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f023 0207 	bic.w	r2, r3, #7
 8006e80:	4909      	ldr	r1, [pc, #36]	; (8006ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e88:	4b07      	ldr	r3, [pc, #28]	; (8006ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d001      	beq.n	8006e9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e000      	b.n	8006e9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	40021000 	.word	0x40021000
 8006ea8:	40022000 	.word	0x40022000

08006eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006eb8:	2300      	movs	r3, #0
 8006eba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d031      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ecc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ed0:	d01a      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006ed2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ed6:	d814      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d009      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006edc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ee0:	d10f      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006ee2:	4b5d      	ldr	r3, [pc, #372]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	4a5c      	ldr	r2, [pc, #368]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006eee:	e00c      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 f9de 	bl	80072b8 <RCCEx_PLLSAI1_Config>
 8006efc:	4603      	mov	r3, r0
 8006efe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f00:	e003      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	74fb      	strb	r3, [r7, #19]
      break;
 8006f06:	e000      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f0a:	7cfb      	ldrb	r3, [r7, #19]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10b      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f10:	4b51      	ldr	r3, [pc, #324]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1e:	494e      	ldr	r1, [pc, #312]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006f26:	e001      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f28:	7cfb      	ldrb	r3, [r7, #19]
 8006f2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 809e 	beq.w	8007076 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f3e:	4b46      	ldr	r3, [pc, #280]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00d      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f54:	4b40      	ldr	r3, [pc, #256]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f58:	4a3f      	ldr	r2, [pc, #252]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8006f60:	4b3d      	ldr	r3, [pc, #244]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f68:	60bb      	str	r3, [r7, #8]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f70:	4b3a      	ldr	r3, [pc, #232]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a39      	ldr	r2, [pc, #228]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f7c:	f7fc f8ea 	bl	8003154 <HAL_GetTick>
 8006f80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f82:	e009      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f84:	f7fc f8e6 	bl	8003154 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d902      	bls.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	74fb      	strb	r3, [r7, #19]
        break;
 8006f96:	e005      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f98:	4b30      	ldr	r3, [pc, #192]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0ef      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006fa4:	7cfb      	ldrb	r3, [r7, #19]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d15a      	bne.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006faa:	4b2b      	ldr	r3, [pc, #172]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01e      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d019      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fc6:	4b24      	ldr	r3, [pc, #144]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fd2:	4b21      	ldr	r3, [pc, #132]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd8:	4a1f      	ldr	r2, [pc, #124]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fe2:	4b1d      	ldr	r3, [pc, #116]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe8:	4a1b      	ldr	r2, [pc, #108]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ff2:	4a19      	ldr	r2, [pc, #100]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d016      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007004:	f7fc f8a6 	bl	8003154 <HAL_GetTick>
 8007008:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800700a:	e00b      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800700c:	f7fc f8a2 	bl	8003154 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	f241 3288 	movw	r2, #5000	; 0x1388
 800701a:	4293      	cmp	r3, r2
 800701c:	d902      	bls.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	74fb      	strb	r3, [r7, #19]
            break;
 8007022:	e006      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007024:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d0ec      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007032:	7cfb      	ldrb	r3, [r7, #19]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10b      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007038:	4b07      	ldr	r3, [pc, #28]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007046:	4904      	ldr	r1, [pc, #16]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007048:	4313      	orrs	r3, r2
 800704a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800704e:	e009      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007050:	7cfb      	ldrb	r3, [r7, #19]
 8007052:	74bb      	strb	r3, [r7, #18]
 8007054:	e006      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007056:	bf00      	nop
 8007058:	40021000 	.word	0x40021000
 800705c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007060:	7cfb      	ldrb	r3, [r7, #19]
 8007062:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007064:	7c7b      	ldrb	r3, [r7, #17]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d105      	bne.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800706a:	4b8a      	ldr	r3, [pc, #552]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800706c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706e:	4a89      	ldr	r2, [pc, #548]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007074:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007082:	4b84      	ldr	r3, [pc, #528]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007088:	f023 0203 	bic.w	r2, r3, #3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	4980      	ldr	r1, [pc, #512]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007092:	4313      	orrs	r3, r2
 8007094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00a      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070a4:	4b7b      	ldr	r3, [pc, #492]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070aa:	f023 020c 	bic.w	r2, r3, #12
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	4978      	ldr	r1, [pc, #480]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070c6:	4b73      	ldr	r3, [pc, #460]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	496f      	ldr	r1, [pc, #444]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00a      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070e8:	4b6a      	ldr	r3, [pc, #424]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f6:	4967      	ldr	r1, [pc, #412]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800710a:	4b62      	ldr	r3, [pc, #392]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800710c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	495e      	ldr	r1, [pc, #376]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800711a:	4313      	orrs	r3, r2
 800711c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00a      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800712c:	4b59      	ldr	r3, [pc, #356]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800712e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007132:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	4956      	ldr	r1, [pc, #344]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800713c:	4313      	orrs	r3, r2
 800713e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800714e:	4b51      	ldr	r3, [pc, #324]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715c:	494d      	ldr	r1, [pc, #308]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800715e:	4313      	orrs	r3, r2
 8007160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d028      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007170:	4b48      	ldr	r3, [pc, #288]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	4945      	ldr	r1, [pc, #276]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007180:	4313      	orrs	r3, r2
 8007182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800718e:	d106      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007190:	4b40      	ldr	r3, [pc, #256]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	4a3f      	ldr	r2, [pc, #252]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800719a:	60d3      	str	r3, [r2, #12]
 800719c:	e011      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071a6:	d10c      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3304      	adds	r3, #4
 80071ac:	2101      	movs	r1, #1
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 f882 	bl	80072b8 <RCCEx_PLLSAI1_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80071b8:	7cfb      	ldrb	r3, [r7, #19]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80071be:	7cfb      	ldrb	r3, [r7, #19]
 80071c0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d028      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071ce:	4b31      	ldr	r3, [pc, #196]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071dc:	492d      	ldr	r1, [pc, #180]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071ec:	d106      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071ee:	4b29      	ldr	r3, [pc, #164]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	4a28      	ldr	r2, [pc, #160]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071f8:	60d3      	str	r3, [r2, #12]
 80071fa:	e011      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007200:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007204:	d10c      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3304      	adds	r3, #4
 800720a:	2101      	movs	r1, #1
 800720c:	4618      	mov	r0, r3
 800720e:	f000 f853 	bl	80072b8 <RCCEx_PLLSAI1_Config>
 8007212:	4603      	mov	r3, r0
 8007214:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007216:	7cfb      	ldrb	r3, [r7, #19]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800721c:	7cfb      	ldrb	r3, [r7, #19]
 800721e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d01c      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800722c:	4b19      	ldr	r3, [pc, #100]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800722e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007232:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800723a:	4916      	ldr	r1, [pc, #88]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800723c:	4313      	orrs	r3, r2
 800723e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800724a:	d10c      	bne.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3304      	adds	r3, #4
 8007250:	2102      	movs	r1, #2
 8007252:	4618      	mov	r0, r3
 8007254:	f000 f830 	bl	80072b8 <RCCEx_PLLSAI1_Config>
 8007258:	4603      	mov	r3, r0
 800725a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800725c:	7cfb      	ldrb	r3, [r7, #19]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007262:	7cfb      	ldrb	r3, [r7, #19]
 8007264:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007272:	4b08      	ldr	r3, [pc, #32]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007278:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007280:	4904      	ldr	r1, [pc, #16]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007288:	7cbb      	ldrb	r3, [r7, #18]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	40021000 	.word	0x40021000

08007298 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800729c:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a04      	ldr	r2, [pc, #16]	; (80072b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80072a2:	f043 0304 	orr.w	r3, r3, #4
 80072a6:	6013      	str	r3, [r2, #0]
}
 80072a8:	bf00      	nop
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	40021000 	.word	0x40021000

080072b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80072c6:	4b74      	ldr	r3, [pc, #464]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d018      	beq.n	8007304 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80072d2:	4b71      	ldr	r3, [pc, #452]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f003 0203 	and.w	r2, r3, #3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d10d      	bne.n	80072fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
       ||
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d009      	beq.n	80072fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80072ea:	4b6b      	ldr	r3, [pc, #428]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	091b      	lsrs	r3, r3, #4
 80072f0:	f003 0307 	and.w	r3, r3, #7
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
       ||
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d047      	beq.n	800738e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	73fb      	strb	r3, [r7, #15]
 8007302:	e044      	b.n	800738e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b03      	cmp	r3, #3
 800730a:	d018      	beq.n	800733e <RCCEx_PLLSAI1_Config+0x86>
 800730c:	2b03      	cmp	r3, #3
 800730e:	d825      	bhi.n	800735c <RCCEx_PLLSAI1_Config+0xa4>
 8007310:	2b01      	cmp	r3, #1
 8007312:	d002      	beq.n	800731a <RCCEx_PLLSAI1_Config+0x62>
 8007314:	2b02      	cmp	r3, #2
 8007316:	d009      	beq.n	800732c <RCCEx_PLLSAI1_Config+0x74>
 8007318:	e020      	b.n	800735c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800731a:	4b5f      	ldr	r3, [pc, #380]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d11d      	bne.n	8007362 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800732a:	e01a      	b.n	8007362 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800732c:	4b5a      	ldr	r3, [pc, #360]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007334:	2b00      	cmp	r3, #0
 8007336:	d116      	bne.n	8007366 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800733c:	e013      	b.n	8007366 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800733e:	4b56      	ldr	r3, [pc, #344]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10f      	bne.n	800736a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800734a:	4b53      	ldr	r3, [pc, #332]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800735a:	e006      	b.n	800736a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	73fb      	strb	r3, [r7, #15]
      break;
 8007360:	e004      	b.n	800736c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007362:	bf00      	nop
 8007364:	e002      	b.n	800736c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007366:	bf00      	nop
 8007368:	e000      	b.n	800736c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800736a:	bf00      	nop
    }

    if(status == HAL_OK)
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10d      	bne.n	800738e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007372:	4b49      	ldr	r3, [pc, #292]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6819      	ldr	r1, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	3b01      	subs	r3, #1
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	430b      	orrs	r3, r1
 8007388:	4943      	ldr	r1, [pc, #268]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800738a:	4313      	orrs	r3, r2
 800738c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d17c      	bne.n	800748e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007394:	4b40      	ldr	r3, [pc, #256]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a3f      	ldr	r2, [pc, #252]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800739a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800739e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073a0:	f7fb fed8 	bl	8003154 <HAL_GetTick>
 80073a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073a6:	e009      	b.n	80073bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073a8:	f7fb fed4 	bl	8003154 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d902      	bls.n	80073bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	73fb      	strb	r3, [r7, #15]
        break;
 80073ba:	e005      	b.n	80073c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073bc:	4b36      	ldr	r3, [pc, #216]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1ef      	bne.n	80073a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d15f      	bne.n	800748e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d110      	bne.n	80073f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073d4:	4b30      	ldr	r3, [pc, #192]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80073dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6892      	ldr	r2, [r2, #8]
 80073e4:	0211      	lsls	r1, r2, #8
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	68d2      	ldr	r2, [r2, #12]
 80073ea:	06d2      	lsls	r2, r2, #27
 80073ec:	430a      	orrs	r2, r1
 80073ee:	492a      	ldr	r1, [pc, #168]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	610b      	str	r3, [r1, #16]
 80073f4:	e027      	b.n	8007446 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d112      	bne.n	8007422 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073fc:	4b26      	ldr	r3, [pc, #152]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007404:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6892      	ldr	r2, [r2, #8]
 800740c:	0211      	lsls	r1, r2, #8
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6912      	ldr	r2, [r2, #16]
 8007412:	0852      	lsrs	r2, r2, #1
 8007414:	3a01      	subs	r2, #1
 8007416:	0552      	lsls	r2, r2, #21
 8007418:	430a      	orrs	r2, r1
 800741a:	491f      	ldr	r1, [pc, #124]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800741c:	4313      	orrs	r3, r2
 800741e:	610b      	str	r3, [r1, #16]
 8007420:	e011      	b.n	8007446 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007422:	4b1d      	ldr	r3, [pc, #116]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800742a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6892      	ldr	r2, [r2, #8]
 8007432:	0211      	lsls	r1, r2, #8
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6952      	ldr	r2, [r2, #20]
 8007438:	0852      	lsrs	r2, r2, #1
 800743a:	3a01      	subs	r2, #1
 800743c:	0652      	lsls	r2, r2, #25
 800743e:	430a      	orrs	r2, r1
 8007440:	4915      	ldr	r1, [pc, #84]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007442:	4313      	orrs	r3, r2
 8007444:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007446:	4b14      	ldr	r3, [pc, #80]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a13      	ldr	r2, [pc, #76]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800744c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007450:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007452:	f7fb fe7f 	bl	8003154 <HAL_GetTick>
 8007456:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007458:	e009      	b.n	800746e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800745a:	f7fb fe7b 	bl	8003154 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d902      	bls.n	800746e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	73fb      	strb	r3, [r7, #15]
          break;
 800746c:	e005      	b.n	800747a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800746e:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0ef      	beq.n	800745a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d106      	bne.n	800748e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007480:	4b05      	ldr	r3, [pc, #20]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	4903      	ldr	r1, [pc, #12]	; (8007498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800748a:	4313      	orrs	r3, r2
 800748c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800748e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40021000 	.word	0x40021000

0800749c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e049      	b.n	8007542 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d106      	bne.n	80074c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fb fc54 	bl	8002d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f000 fa1e 	bl	800791c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	d001      	beq.n	8007564 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e033      	b.n	80075cc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a19      	ldr	r2, [pc, #100]	; (80075d8 <HAL_TIM_Base_Start+0x8c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d009      	beq.n	800758a <HAL_TIM_Base_Start+0x3e>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757e:	d004      	beq.n	800758a <HAL_TIM_Base_Start+0x3e>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a15      	ldr	r2, [pc, #84]	; (80075dc <HAL_TIM_Base_Start+0x90>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d115      	bne.n	80075b6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	4b13      	ldr	r3, [pc, #76]	; (80075e0 <HAL_TIM_Base_Start+0x94>)
 8007592:	4013      	ands	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b06      	cmp	r3, #6
 800759a:	d015      	beq.n	80075c8 <HAL_TIM_Base_Start+0x7c>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a2:	d011      	beq.n	80075c8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f042 0201 	orr.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b4:	e008      	b.n	80075c8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f042 0201 	orr.w	r2, r2, #1
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	e000      	b.n	80075ca <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40014000 	.word	0x40014000
 80075e0:	00010007 	.word	0x00010007

080075e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d001      	beq.n	80075fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e03b      	b.n	8007674 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0201 	orr.w	r2, r2, #1
 8007612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a19      	ldr	r2, [pc, #100]	; (8007680 <HAL_TIM_Base_Start_IT+0x9c>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_TIM_Base_Start_IT+0x4e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007626:	d004      	beq.n	8007632 <HAL_TIM_Base_Start_IT+0x4e>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a15      	ldr	r2, [pc, #84]	; (8007684 <HAL_TIM_Base_Start_IT+0xa0>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d115      	bne.n	800765e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	4b13      	ldr	r3, [pc, #76]	; (8007688 <HAL_TIM_Base_Start_IT+0xa4>)
 800763a:	4013      	ands	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b06      	cmp	r3, #6
 8007642:	d015      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x8c>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800764a:	d011      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0201 	orr.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800765c:	e008      	b.n	8007670 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f042 0201 	orr.w	r2, r2, #1
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e000      	b.n	8007672 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007670:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	40012c00 	.word	0x40012c00
 8007684:	40014000 	.word	0x40014000
 8007688:	00010007 	.word	0x00010007

0800768c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d122      	bne.n	80076e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d11b      	bne.n	80076e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f06f 0202 	mvn.w	r2, #2
 80076b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f905 	bl	80078de <HAL_TIM_IC_CaptureCallback>
 80076d4:	e005      	b.n	80076e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f8f7 	bl	80078ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f908 	bl	80078f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f003 0304 	and.w	r3, r3, #4
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	d122      	bne.n	800773c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b04      	cmp	r3, #4
 8007702:	d11b      	bne.n	800773c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f06f 0204 	mvn.w	r2, #4
 800770c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2202      	movs	r2, #2
 8007712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f8db 	bl	80078de <HAL_TIM_IC_CaptureCallback>
 8007728:	e005      	b.n	8007736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f8cd 	bl	80078ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f8de 	bl	80078f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b08      	cmp	r3, #8
 8007748:	d122      	bne.n	8007790 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f003 0308 	and.w	r3, r3, #8
 8007754:	2b08      	cmp	r3, #8
 8007756:	d11b      	bne.n	8007790 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f06f 0208 	mvn.w	r2, #8
 8007760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2204      	movs	r2, #4
 8007766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f8b1 	bl	80078de <HAL_TIM_IC_CaptureCallback>
 800777c:	e005      	b.n	800778a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f8a3 	bl	80078ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f8b4 	bl	80078f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	2b10      	cmp	r3, #16
 800779c:	d122      	bne.n	80077e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f003 0310 	and.w	r3, r3, #16
 80077a8:	2b10      	cmp	r3, #16
 80077aa:	d11b      	bne.n	80077e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f06f 0210 	mvn.w	r2, #16
 80077b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2208      	movs	r2, #8
 80077ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f887 	bl	80078de <HAL_TIM_IC_CaptureCallback>
 80077d0:	e005      	b.n	80077de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f879 	bl	80078ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f88a 	bl	80078f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d10e      	bne.n	8007810 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d107      	bne.n	8007810 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f06f 0201 	mvn.w	r2, #1
 8007808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7fb f85a 	bl	80028c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781a:	2b80      	cmp	r3, #128	; 0x80
 800781c:	d10e      	bne.n	800783c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007828:	2b80      	cmp	r3, #128	; 0x80
 800782a:	d107      	bne.n	800783c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f944 	bl	8007ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784a:	d10e      	bne.n	800786a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007856:	2b80      	cmp	r3, #128	; 0x80
 8007858:	d107      	bne.n	800786a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f937 	bl	8007ad8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007874:	2b40      	cmp	r3, #64	; 0x40
 8007876:	d10e      	bne.n	8007896 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d107      	bne.n	8007896 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800788e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f838 	bl	8007906 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f003 0320 	and.w	r3, r3, #32
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d10e      	bne.n	80078c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d107      	bne.n	80078c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f06f 0220 	mvn.w	r2, #32
 80078ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f8f7 	bl	8007ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078d2:	bf00      	nop
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
	...

0800791c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a2a      	ldr	r2, [pc, #168]	; (80079d8 <TIM_Base_SetConfig+0xbc>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d003      	beq.n	800793c <TIM_Base_SetConfig+0x20>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800793a:	d108      	bne.n	800794e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a21      	ldr	r2, [pc, #132]	; (80079d8 <TIM_Base_SetConfig+0xbc>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00b      	beq.n	800796e <TIM_Base_SetConfig+0x52>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795c:	d007      	beq.n	800796e <TIM_Base_SetConfig+0x52>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a1e      	ldr	r2, [pc, #120]	; (80079dc <TIM_Base_SetConfig+0xc0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d003      	beq.n	800796e <TIM_Base_SetConfig+0x52>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a1d      	ldr	r2, [pc, #116]	; (80079e0 <TIM_Base_SetConfig+0xc4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d108      	bne.n	8007980 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a0c      	ldr	r2, [pc, #48]	; (80079d8 <TIM_Base_SetConfig+0xbc>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d007      	beq.n	80079bc <TIM_Base_SetConfig+0xa0>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a0b      	ldr	r2, [pc, #44]	; (80079dc <TIM_Base_SetConfig+0xc0>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d003      	beq.n	80079bc <TIM_Base_SetConfig+0xa0>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a0a      	ldr	r2, [pc, #40]	; (80079e0 <TIM_Base_SetConfig+0xc4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d103      	bne.n	80079c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	615a      	str	r2, [r3, #20]
}
 80079ca:	bf00      	nop
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	40012c00 	.word	0x40012c00
 80079dc:	40014000 	.word	0x40014000
 80079e0:	40014400 	.word	0x40014400

080079e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d101      	bne.n	80079fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079f8:	2302      	movs	r3, #2
 80079fa:	e04f      	b.n	8007a9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a21      	ldr	r2, [pc, #132]	; (8007aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d108      	bne.n	8007a38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a14      	ldr	r2, [pc, #80]	; (8007aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d009      	beq.n	8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a64:	d004      	beq.n	8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a10      	ldr	r2, [pc, #64]	; (8007aac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d10c      	bne.n	8007a8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	40012c00 	.word	0x40012c00
 8007aac:	40014000 	.word	0x40014000

08007ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e040      	b.n	8007b80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7fb f968 	bl	8002de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2224      	movs	r2, #36	; 0x24
 8007b18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0201 	bic.w	r2, r2, #1
 8007b28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8c0 	bl	8007cb0 <UART_SetConfig>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d101      	bne.n	8007b3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e022      	b.n	8007b80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fae0 	bl	8008108 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689a      	ldr	r2, [r3, #8]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0201 	orr.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fb67 	bl	800824c <UART_CheckIdleState>
 8007b7e:	4603      	mov	r3, r0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08a      	sub	sp, #40	; 0x28
 8007b8c:	af02      	add	r7, sp, #8
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	603b      	str	r3, [r7, #0]
 8007b94:	4613      	mov	r3, r2
 8007b96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b9c:	2b20      	cmp	r3, #32
 8007b9e:	f040 8082 	bne.w	8007ca6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <HAL_UART_Transmit+0x26>
 8007ba8:	88fb      	ldrh	r3, [r7, #6]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e07a      	b.n	8007ca8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_UART_Transmit+0x38>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e073      	b.n	8007ca8 <HAL_UART_Transmit+0x120>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2221      	movs	r2, #33	; 0x21
 8007bd4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bd6:	f7fb fabd 	bl	8003154 <HAL_GetTick>
 8007bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	88fa      	ldrh	r2, [r7, #6]
 8007be0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	88fa      	ldrh	r2, [r7, #6]
 8007be8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf4:	d108      	bne.n	8007c08 <HAL_UART_Transmit+0x80>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d104      	bne.n	8007c08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	61bb      	str	r3, [r7, #24]
 8007c06:	e003      	b.n	8007c10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007c18:	e02d      	b.n	8007c76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2200      	movs	r2, #0
 8007c22:	2180      	movs	r1, #128	; 0x80
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 fb5a 	bl	80082de <UART_WaitOnFlagUntilTimeout>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e039      	b.n	8007ca8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10b      	bne.n	8007c52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	881a      	ldrh	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c46:	b292      	uxth	r2, r2
 8007c48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	3302      	adds	r3, #2
 8007c4e:	61bb      	str	r3, [r7, #24]
 8007c50:	e008      	b.n	8007c64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	781a      	ldrb	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	b292      	uxth	r2, r2
 8007c5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	3301      	adds	r3, #1
 8007c62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1cb      	bne.n	8007c1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2140      	movs	r1, #64	; 0x40
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 fb26 	bl	80082de <UART_WaitOnFlagUntilTimeout>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e005      	b.n	8007ca8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e000      	b.n	8007ca8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
  }
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3720      	adds	r7, #32
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cb4:	b08a      	sub	sp, #40	; 0x28
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	4bb4      	ldr	r3, [pc, #720]	; (8007fb0 <UART_SetConfig+0x300>)
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	6812      	ldr	r2, [r2, #0]
 8007ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4aa9      	ldr	r2, [pc, #676]	; (8007fb4 <UART_SetConfig+0x304>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d004      	beq.n	8007d1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4aa0      	ldr	r2, [pc, #640]	; (8007fb8 <UART_SetConfig+0x308>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d126      	bne.n	8007d88 <UART_SetConfig+0xd8>
 8007d3a:	4ba0      	ldr	r3, [pc, #640]	; (8007fbc <UART_SetConfig+0x30c>)
 8007d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d40:	f003 0303 	and.w	r3, r3, #3
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d81b      	bhi.n	8007d80 <UART_SetConfig+0xd0>
 8007d48:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <UART_SetConfig+0xa0>)
 8007d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4e:	bf00      	nop
 8007d50:	08007d61 	.word	0x08007d61
 8007d54:	08007d71 	.word	0x08007d71
 8007d58:	08007d69 	.word	0x08007d69
 8007d5c:	08007d79 	.word	0x08007d79
 8007d60:	2301      	movs	r3, #1
 8007d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d66:	e080      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d6e:	e07c      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007d70:	2304      	movs	r3, #4
 8007d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d76:	e078      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007d78:	2308      	movs	r3, #8
 8007d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d7e:	e074      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007d80:	2310      	movs	r3, #16
 8007d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d86:	e070      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a8c      	ldr	r2, [pc, #560]	; (8007fc0 <UART_SetConfig+0x310>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d138      	bne.n	8007e04 <UART_SetConfig+0x154>
 8007d92:	4b8a      	ldr	r3, [pc, #552]	; (8007fbc <UART_SetConfig+0x30c>)
 8007d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d98:	f003 030c 	and.w	r3, r3, #12
 8007d9c:	2b0c      	cmp	r3, #12
 8007d9e:	d82d      	bhi.n	8007dfc <UART_SetConfig+0x14c>
 8007da0:	a201      	add	r2, pc, #4	; (adr r2, 8007da8 <UART_SetConfig+0xf8>)
 8007da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da6:	bf00      	nop
 8007da8:	08007ddd 	.word	0x08007ddd
 8007dac:	08007dfd 	.word	0x08007dfd
 8007db0:	08007dfd 	.word	0x08007dfd
 8007db4:	08007dfd 	.word	0x08007dfd
 8007db8:	08007ded 	.word	0x08007ded
 8007dbc:	08007dfd 	.word	0x08007dfd
 8007dc0:	08007dfd 	.word	0x08007dfd
 8007dc4:	08007dfd 	.word	0x08007dfd
 8007dc8:	08007de5 	.word	0x08007de5
 8007dcc:	08007dfd 	.word	0x08007dfd
 8007dd0:	08007dfd 	.word	0x08007dfd
 8007dd4:	08007dfd 	.word	0x08007dfd
 8007dd8:	08007df5 	.word	0x08007df5
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007de2:	e042      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007de4:	2302      	movs	r3, #2
 8007de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dea:	e03e      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007dec:	2304      	movs	r3, #4
 8007dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007df2:	e03a      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007df4:	2308      	movs	r3, #8
 8007df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dfa:	e036      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e02:	e032      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a6a      	ldr	r2, [pc, #424]	; (8007fb4 <UART_SetConfig+0x304>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d12a      	bne.n	8007e64 <UART_SetConfig+0x1b4>
 8007e0e:	4b6b      	ldr	r3, [pc, #428]	; (8007fbc <UART_SetConfig+0x30c>)
 8007e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e1c:	d01a      	beq.n	8007e54 <UART_SetConfig+0x1a4>
 8007e1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e22:	d81b      	bhi.n	8007e5c <UART_SetConfig+0x1ac>
 8007e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e28:	d00c      	beq.n	8007e44 <UART_SetConfig+0x194>
 8007e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e2e:	d815      	bhi.n	8007e5c <UART_SetConfig+0x1ac>
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d003      	beq.n	8007e3c <UART_SetConfig+0x18c>
 8007e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e38:	d008      	beq.n	8007e4c <UART_SetConfig+0x19c>
 8007e3a:	e00f      	b.n	8007e5c <UART_SetConfig+0x1ac>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e42:	e012      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007e44:	2302      	movs	r3, #2
 8007e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e4a:	e00e      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007e4c:	2304      	movs	r3, #4
 8007e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e52:	e00a      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007e54:	2308      	movs	r3, #8
 8007e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e5a:	e006      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e62:	e002      	b.n	8007e6a <UART_SetConfig+0x1ba>
 8007e64:	2310      	movs	r3, #16
 8007e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a51      	ldr	r2, [pc, #324]	; (8007fb4 <UART_SetConfig+0x304>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d17a      	bne.n	8007f6a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	d824      	bhi.n	8007ec6 <UART_SetConfig+0x216>
 8007e7c:	a201      	add	r2, pc, #4	; (adr r2, 8007e84 <UART_SetConfig+0x1d4>)
 8007e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e82:	bf00      	nop
 8007e84:	08007ea9 	.word	0x08007ea9
 8007e88:	08007ec7 	.word	0x08007ec7
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007ec7 	.word	0x08007ec7
 8007e94:	08007eb7 	.word	0x08007eb7
 8007e98:	08007ec7 	.word	0x08007ec7
 8007e9c:	08007ec7 	.word	0x08007ec7
 8007ea0:	08007ec7 	.word	0x08007ec7
 8007ea4:	08007ebf 	.word	0x08007ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea8:	f7fe ff42 	bl	8006d30 <HAL_RCC_GetPCLK1Freq>
 8007eac:	61f8      	str	r0, [r7, #28]
        break;
 8007eae:	e010      	b.n	8007ed2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb0:	4b44      	ldr	r3, [pc, #272]	; (8007fc4 <UART_SetConfig+0x314>)
 8007eb2:	61fb      	str	r3, [r7, #28]
        break;
 8007eb4:	e00d      	b.n	8007ed2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eb6:	f7fe fea3 	bl	8006c00 <HAL_RCC_GetSysClockFreq>
 8007eba:	61f8      	str	r0, [r7, #28]
        break;
 8007ebc:	e009      	b.n	8007ed2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ec2:	61fb      	str	r3, [r7, #28]
        break;
 8007ec4:	e005      	b.n	8007ed2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ed0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 8107 	beq.w	80080e8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	4413      	add	r3, r2
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d305      	bcc.n	8007ef6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ef0:	69fa      	ldr	r2, [r7, #28]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d903      	bls.n	8007efe <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007efc:	e0f4      	b.n	80080e8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	2200      	movs	r2, #0
 8007f02:	461c      	mov	r4, r3
 8007f04:	4615      	mov	r5, r2
 8007f06:	f04f 0200 	mov.w	r2, #0
 8007f0a:	f04f 0300 	mov.w	r3, #0
 8007f0e:	022b      	lsls	r3, r5, #8
 8007f10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007f14:	0222      	lsls	r2, r4, #8
 8007f16:	68f9      	ldr	r1, [r7, #12]
 8007f18:	6849      	ldr	r1, [r1, #4]
 8007f1a:	0849      	lsrs	r1, r1, #1
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	4688      	mov	r8, r1
 8007f20:	4681      	mov	r9, r0
 8007f22:	eb12 0a08 	adds.w	sl, r2, r8
 8007f26:	eb43 0b09 	adc.w	fp, r3, r9
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f38:	4650      	mov	r0, sl
 8007f3a:	4659      	mov	r1, fp
 8007f3c:	f7f8 fe84 	bl	8000c48 <__aeabi_uldivmod>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4613      	mov	r3, r2
 8007f46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f4e:	d308      	bcc.n	8007f62 <UART_SetConfig+0x2b2>
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f56:	d204      	bcs.n	8007f62 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	60da      	str	r2, [r3, #12]
 8007f60:	e0c2      	b.n	80080e8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f68:	e0be      	b.n	80080e8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f72:	d16a      	bne.n	800804a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d834      	bhi.n	8007fe6 <UART_SetConfig+0x336>
 8007f7c:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <UART_SetConfig+0x2d4>)
 8007f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f82:	bf00      	nop
 8007f84:	08007fa9 	.word	0x08007fa9
 8007f88:	08007fc9 	.word	0x08007fc9
 8007f8c:	08007fd1 	.word	0x08007fd1
 8007f90:	08007fe7 	.word	0x08007fe7
 8007f94:	08007fd7 	.word	0x08007fd7
 8007f98:	08007fe7 	.word	0x08007fe7
 8007f9c:	08007fe7 	.word	0x08007fe7
 8007fa0:	08007fe7 	.word	0x08007fe7
 8007fa4:	08007fdf 	.word	0x08007fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fa8:	f7fe fec2 	bl	8006d30 <HAL_RCC_GetPCLK1Freq>
 8007fac:	61f8      	str	r0, [r7, #28]
        break;
 8007fae:	e020      	b.n	8007ff2 <UART_SetConfig+0x342>
 8007fb0:	efff69f3 	.word	0xefff69f3
 8007fb4:	40008000 	.word	0x40008000
 8007fb8:	40013800 	.word	0x40013800
 8007fbc:	40021000 	.word	0x40021000
 8007fc0:	40004400 	.word	0x40004400
 8007fc4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fc8:	f7fe fec8 	bl	8006d5c <HAL_RCC_GetPCLK2Freq>
 8007fcc:	61f8      	str	r0, [r7, #28]
        break;
 8007fce:	e010      	b.n	8007ff2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fd0:	4b4c      	ldr	r3, [pc, #304]	; (8008104 <UART_SetConfig+0x454>)
 8007fd2:	61fb      	str	r3, [r7, #28]
        break;
 8007fd4:	e00d      	b.n	8007ff2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fd6:	f7fe fe13 	bl	8006c00 <HAL_RCC_GetSysClockFreq>
 8007fda:	61f8      	str	r0, [r7, #28]
        break;
 8007fdc:	e009      	b.n	8007ff2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fe2:	61fb      	str	r3, [r7, #28]
        break;
 8007fe4:	e005      	b.n	8007ff2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d077      	beq.n	80080e8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	005a      	lsls	r2, r3, #1
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	085b      	lsrs	r3, r3, #1
 8008002:	441a      	add	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	fbb2 f3f3 	udiv	r3, r2, r3
 800800c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	2b0f      	cmp	r3, #15
 8008012:	d916      	bls.n	8008042 <UART_SetConfig+0x392>
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800801a:	d212      	bcs.n	8008042 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	b29b      	uxth	r3, r3
 8008020:	f023 030f 	bic.w	r3, r3, #15
 8008024:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	085b      	lsrs	r3, r3, #1
 800802a:	b29b      	uxth	r3, r3
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	b29a      	uxth	r2, r3
 8008032:	8afb      	ldrh	r3, [r7, #22]
 8008034:	4313      	orrs	r3, r2
 8008036:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	8afa      	ldrh	r2, [r7, #22]
 800803e:	60da      	str	r2, [r3, #12]
 8008040:	e052      	b.n	80080e8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008048:	e04e      	b.n	80080e8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800804a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800804e:	2b08      	cmp	r3, #8
 8008050:	d827      	bhi.n	80080a2 <UART_SetConfig+0x3f2>
 8008052:	a201      	add	r2, pc, #4	; (adr r2, 8008058 <UART_SetConfig+0x3a8>)
 8008054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008058:	0800807d 	.word	0x0800807d
 800805c:	08008085 	.word	0x08008085
 8008060:	0800808d 	.word	0x0800808d
 8008064:	080080a3 	.word	0x080080a3
 8008068:	08008093 	.word	0x08008093
 800806c:	080080a3 	.word	0x080080a3
 8008070:	080080a3 	.word	0x080080a3
 8008074:	080080a3 	.word	0x080080a3
 8008078:	0800809b 	.word	0x0800809b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800807c:	f7fe fe58 	bl	8006d30 <HAL_RCC_GetPCLK1Freq>
 8008080:	61f8      	str	r0, [r7, #28]
        break;
 8008082:	e014      	b.n	80080ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008084:	f7fe fe6a 	bl	8006d5c <HAL_RCC_GetPCLK2Freq>
 8008088:	61f8      	str	r0, [r7, #28]
        break;
 800808a:	e010      	b.n	80080ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800808c:	4b1d      	ldr	r3, [pc, #116]	; (8008104 <UART_SetConfig+0x454>)
 800808e:	61fb      	str	r3, [r7, #28]
        break;
 8008090:	e00d      	b.n	80080ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008092:	f7fe fdb5 	bl	8006c00 <HAL_RCC_GetSysClockFreq>
 8008096:	61f8      	str	r0, [r7, #28]
        break;
 8008098:	e009      	b.n	80080ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800809a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800809e:	61fb      	str	r3, [r7, #28]
        break;
 80080a0:	e005      	b.n	80080ae <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80080ac:	bf00      	nop
    }

    if (pclk != 0U)
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d019      	beq.n	80080e8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	085a      	lsrs	r2, r3, #1
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	441a      	add	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	2b0f      	cmp	r3, #15
 80080cc:	d909      	bls.n	80080e2 <UART_SetConfig+0x432>
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d4:	d205      	bcs.n	80080e2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60da      	str	r2, [r3, #12]
 80080e0:	e002      	b.n	80080e8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80080f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3728      	adds	r7, #40	; 0x28
 80080fc:	46bd      	mov	sp, r7
 80080fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008102:	bf00      	nop
 8008104:	00f42400 	.word	0x00f42400

08008108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	430a      	orrs	r2, r1
 8008152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	f003 0304 	and.w	r3, r3, #4
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00a      	beq.n	8008176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	430a      	orrs	r2, r1
 8008196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	f003 0310 	and.w	r3, r3, #16
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00a      	beq.n	80081ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081be:	f003 0320 	and.w	r3, r3, #32
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01a      	beq.n	800821e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008206:	d10a      	bne.n	800821e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00a      	beq.n	8008240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	605a      	str	r2, [r3, #4]
  }
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af02      	add	r7, sp, #8
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800825c:	f7fa ff7a 	bl	8003154 <HAL_GetTick>
 8008260:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0308 	and.w	r3, r3, #8
 800826c:	2b08      	cmp	r3, #8
 800826e:	d10e      	bne.n	800828e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f82d 	bl	80082de <UART_WaitOnFlagUntilTimeout>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e023      	b.n	80082d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b04      	cmp	r3, #4
 800829a:	d10e      	bne.n	80082ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800829c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f817 	bl	80082de <UART_WaitOnFlagUntilTimeout>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e00d      	b.n	80082d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2220      	movs	r2, #32
 80082be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b09c      	sub	sp, #112	; 0x70
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	603b      	str	r3, [r7, #0]
 80082ea:	4613      	mov	r3, r2
 80082ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082ee:	e0a5      	b.n	800843c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	f000 80a1 	beq.w	800843c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082fa:	f7fa ff2b 	bl	8003154 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008306:	429a      	cmp	r2, r3
 8008308:	d302      	bcc.n	8008310 <UART_WaitOnFlagUntilTimeout+0x32>
 800830a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800830c:	2b00      	cmp	r3, #0
 800830e:	d13e      	bne.n	800838e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800831e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008320:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008324:	667b      	str	r3, [r7, #100]	; 0x64
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800832e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008330:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800833c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e6      	bne.n	8008310 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3308      	adds	r3, #8
 8008348:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	f023 0301 	bic.w	r3, r3, #1
 8008358:	663b      	str	r3, [r7, #96]	; 0x60
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3308      	adds	r3, #8
 8008360:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008362:	64ba      	str	r2, [r7, #72]	; 0x48
 8008364:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e5      	bne.n	8008342 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2220      	movs	r2, #32
 800837a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2220      	movs	r2, #32
 8008380:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e067      	b.n	800845e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d04f      	beq.n	800843c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083aa:	d147      	bne.n	800843c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	461a      	mov	r2, r3
 80083d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d4:	637b      	str	r3, [r7, #52]	; 0x34
 80083d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083dc:	e841 2300 	strex	r3, r2, [r1]
 80083e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1e6      	bne.n	80083b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3308      	adds	r3, #8
 80083ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	613b      	str	r3, [r7, #16]
   return(result);
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f023 0301 	bic.w	r3, r3, #1
 80083fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3308      	adds	r3, #8
 8008406:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008408:	623a      	str	r2, [r7, #32]
 800840a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	69f9      	ldr	r1, [r7, #28]
 800840e:	6a3a      	ldr	r2, [r7, #32]
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	61bb      	str	r3, [r7, #24]
   return(result);
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e5      	bne.n	80083e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2220      	movs	r2, #32
 8008420:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2220      	movs	r2, #32
 8008426:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2220      	movs	r2, #32
 800842c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e010      	b.n	800845e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	69da      	ldr	r2, [r3, #28]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	4013      	ands	r3, r2
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	429a      	cmp	r2, r3
 800844a:	bf0c      	ite	eq
 800844c:	2301      	moveq	r3, #1
 800844e:	2300      	movne	r3, #0
 8008450:	b2db      	uxtb	r3, r3
 8008452:	461a      	mov	r2, r3
 8008454:	79fb      	ldrb	r3, [r7, #7]
 8008456:	429a      	cmp	r2, r3
 8008458:	f43f af4a 	beq.w	80082f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3770      	adds	r7, #112	; 0x70
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800846c:	4b05      	ldr	r3, [pc, #20]	; (8008484 <SysTick_Handler+0x1c>)
 800846e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008470:	f000 ff26 	bl	80092c0 <xTaskGetSchedulerState>
 8008474:	4603      	mov	r3, r0
 8008476:	2b01      	cmp	r3, #1
 8008478:	d001      	beq.n	800847e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800847a:	f001 f8a5 	bl	80095c8 <xPortSysTickHandler>
  }
}
 800847e:	bf00      	nop
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	e000e010 	.word	0xe000e010

08008488 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008494:	2300      	movs	r3, #0
 8008496:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d103      	bne.n	80084a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800849e:	f06f 0303 	mvn.w	r3, #3
 80084a2:	617b      	str	r3, [r7, #20]
 80084a4:	e02c      	b.n	8008500 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084a6:	f3ef 8305 	mrs	r3, IPSR
 80084aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80084ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01a      	beq.n	80084e8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80084b6:	f107 0308 	add.w	r3, r7, #8
 80084ba:	4619      	mov	r1, r3
 80084bc:	6938      	ldr	r0, [r7, #16]
 80084be:	f000 faa8 	bl	8008a12 <xQueueGiveFromISR>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d003      	beq.n	80084d0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80084c8:	f06f 0302 	mvn.w	r3, #2
 80084cc:	617b      	str	r3, [r7, #20]
 80084ce:	e017      	b.n	8008500 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d014      	beq.n	8008500 <osSemaphoreRelease+0x78>
 80084d6:	4b0d      	ldr	r3, [pc, #52]	; (800850c <osSemaphoreRelease+0x84>)
 80084d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	e00b      	b.n	8008500 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80084e8:	2300      	movs	r3, #0
 80084ea:	2200      	movs	r2, #0
 80084ec:	2100      	movs	r1, #0
 80084ee:	6938      	ldr	r0, [r7, #16]
 80084f0:	f000 f8f6 	bl	80086e0 <xQueueGenericSend>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d002      	beq.n	8008500 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80084fa:	f06f 0302 	mvn.w	r3, #2
 80084fe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008500:	697b      	ldr	r3, [r7, #20]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	e000ed04 	.word	0xe000ed04

08008510 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	4613      	mov	r3, r2
 800851e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008524:	2300      	movs	r3, #0
 8008526:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008528:	f3ef 8305 	mrs	r3, IPSR
 800852c:	617b      	str	r3, [r7, #20]
  return(result);
 800852e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008530:	2b00      	cmp	r3, #0
 8008532:	d028      	beq.n	8008586 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d005      	beq.n	8008546 <osMessageQueuePut+0x36>
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <osMessageQueuePut+0x36>
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008546:	f06f 0303 	mvn.w	r3, #3
 800854a:	61fb      	str	r3, [r7, #28]
 800854c:	e038      	b.n	80085c0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800854e:	2300      	movs	r3, #0
 8008550:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008552:	f107 0210 	add.w	r2, r7, #16
 8008556:	2300      	movs	r3, #0
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	69b8      	ldr	r0, [r7, #24]
 800855c:	f000 f9be 	bl	80088dc <xQueueGenericSendFromISR>
 8008560:	4603      	mov	r3, r0
 8008562:	2b01      	cmp	r3, #1
 8008564:	d003      	beq.n	800856e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008566:	f06f 0302 	mvn.w	r3, #2
 800856a:	61fb      	str	r3, [r7, #28]
 800856c:	e028      	b.n	80085c0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d025      	beq.n	80085c0 <osMessageQueuePut+0xb0>
 8008574:	4b15      	ldr	r3, [pc, #84]	; (80085cc <osMessageQueuePut+0xbc>)
 8008576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	e01c      	b.n	80085c0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <osMessageQueuePut+0x82>
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d103      	bne.n	800859a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008592:	f06f 0303 	mvn.w	r3, #3
 8008596:	61fb      	str	r3, [r7, #28]
 8008598:	e012      	b.n	80085c0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800859a:	2300      	movs	r3, #0
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	68b9      	ldr	r1, [r7, #8]
 80085a0:	69b8      	ldr	r0, [r7, #24]
 80085a2:	f000 f89d 	bl	80086e0 <xQueueGenericSend>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d009      	beq.n	80085c0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80085b2:	f06f 0301 	mvn.w	r3, #1
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	e002      	b.n	80085c0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80085ba:	f06f 0302 	mvn.w	r3, #2
 80085be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80085c0:	69fb      	ldr	r3, [r7, #28]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3720      	adds	r7, #32
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	e000ed04 	.word	0xe000ed04

080085d0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	689a      	ldr	r2, [r3, #8]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	601a      	str	r2, [r3, #0]
}
 800860c:	bf00      	nop
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862e:	d103      	bne.n	8008638 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	60fb      	str	r3, [r7, #12]
 8008636:	e00c      	b.n	8008652 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3308      	adds	r3, #8
 800863c:	60fb      	str	r3, [r7, #12]
 800863e:	e002      	b.n	8008646 <vListInsert+0x2e>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	60fb      	str	r3, [r7, #12]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	429a      	cmp	r2, r3
 8008650:	d2f6      	bcs.n	8008640 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	601a      	str	r2, [r3, #0]
}
 800867e:	bf00      	nop
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800868a:	b480      	push	{r7}
 800868c:	b085      	sub	sp, #20
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	6892      	ldr	r2, [r2, #8]
 80086a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	6852      	ldr	r2, [r2, #4]
 80086aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d103      	bne.n	80086be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689a      	ldr	r2, [r3, #8]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	1e5a      	subs	r2, r3, #1
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
	...

080086e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08e      	sub	sp, #56	; 0x38
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80086ee:	2300      	movs	r3, #0
 80086f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10a      	bne.n	8008712 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800870e:	bf00      	nop
 8008710:	e7fe      	b.n	8008710 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d103      	bne.n	8008720 <xQueueGenericSend+0x40>
 8008718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <xQueueGenericSend+0x44>
 8008720:	2301      	movs	r3, #1
 8008722:	e000      	b.n	8008726 <xQueueGenericSend+0x46>
 8008724:	2300      	movs	r3, #0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10a      	bne.n	8008740 <xQueueGenericSend+0x60>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800873c:	bf00      	nop
 800873e:	e7fe      	b.n	800873e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	2b02      	cmp	r3, #2
 8008744:	d103      	bne.n	800874e <xQueueGenericSend+0x6e>
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874a:	2b01      	cmp	r3, #1
 800874c:	d101      	bne.n	8008752 <xQueueGenericSend+0x72>
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <xQueueGenericSend+0x74>
 8008752:	2300      	movs	r3, #0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10a      	bne.n	800876e <xQueueGenericSend+0x8e>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	623b      	str	r3, [r7, #32]
}
 800876a:	bf00      	nop
 800876c:	e7fe      	b.n	800876c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800876e:	f000 fda7 	bl	80092c0 <xTaskGetSchedulerState>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d102      	bne.n	800877e <xQueueGenericSend+0x9e>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <xQueueGenericSend+0xa2>
 800877e:	2301      	movs	r3, #1
 8008780:	e000      	b.n	8008784 <xQueueGenericSend+0xa4>
 8008782:	2300      	movs	r3, #0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10a      	bne.n	800879e <xQueueGenericSend+0xbe>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	61fb      	str	r3, [r7, #28]
}
 800879a:	bf00      	nop
 800879c:	e7fe      	b.n	800879c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800879e:	f000 fe83 	bl	80094a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d302      	bcc.n	80087b4 <xQueueGenericSend+0xd4>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d129      	bne.n	8008808 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	68b9      	ldr	r1, [r7, #8]
 80087b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087ba:	f000 f9b7 	bl	8008b2c <prvCopyDataToQueue>
 80087be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d010      	beq.n	80087ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ca:	3324      	adds	r3, #36	; 0x24
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fc6f 	bl	80090b0 <xTaskRemoveFromEventList>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d013      	beq.n	8008800 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80087d8:	4b3f      	ldr	r3, [pc, #252]	; (80088d8 <xQueueGenericSend+0x1f8>)
 80087da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	e00a      	b.n	8008800 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80087ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d007      	beq.n	8008800 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80087f0:	4b39      	ldr	r3, [pc, #228]	; (80088d8 <xQueueGenericSend+0x1f8>)
 80087f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008800:	f000 fe82 	bl	8009508 <vPortExitCritical>
				return pdPASS;
 8008804:	2301      	movs	r3, #1
 8008806:	e063      	b.n	80088d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d103      	bne.n	8008816 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800880e:	f000 fe7b 	bl	8009508 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008812:	2300      	movs	r3, #0
 8008814:	e05c      	b.n	80088d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008818:	2b00      	cmp	r3, #0
 800881a:	d106      	bne.n	800882a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800881c:	f107 0314 	add.w	r3, r7, #20
 8008820:	4618      	mov	r0, r3
 8008822:	f000 fca9 	bl	8009178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008826:	2301      	movs	r3, #1
 8008828:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800882a:	f000 fe6d 	bl	8009508 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800882e:	f000 fa51 	bl	8008cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008832:	f000 fe39 	bl	80094a8 <vPortEnterCritical>
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800883c:	b25b      	sxtb	r3, r3
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d103      	bne.n	800884c <xQueueGenericSend+0x16c>
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008852:	b25b      	sxtb	r3, r3
 8008854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008858:	d103      	bne.n	8008862 <xQueueGenericSend+0x182>
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008862:	f000 fe51 	bl	8009508 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008866:	1d3a      	adds	r2, r7, #4
 8008868:	f107 0314 	add.w	r3, r7, #20
 800886c:	4611      	mov	r1, r2
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fc98 	bl	80091a4 <xTaskCheckForTimeOut>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d124      	bne.n	80088c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800887a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800887c:	f000 fa12 	bl	8008ca4 <prvIsQueueFull>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d018      	beq.n	80088b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	3310      	adds	r3, #16
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	4611      	mov	r1, r2
 800888e:	4618      	mov	r0, r3
 8008890:	f000 fbea 	bl	8009068 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008896:	f000 f9b3 	bl	8008c00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800889a:	f000 fa29 	bl	8008cf0 <xTaskResumeAll>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f47f af7c 	bne.w	800879e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80088a6:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <xQueueGenericSend+0x1f8>)
 80088a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	e772      	b.n	800879e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80088b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088ba:	f000 f9a1 	bl	8008c00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088be:	f000 fa17 	bl	8008cf0 <xTaskResumeAll>
 80088c2:	e76c      	b.n	800879e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80088c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088c6:	f000 f99b 	bl	8008c00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088ca:	f000 fa11 	bl	8008cf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80088ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3738      	adds	r7, #56	; 0x38
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	e000ed04 	.word	0xe000ed04

080088dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b090      	sub	sp, #64	; 0x40
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10a      	bne.n	800890a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008906:	bf00      	nop
 8008908:	e7fe      	b.n	8008908 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d103      	bne.n	8008918 <xQueueGenericSendFromISR+0x3c>
 8008910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <xQueueGenericSendFromISR+0x40>
 8008918:	2301      	movs	r3, #1
 800891a:	e000      	b.n	800891e <xQueueGenericSendFromISR+0x42>
 800891c:	2300      	movs	r3, #0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10a      	bne.n	8008938 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008934:	bf00      	nop
 8008936:	e7fe      	b.n	8008936 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	2b02      	cmp	r3, #2
 800893c:	d103      	bne.n	8008946 <xQueueGenericSendFromISR+0x6a>
 800893e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008942:	2b01      	cmp	r3, #1
 8008944:	d101      	bne.n	800894a <xQueueGenericSendFromISR+0x6e>
 8008946:	2301      	movs	r3, #1
 8008948:	e000      	b.n	800894c <xQueueGenericSendFromISR+0x70>
 800894a:	2300      	movs	r3, #0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	623b      	str	r3, [r7, #32]
}
 8008962:	bf00      	nop
 8008964:	e7fe      	b.n	8008964 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008966:	f000 fe51 	bl	800960c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800896a:	f3ef 8211 	mrs	r2, BASEPRI
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	61fa      	str	r2, [r7, #28]
 8008980:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008982:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008984:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898e:	429a      	cmp	r2, r3
 8008990:	d302      	bcc.n	8008998 <xQueueGenericSendFromISR+0xbc>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d12f      	bne.n	80089f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800899e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	68b9      	ldr	r1, [r7, #8]
 80089ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089ae:	f000 f8bd 	bl	8008b2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80089b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ba:	d112      	bne.n	80089e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d016      	beq.n	80089f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c6:	3324      	adds	r3, #36	; 0x24
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 fb71 	bl	80090b0 <xTaskRemoveFromEventList>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00e      	beq.n	80089f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00b      	beq.n	80089f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	e007      	b.n	80089f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089e6:	3301      	adds	r3, #1
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	b25a      	sxtb	r2, r3
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80089f2:	2301      	movs	r3, #1
 80089f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80089f6:	e001      	b.n	80089fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3740      	adds	r7, #64	; 0x40
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b08e      	sub	sp, #56	; 0x38
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10a      	bne.n	8008a3c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	623b      	str	r3, [r7, #32]
}
 8008a38:	bf00      	nop
 8008a3a:	e7fe      	b.n	8008a3a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00a      	beq.n	8008a5a <xQueueGiveFromISR+0x48>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	61fb      	str	r3, [r7, #28]
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d103      	bne.n	8008a6a <xQueueGiveFromISR+0x58>
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <xQueueGiveFromISR+0x5c>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e000      	b.n	8008a70 <xQueueGiveFromISR+0x5e>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10a      	bne.n	8008a8a <xQueueGiveFromISR+0x78>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	61bb      	str	r3, [r7, #24]
}
 8008a86:	bf00      	nop
 8008a88:	e7fe      	b.n	8008a88 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a8a:	f000 fdbf 	bl	800960c <vPortValidateInterruptPriority>
	__asm volatile
 8008a8e:	f3ef 8211 	mrs	r2, BASEPRI
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	617a      	str	r2, [r7, #20]
 8008aa4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008aa6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d22b      	bcs.n	8008b12 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008acc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad4:	d112      	bne.n	8008afc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d016      	beq.n	8008b0c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	3324      	adds	r3, #36	; 0x24
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 fae4 	bl	80090b0 <xTaskRemoveFromEventList>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00e      	beq.n	8008b0c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00b      	beq.n	8008b0c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2201      	movs	r2, #1
 8008af8:	601a      	str	r2, [r3, #0]
 8008afa:	e007      	b.n	8008b0c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b00:	3301      	adds	r3, #1
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	b25a      	sxtb	r2, r3
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008b10:	e001      	b.n	8008b16 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b12:	2300      	movs	r3, #0
 8008b14:	637b      	str	r3, [r7, #52]	; 0x34
 8008b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b18:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f383 8811 	msr	BASEPRI, r3
}
 8008b20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3738      	adds	r7, #56	; 0x38
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10d      	bne.n	8008b66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d14d      	bne.n	8008bee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 fbd0 	bl	80092fc <xTaskPriorityDisinherit>
 8008b5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	609a      	str	r2, [r3, #8]
 8008b64:	e043      	b.n	8008bee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d119      	bne.n	8008ba0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6858      	ldr	r0, [r3, #4]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	461a      	mov	r2, r3
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	f000 fdb4 	bl	80096e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b84:	441a      	add	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d32b      	bcc.n	8008bee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	605a      	str	r2, [r3, #4]
 8008b9e:	e026      	b.n	8008bee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	68d8      	ldr	r0, [r3, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba8:	461a      	mov	r2, r3
 8008baa:	68b9      	ldr	r1, [r7, #8]
 8008bac:	f000 fd9a 	bl	80096e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb8:	425b      	negs	r3, r3
 8008bba:	441a      	add	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d207      	bcs.n	8008bdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	689a      	ldr	r2, [r3, #8]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd4:	425b      	negs	r3, r3
 8008bd6:	441a      	add	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d105      	bne.n	8008bee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008bf6:	697b      	ldr	r3, [r7, #20]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c08:	f000 fc4e 	bl	80094a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c14:	e011      	b.n	8008c3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d012      	beq.n	8008c44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	3324      	adds	r3, #36	; 0x24
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fa44 	bl	80090b0 <xTaskRemoveFromEventList>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c2e:	f000 fb1b 	bl	8009268 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	3b01      	subs	r3, #1
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dce9      	bgt.n	8008c16 <prvUnlockQueue+0x16>
 8008c42:	e000      	b.n	8008c46 <prvUnlockQueue+0x46>
					break;
 8008c44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	22ff      	movs	r2, #255	; 0xff
 8008c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c4e:	f000 fc5b 	bl	8009508 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c52:	f000 fc29 	bl	80094a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c5e:	e011      	b.n	8008c84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d012      	beq.n	8008c8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3310      	adds	r3, #16
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 fa1f 	bl	80090b0 <xTaskRemoveFromEventList>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c78:	f000 faf6 	bl	8009268 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dce9      	bgt.n	8008c60 <prvUnlockQueue+0x60>
 8008c8c:	e000      	b.n	8008c90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	22ff      	movs	r2, #255	; 0xff
 8008c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c98:	f000 fc36 	bl	8009508 <vPortExitCritical>
}
 8008c9c:	bf00      	nop
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cac:	f000 fbfc 	bl	80094a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d102      	bne.n	8008cc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	e001      	b.n	8008cc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cc6:	f000 fc1f 	bl	8009508 <vPortExitCritical>

	return xReturn;
 8008cca:	68fb      	ldr	r3, [r7, #12]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008cd8:	4b04      	ldr	r3, [pc, #16]	; (8008cec <vTaskSuspendAll+0x18>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	4a03      	ldr	r2, [pc, #12]	; (8008cec <vTaskSuspendAll+0x18>)
 8008ce0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ce2:	bf00      	nop
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	20000b2c 	.word	0x20000b2c

08008cf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008cfe:	4b42      	ldr	r3, [pc, #264]	; (8008e08 <xTaskResumeAll+0x118>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10a      	bne.n	8008d1c <xTaskResumeAll+0x2c>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	603b      	str	r3, [r7, #0]
}
 8008d18:	bf00      	nop
 8008d1a:	e7fe      	b.n	8008d1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d1c:	f000 fbc4 	bl	80094a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d20:	4b39      	ldr	r3, [pc, #228]	; (8008e08 <xTaskResumeAll+0x118>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3b01      	subs	r3, #1
 8008d26:	4a38      	ldr	r2, [pc, #224]	; (8008e08 <xTaskResumeAll+0x118>)
 8008d28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d2a:	4b37      	ldr	r3, [pc, #220]	; (8008e08 <xTaskResumeAll+0x118>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d162      	bne.n	8008df8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d32:	4b36      	ldr	r3, [pc, #216]	; (8008e0c <xTaskResumeAll+0x11c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d05e      	beq.n	8008df8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d3a:	e02f      	b.n	8008d9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d3c:	4b34      	ldr	r3, [pc, #208]	; (8008e10 <xTaskResumeAll+0x120>)
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	3318      	adds	r3, #24
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7ff fc9e 	bl	800868a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7ff fc99 	bl	800868a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5c:	4b2d      	ldr	r3, [pc, #180]	; (8008e14 <xTaskResumeAll+0x124>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d903      	bls.n	8008d6c <xTaskResumeAll+0x7c>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d68:	4a2a      	ldr	r2, [pc, #168]	; (8008e14 <xTaskResumeAll+0x124>)
 8008d6a:	6013      	str	r3, [r2, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d70:	4613      	mov	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4a27      	ldr	r2, [pc, #156]	; (8008e18 <xTaskResumeAll+0x128>)
 8008d7a:	441a      	add	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3304      	adds	r3, #4
 8008d80:	4619      	mov	r1, r3
 8008d82:	4610      	mov	r0, r2
 8008d84:	f7ff fc24 	bl	80085d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8c:	4b23      	ldr	r3, [pc, #140]	; (8008e1c <xTaskResumeAll+0x12c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d302      	bcc.n	8008d9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008d96:	4b22      	ldr	r3, [pc, #136]	; (8008e20 <xTaskResumeAll+0x130>)
 8008d98:	2201      	movs	r2, #1
 8008d9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d9c:	4b1c      	ldr	r3, [pc, #112]	; (8008e10 <xTaskResumeAll+0x120>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1cb      	bne.n	8008d3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008daa:	f000 fa69 	bl	8009280 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008dae:	4b1d      	ldr	r3, [pc, #116]	; (8008e24 <xTaskResumeAll+0x134>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d010      	beq.n	8008ddc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008dba:	f000 f837 	bl	8008e2c <xTaskIncrementTick>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d002      	beq.n	8008dca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008dc4:	4b16      	ldr	r3, [pc, #88]	; (8008e20 <xTaskResumeAll+0x130>)
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1f1      	bne.n	8008dba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008dd6:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <xTaskResumeAll+0x134>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ddc:	4b10      	ldr	r3, [pc, #64]	; (8008e20 <xTaskResumeAll+0x130>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d009      	beq.n	8008df8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008de4:	2301      	movs	r3, #1
 8008de6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008de8:	4b0f      	ldr	r3, [pc, #60]	; (8008e28 <xTaskResumeAll+0x138>)
 8008dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008df8:	f000 fb86 	bl	8009508 <vPortExitCritical>

	return xAlreadyYielded;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	20000b2c 	.word	0x20000b2c
 8008e0c:	20000b0c 	.word	0x20000b0c
 8008e10:	20000ae4 	.word	0x20000ae4
 8008e14:	20000b14 	.word	0x20000b14
 8008e18:	2000067c 	.word	0x2000067c
 8008e1c:	20000678 	.word	0x20000678
 8008e20:	20000b20 	.word	0x20000b20
 8008e24:	20000b1c 	.word	0x20000b1c
 8008e28:	e000ed04 	.word	0xe000ed04

08008e2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e32:	2300      	movs	r3, #0
 8008e34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e36:	4b4f      	ldr	r3, [pc, #316]	; (8008f74 <xTaskIncrementTick+0x148>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f040 808f 	bne.w	8008f5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e40:	4b4d      	ldr	r3, [pc, #308]	; (8008f78 <xTaskIncrementTick+0x14c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3301      	adds	r3, #1
 8008e46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e48:	4a4b      	ldr	r2, [pc, #300]	; (8008f78 <xTaskIncrementTick+0x14c>)
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d120      	bne.n	8008e96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e54:	4b49      	ldr	r3, [pc, #292]	; (8008f7c <xTaskIncrementTick+0x150>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <xTaskIncrementTick+0x48>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	603b      	str	r3, [r7, #0]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <xTaskIncrementTick+0x46>
 8008e74:	4b41      	ldr	r3, [pc, #260]	; (8008f7c <xTaskIncrementTick+0x150>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	4b41      	ldr	r3, [pc, #260]	; (8008f80 <xTaskIncrementTick+0x154>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a3f      	ldr	r2, [pc, #252]	; (8008f7c <xTaskIncrementTick+0x150>)
 8008e80:	6013      	str	r3, [r2, #0]
 8008e82:	4a3f      	ldr	r2, [pc, #252]	; (8008f80 <xTaskIncrementTick+0x154>)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6013      	str	r3, [r2, #0]
 8008e88:	4b3e      	ldr	r3, [pc, #248]	; (8008f84 <xTaskIncrementTick+0x158>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	4a3d      	ldr	r2, [pc, #244]	; (8008f84 <xTaskIncrementTick+0x158>)
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	f000 f9f5 	bl	8009280 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e96:	4b3c      	ldr	r3, [pc, #240]	; (8008f88 <xTaskIncrementTick+0x15c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d349      	bcc.n	8008f34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ea0:	4b36      	ldr	r3, [pc, #216]	; (8008f7c <xTaskIncrementTick+0x150>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d104      	bne.n	8008eb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eaa:	4b37      	ldr	r3, [pc, #220]	; (8008f88 <xTaskIncrementTick+0x15c>)
 8008eac:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb0:	601a      	str	r2, [r3, #0]
					break;
 8008eb2:	e03f      	b.n	8008f34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb4:	4b31      	ldr	r3, [pc, #196]	; (8008f7c <xTaskIncrementTick+0x150>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d203      	bcs.n	8008ed4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ecc:	4a2e      	ldr	r2, [pc, #184]	; (8008f88 <xTaskIncrementTick+0x15c>)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ed2:	e02f      	b.n	8008f34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff fbd6 	bl	800868a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d004      	beq.n	8008ef0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	3318      	adds	r3, #24
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7ff fbcd 	bl	800868a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef4:	4b25      	ldr	r3, [pc, #148]	; (8008f8c <xTaskIncrementTick+0x160>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d903      	bls.n	8008f04 <xTaskIncrementTick+0xd8>
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f00:	4a22      	ldr	r2, [pc, #136]	; (8008f8c <xTaskIncrementTick+0x160>)
 8008f02:	6013      	str	r3, [r2, #0]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f08:	4613      	mov	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4a1f      	ldr	r2, [pc, #124]	; (8008f90 <xTaskIncrementTick+0x164>)
 8008f12:	441a      	add	r2, r3
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	3304      	adds	r3, #4
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	f7ff fb58 	bl	80085d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f24:	4b1b      	ldr	r3, [pc, #108]	; (8008f94 <xTaskIncrementTick+0x168>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d3b8      	bcc.n	8008ea0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f32:	e7b5      	b.n	8008ea0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f34:	4b17      	ldr	r3, [pc, #92]	; (8008f94 <xTaskIncrementTick+0x168>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3a:	4915      	ldr	r1, [pc, #84]	; (8008f90 <xTaskIncrementTick+0x164>)
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	440b      	add	r3, r1
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d901      	bls.n	8008f50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f50:	4b11      	ldr	r3, [pc, #68]	; (8008f98 <xTaskIncrementTick+0x16c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d007      	beq.n	8008f68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	e004      	b.n	8008f68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f5e:	4b0f      	ldr	r3, [pc, #60]	; (8008f9c <xTaskIncrementTick+0x170>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3301      	adds	r3, #1
 8008f64:	4a0d      	ldr	r2, [pc, #52]	; (8008f9c <xTaskIncrementTick+0x170>)
 8008f66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f68:	697b      	ldr	r3, [r7, #20]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20000b2c 	.word	0x20000b2c
 8008f78:	20000b10 	.word	0x20000b10
 8008f7c:	20000adc 	.word	0x20000adc
 8008f80:	20000ae0 	.word	0x20000ae0
 8008f84:	20000b24 	.word	0x20000b24
 8008f88:	20000b28 	.word	0x20000b28
 8008f8c:	20000b14 	.word	0x20000b14
 8008f90:	2000067c 	.word	0x2000067c
 8008f94:	20000678 	.word	0x20000678
 8008f98:	20000b20 	.word	0x20000b20
 8008f9c:	20000b1c 	.word	0x20000b1c

08008fa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fa6:	4b2a      	ldr	r3, [pc, #168]	; (8009050 <vTaskSwitchContext+0xb0>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008fae:	4b29      	ldr	r3, [pc, #164]	; (8009054 <vTaskSwitchContext+0xb4>)
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008fb4:	e046      	b.n	8009044 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008fb6:	4b27      	ldr	r3, [pc, #156]	; (8009054 <vTaskSwitchContext+0xb4>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fbc:	4b26      	ldr	r3, [pc, #152]	; (8009058 <vTaskSwitchContext+0xb8>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	e010      	b.n	8008fe6 <vTaskSwitchContext+0x46>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <vTaskSwitchContext+0x40>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	607b      	str	r3, [r7, #4]
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <vTaskSwitchContext+0x3e>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	491d      	ldr	r1, [pc, #116]	; (800905c <vTaskSwitchContext+0xbc>)
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4613      	mov	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	440b      	add	r3, r1
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0e4      	beq.n	8008fc4 <vTaskSwitchContext+0x24>
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4a15      	ldr	r2, [pc, #84]	; (800905c <vTaskSwitchContext+0xbc>)
 8009006:	4413      	add	r3, r2
 8009008:	60bb      	str	r3, [r7, #8]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	605a      	str	r2, [r3, #4]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	3308      	adds	r3, #8
 800901c:	429a      	cmp	r2, r3
 800901e:	d104      	bne.n	800902a <vTaskSwitchContext+0x8a>
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	605a      	str	r2, [r3, #4]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	4a0b      	ldr	r2, [pc, #44]	; (8009060 <vTaskSwitchContext+0xc0>)
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	4a08      	ldr	r2, [pc, #32]	; (8009058 <vTaskSwitchContext+0xb8>)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800903a:	4b09      	ldr	r3, [pc, #36]	; (8009060 <vTaskSwitchContext+0xc0>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3354      	adds	r3, #84	; 0x54
 8009040:	4a08      	ldr	r2, [pc, #32]	; (8009064 <vTaskSwitchContext+0xc4>)
 8009042:	6013      	str	r3, [r2, #0]
}
 8009044:	bf00      	nop
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	20000b2c 	.word	0x20000b2c
 8009054:	20000b20 	.word	0x20000b20
 8009058:	20000b14 	.word	0x20000b14
 800905c:	2000067c 	.word	0x2000067c
 8009060:	20000678 	.word	0x20000678
 8009064:	20000044 	.word	0x20000044

08009068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10a      	bne.n	800908e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907c:	f383 8811 	msr	BASEPRI, r3
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	60fb      	str	r3, [r7, #12]
}
 800908a:	bf00      	nop
 800908c:	e7fe      	b.n	800908c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800908e:	4b07      	ldr	r3, [pc, #28]	; (80090ac <vTaskPlaceOnEventList+0x44>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	3318      	adds	r3, #24
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7ff fabe 	bl	8008618 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800909c:	2101      	movs	r1, #1
 800909e:	6838      	ldr	r0, [r7, #0]
 80090a0:	f000 f99a 	bl	80093d8 <prvAddCurrentTaskToDelayedList>
}
 80090a4:	bf00      	nop
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	20000678 	.word	0x20000678

080090b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10a      	bne.n	80090dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	60fb      	str	r3, [r7, #12]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	3318      	adds	r3, #24
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff fad2 	bl	800868a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090e6:	4b1e      	ldr	r3, [pc, #120]	; (8009160 <xTaskRemoveFromEventList+0xb0>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d11d      	bne.n	800912a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	3304      	adds	r3, #4
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7ff fac9 	bl	800868a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fc:	4b19      	ldr	r3, [pc, #100]	; (8009164 <xTaskRemoveFromEventList+0xb4>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	429a      	cmp	r2, r3
 8009102:	d903      	bls.n	800910c <xTaskRemoveFromEventList+0x5c>
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009108:	4a16      	ldr	r2, [pc, #88]	; (8009164 <xTaskRemoveFromEventList+0xb4>)
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009110:	4613      	mov	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4a13      	ldr	r2, [pc, #76]	; (8009168 <xTaskRemoveFromEventList+0xb8>)
 800911a:	441a      	add	r2, r3
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	3304      	adds	r3, #4
 8009120:	4619      	mov	r1, r3
 8009122:	4610      	mov	r0, r2
 8009124:	f7ff fa54 	bl	80085d0 <vListInsertEnd>
 8009128:	e005      	b.n	8009136 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	3318      	adds	r3, #24
 800912e:	4619      	mov	r1, r3
 8009130:	480e      	ldr	r0, [pc, #56]	; (800916c <xTaskRemoveFromEventList+0xbc>)
 8009132:	f7ff fa4d 	bl	80085d0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913a:	4b0d      	ldr	r3, [pc, #52]	; (8009170 <xTaskRemoveFromEventList+0xc0>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009140:	429a      	cmp	r2, r3
 8009142:	d905      	bls.n	8009150 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009144:	2301      	movs	r3, #1
 8009146:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009148:	4b0a      	ldr	r3, [pc, #40]	; (8009174 <xTaskRemoveFromEventList+0xc4>)
 800914a:	2201      	movs	r2, #1
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e001      	b.n	8009154 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009150:	2300      	movs	r3, #0
 8009152:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009154:	697b      	ldr	r3, [r7, #20]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	20000b2c 	.word	0x20000b2c
 8009164:	20000b14 	.word	0x20000b14
 8009168:	2000067c 	.word	0x2000067c
 800916c:	20000ae4 	.word	0x20000ae4
 8009170:	20000678 	.word	0x20000678
 8009174:	20000b20 	.word	0x20000b20

08009178 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009180:	4b06      	ldr	r3, [pc, #24]	; (800919c <vTaskInternalSetTimeOutState+0x24>)
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009188:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <vTaskInternalSetTimeOutState+0x28>)
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	605a      	str	r2, [r3, #4]
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	20000b24 	.word	0x20000b24
 80091a0:	20000b10 	.word	0x20000b10

080091a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	613b      	str	r3, [r7, #16]
}
 80091c6:	bf00      	nop
 80091c8:	e7fe      	b.n	80091c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10a      	bne.n	80091e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	60fb      	str	r3, [r7, #12]
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80091e6:	f000 f95f 	bl	80094a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091ea:	4b1d      	ldr	r3, [pc, #116]	; (8009260 <xTaskCheckForTimeOut+0xbc>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	69ba      	ldr	r2, [r7, #24]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009202:	d102      	bne.n	800920a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009204:	2300      	movs	r3, #0
 8009206:	61fb      	str	r3, [r7, #28]
 8009208:	e023      	b.n	8009252 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b15      	ldr	r3, [pc, #84]	; (8009264 <xTaskCheckForTimeOut+0xc0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	429a      	cmp	r2, r3
 8009214:	d007      	beq.n	8009226 <xTaskCheckForTimeOut+0x82>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	429a      	cmp	r2, r3
 800921e:	d302      	bcc.n	8009226 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009220:	2301      	movs	r3, #1
 8009222:	61fb      	str	r3, [r7, #28]
 8009224:	e015      	b.n	8009252 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	429a      	cmp	r2, r3
 800922e:	d20b      	bcs.n	8009248 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	1ad2      	subs	r2, r2, r3
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7ff ff9b 	bl	8009178 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009242:	2300      	movs	r3, #0
 8009244:	61fb      	str	r3, [r7, #28]
 8009246:	e004      	b.n	8009252 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800924e:	2301      	movs	r3, #1
 8009250:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009252:	f000 f959 	bl	8009508 <vPortExitCritical>

	return xReturn;
 8009256:	69fb      	ldr	r3, [r7, #28]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3720      	adds	r7, #32
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	20000b10 	.word	0x20000b10
 8009264:	20000b24 	.word	0x20000b24

08009268 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009268:	b480      	push	{r7}
 800926a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800926c:	4b03      	ldr	r3, [pc, #12]	; (800927c <vTaskMissedYield+0x14>)
 800926e:	2201      	movs	r2, #1
 8009270:	601a      	str	r2, [r3, #0]
}
 8009272:	bf00      	nop
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	20000b20 	.word	0x20000b20

08009280 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009286:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <prvResetNextTaskUnblockTime+0x38>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d104      	bne.n	800929a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009290:	4b0a      	ldr	r3, [pc, #40]	; (80092bc <prvResetNextTaskUnblockTime+0x3c>)
 8009292:	f04f 32ff 	mov.w	r2, #4294967295
 8009296:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009298:	e008      	b.n	80092ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800929a:	4b07      	ldr	r3, [pc, #28]	; (80092b8 <prvResetNextTaskUnblockTime+0x38>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	4a04      	ldr	r2, [pc, #16]	; (80092bc <prvResetNextTaskUnblockTime+0x3c>)
 80092aa:	6013      	str	r3, [r2, #0]
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	20000adc 	.word	0x20000adc
 80092bc:	20000b28 	.word	0x20000b28

080092c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092c6:	4b0b      	ldr	r3, [pc, #44]	; (80092f4 <xTaskGetSchedulerState+0x34>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d102      	bne.n	80092d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092ce:	2301      	movs	r3, #1
 80092d0:	607b      	str	r3, [r7, #4]
 80092d2:	e008      	b.n	80092e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092d4:	4b08      	ldr	r3, [pc, #32]	; (80092f8 <xTaskGetSchedulerState+0x38>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d102      	bne.n	80092e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092dc:	2302      	movs	r3, #2
 80092de:	607b      	str	r3, [r7, #4]
 80092e0:	e001      	b.n	80092e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092e2:	2300      	movs	r3, #0
 80092e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092e6:	687b      	ldr	r3, [r7, #4]
	}
 80092e8:	4618      	mov	r0, r3
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	20000b18 	.word	0x20000b18
 80092f8:	20000b2c 	.word	0x20000b2c

080092fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009308:	2300      	movs	r3, #0
 800930a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d056      	beq.n	80093c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009312:	4b2e      	ldr	r3, [pc, #184]	; (80093cc <xTaskPriorityDisinherit+0xd0>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	429a      	cmp	r2, r3
 800931a:	d00a      	beq.n	8009332 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800931c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009320:	f383 8811 	msr	BASEPRI, r3
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	60fb      	str	r3, [r7, #12]
}
 800932e:	bf00      	nop
 8009330:	e7fe      	b.n	8009330 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10a      	bne.n	8009350 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	60bb      	str	r3, [r7, #8]
}
 800934c:	bf00      	nop
 800934e:	e7fe      	b.n	800934e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009354:	1e5a      	subs	r2, r3, #1
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009362:	429a      	cmp	r2, r3
 8009364:	d02c      	beq.n	80093c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800936a:	2b00      	cmp	r3, #0
 800936c:	d128      	bne.n	80093c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	3304      	adds	r3, #4
 8009372:	4618      	mov	r0, r3
 8009374:	f7ff f989 	bl	800868a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009390:	4b0f      	ldr	r3, [pc, #60]	; (80093d0 <xTaskPriorityDisinherit+0xd4>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	429a      	cmp	r2, r3
 8009396:	d903      	bls.n	80093a0 <xTaskPriorityDisinherit+0xa4>
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939c:	4a0c      	ldr	r2, [pc, #48]	; (80093d0 <xTaskPriorityDisinherit+0xd4>)
 800939e:	6013      	str	r3, [r2, #0]
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a4:	4613      	mov	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4a09      	ldr	r2, [pc, #36]	; (80093d4 <xTaskPriorityDisinherit+0xd8>)
 80093ae:	441a      	add	r2, r3
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	3304      	adds	r3, #4
 80093b4:	4619      	mov	r1, r3
 80093b6:	4610      	mov	r0, r2
 80093b8:	f7ff f90a 	bl	80085d0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80093bc:	2301      	movs	r3, #1
 80093be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093c0:	697b      	ldr	r3, [r7, #20]
	}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20000678 	.word	0x20000678
 80093d0:	20000b14 	.word	0x20000b14
 80093d4:	2000067c 	.word	0x2000067c

080093d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093e2:	4b21      	ldr	r3, [pc, #132]	; (8009468 <prvAddCurrentTaskToDelayedList+0x90>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093e8:	4b20      	ldr	r3, [pc, #128]	; (800946c <prvAddCurrentTaskToDelayedList+0x94>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3304      	adds	r3, #4
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff f94b 	bl	800868a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fa:	d10a      	bne.n	8009412 <prvAddCurrentTaskToDelayedList+0x3a>
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009402:	4b1a      	ldr	r3, [pc, #104]	; (800946c <prvAddCurrentTaskToDelayedList+0x94>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3304      	adds	r3, #4
 8009408:	4619      	mov	r1, r3
 800940a:	4819      	ldr	r0, [pc, #100]	; (8009470 <prvAddCurrentTaskToDelayedList+0x98>)
 800940c:	f7ff f8e0 	bl	80085d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009410:	e026      	b.n	8009460 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4413      	add	r3, r2
 8009418:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800941a:	4b14      	ldr	r3, [pc, #80]	; (800946c <prvAddCurrentTaskToDelayedList+0x94>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	429a      	cmp	r2, r3
 8009428:	d209      	bcs.n	800943e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800942a:	4b12      	ldr	r3, [pc, #72]	; (8009474 <prvAddCurrentTaskToDelayedList+0x9c>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	4b0f      	ldr	r3, [pc, #60]	; (800946c <prvAddCurrentTaskToDelayedList+0x94>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3304      	adds	r3, #4
 8009434:	4619      	mov	r1, r3
 8009436:	4610      	mov	r0, r2
 8009438:	f7ff f8ee 	bl	8008618 <vListInsert>
}
 800943c:	e010      	b.n	8009460 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800943e:	4b0e      	ldr	r3, [pc, #56]	; (8009478 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	4b0a      	ldr	r3, [pc, #40]	; (800946c <prvAddCurrentTaskToDelayedList+0x94>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3304      	adds	r3, #4
 8009448:	4619      	mov	r1, r3
 800944a:	4610      	mov	r0, r2
 800944c:	f7ff f8e4 	bl	8008618 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009450:	4b0a      	ldr	r3, [pc, #40]	; (800947c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	429a      	cmp	r2, r3
 8009458:	d202      	bcs.n	8009460 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800945a:	4a08      	ldr	r2, [pc, #32]	; (800947c <prvAddCurrentTaskToDelayedList+0xa4>)
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	6013      	str	r3, [r2, #0]
}
 8009460:	bf00      	nop
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	20000b10 	.word	0x20000b10
 800946c:	20000678 	.word	0x20000678
 8009470:	20000af8 	.word	0x20000af8
 8009474:	20000ae0 	.word	0x20000ae0
 8009478:	20000adc 	.word	0x20000adc
 800947c:	20000b28 	.word	0x20000b28

08009480 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009480:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <pxCurrentTCBConst2>)
 8009482:	6819      	ldr	r1, [r3, #0]
 8009484:	6808      	ldr	r0, [r1, #0]
 8009486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948a:	f380 8809 	msr	PSP, r0
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f04f 0000 	mov.w	r0, #0
 8009496:	f380 8811 	msr	BASEPRI, r0
 800949a:	4770      	bx	lr
 800949c:	f3af 8000 	nop.w

080094a0 <pxCurrentTCBConst2>:
 80094a0:	20000678 	.word	0x20000678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop

080094a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	607b      	str	r3, [r7, #4]
}
 80094c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094c2:	4b0f      	ldr	r3, [pc, #60]	; (8009500 <vPortEnterCritical+0x58>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3301      	adds	r3, #1
 80094c8:	4a0d      	ldr	r2, [pc, #52]	; (8009500 <vPortEnterCritical+0x58>)
 80094ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094cc:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <vPortEnterCritical+0x58>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d10f      	bne.n	80094f4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094d4:	4b0b      	ldr	r3, [pc, #44]	; (8009504 <vPortEnterCritical+0x5c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00a      	beq.n	80094f4 <vPortEnterCritical+0x4c>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	603b      	str	r3, [r7, #0]
}
 80094f0:	bf00      	nop
 80094f2:	e7fe      	b.n	80094f2 <vPortEnterCritical+0x4a>
	}
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	20000040 	.word	0x20000040
 8009504:	e000ed04 	.word	0xe000ed04

08009508 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800950e:	4b12      	ldr	r3, [pc, #72]	; (8009558 <vPortExitCritical+0x50>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <vPortExitCritical+0x24>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	607b      	str	r3, [r7, #4]
}
 8009528:	bf00      	nop
 800952a:	e7fe      	b.n	800952a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800952c:	4b0a      	ldr	r3, [pc, #40]	; (8009558 <vPortExitCritical+0x50>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3b01      	subs	r3, #1
 8009532:	4a09      	ldr	r2, [pc, #36]	; (8009558 <vPortExitCritical+0x50>)
 8009534:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009536:	4b08      	ldr	r3, [pc, #32]	; (8009558 <vPortExitCritical+0x50>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d105      	bne.n	800954a <vPortExitCritical+0x42>
 800953e:	2300      	movs	r3, #0
 8009540:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	f383 8811 	msr	BASEPRI, r3
}
 8009548:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	20000040 	.word	0x20000040
 800955c:	00000000 	.word	0x00000000

08009560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009560:	f3ef 8009 	mrs	r0, PSP
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	4b15      	ldr	r3, [pc, #84]	; (80095c0 <pxCurrentTCBConst>)
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	f01e 0f10 	tst.w	lr, #16
 8009570:	bf08      	it	eq
 8009572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957a:	6010      	str	r0, [r2, #0]
 800957c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009584:	f380 8811 	msr	BASEPRI, r0
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f7ff fd06 	bl	8008fa0 <vTaskSwitchContext>
 8009594:	f04f 0000 	mov.w	r0, #0
 8009598:	f380 8811 	msr	BASEPRI, r0
 800959c:	bc09      	pop	{r0, r3}
 800959e:	6819      	ldr	r1, [r3, #0]
 80095a0:	6808      	ldr	r0, [r1, #0]
 80095a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a6:	f01e 0f10 	tst.w	lr, #16
 80095aa:	bf08      	it	eq
 80095ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095b0:	f380 8809 	msr	PSP, r0
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	f3af 8000 	nop.w

080095c0 <pxCurrentTCBConst>:
 80095c0:	20000678 	.word	0x20000678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop

080095c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	607b      	str	r3, [r7, #4]
}
 80095e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095e2:	f7ff fc23 	bl	8008e2c <xTaskIncrementTick>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d003      	beq.n	80095f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095ec:	4b06      	ldr	r3, [pc, #24]	; (8009608 <xPortSysTickHandler+0x40>)
 80095ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	2300      	movs	r3, #0
 80095f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	f383 8811 	msr	BASEPRI, r3
}
 80095fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	e000ed04 	.word	0xe000ed04

0800960c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009612:	f3ef 8305 	mrs	r3, IPSR
 8009616:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2b0f      	cmp	r3, #15
 800961c:	d914      	bls.n	8009648 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800961e:	4a17      	ldr	r2, [pc, #92]	; (800967c <vPortValidateInterruptPriority+0x70>)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4413      	add	r3, r2
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009628:	4b15      	ldr	r3, [pc, #84]	; (8009680 <vPortValidateInterruptPriority+0x74>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	7afa      	ldrb	r2, [r7, #11]
 800962e:	429a      	cmp	r2, r3
 8009630:	d20a      	bcs.n	8009648 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	607b      	str	r3, [r7, #4]
}
 8009644:	bf00      	nop
 8009646:	e7fe      	b.n	8009646 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009648:	4b0e      	ldr	r3, [pc, #56]	; (8009684 <vPortValidateInterruptPriority+0x78>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009650:	4b0d      	ldr	r3, [pc, #52]	; (8009688 <vPortValidateInterruptPriority+0x7c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	d90a      	bls.n	800966e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	603b      	str	r3, [r7, #0]
}
 800966a:	bf00      	nop
 800966c:	e7fe      	b.n	800966c <vPortValidateInterruptPriority+0x60>
	}
 800966e:	bf00      	nop
 8009670:	3714      	adds	r7, #20
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	e000e3f0 	.word	0xe000e3f0
 8009680:	20000b30 	.word	0x20000b30
 8009684:	e000ed0c 	.word	0xe000ed0c
 8009688:	20000b34 	.word	0x20000b34

0800968c <__errno>:
 800968c:	4b01      	ldr	r3, [pc, #4]	; (8009694 <__errno+0x8>)
 800968e:	6818      	ldr	r0, [r3, #0]
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	20000044 	.word	0x20000044

08009698 <__libc_init_array>:
 8009698:	b570      	push	{r4, r5, r6, lr}
 800969a:	4d0d      	ldr	r5, [pc, #52]	; (80096d0 <__libc_init_array+0x38>)
 800969c:	4c0d      	ldr	r4, [pc, #52]	; (80096d4 <__libc_init_array+0x3c>)
 800969e:	1b64      	subs	r4, r4, r5
 80096a0:	10a4      	asrs	r4, r4, #2
 80096a2:	2600      	movs	r6, #0
 80096a4:	42a6      	cmp	r6, r4
 80096a6:	d109      	bne.n	80096bc <__libc_init_array+0x24>
 80096a8:	4d0b      	ldr	r5, [pc, #44]	; (80096d8 <__libc_init_array+0x40>)
 80096aa:	4c0c      	ldr	r4, [pc, #48]	; (80096dc <__libc_init_array+0x44>)
 80096ac:	f002 fbbe 	bl	800be2c <_init>
 80096b0:	1b64      	subs	r4, r4, r5
 80096b2:	10a4      	asrs	r4, r4, #2
 80096b4:	2600      	movs	r6, #0
 80096b6:	42a6      	cmp	r6, r4
 80096b8:	d105      	bne.n	80096c6 <__libc_init_array+0x2e>
 80096ba:	bd70      	pop	{r4, r5, r6, pc}
 80096bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c0:	4798      	blx	r3
 80096c2:	3601      	adds	r6, #1
 80096c4:	e7ee      	b.n	80096a4 <__libc_init_array+0xc>
 80096c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ca:	4798      	blx	r3
 80096cc:	3601      	adds	r6, #1
 80096ce:	e7f2      	b.n	80096b6 <__libc_init_array+0x1e>
 80096d0:	0800c260 	.word	0x0800c260
 80096d4:	0800c260 	.word	0x0800c260
 80096d8:	0800c260 	.word	0x0800c260
 80096dc:	0800c264 	.word	0x0800c264

080096e0 <__retarget_lock_acquire_recursive>:
 80096e0:	4770      	bx	lr

080096e2 <__retarget_lock_release_recursive>:
 80096e2:	4770      	bx	lr

080096e4 <memcpy>:
 80096e4:	440a      	add	r2, r1
 80096e6:	4291      	cmp	r1, r2
 80096e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80096ec:	d100      	bne.n	80096f0 <memcpy+0xc>
 80096ee:	4770      	bx	lr
 80096f0:	b510      	push	{r4, lr}
 80096f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096fa:	4291      	cmp	r1, r2
 80096fc:	d1f9      	bne.n	80096f2 <memcpy+0xe>
 80096fe:	bd10      	pop	{r4, pc}

08009700 <memset>:
 8009700:	4402      	add	r2, r0
 8009702:	4603      	mov	r3, r0
 8009704:	4293      	cmp	r3, r2
 8009706:	d100      	bne.n	800970a <memset+0xa>
 8009708:	4770      	bx	lr
 800970a:	f803 1b01 	strb.w	r1, [r3], #1
 800970e:	e7f9      	b.n	8009704 <memset+0x4>

08009710 <sbrk_aligned>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	4e0e      	ldr	r6, [pc, #56]	; (800974c <sbrk_aligned+0x3c>)
 8009714:	460c      	mov	r4, r1
 8009716:	6831      	ldr	r1, [r6, #0]
 8009718:	4605      	mov	r5, r0
 800971a:	b911      	cbnz	r1, 8009722 <sbrk_aligned+0x12>
 800971c:	f000 f88c 	bl	8009838 <_sbrk_r>
 8009720:	6030      	str	r0, [r6, #0]
 8009722:	4621      	mov	r1, r4
 8009724:	4628      	mov	r0, r5
 8009726:	f000 f887 	bl	8009838 <_sbrk_r>
 800972a:	1c43      	adds	r3, r0, #1
 800972c:	d00a      	beq.n	8009744 <sbrk_aligned+0x34>
 800972e:	1cc4      	adds	r4, r0, #3
 8009730:	f024 0403 	bic.w	r4, r4, #3
 8009734:	42a0      	cmp	r0, r4
 8009736:	d007      	beq.n	8009748 <sbrk_aligned+0x38>
 8009738:	1a21      	subs	r1, r4, r0
 800973a:	4628      	mov	r0, r5
 800973c:	f000 f87c 	bl	8009838 <_sbrk_r>
 8009740:	3001      	adds	r0, #1
 8009742:	d101      	bne.n	8009748 <sbrk_aligned+0x38>
 8009744:	f04f 34ff 	mov.w	r4, #4294967295
 8009748:	4620      	mov	r0, r4
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	20000b40 	.word	0x20000b40

08009750 <_malloc_r>:
 8009750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009754:	1ccd      	adds	r5, r1, #3
 8009756:	f025 0503 	bic.w	r5, r5, #3
 800975a:	3508      	adds	r5, #8
 800975c:	2d0c      	cmp	r5, #12
 800975e:	bf38      	it	cc
 8009760:	250c      	movcc	r5, #12
 8009762:	2d00      	cmp	r5, #0
 8009764:	4607      	mov	r7, r0
 8009766:	db01      	blt.n	800976c <_malloc_r+0x1c>
 8009768:	42a9      	cmp	r1, r5
 800976a:	d905      	bls.n	8009778 <_malloc_r+0x28>
 800976c:	230c      	movs	r3, #12
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	2600      	movs	r6, #0
 8009772:	4630      	mov	r0, r6
 8009774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009778:	4e2e      	ldr	r6, [pc, #184]	; (8009834 <_malloc_r+0xe4>)
 800977a:	f000 f88d 	bl	8009898 <__malloc_lock>
 800977e:	6833      	ldr	r3, [r6, #0]
 8009780:	461c      	mov	r4, r3
 8009782:	bb34      	cbnz	r4, 80097d2 <_malloc_r+0x82>
 8009784:	4629      	mov	r1, r5
 8009786:	4638      	mov	r0, r7
 8009788:	f7ff ffc2 	bl	8009710 <sbrk_aligned>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	4604      	mov	r4, r0
 8009790:	d14d      	bne.n	800982e <_malloc_r+0xde>
 8009792:	6834      	ldr	r4, [r6, #0]
 8009794:	4626      	mov	r6, r4
 8009796:	2e00      	cmp	r6, #0
 8009798:	d140      	bne.n	800981c <_malloc_r+0xcc>
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	4631      	mov	r1, r6
 800979e:	4638      	mov	r0, r7
 80097a0:	eb04 0803 	add.w	r8, r4, r3
 80097a4:	f000 f848 	bl	8009838 <_sbrk_r>
 80097a8:	4580      	cmp	r8, r0
 80097aa:	d13a      	bne.n	8009822 <_malloc_r+0xd2>
 80097ac:	6821      	ldr	r1, [r4, #0]
 80097ae:	3503      	adds	r5, #3
 80097b0:	1a6d      	subs	r5, r5, r1
 80097b2:	f025 0503 	bic.w	r5, r5, #3
 80097b6:	3508      	adds	r5, #8
 80097b8:	2d0c      	cmp	r5, #12
 80097ba:	bf38      	it	cc
 80097bc:	250c      	movcc	r5, #12
 80097be:	4629      	mov	r1, r5
 80097c0:	4638      	mov	r0, r7
 80097c2:	f7ff ffa5 	bl	8009710 <sbrk_aligned>
 80097c6:	3001      	adds	r0, #1
 80097c8:	d02b      	beq.n	8009822 <_malloc_r+0xd2>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	442b      	add	r3, r5
 80097ce:	6023      	str	r3, [r4, #0]
 80097d0:	e00e      	b.n	80097f0 <_malloc_r+0xa0>
 80097d2:	6822      	ldr	r2, [r4, #0]
 80097d4:	1b52      	subs	r2, r2, r5
 80097d6:	d41e      	bmi.n	8009816 <_malloc_r+0xc6>
 80097d8:	2a0b      	cmp	r2, #11
 80097da:	d916      	bls.n	800980a <_malloc_r+0xba>
 80097dc:	1961      	adds	r1, r4, r5
 80097de:	42a3      	cmp	r3, r4
 80097e0:	6025      	str	r5, [r4, #0]
 80097e2:	bf18      	it	ne
 80097e4:	6059      	strne	r1, [r3, #4]
 80097e6:	6863      	ldr	r3, [r4, #4]
 80097e8:	bf08      	it	eq
 80097ea:	6031      	streq	r1, [r6, #0]
 80097ec:	5162      	str	r2, [r4, r5]
 80097ee:	604b      	str	r3, [r1, #4]
 80097f0:	4638      	mov	r0, r7
 80097f2:	f104 060b 	add.w	r6, r4, #11
 80097f6:	f000 f855 	bl	80098a4 <__malloc_unlock>
 80097fa:	f026 0607 	bic.w	r6, r6, #7
 80097fe:	1d23      	adds	r3, r4, #4
 8009800:	1af2      	subs	r2, r6, r3
 8009802:	d0b6      	beq.n	8009772 <_malloc_r+0x22>
 8009804:	1b9b      	subs	r3, r3, r6
 8009806:	50a3      	str	r3, [r4, r2]
 8009808:	e7b3      	b.n	8009772 <_malloc_r+0x22>
 800980a:	6862      	ldr	r2, [r4, #4]
 800980c:	42a3      	cmp	r3, r4
 800980e:	bf0c      	ite	eq
 8009810:	6032      	streq	r2, [r6, #0]
 8009812:	605a      	strne	r2, [r3, #4]
 8009814:	e7ec      	b.n	80097f0 <_malloc_r+0xa0>
 8009816:	4623      	mov	r3, r4
 8009818:	6864      	ldr	r4, [r4, #4]
 800981a:	e7b2      	b.n	8009782 <_malloc_r+0x32>
 800981c:	4634      	mov	r4, r6
 800981e:	6876      	ldr	r6, [r6, #4]
 8009820:	e7b9      	b.n	8009796 <_malloc_r+0x46>
 8009822:	230c      	movs	r3, #12
 8009824:	603b      	str	r3, [r7, #0]
 8009826:	4638      	mov	r0, r7
 8009828:	f000 f83c 	bl	80098a4 <__malloc_unlock>
 800982c:	e7a1      	b.n	8009772 <_malloc_r+0x22>
 800982e:	6025      	str	r5, [r4, #0]
 8009830:	e7de      	b.n	80097f0 <_malloc_r+0xa0>
 8009832:	bf00      	nop
 8009834:	20000b3c 	.word	0x20000b3c

08009838 <_sbrk_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4d06      	ldr	r5, [pc, #24]	; (8009854 <_sbrk_r+0x1c>)
 800983c:	2300      	movs	r3, #0
 800983e:	4604      	mov	r4, r0
 8009840:	4608      	mov	r0, r1
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	f7f9 fbe8 	bl	8003018 <_sbrk>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d102      	bne.n	8009852 <_sbrk_r+0x1a>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	b103      	cbz	r3, 8009852 <_sbrk_r+0x1a>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	20000b44 	.word	0x20000b44

08009858 <siprintf>:
 8009858:	b40e      	push	{r1, r2, r3}
 800985a:	b500      	push	{lr}
 800985c:	b09c      	sub	sp, #112	; 0x70
 800985e:	ab1d      	add	r3, sp, #116	; 0x74
 8009860:	9002      	str	r0, [sp, #8]
 8009862:	9006      	str	r0, [sp, #24]
 8009864:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009868:	4809      	ldr	r0, [pc, #36]	; (8009890 <siprintf+0x38>)
 800986a:	9107      	str	r1, [sp, #28]
 800986c:	9104      	str	r1, [sp, #16]
 800986e:	4909      	ldr	r1, [pc, #36]	; (8009894 <siprintf+0x3c>)
 8009870:	f853 2b04 	ldr.w	r2, [r3], #4
 8009874:	9105      	str	r1, [sp, #20]
 8009876:	6800      	ldr	r0, [r0, #0]
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	a902      	add	r1, sp, #8
 800987c:	f000 f8c0 	bl	8009a00 <_svfiprintf_r>
 8009880:	9b02      	ldr	r3, [sp, #8]
 8009882:	2200      	movs	r2, #0
 8009884:	701a      	strb	r2, [r3, #0]
 8009886:	b01c      	add	sp, #112	; 0x70
 8009888:	f85d eb04 	ldr.w	lr, [sp], #4
 800988c:	b003      	add	sp, #12
 800988e:	4770      	bx	lr
 8009890:	20000044 	.word	0x20000044
 8009894:	ffff0208 	.word	0xffff0208

08009898 <__malloc_lock>:
 8009898:	4801      	ldr	r0, [pc, #4]	; (80098a0 <__malloc_lock+0x8>)
 800989a:	f7ff bf21 	b.w	80096e0 <__retarget_lock_acquire_recursive>
 800989e:	bf00      	nop
 80098a0:	20000b38 	.word	0x20000b38

080098a4 <__malloc_unlock>:
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <__malloc_unlock+0x8>)
 80098a6:	f7ff bf1c 	b.w	80096e2 <__retarget_lock_release_recursive>
 80098aa:	bf00      	nop
 80098ac:	20000b38 	.word	0x20000b38

080098b0 <_free_r>:
 80098b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098b2:	2900      	cmp	r1, #0
 80098b4:	d044      	beq.n	8009940 <_free_r+0x90>
 80098b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ba:	9001      	str	r0, [sp, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f1a1 0404 	sub.w	r4, r1, #4
 80098c2:	bfb8      	it	lt
 80098c4:	18e4      	addlt	r4, r4, r3
 80098c6:	f7ff ffe7 	bl	8009898 <__malloc_lock>
 80098ca:	4a1e      	ldr	r2, [pc, #120]	; (8009944 <_free_r+0x94>)
 80098cc:	9801      	ldr	r0, [sp, #4]
 80098ce:	6813      	ldr	r3, [r2, #0]
 80098d0:	b933      	cbnz	r3, 80098e0 <_free_r+0x30>
 80098d2:	6063      	str	r3, [r4, #4]
 80098d4:	6014      	str	r4, [r2, #0]
 80098d6:	b003      	add	sp, #12
 80098d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098dc:	f7ff bfe2 	b.w	80098a4 <__malloc_unlock>
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	d908      	bls.n	80098f6 <_free_r+0x46>
 80098e4:	6825      	ldr	r5, [r4, #0]
 80098e6:	1961      	adds	r1, r4, r5
 80098e8:	428b      	cmp	r3, r1
 80098ea:	bf01      	itttt	eq
 80098ec:	6819      	ldreq	r1, [r3, #0]
 80098ee:	685b      	ldreq	r3, [r3, #4]
 80098f0:	1949      	addeq	r1, r1, r5
 80098f2:	6021      	streq	r1, [r4, #0]
 80098f4:	e7ed      	b.n	80098d2 <_free_r+0x22>
 80098f6:	461a      	mov	r2, r3
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	b10b      	cbz	r3, 8009900 <_free_r+0x50>
 80098fc:	42a3      	cmp	r3, r4
 80098fe:	d9fa      	bls.n	80098f6 <_free_r+0x46>
 8009900:	6811      	ldr	r1, [r2, #0]
 8009902:	1855      	adds	r5, r2, r1
 8009904:	42a5      	cmp	r5, r4
 8009906:	d10b      	bne.n	8009920 <_free_r+0x70>
 8009908:	6824      	ldr	r4, [r4, #0]
 800990a:	4421      	add	r1, r4
 800990c:	1854      	adds	r4, r2, r1
 800990e:	42a3      	cmp	r3, r4
 8009910:	6011      	str	r1, [r2, #0]
 8009912:	d1e0      	bne.n	80098d6 <_free_r+0x26>
 8009914:	681c      	ldr	r4, [r3, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	6053      	str	r3, [r2, #4]
 800991a:	4421      	add	r1, r4
 800991c:	6011      	str	r1, [r2, #0]
 800991e:	e7da      	b.n	80098d6 <_free_r+0x26>
 8009920:	d902      	bls.n	8009928 <_free_r+0x78>
 8009922:	230c      	movs	r3, #12
 8009924:	6003      	str	r3, [r0, #0]
 8009926:	e7d6      	b.n	80098d6 <_free_r+0x26>
 8009928:	6825      	ldr	r5, [r4, #0]
 800992a:	1961      	adds	r1, r4, r5
 800992c:	428b      	cmp	r3, r1
 800992e:	bf04      	itt	eq
 8009930:	6819      	ldreq	r1, [r3, #0]
 8009932:	685b      	ldreq	r3, [r3, #4]
 8009934:	6063      	str	r3, [r4, #4]
 8009936:	bf04      	itt	eq
 8009938:	1949      	addeq	r1, r1, r5
 800993a:	6021      	streq	r1, [r4, #0]
 800993c:	6054      	str	r4, [r2, #4]
 800993e:	e7ca      	b.n	80098d6 <_free_r+0x26>
 8009940:	b003      	add	sp, #12
 8009942:	bd30      	pop	{r4, r5, pc}
 8009944:	20000b3c 	.word	0x20000b3c

08009948 <__ssputs_r>:
 8009948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800994c:	688e      	ldr	r6, [r1, #8]
 800994e:	429e      	cmp	r6, r3
 8009950:	4682      	mov	sl, r0
 8009952:	460c      	mov	r4, r1
 8009954:	4690      	mov	r8, r2
 8009956:	461f      	mov	r7, r3
 8009958:	d838      	bhi.n	80099cc <__ssputs_r+0x84>
 800995a:	898a      	ldrh	r2, [r1, #12]
 800995c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009960:	d032      	beq.n	80099c8 <__ssputs_r+0x80>
 8009962:	6825      	ldr	r5, [r4, #0]
 8009964:	6909      	ldr	r1, [r1, #16]
 8009966:	eba5 0901 	sub.w	r9, r5, r1
 800996a:	6965      	ldr	r5, [r4, #20]
 800996c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009970:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009974:	3301      	adds	r3, #1
 8009976:	444b      	add	r3, r9
 8009978:	106d      	asrs	r5, r5, #1
 800997a:	429d      	cmp	r5, r3
 800997c:	bf38      	it	cc
 800997e:	461d      	movcc	r5, r3
 8009980:	0553      	lsls	r3, r2, #21
 8009982:	d531      	bpl.n	80099e8 <__ssputs_r+0xa0>
 8009984:	4629      	mov	r1, r5
 8009986:	f7ff fee3 	bl	8009750 <_malloc_r>
 800998a:	4606      	mov	r6, r0
 800998c:	b950      	cbnz	r0, 80099a4 <__ssputs_r+0x5c>
 800998e:	230c      	movs	r3, #12
 8009990:	f8ca 3000 	str.w	r3, [sl]
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	f04f 30ff 	mov.w	r0, #4294967295
 80099a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a4:	6921      	ldr	r1, [r4, #16]
 80099a6:	464a      	mov	r2, r9
 80099a8:	f7ff fe9c 	bl	80096e4 <memcpy>
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	6126      	str	r6, [r4, #16]
 80099ba:	6165      	str	r5, [r4, #20]
 80099bc:	444e      	add	r6, r9
 80099be:	eba5 0509 	sub.w	r5, r5, r9
 80099c2:	6026      	str	r6, [r4, #0]
 80099c4:	60a5      	str	r5, [r4, #8]
 80099c6:	463e      	mov	r6, r7
 80099c8:	42be      	cmp	r6, r7
 80099ca:	d900      	bls.n	80099ce <__ssputs_r+0x86>
 80099cc:	463e      	mov	r6, r7
 80099ce:	6820      	ldr	r0, [r4, #0]
 80099d0:	4632      	mov	r2, r6
 80099d2:	4641      	mov	r1, r8
 80099d4:	f000 faa8 	bl	8009f28 <memmove>
 80099d8:	68a3      	ldr	r3, [r4, #8]
 80099da:	1b9b      	subs	r3, r3, r6
 80099dc:	60a3      	str	r3, [r4, #8]
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	4433      	add	r3, r6
 80099e2:	6023      	str	r3, [r4, #0]
 80099e4:	2000      	movs	r0, #0
 80099e6:	e7db      	b.n	80099a0 <__ssputs_r+0x58>
 80099e8:	462a      	mov	r2, r5
 80099ea:	f000 fab7 	bl	8009f5c <_realloc_r>
 80099ee:	4606      	mov	r6, r0
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d1e1      	bne.n	80099b8 <__ssputs_r+0x70>
 80099f4:	6921      	ldr	r1, [r4, #16]
 80099f6:	4650      	mov	r0, sl
 80099f8:	f7ff ff5a 	bl	80098b0 <_free_r>
 80099fc:	e7c7      	b.n	800998e <__ssputs_r+0x46>
	...

08009a00 <_svfiprintf_r>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	4698      	mov	r8, r3
 8009a06:	898b      	ldrh	r3, [r1, #12]
 8009a08:	061b      	lsls	r3, r3, #24
 8009a0a:	b09d      	sub	sp, #116	; 0x74
 8009a0c:	4607      	mov	r7, r0
 8009a0e:	460d      	mov	r5, r1
 8009a10:	4614      	mov	r4, r2
 8009a12:	d50e      	bpl.n	8009a32 <_svfiprintf_r+0x32>
 8009a14:	690b      	ldr	r3, [r1, #16]
 8009a16:	b963      	cbnz	r3, 8009a32 <_svfiprintf_r+0x32>
 8009a18:	2140      	movs	r1, #64	; 0x40
 8009a1a:	f7ff fe99 	bl	8009750 <_malloc_r>
 8009a1e:	6028      	str	r0, [r5, #0]
 8009a20:	6128      	str	r0, [r5, #16]
 8009a22:	b920      	cbnz	r0, 8009a2e <_svfiprintf_r+0x2e>
 8009a24:	230c      	movs	r3, #12
 8009a26:	603b      	str	r3, [r7, #0]
 8009a28:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2c:	e0d1      	b.n	8009bd2 <_svfiprintf_r+0x1d2>
 8009a2e:	2340      	movs	r3, #64	; 0x40
 8009a30:	616b      	str	r3, [r5, #20]
 8009a32:	2300      	movs	r3, #0
 8009a34:	9309      	str	r3, [sp, #36]	; 0x24
 8009a36:	2320      	movs	r3, #32
 8009a38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a40:	2330      	movs	r3, #48	; 0x30
 8009a42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009bec <_svfiprintf_r+0x1ec>
 8009a46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a4a:	f04f 0901 	mov.w	r9, #1
 8009a4e:	4623      	mov	r3, r4
 8009a50:	469a      	mov	sl, r3
 8009a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a56:	b10a      	cbz	r2, 8009a5c <_svfiprintf_r+0x5c>
 8009a58:	2a25      	cmp	r2, #37	; 0x25
 8009a5a:	d1f9      	bne.n	8009a50 <_svfiprintf_r+0x50>
 8009a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a60:	d00b      	beq.n	8009a7a <_svfiprintf_r+0x7a>
 8009a62:	465b      	mov	r3, fp
 8009a64:	4622      	mov	r2, r4
 8009a66:	4629      	mov	r1, r5
 8009a68:	4638      	mov	r0, r7
 8009a6a:	f7ff ff6d 	bl	8009948 <__ssputs_r>
 8009a6e:	3001      	adds	r0, #1
 8009a70:	f000 80aa 	beq.w	8009bc8 <_svfiprintf_r+0x1c8>
 8009a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a76:	445a      	add	r2, fp
 8009a78:	9209      	str	r2, [sp, #36]	; 0x24
 8009a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f000 80a2 	beq.w	8009bc8 <_svfiprintf_r+0x1c8>
 8009a84:	2300      	movs	r3, #0
 8009a86:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a8e:	f10a 0a01 	add.w	sl, sl, #1
 8009a92:	9304      	str	r3, [sp, #16]
 8009a94:	9307      	str	r3, [sp, #28]
 8009a96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a9a:	931a      	str	r3, [sp, #104]	; 0x68
 8009a9c:	4654      	mov	r4, sl
 8009a9e:	2205      	movs	r2, #5
 8009aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa4:	4851      	ldr	r0, [pc, #324]	; (8009bec <_svfiprintf_r+0x1ec>)
 8009aa6:	f7f6 fb9b 	bl	80001e0 <memchr>
 8009aaa:	9a04      	ldr	r2, [sp, #16]
 8009aac:	b9d8      	cbnz	r0, 8009ae6 <_svfiprintf_r+0xe6>
 8009aae:	06d0      	lsls	r0, r2, #27
 8009ab0:	bf44      	itt	mi
 8009ab2:	2320      	movmi	r3, #32
 8009ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ab8:	0711      	lsls	r1, r2, #28
 8009aba:	bf44      	itt	mi
 8009abc:	232b      	movmi	r3, #43	; 0x2b
 8009abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ac8:	d015      	beq.n	8009af6 <_svfiprintf_r+0xf6>
 8009aca:	9a07      	ldr	r2, [sp, #28]
 8009acc:	4654      	mov	r4, sl
 8009ace:	2000      	movs	r0, #0
 8009ad0:	f04f 0c0a 	mov.w	ip, #10
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ada:	3b30      	subs	r3, #48	; 0x30
 8009adc:	2b09      	cmp	r3, #9
 8009ade:	d94e      	bls.n	8009b7e <_svfiprintf_r+0x17e>
 8009ae0:	b1b0      	cbz	r0, 8009b10 <_svfiprintf_r+0x110>
 8009ae2:	9207      	str	r2, [sp, #28]
 8009ae4:	e014      	b.n	8009b10 <_svfiprintf_r+0x110>
 8009ae6:	eba0 0308 	sub.w	r3, r0, r8
 8009aea:	fa09 f303 	lsl.w	r3, r9, r3
 8009aee:	4313      	orrs	r3, r2
 8009af0:	9304      	str	r3, [sp, #16]
 8009af2:	46a2      	mov	sl, r4
 8009af4:	e7d2      	b.n	8009a9c <_svfiprintf_r+0x9c>
 8009af6:	9b03      	ldr	r3, [sp, #12]
 8009af8:	1d19      	adds	r1, r3, #4
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	9103      	str	r1, [sp, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	bfbb      	ittet	lt
 8009b02:	425b      	neglt	r3, r3
 8009b04:	f042 0202 	orrlt.w	r2, r2, #2
 8009b08:	9307      	strge	r3, [sp, #28]
 8009b0a:	9307      	strlt	r3, [sp, #28]
 8009b0c:	bfb8      	it	lt
 8009b0e:	9204      	strlt	r2, [sp, #16]
 8009b10:	7823      	ldrb	r3, [r4, #0]
 8009b12:	2b2e      	cmp	r3, #46	; 0x2e
 8009b14:	d10c      	bne.n	8009b30 <_svfiprintf_r+0x130>
 8009b16:	7863      	ldrb	r3, [r4, #1]
 8009b18:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1a:	d135      	bne.n	8009b88 <_svfiprintf_r+0x188>
 8009b1c:	9b03      	ldr	r3, [sp, #12]
 8009b1e:	1d1a      	adds	r2, r3, #4
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	9203      	str	r2, [sp, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bfb8      	it	lt
 8009b28:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b2c:	3402      	adds	r4, #2
 8009b2e:	9305      	str	r3, [sp, #20]
 8009b30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009bfc <_svfiprintf_r+0x1fc>
 8009b34:	7821      	ldrb	r1, [r4, #0]
 8009b36:	2203      	movs	r2, #3
 8009b38:	4650      	mov	r0, sl
 8009b3a:	f7f6 fb51 	bl	80001e0 <memchr>
 8009b3e:	b140      	cbz	r0, 8009b52 <_svfiprintf_r+0x152>
 8009b40:	2340      	movs	r3, #64	; 0x40
 8009b42:	eba0 000a 	sub.w	r0, r0, sl
 8009b46:	fa03 f000 	lsl.w	r0, r3, r0
 8009b4a:	9b04      	ldr	r3, [sp, #16]
 8009b4c:	4303      	orrs	r3, r0
 8009b4e:	3401      	adds	r4, #1
 8009b50:	9304      	str	r3, [sp, #16]
 8009b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b56:	4826      	ldr	r0, [pc, #152]	; (8009bf0 <_svfiprintf_r+0x1f0>)
 8009b58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b5c:	2206      	movs	r2, #6
 8009b5e:	f7f6 fb3f 	bl	80001e0 <memchr>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d038      	beq.n	8009bd8 <_svfiprintf_r+0x1d8>
 8009b66:	4b23      	ldr	r3, [pc, #140]	; (8009bf4 <_svfiprintf_r+0x1f4>)
 8009b68:	bb1b      	cbnz	r3, 8009bb2 <_svfiprintf_r+0x1b2>
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	3307      	adds	r3, #7
 8009b6e:	f023 0307 	bic.w	r3, r3, #7
 8009b72:	3308      	adds	r3, #8
 8009b74:	9303      	str	r3, [sp, #12]
 8009b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b78:	4433      	add	r3, r6
 8009b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7c:	e767      	b.n	8009a4e <_svfiprintf_r+0x4e>
 8009b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b82:	460c      	mov	r4, r1
 8009b84:	2001      	movs	r0, #1
 8009b86:	e7a5      	b.n	8009ad4 <_svfiprintf_r+0xd4>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	3401      	adds	r4, #1
 8009b8c:	9305      	str	r3, [sp, #20]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	f04f 0c0a 	mov.w	ip, #10
 8009b94:	4620      	mov	r0, r4
 8009b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b9a:	3a30      	subs	r2, #48	; 0x30
 8009b9c:	2a09      	cmp	r2, #9
 8009b9e:	d903      	bls.n	8009ba8 <_svfiprintf_r+0x1a8>
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0c5      	beq.n	8009b30 <_svfiprintf_r+0x130>
 8009ba4:	9105      	str	r1, [sp, #20]
 8009ba6:	e7c3      	b.n	8009b30 <_svfiprintf_r+0x130>
 8009ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bac:	4604      	mov	r4, r0
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e7f0      	b.n	8009b94 <_svfiprintf_r+0x194>
 8009bb2:	ab03      	add	r3, sp, #12
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	462a      	mov	r2, r5
 8009bb8:	4b0f      	ldr	r3, [pc, #60]	; (8009bf8 <_svfiprintf_r+0x1f8>)
 8009bba:	a904      	add	r1, sp, #16
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	f3af 8000 	nop.w
 8009bc2:	1c42      	adds	r2, r0, #1
 8009bc4:	4606      	mov	r6, r0
 8009bc6:	d1d6      	bne.n	8009b76 <_svfiprintf_r+0x176>
 8009bc8:	89ab      	ldrh	r3, [r5, #12]
 8009bca:	065b      	lsls	r3, r3, #25
 8009bcc:	f53f af2c 	bmi.w	8009a28 <_svfiprintf_r+0x28>
 8009bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bd2:	b01d      	add	sp, #116	; 0x74
 8009bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd8:	ab03      	add	r3, sp, #12
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	462a      	mov	r2, r5
 8009bde:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <_svfiprintf_r+0x1f8>)
 8009be0:	a904      	add	r1, sp, #16
 8009be2:	4638      	mov	r0, r7
 8009be4:	f000 f87a 	bl	8009cdc <_printf_i>
 8009be8:	e7eb      	b.n	8009bc2 <_svfiprintf_r+0x1c2>
 8009bea:	bf00      	nop
 8009bec:	0800c018 	.word	0x0800c018
 8009bf0:	0800c022 	.word	0x0800c022
 8009bf4:	00000000 	.word	0x00000000
 8009bf8:	08009949 	.word	0x08009949
 8009bfc:	0800c01e 	.word	0x0800c01e

08009c00 <_printf_common>:
 8009c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c04:	4616      	mov	r6, r2
 8009c06:	4699      	mov	r9, r3
 8009c08:	688a      	ldr	r2, [r1, #8]
 8009c0a:	690b      	ldr	r3, [r1, #16]
 8009c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c10:	4293      	cmp	r3, r2
 8009c12:	bfb8      	it	lt
 8009c14:	4613      	movlt	r3, r2
 8009c16:	6033      	str	r3, [r6, #0]
 8009c18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c1c:	4607      	mov	r7, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	b10a      	cbz	r2, 8009c26 <_printf_common+0x26>
 8009c22:	3301      	adds	r3, #1
 8009c24:	6033      	str	r3, [r6, #0]
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	0699      	lsls	r1, r3, #26
 8009c2a:	bf42      	ittt	mi
 8009c2c:	6833      	ldrmi	r3, [r6, #0]
 8009c2e:	3302      	addmi	r3, #2
 8009c30:	6033      	strmi	r3, [r6, #0]
 8009c32:	6825      	ldr	r5, [r4, #0]
 8009c34:	f015 0506 	ands.w	r5, r5, #6
 8009c38:	d106      	bne.n	8009c48 <_printf_common+0x48>
 8009c3a:	f104 0a19 	add.w	sl, r4, #25
 8009c3e:	68e3      	ldr	r3, [r4, #12]
 8009c40:	6832      	ldr	r2, [r6, #0]
 8009c42:	1a9b      	subs	r3, r3, r2
 8009c44:	42ab      	cmp	r3, r5
 8009c46:	dc26      	bgt.n	8009c96 <_printf_common+0x96>
 8009c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c4c:	1e13      	subs	r3, r2, #0
 8009c4e:	6822      	ldr	r2, [r4, #0]
 8009c50:	bf18      	it	ne
 8009c52:	2301      	movne	r3, #1
 8009c54:	0692      	lsls	r2, r2, #26
 8009c56:	d42b      	bmi.n	8009cb0 <_printf_common+0xb0>
 8009c58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	4638      	mov	r0, r7
 8009c60:	47c0      	blx	r8
 8009c62:	3001      	adds	r0, #1
 8009c64:	d01e      	beq.n	8009ca4 <_printf_common+0xa4>
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	68e5      	ldr	r5, [r4, #12]
 8009c6a:	6832      	ldr	r2, [r6, #0]
 8009c6c:	f003 0306 	and.w	r3, r3, #6
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	bf08      	it	eq
 8009c74:	1aad      	subeq	r5, r5, r2
 8009c76:	68a3      	ldr	r3, [r4, #8]
 8009c78:	6922      	ldr	r2, [r4, #16]
 8009c7a:	bf0c      	ite	eq
 8009c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c80:	2500      	movne	r5, #0
 8009c82:	4293      	cmp	r3, r2
 8009c84:	bfc4      	itt	gt
 8009c86:	1a9b      	subgt	r3, r3, r2
 8009c88:	18ed      	addgt	r5, r5, r3
 8009c8a:	2600      	movs	r6, #0
 8009c8c:	341a      	adds	r4, #26
 8009c8e:	42b5      	cmp	r5, r6
 8009c90:	d11a      	bne.n	8009cc8 <_printf_common+0xc8>
 8009c92:	2000      	movs	r0, #0
 8009c94:	e008      	b.n	8009ca8 <_printf_common+0xa8>
 8009c96:	2301      	movs	r3, #1
 8009c98:	4652      	mov	r2, sl
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	47c0      	blx	r8
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d103      	bne.n	8009cac <_printf_common+0xac>
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cac:	3501      	adds	r5, #1
 8009cae:	e7c6      	b.n	8009c3e <_printf_common+0x3e>
 8009cb0:	18e1      	adds	r1, r4, r3
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	2030      	movs	r0, #48	; 0x30
 8009cb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cba:	4422      	add	r2, r4
 8009cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	e7c7      	b.n	8009c58 <_printf_common+0x58>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	4622      	mov	r2, r4
 8009ccc:	4649      	mov	r1, r9
 8009cce:	4638      	mov	r0, r7
 8009cd0:	47c0      	blx	r8
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	d0e6      	beq.n	8009ca4 <_printf_common+0xa4>
 8009cd6:	3601      	adds	r6, #1
 8009cd8:	e7d9      	b.n	8009c8e <_printf_common+0x8e>
	...

08009cdc <_printf_i>:
 8009cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce0:	7e0f      	ldrb	r7, [r1, #24]
 8009ce2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ce4:	2f78      	cmp	r7, #120	; 0x78
 8009ce6:	4691      	mov	r9, r2
 8009ce8:	4680      	mov	r8, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	469a      	mov	sl, r3
 8009cee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cf2:	d807      	bhi.n	8009d04 <_printf_i+0x28>
 8009cf4:	2f62      	cmp	r7, #98	; 0x62
 8009cf6:	d80a      	bhi.n	8009d0e <_printf_i+0x32>
 8009cf8:	2f00      	cmp	r7, #0
 8009cfa:	f000 80d8 	beq.w	8009eae <_printf_i+0x1d2>
 8009cfe:	2f58      	cmp	r7, #88	; 0x58
 8009d00:	f000 80a3 	beq.w	8009e4a <_printf_i+0x16e>
 8009d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d0c:	e03a      	b.n	8009d84 <_printf_i+0xa8>
 8009d0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d12:	2b15      	cmp	r3, #21
 8009d14:	d8f6      	bhi.n	8009d04 <_printf_i+0x28>
 8009d16:	a101      	add	r1, pc, #4	; (adr r1, 8009d1c <_printf_i+0x40>)
 8009d18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d1c:	08009d75 	.word	0x08009d75
 8009d20:	08009d89 	.word	0x08009d89
 8009d24:	08009d05 	.word	0x08009d05
 8009d28:	08009d05 	.word	0x08009d05
 8009d2c:	08009d05 	.word	0x08009d05
 8009d30:	08009d05 	.word	0x08009d05
 8009d34:	08009d89 	.word	0x08009d89
 8009d38:	08009d05 	.word	0x08009d05
 8009d3c:	08009d05 	.word	0x08009d05
 8009d40:	08009d05 	.word	0x08009d05
 8009d44:	08009d05 	.word	0x08009d05
 8009d48:	08009e95 	.word	0x08009e95
 8009d4c:	08009db9 	.word	0x08009db9
 8009d50:	08009e77 	.word	0x08009e77
 8009d54:	08009d05 	.word	0x08009d05
 8009d58:	08009d05 	.word	0x08009d05
 8009d5c:	08009eb7 	.word	0x08009eb7
 8009d60:	08009d05 	.word	0x08009d05
 8009d64:	08009db9 	.word	0x08009db9
 8009d68:	08009d05 	.word	0x08009d05
 8009d6c:	08009d05 	.word	0x08009d05
 8009d70:	08009e7f 	.word	0x08009e7f
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	1d1a      	adds	r2, r3, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	602a      	str	r2, [r5, #0]
 8009d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d84:	2301      	movs	r3, #1
 8009d86:	e0a3      	b.n	8009ed0 <_printf_i+0x1f4>
 8009d88:	6820      	ldr	r0, [r4, #0]
 8009d8a:	6829      	ldr	r1, [r5, #0]
 8009d8c:	0606      	lsls	r6, r0, #24
 8009d8e:	f101 0304 	add.w	r3, r1, #4
 8009d92:	d50a      	bpl.n	8009daa <_printf_i+0xce>
 8009d94:	680e      	ldr	r6, [r1, #0]
 8009d96:	602b      	str	r3, [r5, #0]
 8009d98:	2e00      	cmp	r6, #0
 8009d9a:	da03      	bge.n	8009da4 <_printf_i+0xc8>
 8009d9c:	232d      	movs	r3, #45	; 0x2d
 8009d9e:	4276      	negs	r6, r6
 8009da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da4:	485e      	ldr	r0, [pc, #376]	; (8009f20 <_printf_i+0x244>)
 8009da6:	230a      	movs	r3, #10
 8009da8:	e019      	b.n	8009dde <_printf_i+0x102>
 8009daa:	680e      	ldr	r6, [r1, #0]
 8009dac:	602b      	str	r3, [r5, #0]
 8009dae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009db2:	bf18      	it	ne
 8009db4:	b236      	sxthne	r6, r6
 8009db6:	e7ef      	b.n	8009d98 <_printf_i+0xbc>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	6820      	ldr	r0, [r4, #0]
 8009dbc:	1d19      	adds	r1, r3, #4
 8009dbe:	6029      	str	r1, [r5, #0]
 8009dc0:	0601      	lsls	r1, r0, #24
 8009dc2:	d501      	bpl.n	8009dc8 <_printf_i+0xec>
 8009dc4:	681e      	ldr	r6, [r3, #0]
 8009dc6:	e002      	b.n	8009dce <_printf_i+0xf2>
 8009dc8:	0646      	lsls	r6, r0, #25
 8009dca:	d5fb      	bpl.n	8009dc4 <_printf_i+0xe8>
 8009dcc:	881e      	ldrh	r6, [r3, #0]
 8009dce:	4854      	ldr	r0, [pc, #336]	; (8009f20 <_printf_i+0x244>)
 8009dd0:	2f6f      	cmp	r7, #111	; 0x6f
 8009dd2:	bf0c      	ite	eq
 8009dd4:	2308      	moveq	r3, #8
 8009dd6:	230a      	movne	r3, #10
 8009dd8:	2100      	movs	r1, #0
 8009dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dde:	6865      	ldr	r5, [r4, #4]
 8009de0:	60a5      	str	r5, [r4, #8]
 8009de2:	2d00      	cmp	r5, #0
 8009de4:	bfa2      	ittt	ge
 8009de6:	6821      	ldrge	r1, [r4, #0]
 8009de8:	f021 0104 	bicge.w	r1, r1, #4
 8009dec:	6021      	strge	r1, [r4, #0]
 8009dee:	b90e      	cbnz	r6, 8009df4 <_printf_i+0x118>
 8009df0:	2d00      	cmp	r5, #0
 8009df2:	d04d      	beq.n	8009e90 <_printf_i+0x1b4>
 8009df4:	4615      	mov	r5, r2
 8009df6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009dfa:	fb03 6711 	mls	r7, r3, r1, r6
 8009dfe:	5dc7      	ldrb	r7, [r0, r7]
 8009e00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e04:	4637      	mov	r7, r6
 8009e06:	42bb      	cmp	r3, r7
 8009e08:	460e      	mov	r6, r1
 8009e0a:	d9f4      	bls.n	8009df6 <_printf_i+0x11a>
 8009e0c:	2b08      	cmp	r3, #8
 8009e0e:	d10b      	bne.n	8009e28 <_printf_i+0x14c>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	07de      	lsls	r6, r3, #31
 8009e14:	d508      	bpl.n	8009e28 <_printf_i+0x14c>
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	6861      	ldr	r1, [r4, #4]
 8009e1a:	4299      	cmp	r1, r3
 8009e1c:	bfde      	ittt	le
 8009e1e:	2330      	movle	r3, #48	; 0x30
 8009e20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e28:	1b52      	subs	r2, r2, r5
 8009e2a:	6122      	str	r2, [r4, #16]
 8009e2c:	f8cd a000 	str.w	sl, [sp]
 8009e30:	464b      	mov	r3, r9
 8009e32:	aa03      	add	r2, sp, #12
 8009e34:	4621      	mov	r1, r4
 8009e36:	4640      	mov	r0, r8
 8009e38:	f7ff fee2 	bl	8009c00 <_printf_common>
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	d14c      	bne.n	8009eda <_printf_i+0x1fe>
 8009e40:	f04f 30ff 	mov.w	r0, #4294967295
 8009e44:	b004      	add	sp, #16
 8009e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4a:	4835      	ldr	r0, [pc, #212]	; (8009f20 <_printf_i+0x244>)
 8009e4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e50:	6829      	ldr	r1, [r5, #0]
 8009e52:	6823      	ldr	r3, [r4, #0]
 8009e54:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e58:	6029      	str	r1, [r5, #0]
 8009e5a:	061d      	lsls	r5, r3, #24
 8009e5c:	d514      	bpl.n	8009e88 <_printf_i+0x1ac>
 8009e5e:	07df      	lsls	r7, r3, #31
 8009e60:	bf44      	itt	mi
 8009e62:	f043 0320 	orrmi.w	r3, r3, #32
 8009e66:	6023      	strmi	r3, [r4, #0]
 8009e68:	b91e      	cbnz	r6, 8009e72 <_printf_i+0x196>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	f023 0320 	bic.w	r3, r3, #32
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	2310      	movs	r3, #16
 8009e74:	e7b0      	b.n	8009dd8 <_printf_i+0xfc>
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	f043 0320 	orr.w	r3, r3, #32
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	2378      	movs	r3, #120	; 0x78
 8009e80:	4828      	ldr	r0, [pc, #160]	; (8009f24 <_printf_i+0x248>)
 8009e82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e86:	e7e3      	b.n	8009e50 <_printf_i+0x174>
 8009e88:	0659      	lsls	r1, r3, #25
 8009e8a:	bf48      	it	mi
 8009e8c:	b2b6      	uxthmi	r6, r6
 8009e8e:	e7e6      	b.n	8009e5e <_printf_i+0x182>
 8009e90:	4615      	mov	r5, r2
 8009e92:	e7bb      	b.n	8009e0c <_printf_i+0x130>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	6826      	ldr	r6, [r4, #0]
 8009e98:	6961      	ldr	r1, [r4, #20]
 8009e9a:	1d18      	adds	r0, r3, #4
 8009e9c:	6028      	str	r0, [r5, #0]
 8009e9e:	0635      	lsls	r5, r6, #24
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	d501      	bpl.n	8009ea8 <_printf_i+0x1cc>
 8009ea4:	6019      	str	r1, [r3, #0]
 8009ea6:	e002      	b.n	8009eae <_printf_i+0x1d2>
 8009ea8:	0670      	lsls	r0, r6, #25
 8009eaa:	d5fb      	bpl.n	8009ea4 <_printf_i+0x1c8>
 8009eac:	8019      	strh	r1, [r3, #0]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	6123      	str	r3, [r4, #16]
 8009eb2:	4615      	mov	r5, r2
 8009eb4:	e7ba      	b.n	8009e2c <_printf_i+0x150>
 8009eb6:	682b      	ldr	r3, [r5, #0]
 8009eb8:	1d1a      	adds	r2, r3, #4
 8009eba:	602a      	str	r2, [r5, #0]
 8009ebc:	681d      	ldr	r5, [r3, #0]
 8009ebe:	6862      	ldr	r2, [r4, #4]
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	f7f6 f98c 	bl	80001e0 <memchr>
 8009ec8:	b108      	cbz	r0, 8009ece <_printf_i+0x1f2>
 8009eca:	1b40      	subs	r0, r0, r5
 8009ecc:	6060      	str	r0, [r4, #4]
 8009ece:	6863      	ldr	r3, [r4, #4]
 8009ed0:	6123      	str	r3, [r4, #16]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ed8:	e7a8      	b.n	8009e2c <_printf_i+0x150>
 8009eda:	6923      	ldr	r3, [r4, #16]
 8009edc:	462a      	mov	r2, r5
 8009ede:	4649      	mov	r1, r9
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	47d0      	blx	sl
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d0ab      	beq.n	8009e40 <_printf_i+0x164>
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	079b      	lsls	r3, r3, #30
 8009eec:	d413      	bmi.n	8009f16 <_printf_i+0x23a>
 8009eee:	68e0      	ldr	r0, [r4, #12]
 8009ef0:	9b03      	ldr	r3, [sp, #12]
 8009ef2:	4298      	cmp	r0, r3
 8009ef4:	bfb8      	it	lt
 8009ef6:	4618      	movlt	r0, r3
 8009ef8:	e7a4      	b.n	8009e44 <_printf_i+0x168>
 8009efa:	2301      	movs	r3, #1
 8009efc:	4632      	mov	r2, r6
 8009efe:	4649      	mov	r1, r9
 8009f00:	4640      	mov	r0, r8
 8009f02:	47d0      	blx	sl
 8009f04:	3001      	adds	r0, #1
 8009f06:	d09b      	beq.n	8009e40 <_printf_i+0x164>
 8009f08:	3501      	adds	r5, #1
 8009f0a:	68e3      	ldr	r3, [r4, #12]
 8009f0c:	9903      	ldr	r1, [sp, #12]
 8009f0e:	1a5b      	subs	r3, r3, r1
 8009f10:	42ab      	cmp	r3, r5
 8009f12:	dcf2      	bgt.n	8009efa <_printf_i+0x21e>
 8009f14:	e7eb      	b.n	8009eee <_printf_i+0x212>
 8009f16:	2500      	movs	r5, #0
 8009f18:	f104 0619 	add.w	r6, r4, #25
 8009f1c:	e7f5      	b.n	8009f0a <_printf_i+0x22e>
 8009f1e:	bf00      	nop
 8009f20:	0800c029 	.word	0x0800c029
 8009f24:	0800c03a 	.word	0x0800c03a

08009f28 <memmove>:
 8009f28:	4288      	cmp	r0, r1
 8009f2a:	b510      	push	{r4, lr}
 8009f2c:	eb01 0402 	add.w	r4, r1, r2
 8009f30:	d902      	bls.n	8009f38 <memmove+0x10>
 8009f32:	4284      	cmp	r4, r0
 8009f34:	4623      	mov	r3, r4
 8009f36:	d807      	bhi.n	8009f48 <memmove+0x20>
 8009f38:	1e43      	subs	r3, r0, #1
 8009f3a:	42a1      	cmp	r1, r4
 8009f3c:	d008      	beq.n	8009f50 <memmove+0x28>
 8009f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f46:	e7f8      	b.n	8009f3a <memmove+0x12>
 8009f48:	4402      	add	r2, r0
 8009f4a:	4601      	mov	r1, r0
 8009f4c:	428a      	cmp	r2, r1
 8009f4e:	d100      	bne.n	8009f52 <memmove+0x2a>
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f5a:	e7f7      	b.n	8009f4c <memmove+0x24>

08009f5c <_realloc_r>:
 8009f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f60:	4680      	mov	r8, r0
 8009f62:	4614      	mov	r4, r2
 8009f64:	460e      	mov	r6, r1
 8009f66:	b921      	cbnz	r1, 8009f72 <_realloc_r+0x16>
 8009f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	f7ff bbef 	b.w	8009750 <_malloc_r>
 8009f72:	b92a      	cbnz	r2, 8009f80 <_realloc_r+0x24>
 8009f74:	f7ff fc9c 	bl	80098b0 <_free_r>
 8009f78:	4625      	mov	r5, r4
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f80:	f000 f81b 	bl	8009fba <_malloc_usable_size_r>
 8009f84:	4284      	cmp	r4, r0
 8009f86:	4607      	mov	r7, r0
 8009f88:	d802      	bhi.n	8009f90 <_realloc_r+0x34>
 8009f8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f8e:	d812      	bhi.n	8009fb6 <_realloc_r+0x5a>
 8009f90:	4621      	mov	r1, r4
 8009f92:	4640      	mov	r0, r8
 8009f94:	f7ff fbdc 	bl	8009750 <_malloc_r>
 8009f98:	4605      	mov	r5, r0
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d0ed      	beq.n	8009f7a <_realloc_r+0x1e>
 8009f9e:	42bc      	cmp	r4, r7
 8009fa0:	4622      	mov	r2, r4
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	bf28      	it	cs
 8009fa6:	463a      	movcs	r2, r7
 8009fa8:	f7ff fb9c 	bl	80096e4 <memcpy>
 8009fac:	4631      	mov	r1, r6
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f7ff fc7e 	bl	80098b0 <_free_r>
 8009fb4:	e7e1      	b.n	8009f7a <_realloc_r+0x1e>
 8009fb6:	4635      	mov	r5, r6
 8009fb8:	e7df      	b.n	8009f7a <_realloc_r+0x1e>

08009fba <_malloc_usable_size_r>:
 8009fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fbe:	1f18      	subs	r0, r3, #4
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	bfbc      	itt	lt
 8009fc4:	580b      	ldrlt	r3, [r1, r0]
 8009fc6:	18c0      	addlt	r0, r0, r3
 8009fc8:	4770      	bx	lr
 8009fca:	0000      	movs	r0, r0
 8009fcc:	0000      	movs	r0, r0
	...

08009fd0 <cos>:
 8009fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fd2:	ec53 2b10 	vmov	r2, r3, d0
 8009fd6:	4826      	ldr	r0, [pc, #152]	; (800a070 <cos+0xa0>)
 8009fd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009fdc:	4281      	cmp	r1, r0
 8009fde:	dc06      	bgt.n	8009fee <cos+0x1e>
 8009fe0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a068 <cos+0x98>
 8009fe4:	b005      	add	sp, #20
 8009fe6:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fea:	f001 b8fd 	b.w	800b1e8 <__kernel_cos>
 8009fee:	4821      	ldr	r0, [pc, #132]	; (800a074 <cos+0xa4>)
 8009ff0:	4281      	cmp	r1, r0
 8009ff2:	dd09      	ble.n	800a008 <cos+0x38>
 8009ff4:	ee10 0a10 	vmov	r0, s0
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	f7f6 f945 	bl	8000288 <__aeabi_dsub>
 8009ffe:	ec41 0b10 	vmov	d0, r0, r1
 800a002:	b005      	add	sp, #20
 800a004:	f85d fb04 	ldr.w	pc, [sp], #4
 800a008:	4668      	mov	r0, sp
 800a00a:	f000 fe2d 	bl	800ac68 <__ieee754_rem_pio2>
 800a00e:	f000 0003 	and.w	r0, r0, #3
 800a012:	2801      	cmp	r0, #1
 800a014:	d00b      	beq.n	800a02e <cos+0x5e>
 800a016:	2802      	cmp	r0, #2
 800a018:	d016      	beq.n	800a048 <cos+0x78>
 800a01a:	b9e0      	cbnz	r0, 800a056 <cos+0x86>
 800a01c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a020:	ed9d 0b00 	vldr	d0, [sp]
 800a024:	f001 f8e0 	bl	800b1e8 <__kernel_cos>
 800a028:	ec51 0b10 	vmov	r0, r1, d0
 800a02c:	e7e7      	b.n	8009ffe <cos+0x2e>
 800a02e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a032:	ed9d 0b00 	vldr	d0, [sp]
 800a036:	f001 fcef 	bl	800ba18 <__kernel_sin>
 800a03a:	ec53 2b10 	vmov	r2, r3, d0
 800a03e:	ee10 0a10 	vmov	r0, s0
 800a042:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a046:	e7da      	b.n	8009ffe <cos+0x2e>
 800a048:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a04c:	ed9d 0b00 	vldr	d0, [sp]
 800a050:	f001 f8ca 	bl	800b1e8 <__kernel_cos>
 800a054:	e7f1      	b.n	800a03a <cos+0x6a>
 800a056:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a05a:	ed9d 0b00 	vldr	d0, [sp]
 800a05e:	2001      	movs	r0, #1
 800a060:	f001 fcda 	bl	800ba18 <__kernel_sin>
 800a064:	e7e0      	b.n	800a028 <cos+0x58>
 800a066:	bf00      	nop
	...
 800a070:	3fe921fb 	.word	0x3fe921fb
 800a074:	7fefffff 	.word	0x7fefffff

0800a078 <sin>:
 800a078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a07a:	ec53 2b10 	vmov	r2, r3, d0
 800a07e:	4828      	ldr	r0, [pc, #160]	; (800a120 <sin+0xa8>)
 800a080:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a084:	4281      	cmp	r1, r0
 800a086:	dc07      	bgt.n	800a098 <sin+0x20>
 800a088:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a118 <sin+0xa0>
 800a08c:	2000      	movs	r0, #0
 800a08e:	b005      	add	sp, #20
 800a090:	f85d eb04 	ldr.w	lr, [sp], #4
 800a094:	f001 bcc0 	b.w	800ba18 <__kernel_sin>
 800a098:	4822      	ldr	r0, [pc, #136]	; (800a124 <sin+0xac>)
 800a09a:	4281      	cmp	r1, r0
 800a09c:	dd09      	ble.n	800a0b2 <sin+0x3a>
 800a09e:	ee10 0a10 	vmov	r0, s0
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	f7f6 f8f0 	bl	8000288 <__aeabi_dsub>
 800a0a8:	ec41 0b10 	vmov	d0, r0, r1
 800a0ac:	b005      	add	sp, #20
 800a0ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0b2:	4668      	mov	r0, sp
 800a0b4:	f000 fdd8 	bl	800ac68 <__ieee754_rem_pio2>
 800a0b8:	f000 0003 	and.w	r0, r0, #3
 800a0bc:	2801      	cmp	r0, #1
 800a0be:	d00c      	beq.n	800a0da <sin+0x62>
 800a0c0:	2802      	cmp	r0, #2
 800a0c2:	d011      	beq.n	800a0e8 <sin+0x70>
 800a0c4:	b9f0      	cbnz	r0, 800a104 <sin+0x8c>
 800a0c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0ca:	ed9d 0b00 	vldr	d0, [sp]
 800a0ce:	2001      	movs	r0, #1
 800a0d0:	f001 fca2 	bl	800ba18 <__kernel_sin>
 800a0d4:	ec51 0b10 	vmov	r0, r1, d0
 800a0d8:	e7e6      	b.n	800a0a8 <sin+0x30>
 800a0da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0de:	ed9d 0b00 	vldr	d0, [sp]
 800a0e2:	f001 f881 	bl	800b1e8 <__kernel_cos>
 800a0e6:	e7f5      	b.n	800a0d4 <sin+0x5c>
 800a0e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0ec:	ed9d 0b00 	vldr	d0, [sp]
 800a0f0:	2001      	movs	r0, #1
 800a0f2:	f001 fc91 	bl	800ba18 <__kernel_sin>
 800a0f6:	ec53 2b10 	vmov	r2, r3, d0
 800a0fa:	ee10 0a10 	vmov	r0, s0
 800a0fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a102:	e7d1      	b.n	800a0a8 <sin+0x30>
 800a104:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a108:	ed9d 0b00 	vldr	d0, [sp]
 800a10c:	f001 f86c 	bl	800b1e8 <__kernel_cos>
 800a110:	e7f1      	b.n	800a0f6 <sin+0x7e>
 800a112:	bf00      	nop
 800a114:	f3af 8000 	nop.w
	...
 800a120:	3fe921fb 	.word	0x3fe921fb
 800a124:	7fefffff 	.word	0x7fefffff

0800a128 <pow>:
 800a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12a:	ed2d 8b02 	vpush	{d8}
 800a12e:	eeb0 8a40 	vmov.f32	s16, s0
 800a132:	eef0 8a60 	vmov.f32	s17, s1
 800a136:	ec55 4b11 	vmov	r4, r5, d1
 800a13a:	f000 f865 	bl	800a208 <__ieee754_pow>
 800a13e:	4622      	mov	r2, r4
 800a140:	462b      	mov	r3, r5
 800a142:	4620      	mov	r0, r4
 800a144:	4629      	mov	r1, r5
 800a146:	ec57 6b10 	vmov	r6, r7, d0
 800a14a:	f7f6 fcef 	bl	8000b2c <__aeabi_dcmpun>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d13b      	bne.n	800a1ca <pow+0xa2>
 800a152:	ec51 0b18 	vmov	r0, r1, d8
 800a156:	2200      	movs	r2, #0
 800a158:	2300      	movs	r3, #0
 800a15a:	f7f6 fcb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a15e:	b1b8      	cbz	r0, 800a190 <pow+0x68>
 800a160:	2200      	movs	r2, #0
 800a162:	2300      	movs	r3, #0
 800a164:	4620      	mov	r0, r4
 800a166:	4629      	mov	r1, r5
 800a168:	f7f6 fcae 	bl	8000ac8 <__aeabi_dcmpeq>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d146      	bne.n	800a1fe <pow+0xd6>
 800a170:	ec45 4b10 	vmov	d0, r4, r5
 800a174:	f001 fd47 	bl	800bc06 <finite>
 800a178:	b338      	cbz	r0, 800a1ca <pow+0xa2>
 800a17a:	2200      	movs	r2, #0
 800a17c:	2300      	movs	r3, #0
 800a17e:	4620      	mov	r0, r4
 800a180:	4629      	mov	r1, r5
 800a182:	f7f6 fcab 	bl	8000adc <__aeabi_dcmplt>
 800a186:	b300      	cbz	r0, 800a1ca <pow+0xa2>
 800a188:	f7ff fa80 	bl	800968c <__errno>
 800a18c:	2322      	movs	r3, #34	; 0x22
 800a18e:	e01b      	b.n	800a1c8 <pow+0xa0>
 800a190:	ec47 6b10 	vmov	d0, r6, r7
 800a194:	f001 fd37 	bl	800bc06 <finite>
 800a198:	b9e0      	cbnz	r0, 800a1d4 <pow+0xac>
 800a19a:	eeb0 0a48 	vmov.f32	s0, s16
 800a19e:	eef0 0a68 	vmov.f32	s1, s17
 800a1a2:	f001 fd30 	bl	800bc06 <finite>
 800a1a6:	b1a8      	cbz	r0, 800a1d4 <pow+0xac>
 800a1a8:	ec45 4b10 	vmov	d0, r4, r5
 800a1ac:	f001 fd2b 	bl	800bc06 <finite>
 800a1b0:	b180      	cbz	r0, 800a1d4 <pow+0xac>
 800a1b2:	4632      	mov	r2, r6
 800a1b4:	463b      	mov	r3, r7
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	4639      	mov	r1, r7
 800a1ba:	f7f6 fcb7 	bl	8000b2c <__aeabi_dcmpun>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d0e2      	beq.n	800a188 <pow+0x60>
 800a1c2:	f7ff fa63 	bl	800968c <__errno>
 800a1c6:	2321      	movs	r3, #33	; 0x21
 800a1c8:	6003      	str	r3, [r0, #0]
 800a1ca:	ecbd 8b02 	vpop	{d8}
 800a1ce:	ec47 6b10 	vmov	d0, r6, r7
 800a1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	4630      	mov	r0, r6
 800a1da:	4639      	mov	r1, r7
 800a1dc:	f7f6 fc74 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d0f2      	beq.n	800a1ca <pow+0xa2>
 800a1e4:	eeb0 0a48 	vmov.f32	s0, s16
 800a1e8:	eef0 0a68 	vmov.f32	s1, s17
 800a1ec:	f001 fd0b 	bl	800bc06 <finite>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d0ea      	beq.n	800a1ca <pow+0xa2>
 800a1f4:	ec45 4b10 	vmov	d0, r4, r5
 800a1f8:	f001 fd05 	bl	800bc06 <finite>
 800a1fc:	e7c3      	b.n	800a186 <pow+0x5e>
 800a1fe:	4f01      	ldr	r7, [pc, #4]	; (800a204 <pow+0xdc>)
 800a200:	2600      	movs	r6, #0
 800a202:	e7e2      	b.n	800a1ca <pow+0xa2>
 800a204:	3ff00000 	.word	0x3ff00000

0800a208 <__ieee754_pow>:
 800a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	ed2d 8b06 	vpush	{d8-d10}
 800a210:	b089      	sub	sp, #36	; 0x24
 800a212:	ed8d 1b00 	vstr	d1, [sp]
 800a216:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a21a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a21e:	ea58 0102 	orrs.w	r1, r8, r2
 800a222:	ec57 6b10 	vmov	r6, r7, d0
 800a226:	d115      	bne.n	800a254 <__ieee754_pow+0x4c>
 800a228:	19b3      	adds	r3, r6, r6
 800a22a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a22e:	4152      	adcs	r2, r2
 800a230:	4299      	cmp	r1, r3
 800a232:	4b89      	ldr	r3, [pc, #548]	; (800a458 <__ieee754_pow+0x250>)
 800a234:	4193      	sbcs	r3, r2
 800a236:	f080 84d2 	bcs.w	800abde <__ieee754_pow+0x9d6>
 800a23a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a23e:	4630      	mov	r0, r6
 800a240:	4639      	mov	r1, r7
 800a242:	f7f6 f823 	bl	800028c <__adddf3>
 800a246:	ec41 0b10 	vmov	d0, r0, r1
 800a24a:	b009      	add	sp, #36	; 0x24
 800a24c:	ecbd 8b06 	vpop	{d8-d10}
 800a250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a254:	4b81      	ldr	r3, [pc, #516]	; (800a45c <__ieee754_pow+0x254>)
 800a256:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a25a:	429c      	cmp	r4, r3
 800a25c:	ee10 aa10 	vmov	sl, s0
 800a260:	463d      	mov	r5, r7
 800a262:	dc06      	bgt.n	800a272 <__ieee754_pow+0x6a>
 800a264:	d101      	bne.n	800a26a <__ieee754_pow+0x62>
 800a266:	2e00      	cmp	r6, #0
 800a268:	d1e7      	bne.n	800a23a <__ieee754_pow+0x32>
 800a26a:	4598      	cmp	r8, r3
 800a26c:	dc01      	bgt.n	800a272 <__ieee754_pow+0x6a>
 800a26e:	d10f      	bne.n	800a290 <__ieee754_pow+0x88>
 800a270:	b172      	cbz	r2, 800a290 <__ieee754_pow+0x88>
 800a272:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a276:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a27a:	ea55 050a 	orrs.w	r5, r5, sl
 800a27e:	d1dc      	bne.n	800a23a <__ieee754_pow+0x32>
 800a280:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a284:	18db      	adds	r3, r3, r3
 800a286:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a28a:	4152      	adcs	r2, r2
 800a28c:	429d      	cmp	r5, r3
 800a28e:	e7d0      	b.n	800a232 <__ieee754_pow+0x2a>
 800a290:	2d00      	cmp	r5, #0
 800a292:	da3b      	bge.n	800a30c <__ieee754_pow+0x104>
 800a294:	4b72      	ldr	r3, [pc, #456]	; (800a460 <__ieee754_pow+0x258>)
 800a296:	4598      	cmp	r8, r3
 800a298:	dc51      	bgt.n	800a33e <__ieee754_pow+0x136>
 800a29a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a29e:	4598      	cmp	r8, r3
 800a2a0:	f340 84ac 	ble.w	800abfc <__ieee754_pow+0x9f4>
 800a2a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a2a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a2ac:	2b14      	cmp	r3, #20
 800a2ae:	dd0f      	ble.n	800a2d0 <__ieee754_pow+0xc8>
 800a2b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a2b4:	fa22 f103 	lsr.w	r1, r2, r3
 800a2b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	f040 849d 	bne.w	800abfc <__ieee754_pow+0x9f4>
 800a2c2:	f001 0101 	and.w	r1, r1, #1
 800a2c6:	f1c1 0302 	rsb	r3, r1, #2
 800a2ca:	9304      	str	r3, [sp, #16]
 800a2cc:	b182      	cbz	r2, 800a2f0 <__ieee754_pow+0xe8>
 800a2ce:	e05f      	b.n	800a390 <__ieee754_pow+0x188>
 800a2d0:	2a00      	cmp	r2, #0
 800a2d2:	d15b      	bne.n	800a38c <__ieee754_pow+0x184>
 800a2d4:	f1c3 0314 	rsb	r3, r3, #20
 800a2d8:	fa48 f103 	asr.w	r1, r8, r3
 800a2dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e0:	4543      	cmp	r3, r8
 800a2e2:	f040 8488 	bne.w	800abf6 <__ieee754_pow+0x9ee>
 800a2e6:	f001 0101 	and.w	r1, r1, #1
 800a2ea:	f1c1 0302 	rsb	r3, r1, #2
 800a2ee:	9304      	str	r3, [sp, #16]
 800a2f0:	4b5c      	ldr	r3, [pc, #368]	; (800a464 <__ieee754_pow+0x25c>)
 800a2f2:	4598      	cmp	r8, r3
 800a2f4:	d132      	bne.n	800a35c <__ieee754_pow+0x154>
 800a2f6:	f1b9 0f00 	cmp.w	r9, #0
 800a2fa:	f280 8478 	bge.w	800abee <__ieee754_pow+0x9e6>
 800a2fe:	4959      	ldr	r1, [pc, #356]	; (800a464 <__ieee754_pow+0x25c>)
 800a300:	4632      	mov	r2, r6
 800a302:	463b      	mov	r3, r7
 800a304:	2000      	movs	r0, #0
 800a306:	f7f6 faa1 	bl	800084c <__aeabi_ddiv>
 800a30a:	e79c      	b.n	800a246 <__ieee754_pow+0x3e>
 800a30c:	2300      	movs	r3, #0
 800a30e:	9304      	str	r3, [sp, #16]
 800a310:	2a00      	cmp	r2, #0
 800a312:	d13d      	bne.n	800a390 <__ieee754_pow+0x188>
 800a314:	4b51      	ldr	r3, [pc, #324]	; (800a45c <__ieee754_pow+0x254>)
 800a316:	4598      	cmp	r8, r3
 800a318:	d1ea      	bne.n	800a2f0 <__ieee754_pow+0xe8>
 800a31a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a31e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a322:	ea53 030a 	orrs.w	r3, r3, sl
 800a326:	f000 845a 	beq.w	800abde <__ieee754_pow+0x9d6>
 800a32a:	4b4f      	ldr	r3, [pc, #316]	; (800a468 <__ieee754_pow+0x260>)
 800a32c:	429c      	cmp	r4, r3
 800a32e:	dd08      	ble.n	800a342 <__ieee754_pow+0x13a>
 800a330:	f1b9 0f00 	cmp.w	r9, #0
 800a334:	f2c0 8457 	blt.w	800abe6 <__ieee754_pow+0x9de>
 800a338:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a33c:	e783      	b.n	800a246 <__ieee754_pow+0x3e>
 800a33e:	2302      	movs	r3, #2
 800a340:	e7e5      	b.n	800a30e <__ieee754_pow+0x106>
 800a342:	f1b9 0f00 	cmp.w	r9, #0
 800a346:	f04f 0000 	mov.w	r0, #0
 800a34a:	f04f 0100 	mov.w	r1, #0
 800a34e:	f6bf af7a 	bge.w	800a246 <__ieee754_pow+0x3e>
 800a352:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a356:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a35a:	e774      	b.n	800a246 <__ieee754_pow+0x3e>
 800a35c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a360:	d106      	bne.n	800a370 <__ieee754_pow+0x168>
 800a362:	4632      	mov	r2, r6
 800a364:	463b      	mov	r3, r7
 800a366:	4630      	mov	r0, r6
 800a368:	4639      	mov	r1, r7
 800a36a:	f7f6 f945 	bl	80005f8 <__aeabi_dmul>
 800a36e:	e76a      	b.n	800a246 <__ieee754_pow+0x3e>
 800a370:	4b3e      	ldr	r3, [pc, #248]	; (800a46c <__ieee754_pow+0x264>)
 800a372:	4599      	cmp	r9, r3
 800a374:	d10c      	bne.n	800a390 <__ieee754_pow+0x188>
 800a376:	2d00      	cmp	r5, #0
 800a378:	db0a      	blt.n	800a390 <__ieee754_pow+0x188>
 800a37a:	ec47 6b10 	vmov	d0, r6, r7
 800a37e:	b009      	add	sp, #36	; 0x24
 800a380:	ecbd 8b06 	vpop	{d8-d10}
 800a384:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a388:	f000 be7a 	b.w	800b080 <__ieee754_sqrt>
 800a38c:	2300      	movs	r3, #0
 800a38e:	9304      	str	r3, [sp, #16]
 800a390:	ec47 6b10 	vmov	d0, r6, r7
 800a394:	f001 fc2e 	bl	800bbf4 <fabs>
 800a398:	ec51 0b10 	vmov	r0, r1, d0
 800a39c:	f1ba 0f00 	cmp.w	sl, #0
 800a3a0:	d129      	bne.n	800a3f6 <__ieee754_pow+0x1ee>
 800a3a2:	b124      	cbz	r4, 800a3ae <__ieee754_pow+0x1a6>
 800a3a4:	4b2f      	ldr	r3, [pc, #188]	; (800a464 <__ieee754_pow+0x25c>)
 800a3a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d123      	bne.n	800a3f6 <__ieee754_pow+0x1ee>
 800a3ae:	f1b9 0f00 	cmp.w	r9, #0
 800a3b2:	da05      	bge.n	800a3c0 <__ieee754_pow+0x1b8>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	492a      	ldr	r1, [pc, #168]	; (800a464 <__ieee754_pow+0x25c>)
 800a3bc:	f7f6 fa46 	bl	800084c <__aeabi_ddiv>
 800a3c0:	2d00      	cmp	r5, #0
 800a3c2:	f6bf af40 	bge.w	800a246 <__ieee754_pow+0x3e>
 800a3c6:	9b04      	ldr	r3, [sp, #16]
 800a3c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a3cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a3d0:	4323      	orrs	r3, r4
 800a3d2:	d108      	bne.n	800a3e6 <__ieee754_pow+0x1de>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4610      	mov	r0, r2
 800a3da:	4619      	mov	r1, r3
 800a3dc:	f7f5 ff54 	bl	8000288 <__aeabi_dsub>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	e78f      	b.n	800a306 <__ieee754_pow+0xfe>
 800a3e6:	9b04      	ldr	r3, [sp, #16]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	f47f af2c 	bne.w	800a246 <__ieee754_pow+0x3e>
 800a3ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	e727      	b.n	800a246 <__ieee754_pow+0x3e>
 800a3f6:	0feb      	lsrs	r3, r5, #31
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	9306      	str	r3, [sp, #24]
 800a3fc:	9a06      	ldr	r2, [sp, #24]
 800a3fe:	9b04      	ldr	r3, [sp, #16]
 800a400:	4313      	orrs	r3, r2
 800a402:	d102      	bne.n	800a40a <__ieee754_pow+0x202>
 800a404:	4632      	mov	r2, r6
 800a406:	463b      	mov	r3, r7
 800a408:	e7e6      	b.n	800a3d8 <__ieee754_pow+0x1d0>
 800a40a:	4b19      	ldr	r3, [pc, #100]	; (800a470 <__ieee754_pow+0x268>)
 800a40c:	4598      	cmp	r8, r3
 800a40e:	f340 80fb 	ble.w	800a608 <__ieee754_pow+0x400>
 800a412:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a416:	4598      	cmp	r8, r3
 800a418:	4b13      	ldr	r3, [pc, #76]	; (800a468 <__ieee754_pow+0x260>)
 800a41a:	dd0c      	ble.n	800a436 <__ieee754_pow+0x22e>
 800a41c:	429c      	cmp	r4, r3
 800a41e:	dc0f      	bgt.n	800a440 <__ieee754_pow+0x238>
 800a420:	f1b9 0f00 	cmp.w	r9, #0
 800a424:	da0f      	bge.n	800a446 <__ieee754_pow+0x23e>
 800a426:	2000      	movs	r0, #0
 800a428:	b009      	add	sp, #36	; 0x24
 800a42a:	ecbd 8b06 	vpop	{d8-d10}
 800a42e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a432:	f001 bbd6 	b.w	800bbe2 <__math_oflow>
 800a436:	429c      	cmp	r4, r3
 800a438:	dbf2      	blt.n	800a420 <__ieee754_pow+0x218>
 800a43a:	4b0a      	ldr	r3, [pc, #40]	; (800a464 <__ieee754_pow+0x25c>)
 800a43c:	429c      	cmp	r4, r3
 800a43e:	dd19      	ble.n	800a474 <__ieee754_pow+0x26c>
 800a440:	f1b9 0f00 	cmp.w	r9, #0
 800a444:	dcef      	bgt.n	800a426 <__ieee754_pow+0x21e>
 800a446:	2000      	movs	r0, #0
 800a448:	b009      	add	sp, #36	; 0x24
 800a44a:	ecbd 8b06 	vpop	{d8-d10}
 800a44e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a452:	f001 bbbd 	b.w	800bbd0 <__math_uflow>
 800a456:	bf00      	nop
 800a458:	fff00000 	.word	0xfff00000
 800a45c:	7ff00000 	.word	0x7ff00000
 800a460:	433fffff 	.word	0x433fffff
 800a464:	3ff00000 	.word	0x3ff00000
 800a468:	3fefffff 	.word	0x3fefffff
 800a46c:	3fe00000 	.word	0x3fe00000
 800a470:	41e00000 	.word	0x41e00000
 800a474:	4b60      	ldr	r3, [pc, #384]	; (800a5f8 <__ieee754_pow+0x3f0>)
 800a476:	2200      	movs	r2, #0
 800a478:	f7f5 ff06 	bl	8000288 <__aeabi_dsub>
 800a47c:	a354      	add	r3, pc, #336	; (adr r3, 800a5d0 <__ieee754_pow+0x3c8>)
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	4604      	mov	r4, r0
 800a484:	460d      	mov	r5, r1
 800a486:	f7f6 f8b7 	bl	80005f8 <__aeabi_dmul>
 800a48a:	a353      	add	r3, pc, #332	; (adr r3, 800a5d8 <__ieee754_pow+0x3d0>)
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	4606      	mov	r6, r0
 800a492:	460f      	mov	r7, r1
 800a494:	4620      	mov	r0, r4
 800a496:	4629      	mov	r1, r5
 800a498:	f7f6 f8ae 	bl	80005f8 <__aeabi_dmul>
 800a49c:	4b57      	ldr	r3, [pc, #348]	; (800a5fc <__ieee754_pow+0x3f4>)
 800a49e:	4682      	mov	sl, r0
 800a4a0:	468b      	mov	fp, r1
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	f7f6 f8a6 	bl	80005f8 <__aeabi_dmul>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	a14b      	add	r1, pc, #300	; (adr r1, 800a5e0 <__ieee754_pow+0x3d8>)
 800a4b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4b6:	f7f5 fee7 	bl	8000288 <__aeabi_dsub>
 800a4ba:	4622      	mov	r2, r4
 800a4bc:	462b      	mov	r3, r5
 800a4be:	f7f6 f89b 	bl	80005f8 <__aeabi_dmul>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	494d      	ldr	r1, [pc, #308]	; (800a600 <__ieee754_pow+0x3f8>)
 800a4ca:	f7f5 fedd 	bl	8000288 <__aeabi_dsub>
 800a4ce:	4622      	mov	r2, r4
 800a4d0:	4680      	mov	r8, r0
 800a4d2:	4689      	mov	r9, r1
 800a4d4:	462b      	mov	r3, r5
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	4629      	mov	r1, r5
 800a4da:	f7f6 f88d 	bl	80005f8 <__aeabi_dmul>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	4649      	mov	r1, r9
 800a4e6:	f7f6 f887 	bl	80005f8 <__aeabi_dmul>
 800a4ea:	a33f      	add	r3, pc, #252	; (adr r3, 800a5e8 <__ieee754_pow+0x3e0>)
 800a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f0:	f7f6 f882 	bl	80005f8 <__aeabi_dmul>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4650      	mov	r0, sl
 800a4fa:	4659      	mov	r1, fp
 800a4fc:	f7f5 fec4 	bl	8000288 <__aeabi_dsub>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4680      	mov	r8, r0
 800a506:	4689      	mov	r9, r1
 800a508:	4630      	mov	r0, r6
 800a50a:	4639      	mov	r1, r7
 800a50c:	f7f5 febe 	bl	800028c <__adddf3>
 800a510:	2000      	movs	r0, #0
 800a512:	4632      	mov	r2, r6
 800a514:	463b      	mov	r3, r7
 800a516:	4604      	mov	r4, r0
 800a518:	460d      	mov	r5, r1
 800a51a:	f7f5 feb5 	bl	8000288 <__aeabi_dsub>
 800a51e:	4602      	mov	r2, r0
 800a520:	460b      	mov	r3, r1
 800a522:	4640      	mov	r0, r8
 800a524:	4649      	mov	r1, r9
 800a526:	f7f5 feaf 	bl	8000288 <__aeabi_dsub>
 800a52a:	9b04      	ldr	r3, [sp, #16]
 800a52c:	9a06      	ldr	r2, [sp, #24]
 800a52e:	3b01      	subs	r3, #1
 800a530:	4313      	orrs	r3, r2
 800a532:	4682      	mov	sl, r0
 800a534:	468b      	mov	fp, r1
 800a536:	f040 81e7 	bne.w	800a908 <__ieee754_pow+0x700>
 800a53a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a5f0 <__ieee754_pow+0x3e8>
 800a53e:	eeb0 8a47 	vmov.f32	s16, s14
 800a542:	eef0 8a67 	vmov.f32	s17, s15
 800a546:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a54a:	2600      	movs	r6, #0
 800a54c:	4632      	mov	r2, r6
 800a54e:	463b      	mov	r3, r7
 800a550:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a554:	f7f5 fe98 	bl	8000288 <__aeabi_dsub>
 800a558:	4622      	mov	r2, r4
 800a55a:	462b      	mov	r3, r5
 800a55c:	f7f6 f84c 	bl	80005f8 <__aeabi_dmul>
 800a560:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a564:	4680      	mov	r8, r0
 800a566:	4689      	mov	r9, r1
 800a568:	4650      	mov	r0, sl
 800a56a:	4659      	mov	r1, fp
 800a56c:	f7f6 f844 	bl	80005f8 <__aeabi_dmul>
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	4640      	mov	r0, r8
 800a576:	4649      	mov	r1, r9
 800a578:	f7f5 fe88 	bl	800028c <__adddf3>
 800a57c:	4632      	mov	r2, r6
 800a57e:	463b      	mov	r3, r7
 800a580:	4680      	mov	r8, r0
 800a582:	4689      	mov	r9, r1
 800a584:	4620      	mov	r0, r4
 800a586:	4629      	mov	r1, r5
 800a588:	f7f6 f836 	bl	80005f8 <__aeabi_dmul>
 800a58c:	460b      	mov	r3, r1
 800a58e:	4604      	mov	r4, r0
 800a590:	460d      	mov	r5, r1
 800a592:	4602      	mov	r2, r0
 800a594:	4649      	mov	r1, r9
 800a596:	4640      	mov	r0, r8
 800a598:	f7f5 fe78 	bl	800028c <__adddf3>
 800a59c:	4b19      	ldr	r3, [pc, #100]	; (800a604 <__ieee754_pow+0x3fc>)
 800a59e:	4299      	cmp	r1, r3
 800a5a0:	ec45 4b19 	vmov	d9, r4, r5
 800a5a4:	4606      	mov	r6, r0
 800a5a6:	460f      	mov	r7, r1
 800a5a8:	468b      	mov	fp, r1
 800a5aa:	f340 82f1 	ble.w	800ab90 <__ieee754_pow+0x988>
 800a5ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a5b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a5b6:	4303      	orrs	r3, r0
 800a5b8:	f000 81e4 	beq.w	800a984 <__ieee754_pow+0x77c>
 800a5bc:	ec51 0b18 	vmov	r0, r1, d8
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f7f6 fa8a 	bl	8000adc <__aeabi_dcmplt>
 800a5c8:	3800      	subs	r0, #0
 800a5ca:	bf18      	it	ne
 800a5cc:	2001      	movne	r0, #1
 800a5ce:	e72b      	b.n	800a428 <__ieee754_pow+0x220>
 800a5d0:	60000000 	.word	0x60000000
 800a5d4:	3ff71547 	.word	0x3ff71547
 800a5d8:	f85ddf44 	.word	0xf85ddf44
 800a5dc:	3e54ae0b 	.word	0x3e54ae0b
 800a5e0:	55555555 	.word	0x55555555
 800a5e4:	3fd55555 	.word	0x3fd55555
 800a5e8:	652b82fe 	.word	0x652b82fe
 800a5ec:	3ff71547 	.word	0x3ff71547
 800a5f0:	00000000 	.word	0x00000000
 800a5f4:	bff00000 	.word	0xbff00000
 800a5f8:	3ff00000 	.word	0x3ff00000
 800a5fc:	3fd00000 	.word	0x3fd00000
 800a600:	3fe00000 	.word	0x3fe00000
 800a604:	408fffff 	.word	0x408fffff
 800a608:	4bd5      	ldr	r3, [pc, #852]	; (800a960 <__ieee754_pow+0x758>)
 800a60a:	402b      	ands	r3, r5
 800a60c:	2200      	movs	r2, #0
 800a60e:	b92b      	cbnz	r3, 800a61c <__ieee754_pow+0x414>
 800a610:	4bd4      	ldr	r3, [pc, #848]	; (800a964 <__ieee754_pow+0x75c>)
 800a612:	f7f5 fff1 	bl	80005f8 <__aeabi_dmul>
 800a616:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a61a:	460c      	mov	r4, r1
 800a61c:	1523      	asrs	r3, r4, #20
 800a61e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a622:	4413      	add	r3, r2
 800a624:	9305      	str	r3, [sp, #20]
 800a626:	4bd0      	ldr	r3, [pc, #832]	; (800a968 <__ieee754_pow+0x760>)
 800a628:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a62c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a630:	429c      	cmp	r4, r3
 800a632:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a636:	dd08      	ble.n	800a64a <__ieee754_pow+0x442>
 800a638:	4bcc      	ldr	r3, [pc, #816]	; (800a96c <__ieee754_pow+0x764>)
 800a63a:	429c      	cmp	r4, r3
 800a63c:	f340 8162 	ble.w	800a904 <__ieee754_pow+0x6fc>
 800a640:	9b05      	ldr	r3, [sp, #20]
 800a642:	3301      	adds	r3, #1
 800a644:	9305      	str	r3, [sp, #20]
 800a646:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a64a:	2400      	movs	r4, #0
 800a64c:	00e3      	lsls	r3, r4, #3
 800a64e:	9307      	str	r3, [sp, #28]
 800a650:	4bc7      	ldr	r3, [pc, #796]	; (800a970 <__ieee754_pow+0x768>)
 800a652:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a656:	ed93 7b00 	vldr	d7, [r3]
 800a65a:	4629      	mov	r1, r5
 800a65c:	ec53 2b17 	vmov	r2, r3, d7
 800a660:	eeb0 9a47 	vmov.f32	s18, s14
 800a664:	eef0 9a67 	vmov.f32	s19, s15
 800a668:	4682      	mov	sl, r0
 800a66a:	f7f5 fe0d 	bl	8000288 <__aeabi_dsub>
 800a66e:	4652      	mov	r2, sl
 800a670:	4606      	mov	r6, r0
 800a672:	460f      	mov	r7, r1
 800a674:	462b      	mov	r3, r5
 800a676:	ec51 0b19 	vmov	r0, r1, d9
 800a67a:	f7f5 fe07 	bl	800028c <__adddf3>
 800a67e:	4602      	mov	r2, r0
 800a680:	460b      	mov	r3, r1
 800a682:	2000      	movs	r0, #0
 800a684:	49bb      	ldr	r1, [pc, #748]	; (800a974 <__ieee754_pow+0x76c>)
 800a686:	f7f6 f8e1 	bl	800084c <__aeabi_ddiv>
 800a68a:	ec41 0b1a 	vmov	d10, r0, r1
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	4630      	mov	r0, r6
 800a694:	4639      	mov	r1, r7
 800a696:	f7f5 ffaf 	bl	80005f8 <__aeabi_dmul>
 800a69a:	2300      	movs	r3, #0
 800a69c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6a0:	9302      	str	r3, [sp, #8]
 800a6a2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a6a6:	46ab      	mov	fp, r5
 800a6a8:	106d      	asrs	r5, r5, #1
 800a6aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a6ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a6b2:	ec41 0b18 	vmov	d8, r0, r1
 800a6b6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	4640      	mov	r0, r8
 800a6be:	4649      	mov	r1, r9
 800a6c0:	4614      	mov	r4, r2
 800a6c2:	461d      	mov	r5, r3
 800a6c4:	f7f5 ff98 	bl	80005f8 <__aeabi_dmul>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	4639      	mov	r1, r7
 800a6d0:	f7f5 fdda 	bl	8000288 <__aeabi_dsub>
 800a6d4:	ec53 2b19 	vmov	r2, r3, d9
 800a6d8:	4606      	mov	r6, r0
 800a6da:	460f      	mov	r7, r1
 800a6dc:	4620      	mov	r0, r4
 800a6de:	4629      	mov	r1, r5
 800a6e0:	f7f5 fdd2 	bl	8000288 <__aeabi_dsub>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	4650      	mov	r0, sl
 800a6ea:	4659      	mov	r1, fp
 800a6ec:	f7f5 fdcc 	bl	8000288 <__aeabi_dsub>
 800a6f0:	4642      	mov	r2, r8
 800a6f2:	464b      	mov	r3, r9
 800a6f4:	f7f5 ff80 	bl	80005f8 <__aeabi_dmul>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	4639      	mov	r1, r7
 800a700:	f7f5 fdc2 	bl	8000288 <__aeabi_dsub>
 800a704:	ec53 2b1a 	vmov	r2, r3, d10
 800a708:	f7f5 ff76 	bl	80005f8 <__aeabi_dmul>
 800a70c:	ec53 2b18 	vmov	r2, r3, d8
 800a710:	ec41 0b19 	vmov	d9, r0, r1
 800a714:	ec51 0b18 	vmov	r0, r1, d8
 800a718:	f7f5 ff6e 	bl	80005f8 <__aeabi_dmul>
 800a71c:	a37c      	add	r3, pc, #496	; (adr r3, 800a910 <__ieee754_pow+0x708>)
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	4604      	mov	r4, r0
 800a724:	460d      	mov	r5, r1
 800a726:	f7f5 ff67 	bl	80005f8 <__aeabi_dmul>
 800a72a:	a37b      	add	r3, pc, #492	; (adr r3, 800a918 <__ieee754_pow+0x710>)
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f7f5 fdac 	bl	800028c <__adddf3>
 800a734:	4622      	mov	r2, r4
 800a736:	462b      	mov	r3, r5
 800a738:	f7f5 ff5e 	bl	80005f8 <__aeabi_dmul>
 800a73c:	a378      	add	r3, pc, #480	; (adr r3, 800a920 <__ieee754_pow+0x718>)
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	f7f5 fda3 	bl	800028c <__adddf3>
 800a746:	4622      	mov	r2, r4
 800a748:	462b      	mov	r3, r5
 800a74a:	f7f5 ff55 	bl	80005f8 <__aeabi_dmul>
 800a74e:	a376      	add	r3, pc, #472	; (adr r3, 800a928 <__ieee754_pow+0x720>)
 800a750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a754:	f7f5 fd9a 	bl	800028c <__adddf3>
 800a758:	4622      	mov	r2, r4
 800a75a:	462b      	mov	r3, r5
 800a75c:	f7f5 ff4c 	bl	80005f8 <__aeabi_dmul>
 800a760:	a373      	add	r3, pc, #460	; (adr r3, 800a930 <__ieee754_pow+0x728>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f7f5 fd91 	bl	800028c <__adddf3>
 800a76a:	4622      	mov	r2, r4
 800a76c:	462b      	mov	r3, r5
 800a76e:	f7f5 ff43 	bl	80005f8 <__aeabi_dmul>
 800a772:	a371      	add	r3, pc, #452	; (adr r3, 800a938 <__ieee754_pow+0x730>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f7f5 fd88 	bl	800028c <__adddf3>
 800a77c:	4622      	mov	r2, r4
 800a77e:	4606      	mov	r6, r0
 800a780:	460f      	mov	r7, r1
 800a782:	462b      	mov	r3, r5
 800a784:	4620      	mov	r0, r4
 800a786:	4629      	mov	r1, r5
 800a788:	f7f5 ff36 	bl	80005f8 <__aeabi_dmul>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	4630      	mov	r0, r6
 800a792:	4639      	mov	r1, r7
 800a794:	f7f5 ff30 	bl	80005f8 <__aeabi_dmul>
 800a798:	4642      	mov	r2, r8
 800a79a:	4604      	mov	r4, r0
 800a79c:	460d      	mov	r5, r1
 800a79e:	464b      	mov	r3, r9
 800a7a0:	ec51 0b18 	vmov	r0, r1, d8
 800a7a4:	f7f5 fd72 	bl	800028c <__adddf3>
 800a7a8:	ec53 2b19 	vmov	r2, r3, d9
 800a7ac:	f7f5 ff24 	bl	80005f8 <__aeabi_dmul>
 800a7b0:	4622      	mov	r2, r4
 800a7b2:	462b      	mov	r3, r5
 800a7b4:	f7f5 fd6a 	bl	800028c <__adddf3>
 800a7b8:	4642      	mov	r2, r8
 800a7ba:	4682      	mov	sl, r0
 800a7bc:	468b      	mov	fp, r1
 800a7be:	464b      	mov	r3, r9
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	f7f5 ff18 	bl	80005f8 <__aeabi_dmul>
 800a7c8:	4b6b      	ldr	r3, [pc, #428]	; (800a978 <__ieee754_pow+0x770>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	460f      	mov	r7, r1
 800a7d0:	f7f5 fd5c 	bl	800028c <__adddf3>
 800a7d4:	4652      	mov	r2, sl
 800a7d6:	465b      	mov	r3, fp
 800a7d8:	f7f5 fd58 	bl	800028c <__adddf3>
 800a7dc:	2000      	movs	r0, #0
 800a7de:	4604      	mov	r4, r0
 800a7e0:	460d      	mov	r5, r1
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4640      	mov	r0, r8
 800a7e8:	4649      	mov	r1, r9
 800a7ea:	f7f5 ff05 	bl	80005f8 <__aeabi_dmul>
 800a7ee:	4b62      	ldr	r3, [pc, #392]	; (800a978 <__ieee754_pow+0x770>)
 800a7f0:	4680      	mov	r8, r0
 800a7f2:	4689      	mov	r9, r1
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	f7f5 fd45 	bl	8000288 <__aeabi_dsub>
 800a7fe:	4632      	mov	r2, r6
 800a800:	463b      	mov	r3, r7
 800a802:	f7f5 fd41 	bl	8000288 <__aeabi_dsub>
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	4650      	mov	r0, sl
 800a80c:	4659      	mov	r1, fp
 800a80e:	f7f5 fd3b 	bl	8000288 <__aeabi_dsub>
 800a812:	ec53 2b18 	vmov	r2, r3, d8
 800a816:	f7f5 feef 	bl	80005f8 <__aeabi_dmul>
 800a81a:	4622      	mov	r2, r4
 800a81c:	4606      	mov	r6, r0
 800a81e:	460f      	mov	r7, r1
 800a820:	462b      	mov	r3, r5
 800a822:	ec51 0b19 	vmov	r0, r1, d9
 800a826:	f7f5 fee7 	bl	80005f8 <__aeabi_dmul>
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	4630      	mov	r0, r6
 800a830:	4639      	mov	r1, r7
 800a832:	f7f5 fd2b 	bl	800028c <__adddf3>
 800a836:	4606      	mov	r6, r0
 800a838:	460f      	mov	r7, r1
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	4640      	mov	r0, r8
 800a840:	4649      	mov	r1, r9
 800a842:	f7f5 fd23 	bl	800028c <__adddf3>
 800a846:	a33e      	add	r3, pc, #248	; (adr r3, 800a940 <__ieee754_pow+0x738>)
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	2000      	movs	r0, #0
 800a84e:	4604      	mov	r4, r0
 800a850:	460d      	mov	r5, r1
 800a852:	f7f5 fed1 	bl	80005f8 <__aeabi_dmul>
 800a856:	4642      	mov	r2, r8
 800a858:	ec41 0b18 	vmov	d8, r0, r1
 800a85c:	464b      	mov	r3, r9
 800a85e:	4620      	mov	r0, r4
 800a860:	4629      	mov	r1, r5
 800a862:	f7f5 fd11 	bl	8000288 <__aeabi_dsub>
 800a866:	4602      	mov	r2, r0
 800a868:	460b      	mov	r3, r1
 800a86a:	4630      	mov	r0, r6
 800a86c:	4639      	mov	r1, r7
 800a86e:	f7f5 fd0b 	bl	8000288 <__aeabi_dsub>
 800a872:	a335      	add	r3, pc, #212	; (adr r3, 800a948 <__ieee754_pow+0x740>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	f7f5 febe 	bl	80005f8 <__aeabi_dmul>
 800a87c:	a334      	add	r3, pc, #208	; (adr r3, 800a950 <__ieee754_pow+0x748>)
 800a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a882:	4606      	mov	r6, r0
 800a884:	460f      	mov	r7, r1
 800a886:	4620      	mov	r0, r4
 800a888:	4629      	mov	r1, r5
 800a88a:	f7f5 feb5 	bl	80005f8 <__aeabi_dmul>
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4630      	mov	r0, r6
 800a894:	4639      	mov	r1, r7
 800a896:	f7f5 fcf9 	bl	800028c <__adddf3>
 800a89a:	9a07      	ldr	r2, [sp, #28]
 800a89c:	4b37      	ldr	r3, [pc, #220]	; (800a97c <__ieee754_pow+0x774>)
 800a89e:	4413      	add	r3, r2
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	f7f5 fcf2 	bl	800028c <__adddf3>
 800a8a8:	4682      	mov	sl, r0
 800a8aa:	9805      	ldr	r0, [sp, #20]
 800a8ac:	468b      	mov	fp, r1
 800a8ae:	f7f5 fe39 	bl	8000524 <__aeabi_i2d>
 800a8b2:	9a07      	ldr	r2, [sp, #28]
 800a8b4:	4b32      	ldr	r3, [pc, #200]	; (800a980 <__ieee754_pow+0x778>)
 800a8b6:	4413      	add	r3, r2
 800a8b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8bc:	4606      	mov	r6, r0
 800a8be:	460f      	mov	r7, r1
 800a8c0:	4652      	mov	r2, sl
 800a8c2:	465b      	mov	r3, fp
 800a8c4:	ec51 0b18 	vmov	r0, r1, d8
 800a8c8:	f7f5 fce0 	bl	800028c <__adddf3>
 800a8cc:	4642      	mov	r2, r8
 800a8ce:	464b      	mov	r3, r9
 800a8d0:	f7f5 fcdc 	bl	800028c <__adddf3>
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	f7f5 fcd8 	bl	800028c <__adddf3>
 800a8dc:	2000      	movs	r0, #0
 800a8de:	4632      	mov	r2, r6
 800a8e0:	463b      	mov	r3, r7
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	460d      	mov	r5, r1
 800a8e6:	f7f5 fccf 	bl	8000288 <__aeabi_dsub>
 800a8ea:	4642      	mov	r2, r8
 800a8ec:	464b      	mov	r3, r9
 800a8ee:	f7f5 fccb 	bl	8000288 <__aeabi_dsub>
 800a8f2:	ec53 2b18 	vmov	r2, r3, d8
 800a8f6:	f7f5 fcc7 	bl	8000288 <__aeabi_dsub>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4650      	mov	r0, sl
 800a900:	4659      	mov	r1, fp
 800a902:	e610      	b.n	800a526 <__ieee754_pow+0x31e>
 800a904:	2401      	movs	r4, #1
 800a906:	e6a1      	b.n	800a64c <__ieee754_pow+0x444>
 800a908:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a958 <__ieee754_pow+0x750>
 800a90c:	e617      	b.n	800a53e <__ieee754_pow+0x336>
 800a90e:	bf00      	nop
 800a910:	4a454eef 	.word	0x4a454eef
 800a914:	3fca7e28 	.word	0x3fca7e28
 800a918:	93c9db65 	.word	0x93c9db65
 800a91c:	3fcd864a 	.word	0x3fcd864a
 800a920:	a91d4101 	.word	0xa91d4101
 800a924:	3fd17460 	.word	0x3fd17460
 800a928:	518f264d 	.word	0x518f264d
 800a92c:	3fd55555 	.word	0x3fd55555
 800a930:	db6fabff 	.word	0xdb6fabff
 800a934:	3fdb6db6 	.word	0x3fdb6db6
 800a938:	33333303 	.word	0x33333303
 800a93c:	3fe33333 	.word	0x3fe33333
 800a940:	e0000000 	.word	0xe0000000
 800a944:	3feec709 	.word	0x3feec709
 800a948:	dc3a03fd 	.word	0xdc3a03fd
 800a94c:	3feec709 	.word	0x3feec709
 800a950:	145b01f5 	.word	0x145b01f5
 800a954:	be3e2fe0 	.word	0xbe3e2fe0
 800a958:	00000000 	.word	0x00000000
 800a95c:	3ff00000 	.word	0x3ff00000
 800a960:	7ff00000 	.word	0x7ff00000
 800a964:	43400000 	.word	0x43400000
 800a968:	0003988e 	.word	0x0003988e
 800a96c:	000bb679 	.word	0x000bb679
 800a970:	0800c050 	.word	0x0800c050
 800a974:	3ff00000 	.word	0x3ff00000
 800a978:	40080000 	.word	0x40080000
 800a97c:	0800c070 	.word	0x0800c070
 800a980:	0800c060 	.word	0x0800c060
 800a984:	a3b5      	add	r3, pc, #724	; (adr r3, 800ac5c <__ieee754_pow+0xa54>)
 800a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98a:	4640      	mov	r0, r8
 800a98c:	4649      	mov	r1, r9
 800a98e:	f7f5 fc7d 	bl	800028c <__adddf3>
 800a992:	4622      	mov	r2, r4
 800a994:	ec41 0b1a 	vmov	d10, r0, r1
 800a998:	462b      	mov	r3, r5
 800a99a:	4630      	mov	r0, r6
 800a99c:	4639      	mov	r1, r7
 800a99e:	f7f5 fc73 	bl	8000288 <__aeabi_dsub>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	ec51 0b1a 	vmov	r0, r1, d10
 800a9aa:	f7f6 f8b5 	bl	8000b18 <__aeabi_dcmpgt>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	f47f ae04 	bne.w	800a5bc <__ieee754_pow+0x3b4>
 800a9b4:	4aa4      	ldr	r2, [pc, #656]	; (800ac48 <__ieee754_pow+0xa40>)
 800a9b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	f340 8108 	ble.w	800abd0 <__ieee754_pow+0x9c8>
 800a9c0:	151b      	asrs	r3, r3, #20
 800a9c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a9c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a9ca:	fa4a f303 	asr.w	r3, sl, r3
 800a9ce:	445b      	add	r3, fp
 800a9d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a9d4:	4e9d      	ldr	r6, [pc, #628]	; (800ac4c <__ieee754_pow+0xa44>)
 800a9d6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a9da:	4116      	asrs	r6, r2
 800a9dc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	ea23 0106 	bic.w	r1, r3, r6
 800a9e6:	f1c2 0214 	rsb	r2, r2, #20
 800a9ea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a9ee:	fa4a fa02 	asr.w	sl, sl, r2
 800a9f2:	f1bb 0f00 	cmp.w	fp, #0
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	bfb8      	it	lt
 800aa00:	f1ca 0a00 	rsblt	sl, sl, #0
 800aa04:	f7f5 fc40 	bl	8000288 <__aeabi_dsub>
 800aa08:	ec41 0b19 	vmov	d9, r0, r1
 800aa0c:	4642      	mov	r2, r8
 800aa0e:	464b      	mov	r3, r9
 800aa10:	ec51 0b19 	vmov	r0, r1, d9
 800aa14:	f7f5 fc3a 	bl	800028c <__adddf3>
 800aa18:	a37b      	add	r3, pc, #492	; (adr r3, 800ac08 <__ieee754_pow+0xa00>)
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	2000      	movs	r0, #0
 800aa20:	4604      	mov	r4, r0
 800aa22:	460d      	mov	r5, r1
 800aa24:	f7f5 fde8 	bl	80005f8 <__aeabi_dmul>
 800aa28:	ec53 2b19 	vmov	r2, r3, d9
 800aa2c:	4606      	mov	r6, r0
 800aa2e:	460f      	mov	r7, r1
 800aa30:	4620      	mov	r0, r4
 800aa32:	4629      	mov	r1, r5
 800aa34:	f7f5 fc28 	bl	8000288 <__aeabi_dsub>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4640      	mov	r0, r8
 800aa3e:	4649      	mov	r1, r9
 800aa40:	f7f5 fc22 	bl	8000288 <__aeabi_dsub>
 800aa44:	a372      	add	r3, pc, #456	; (adr r3, 800ac10 <__ieee754_pow+0xa08>)
 800aa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4a:	f7f5 fdd5 	bl	80005f8 <__aeabi_dmul>
 800aa4e:	a372      	add	r3, pc, #456	; (adr r3, 800ac18 <__ieee754_pow+0xa10>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	4680      	mov	r8, r0
 800aa56:	4689      	mov	r9, r1
 800aa58:	4620      	mov	r0, r4
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	f7f5 fdcc 	bl	80005f8 <__aeabi_dmul>
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	4640      	mov	r0, r8
 800aa66:	4649      	mov	r1, r9
 800aa68:	f7f5 fc10 	bl	800028c <__adddf3>
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	460d      	mov	r5, r1
 800aa70:	4602      	mov	r2, r0
 800aa72:	460b      	mov	r3, r1
 800aa74:	4630      	mov	r0, r6
 800aa76:	4639      	mov	r1, r7
 800aa78:	f7f5 fc08 	bl	800028c <__adddf3>
 800aa7c:	4632      	mov	r2, r6
 800aa7e:	463b      	mov	r3, r7
 800aa80:	4680      	mov	r8, r0
 800aa82:	4689      	mov	r9, r1
 800aa84:	f7f5 fc00 	bl	8000288 <__aeabi_dsub>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	4629      	mov	r1, r5
 800aa90:	f7f5 fbfa 	bl	8000288 <__aeabi_dsub>
 800aa94:	4642      	mov	r2, r8
 800aa96:	4606      	mov	r6, r0
 800aa98:	460f      	mov	r7, r1
 800aa9a:	464b      	mov	r3, r9
 800aa9c:	4640      	mov	r0, r8
 800aa9e:	4649      	mov	r1, r9
 800aaa0:	f7f5 fdaa 	bl	80005f8 <__aeabi_dmul>
 800aaa4:	a35e      	add	r3, pc, #376	; (adr r3, 800ac20 <__ieee754_pow+0xa18>)
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	4604      	mov	r4, r0
 800aaac:	460d      	mov	r5, r1
 800aaae:	f7f5 fda3 	bl	80005f8 <__aeabi_dmul>
 800aab2:	a35d      	add	r3, pc, #372	; (adr r3, 800ac28 <__ieee754_pow+0xa20>)
 800aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab8:	f7f5 fbe6 	bl	8000288 <__aeabi_dsub>
 800aabc:	4622      	mov	r2, r4
 800aabe:	462b      	mov	r3, r5
 800aac0:	f7f5 fd9a 	bl	80005f8 <__aeabi_dmul>
 800aac4:	a35a      	add	r3, pc, #360	; (adr r3, 800ac30 <__ieee754_pow+0xa28>)
 800aac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaca:	f7f5 fbdf 	bl	800028c <__adddf3>
 800aace:	4622      	mov	r2, r4
 800aad0:	462b      	mov	r3, r5
 800aad2:	f7f5 fd91 	bl	80005f8 <__aeabi_dmul>
 800aad6:	a358      	add	r3, pc, #352	; (adr r3, 800ac38 <__ieee754_pow+0xa30>)
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	f7f5 fbd4 	bl	8000288 <__aeabi_dsub>
 800aae0:	4622      	mov	r2, r4
 800aae2:	462b      	mov	r3, r5
 800aae4:	f7f5 fd88 	bl	80005f8 <__aeabi_dmul>
 800aae8:	a355      	add	r3, pc, #340	; (adr r3, 800ac40 <__ieee754_pow+0xa38>)
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	f7f5 fbcd 	bl	800028c <__adddf3>
 800aaf2:	4622      	mov	r2, r4
 800aaf4:	462b      	mov	r3, r5
 800aaf6:	f7f5 fd7f 	bl	80005f8 <__aeabi_dmul>
 800aafa:	4602      	mov	r2, r0
 800aafc:	460b      	mov	r3, r1
 800aafe:	4640      	mov	r0, r8
 800ab00:	4649      	mov	r1, r9
 800ab02:	f7f5 fbc1 	bl	8000288 <__aeabi_dsub>
 800ab06:	4604      	mov	r4, r0
 800ab08:	460d      	mov	r5, r1
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	4640      	mov	r0, r8
 800ab10:	4649      	mov	r1, r9
 800ab12:	f7f5 fd71 	bl	80005f8 <__aeabi_dmul>
 800ab16:	2200      	movs	r2, #0
 800ab18:	ec41 0b19 	vmov	d9, r0, r1
 800ab1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab20:	4620      	mov	r0, r4
 800ab22:	4629      	mov	r1, r5
 800ab24:	f7f5 fbb0 	bl	8000288 <__aeabi_dsub>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	ec51 0b19 	vmov	r0, r1, d9
 800ab30:	f7f5 fe8c 	bl	800084c <__aeabi_ddiv>
 800ab34:	4632      	mov	r2, r6
 800ab36:	4604      	mov	r4, r0
 800ab38:	460d      	mov	r5, r1
 800ab3a:	463b      	mov	r3, r7
 800ab3c:	4640      	mov	r0, r8
 800ab3e:	4649      	mov	r1, r9
 800ab40:	f7f5 fd5a 	bl	80005f8 <__aeabi_dmul>
 800ab44:	4632      	mov	r2, r6
 800ab46:	463b      	mov	r3, r7
 800ab48:	f7f5 fba0 	bl	800028c <__adddf3>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4620      	mov	r0, r4
 800ab52:	4629      	mov	r1, r5
 800ab54:	f7f5 fb98 	bl	8000288 <__aeabi_dsub>
 800ab58:	4642      	mov	r2, r8
 800ab5a:	464b      	mov	r3, r9
 800ab5c:	f7f5 fb94 	bl	8000288 <__aeabi_dsub>
 800ab60:	460b      	mov	r3, r1
 800ab62:	4602      	mov	r2, r0
 800ab64:	493a      	ldr	r1, [pc, #232]	; (800ac50 <__ieee754_pow+0xa48>)
 800ab66:	2000      	movs	r0, #0
 800ab68:	f7f5 fb8e 	bl	8000288 <__aeabi_dsub>
 800ab6c:	ec41 0b10 	vmov	d0, r0, r1
 800ab70:	ee10 3a90 	vmov	r3, s1
 800ab74:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ab78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab7c:	da2b      	bge.n	800abd6 <__ieee754_pow+0x9ce>
 800ab7e:	4650      	mov	r0, sl
 800ab80:	f001 f8ce 	bl	800bd20 <scalbn>
 800ab84:	ec51 0b10 	vmov	r0, r1, d0
 800ab88:	ec53 2b18 	vmov	r2, r3, d8
 800ab8c:	f7ff bbed 	b.w	800a36a <__ieee754_pow+0x162>
 800ab90:	4b30      	ldr	r3, [pc, #192]	; (800ac54 <__ieee754_pow+0xa4c>)
 800ab92:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ab96:	429e      	cmp	r6, r3
 800ab98:	f77f af0c 	ble.w	800a9b4 <__ieee754_pow+0x7ac>
 800ab9c:	4b2e      	ldr	r3, [pc, #184]	; (800ac58 <__ieee754_pow+0xa50>)
 800ab9e:	440b      	add	r3, r1
 800aba0:	4303      	orrs	r3, r0
 800aba2:	d009      	beq.n	800abb8 <__ieee754_pow+0x9b0>
 800aba4:	ec51 0b18 	vmov	r0, r1, d8
 800aba8:	2200      	movs	r2, #0
 800abaa:	2300      	movs	r3, #0
 800abac:	f7f5 ff96 	bl	8000adc <__aeabi_dcmplt>
 800abb0:	3800      	subs	r0, #0
 800abb2:	bf18      	it	ne
 800abb4:	2001      	movne	r0, #1
 800abb6:	e447      	b.n	800a448 <__ieee754_pow+0x240>
 800abb8:	4622      	mov	r2, r4
 800abba:	462b      	mov	r3, r5
 800abbc:	f7f5 fb64 	bl	8000288 <__aeabi_dsub>
 800abc0:	4642      	mov	r2, r8
 800abc2:	464b      	mov	r3, r9
 800abc4:	f7f5 ff9e 	bl	8000b04 <__aeabi_dcmpge>
 800abc8:	2800      	cmp	r0, #0
 800abca:	f43f aef3 	beq.w	800a9b4 <__ieee754_pow+0x7ac>
 800abce:	e7e9      	b.n	800aba4 <__ieee754_pow+0x99c>
 800abd0:	f04f 0a00 	mov.w	sl, #0
 800abd4:	e71a      	b.n	800aa0c <__ieee754_pow+0x804>
 800abd6:	ec51 0b10 	vmov	r0, r1, d0
 800abda:	4619      	mov	r1, r3
 800abdc:	e7d4      	b.n	800ab88 <__ieee754_pow+0x980>
 800abde:	491c      	ldr	r1, [pc, #112]	; (800ac50 <__ieee754_pow+0xa48>)
 800abe0:	2000      	movs	r0, #0
 800abe2:	f7ff bb30 	b.w	800a246 <__ieee754_pow+0x3e>
 800abe6:	2000      	movs	r0, #0
 800abe8:	2100      	movs	r1, #0
 800abea:	f7ff bb2c 	b.w	800a246 <__ieee754_pow+0x3e>
 800abee:	4630      	mov	r0, r6
 800abf0:	4639      	mov	r1, r7
 800abf2:	f7ff bb28 	b.w	800a246 <__ieee754_pow+0x3e>
 800abf6:	9204      	str	r2, [sp, #16]
 800abf8:	f7ff bb7a 	b.w	800a2f0 <__ieee754_pow+0xe8>
 800abfc:	2300      	movs	r3, #0
 800abfe:	f7ff bb64 	b.w	800a2ca <__ieee754_pow+0xc2>
 800ac02:	bf00      	nop
 800ac04:	f3af 8000 	nop.w
 800ac08:	00000000 	.word	0x00000000
 800ac0c:	3fe62e43 	.word	0x3fe62e43
 800ac10:	fefa39ef 	.word	0xfefa39ef
 800ac14:	3fe62e42 	.word	0x3fe62e42
 800ac18:	0ca86c39 	.word	0x0ca86c39
 800ac1c:	be205c61 	.word	0xbe205c61
 800ac20:	72bea4d0 	.word	0x72bea4d0
 800ac24:	3e663769 	.word	0x3e663769
 800ac28:	c5d26bf1 	.word	0xc5d26bf1
 800ac2c:	3ebbbd41 	.word	0x3ebbbd41
 800ac30:	af25de2c 	.word	0xaf25de2c
 800ac34:	3f11566a 	.word	0x3f11566a
 800ac38:	16bebd93 	.word	0x16bebd93
 800ac3c:	3f66c16c 	.word	0x3f66c16c
 800ac40:	5555553e 	.word	0x5555553e
 800ac44:	3fc55555 	.word	0x3fc55555
 800ac48:	3fe00000 	.word	0x3fe00000
 800ac4c:	000fffff 	.word	0x000fffff
 800ac50:	3ff00000 	.word	0x3ff00000
 800ac54:	4090cbff 	.word	0x4090cbff
 800ac58:	3f6f3400 	.word	0x3f6f3400
 800ac5c:	652b82fe 	.word	0x652b82fe
 800ac60:	3c971547 	.word	0x3c971547
 800ac64:	00000000 	.word	0x00000000

0800ac68 <__ieee754_rem_pio2>:
 800ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	ed2d 8b02 	vpush	{d8}
 800ac70:	ec55 4b10 	vmov	r4, r5, d0
 800ac74:	4bca      	ldr	r3, [pc, #808]	; (800afa0 <__ieee754_rem_pio2+0x338>)
 800ac76:	b08b      	sub	sp, #44	; 0x2c
 800ac78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ac7c:	4598      	cmp	r8, r3
 800ac7e:	4682      	mov	sl, r0
 800ac80:	9502      	str	r5, [sp, #8]
 800ac82:	dc08      	bgt.n	800ac96 <__ieee754_rem_pio2+0x2e>
 800ac84:	2200      	movs	r2, #0
 800ac86:	2300      	movs	r3, #0
 800ac88:	ed80 0b00 	vstr	d0, [r0]
 800ac8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ac90:	f04f 0b00 	mov.w	fp, #0
 800ac94:	e028      	b.n	800ace8 <__ieee754_rem_pio2+0x80>
 800ac96:	4bc3      	ldr	r3, [pc, #780]	; (800afa4 <__ieee754_rem_pio2+0x33c>)
 800ac98:	4598      	cmp	r8, r3
 800ac9a:	dc78      	bgt.n	800ad8e <__ieee754_rem_pio2+0x126>
 800ac9c:	9b02      	ldr	r3, [sp, #8]
 800ac9e:	4ec2      	ldr	r6, [pc, #776]	; (800afa8 <__ieee754_rem_pio2+0x340>)
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	ee10 0a10 	vmov	r0, s0
 800aca6:	a3b0      	add	r3, pc, #704	; (adr r3, 800af68 <__ieee754_rem_pio2+0x300>)
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	4629      	mov	r1, r5
 800acae:	dd39      	ble.n	800ad24 <__ieee754_rem_pio2+0xbc>
 800acb0:	f7f5 faea 	bl	8000288 <__aeabi_dsub>
 800acb4:	45b0      	cmp	r8, r6
 800acb6:	4604      	mov	r4, r0
 800acb8:	460d      	mov	r5, r1
 800acba:	d01b      	beq.n	800acf4 <__ieee754_rem_pio2+0x8c>
 800acbc:	a3ac      	add	r3, pc, #688	; (adr r3, 800af70 <__ieee754_rem_pio2+0x308>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f7f5 fae1 	bl	8000288 <__aeabi_dsub>
 800acc6:	4602      	mov	r2, r0
 800acc8:	460b      	mov	r3, r1
 800acca:	e9ca 2300 	strd	r2, r3, [sl]
 800acce:	4620      	mov	r0, r4
 800acd0:	4629      	mov	r1, r5
 800acd2:	f7f5 fad9 	bl	8000288 <__aeabi_dsub>
 800acd6:	a3a6      	add	r3, pc, #664	; (adr r3, 800af70 <__ieee754_rem_pio2+0x308>)
 800acd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acdc:	f7f5 fad4 	bl	8000288 <__aeabi_dsub>
 800ace0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ace4:	f04f 0b01 	mov.w	fp, #1
 800ace8:	4658      	mov	r0, fp
 800acea:	b00b      	add	sp, #44	; 0x2c
 800acec:	ecbd 8b02 	vpop	{d8}
 800acf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf4:	a3a0      	add	r3, pc, #640	; (adr r3, 800af78 <__ieee754_rem_pio2+0x310>)
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	f7f5 fac5 	bl	8000288 <__aeabi_dsub>
 800acfe:	a3a0      	add	r3, pc, #640	; (adr r3, 800af80 <__ieee754_rem_pio2+0x318>)
 800ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad04:	4604      	mov	r4, r0
 800ad06:	460d      	mov	r5, r1
 800ad08:	f7f5 fabe 	bl	8000288 <__aeabi_dsub>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	e9ca 2300 	strd	r2, r3, [sl]
 800ad14:	4620      	mov	r0, r4
 800ad16:	4629      	mov	r1, r5
 800ad18:	f7f5 fab6 	bl	8000288 <__aeabi_dsub>
 800ad1c:	a398      	add	r3, pc, #608	; (adr r3, 800af80 <__ieee754_rem_pio2+0x318>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	e7db      	b.n	800acdc <__ieee754_rem_pio2+0x74>
 800ad24:	f7f5 fab2 	bl	800028c <__adddf3>
 800ad28:	45b0      	cmp	r8, r6
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	460d      	mov	r5, r1
 800ad2e:	d016      	beq.n	800ad5e <__ieee754_rem_pio2+0xf6>
 800ad30:	a38f      	add	r3, pc, #572	; (adr r3, 800af70 <__ieee754_rem_pio2+0x308>)
 800ad32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad36:	f7f5 faa9 	bl	800028c <__adddf3>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	e9ca 2300 	strd	r2, r3, [sl]
 800ad42:	4620      	mov	r0, r4
 800ad44:	4629      	mov	r1, r5
 800ad46:	f7f5 fa9f 	bl	8000288 <__aeabi_dsub>
 800ad4a:	a389      	add	r3, pc, #548	; (adr r3, 800af70 <__ieee754_rem_pio2+0x308>)
 800ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad50:	f7f5 fa9c 	bl	800028c <__adddf3>
 800ad54:	f04f 3bff 	mov.w	fp, #4294967295
 800ad58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ad5c:	e7c4      	b.n	800ace8 <__ieee754_rem_pio2+0x80>
 800ad5e:	a386      	add	r3, pc, #536	; (adr r3, 800af78 <__ieee754_rem_pio2+0x310>)
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	f7f5 fa92 	bl	800028c <__adddf3>
 800ad68:	a385      	add	r3, pc, #532	; (adr r3, 800af80 <__ieee754_rem_pio2+0x318>)
 800ad6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6e:	4604      	mov	r4, r0
 800ad70:	460d      	mov	r5, r1
 800ad72:	f7f5 fa8b 	bl	800028c <__adddf3>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	e9ca 2300 	strd	r2, r3, [sl]
 800ad7e:	4620      	mov	r0, r4
 800ad80:	4629      	mov	r1, r5
 800ad82:	f7f5 fa81 	bl	8000288 <__aeabi_dsub>
 800ad86:	a37e      	add	r3, pc, #504	; (adr r3, 800af80 <__ieee754_rem_pio2+0x318>)
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	e7e0      	b.n	800ad50 <__ieee754_rem_pio2+0xe8>
 800ad8e:	4b87      	ldr	r3, [pc, #540]	; (800afac <__ieee754_rem_pio2+0x344>)
 800ad90:	4598      	cmp	r8, r3
 800ad92:	f300 80d9 	bgt.w	800af48 <__ieee754_rem_pio2+0x2e0>
 800ad96:	f000 ff2d 	bl	800bbf4 <fabs>
 800ad9a:	ec55 4b10 	vmov	r4, r5, d0
 800ad9e:	ee10 0a10 	vmov	r0, s0
 800ada2:	a379      	add	r3, pc, #484	; (adr r3, 800af88 <__ieee754_rem_pio2+0x320>)
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 fc25 	bl	80005f8 <__aeabi_dmul>
 800adae:	4b80      	ldr	r3, [pc, #512]	; (800afb0 <__ieee754_rem_pio2+0x348>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	f7f5 fa6b 	bl	800028c <__adddf3>
 800adb6:	f7f5 fecf 	bl	8000b58 <__aeabi_d2iz>
 800adba:	4683      	mov	fp, r0
 800adbc:	f7f5 fbb2 	bl	8000524 <__aeabi_i2d>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	ec43 2b18 	vmov	d8, r2, r3
 800adc8:	a367      	add	r3, pc, #412	; (adr r3, 800af68 <__ieee754_rem_pio2+0x300>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	f7f5 fc13 	bl	80005f8 <__aeabi_dmul>
 800add2:	4602      	mov	r2, r0
 800add4:	460b      	mov	r3, r1
 800add6:	4620      	mov	r0, r4
 800add8:	4629      	mov	r1, r5
 800adda:	f7f5 fa55 	bl	8000288 <__aeabi_dsub>
 800adde:	a364      	add	r3, pc, #400	; (adr r3, 800af70 <__ieee754_rem_pio2+0x308>)
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	4606      	mov	r6, r0
 800ade6:	460f      	mov	r7, r1
 800ade8:	ec51 0b18 	vmov	r0, r1, d8
 800adec:	f7f5 fc04 	bl	80005f8 <__aeabi_dmul>
 800adf0:	f1bb 0f1f 	cmp.w	fp, #31
 800adf4:	4604      	mov	r4, r0
 800adf6:	460d      	mov	r5, r1
 800adf8:	dc0d      	bgt.n	800ae16 <__ieee754_rem_pio2+0x1ae>
 800adfa:	4b6e      	ldr	r3, [pc, #440]	; (800afb4 <__ieee754_rem_pio2+0x34c>)
 800adfc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ae00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae04:	4543      	cmp	r3, r8
 800ae06:	d006      	beq.n	800ae16 <__ieee754_rem_pio2+0x1ae>
 800ae08:	4622      	mov	r2, r4
 800ae0a:	462b      	mov	r3, r5
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	4639      	mov	r1, r7
 800ae10:	f7f5 fa3a 	bl	8000288 <__aeabi_dsub>
 800ae14:	e00f      	b.n	800ae36 <__ieee754_rem_pio2+0x1ce>
 800ae16:	462b      	mov	r3, r5
 800ae18:	4622      	mov	r2, r4
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	4639      	mov	r1, r7
 800ae1e:	f7f5 fa33 	bl	8000288 <__aeabi_dsub>
 800ae22:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ae26:	9303      	str	r3, [sp, #12]
 800ae28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ae2c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ae30:	f1b8 0f10 	cmp.w	r8, #16
 800ae34:	dc02      	bgt.n	800ae3c <__ieee754_rem_pio2+0x1d4>
 800ae36:	e9ca 0100 	strd	r0, r1, [sl]
 800ae3a:	e039      	b.n	800aeb0 <__ieee754_rem_pio2+0x248>
 800ae3c:	a34e      	add	r3, pc, #312	; (adr r3, 800af78 <__ieee754_rem_pio2+0x310>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	ec51 0b18 	vmov	r0, r1, d8
 800ae46:	f7f5 fbd7 	bl	80005f8 <__aeabi_dmul>
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	460d      	mov	r5, r1
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4630      	mov	r0, r6
 800ae54:	4639      	mov	r1, r7
 800ae56:	f7f5 fa17 	bl	8000288 <__aeabi_dsub>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	4680      	mov	r8, r0
 800ae60:	4689      	mov	r9, r1
 800ae62:	4630      	mov	r0, r6
 800ae64:	4639      	mov	r1, r7
 800ae66:	f7f5 fa0f 	bl	8000288 <__aeabi_dsub>
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	462b      	mov	r3, r5
 800ae6e:	f7f5 fa0b 	bl	8000288 <__aeabi_dsub>
 800ae72:	a343      	add	r3, pc, #268	; (adr r3, 800af80 <__ieee754_rem_pio2+0x318>)
 800ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae78:	4604      	mov	r4, r0
 800ae7a:	460d      	mov	r5, r1
 800ae7c:	ec51 0b18 	vmov	r0, r1, d8
 800ae80:	f7f5 fbba 	bl	80005f8 <__aeabi_dmul>
 800ae84:	4622      	mov	r2, r4
 800ae86:	462b      	mov	r3, r5
 800ae88:	f7f5 f9fe 	bl	8000288 <__aeabi_dsub>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	4604      	mov	r4, r0
 800ae92:	460d      	mov	r5, r1
 800ae94:	4640      	mov	r0, r8
 800ae96:	4649      	mov	r1, r9
 800ae98:	f7f5 f9f6 	bl	8000288 <__aeabi_dsub>
 800ae9c:	9a03      	ldr	r2, [sp, #12]
 800ae9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	2b31      	cmp	r3, #49	; 0x31
 800aea6:	dc24      	bgt.n	800aef2 <__ieee754_rem_pio2+0x28a>
 800aea8:	e9ca 0100 	strd	r0, r1, [sl]
 800aeac:	4646      	mov	r6, r8
 800aeae:	464f      	mov	r7, r9
 800aeb0:	e9da 8900 	ldrd	r8, r9, [sl]
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	4642      	mov	r2, r8
 800aeb8:	464b      	mov	r3, r9
 800aeba:	4639      	mov	r1, r7
 800aebc:	f7f5 f9e4 	bl	8000288 <__aeabi_dsub>
 800aec0:	462b      	mov	r3, r5
 800aec2:	4622      	mov	r2, r4
 800aec4:	f7f5 f9e0 	bl	8000288 <__aeabi_dsub>
 800aec8:	9b02      	ldr	r3, [sp, #8]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aed0:	f6bf af0a 	bge.w	800ace8 <__ieee754_rem_pio2+0x80>
 800aed4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aed8:	f8ca 3004 	str.w	r3, [sl, #4]
 800aedc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aee0:	f8ca 8000 	str.w	r8, [sl]
 800aee4:	f8ca 0008 	str.w	r0, [sl, #8]
 800aee8:	f8ca 300c 	str.w	r3, [sl, #12]
 800aeec:	f1cb 0b00 	rsb	fp, fp, #0
 800aef0:	e6fa      	b.n	800ace8 <__ieee754_rem_pio2+0x80>
 800aef2:	a327      	add	r3, pc, #156	; (adr r3, 800af90 <__ieee754_rem_pio2+0x328>)
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	ec51 0b18 	vmov	r0, r1, d8
 800aefc:	f7f5 fb7c 	bl	80005f8 <__aeabi_dmul>
 800af00:	4604      	mov	r4, r0
 800af02:	460d      	mov	r5, r1
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	4640      	mov	r0, r8
 800af0a:	4649      	mov	r1, r9
 800af0c:	f7f5 f9bc 	bl	8000288 <__aeabi_dsub>
 800af10:	4602      	mov	r2, r0
 800af12:	460b      	mov	r3, r1
 800af14:	4606      	mov	r6, r0
 800af16:	460f      	mov	r7, r1
 800af18:	4640      	mov	r0, r8
 800af1a:	4649      	mov	r1, r9
 800af1c:	f7f5 f9b4 	bl	8000288 <__aeabi_dsub>
 800af20:	4622      	mov	r2, r4
 800af22:	462b      	mov	r3, r5
 800af24:	f7f5 f9b0 	bl	8000288 <__aeabi_dsub>
 800af28:	a31b      	add	r3, pc, #108	; (adr r3, 800af98 <__ieee754_rem_pio2+0x330>)
 800af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2e:	4604      	mov	r4, r0
 800af30:	460d      	mov	r5, r1
 800af32:	ec51 0b18 	vmov	r0, r1, d8
 800af36:	f7f5 fb5f 	bl	80005f8 <__aeabi_dmul>
 800af3a:	4622      	mov	r2, r4
 800af3c:	462b      	mov	r3, r5
 800af3e:	f7f5 f9a3 	bl	8000288 <__aeabi_dsub>
 800af42:	4604      	mov	r4, r0
 800af44:	460d      	mov	r5, r1
 800af46:	e75f      	b.n	800ae08 <__ieee754_rem_pio2+0x1a0>
 800af48:	4b1b      	ldr	r3, [pc, #108]	; (800afb8 <__ieee754_rem_pio2+0x350>)
 800af4a:	4598      	cmp	r8, r3
 800af4c:	dd36      	ble.n	800afbc <__ieee754_rem_pio2+0x354>
 800af4e:	ee10 2a10 	vmov	r2, s0
 800af52:	462b      	mov	r3, r5
 800af54:	4620      	mov	r0, r4
 800af56:	4629      	mov	r1, r5
 800af58:	f7f5 f996 	bl	8000288 <__aeabi_dsub>
 800af5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af60:	e9ca 0100 	strd	r0, r1, [sl]
 800af64:	e694      	b.n	800ac90 <__ieee754_rem_pio2+0x28>
 800af66:	bf00      	nop
 800af68:	54400000 	.word	0x54400000
 800af6c:	3ff921fb 	.word	0x3ff921fb
 800af70:	1a626331 	.word	0x1a626331
 800af74:	3dd0b461 	.word	0x3dd0b461
 800af78:	1a600000 	.word	0x1a600000
 800af7c:	3dd0b461 	.word	0x3dd0b461
 800af80:	2e037073 	.word	0x2e037073
 800af84:	3ba3198a 	.word	0x3ba3198a
 800af88:	6dc9c883 	.word	0x6dc9c883
 800af8c:	3fe45f30 	.word	0x3fe45f30
 800af90:	2e000000 	.word	0x2e000000
 800af94:	3ba3198a 	.word	0x3ba3198a
 800af98:	252049c1 	.word	0x252049c1
 800af9c:	397b839a 	.word	0x397b839a
 800afa0:	3fe921fb 	.word	0x3fe921fb
 800afa4:	4002d97b 	.word	0x4002d97b
 800afa8:	3ff921fb 	.word	0x3ff921fb
 800afac:	413921fb 	.word	0x413921fb
 800afb0:	3fe00000 	.word	0x3fe00000
 800afb4:	0800c080 	.word	0x0800c080
 800afb8:	7fefffff 	.word	0x7fefffff
 800afbc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800afc0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800afc4:	ee10 0a10 	vmov	r0, s0
 800afc8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800afcc:	ee10 6a10 	vmov	r6, s0
 800afd0:	460f      	mov	r7, r1
 800afd2:	f7f5 fdc1 	bl	8000b58 <__aeabi_d2iz>
 800afd6:	f7f5 faa5 	bl	8000524 <__aeabi_i2d>
 800afda:	4602      	mov	r2, r0
 800afdc:	460b      	mov	r3, r1
 800afde:	4630      	mov	r0, r6
 800afe0:	4639      	mov	r1, r7
 800afe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afe6:	f7f5 f94f 	bl	8000288 <__aeabi_dsub>
 800afea:	4b23      	ldr	r3, [pc, #140]	; (800b078 <__ieee754_rem_pio2+0x410>)
 800afec:	2200      	movs	r2, #0
 800afee:	f7f5 fb03 	bl	80005f8 <__aeabi_dmul>
 800aff2:	460f      	mov	r7, r1
 800aff4:	4606      	mov	r6, r0
 800aff6:	f7f5 fdaf 	bl	8000b58 <__aeabi_d2iz>
 800affa:	f7f5 fa93 	bl	8000524 <__aeabi_i2d>
 800affe:	4602      	mov	r2, r0
 800b000:	460b      	mov	r3, r1
 800b002:	4630      	mov	r0, r6
 800b004:	4639      	mov	r1, r7
 800b006:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b00a:	f7f5 f93d 	bl	8000288 <__aeabi_dsub>
 800b00e:	4b1a      	ldr	r3, [pc, #104]	; (800b078 <__ieee754_rem_pio2+0x410>)
 800b010:	2200      	movs	r2, #0
 800b012:	f7f5 faf1 	bl	80005f8 <__aeabi_dmul>
 800b016:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b01a:	ad04      	add	r5, sp, #16
 800b01c:	f04f 0803 	mov.w	r8, #3
 800b020:	46a9      	mov	r9, r5
 800b022:	2600      	movs	r6, #0
 800b024:	2700      	movs	r7, #0
 800b026:	4632      	mov	r2, r6
 800b028:	463b      	mov	r3, r7
 800b02a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b02e:	46c3      	mov	fp, r8
 800b030:	3d08      	subs	r5, #8
 800b032:	f108 38ff 	add.w	r8, r8, #4294967295
 800b036:	f7f5 fd47 	bl	8000ac8 <__aeabi_dcmpeq>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d1f3      	bne.n	800b026 <__ieee754_rem_pio2+0x3be>
 800b03e:	4b0f      	ldr	r3, [pc, #60]	; (800b07c <__ieee754_rem_pio2+0x414>)
 800b040:	9301      	str	r3, [sp, #4]
 800b042:	2302      	movs	r3, #2
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	4622      	mov	r2, r4
 800b048:	465b      	mov	r3, fp
 800b04a:	4651      	mov	r1, sl
 800b04c:	4648      	mov	r0, r9
 800b04e:	f000 f993 	bl	800b378 <__kernel_rem_pio2>
 800b052:	9b02      	ldr	r3, [sp, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	4683      	mov	fp, r0
 800b058:	f6bf ae46 	bge.w	800ace8 <__ieee754_rem_pio2+0x80>
 800b05c:	e9da 2100 	ldrd	r2, r1, [sl]
 800b060:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b064:	e9ca 2300 	strd	r2, r3, [sl]
 800b068:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b06c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b070:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b074:	e73a      	b.n	800aeec <__ieee754_rem_pio2+0x284>
 800b076:	bf00      	nop
 800b078:	41700000 	.word	0x41700000
 800b07c:	0800c100 	.word	0x0800c100

0800b080 <__ieee754_sqrt>:
 800b080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b084:	ec55 4b10 	vmov	r4, r5, d0
 800b088:	4e55      	ldr	r6, [pc, #340]	; (800b1e0 <__ieee754_sqrt+0x160>)
 800b08a:	43ae      	bics	r6, r5
 800b08c:	ee10 0a10 	vmov	r0, s0
 800b090:	ee10 3a10 	vmov	r3, s0
 800b094:	462a      	mov	r2, r5
 800b096:	4629      	mov	r1, r5
 800b098:	d110      	bne.n	800b0bc <__ieee754_sqrt+0x3c>
 800b09a:	ee10 2a10 	vmov	r2, s0
 800b09e:	462b      	mov	r3, r5
 800b0a0:	f7f5 faaa 	bl	80005f8 <__aeabi_dmul>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	f7f5 f8ee 	bl	800028c <__adddf3>
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	460d      	mov	r5, r1
 800b0b4:	ec45 4b10 	vmov	d0, r4, r5
 800b0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0bc:	2d00      	cmp	r5, #0
 800b0be:	dc10      	bgt.n	800b0e2 <__ieee754_sqrt+0x62>
 800b0c0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b0c4:	4330      	orrs	r0, r6
 800b0c6:	d0f5      	beq.n	800b0b4 <__ieee754_sqrt+0x34>
 800b0c8:	b15d      	cbz	r5, 800b0e2 <__ieee754_sqrt+0x62>
 800b0ca:	ee10 2a10 	vmov	r2, s0
 800b0ce:	462b      	mov	r3, r5
 800b0d0:	ee10 0a10 	vmov	r0, s0
 800b0d4:	f7f5 f8d8 	bl	8000288 <__aeabi_dsub>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	460b      	mov	r3, r1
 800b0dc:	f7f5 fbb6 	bl	800084c <__aeabi_ddiv>
 800b0e0:	e7e6      	b.n	800b0b0 <__ieee754_sqrt+0x30>
 800b0e2:	1512      	asrs	r2, r2, #20
 800b0e4:	d074      	beq.n	800b1d0 <__ieee754_sqrt+0x150>
 800b0e6:	07d4      	lsls	r4, r2, #31
 800b0e8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b0ec:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b0f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b0f4:	bf5e      	ittt	pl
 800b0f6:	0fda      	lsrpl	r2, r3, #31
 800b0f8:	005b      	lslpl	r3, r3, #1
 800b0fa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b0fe:	2400      	movs	r4, #0
 800b100:	0fda      	lsrs	r2, r3, #31
 800b102:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b106:	107f      	asrs	r7, r7, #1
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	2516      	movs	r5, #22
 800b10c:	4620      	mov	r0, r4
 800b10e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b112:	1886      	adds	r6, r0, r2
 800b114:	428e      	cmp	r6, r1
 800b116:	bfde      	ittt	le
 800b118:	1b89      	suble	r1, r1, r6
 800b11a:	18b0      	addle	r0, r6, r2
 800b11c:	18a4      	addle	r4, r4, r2
 800b11e:	0049      	lsls	r1, r1, #1
 800b120:	3d01      	subs	r5, #1
 800b122:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b126:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b12a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b12e:	d1f0      	bne.n	800b112 <__ieee754_sqrt+0x92>
 800b130:	462a      	mov	r2, r5
 800b132:	f04f 0e20 	mov.w	lr, #32
 800b136:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b13a:	4281      	cmp	r1, r0
 800b13c:	eb06 0c05 	add.w	ip, r6, r5
 800b140:	dc02      	bgt.n	800b148 <__ieee754_sqrt+0xc8>
 800b142:	d113      	bne.n	800b16c <__ieee754_sqrt+0xec>
 800b144:	459c      	cmp	ip, r3
 800b146:	d811      	bhi.n	800b16c <__ieee754_sqrt+0xec>
 800b148:	f1bc 0f00 	cmp.w	ip, #0
 800b14c:	eb0c 0506 	add.w	r5, ip, r6
 800b150:	da43      	bge.n	800b1da <__ieee754_sqrt+0x15a>
 800b152:	2d00      	cmp	r5, #0
 800b154:	db41      	blt.n	800b1da <__ieee754_sqrt+0x15a>
 800b156:	f100 0801 	add.w	r8, r0, #1
 800b15a:	1a09      	subs	r1, r1, r0
 800b15c:	459c      	cmp	ip, r3
 800b15e:	bf88      	it	hi
 800b160:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b164:	eba3 030c 	sub.w	r3, r3, ip
 800b168:	4432      	add	r2, r6
 800b16a:	4640      	mov	r0, r8
 800b16c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b170:	f1be 0e01 	subs.w	lr, lr, #1
 800b174:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b178:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b17c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b180:	d1db      	bne.n	800b13a <__ieee754_sqrt+0xba>
 800b182:	430b      	orrs	r3, r1
 800b184:	d006      	beq.n	800b194 <__ieee754_sqrt+0x114>
 800b186:	1c50      	adds	r0, r2, #1
 800b188:	bf13      	iteet	ne
 800b18a:	3201      	addne	r2, #1
 800b18c:	3401      	addeq	r4, #1
 800b18e:	4672      	moveq	r2, lr
 800b190:	f022 0201 	bicne.w	r2, r2, #1
 800b194:	1063      	asrs	r3, r4, #1
 800b196:	0852      	lsrs	r2, r2, #1
 800b198:	07e1      	lsls	r1, r4, #31
 800b19a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b19e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b1a2:	bf48      	it	mi
 800b1a4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b1a8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b1ac:	4614      	mov	r4, r2
 800b1ae:	e781      	b.n	800b0b4 <__ieee754_sqrt+0x34>
 800b1b0:	0ad9      	lsrs	r1, r3, #11
 800b1b2:	3815      	subs	r0, #21
 800b1b4:	055b      	lsls	r3, r3, #21
 800b1b6:	2900      	cmp	r1, #0
 800b1b8:	d0fa      	beq.n	800b1b0 <__ieee754_sqrt+0x130>
 800b1ba:	02cd      	lsls	r5, r1, #11
 800b1bc:	d50a      	bpl.n	800b1d4 <__ieee754_sqrt+0x154>
 800b1be:	f1c2 0420 	rsb	r4, r2, #32
 800b1c2:	fa23 f404 	lsr.w	r4, r3, r4
 800b1c6:	1e55      	subs	r5, r2, #1
 800b1c8:	4093      	lsls	r3, r2
 800b1ca:	4321      	orrs	r1, r4
 800b1cc:	1b42      	subs	r2, r0, r5
 800b1ce:	e78a      	b.n	800b0e6 <__ieee754_sqrt+0x66>
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	e7f0      	b.n	800b1b6 <__ieee754_sqrt+0x136>
 800b1d4:	0049      	lsls	r1, r1, #1
 800b1d6:	3201      	adds	r2, #1
 800b1d8:	e7ef      	b.n	800b1ba <__ieee754_sqrt+0x13a>
 800b1da:	4680      	mov	r8, r0
 800b1dc:	e7bd      	b.n	800b15a <__ieee754_sqrt+0xda>
 800b1de:	bf00      	nop
 800b1e0:	7ff00000 	.word	0x7ff00000
 800b1e4:	00000000 	.word	0x00000000

0800b1e8 <__kernel_cos>:
 800b1e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ec:	ec57 6b10 	vmov	r6, r7, d0
 800b1f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b1f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b1f8:	ed8d 1b00 	vstr	d1, [sp]
 800b1fc:	da07      	bge.n	800b20e <__kernel_cos+0x26>
 800b1fe:	ee10 0a10 	vmov	r0, s0
 800b202:	4639      	mov	r1, r7
 800b204:	f7f5 fca8 	bl	8000b58 <__aeabi_d2iz>
 800b208:	2800      	cmp	r0, #0
 800b20a:	f000 8088 	beq.w	800b31e <__kernel_cos+0x136>
 800b20e:	4632      	mov	r2, r6
 800b210:	463b      	mov	r3, r7
 800b212:	4630      	mov	r0, r6
 800b214:	4639      	mov	r1, r7
 800b216:	f7f5 f9ef 	bl	80005f8 <__aeabi_dmul>
 800b21a:	4b51      	ldr	r3, [pc, #324]	; (800b360 <__kernel_cos+0x178>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	4604      	mov	r4, r0
 800b220:	460d      	mov	r5, r1
 800b222:	f7f5 f9e9 	bl	80005f8 <__aeabi_dmul>
 800b226:	a340      	add	r3, pc, #256	; (adr r3, 800b328 <__kernel_cos+0x140>)
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	4682      	mov	sl, r0
 800b22e:	468b      	mov	fp, r1
 800b230:	4620      	mov	r0, r4
 800b232:	4629      	mov	r1, r5
 800b234:	f7f5 f9e0 	bl	80005f8 <__aeabi_dmul>
 800b238:	a33d      	add	r3, pc, #244	; (adr r3, 800b330 <__kernel_cos+0x148>)
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	f7f5 f825 	bl	800028c <__adddf3>
 800b242:	4622      	mov	r2, r4
 800b244:	462b      	mov	r3, r5
 800b246:	f7f5 f9d7 	bl	80005f8 <__aeabi_dmul>
 800b24a:	a33b      	add	r3, pc, #236	; (adr r3, 800b338 <__kernel_cos+0x150>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	f7f5 f81a 	bl	8000288 <__aeabi_dsub>
 800b254:	4622      	mov	r2, r4
 800b256:	462b      	mov	r3, r5
 800b258:	f7f5 f9ce 	bl	80005f8 <__aeabi_dmul>
 800b25c:	a338      	add	r3, pc, #224	; (adr r3, 800b340 <__kernel_cos+0x158>)
 800b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b262:	f7f5 f813 	bl	800028c <__adddf3>
 800b266:	4622      	mov	r2, r4
 800b268:	462b      	mov	r3, r5
 800b26a:	f7f5 f9c5 	bl	80005f8 <__aeabi_dmul>
 800b26e:	a336      	add	r3, pc, #216	; (adr r3, 800b348 <__kernel_cos+0x160>)
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	f7f5 f808 	bl	8000288 <__aeabi_dsub>
 800b278:	4622      	mov	r2, r4
 800b27a:	462b      	mov	r3, r5
 800b27c:	f7f5 f9bc 	bl	80005f8 <__aeabi_dmul>
 800b280:	a333      	add	r3, pc, #204	; (adr r3, 800b350 <__kernel_cos+0x168>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	f7f5 f801 	bl	800028c <__adddf3>
 800b28a:	4622      	mov	r2, r4
 800b28c:	462b      	mov	r3, r5
 800b28e:	f7f5 f9b3 	bl	80005f8 <__aeabi_dmul>
 800b292:	4622      	mov	r2, r4
 800b294:	462b      	mov	r3, r5
 800b296:	f7f5 f9af 	bl	80005f8 <__aeabi_dmul>
 800b29a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b29e:	4604      	mov	r4, r0
 800b2a0:	460d      	mov	r5, r1
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	4639      	mov	r1, r7
 800b2a6:	f7f5 f9a7 	bl	80005f8 <__aeabi_dmul>
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f7f4 ffe9 	bl	8000288 <__aeabi_dsub>
 800b2b6:	4b2b      	ldr	r3, [pc, #172]	; (800b364 <__kernel_cos+0x17c>)
 800b2b8:	4598      	cmp	r8, r3
 800b2ba:	4606      	mov	r6, r0
 800b2bc:	460f      	mov	r7, r1
 800b2be:	dc10      	bgt.n	800b2e2 <__kernel_cos+0xfa>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4650      	mov	r0, sl
 800b2c6:	4659      	mov	r1, fp
 800b2c8:	f7f4 ffde 	bl	8000288 <__aeabi_dsub>
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	4926      	ldr	r1, [pc, #152]	; (800b368 <__kernel_cos+0x180>)
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	f7f4 ffd8 	bl	8000288 <__aeabi_dsub>
 800b2d8:	ec41 0b10 	vmov	d0, r0, r1
 800b2dc:	b003      	add	sp, #12
 800b2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e2:	4b22      	ldr	r3, [pc, #136]	; (800b36c <__kernel_cos+0x184>)
 800b2e4:	4920      	ldr	r1, [pc, #128]	; (800b368 <__kernel_cos+0x180>)
 800b2e6:	4598      	cmp	r8, r3
 800b2e8:	bfcc      	ite	gt
 800b2ea:	4d21      	ldrgt	r5, [pc, #132]	; (800b370 <__kernel_cos+0x188>)
 800b2ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b2f0:	2400      	movs	r4, #0
 800b2f2:	4622      	mov	r2, r4
 800b2f4:	462b      	mov	r3, r5
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	f7f4 ffc6 	bl	8000288 <__aeabi_dsub>
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	4680      	mov	r8, r0
 800b300:	4689      	mov	r9, r1
 800b302:	462b      	mov	r3, r5
 800b304:	4650      	mov	r0, sl
 800b306:	4659      	mov	r1, fp
 800b308:	f7f4 ffbe 	bl	8000288 <__aeabi_dsub>
 800b30c:	4632      	mov	r2, r6
 800b30e:	463b      	mov	r3, r7
 800b310:	f7f4 ffba 	bl	8000288 <__aeabi_dsub>
 800b314:	4602      	mov	r2, r0
 800b316:	460b      	mov	r3, r1
 800b318:	4640      	mov	r0, r8
 800b31a:	4649      	mov	r1, r9
 800b31c:	e7da      	b.n	800b2d4 <__kernel_cos+0xec>
 800b31e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b358 <__kernel_cos+0x170>
 800b322:	e7db      	b.n	800b2dc <__kernel_cos+0xf4>
 800b324:	f3af 8000 	nop.w
 800b328:	be8838d4 	.word	0xbe8838d4
 800b32c:	bda8fae9 	.word	0xbda8fae9
 800b330:	bdb4b1c4 	.word	0xbdb4b1c4
 800b334:	3e21ee9e 	.word	0x3e21ee9e
 800b338:	809c52ad 	.word	0x809c52ad
 800b33c:	3e927e4f 	.word	0x3e927e4f
 800b340:	19cb1590 	.word	0x19cb1590
 800b344:	3efa01a0 	.word	0x3efa01a0
 800b348:	16c15177 	.word	0x16c15177
 800b34c:	3f56c16c 	.word	0x3f56c16c
 800b350:	5555554c 	.word	0x5555554c
 800b354:	3fa55555 	.word	0x3fa55555
 800b358:	00000000 	.word	0x00000000
 800b35c:	3ff00000 	.word	0x3ff00000
 800b360:	3fe00000 	.word	0x3fe00000
 800b364:	3fd33332 	.word	0x3fd33332
 800b368:	3ff00000 	.word	0x3ff00000
 800b36c:	3fe90000 	.word	0x3fe90000
 800b370:	3fd20000 	.word	0x3fd20000
 800b374:	00000000 	.word	0x00000000

0800b378 <__kernel_rem_pio2>:
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	ed2d 8b02 	vpush	{d8}
 800b380:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b384:	f112 0f14 	cmn.w	r2, #20
 800b388:	9308      	str	r3, [sp, #32]
 800b38a:	9101      	str	r1, [sp, #4]
 800b38c:	4bc4      	ldr	r3, [pc, #784]	; (800b6a0 <__kernel_rem_pio2+0x328>)
 800b38e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b390:	900b      	str	r0, [sp, #44]	; 0x2c
 800b392:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b396:	9302      	str	r3, [sp, #8]
 800b398:	9b08      	ldr	r3, [sp, #32]
 800b39a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b39e:	bfa8      	it	ge
 800b3a0:	1ed4      	subge	r4, r2, #3
 800b3a2:	9306      	str	r3, [sp, #24]
 800b3a4:	bfb2      	itee	lt
 800b3a6:	2400      	movlt	r4, #0
 800b3a8:	2318      	movge	r3, #24
 800b3aa:	fb94 f4f3 	sdivge	r4, r4, r3
 800b3ae:	f06f 0317 	mvn.w	r3, #23
 800b3b2:	fb04 3303 	mla	r3, r4, r3, r3
 800b3b6:	eb03 0a02 	add.w	sl, r3, r2
 800b3ba:	9b02      	ldr	r3, [sp, #8]
 800b3bc:	9a06      	ldr	r2, [sp, #24]
 800b3be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b690 <__kernel_rem_pio2+0x318>
 800b3c2:	eb03 0802 	add.w	r8, r3, r2
 800b3c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b3c8:	1aa7      	subs	r7, r4, r2
 800b3ca:	ae22      	add	r6, sp, #136	; 0x88
 800b3cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b3d0:	2500      	movs	r5, #0
 800b3d2:	4545      	cmp	r5, r8
 800b3d4:	dd13      	ble.n	800b3fe <__kernel_rem_pio2+0x86>
 800b3d6:	9b08      	ldr	r3, [sp, #32]
 800b3d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b690 <__kernel_rem_pio2+0x318>
 800b3dc:	aa22      	add	r2, sp, #136	; 0x88
 800b3de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b3e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b3e6:	f04f 0800 	mov.w	r8, #0
 800b3ea:	9b02      	ldr	r3, [sp, #8]
 800b3ec:	4598      	cmp	r8, r3
 800b3ee:	dc2f      	bgt.n	800b450 <__kernel_rem_pio2+0xd8>
 800b3f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b3f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b3f8:	462f      	mov	r7, r5
 800b3fa:	2600      	movs	r6, #0
 800b3fc:	e01b      	b.n	800b436 <__kernel_rem_pio2+0xbe>
 800b3fe:	42ef      	cmn	r7, r5
 800b400:	d407      	bmi.n	800b412 <__kernel_rem_pio2+0x9a>
 800b402:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b406:	f7f5 f88d 	bl	8000524 <__aeabi_i2d>
 800b40a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b40e:	3501      	adds	r5, #1
 800b410:	e7df      	b.n	800b3d2 <__kernel_rem_pio2+0x5a>
 800b412:	ec51 0b18 	vmov	r0, r1, d8
 800b416:	e7f8      	b.n	800b40a <__kernel_rem_pio2+0x92>
 800b418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b41c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b420:	f7f5 f8ea 	bl	80005f8 <__aeabi_dmul>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b42c:	f7f4 ff2e 	bl	800028c <__adddf3>
 800b430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b434:	3601      	adds	r6, #1
 800b436:	9b06      	ldr	r3, [sp, #24]
 800b438:	429e      	cmp	r6, r3
 800b43a:	f1a7 0708 	sub.w	r7, r7, #8
 800b43e:	ddeb      	ble.n	800b418 <__kernel_rem_pio2+0xa0>
 800b440:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b444:	f108 0801 	add.w	r8, r8, #1
 800b448:	ecab 7b02 	vstmia	fp!, {d7}
 800b44c:	3508      	adds	r5, #8
 800b44e:	e7cc      	b.n	800b3ea <__kernel_rem_pio2+0x72>
 800b450:	9b02      	ldr	r3, [sp, #8]
 800b452:	aa0e      	add	r2, sp, #56	; 0x38
 800b454:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b458:	930d      	str	r3, [sp, #52]	; 0x34
 800b45a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b45c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b460:	9c02      	ldr	r4, [sp, #8]
 800b462:	930c      	str	r3, [sp, #48]	; 0x30
 800b464:	00e3      	lsls	r3, r4, #3
 800b466:	930a      	str	r3, [sp, #40]	; 0x28
 800b468:	ab9a      	add	r3, sp, #616	; 0x268
 800b46a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b46e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b472:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b476:	ab72      	add	r3, sp, #456	; 0x1c8
 800b478:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b47c:	46c3      	mov	fp, r8
 800b47e:	46a1      	mov	r9, r4
 800b480:	f1b9 0f00 	cmp.w	r9, #0
 800b484:	f1a5 0508 	sub.w	r5, r5, #8
 800b488:	dc77      	bgt.n	800b57a <__kernel_rem_pio2+0x202>
 800b48a:	ec47 6b10 	vmov	d0, r6, r7
 800b48e:	4650      	mov	r0, sl
 800b490:	f000 fc46 	bl	800bd20 <scalbn>
 800b494:	ec57 6b10 	vmov	r6, r7, d0
 800b498:	2200      	movs	r2, #0
 800b49a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b49e:	ee10 0a10 	vmov	r0, s0
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	f7f5 f8a8 	bl	80005f8 <__aeabi_dmul>
 800b4a8:	ec41 0b10 	vmov	d0, r0, r1
 800b4ac:	f000 fbb8 	bl	800bc20 <floor>
 800b4b0:	4b7c      	ldr	r3, [pc, #496]	; (800b6a4 <__kernel_rem_pio2+0x32c>)
 800b4b2:	ec51 0b10 	vmov	r0, r1, d0
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f7f5 f89e 	bl	80005f8 <__aeabi_dmul>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	f7f4 fee0 	bl	8000288 <__aeabi_dsub>
 800b4c8:	460f      	mov	r7, r1
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	f7f5 fb44 	bl	8000b58 <__aeabi_d2iz>
 800b4d0:	9004      	str	r0, [sp, #16]
 800b4d2:	f7f5 f827 	bl	8000524 <__aeabi_i2d>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4630      	mov	r0, r6
 800b4dc:	4639      	mov	r1, r7
 800b4de:	f7f4 fed3 	bl	8000288 <__aeabi_dsub>
 800b4e2:	f1ba 0f00 	cmp.w	sl, #0
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460f      	mov	r7, r1
 800b4ea:	dd6d      	ble.n	800b5c8 <__kernel_rem_pio2+0x250>
 800b4ec:	1e62      	subs	r2, r4, #1
 800b4ee:	ab0e      	add	r3, sp, #56	; 0x38
 800b4f0:	9d04      	ldr	r5, [sp, #16]
 800b4f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b4f6:	f1ca 0118 	rsb	r1, sl, #24
 800b4fa:	fa40 f301 	asr.w	r3, r0, r1
 800b4fe:	441d      	add	r5, r3
 800b500:	408b      	lsls	r3, r1
 800b502:	1ac0      	subs	r0, r0, r3
 800b504:	ab0e      	add	r3, sp, #56	; 0x38
 800b506:	9504      	str	r5, [sp, #16]
 800b508:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b50c:	f1ca 0317 	rsb	r3, sl, #23
 800b510:	fa40 fb03 	asr.w	fp, r0, r3
 800b514:	f1bb 0f00 	cmp.w	fp, #0
 800b518:	dd65      	ble.n	800b5e6 <__kernel_rem_pio2+0x26e>
 800b51a:	9b04      	ldr	r3, [sp, #16]
 800b51c:	2200      	movs	r2, #0
 800b51e:	3301      	adds	r3, #1
 800b520:	9304      	str	r3, [sp, #16]
 800b522:	4615      	mov	r5, r2
 800b524:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b528:	4294      	cmp	r4, r2
 800b52a:	f300 809c 	bgt.w	800b666 <__kernel_rem_pio2+0x2ee>
 800b52e:	f1ba 0f00 	cmp.w	sl, #0
 800b532:	dd07      	ble.n	800b544 <__kernel_rem_pio2+0x1cc>
 800b534:	f1ba 0f01 	cmp.w	sl, #1
 800b538:	f000 80c0 	beq.w	800b6bc <__kernel_rem_pio2+0x344>
 800b53c:	f1ba 0f02 	cmp.w	sl, #2
 800b540:	f000 80c6 	beq.w	800b6d0 <__kernel_rem_pio2+0x358>
 800b544:	f1bb 0f02 	cmp.w	fp, #2
 800b548:	d14d      	bne.n	800b5e6 <__kernel_rem_pio2+0x26e>
 800b54a:	4632      	mov	r2, r6
 800b54c:	463b      	mov	r3, r7
 800b54e:	4956      	ldr	r1, [pc, #344]	; (800b6a8 <__kernel_rem_pio2+0x330>)
 800b550:	2000      	movs	r0, #0
 800b552:	f7f4 fe99 	bl	8000288 <__aeabi_dsub>
 800b556:	4606      	mov	r6, r0
 800b558:	460f      	mov	r7, r1
 800b55a:	2d00      	cmp	r5, #0
 800b55c:	d043      	beq.n	800b5e6 <__kernel_rem_pio2+0x26e>
 800b55e:	4650      	mov	r0, sl
 800b560:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b698 <__kernel_rem_pio2+0x320>
 800b564:	f000 fbdc 	bl	800bd20 <scalbn>
 800b568:	4630      	mov	r0, r6
 800b56a:	4639      	mov	r1, r7
 800b56c:	ec53 2b10 	vmov	r2, r3, d0
 800b570:	f7f4 fe8a 	bl	8000288 <__aeabi_dsub>
 800b574:	4606      	mov	r6, r0
 800b576:	460f      	mov	r7, r1
 800b578:	e035      	b.n	800b5e6 <__kernel_rem_pio2+0x26e>
 800b57a:	4b4c      	ldr	r3, [pc, #304]	; (800b6ac <__kernel_rem_pio2+0x334>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	4630      	mov	r0, r6
 800b580:	4639      	mov	r1, r7
 800b582:	f7f5 f839 	bl	80005f8 <__aeabi_dmul>
 800b586:	f7f5 fae7 	bl	8000b58 <__aeabi_d2iz>
 800b58a:	f7f4 ffcb 	bl	8000524 <__aeabi_i2d>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	ec43 2b18 	vmov	d8, r2, r3
 800b596:	4b46      	ldr	r3, [pc, #280]	; (800b6b0 <__kernel_rem_pio2+0x338>)
 800b598:	2200      	movs	r2, #0
 800b59a:	f7f5 f82d 	bl	80005f8 <__aeabi_dmul>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	4639      	mov	r1, r7
 800b5a6:	f7f4 fe6f 	bl	8000288 <__aeabi_dsub>
 800b5aa:	f7f5 fad5 	bl	8000b58 <__aeabi_d2iz>
 800b5ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b5b2:	f84b 0b04 	str.w	r0, [fp], #4
 800b5b6:	ec51 0b18 	vmov	r0, r1, d8
 800b5ba:	f7f4 fe67 	bl	800028c <__adddf3>
 800b5be:	f109 39ff 	add.w	r9, r9, #4294967295
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	e75b      	b.n	800b480 <__kernel_rem_pio2+0x108>
 800b5c8:	d106      	bne.n	800b5d8 <__kernel_rem_pio2+0x260>
 800b5ca:	1e63      	subs	r3, r4, #1
 800b5cc:	aa0e      	add	r2, sp, #56	; 0x38
 800b5ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b5d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b5d6:	e79d      	b.n	800b514 <__kernel_rem_pio2+0x19c>
 800b5d8:	4b36      	ldr	r3, [pc, #216]	; (800b6b4 <__kernel_rem_pio2+0x33c>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f7f5 fa92 	bl	8000b04 <__aeabi_dcmpge>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d13d      	bne.n	800b660 <__kernel_rem_pio2+0x2e8>
 800b5e4:	4683      	mov	fp, r0
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	4639      	mov	r1, r7
 800b5ee:	f7f5 fa6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f000 80c0 	beq.w	800b778 <__kernel_rem_pio2+0x400>
 800b5f8:	1e65      	subs	r5, r4, #1
 800b5fa:	462b      	mov	r3, r5
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	9902      	ldr	r1, [sp, #8]
 800b600:	428b      	cmp	r3, r1
 800b602:	da6c      	bge.n	800b6de <__kernel_rem_pio2+0x366>
 800b604:	2a00      	cmp	r2, #0
 800b606:	f000 8089 	beq.w	800b71c <__kernel_rem_pio2+0x3a4>
 800b60a:	ab0e      	add	r3, sp, #56	; 0x38
 800b60c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b610:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 80ad 	beq.w	800b774 <__kernel_rem_pio2+0x3fc>
 800b61a:	4650      	mov	r0, sl
 800b61c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b698 <__kernel_rem_pio2+0x320>
 800b620:	f000 fb7e 	bl	800bd20 <scalbn>
 800b624:	ab9a      	add	r3, sp, #616	; 0x268
 800b626:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b62a:	ec57 6b10 	vmov	r6, r7, d0
 800b62e:	00ec      	lsls	r4, r5, #3
 800b630:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b634:	46aa      	mov	sl, r5
 800b636:	f1ba 0f00 	cmp.w	sl, #0
 800b63a:	f280 80d6 	bge.w	800b7ea <__kernel_rem_pio2+0x472>
 800b63e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b690 <__kernel_rem_pio2+0x318>
 800b642:	462e      	mov	r6, r5
 800b644:	2e00      	cmp	r6, #0
 800b646:	f2c0 8104 	blt.w	800b852 <__kernel_rem_pio2+0x4da>
 800b64a:	ab72      	add	r3, sp, #456	; 0x1c8
 800b64c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b650:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b6b8 <__kernel_rem_pio2+0x340>
 800b654:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b658:	f04f 0800 	mov.w	r8, #0
 800b65c:	1baf      	subs	r7, r5, r6
 800b65e:	e0ea      	b.n	800b836 <__kernel_rem_pio2+0x4be>
 800b660:	f04f 0b02 	mov.w	fp, #2
 800b664:	e759      	b.n	800b51a <__kernel_rem_pio2+0x1a2>
 800b666:	f8d8 3000 	ldr.w	r3, [r8]
 800b66a:	b955      	cbnz	r5, 800b682 <__kernel_rem_pio2+0x30a>
 800b66c:	b123      	cbz	r3, 800b678 <__kernel_rem_pio2+0x300>
 800b66e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b672:	f8c8 3000 	str.w	r3, [r8]
 800b676:	2301      	movs	r3, #1
 800b678:	3201      	adds	r2, #1
 800b67a:	f108 0804 	add.w	r8, r8, #4
 800b67e:	461d      	mov	r5, r3
 800b680:	e752      	b.n	800b528 <__kernel_rem_pio2+0x1b0>
 800b682:	1acb      	subs	r3, r1, r3
 800b684:	f8c8 3000 	str.w	r3, [r8]
 800b688:	462b      	mov	r3, r5
 800b68a:	e7f5      	b.n	800b678 <__kernel_rem_pio2+0x300>
 800b68c:	f3af 8000 	nop.w
	...
 800b69c:	3ff00000 	.word	0x3ff00000
 800b6a0:	0800c248 	.word	0x0800c248
 800b6a4:	40200000 	.word	0x40200000
 800b6a8:	3ff00000 	.word	0x3ff00000
 800b6ac:	3e700000 	.word	0x3e700000
 800b6b0:	41700000 	.word	0x41700000
 800b6b4:	3fe00000 	.word	0x3fe00000
 800b6b8:	0800c208 	.word	0x0800c208
 800b6bc:	1e62      	subs	r2, r4, #1
 800b6be:	ab0e      	add	r3, sp, #56	; 0x38
 800b6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b6c8:	a90e      	add	r1, sp, #56	; 0x38
 800b6ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b6ce:	e739      	b.n	800b544 <__kernel_rem_pio2+0x1cc>
 800b6d0:	1e62      	subs	r2, r4, #1
 800b6d2:	ab0e      	add	r3, sp, #56	; 0x38
 800b6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b6dc:	e7f4      	b.n	800b6c8 <__kernel_rem_pio2+0x350>
 800b6de:	a90e      	add	r1, sp, #56	; 0x38
 800b6e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	430a      	orrs	r2, r1
 800b6e8:	e789      	b.n	800b5fe <__kernel_rem_pio2+0x286>
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b6f0:	2900      	cmp	r1, #0
 800b6f2:	d0fa      	beq.n	800b6ea <__kernel_rem_pio2+0x372>
 800b6f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6f6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b6fa:	446a      	add	r2, sp
 800b6fc:	3a98      	subs	r2, #152	; 0x98
 800b6fe:	920a      	str	r2, [sp, #40]	; 0x28
 800b700:	9a08      	ldr	r2, [sp, #32]
 800b702:	18e3      	adds	r3, r4, r3
 800b704:	18a5      	adds	r5, r4, r2
 800b706:	aa22      	add	r2, sp, #136	; 0x88
 800b708:	f104 0801 	add.w	r8, r4, #1
 800b70c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b710:	9304      	str	r3, [sp, #16]
 800b712:	9b04      	ldr	r3, [sp, #16]
 800b714:	4543      	cmp	r3, r8
 800b716:	da04      	bge.n	800b722 <__kernel_rem_pio2+0x3aa>
 800b718:	461c      	mov	r4, r3
 800b71a:	e6a3      	b.n	800b464 <__kernel_rem_pio2+0xec>
 800b71c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b71e:	2301      	movs	r3, #1
 800b720:	e7e4      	b.n	800b6ec <__kernel_rem_pio2+0x374>
 800b722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b724:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b728:	f7f4 fefc 	bl	8000524 <__aeabi_i2d>
 800b72c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b732:	46ab      	mov	fp, r5
 800b734:	461c      	mov	r4, r3
 800b736:	f04f 0900 	mov.w	r9, #0
 800b73a:	2600      	movs	r6, #0
 800b73c:	2700      	movs	r7, #0
 800b73e:	9b06      	ldr	r3, [sp, #24]
 800b740:	4599      	cmp	r9, r3
 800b742:	dd06      	ble.n	800b752 <__kernel_rem_pio2+0x3da>
 800b744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b746:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b74a:	f108 0801 	add.w	r8, r8, #1
 800b74e:	930a      	str	r3, [sp, #40]	; 0x28
 800b750:	e7df      	b.n	800b712 <__kernel_rem_pio2+0x39a>
 800b752:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b756:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b75a:	f7f4 ff4d 	bl	80005f8 <__aeabi_dmul>
 800b75e:	4602      	mov	r2, r0
 800b760:	460b      	mov	r3, r1
 800b762:	4630      	mov	r0, r6
 800b764:	4639      	mov	r1, r7
 800b766:	f7f4 fd91 	bl	800028c <__adddf3>
 800b76a:	f109 0901 	add.w	r9, r9, #1
 800b76e:	4606      	mov	r6, r0
 800b770:	460f      	mov	r7, r1
 800b772:	e7e4      	b.n	800b73e <__kernel_rem_pio2+0x3c6>
 800b774:	3d01      	subs	r5, #1
 800b776:	e748      	b.n	800b60a <__kernel_rem_pio2+0x292>
 800b778:	ec47 6b10 	vmov	d0, r6, r7
 800b77c:	f1ca 0000 	rsb	r0, sl, #0
 800b780:	f000 face 	bl	800bd20 <scalbn>
 800b784:	ec57 6b10 	vmov	r6, r7, d0
 800b788:	4ba0      	ldr	r3, [pc, #640]	; (800ba0c <__kernel_rem_pio2+0x694>)
 800b78a:	ee10 0a10 	vmov	r0, s0
 800b78e:	2200      	movs	r2, #0
 800b790:	4639      	mov	r1, r7
 800b792:	f7f5 f9b7 	bl	8000b04 <__aeabi_dcmpge>
 800b796:	b1f8      	cbz	r0, 800b7d8 <__kernel_rem_pio2+0x460>
 800b798:	4b9d      	ldr	r3, [pc, #628]	; (800ba10 <__kernel_rem_pio2+0x698>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	4630      	mov	r0, r6
 800b79e:	4639      	mov	r1, r7
 800b7a0:	f7f4 ff2a 	bl	80005f8 <__aeabi_dmul>
 800b7a4:	f7f5 f9d8 	bl	8000b58 <__aeabi_d2iz>
 800b7a8:	4680      	mov	r8, r0
 800b7aa:	f7f4 febb 	bl	8000524 <__aeabi_i2d>
 800b7ae:	4b97      	ldr	r3, [pc, #604]	; (800ba0c <__kernel_rem_pio2+0x694>)
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f7f4 ff21 	bl	80005f8 <__aeabi_dmul>
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f7f4 fd63 	bl	8000288 <__aeabi_dsub>
 800b7c2:	f7f5 f9c9 	bl	8000b58 <__aeabi_d2iz>
 800b7c6:	1c65      	adds	r5, r4, #1
 800b7c8:	ab0e      	add	r3, sp, #56	; 0x38
 800b7ca:	f10a 0a18 	add.w	sl, sl, #24
 800b7ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b7d2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b7d6:	e720      	b.n	800b61a <__kernel_rem_pio2+0x2a2>
 800b7d8:	4630      	mov	r0, r6
 800b7da:	4639      	mov	r1, r7
 800b7dc:	f7f5 f9bc 	bl	8000b58 <__aeabi_d2iz>
 800b7e0:	ab0e      	add	r3, sp, #56	; 0x38
 800b7e2:	4625      	mov	r5, r4
 800b7e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b7e8:	e717      	b.n	800b61a <__kernel_rem_pio2+0x2a2>
 800b7ea:	ab0e      	add	r3, sp, #56	; 0x38
 800b7ec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b7f0:	f7f4 fe98 	bl	8000524 <__aeabi_i2d>
 800b7f4:	4632      	mov	r2, r6
 800b7f6:	463b      	mov	r3, r7
 800b7f8:	f7f4 fefe 	bl	80005f8 <__aeabi_dmul>
 800b7fc:	4b84      	ldr	r3, [pc, #528]	; (800ba10 <__kernel_rem_pio2+0x698>)
 800b7fe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b802:	2200      	movs	r2, #0
 800b804:	4630      	mov	r0, r6
 800b806:	4639      	mov	r1, r7
 800b808:	f7f4 fef6 	bl	80005f8 <__aeabi_dmul>
 800b80c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b810:	4606      	mov	r6, r0
 800b812:	460f      	mov	r7, r1
 800b814:	e70f      	b.n	800b636 <__kernel_rem_pio2+0x2be>
 800b816:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b81a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b81e:	f7f4 feeb 	bl	80005f8 <__aeabi_dmul>
 800b822:	4602      	mov	r2, r0
 800b824:	460b      	mov	r3, r1
 800b826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b82a:	f7f4 fd2f 	bl	800028c <__adddf3>
 800b82e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b832:	f108 0801 	add.w	r8, r8, #1
 800b836:	9b02      	ldr	r3, [sp, #8]
 800b838:	4598      	cmp	r8, r3
 800b83a:	dc01      	bgt.n	800b840 <__kernel_rem_pio2+0x4c8>
 800b83c:	45b8      	cmp	r8, r7
 800b83e:	ddea      	ble.n	800b816 <__kernel_rem_pio2+0x49e>
 800b840:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b844:	ab4a      	add	r3, sp, #296	; 0x128
 800b846:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b84a:	ed87 7b00 	vstr	d7, [r7]
 800b84e:	3e01      	subs	r6, #1
 800b850:	e6f8      	b.n	800b644 <__kernel_rem_pio2+0x2cc>
 800b852:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b854:	2b02      	cmp	r3, #2
 800b856:	dc0b      	bgt.n	800b870 <__kernel_rem_pio2+0x4f8>
 800b858:	2b00      	cmp	r3, #0
 800b85a:	dc35      	bgt.n	800b8c8 <__kernel_rem_pio2+0x550>
 800b85c:	d059      	beq.n	800b912 <__kernel_rem_pio2+0x59a>
 800b85e:	9b04      	ldr	r3, [sp, #16]
 800b860:	f003 0007 	and.w	r0, r3, #7
 800b864:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b868:	ecbd 8b02 	vpop	{d8}
 800b86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b870:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b872:	2b03      	cmp	r3, #3
 800b874:	d1f3      	bne.n	800b85e <__kernel_rem_pio2+0x4e6>
 800b876:	ab4a      	add	r3, sp, #296	; 0x128
 800b878:	4423      	add	r3, r4
 800b87a:	9306      	str	r3, [sp, #24]
 800b87c:	461c      	mov	r4, r3
 800b87e:	469a      	mov	sl, r3
 800b880:	9502      	str	r5, [sp, #8]
 800b882:	9b02      	ldr	r3, [sp, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	f1aa 0a08 	sub.w	sl, sl, #8
 800b88a:	dc6b      	bgt.n	800b964 <__kernel_rem_pio2+0x5ec>
 800b88c:	46aa      	mov	sl, r5
 800b88e:	f1ba 0f01 	cmp.w	sl, #1
 800b892:	f1a4 0408 	sub.w	r4, r4, #8
 800b896:	f300 8085 	bgt.w	800b9a4 <__kernel_rem_pio2+0x62c>
 800b89a:	9c06      	ldr	r4, [sp, #24]
 800b89c:	2000      	movs	r0, #0
 800b89e:	3408      	adds	r4, #8
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	2d01      	cmp	r5, #1
 800b8a4:	f300 809d 	bgt.w	800b9e2 <__kernel_rem_pio2+0x66a>
 800b8a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b8ac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b8b0:	f1bb 0f00 	cmp.w	fp, #0
 800b8b4:	f040 809b 	bne.w	800b9ee <__kernel_rem_pio2+0x676>
 800b8b8:	9b01      	ldr	r3, [sp, #4]
 800b8ba:	e9c3 5600 	strd	r5, r6, [r3]
 800b8be:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b8c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b8c6:	e7ca      	b.n	800b85e <__kernel_rem_pio2+0x4e6>
 800b8c8:	3408      	adds	r4, #8
 800b8ca:	ab4a      	add	r3, sp, #296	; 0x128
 800b8cc:	441c      	add	r4, r3
 800b8ce:	462e      	mov	r6, r5
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	2e00      	cmp	r6, #0
 800b8d6:	da36      	bge.n	800b946 <__kernel_rem_pio2+0x5ce>
 800b8d8:	f1bb 0f00 	cmp.w	fp, #0
 800b8dc:	d039      	beq.n	800b952 <__kernel_rem_pio2+0x5da>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8e4:	9c01      	ldr	r4, [sp, #4]
 800b8e6:	e9c4 2300 	strd	r2, r3, [r4]
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b8f2:	f7f4 fcc9 	bl	8000288 <__aeabi_dsub>
 800b8f6:	ae4c      	add	r6, sp, #304	; 0x130
 800b8f8:	2401      	movs	r4, #1
 800b8fa:	42a5      	cmp	r5, r4
 800b8fc:	da2c      	bge.n	800b958 <__kernel_rem_pio2+0x5e0>
 800b8fe:	f1bb 0f00 	cmp.w	fp, #0
 800b902:	d002      	beq.n	800b90a <__kernel_rem_pio2+0x592>
 800b904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b908:	4619      	mov	r1, r3
 800b90a:	9b01      	ldr	r3, [sp, #4]
 800b90c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b910:	e7a5      	b.n	800b85e <__kernel_rem_pio2+0x4e6>
 800b912:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b916:	eb0d 0403 	add.w	r4, sp, r3
 800b91a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b91e:	2000      	movs	r0, #0
 800b920:	2100      	movs	r1, #0
 800b922:	2d00      	cmp	r5, #0
 800b924:	da09      	bge.n	800b93a <__kernel_rem_pio2+0x5c2>
 800b926:	f1bb 0f00 	cmp.w	fp, #0
 800b92a:	d002      	beq.n	800b932 <__kernel_rem_pio2+0x5ba>
 800b92c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b930:	4619      	mov	r1, r3
 800b932:	9b01      	ldr	r3, [sp, #4]
 800b934:	e9c3 0100 	strd	r0, r1, [r3]
 800b938:	e791      	b.n	800b85e <__kernel_rem_pio2+0x4e6>
 800b93a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b93e:	f7f4 fca5 	bl	800028c <__adddf3>
 800b942:	3d01      	subs	r5, #1
 800b944:	e7ed      	b.n	800b922 <__kernel_rem_pio2+0x5aa>
 800b946:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b94a:	f7f4 fc9f 	bl	800028c <__adddf3>
 800b94e:	3e01      	subs	r6, #1
 800b950:	e7c0      	b.n	800b8d4 <__kernel_rem_pio2+0x55c>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	e7c5      	b.n	800b8e4 <__kernel_rem_pio2+0x56c>
 800b958:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b95c:	f7f4 fc96 	bl	800028c <__adddf3>
 800b960:	3401      	adds	r4, #1
 800b962:	e7ca      	b.n	800b8fa <__kernel_rem_pio2+0x582>
 800b964:	e9da 8900 	ldrd	r8, r9, [sl]
 800b968:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b96c:	9b02      	ldr	r3, [sp, #8]
 800b96e:	3b01      	subs	r3, #1
 800b970:	9302      	str	r3, [sp, #8]
 800b972:	4632      	mov	r2, r6
 800b974:	463b      	mov	r3, r7
 800b976:	4640      	mov	r0, r8
 800b978:	4649      	mov	r1, r9
 800b97a:	f7f4 fc87 	bl	800028c <__adddf3>
 800b97e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4640      	mov	r0, r8
 800b988:	4649      	mov	r1, r9
 800b98a:	f7f4 fc7d 	bl	8000288 <__aeabi_dsub>
 800b98e:	4632      	mov	r2, r6
 800b990:	463b      	mov	r3, r7
 800b992:	f7f4 fc7b 	bl	800028c <__adddf3>
 800b996:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b99a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b99e:	ed8a 7b00 	vstr	d7, [sl]
 800b9a2:	e76e      	b.n	800b882 <__kernel_rem_pio2+0x50a>
 800b9a4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b9a8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b9ac:	4640      	mov	r0, r8
 800b9ae:	4632      	mov	r2, r6
 800b9b0:	463b      	mov	r3, r7
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	f7f4 fc6a 	bl	800028c <__adddf3>
 800b9b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4640      	mov	r0, r8
 800b9c2:	4649      	mov	r1, r9
 800b9c4:	f7f4 fc60 	bl	8000288 <__aeabi_dsub>
 800b9c8:	4632      	mov	r2, r6
 800b9ca:	463b      	mov	r3, r7
 800b9cc:	f7f4 fc5e 	bl	800028c <__adddf3>
 800b9d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b9d8:	ed84 7b00 	vstr	d7, [r4]
 800b9dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9e0:	e755      	b.n	800b88e <__kernel_rem_pio2+0x516>
 800b9e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b9e6:	f7f4 fc51 	bl	800028c <__adddf3>
 800b9ea:	3d01      	subs	r5, #1
 800b9ec:	e759      	b.n	800b8a2 <__kernel_rem_pio2+0x52a>
 800b9ee:	9b01      	ldr	r3, [sp, #4]
 800b9f0:	9a01      	ldr	r2, [sp, #4]
 800b9f2:	601d      	str	r5, [r3, #0]
 800b9f4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b9f8:	605c      	str	r4, [r3, #4]
 800b9fa:	609f      	str	r7, [r3, #8]
 800b9fc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ba00:	60d3      	str	r3, [r2, #12]
 800ba02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba06:	6110      	str	r0, [r2, #16]
 800ba08:	6153      	str	r3, [r2, #20]
 800ba0a:	e728      	b.n	800b85e <__kernel_rem_pio2+0x4e6>
 800ba0c:	41700000 	.word	0x41700000
 800ba10:	3e700000 	.word	0x3e700000
 800ba14:	00000000 	.word	0x00000000

0800ba18 <__kernel_sin>:
 800ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1c:	ed2d 8b04 	vpush	{d8-d9}
 800ba20:	eeb0 8a41 	vmov.f32	s16, s2
 800ba24:	eef0 8a61 	vmov.f32	s17, s3
 800ba28:	ec55 4b10 	vmov	r4, r5, d0
 800ba2c:	b083      	sub	sp, #12
 800ba2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ba36:	9001      	str	r0, [sp, #4]
 800ba38:	da06      	bge.n	800ba48 <__kernel_sin+0x30>
 800ba3a:	ee10 0a10 	vmov	r0, s0
 800ba3e:	4629      	mov	r1, r5
 800ba40:	f7f5 f88a 	bl	8000b58 <__aeabi_d2iz>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d051      	beq.n	800baec <__kernel_sin+0xd4>
 800ba48:	4622      	mov	r2, r4
 800ba4a:	462b      	mov	r3, r5
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	4629      	mov	r1, r5
 800ba50:	f7f4 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ba54:	4682      	mov	sl, r0
 800ba56:	468b      	mov	fp, r1
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	4629      	mov	r1, r5
 800ba60:	f7f4 fdca 	bl	80005f8 <__aeabi_dmul>
 800ba64:	a341      	add	r3, pc, #260	; (adr r3, 800bb6c <__kernel_sin+0x154>)
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	4680      	mov	r8, r0
 800ba6c:	4689      	mov	r9, r1
 800ba6e:	4650      	mov	r0, sl
 800ba70:	4659      	mov	r1, fp
 800ba72:	f7f4 fdc1 	bl	80005f8 <__aeabi_dmul>
 800ba76:	a33f      	add	r3, pc, #252	; (adr r3, 800bb74 <__kernel_sin+0x15c>)
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	f7f4 fc04 	bl	8000288 <__aeabi_dsub>
 800ba80:	4652      	mov	r2, sl
 800ba82:	465b      	mov	r3, fp
 800ba84:	f7f4 fdb8 	bl	80005f8 <__aeabi_dmul>
 800ba88:	a33c      	add	r3, pc, #240	; (adr r3, 800bb7c <__kernel_sin+0x164>)
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	f7f4 fbfd 	bl	800028c <__adddf3>
 800ba92:	4652      	mov	r2, sl
 800ba94:	465b      	mov	r3, fp
 800ba96:	f7f4 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ba9a:	a33a      	add	r3, pc, #232	; (adr r3, 800bb84 <__kernel_sin+0x16c>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f7f4 fbf2 	bl	8000288 <__aeabi_dsub>
 800baa4:	4652      	mov	r2, sl
 800baa6:	465b      	mov	r3, fp
 800baa8:	f7f4 fda6 	bl	80005f8 <__aeabi_dmul>
 800baac:	a337      	add	r3, pc, #220	; (adr r3, 800bb8c <__kernel_sin+0x174>)
 800baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab2:	f7f4 fbeb 	bl	800028c <__adddf3>
 800bab6:	9b01      	ldr	r3, [sp, #4]
 800bab8:	4606      	mov	r6, r0
 800baba:	460f      	mov	r7, r1
 800babc:	b9eb      	cbnz	r3, 800bafa <__kernel_sin+0xe2>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	4650      	mov	r0, sl
 800bac4:	4659      	mov	r1, fp
 800bac6:	f7f4 fd97 	bl	80005f8 <__aeabi_dmul>
 800baca:	a325      	add	r3, pc, #148	; (adr r3, 800bb60 <__kernel_sin+0x148>)
 800bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad0:	f7f4 fbda 	bl	8000288 <__aeabi_dsub>
 800bad4:	4642      	mov	r2, r8
 800bad6:	464b      	mov	r3, r9
 800bad8:	f7f4 fd8e 	bl	80005f8 <__aeabi_dmul>
 800badc:	4602      	mov	r2, r0
 800bade:	460b      	mov	r3, r1
 800bae0:	4620      	mov	r0, r4
 800bae2:	4629      	mov	r1, r5
 800bae4:	f7f4 fbd2 	bl	800028c <__adddf3>
 800bae8:	4604      	mov	r4, r0
 800baea:	460d      	mov	r5, r1
 800baec:	ec45 4b10 	vmov	d0, r4, r5
 800baf0:	b003      	add	sp, #12
 800baf2:	ecbd 8b04 	vpop	{d8-d9}
 800baf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bafa:	4b1b      	ldr	r3, [pc, #108]	; (800bb68 <__kernel_sin+0x150>)
 800bafc:	ec51 0b18 	vmov	r0, r1, d8
 800bb00:	2200      	movs	r2, #0
 800bb02:	f7f4 fd79 	bl	80005f8 <__aeabi_dmul>
 800bb06:	4632      	mov	r2, r6
 800bb08:	ec41 0b19 	vmov	d9, r0, r1
 800bb0c:	463b      	mov	r3, r7
 800bb0e:	4640      	mov	r0, r8
 800bb10:	4649      	mov	r1, r9
 800bb12:	f7f4 fd71 	bl	80005f8 <__aeabi_dmul>
 800bb16:	4602      	mov	r2, r0
 800bb18:	460b      	mov	r3, r1
 800bb1a:	ec51 0b19 	vmov	r0, r1, d9
 800bb1e:	f7f4 fbb3 	bl	8000288 <__aeabi_dsub>
 800bb22:	4652      	mov	r2, sl
 800bb24:	465b      	mov	r3, fp
 800bb26:	f7f4 fd67 	bl	80005f8 <__aeabi_dmul>
 800bb2a:	ec53 2b18 	vmov	r2, r3, d8
 800bb2e:	f7f4 fbab 	bl	8000288 <__aeabi_dsub>
 800bb32:	a30b      	add	r3, pc, #44	; (adr r3, 800bb60 <__kernel_sin+0x148>)
 800bb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb38:	4606      	mov	r6, r0
 800bb3a:	460f      	mov	r7, r1
 800bb3c:	4640      	mov	r0, r8
 800bb3e:	4649      	mov	r1, r9
 800bb40:	f7f4 fd5a 	bl	80005f8 <__aeabi_dmul>
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	4630      	mov	r0, r6
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	f7f4 fb9e 	bl	800028c <__adddf3>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4620      	mov	r0, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	f7f4 fb96 	bl	8000288 <__aeabi_dsub>
 800bb5c:	e7c4      	b.n	800bae8 <__kernel_sin+0xd0>
 800bb5e:	bf00      	nop
 800bb60:	55555549 	.word	0x55555549
 800bb64:	3fc55555 	.word	0x3fc55555
 800bb68:	3fe00000 	.word	0x3fe00000
 800bb6c:	5acfd57c 	.word	0x5acfd57c
 800bb70:	3de5d93a 	.word	0x3de5d93a
 800bb74:	8a2b9ceb 	.word	0x8a2b9ceb
 800bb78:	3e5ae5e6 	.word	0x3e5ae5e6
 800bb7c:	57b1fe7d 	.word	0x57b1fe7d
 800bb80:	3ec71de3 	.word	0x3ec71de3
 800bb84:	19c161d5 	.word	0x19c161d5
 800bb88:	3f2a01a0 	.word	0x3f2a01a0
 800bb8c:	1110f8a6 	.word	0x1110f8a6
 800bb90:	3f811111 	.word	0x3f811111

0800bb94 <with_errno>:
 800bb94:	b570      	push	{r4, r5, r6, lr}
 800bb96:	4604      	mov	r4, r0
 800bb98:	460d      	mov	r5, r1
 800bb9a:	4616      	mov	r6, r2
 800bb9c:	f7fd fd76 	bl	800968c <__errno>
 800bba0:	4629      	mov	r1, r5
 800bba2:	6006      	str	r6, [r0, #0]
 800bba4:	4620      	mov	r0, r4
 800bba6:	bd70      	pop	{r4, r5, r6, pc}

0800bba8 <xflow>:
 800bba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbaa:	4614      	mov	r4, r2
 800bbac:	461d      	mov	r5, r3
 800bbae:	b108      	cbz	r0, 800bbb4 <xflow+0xc>
 800bbb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bbb4:	e9cd 2300 	strd	r2, r3, [sp]
 800bbb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	f7f4 fd1a 	bl	80005f8 <__aeabi_dmul>
 800bbc4:	2222      	movs	r2, #34	; 0x22
 800bbc6:	b003      	add	sp, #12
 800bbc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbcc:	f7ff bfe2 	b.w	800bb94 <with_errno>

0800bbd0 <__math_uflow>:
 800bbd0:	b508      	push	{r3, lr}
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bbd8:	f7ff ffe6 	bl	800bba8 <xflow>
 800bbdc:	ec41 0b10 	vmov	d0, r0, r1
 800bbe0:	bd08      	pop	{r3, pc}

0800bbe2 <__math_oflow>:
 800bbe2:	b508      	push	{r3, lr}
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bbea:	f7ff ffdd 	bl	800bba8 <xflow>
 800bbee:	ec41 0b10 	vmov	d0, r0, r1
 800bbf2:	bd08      	pop	{r3, pc}

0800bbf4 <fabs>:
 800bbf4:	ec51 0b10 	vmov	r0, r1, d0
 800bbf8:	ee10 2a10 	vmov	r2, s0
 800bbfc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc00:	ec43 2b10 	vmov	d0, r2, r3
 800bc04:	4770      	bx	lr

0800bc06 <finite>:
 800bc06:	b082      	sub	sp, #8
 800bc08:	ed8d 0b00 	vstr	d0, [sp]
 800bc0c:	9801      	ldr	r0, [sp, #4]
 800bc0e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bc12:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bc16:	0fc0      	lsrs	r0, r0, #31
 800bc18:	b002      	add	sp, #8
 800bc1a:	4770      	bx	lr
 800bc1c:	0000      	movs	r0, r0
	...

0800bc20 <floor>:
 800bc20:	ec51 0b10 	vmov	r0, r1, d0
 800bc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bc2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bc30:	2e13      	cmp	r6, #19
 800bc32:	ee10 5a10 	vmov	r5, s0
 800bc36:	ee10 8a10 	vmov	r8, s0
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	dc32      	bgt.n	800bca4 <floor+0x84>
 800bc3e:	2e00      	cmp	r6, #0
 800bc40:	da14      	bge.n	800bc6c <floor+0x4c>
 800bc42:	a333      	add	r3, pc, #204	; (adr r3, 800bd10 <floor+0xf0>)
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	f7f4 fb20 	bl	800028c <__adddf3>
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f7f4 ff62 	bl	8000b18 <__aeabi_dcmpgt>
 800bc54:	b138      	cbz	r0, 800bc66 <floor+0x46>
 800bc56:	2c00      	cmp	r4, #0
 800bc58:	da57      	bge.n	800bd0a <floor+0xea>
 800bc5a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bc5e:	431d      	orrs	r5, r3
 800bc60:	d001      	beq.n	800bc66 <floor+0x46>
 800bc62:	4c2d      	ldr	r4, [pc, #180]	; (800bd18 <floor+0xf8>)
 800bc64:	2500      	movs	r5, #0
 800bc66:	4621      	mov	r1, r4
 800bc68:	4628      	mov	r0, r5
 800bc6a:	e025      	b.n	800bcb8 <floor+0x98>
 800bc6c:	4f2b      	ldr	r7, [pc, #172]	; (800bd1c <floor+0xfc>)
 800bc6e:	4137      	asrs	r7, r6
 800bc70:	ea01 0307 	and.w	r3, r1, r7
 800bc74:	4303      	orrs	r3, r0
 800bc76:	d01f      	beq.n	800bcb8 <floor+0x98>
 800bc78:	a325      	add	r3, pc, #148	; (adr r3, 800bd10 <floor+0xf0>)
 800bc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7e:	f7f4 fb05 	bl	800028c <__adddf3>
 800bc82:	2200      	movs	r2, #0
 800bc84:	2300      	movs	r3, #0
 800bc86:	f7f4 ff47 	bl	8000b18 <__aeabi_dcmpgt>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	d0eb      	beq.n	800bc66 <floor+0x46>
 800bc8e:	2c00      	cmp	r4, #0
 800bc90:	bfbe      	ittt	lt
 800bc92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bc96:	fa43 f606 	asrlt.w	r6, r3, r6
 800bc9a:	19a4      	addlt	r4, r4, r6
 800bc9c:	ea24 0407 	bic.w	r4, r4, r7
 800bca0:	2500      	movs	r5, #0
 800bca2:	e7e0      	b.n	800bc66 <floor+0x46>
 800bca4:	2e33      	cmp	r6, #51	; 0x33
 800bca6:	dd0b      	ble.n	800bcc0 <floor+0xa0>
 800bca8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bcac:	d104      	bne.n	800bcb8 <floor+0x98>
 800bcae:	ee10 2a10 	vmov	r2, s0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	f7f4 faea 	bl	800028c <__adddf3>
 800bcb8:	ec41 0b10 	vmov	d0, r0, r1
 800bcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bcc4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcc8:	fa23 f707 	lsr.w	r7, r3, r7
 800bccc:	4207      	tst	r7, r0
 800bcce:	d0f3      	beq.n	800bcb8 <floor+0x98>
 800bcd0:	a30f      	add	r3, pc, #60	; (adr r3, 800bd10 <floor+0xf0>)
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	f7f4 fad9 	bl	800028c <__adddf3>
 800bcda:	2200      	movs	r2, #0
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f7f4 ff1b 	bl	8000b18 <__aeabi_dcmpgt>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d0bf      	beq.n	800bc66 <floor+0x46>
 800bce6:	2c00      	cmp	r4, #0
 800bce8:	da02      	bge.n	800bcf0 <floor+0xd0>
 800bcea:	2e14      	cmp	r6, #20
 800bcec:	d103      	bne.n	800bcf6 <floor+0xd6>
 800bcee:	3401      	adds	r4, #1
 800bcf0:	ea25 0507 	bic.w	r5, r5, r7
 800bcf4:	e7b7      	b.n	800bc66 <floor+0x46>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bcfc:	fa03 f606 	lsl.w	r6, r3, r6
 800bd00:	4435      	add	r5, r6
 800bd02:	4545      	cmp	r5, r8
 800bd04:	bf38      	it	cc
 800bd06:	18e4      	addcc	r4, r4, r3
 800bd08:	e7f2      	b.n	800bcf0 <floor+0xd0>
 800bd0a:	2500      	movs	r5, #0
 800bd0c:	462c      	mov	r4, r5
 800bd0e:	e7aa      	b.n	800bc66 <floor+0x46>
 800bd10:	8800759c 	.word	0x8800759c
 800bd14:	7e37e43c 	.word	0x7e37e43c
 800bd18:	bff00000 	.word	0xbff00000
 800bd1c:	000fffff 	.word	0x000fffff

0800bd20 <scalbn>:
 800bd20:	b570      	push	{r4, r5, r6, lr}
 800bd22:	ec55 4b10 	vmov	r4, r5, d0
 800bd26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	462b      	mov	r3, r5
 800bd2e:	b99a      	cbnz	r2, 800bd58 <scalbn+0x38>
 800bd30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bd34:	4323      	orrs	r3, r4
 800bd36:	d036      	beq.n	800bda6 <scalbn+0x86>
 800bd38:	4b39      	ldr	r3, [pc, #228]	; (800be20 <scalbn+0x100>)
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	ee10 0a10 	vmov	r0, s0
 800bd40:	2200      	movs	r2, #0
 800bd42:	f7f4 fc59 	bl	80005f8 <__aeabi_dmul>
 800bd46:	4b37      	ldr	r3, [pc, #220]	; (800be24 <scalbn+0x104>)
 800bd48:	429e      	cmp	r6, r3
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	460d      	mov	r5, r1
 800bd4e:	da10      	bge.n	800bd72 <scalbn+0x52>
 800bd50:	a32b      	add	r3, pc, #172	; (adr r3, 800be00 <scalbn+0xe0>)
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	e03a      	b.n	800bdce <scalbn+0xae>
 800bd58:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bd5c:	428a      	cmp	r2, r1
 800bd5e:	d10c      	bne.n	800bd7a <scalbn+0x5a>
 800bd60:	ee10 2a10 	vmov	r2, s0
 800bd64:	4620      	mov	r0, r4
 800bd66:	4629      	mov	r1, r5
 800bd68:	f7f4 fa90 	bl	800028c <__adddf3>
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	460d      	mov	r5, r1
 800bd70:	e019      	b.n	800bda6 <scalbn+0x86>
 800bd72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bd76:	460b      	mov	r3, r1
 800bd78:	3a36      	subs	r2, #54	; 0x36
 800bd7a:	4432      	add	r2, r6
 800bd7c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bd80:	428a      	cmp	r2, r1
 800bd82:	dd08      	ble.n	800bd96 <scalbn+0x76>
 800bd84:	2d00      	cmp	r5, #0
 800bd86:	a120      	add	r1, pc, #128	; (adr r1, 800be08 <scalbn+0xe8>)
 800bd88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd8c:	da1c      	bge.n	800bdc8 <scalbn+0xa8>
 800bd8e:	a120      	add	r1, pc, #128	; (adr r1, 800be10 <scalbn+0xf0>)
 800bd90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd94:	e018      	b.n	800bdc8 <scalbn+0xa8>
 800bd96:	2a00      	cmp	r2, #0
 800bd98:	dd08      	ble.n	800bdac <scalbn+0x8c>
 800bd9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bda2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bda6:	ec45 4b10 	vmov	d0, r4, r5
 800bdaa:	bd70      	pop	{r4, r5, r6, pc}
 800bdac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bdb0:	da19      	bge.n	800bde6 <scalbn+0xc6>
 800bdb2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bdb6:	429e      	cmp	r6, r3
 800bdb8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bdbc:	dd0a      	ble.n	800bdd4 <scalbn+0xb4>
 800bdbe:	a112      	add	r1, pc, #72	; (adr r1, 800be08 <scalbn+0xe8>)
 800bdc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d1e2      	bne.n	800bd8e <scalbn+0x6e>
 800bdc8:	a30f      	add	r3, pc, #60	; (adr r3, 800be08 <scalbn+0xe8>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f7f4 fc13 	bl	80005f8 <__aeabi_dmul>
 800bdd2:	e7cb      	b.n	800bd6c <scalbn+0x4c>
 800bdd4:	a10a      	add	r1, pc, #40	; (adr r1, 800be00 <scalbn+0xe0>)
 800bdd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d0b8      	beq.n	800bd50 <scalbn+0x30>
 800bdde:	a10e      	add	r1, pc, #56	; (adr r1, 800be18 <scalbn+0xf8>)
 800bde0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bde4:	e7b4      	b.n	800bd50 <scalbn+0x30>
 800bde6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bdea:	3236      	adds	r2, #54	; 0x36
 800bdec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bdf0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	4b0c      	ldr	r3, [pc, #48]	; (800be28 <scalbn+0x108>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	e7e8      	b.n	800bdce <scalbn+0xae>
 800bdfc:	f3af 8000 	nop.w
 800be00:	c2f8f359 	.word	0xc2f8f359
 800be04:	01a56e1f 	.word	0x01a56e1f
 800be08:	8800759c 	.word	0x8800759c
 800be0c:	7e37e43c 	.word	0x7e37e43c
 800be10:	8800759c 	.word	0x8800759c
 800be14:	fe37e43c 	.word	0xfe37e43c
 800be18:	c2f8f359 	.word	0xc2f8f359
 800be1c:	81a56e1f 	.word	0x81a56e1f
 800be20:	43500000 	.word	0x43500000
 800be24:	ffff3cb0 	.word	0xffff3cb0
 800be28:	3c900000 	.word	0x3c900000

0800be2c <_init>:
 800be2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2e:	bf00      	nop
 800be30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be32:	bc08      	pop	{r3}
 800be34:	469e      	mov	lr, r3
 800be36:	4770      	bx	lr

0800be38 <_fini>:
 800be38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3a:	bf00      	nop
 800be3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be3e:	bc08      	pop	{r3}
 800be40:	469e      	mov	lr, r3
 800be42:	4770      	bx	lr
